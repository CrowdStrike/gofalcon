GO=GO111MODULE=on go
GOBUILD=$(GO) build

all: build

build:
	$(GOBUILD) ./...

clean-generate: remove-generated generate

generate: specs/swagger-stripped-oauth.json swagger-cli
	$(SWAGGER) generate client --skip-validation -f $< -t falcon

.PHONY: build generate remove-generated

remove-generated:
	grep -lr falcon -e 'Code generated by go-swagger; DO NOT EDIT.' | xargs rm --

specs/swagger-stripped-oauth.json: specs/swagger-patched.json
	# We remove security info from swagger before generating golang API interface.
	# This achieves cleaner interface. OAuth is then applied automatically through the middle-ware.
	jq 'walk(if type == "object" and has("security") and (has("consumes") or has("produces")) then del(.security) else . end)' $< > $@

specs/swagger-patched.json: specs/swagger.json ./specs/transformation.jq
	jq -f ./specs/transformation.jq $< > $@

specs/swagger.json:
	@echo "Sorry swagger.json needs to be obtained manually at this moment"
	@exit 1

##@ Dependencies

## Location to install dependencies to
LOCALBIN ?= $(shell pwd)/bin
$(LOCALBIN):
	mkdir -p $(LOCALBIN)

## Tool Binaries
SWAGGER = $(LOCALBIN)/swagger

## Tool Versions
SWAGGER_VERSION ?= v0.31.0

.PHONY: swagger-cli
swagger-cli: $(SWAGGER) ## Download swagger locally if necessary.
$(SWAGGER): $(LOCALBIN)
	$(call go-install-tool,$(SWAGGER),github.com/go-swagger/go-swagger/cmd/swagger,$(SWAGGER_VERSION))

# go-install-tool will 'go install' any package with custom target and name of binary, if it doesn't exist
# $1 - target path with name of binary
# $2 - package url which can be installed
# $3 - specific version of package
define go-install-tool
@[ -f "$(1)-$(3)" ] || { \
set -e; \
package=$(2)@$(3) ;\
echo "Downloading $${package}" ;\
rm -f $(1) || true ;\
GOBIN=$(LOCALBIN) go install $${package} ;\
mv $(1) $(1)-$(3) ;\
} ;\
ln -sf $(1)-$(3) $(1)
endef
