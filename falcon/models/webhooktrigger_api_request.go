// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebhooktriggerAPIRequest webhooktrigger API request
//
// swagger:model webhooktrigger.APIRequest
type WebhooktriggerAPIRequest struct {

	// Authentication configuration settings
	AuthConfig *WebhooktriggerAuthConfig `json:"auth_config,omitempty"`

	// An optional change log describing the changes made in the update
	ChangeLog string `json:"change_log,omitempty"`

	// Description for the trigger.
	Description string `json:"description,omitempty"`

	// User friendly display name for the webhook trigger, this the fully qualified name that provides the context hierarchy.
	// Required: true
	Name *string `json:"name"`

	// user defined overrides for webhook response
	ResponseConfig *WebhooktriggerResponseConfig `json:"response_config,omitempty"`

	// JSON schema of fields in the output of this trigger
	WebhookSchema interface{} `json:"webhook_schema,omitempty"`
}

// Validate validates this webhooktrigger API request
func (m *WebhooktriggerAPIRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponseConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebhooktriggerAPIRequest) validateAuthConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthConfig) { // not required
		return nil
	}

	if m.AuthConfig != nil {
		if err := m.AuthConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auth_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auth_config")
			}
			return err
		}
	}

	return nil
}

func (m *WebhooktriggerAPIRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *WebhooktriggerAPIRequest) validateResponseConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ResponseConfig) { // not required
		return nil
	}

	if m.ResponseConfig != nil {
		if err := m.ResponseConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("response_config")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this webhooktrigger API request based on the context it is used
func (m *WebhooktriggerAPIRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResponseConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebhooktriggerAPIRequest) contextValidateAuthConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.AuthConfig != nil {

		if swag.IsZero(m.AuthConfig) { // not required
			return nil
		}

		if err := m.AuthConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auth_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auth_config")
			}
			return err
		}
	}

	return nil
}

func (m *WebhooktriggerAPIRequest) contextValidateResponseConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ResponseConfig != nil {

		if swag.IsZero(m.ResponseConfig) { // not required
			return nil
		}

		if err := m.ResponseConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("response_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebhooktriggerAPIRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebhooktriggerAPIRequest) UnmarshalBinary(b []byte) error {
	var res WebhooktriggerAPIRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
