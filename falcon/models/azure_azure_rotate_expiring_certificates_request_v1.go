// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureAzureRotateExpiringCertificatesRequestV1 azure azure rotate expiring certificates request v1
//
// swagger:model azure.AzureRotateExpiringCertificatesRequestV1
type AzureAzureRotateExpiringCertificatesRequestV1 struct {

	// batch size
	// Required: true
	BatchSize *int32 `json:"batch_size"`

	// days to expire
	// Required: true
	DaysToExpire *int32 `json:"days_to_expire"`

	// days valid
	// Required: true
	DaysValid *int32 `json:"days_valid"`
}

// Validate validates this azure azure rotate expiring certificates request v1
func (m *AzureAzureRotateExpiringCertificatesRequestV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBatchSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDaysToExpire(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDaysValid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureAzureRotateExpiringCertificatesRequestV1) validateBatchSize(formats strfmt.Registry) error {

	if err := validate.Required("batch_size", "body", m.BatchSize); err != nil {
		return err
	}

	return nil
}

func (m *AzureAzureRotateExpiringCertificatesRequestV1) validateDaysToExpire(formats strfmt.Registry) error {

	if err := validate.Required("days_to_expire", "body", m.DaysToExpire); err != nil {
		return err
	}

	return nil
}

func (m *AzureAzureRotateExpiringCertificatesRequestV1) validateDaysValid(formats strfmt.Registry) error {

	if err := validate.Required("days_valid", "body", m.DaysValid); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this azure azure rotate expiring certificates request v1 based on context it is used
func (m *AzureAzureRotateExpiringCertificatesRequestV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AzureAzureRotateExpiringCertificatesRequestV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureAzureRotateExpiringCertificatesRequestV1) UnmarshalBinary(b []byte) error {
	var res AzureAzureRotateExpiringCertificatesRequestV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
