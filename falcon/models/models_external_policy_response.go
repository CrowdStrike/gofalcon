// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsExternalPolicyResponse models external policy response
//
// swagger:model models.ExternalPolicyResponse
type ModelsExternalPolicyResponse struct {

	// action
	Action string `json:"action,omitempty"`

	// conditions
	Conditions []ModelsExternalPolicyResponseConditions `json:"conditions"`

	// deny
	// Required: true
	Deny *bool `json:"deny"`

	// evaluated at
	// Required: true
	EvaluatedAt *string `json:"evaluated_at"`

	// evaluation details
	EvaluationDetails *ModelsAPIPolicyEvaluationDetails `json:"evaluation_details,omitempty"`

	// image
	// Required: true
	Image *ModelsAPIPolicyImage `json:"image"`

	// policy
	// Required: true
	Policy *ModelsAPIPolicy `json:"policy"`

	// policy group
	PolicyGroup *ModelsAPIPolicyGroup `json:"policy_group,omitempty"`

	// policy type
	// Required: true
	PolicyType *ModelsAPIPolicyConfig `json:"policy_type"`
}

// Validate validates this models external policy response
func (m *ModelsExternalPolicyResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeny(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvaluatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvaluationDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsExternalPolicyResponse) validateDeny(formats strfmt.Registry) error {

	if err := validate.Required("deny", "body", m.Deny); err != nil {
		return err
	}

	return nil
}

func (m *ModelsExternalPolicyResponse) validateEvaluatedAt(formats strfmt.Registry) error {

	if err := validate.Required("evaluated_at", "body", m.EvaluatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ModelsExternalPolicyResponse) validateEvaluationDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.EvaluationDetails) { // not required
		return nil
	}

	if m.EvaluationDetails != nil {
		if err := m.EvaluationDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evaluation_details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("evaluation_details")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExternalPolicyResponse) validateImage(formats strfmt.Registry) error {

	if err := validate.Required("image", "body", m.Image); err != nil {
		return err
	}

	if m.Image != nil {
		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExternalPolicyResponse) validatePolicy(formats strfmt.Registry) error {

	if err := validate.Required("policy", "body", m.Policy); err != nil {
		return err
	}

	if m.Policy != nil {
		if err := m.Policy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExternalPolicyResponse) validatePolicyGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyGroup) { // not required
		return nil
	}

	if m.PolicyGroup != nil {
		if err := m.PolicyGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_group")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExternalPolicyResponse) validatePolicyType(formats strfmt.Registry) error {

	if err := validate.Required("policy_type", "body", m.PolicyType); err != nil {
		return err
	}

	if m.PolicyType != nil {
		if err := m.PolicyType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this models external policy response based on the context it is used
func (m *ModelsExternalPolicyResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEvaluationDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsExternalPolicyResponse) contextValidateEvaluationDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.EvaluationDetails != nil {

		if swag.IsZero(m.EvaluationDetails) { // not required
			return nil
		}

		if err := m.EvaluationDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evaluation_details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("evaluation_details")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExternalPolicyResponse) contextValidateImage(ctx context.Context, formats strfmt.Registry) error {

	if m.Image != nil {

		if err := m.Image.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExternalPolicyResponse) contextValidatePolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.Policy != nil {

		if err := m.Policy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExternalPolicyResponse) contextValidatePolicyGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.PolicyGroup != nil {

		if swag.IsZero(m.PolicyGroup) { // not required
			return nil
		}

		if err := m.PolicyGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_group")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExternalPolicyResponse) contextValidatePolicyType(ctx context.Context, formats strfmt.Registry) error {

	if m.PolicyType != nil {

		if err := m.PolicyType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsExternalPolicyResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsExternalPolicyResponse) UnmarshalBinary(b []byte) error {
	var res ModelsExternalPolicyResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
