// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExecutionsExecutionResult executions execution result
//
// swagger:model executions.ExecutionResult
type ExecutionsExecutionResult struct {

	// Details for the result of each activity node.
	// Required: true
	Activities []*ExecutionsActivityExecutionResult `json:"activities"`

	// Populated when the execution origin is from a sub model.
	// Required: true
	AncestorExecutions []*ExecutionsAncestorExecution `json:"ancestor_executions"`

	// Unique id of the workflow the execution is associated with.
	// Required: true
	DefinitionID *string `json:"definition_id"`

	// Version of the definition that executed.
	// Required: true
	DefinitionVersion *int32 `json:"definition_version"`

	// Timestamp of when the execution completed. Only present when status is an end state.
	// Format: date-time
	EndTimestamp strfmt.DateTime `json:"end_timestamp,omitempty"`

	// Unique id generated for the execution.
	// Required: true
	ExecutionID *string `json:"execution_id"`

	// Details for the results of each loop in the workflow definition.
	// Required: true
	Loops []*ExecutionsLoopResult `json:"loops"`

	// A boolean value indicating whether the failed workflow execution is retryable
	// Required: true
	Retryable *bool `json:"retryable"`

	// Timestamp of when the execution first started.
	// Required: true
	// Format: date-time
	StartTimestamp *strfmt.DateTime `json:"start_timestamp"`

	// Overall status for the execution.
	// Required: true
	Status *string `json:"status"`

	// Details for the result of the trigger node
	// Required: true
	Trigger *ExecutionsTriggerResult `json:"trigger"`
}

// Validate validates this executions execution result
func (m *ExecutionsExecutionResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAncestorExecutions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefinitionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefinitionVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoops(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetryable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrigger(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExecutionsExecutionResult) validateActivities(formats strfmt.Registry) error {

	if err := validate.Required("activities", "body", m.Activities); err != nil {
		return err
	}

	for i := 0; i < len(m.Activities); i++ {
		if swag.IsZero(m.Activities[i]) { // not required
			continue
		}

		if m.Activities[i] != nil {
			if err := m.Activities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("activities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExecutionsExecutionResult) validateAncestorExecutions(formats strfmt.Registry) error {

	if err := validate.Required("ancestor_executions", "body", m.AncestorExecutions); err != nil {
		return err
	}

	for i := 0; i < len(m.AncestorExecutions); i++ {
		if swag.IsZero(m.AncestorExecutions[i]) { // not required
			continue
		}

		if m.AncestorExecutions[i] != nil {
			if err := m.AncestorExecutions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ancestor_executions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ancestor_executions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExecutionsExecutionResult) validateDefinitionID(formats strfmt.Registry) error {

	if err := validate.Required("definition_id", "body", m.DefinitionID); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionsExecutionResult) validateDefinitionVersion(formats strfmt.Registry) error {

	if err := validate.Required("definition_version", "body", m.DefinitionVersion); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionsExecutionResult) validateEndTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.EndTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("end_timestamp", "body", "date-time", m.EndTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionsExecutionResult) validateExecutionID(formats strfmt.Registry) error {

	if err := validate.Required("execution_id", "body", m.ExecutionID); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionsExecutionResult) validateLoops(formats strfmt.Registry) error {

	if err := validate.Required("loops", "body", m.Loops); err != nil {
		return err
	}

	for i := 0; i < len(m.Loops); i++ {
		if swag.IsZero(m.Loops[i]) { // not required
			continue
		}

		if m.Loops[i] != nil {
			if err := m.Loops[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("loops" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("loops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExecutionsExecutionResult) validateRetryable(formats strfmt.Registry) error {

	if err := validate.Required("retryable", "body", m.Retryable); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionsExecutionResult) validateStartTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("start_timestamp", "body", m.StartTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("start_timestamp", "body", "date-time", m.StartTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionsExecutionResult) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionsExecutionResult) validateTrigger(formats strfmt.Registry) error {

	if err := validate.Required("trigger", "body", m.Trigger); err != nil {
		return err
	}

	if m.Trigger != nil {
		if err := m.Trigger.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trigger")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trigger")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this executions execution result based on the context it is used
func (m *ExecutionsExecutionResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActivities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAncestorExecutions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoops(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrigger(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExecutionsExecutionResult) contextValidateActivities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Activities); i++ {

		if m.Activities[i] != nil {

			if swag.IsZero(m.Activities[i]) { // not required
				return nil
			}

			if err := m.Activities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("activities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExecutionsExecutionResult) contextValidateAncestorExecutions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AncestorExecutions); i++ {

		if m.AncestorExecutions[i] != nil {

			if swag.IsZero(m.AncestorExecutions[i]) { // not required
				return nil
			}

			if err := m.AncestorExecutions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ancestor_executions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ancestor_executions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExecutionsExecutionResult) contextValidateLoops(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Loops); i++ {

		if m.Loops[i] != nil {

			if swag.IsZero(m.Loops[i]) { // not required
				return nil
			}

			if err := m.Loops[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("loops" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("loops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExecutionsExecutionResult) contextValidateTrigger(ctx context.Context, formats strfmt.Registry) error {

	if m.Trigger != nil {

		if err := m.Trigger.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trigger")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trigger")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExecutionsExecutionResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExecutionsExecutionResult) UnmarshalBinary(b []byte) error {
	var res ExecutionsExecutionResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
