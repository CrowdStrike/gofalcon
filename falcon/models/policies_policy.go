// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PoliciesPolicy policies policy
//
// swagger:model policies.Policy
type PoliciesPolicy struct {

	// created by
	CreatedBy string `json:"created_by,omitempty"`

	// created timestamp
	// Required: true
	CreatedTimestamp *string `json:"created_timestamp"`

	// description
	Description string `json:"description,omitempty"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// host groups
	HostGroups []*PoliciesAssignedHostGroup `json:"host_groups"`

	// id
	// Required: true
	ID *string `json:"id"`

	// modified by
	// Required: true
	ModifiedBy *string `json:"modified_by"`

	// modified timestamp
	// Required: true
	ModifiedTimestamp *string `json:"modified_timestamp"`

	// name
	Name string `json:"name,omitempty"`

	// platform
	Platform string `json:"platform,omitempty"`

	// precedence
	Precedence int32 `json:"precedence,omitempty"`

	// rule groups
	RuleGroups []*PoliciesAssignedRuleGroup `json:"rule_groups"`
}

// Validate validates this policies policy
func (m *PoliciesPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PoliciesPolicy) validateCreatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("created_timestamp", "body", m.CreatedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *PoliciesPolicy) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *PoliciesPolicy) validateHostGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.HostGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.HostGroups); i++ {
		if swag.IsZero(m.HostGroups[i]) { // not required
			continue
		}

		if m.HostGroups[i] != nil {
			if err := m.HostGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("host_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("host_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PoliciesPolicy) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PoliciesPolicy) validateModifiedBy(formats strfmt.Registry) error {

	if err := validate.Required("modified_by", "body", m.ModifiedBy); err != nil {
		return err
	}

	return nil
}

func (m *PoliciesPolicy) validateModifiedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("modified_timestamp", "body", m.ModifiedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *PoliciesPolicy) validateRuleGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.RuleGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.RuleGroups); i++ {
		if swag.IsZero(m.RuleGroups[i]) { // not required
			continue
		}

		if m.RuleGroups[i] != nil {
			if err := m.RuleGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rule_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rule_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this policies policy based on the context it is used
func (m *PoliciesPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHostGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRuleGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PoliciesPolicy) contextValidateHostGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HostGroups); i++ {

		if m.HostGroups[i] != nil {

			if swag.IsZero(m.HostGroups[i]) { // not required
				return nil
			}

			if err := m.HostGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("host_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("host_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PoliciesPolicy) contextValidateRuleGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RuleGroups); i++ {

		if m.RuleGroups[i] != nil {

			if swag.IsZero(m.RuleGroups[i]) { // not required
				return nil
			}

			if err := m.RuleGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rule_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rule_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PoliciesPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PoliciesPolicy) UnmarshalBinary(b []byte) error {
	var res PoliciesPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
