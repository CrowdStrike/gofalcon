// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SdkAnalysisResultsCloudAssetRecordVM sdk analysis results cloud asset record VM
//
// swagger:model sdk.AnalysisResultsCloudAssetRecordVM
type SdkAnalysisResultsCloudAssetRecordVM struct {

	// account id
	// Required: true
	AccountID *string `json:"account_id"`

	// asset id
	// Required: true
	AssetID *string `json:"asset_id"`

	// asset type
	// Required: true
	AssetType *string `json:"asset_type"`

	// availability zone
	// Required: true
	AvailabilityZone *string `json:"availability_zone"`

	// cloud provider
	// Required: true
	CloudProvider *string `json:"cloud_provider"`

	// gcrn
	// Required: true
	Gcrn *string `json:"gcrn"`

	// region
	// Required: true
	Region *string `json:"region"`
}

// Validate validates this sdk analysis results cloud asset record VM
func (m *SdkAnalysisResultsCloudAssetRecordVM) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailabilityZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SdkAnalysisResultsCloudAssetRecordVM) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("account_id", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *SdkAnalysisResultsCloudAssetRecordVM) validateAssetID(formats strfmt.Registry) error {

	if err := validate.Required("asset_id", "body", m.AssetID); err != nil {
		return err
	}

	return nil
}

func (m *SdkAnalysisResultsCloudAssetRecordVM) validateAssetType(formats strfmt.Registry) error {

	if err := validate.Required("asset_type", "body", m.AssetType); err != nil {
		return err
	}

	return nil
}

func (m *SdkAnalysisResultsCloudAssetRecordVM) validateAvailabilityZone(formats strfmt.Registry) error {

	if err := validate.Required("availability_zone", "body", m.AvailabilityZone); err != nil {
		return err
	}

	return nil
}

func (m *SdkAnalysisResultsCloudAssetRecordVM) validateCloudProvider(formats strfmt.Registry) error {

	if err := validate.Required("cloud_provider", "body", m.CloudProvider); err != nil {
		return err
	}

	return nil
}

func (m *SdkAnalysisResultsCloudAssetRecordVM) validateGcrn(formats strfmt.Registry) error {

	if err := validate.Required("gcrn", "body", m.Gcrn); err != nil {
		return err
	}

	return nil
}

func (m *SdkAnalysisResultsCloudAssetRecordVM) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sdk analysis results cloud asset record VM based on context it is used
func (m *SdkAnalysisResultsCloudAssetRecordVM) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SdkAnalysisResultsCloudAssetRecordVM) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SdkAnalysisResultsCloudAssetRecordVM) UnmarshalBinary(b []byte) error {
	var res SdkAnalysisResultsCloudAssetRecordVM
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
