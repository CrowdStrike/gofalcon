// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainLookupFile domain lookup file
//
// swagger:model domain.LookupFile
type DomainLookupFile struct {

	// app id
	AppID string `json:"app_id,omitempty"`

	// cid
	Cid string `json:"cid,omitempty"`

	// contents hash
	// Required: true
	ContentsHash *string `json:"contents_hash"`

	// created by
	// Required: true
	CreatedBy *DomainUser `json:"created_by"`

	// created timestamp
	// Required: true
	// Format: date-time
	CreatedTimestamp *strfmt.DateTime `json:"created_timestamp"`

	// description
	// Required: true
	Description *string `json:"description"`

	// filename
	// Required: true
	Filename *string `json:"filename"`

	// format
	// Required: true
	Format *string `json:"format"`

	// id
	// Required: true
	ID *string `json:"id"`

	// last modified by
	// Required: true
	LastModifiedBy *DomainUser `json:"last_modified_by"`

	// last modified timestamp
	// Required: true
	// Format: date-time
	LastModifiedTimestamp *strfmt.DateTime `json:"last_modified_timestamp"`

	// name
	// Required: true
	Name *string `json:"name"`

	// repo
	// Required: true
	Repo *string `json:"repo"`

	// size
	// Required: true
	Size *int32 `json:"size"`

	// status
	// Required: true
	Status *string `json:"status"`

	// version
	// Required: true
	Version *string `json:"version"`

	// version numeric
	// Required: true
	VersionNumeric *int32 `json:"version_numeric"`
}

// Validate validates this domain lookup file
func (m *DomainLookupFile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContentsHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilename(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionNumeric(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainLookupFile) validateContentsHash(formats strfmt.Registry) error {

	if err := validate.Required("contents_hash", "body", m.ContentsHash); err != nil {
		return err
	}

	return nil
}

func (m *DomainLookupFile) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("created_by", "body", m.CreatedBy); err != nil {
		return err
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

func (m *DomainLookupFile) validateCreatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("created_timestamp", "body", m.CreatedTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("created_timestamp", "body", "date-time", m.CreatedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainLookupFile) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *DomainLookupFile) validateFilename(formats strfmt.Registry) error {

	if err := validate.Required("filename", "body", m.Filename); err != nil {
		return err
	}

	return nil
}

func (m *DomainLookupFile) validateFormat(formats strfmt.Registry) error {

	if err := validate.Required("format", "body", m.Format); err != nil {
		return err
	}

	return nil
}

func (m *DomainLookupFile) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DomainLookupFile) validateLastModifiedBy(formats strfmt.Registry) error {

	if err := validate.Required("last_modified_by", "body", m.LastModifiedBy); err != nil {
		return err
	}

	if m.LastModifiedBy != nil {
		if err := m.LastModifiedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_modified_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_modified_by")
			}
			return err
		}
	}

	return nil
}

func (m *DomainLookupFile) validateLastModifiedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("last_modified_timestamp", "body", m.LastModifiedTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("last_modified_timestamp", "body", "date-time", m.LastModifiedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainLookupFile) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DomainLookupFile) validateRepo(formats strfmt.Registry) error {

	if err := validate.Required("repo", "body", m.Repo); err != nil {
		return err
	}

	return nil
}

func (m *DomainLookupFile) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *DomainLookupFile) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *DomainLookupFile) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *DomainLookupFile) validateVersionNumeric(formats strfmt.Registry) error {

	if err := validate.Required("version_numeric", "body", m.VersionNumeric); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this domain lookup file based on the context it is used
func (m *DomainLookupFile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastModifiedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainLookupFile) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedBy != nil {

		if err := m.CreatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

func (m *DomainLookupFile) contextValidateLastModifiedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.LastModifiedBy != nil {

		if err := m.LastModifiedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_modified_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_modified_by")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainLookupFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainLookupFile) UnmarshalBinary(b []byte) error {
	var res DomainLookupFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
