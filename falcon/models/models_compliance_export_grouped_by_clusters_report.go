// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsComplianceExportGroupedByClustersReport models compliance export grouped by clusters report
//
// swagger:model models.ComplianceExportGroupedByClustersReport
type ModelsComplianceExportGroupedByClustersReport struct {

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// cloud account id
	// Required: true
	CloudAccountID *string `json:"cloud_account_id"`

	// cloud provider
	// Required: true
	CloudProvider *string `json:"cloud_provider"`

	// cloud region
	// Required: true
	CloudRegion *string `json:"cloud_region"`

	// cluster name
	// Required: true
	ClusterName *string `json:"cluster_name"`

	// failed critical rules
	// Required: true
	FailedCriticalRules *int64 `json:"failed_critical_rules"`

	// failed high rules
	// Required: true
	FailedHighRules *int64 `json:"failed_high_rules"`

	// failed rules
	// Required: true
	FailedRules *int64 `json:"failed_rules"`

	// failed rules list
	// Required: true
	FailedRulesList *string `json:"failed_rules_list"`

	// non compliant containers
	// Required: true
	NonCompliantContainers *int64 `json:"non_compliant_containers"`

	// non compliant images
	// Required: true
	NonCompliantImages *int64 `json:"non_compliant_images"`

	// passed rules
	// Required: true
	PassedRules *int64 `json:"passed_rules"`

	// percentage of compliant assets
	// Required: true
	PercentageOfCompliantAssets *float64 `json:"percentage_of_compliant_assets"`

	// total containers
	// Required: true
	TotalContainers *int64 `json:"total_containers"`

	// total images
	// Required: true
	TotalImages *int64 `json:"total_images"`
}

// Validate validates this models compliance export grouped by clusters report
func (m *ModelsComplianceExportGroupedByClustersReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedCriticalRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedHighRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedRulesList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonCompliantContainers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonCompliantImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassedRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePercentageOfCompliantAssets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalContainers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalImages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsComplianceExportGroupedByClustersReport) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByClustersReport) validateCloudAccountID(formats strfmt.Registry) error {

	if err := validate.Required("cloud_account_id", "body", m.CloudAccountID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByClustersReport) validateCloudProvider(formats strfmt.Registry) error {

	if err := validate.Required("cloud_provider", "body", m.CloudProvider); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByClustersReport) validateCloudRegion(formats strfmt.Registry) error {

	if err := validate.Required("cloud_region", "body", m.CloudRegion); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByClustersReport) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("cluster_name", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByClustersReport) validateFailedCriticalRules(formats strfmt.Registry) error {

	if err := validate.Required("failed_critical_rules", "body", m.FailedCriticalRules); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByClustersReport) validateFailedHighRules(formats strfmt.Registry) error {

	if err := validate.Required("failed_high_rules", "body", m.FailedHighRules); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByClustersReport) validateFailedRules(formats strfmt.Registry) error {

	if err := validate.Required("failed_rules", "body", m.FailedRules); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByClustersReport) validateFailedRulesList(formats strfmt.Registry) error {

	if err := validate.Required("failed_rules_list", "body", m.FailedRulesList); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByClustersReport) validateNonCompliantContainers(formats strfmt.Registry) error {

	if err := validate.Required("non_compliant_containers", "body", m.NonCompliantContainers); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByClustersReport) validateNonCompliantImages(formats strfmt.Registry) error {

	if err := validate.Required("non_compliant_images", "body", m.NonCompliantImages); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByClustersReport) validatePassedRules(formats strfmt.Registry) error {

	if err := validate.Required("passed_rules", "body", m.PassedRules); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByClustersReport) validatePercentageOfCompliantAssets(formats strfmt.Registry) error {

	if err := validate.Required("percentage_of_compliant_assets", "body", m.PercentageOfCompliantAssets); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByClustersReport) validateTotalContainers(formats strfmt.Registry) error {

	if err := validate.Required("total_containers", "body", m.TotalContainers); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByClustersReport) validateTotalImages(formats strfmt.Registry) error {

	if err := validate.Required("total_images", "body", m.TotalImages); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models compliance export grouped by clusters report based on context it is used
func (m *ModelsComplianceExportGroupedByClustersReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsComplianceExportGroupedByClustersReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsComplianceExportGroupedByClustersReport) UnmarshalBinary(b []byte) error {
	var res ModelsComplianceExportGroupedByClustersReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
