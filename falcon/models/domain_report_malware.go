// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainReportMalware domain report malware
//
// swagger:model domain.ReportMalware
type DomainReportMalware struct {

	// community identifiers
	CommunityIdentifiers []string `json:"community_identifiers"`

	// family name
	// Required: true
	FamilyName *string `json:"family_name"`

	// slug
	// Required: true
	Slug *string `json:"slug"`
}

// Validate validates this domain report malware
func (m *DomainReportMalware) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFamilyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainReportMalware) validateFamilyName(formats strfmt.Registry) error {

	if err := validate.Required("family_name", "body", m.FamilyName); err != nil {
		return err
	}

	return nil
}

func (m *DomainReportMalware) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("slug", "body", m.Slug); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain report malware based on context it is used
func (m *DomainReportMalware) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainReportMalware) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainReportMalware) UnmarshalBinary(b []byte) error {
	var res DomainReportMalware
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
