// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsAPIKubernetesIOM models API kubernetes i o m
//
// swagger:model models.APIKubernetesIOM
type ModelsAPIKubernetesIOM struct {

	// admission review action
	AdmissionReviewAction string `json:"admission_review_action,omitempty"`

	// admission review id
	AdmissionReviewID string `json:"admission_review_id,omitempty"`

	// admission review msg
	AdmissionReviewMsg string `json:"admission_review_msg,omitempty"`

	// admission review operation
	AdmissionReviewOperation string `json:"admission_review_operation,omitempty"`

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// cis id
	// Required: true
	CisID []string `json:"cis_id"`

	// cluster id
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// cluster name
	// Required: true
	ClusterName *string `json:"cluster_name"`

	// containers impacted count
	// Required: true
	ContainersImpactedCount *string `json:"containers_impacted_count"`

	// containers impacted ids
	// Required: true
	ContainersImpactedIds []string `json:"containers_impacted_ids"`

	// description
	// Required: true
	Description *string `json:"description"`

	// detect timestamp
	// Required: true
	DetectTimestamp *string `json:"detect_timestamp"`

	// detection id
	// Required: true
	DetectionID *string `json:"detection_id"`

	// detection name
	// Required: true
	DetectionName *string `json:"detection_name"`

	// detection type
	// Required: true
	DetectionType *string `json:"detection_type"`

	// image assessment matched cves
	ImageAssessmentMatchedCves []string `json:"image_assessment_matched_cves"`

	// image assessment policy description
	ImageAssessmentPolicyDescription string `json:"image_assessment_policy_description,omitempty"`

	// image assessment policy id
	ImageAssessmentPolicyID string `json:"image_assessment_policy_id,omitempty"`

	// image assessment policy name
	ImageAssessmentPolicyName string `json:"image_assessment_policy_name,omitempty"`

	// image digest
	ImageDigest string `json:"image_digest,omitempty"`

	// image has been assessed
	ImageHasBeenAssessed bool `json:"image_has_been_assessed,omitempty"`

	// image id
	ImageID string `json:"image_id,omitempty"`

	// image registry
	ImageRegistry string `json:"image_registry,omitempty"`

	// image repository
	ImageRepository string `json:"image_repository,omitempty"`

	// image tag
	ImageTag string `json:"image_tag,omitempty"`

	// last seen timestamp
	LastSeenTimestamp string `json:"last_seen_timestamp,omitempty"`

	// mitigation id
	MitigationID string `json:"mitigation_id,omitempty"`

	// mitigation name
	MitigationName string `json:"mitigation_name,omitempty"`

	// namespace
	// Required: true
	Namespace *string `json:"namespace"`

	// nist id
	NistID string `json:"nist_id,omitempty"`

	// pod label
	PodLabel string `json:"pod_label,omitempty"`

	// pods impacted count
	PodsImpactedCount string `json:"pods_impacted_count,omitempty"`

	// policy id
	PolicyID string `json:"policy_id,omitempty"`

	// policy name
	PolicyName string `json:"policy_name,omitempty"`

	// ports
	Ports []string `json:"ports"`

	// prevented
	// Required: true
	Prevented *string `json:"prevented"`

	// remediation
	// Required: true
	Remediation *string `json:"remediation"`

	// resource creation timestamp
	// Required: true
	ResourceCreationTimestamp *string `json:"resource_creation_timestamp"`

	// resource group name
	ResourceGroupName string `json:"resource_group_name,omitempty"`

	// resource id
	// Required: true
	ResourceID *string `json:"resource_id"`

	// resource name
	// Required: true
	ResourceName *string `json:"resource_name"`

	// resource type
	// Required: true
	ResourceType *string `json:"resource_type"`

	// sensitive env vars
	// Required: true
	SensitiveEnvVars []string `json:"sensitive_env_vars"`

	// service type
	ServiceType string `json:"service_type,omitempty"`

	// severity
	// Required: true
	Severity *string `json:"severity"`

	// tactic id
	// Required: true
	TacticID *string `json:"tactic_id"`

	// tactic name
	// Required: true
	TacticName *string `json:"tactic_name"`

	// technique id
	// Required: true
	TechniqueID *string `json:"technique_id"`

	// technique name
	// Required: true
	TechniqueName *string `json:"technique_name"`
}

// Validate validates this models API kubernetes i o m
func (m *ModelsAPIKubernetesIOM) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCisID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainersImpactedCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainersImpactedIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectionName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrevented(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceCreationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSensitiveEnvVars(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTacticID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTacticName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTechniqueID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTechniqueName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIKubernetesIOM) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIKubernetesIOM) validateCisID(formats strfmt.Registry) error {

	if err := validate.Required("cis_id", "body", m.CisID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIKubernetesIOM) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIKubernetesIOM) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("cluster_name", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIKubernetesIOM) validateContainersImpactedCount(formats strfmt.Registry) error {

	if err := validate.Required("containers_impacted_count", "body", m.ContainersImpactedCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIKubernetesIOM) validateContainersImpactedIds(formats strfmt.Registry) error {

	if err := validate.Required("containers_impacted_ids", "body", m.ContainersImpactedIds); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIKubernetesIOM) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIKubernetesIOM) validateDetectTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("detect_timestamp", "body", m.DetectTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIKubernetesIOM) validateDetectionID(formats strfmt.Registry) error {

	if err := validate.Required("detection_id", "body", m.DetectionID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIKubernetesIOM) validateDetectionName(formats strfmt.Registry) error {

	if err := validate.Required("detection_name", "body", m.DetectionName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIKubernetesIOM) validateDetectionType(formats strfmt.Registry) error {

	if err := validate.Required("detection_type", "body", m.DetectionType); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIKubernetesIOM) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIKubernetesIOM) validatePrevented(formats strfmt.Registry) error {

	if err := validate.Required("prevented", "body", m.Prevented); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIKubernetesIOM) validateRemediation(formats strfmt.Registry) error {

	if err := validate.Required("remediation", "body", m.Remediation); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIKubernetesIOM) validateResourceCreationTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("resource_creation_timestamp", "body", m.ResourceCreationTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIKubernetesIOM) validateResourceID(formats strfmt.Registry) error {

	if err := validate.Required("resource_id", "body", m.ResourceID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIKubernetesIOM) validateResourceName(formats strfmt.Registry) error {

	if err := validate.Required("resource_name", "body", m.ResourceName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIKubernetesIOM) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("resource_type", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIKubernetesIOM) validateSensitiveEnvVars(formats strfmt.Registry) error {

	if err := validate.Required("sensitive_env_vars", "body", m.SensitiveEnvVars); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIKubernetesIOM) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIKubernetesIOM) validateTacticID(formats strfmt.Registry) error {

	if err := validate.Required("tactic_id", "body", m.TacticID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIKubernetesIOM) validateTacticName(formats strfmt.Registry) error {

	if err := validate.Required("tactic_name", "body", m.TacticName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIKubernetesIOM) validateTechniqueID(formats strfmt.Registry) error {

	if err := validate.Required("technique_id", "body", m.TechniqueID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIKubernetesIOM) validateTechniqueName(formats strfmt.Registry) error {

	if err := validate.Required("technique_name", "body", m.TechniqueName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models API kubernetes i o m based on context it is used
func (m *ModelsAPIKubernetesIOM) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsAPIKubernetesIOM) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsAPIKubernetesIOM) UnmarshalBinary(b []byte) error {
	var res ModelsAPIKubernetesIOM
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
