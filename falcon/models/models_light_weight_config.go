// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsLightWeightConfig models light weight config
//
// swagger:model models.LightWeightConfig
type ModelsLightWeightConfig struct {

	// architecture
	// Required: true
	Architecture *string `json:"architecture"`

	// cmd
	// Required: true
	Cmd []string `json:"cmd"`

	// entry point
	// Required: true
	EntryPoint []string `json:"entry_point"`

	// env
	// Required: true
	Env []string `json:"env"`

	// exposed ports
	// Required: true
	ExposedPorts map[string]ModelsLightWeightConfigExposedPorts `json:"exposed_ports"`

	// labels
	// Required: true
	Labels map[string]string `json:"labels"`

	// user
	// Required: true
	User *string `json:"user"`

	// working dir
	// Required: true
	WorkingDir *string `json:"working_dir"`
}

// Validate validates this models light weight config
func (m *ModelsLightWeightConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchitecture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCmd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntryPoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnv(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExposedPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkingDir(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsLightWeightConfig) validateArchitecture(formats strfmt.Registry) error {

	if err := validate.Required("architecture", "body", m.Architecture); err != nil {
		return err
	}

	return nil
}

func (m *ModelsLightWeightConfig) validateCmd(formats strfmt.Registry) error {

	if err := validate.Required("cmd", "body", m.Cmd); err != nil {
		return err
	}

	return nil
}

func (m *ModelsLightWeightConfig) validateEntryPoint(formats strfmt.Registry) error {

	if err := validate.Required("entry_point", "body", m.EntryPoint); err != nil {
		return err
	}

	return nil
}

func (m *ModelsLightWeightConfig) validateEnv(formats strfmt.Registry) error {

	if err := validate.Required("env", "body", m.Env); err != nil {
		return err
	}

	return nil
}

func (m *ModelsLightWeightConfig) validateExposedPorts(formats strfmt.Registry) error {

	if err := validate.Required("exposed_ports", "body", m.ExposedPorts); err != nil {
		return err
	}

	for k := range m.ExposedPorts {

		if err := validate.Required("exposed_ports"+"."+k, "body", m.ExposedPorts[k]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ModelsLightWeightConfig) validateLabels(formats strfmt.Registry) error {

	if err := validate.Required("labels", "body", m.Labels); err != nil {
		return err
	}

	return nil
}

func (m *ModelsLightWeightConfig) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	return nil
}

func (m *ModelsLightWeightConfig) validateWorkingDir(formats strfmt.Registry) error {

	if err := validate.Required("working_dir", "body", m.WorkingDir); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models light weight config based on context it is used
func (m *ModelsLightWeightConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsLightWeightConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsLightWeightConfig) UnmarshalBinary(b []byte) error {
	var res ModelsLightWeightConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
