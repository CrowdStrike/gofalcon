// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainScriptHelp domain script help
//
// swagger:model domain.ScriptHelp
type DomainScriptHelp struct {

	// args
	// Required: true
	Args []*ModelArgument `json:"args"`

	// command
	// Required: true
	Command *string `json:"command"`

	// description
	// Required: true
	Description *string `json:"description"`

	// examples
	// Required: true
	Examples *string `json:"examples"`

	// internal only
	// Required: true
	InternalOnly *bool `json:"internal_only"`

	// runnable
	// Required: true
	Runnable *bool `json:"runnable"`

	// sub commands
	// Required: true
	SubCommands []*DomainScriptHelp `json:"sub_commands"`
}

// Validate validates this domain script help
func (m *DomainScriptHelp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArgs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExamples(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInternalOnly(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubCommands(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainScriptHelp) validateArgs(formats strfmt.Registry) error {

	if err := validate.Required("args", "body", m.Args); err != nil {
		return err
	}

	for i := 0; i < len(m.Args); i++ {
		if swag.IsZero(m.Args[i]) { // not required
			continue
		}

		if m.Args[i] != nil {
			if err := m.Args[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("args" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("args" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainScriptHelp) validateCommand(formats strfmt.Registry) error {

	if err := validate.Required("command", "body", m.Command); err != nil {
		return err
	}

	return nil
}

func (m *DomainScriptHelp) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *DomainScriptHelp) validateExamples(formats strfmt.Registry) error {

	if err := validate.Required("examples", "body", m.Examples); err != nil {
		return err
	}

	return nil
}

func (m *DomainScriptHelp) validateInternalOnly(formats strfmt.Registry) error {

	if err := validate.Required("internal_only", "body", m.InternalOnly); err != nil {
		return err
	}

	return nil
}

func (m *DomainScriptHelp) validateRunnable(formats strfmt.Registry) error {

	if err := validate.Required("runnable", "body", m.Runnable); err != nil {
		return err
	}

	return nil
}

func (m *DomainScriptHelp) validateSubCommands(formats strfmt.Registry) error {

	if err := validate.Required("sub_commands", "body", m.SubCommands); err != nil {
		return err
	}

	for i := 0; i < len(m.SubCommands); i++ {
		if swag.IsZero(m.SubCommands[i]) { // not required
			continue
		}

		if m.SubCommands[i] != nil {
			if err := m.SubCommands[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sub_commands" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sub_commands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this domain script help based on the context it is used
func (m *DomainScriptHelp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArgs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubCommands(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainScriptHelp) contextValidateArgs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Args); i++ {

		if m.Args[i] != nil {
			if err := m.Args[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("args" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("args" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainScriptHelp) contextValidateSubCommands(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SubCommands); i++ {

		if m.SubCommands[i] != nil {
			if err := m.SubCommands[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sub_commands" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sub_commands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainScriptHelp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainScriptHelp) UnmarshalBinary(b []byte) error {
	var res DomainScriptHelp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
