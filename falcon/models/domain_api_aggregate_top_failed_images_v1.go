// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainAPIAggregateTopFailedImagesV1 domain API aggregate top failed images v1
//
// swagger:model domain.APIAggregateTopFailedImagesV1
type DomainAPIAggregateTopFailedImagesV1 struct {

	// asset uid
	// Required: true
	AssetUID *string `json:"asset_uid"`

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// failed rules count
	// Required: true
	FailedRulesCount *int32 `json:"failed_rules_count"`

	// failed rules count by severity
	// Required: true
	FailedRulesCountBySeverity *DomainCountBySeverity `json:"failed_rules_count_by_severity"`

	// image digest
	// Required: true
	ImageDigest *string `json:"image_digest"`

	// image registry
	// Required: true
	ImageRegistry *string `json:"image_registry"`

	// image repository
	// Required: true
	ImageRepository *string `json:"image_repository"`

	// image tag
	// Required: true
	ImageTag *string `json:"image_tag"`
}

// Validate validates this domain API aggregate top failed images v1
func (m *DomainAPIAggregateTopFailedImagesV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssetUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedRulesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedRulesCountBySeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageDigest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageRegistry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAPIAggregateTopFailedImagesV1) validateAssetUID(formats strfmt.Registry) error {

	if err := validate.Required("asset_uid", "body", m.AssetUID); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateTopFailedImagesV1) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateTopFailedImagesV1) validateFailedRulesCount(formats strfmt.Registry) error {

	if err := validate.Required("failed_rules_count", "body", m.FailedRulesCount); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateTopFailedImagesV1) validateFailedRulesCountBySeverity(formats strfmt.Registry) error {

	if err := validate.Required("failed_rules_count_by_severity", "body", m.FailedRulesCountBySeverity); err != nil {
		return err
	}

	if m.FailedRulesCountBySeverity != nil {
		if err := m.FailedRulesCountBySeverity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failed_rules_count_by_severity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failed_rules_count_by_severity")
			}
			return err
		}
	}

	return nil
}

func (m *DomainAPIAggregateTopFailedImagesV1) validateImageDigest(formats strfmt.Registry) error {

	if err := validate.Required("image_digest", "body", m.ImageDigest); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateTopFailedImagesV1) validateImageRegistry(formats strfmt.Registry) error {

	if err := validate.Required("image_registry", "body", m.ImageRegistry); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateTopFailedImagesV1) validateImageRepository(formats strfmt.Registry) error {

	if err := validate.Required("image_repository", "body", m.ImageRepository); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateTopFailedImagesV1) validateImageTag(formats strfmt.Registry) error {

	if err := validate.Required("image_tag", "body", m.ImageTag); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this domain API aggregate top failed images v1 based on the context it is used
func (m *DomainAPIAggregateTopFailedImagesV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFailedRulesCountBySeverity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAPIAggregateTopFailedImagesV1) contextValidateFailedRulesCountBySeverity(ctx context.Context, formats strfmt.Registry) error {

	if m.FailedRulesCountBySeverity != nil {

		if err := m.FailedRulesCountBySeverity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failed_rules_count_by_severity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failed_rules_count_by_severity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainAPIAggregateTopFailedImagesV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainAPIAggregateTopFailedImagesV1) UnmarshalBinary(b []byte) error {
	var res DomainAPIAggregateTopFailedImagesV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
