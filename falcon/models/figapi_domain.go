// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FigapiDomain figapi domain
//
// swagger:model figapi.Domain
type FigapiDomain struct {

	// creation date
	CreationDate string `json:"CreationDate,omitempty"`

	// domain
	Domain string `json:"Domain,omitempty"`

	// domain updated date
	DomainUpdatedDate string `json:"DomainUpdatedDate,omitempty"`

	// email addresses
	EmailAddresses []*FigapiEmailAddress `json:"EmailAddresses"`

	// expiration date
	ExpirationDate string `json:"ExpirationDate,omitempty"`

	// IPv4 addresses
	IPV4Addresses []*FigapiIPV4 `json:"IPv4Addresses"`

	// IPv6 addresses
	IPV6Addresses []*FigapiIPV6 `json:"IPv6Addresses"`

	// m x records
	MXRecords []*FigapiMXRecord `json:"MXRecords"`

	// name servers
	NameServers []*FigapiNameServer `json:"NameServers"`

	// registrar
	Registrar string `json:"Registrar,omitempty"`

	// registrar status
	RegistrarStatus []string `json:"RegistrarStatus"`

	// who i s
	WhoIS *FigapiWhoIS `json:"WhoIS,omitempty"`
}

// Validate validates this figapi domain
func (m *FigapiDomain) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmailAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV4Addresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV6Addresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMXRecords(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhoIS(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FigapiDomain) validateEmailAddresses(formats strfmt.Registry) error {
	if swag.IsZero(m.EmailAddresses) { // not required
		return nil
	}

	for i := 0; i < len(m.EmailAddresses); i++ {
		if swag.IsZero(m.EmailAddresses[i]) { // not required
			continue
		}

		if m.EmailAddresses[i] != nil {
			if err := m.EmailAddresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("EmailAddresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("EmailAddresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FigapiDomain) validateIPV4Addresses(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV4Addresses) { // not required
		return nil
	}

	for i := 0; i < len(m.IPV4Addresses); i++ {
		if swag.IsZero(m.IPV4Addresses[i]) { // not required
			continue
		}

		if m.IPV4Addresses[i] != nil {
			if err := m.IPV4Addresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("IPv4Addresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("IPv4Addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FigapiDomain) validateIPV6Addresses(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV6Addresses) { // not required
		return nil
	}

	for i := 0; i < len(m.IPV6Addresses); i++ {
		if swag.IsZero(m.IPV6Addresses[i]) { // not required
			continue
		}

		if m.IPV6Addresses[i] != nil {
			if err := m.IPV6Addresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("IPv6Addresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("IPv6Addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FigapiDomain) validateMXRecords(formats strfmt.Registry) error {
	if swag.IsZero(m.MXRecords) { // not required
		return nil
	}

	for i := 0; i < len(m.MXRecords); i++ {
		if swag.IsZero(m.MXRecords[i]) { // not required
			continue
		}

		if m.MXRecords[i] != nil {
			if err := m.MXRecords[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MXRecords" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("MXRecords" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FigapiDomain) validateNameServers(formats strfmt.Registry) error {
	if swag.IsZero(m.NameServers) { // not required
		return nil
	}

	for i := 0; i < len(m.NameServers); i++ {
		if swag.IsZero(m.NameServers[i]) { // not required
			continue
		}

		if m.NameServers[i] != nil {
			if err := m.NameServers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NameServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NameServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FigapiDomain) validateWhoIS(formats strfmt.Registry) error {
	if swag.IsZero(m.WhoIS) { // not required
		return nil
	}

	if m.WhoIS != nil {
		if err := m.WhoIS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("WhoIS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("WhoIS")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this figapi domain based on the context it is used
func (m *FigapiDomain) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmailAddresses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPV4Addresses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPV6Addresses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMXRecords(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNameServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWhoIS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FigapiDomain) contextValidateEmailAddresses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EmailAddresses); i++ {

		if m.EmailAddresses[i] != nil {

			if swag.IsZero(m.EmailAddresses[i]) { // not required
				return nil
			}

			if err := m.EmailAddresses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("EmailAddresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("EmailAddresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FigapiDomain) contextValidateIPV4Addresses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IPV4Addresses); i++ {

		if m.IPV4Addresses[i] != nil {

			if swag.IsZero(m.IPV4Addresses[i]) { // not required
				return nil
			}

			if err := m.IPV4Addresses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("IPv4Addresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("IPv4Addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FigapiDomain) contextValidateIPV6Addresses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IPV6Addresses); i++ {

		if m.IPV6Addresses[i] != nil {

			if swag.IsZero(m.IPV6Addresses[i]) { // not required
				return nil
			}

			if err := m.IPV6Addresses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("IPv6Addresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("IPv6Addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FigapiDomain) contextValidateMXRecords(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MXRecords); i++ {

		if m.MXRecords[i] != nil {

			if swag.IsZero(m.MXRecords[i]) { // not required
				return nil
			}

			if err := m.MXRecords[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MXRecords" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("MXRecords" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FigapiDomain) contextValidateNameServers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NameServers); i++ {

		if m.NameServers[i] != nil {

			if swag.IsZero(m.NameServers[i]) { // not required
				return nil
			}

			if err := m.NameServers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NameServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NameServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FigapiDomain) contextValidateWhoIS(ctx context.Context, formats strfmt.Registry) error {

	if m.WhoIS != nil {

		if swag.IsZero(m.WhoIS) { // not required
			return nil
		}

		if err := m.WhoIS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("WhoIS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("WhoIS")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FigapiDomain) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FigapiDomain) UnmarshalBinary(b []byte) error {
	var res FigapiDomain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
