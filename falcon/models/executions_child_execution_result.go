// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExecutionsChildExecutionResult executions child execution result
//
// swagger:model executions.ChildExecutionResult
type ExecutionsChildExecutionResult struct {

	// Timestamp of when the execution completed. Only present when status is an end state.
	// Format: date-time
	EndTimestamp strfmt.DateTime `json:"end_timestamp,omitempty"`

	// Unique id of the child execution id.
	// Required: true
	ID *string `json:"id"`

	// Index number indicating what iteration of the parent execution this given execution is associated with.
	// Required: true
	Iteration *int32 `json:"iteration"`

	// Timestamp of when the execution first started.
	// Required: true
	// Format: date-time
	StartTimestamp *strfmt.DateTime `json:"start_timestamp"`

	// Current status of execution.
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this executions child execution result
func (m *ExecutionsChildExecutionResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIteration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExecutionsChildExecutionResult) validateEndTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.EndTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("end_timestamp", "body", "date-time", m.EndTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionsChildExecutionResult) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionsChildExecutionResult) validateIteration(formats strfmt.Registry) error {

	if err := validate.Required("iteration", "body", m.Iteration); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionsChildExecutionResult) validateStartTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("start_timestamp", "body", m.StartTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("start_timestamp", "body", "date-time", m.StartTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionsChildExecutionResult) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this executions child execution result based on context it is used
func (m *ExecutionsChildExecutionResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ExecutionsChildExecutionResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExecutionsChildExecutionResult) UnmarshalBinary(b []byte) error {
	var res ExecutionsChildExecutionResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
