// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SuppressionrulesUpdateSuppressionRuleRequest suppressionrules update suppression rule request
//
// swagger:model suppressionrules.UpdateSuppressionRuleRequest
type SuppressionrulesUpdateSuppressionRuleRequest struct {

	// description
	Description string `json:"description,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	Name string `json:"name,omitempty"`

	// rule selection filter
	RuleSelectionFilter *SuppressionrulesRuleSelectionFilter `json:"rule_selection_filter,omitempty"`

	// rule selection type
	RuleSelectionType string `json:"rule_selection_type,omitempty"`

	// scope asset filter
	ScopeAssetFilter *SuppressionrulesScopeAssetFilter `json:"scope_asset_filter,omitempty"`

	// scope type
	ScopeType string `json:"scope_type,omitempty"`

	// suppression comment
	SuppressionComment string `json:"suppression_comment,omitempty"`

	// suppression expiration date
	SuppressionExpirationDate string `json:"suppression_expiration_date,omitempty"`

	// suppression reason
	SuppressionReason string `json:"suppression_reason,omitempty"`
}

// Validate validates this suppressionrules update suppression rule request
func (m *SuppressionrulesUpdateSuppressionRuleRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleSelectionFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScopeAssetFilter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SuppressionrulesUpdateSuppressionRuleRequest) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SuppressionrulesUpdateSuppressionRuleRequest) validateRuleSelectionFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.RuleSelectionFilter) { // not required
		return nil
	}

	if m.RuleSelectionFilter != nil {
		if err := m.RuleSelectionFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule_selection_filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule_selection_filter")
			}
			return err
		}
	}

	return nil
}

func (m *SuppressionrulesUpdateSuppressionRuleRequest) validateScopeAssetFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.ScopeAssetFilter) { // not required
		return nil
	}

	if m.ScopeAssetFilter != nil {
		if err := m.ScopeAssetFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope_asset_filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope_asset_filter")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this suppressionrules update suppression rule request based on the context it is used
func (m *SuppressionrulesUpdateSuppressionRuleRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRuleSelectionFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScopeAssetFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SuppressionrulesUpdateSuppressionRuleRequest) contextValidateRuleSelectionFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.RuleSelectionFilter != nil {

		if swag.IsZero(m.RuleSelectionFilter) { // not required
			return nil
		}

		if err := m.RuleSelectionFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule_selection_filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule_selection_filter")
			}
			return err
		}
	}

	return nil
}

func (m *SuppressionrulesUpdateSuppressionRuleRequest) contextValidateScopeAssetFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.ScopeAssetFilter != nil {

		if swag.IsZero(m.ScopeAssetFilter) { // not required
			return nil
		}

		if err := m.ScopeAssetFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope_asset_filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope_asset_filter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SuppressionrulesUpdateSuppressionRuleRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SuppressionrulesUpdateSuppressionRuleRequest) UnmarshalBinary(b []byte) error {
	var res SuppressionrulesUpdateSuppressionRuleRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
