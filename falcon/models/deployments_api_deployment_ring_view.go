// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeploymentsAPIDeploymentRingView deployments API deployment ring view
//
// swagger:model deployments.APIDeploymentRingView
type DeploymentsAPIDeploymentRingView struct {

	// complete timestamp
	// Format: date-time
	CompleteTimestamp strfmt.DateTime `json:"complete_timestamp,omitempty"`

	// gates
	Gates []DeploymentsGate `json:"gates"`

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// ramping schedule
	RampingSchedule []int64 `json:"ramping_schedule"`

	// start timestamp
	// Format: date-time
	StartTimestamp strfmt.DateTime `json:"start_timestamp,omitempty"`

	// threshold
	Threshold int32 `json:"threshold,omitempty"`
}

// Validate validates this deployments API deployment ring view
func (m *DeploymentsAPIDeploymentRingView) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompleteTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentsAPIDeploymentRingView) validateCompleteTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.CompleteTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("complete_timestamp", "body", "date-time", m.CompleteTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentsAPIDeploymentRingView) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentsAPIDeploymentRingView) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentsAPIDeploymentRingView) validateStartTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("start_timestamp", "body", "date-time", m.StartTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this deployments API deployment ring view based on context it is used
func (m *DeploymentsAPIDeploymentRingView) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentsAPIDeploymentRingView) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentsAPIDeploymentRingView) UnmarshalBinary(b []byte) error {
	var res DeploymentsAPIDeploymentRingView
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
