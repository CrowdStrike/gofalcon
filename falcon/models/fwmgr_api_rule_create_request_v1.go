// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FwmgrAPIRuleCreateRequestV1 fwmgr api rule create request v1
//
// swagger:model fwmgr.api.RuleCreateRequestV1
type FwmgrAPIRuleCreateRequestV1 struct {

	// action
	// Required: true
	Action *string `json:"action"`

	// address family
	// Required: true
	AddressFamily *string `json:"address_family"`

	// description
	// Required: true
	Description *string `json:"description"`

	// direction
	// Required: true
	Direction *string `json:"direction"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// fields
	// Required: true
	Fields []*FwmgrAPIWorkaroundUIFieldValue `json:"fields"`

	// icmp
	// Required: true
	Icmp *FwmgrDomainICMP `json:"icmp"`

	// local address
	// Required: true
	LocalAddress []*FwmgrDomainAddressRange `json:"local_address"`

	// local port
	// Required: true
	LocalPort []*FwmgrDomainPortRange `json:"local_port"`

	// log
	// Required: true
	Log *bool `json:"log"`

	// monitor
	// Required: true
	Monitor *FwmgrDomainMonitoring `json:"monitor"`

	// name
	// Required: true
	Name *string `json:"name"`

	// protocol
	// Required: true
	Protocol *string `json:"protocol"`

	// remote address
	// Required: true
	RemoteAddress []*FwmgrDomainAddressRange `json:"remote_address"`

	// remote port
	// Required: true
	RemotePort []*FwmgrDomainPortRange `json:"remote_port"`

	// temp id
	// Required: true
	TempID *string `json:"temp_id"`
}

// Validate validates this fwmgr api rule create request v1
func (m *FwmgrAPIRuleCreateRequestV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressFamily(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIcmp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemotePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTempID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FwmgrAPIRuleCreateRequestV1) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleCreateRequestV1) validateAddressFamily(formats strfmt.Registry) error {

	if err := validate.Required("address_family", "body", m.AddressFamily); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleCreateRequestV1) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleCreateRequestV1) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleCreateRequestV1) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleCreateRequestV1) validateFields(formats strfmt.Registry) error {

	if err := validate.Required("fields", "body", m.Fields); err != nil {
		return err
	}

	for i := 0; i < len(m.Fields); i++ {
		if swag.IsZero(m.Fields[i]) { // not required
			continue
		}

		if m.Fields[i] != nil {
			if err := m.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FwmgrAPIRuleCreateRequestV1) validateIcmp(formats strfmt.Registry) error {

	if err := validate.Required("icmp", "body", m.Icmp); err != nil {
		return err
	}

	if m.Icmp != nil {
		if err := m.Icmp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("icmp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("icmp")
			}
			return err
		}
	}

	return nil
}

func (m *FwmgrAPIRuleCreateRequestV1) validateLocalAddress(formats strfmt.Registry) error {

	if err := validate.Required("local_address", "body", m.LocalAddress); err != nil {
		return err
	}

	for i := 0; i < len(m.LocalAddress); i++ {
		if swag.IsZero(m.LocalAddress[i]) { // not required
			continue
		}

		if m.LocalAddress[i] != nil {
			if err := m.LocalAddress[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("local_address" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("local_address" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FwmgrAPIRuleCreateRequestV1) validateLocalPort(formats strfmt.Registry) error {

	if err := validate.Required("local_port", "body", m.LocalPort); err != nil {
		return err
	}

	for i := 0; i < len(m.LocalPort); i++ {
		if swag.IsZero(m.LocalPort[i]) { // not required
			continue
		}

		if m.LocalPort[i] != nil {
			if err := m.LocalPort[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("local_port" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("local_port" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FwmgrAPIRuleCreateRequestV1) validateLog(formats strfmt.Registry) error {

	if err := validate.Required("log", "body", m.Log); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleCreateRequestV1) validateMonitor(formats strfmt.Registry) error {

	if err := validate.Required("monitor", "body", m.Monitor); err != nil {
		return err
	}

	if m.Monitor != nil {
		if err := m.Monitor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitor")
			}
			return err
		}
	}

	return nil
}

func (m *FwmgrAPIRuleCreateRequestV1) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleCreateRequestV1) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleCreateRequestV1) validateRemoteAddress(formats strfmt.Registry) error {

	if err := validate.Required("remote_address", "body", m.RemoteAddress); err != nil {
		return err
	}

	for i := 0; i < len(m.RemoteAddress); i++ {
		if swag.IsZero(m.RemoteAddress[i]) { // not required
			continue
		}

		if m.RemoteAddress[i] != nil {
			if err := m.RemoteAddress[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remote_address" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remote_address" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FwmgrAPIRuleCreateRequestV1) validateRemotePort(formats strfmt.Registry) error {

	if err := validate.Required("remote_port", "body", m.RemotePort); err != nil {
		return err
	}

	for i := 0; i < len(m.RemotePort); i++ {
		if swag.IsZero(m.RemotePort[i]) { // not required
			continue
		}

		if m.RemotePort[i] != nil {
			if err := m.RemotePort[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remote_port" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remote_port" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FwmgrAPIRuleCreateRequestV1) validateTempID(formats strfmt.Registry) error {

	if err := validate.Required("temp_id", "body", m.TempID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this fwmgr api rule create request v1 based on the context it is used
func (m *FwmgrAPIRuleCreateRequestV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIcmp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocalAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocalPort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMonitor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemoteAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemotePort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FwmgrAPIRuleCreateRequestV1) contextValidateFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Fields); i++ {

		if m.Fields[i] != nil {
			if err := m.Fields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FwmgrAPIRuleCreateRequestV1) contextValidateIcmp(ctx context.Context, formats strfmt.Registry) error {

	if m.Icmp != nil {
		if err := m.Icmp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("icmp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("icmp")
			}
			return err
		}
	}

	return nil
}

func (m *FwmgrAPIRuleCreateRequestV1) contextValidateLocalAddress(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LocalAddress); i++ {

		if m.LocalAddress[i] != nil {
			if err := m.LocalAddress[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("local_address" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("local_address" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FwmgrAPIRuleCreateRequestV1) contextValidateLocalPort(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LocalPort); i++ {

		if m.LocalPort[i] != nil {
			if err := m.LocalPort[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("local_port" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("local_port" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FwmgrAPIRuleCreateRequestV1) contextValidateMonitor(ctx context.Context, formats strfmt.Registry) error {

	if m.Monitor != nil {
		if err := m.Monitor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitor")
			}
			return err
		}
	}

	return nil
}

func (m *FwmgrAPIRuleCreateRequestV1) contextValidateRemoteAddress(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RemoteAddress); i++ {

		if m.RemoteAddress[i] != nil {
			if err := m.RemoteAddress[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remote_address" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remote_address" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FwmgrAPIRuleCreateRequestV1) contextValidateRemotePort(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RemotePort); i++ {

		if m.RemotePort[i] != nil {
			if err := m.RemotePort[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remote_port" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remote_port" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FwmgrAPIRuleCreateRequestV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FwmgrAPIRuleCreateRequestV1) UnmarshalBinary(b []byte) error {
	var res FwmgrAPIRuleCreateRequestV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
