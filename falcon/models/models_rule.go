// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsRule models rule
//
// swagger:model models.Rule
type ModelsRule struct {

	// default configuration
	// Required: true
	DefaultConfiguration *ModelsRuleDefaultConfiguration `json:"defaultConfiguration"`

	// full description
	// Required: true
	FullDescription *ModelsMessage `json:"fullDescription"`

	// help
	// Required: true
	Help *Help `json:"help"`

	// help Uri
	// Required: true
	HelpURI *string `json:"helpUri"`

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// properties
	// Required: true
	Properties *ModelsRuleProperties `json:"properties"`

	// short description
	// Required: true
	ShortDescription *ModelsMessage `json:"shortDescription"`
}

// Validate validates this models rule
func (m *ModelsRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHelp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHelpURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShortDescription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsRule) validateDefaultConfiguration(formats strfmt.Registry) error {

	if err := validate.Required("defaultConfiguration", "body", m.DefaultConfiguration); err != nil {
		return err
	}

	if m.DefaultConfiguration != nil {
		if err := m.DefaultConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsRule) validateFullDescription(formats strfmt.Registry) error {

	if err := validate.Required("fullDescription", "body", m.FullDescription); err != nil {
		return err
	}

	if m.FullDescription != nil {
		if err := m.FullDescription.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fullDescription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fullDescription")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsRule) validateHelp(formats strfmt.Registry) error {

	if err := validate.Required("help", "body", m.Help); err != nil {
		return err
	}

	if m.Help != nil {
		if err := m.Help.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("help")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("help")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsRule) validateHelpURI(formats strfmt.Registry) error {

	if err := validate.Required("helpUri", "body", m.HelpURI); err != nil {
		return err
	}

	return nil
}

func (m *ModelsRule) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsRule) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ModelsRule) validateProperties(formats strfmt.Registry) error {

	if err := validate.Required("properties", "body", m.Properties); err != nil {
		return err
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsRule) validateShortDescription(formats strfmt.Registry) error {

	if err := validate.Required("shortDescription", "body", m.ShortDescription); err != nil {
		return err
	}

	if m.ShortDescription != nil {
		if err := m.ShortDescription.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shortDescription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shortDescription")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this models rule based on the context it is used
func (m *ModelsRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDefaultConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFullDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHelp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShortDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsRule) contextValidateDefaultConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultConfiguration != nil {

		if err := m.DefaultConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsRule) contextValidateFullDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.FullDescription != nil {

		if err := m.FullDescription.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fullDescription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fullDescription")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsRule) contextValidateHelp(ctx context.Context, formats strfmt.Registry) error {

	if m.Help != nil {

		if err := m.Help.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("help")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("help")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsRule) contextValidateProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.Properties != nil {

		if err := m.Properties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsRule) contextValidateShortDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.ShortDescription != nil {

		if err := m.ShortDescription.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shortDescription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shortDescription")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsRule) UnmarshalBinary(b []byte) error {
	var res ModelsRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
