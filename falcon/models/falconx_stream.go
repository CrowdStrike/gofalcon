// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FalconxStream falconx stream
//
// swagger:model falconx.Stream
type FalconxStream struct {

	// executed
	Executed bool `json:"executed,omitempty"`

	// file name
	FileName string `json:"file_name,omitempty"`

	// human keywords
	HumanKeywords string `json:"human_keywords,omitempty"`

	// instructions artifact id
	InstructionsArtifactID string `json:"instructions_artifact_id,omitempty"`

	// matched signatures
	MatchedSignatures []*FalconxMatchedSignature `json:"matched_signatures"`

	// uid
	UID string `json:"uid,omitempty"`
}

// Validate validates this falconx stream
func (m *FalconxStream) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchedSignatures(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconxStream) validateMatchedSignatures(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchedSignatures) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchedSignatures); i++ {
		if swag.IsZero(m.MatchedSignatures[i]) { // not required
			continue
		}

		if m.MatchedSignatures[i] != nil {
			if err := m.MatchedSignatures[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matched_signatures" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("matched_signatures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this falconx stream based on the context it is used
func (m *FalconxStream) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMatchedSignatures(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconxStream) contextValidateMatchedSignatures(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MatchedSignatures); i++ {

		if m.MatchedSignatures[i] != nil {

			if swag.IsZero(m.MatchedSignatures[i]) { // not required
				return nil
			}

			if err := m.MatchedSignatures[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matched_signatures" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("matched_signatures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FalconxStream) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FalconxStream) UnmarshalBinary(b []byte) error {
	var res FalconxStream
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
