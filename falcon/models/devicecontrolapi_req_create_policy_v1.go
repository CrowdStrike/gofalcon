// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DevicecontrolapiReqCreatePolicyV1 devicecontrolapi req create policy v1
//
// swagger:model devicecontrolapi.ReqCreatePolicyV1
type DevicecontrolapiReqCreatePolicyV1 struct {

	// Object for the Bluetooth base settings. Defaults will be set if omitted
	BluetoothSettings *DevicecontrolapiReqUpdateBluetoothBaseV1 `json:"bluetooth_settings,omitempty"`

	// ID of an existing policy to clone
	CloneID string `json:"clone_id,omitempty"`

	// A description of the policy. Maximum length: 512 characters
	Description string `json:"description,omitempty"`

	// Name of the policy. Cannot be blank and must only contain: letters, numbers, and the special characters: _, -, :, ;, ., !, and space
	Name string `json:"name,omitempty"`

	// Name of the platform. *Required if clone_id is empty
	// Enum: ["Windows","Mac"]
	PlatformName string `json:"platform_name,omitempty"`

	// Object for the USB base settings. Defaults will be set if omitted
	UsbSettings *DevicecontrolapiReqUpdateUSBBaseV1 `json:"usb_settings,omitempty"`
}

// Validate validates this devicecontrolapi req create policy v1
func (m *DevicecontrolapiReqCreatePolicyV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBluetoothSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsbSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontrolapiReqCreatePolicyV1) validateBluetoothSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.BluetoothSettings) { // not required
		return nil
	}

	if m.BluetoothSettings != nil {
		if err := m.BluetoothSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bluetooth_settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bluetooth_settings")
			}
			return err
		}
	}

	return nil
}

var devicecontrolapiReqCreatePolicyV1TypePlatformNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Windows","Mac"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		devicecontrolapiReqCreatePolicyV1TypePlatformNamePropEnum = append(devicecontrolapiReqCreatePolicyV1TypePlatformNamePropEnum, v)
	}
}

const (

	// DevicecontrolapiReqCreatePolicyV1PlatformNameWindows captures enum value "Windows"
	DevicecontrolapiReqCreatePolicyV1PlatformNameWindows string = "Windows"

	// DevicecontrolapiReqCreatePolicyV1PlatformNameMac captures enum value "Mac"
	DevicecontrolapiReqCreatePolicyV1PlatformNameMac string = "Mac"
)

// prop value enum
func (m *DevicecontrolapiReqCreatePolicyV1) validatePlatformNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, devicecontrolapiReqCreatePolicyV1TypePlatformNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DevicecontrolapiReqCreatePolicyV1) validatePlatformName(formats strfmt.Registry) error {
	if swag.IsZero(m.PlatformName) { // not required
		return nil
	}

	// value enum
	if err := m.validatePlatformNameEnum("platform_name", "body", m.PlatformName); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiReqCreatePolicyV1) validateUsbSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.UsbSettings) { // not required
		return nil
	}

	if m.UsbSettings != nil {
		if err := m.UsbSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usb_settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usb_settings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this devicecontrolapi req create policy v1 based on the context it is used
func (m *DevicecontrolapiReqCreatePolicyV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBluetoothSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsbSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontrolapiReqCreatePolicyV1) contextValidateBluetoothSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.BluetoothSettings != nil {

		if swag.IsZero(m.BluetoothSettings) { // not required
			return nil
		}

		if err := m.BluetoothSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bluetooth_settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bluetooth_settings")
			}
			return err
		}
	}

	return nil
}

func (m *DevicecontrolapiReqCreatePolicyV1) contextValidateUsbSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.UsbSettings != nil {

		if swag.IsZero(m.UsbSettings) { // not required
			return nil
		}

		if err := m.UsbSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usb_settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usb_settings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DevicecontrolapiReqCreatePolicyV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevicecontrolapiReqCreatePolicyV1) UnmarshalBinary(b []byte) error {
	var res DevicecontrolapiReqCreatePolicyV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
