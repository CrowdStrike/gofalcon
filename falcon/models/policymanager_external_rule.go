// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicymanagerExternalRule policymanager external rule
//
// swagger:model policymanager.externalRule
type PolicymanagerExternalRule struct {

	// ad groups
	// Required: true
	AdGroups []string `json:"ad_groups"`

	// ad users
	// Required: true
	AdUsers []string `json:"ad_users"`

	// created time stamp
	CreatedTimeStamp string `json:"created_time_stamp,omitempty"`

	// description
	// Required: true
	Description *string `json:"description"`

	// Accepts values: 'informational', 'low', 'medium', 'high', 'critical'
	// Required: true
	// Enum: [informational low medium high critical]
	DetectionSeverity *string `json:"detection_severity"`

	// enable printer egress
	// Required: true
	EnablePrinterEgress *bool `json:"enable_printer_egress"`

	// enable usb devices
	// Required: true
	EnableUsbDevices *bool `json:"enable_usb_devices"`

	// enable web locations
	// Required: true
	EnableWebLocations *bool `json:"enable_web_locations"`

	// id
	// Required: true
	ID *string `json:"id"`

	// modified time stamp
	ModifiedTimeStamp string `json:"modified_time_stamp,omitempty"`

	// notify end user
	// Required: true
	NotifyEndUser *bool `json:"notify_end_user"`

	// Accepts values: 'allow', 'block', 'justify'
	// Required: true
	// Enum: [allow block justify]
	ResponseAction *string `json:"response_action"`

	// trigger detection
	// Required: true
	TriggerDetection *bool `json:"trigger_detection"`

	// Accepts values: 'all', 'specific'
	// Required: true
	// Enum: [all specific]
	UserScope *string `json:"user_scope"`

	// web locations
	// Required: true
	WebLocations []string `json:"web_locations"`

	// Accepts values: 'all', 'specific'
	// Required: true
	// Enum: [all specific]
	WebLocationsScope *string `json:"web_locations_scope"`
}

// Validate validates this policymanager external rule
func (m *PolicymanagerExternalRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectionSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnablePrinterEgress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableUsbDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableWebLocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotifyEndUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponseAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebLocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebLocationsScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicymanagerExternalRule) validateAdGroups(formats strfmt.Registry) error {

	if err := validate.Required("ad_groups", "body", m.AdGroups); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalRule) validateAdUsers(formats strfmt.Registry) error {

	if err := validate.Required("ad_users", "body", m.AdUsers); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalRule) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

var policymanagerExternalRuleTypeDetectionSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["informational","low","medium","high","critical"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policymanagerExternalRuleTypeDetectionSeverityPropEnum = append(policymanagerExternalRuleTypeDetectionSeverityPropEnum, v)
	}
}

const (

	// PolicymanagerExternalRuleDetectionSeverityInformational captures enum value "informational"
	PolicymanagerExternalRuleDetectionSeverityInformational string = "informational"

	// PolicymanagerExternalRuleDetectionSeverityLow captures enum value "low"
	PolicymanagerExternalRuleDetectionSeverityLow string = "low"

	// PolicymanagerExternalRuleDetectionSeverityMedium captures enum value "medium"
	PolicymanagerExternalRuleDetectionSeverityMedium string = "medium"

	// PolicymanagerExternalRuleDetectionSeverityHigh captures enum value "high"
	PolicymanagerExternalRuleDetectionSeverityHigh string = "high"

	// PolicymanagerExternalRuleDetectionSeverityCritical captures enum value "critical"
	PolicymanagerExternalRuleDetectionSeverityCritical string = "critical"
)

// prop value enum
func (m *PolicymanagerExternalRule) validateDetectionSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policymanagerExternalRuleTypeDetectionSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicymanagerExternalRule) validateDetectionSeverity(formats strfmt.Registry) error {

	if err := validate.Required("detection_severity", "body", m.DetectionSeverity); err != nil {
		return err
	}

	// value enum
	if err := m.validateDetectionSeverityEnum("detection_severity", "body", *m.DetectionSeverity); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalRule) validateEnablePrinterEgress(formats strfmt.Registry) error {

	if err := validate.Required("enable_printer_egress", "body", m.EnablePrinterEgress); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalRule) validateEnableUsbDevices(formats strfmt.Registry) error {

	if err := validate.Required("enable_usb_devices", "body", m.EnableUsbDevices); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalRule) validateEnableWebLocations(formats strfmt.Registry) error {

	if err := validate.Required("enable_web_locations", "body", m.EnableWebLocations); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalRule) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalRule) validateNotifyEndUser(formats strfmt.Registry) error {

	if err := validate.Required("notify_end_user", "body", m.NotifyEndUser); err != nil {
		return err
	}

	return nil
}

var policymanagerExternalRuleTypeResponseActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","block","justify"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policymanagerExternalRuleTypeResponseActionPropEnum = append(policymanagerExternalRuleTypeResponseActionPropEnum, v)
	}
}

const (

	// PolicymanagerExternalRuleResponseActionAllow captures enum value "allow"
	PolicymanagerExternalRuleResponseActionAllow string = "allow"

	// PolicymanagerExternalRuleResponseActionBlock captures enum value "block"
	PolicymanagerExternalRuleResponseActionBlock string = "block"

	// PolicymanagerExternalRuleResponseActionJustify captures enum value "justify"
	PolicymanagerExternalRuleResponseActionJustify string = "justify"
)

// prop value enum
func (m *PolicymanagerExternalRule) validateResponseActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policymanagerExternalRuleTypeResponseActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicymanagerExternalRule) validateResponseAction(formats strfmt.Registry) error {

	if err := validate.Required("response_action", "body", m.ResponseAction); err != nil {
		return err
	}

	// value enum
	if err := m.validateResponseActionEnum("response_action", "body", *m.ResponseAction); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalRule) validateTriggerDetection(formats strfmt.Registry) error {

	if err := validate.Required("trigger_detection", "body", m.TriggerDetection); err != nil {
		return err
	}

	return nil
}

var policymanagerExternalRuleTypeUserScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["all","specific"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policymanagerExternalRuleTypeUserScopePropEnum = append(policymanagerExternalRuleTypeUserScopePropEnum, v)
	}
}

const (

	// PolicymanagerExternalRuleUserScopeAll captures enum value "all"
	PolicymanagerExternalRuleUserScopeAll string = "all"

	// PolicymanagerExternalRuleUserScopeSpecific captures enum value "specific"
	PolicymanagerExternalRuleUserScopeSpecific string = "specific"
)

// prop value enum
func (m *PolicymanagerExternalRule) validateUserScopeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policymanagerExternalRuleTypeUserScopePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicymanagerExternalRule) validateUserScope(formats strfmt.Registry) error {

	if err := validate.Required("user_scope", "body", m.UserScope); err != nil {
		return err
	}

	// value enum
	if err := m.validateUserScopeEnum("user_scope", "body", *m.UserScope); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalRule) validateWebLocations(formats strfmt.Registry) error {

	if err := validate.Required("web_locations", "body", m.WebLocations); err != nil {
		return err
	}

	return nil
}

var policymanagerExternalRuleTypeWebLocationsScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["all","specific"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policymanagerExternalRuleTypeWebLocationsScopePropEnum = append(policymanagerExternalRuleTypeWebLocationsScopePropEnum, v)
	}
}

const (

	// PolicymanagerExternalRuleWebLocationsScopeAll captures enum value "all"
	PolicymanagerExternalRuleWebLocationsScopeAll string = "all"

	// PolicymanagerExternalRuleWebLocationsScopeSpecific captures enum value "specific"
	PolicymanagerExternalRuleWebLocationsScopeSpecific string = "specific"
)

// prop value enum
func (m *PolicymanagerExternalRule) validateWebLocationsScopeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policymanagerExternalRuleTypeWebLocationsScopePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicymanagerExternalRule) validateWebLocationsScope(formats strfmt.Registry) error {

	if err := validate.Required("web_locations_scope", "body", m.WebLocationsScope); err != nil {
		return err
	}

	// value enum
	if err := m.validateWebLocationsScopeEnum("web_locations_scope", "body", *m.WebLocationsScope); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this policymanager external rule based on context it is used
func (m *PolicymanagerExternalRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PolicymanagerExternalRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicymanagerExternalRule) UnmarshalBinary(b []byte) error {
	var res PolicymanagerExternalRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
