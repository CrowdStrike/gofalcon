// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItautomationSearchRequest itautomation search request
//
// swagger:model itautomation.SearchRequest
type ItautomationSearchRequest struct {

	// Filter expressions to limit results. Example: ["hostname:*prod*"]
	FilterExpressions []string `json:"filter_expressions"`

	// Fields to group results by. Example: ["hostname", "status"]
	GroupByFields []string `json:"group_by_fields"`

	// End time for the search period. Example: now
	// Required: true
	SearchEnd *string `json:"search_end"`

	// Start time for the search period. Example: -1d
	// Required: true
	SearchStart *string `json:"search_start"`

	// Unique identifier of the task execution to search. Example: f64b95555ef54ea682619ce880d267cc
	// Required: true
	TaskExecutionID *string `json:"task_execution_id"`
}

// Validate validates this itautomation search request
func (m *ItautomationSearchRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSearchEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSearchStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskExecutionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItautomationSearchRequest) validateSearchEnd(formats strfmt.Registry) error {

	if err := validate.Required("search_end", "body", m.SearchEnd); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationSearchRequest) validateSearchStart(formats strfmt.Registry) error {

	if err := validate.Required("search_start", "body", m.SearchStart); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationSearchRequest) validateTaskExecutionID(formats strfmt.Registry) error {

	if err := validate.Required("task_execution_id", "body", m.TaskExecutionID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this itautomation search request based on context it is used
func (m *ItautomationSearchRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ItautomationSearchRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItautomationSearchRequest) UnmarshalBinary(b []byte) error {
	var res ItautomationSearchRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
