// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SystemLogGetSystemLogs system log get system logs
//
// swagger:model SystemLog_GetSystemLogs
type SystemLogGetSystemLogs struct {

	// Account id
	// Required: true
	AccountID *string `json:"account_id"`

	// Action
	// Required: true
	// Min Length: 1
	Action *string `json:"action"`

	// Event time
	// Required: true
	// Format: date-time
	EventTime *strfmt.DateTime `json:"event_time"`

	// Id
	// Required: true
	ID *string `json:"id"`

	// Integration alias
	// Required: true
	// Min Length: 1
	IntegrationAlias *string `json:"integration_alias"`

	// Integration id
	// Required: true
	IntegrationID *string `json:"integration_id"`

	// Method
	// Required: true
	// Min Length: 1
	Method *string `json:"method"`

	// Saas name
	// Required: true
	// Min Length: 1
	SaasName *string `json:"saas_name"`

	// Source ip
	// Required: true
	// Min Length: 1
	SourceIP *string `json:"source_ip"`

	// Status
	// Required: true
	// Min Length: 1
	Status *string `json:"status"`
}

// Validate validates this system log get system logs
func (m *SystemLogGetSystemLogs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegrationAlias(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegrationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSaasName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemLogGetSystemLogs) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("account_id", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *SystemLogGetSystemLogs) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	if err := validate.MinLength("action", "body", *m.Action, 1); err != nil {
		return err
	}

	return nil
}

func (m *SystemLogGetSystemLogs) validateEventTime(formats strfmt.Registry) error {

	if err := validate.Required("event_time", "body", m.EventTime); err != nil {
		return err
	}

	if err := validate.FormatOf("event_time", "body", "date-time", m.EventTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SystemLogGetSystemLogs) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SystemLogGetSystemLogs) validateIntegrationAlias(formats strfmt.Registry) error {

	if err := validate.Required("integration_alias", "body", m.IntegrationAlias); err != nil {
		return err
	}

	if err := validate.MinLength("integration_alias", "body", *m.IntegrationAlias, 1); err != nil {
		return err
	}

	return nil
}

func (m *SystemLogGetSystemLogs) validateIntegrationID(formats strfmt.Registry) error {

	if err := validate.Required("integration_id", "body", m.IntegrationID); err != nil {
		return err
	}

	return nil
}

func (m *SystemLogGetSystemLogs) validateMethod(formats strfmt.Registry) error {

	if err := validate.Required("method", "body", m.Method); err != nil {
		return err
	}

	if err := validate.MinLength("method", "body", *m.Method, 1); err != nil {
		return err
	}

	return nil
}

func (m *SystemLogGetSystemLogs) validateSaasName(formats strfmt.Registry) error {

	if err := validate.Required("saas_name", "body", m.SaasName); err != nil {
		return err
	}

	if err := validate.MinLength("saas_name", "body", *m.SaasName, 1); err != nil {
		return err
	}

	return nil
}

func (m *SystemLogGetSystemLogs) validateSourceIP(formats strfmt.Registry) error {

	if err := validate.Required("source_ip", "body", m.SourceIP); err != nil {
		return err
	}

	if err := validate.MinLength("source_ip", "body", *m.SourceIP, 1); err != nil {
		return err
	}

	return nil
}

func (m *SystemLogGetSystemLogs) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.MinLength("status", "body", *m.Status, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this system log get system logs based on context it is used
func (m *SystemLogGetSystemLogs) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SystemLogGetSystemLogs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemLogGetSystemLogs) UnmarshalBinary(b []byte) error {
	var res SystemLogGetSystemLogs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
