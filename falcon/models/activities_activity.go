// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActivitiesActivity activities activity
//
// swagger:model activities.Activity
type ActivitiesActivity struct {

	// Required api scope to use this activity.
	APIScope string `json:"api_scope,omitempty"`

	// Optional ID if the activity is exposed through an app from Store
	AppID string `json:"app_id,omitempty"`

	// The CID that owns this activity, if this is empty it is a global activity
	// Required: true
	Cid *string `json:"cid"`

	// Activity class to identify how it should be orchestrated. E.g. External, Break, CreateVariable and UpdateVariable
	Class string `json:"class,omitempty"`

	// A detailed description of what this action does
	// Required: true
	Description *string `json:"description"`

	// A flag indicating whether the activity is potentially disruptive/destructive
	// Required: true
	Disruptive *bool `json:"disruptive"`

	// Indicates whether an activity is available for the caller
	// Required: true
	HasPermission *bool `json:"has_permission"`

	// Unique ID of the activity, auto-generated by the API service
	// Required: true
	ID *string `json:"id"`

	// Input fields required for configuring activity
	InputFields []*ActivitiesActivityExtField `json:"input_fields"`

	// JSON Schema describing the structured input of the activity for execution
	InputSchema *JsonschemaSchema `json:"input_schema,omitempty"`

	// A machine or developer-generated output, which should conform to the activity's output schema.
	MockOutput ActivitiesActivityMockOutput `json:"mock_output,omitempty"`

	// UI name for displaying the activity to a user
	// Required: true
	Name *string `json:"name"`

	// Unique namespace for the activity.
	Namespace string `json:"namespace,omitempty"`

	// Output fields of the activity once executed
	OutputFields []*ActivitiesActivityExtField `json:"output_fields"`

	// JSON Schema describing the structured output of the activity once executed
	OutputSchema *JsonschemaSchema `json:"output_schema,omitempty"`

	// Tag IDs assigned to this activity
	TagIds []string `json:"tag_ids"`

	// Timestamp of when the activity was last updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// UseCases used by this activity
	UseCases []string `json:"use_cases"`

	// Vendors used by this activity
	Vendor string `json:"vendor,omitempty"`

	// An incrementing version number
	Version int32 `json:"version,omitempty"`
}

// Validate validates this activities activity
func (m *ActivitiesActivity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisruptive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasPermission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputSchema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputSchema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActivitiesActivity) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *ActivitiesActivity) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ActivitiesActivity) validateDisruptive(formats strfmt.Registry) error {

	if err := validate.Required("disruptive", "body", m.Disruptive); err != nil {
		return err
	}

	return nil
}

func (m *ActivitiesActivity) validateHasPermission(formats strfmt.Registry) error {

	if err := validate.Required("has_permission", "body", m.HasPermission); err != nil {
		return err
	}

	return nil
}

func (m *ActivitiesActivity) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ActivitiesActivity) validateInputFields(formats strfmt.Registry) error {
	if swag.IsZero(m.InputFields) { // not required
		return nil
	}

	for i := 0; i < len(m.InputFields); i++ {
		if swag.IsZero(m.InputFields[i]) { // not required
			continue
		}

		if m.InputFields[i] != nil {
			if err := m.InputFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("input_fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("input_fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ActivitiesActivity) validateInputSchema(formats strfmt.Registry) error {
	if swag.IsZero(m.InputSchema) { // not required
		return nil
	}

	if m.InputSchema != nil {
		if err := m.InputSchema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input_schema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("input_schema")
			}
			return err
		}
	}

	return nil
}

func (m *ActivitiesActivity) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ActivitiesActivity) validateOutputFields(formats strfmt.Registry) error {
	if swag.IsZero(m.OutputFields) { // not required
		return nil
	}

	for i := 0; i < len(m.OutputFields); i++ {
		if swag.IsZero(m.OutputFields[i]) { // not required
			continue
		}

		if m.OutputFields[i] != nil {
			if err := m.OutputFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("output_fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("output_fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ActivitiesActivity) validateOutputSchema(formats strfmt.Registry) error {
	if swag.IsZero(m.OutputSchema) { // not required
		return nil
	}

	if m.OutputSchema != nil {
		if err := m.OutputSchema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output_schema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output_schema")
			}
			return err
		}
	}

	return nil
}

func (m *ActivitiesActivity) validateUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this activities activity based on the context it is used
func (m *ActivitiesActivity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInputFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInputSchema(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutputFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutputSchema(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActivitiesActivity) contextValidateInputFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InputFields); i++ {

		if m.InputFields[i] != nil {

			if swag.IsZero(m.InputFields[i]) { // not required
				return nil
			}

			if err := m.InputFields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("input_fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("input_fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ActivitiesActivity) contextValidateInputSchema(ctx context.Context, formats strfmt.Registry) error {

	if m.InputSchema != nil {

		if swag.IsZero(m.InputSchema) { // not required
			return nil
		}

		if err := m.InputSchema.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input_schema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("input_schema")
			}
			return err
		}
	}

	return nil
}

func (m *ActivitiesActivity) contextValidateOutputFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OutputFields); i++ {

		if m.OutputFields[i] != nil {

			if swag.IsZero(m.OutputFields[i]) { // not required
				return nil
			}

			if err := m.OutputFields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("output_fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("output_fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ActivitiesActivity) contextValidateOutputSchema(ctx context.Context, formats strfmt.Registry) error {

	if m.OutputSchema != nil {

		if swag.IsZero(m.OutputSchema) { // not required
			return nil
		}

		if err := m.OutputSchema.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output_schema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output_schema")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ActivitiesActivity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActivitiesActivity) UnmarshalBinary(b []byte) error {
	var res ActivitiesActivity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
