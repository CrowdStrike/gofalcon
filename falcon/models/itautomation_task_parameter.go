// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItautomationTaskParameter itautomation task parameter
//
// swagger:model itautomation.TaskParameter
type ItautomationTaskParameter struct {

	// Message to show on failure of custom validation regex. Example: API Key must be 32 alphanumeric characters
	// Required: true
	CustomValidationMessage *string `json:"custom_validation_message"`

	// Custom regex pattern to apply when input_type is text. Example: ^[A-Za-z0-9]{32}$
	// Required: true
	CustomValidationRegex *string `json:"custom_validation_regex"`

	// Default value for the parameter. Example: default-api-key
	// Required: true
	DefaultValue *string `json:"default_value"`

	// Type of input field
	// Required: true
	// Enum: ["text","option"]
	InputType *string `json:"input_type"`

	// Unique identifier for the parameter, corresponds to placeholder used in task content. Example: api_key
	// Required: true
	Key *string `json:"key"`

	// Human readable label for the parameter. Example: API Key
	// Required: true
	Label *string `json:"label"`

	// Available options for option inputs. Used only if input_type is option.
	// Required: true
	Options []*ItautomationParameterOption `json:"options"`

	// Type of validation to apply when input_type is text
	// Required: true
	// Enum: ["text","alphanumeric","integer","float","ip","filepath","filepathwin","filepathunix","datetime","semver","macaddress","uuid","port","winhost","dnshost"]
	ValidationType *string `json:"validation_type"`
}

// Validate validates this itautomation task parameter
func (m *ItautomationTaskParameter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomValidationMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomValidationRegex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItautomationTaskParameter) validateCustomValidationMessage(formats strfmt.Registry) error {

	if err := validate.Required("custom_validation_message", "body", m.CustomValidationMessage); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskParameter) validateCustomValidationRegex(formats strfmt.Registry) error {

	if err := validate.Required("custom_validation_regex", "body", m.CustomValidationRegex); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskParameter) validateDefaultValue(formats strfmt.Registry) error {

	if err := validate.Required("default_value", "body", m.DefaultValue); err != nil {
		return err
	}

	return nil
}

var itautomationTaskParameterTypeInputTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["text","option"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itautomationTaskParameterTypeInputTypePropEnum = append(itautomationTaskParameterTypeInputTypePropEnum, v)
	}
}

const (

	// ItautomationTaskParameterInputTypeText captures enum value "text"
	ItautomationTaskParameterInputTypeText string = "text"

	// ItautomationTaskParameterInputTypeOption captures enum value "option"
	ItautomationTaskParameterInputTypeOption string = "option"
)

// prop value enum
func (m *ItautomationTaskParameter) validateInputTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, itautomationTaskParameterTypeInputTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ItautomationTaskParameter) validateInputType(formats strfmt.Registry) error {

	if err := validate.Required("input_type", "body", m.InputType); err != nil {
		return err
	}

	// value enum
	if err := m.validateInputTypeEnum("input_type", "body", *m.InputType); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskParameter) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskParameter) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskParameter) validateOptions(formats strfmt.Registry) error {

	if err := validate.Required("options", "body", m.Options); err != nil {
		return err
	}

	for i := 0; i < len(m.Options); i++ {
		if swag.IsZero(m.Options[i]) { // not required
			continue
		}

		if m.Options[i] != nil {
			if err := m.Options[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("options" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("options" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

var itautomationTaskParameterTypeValidationTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["text","alphanumeric","integer","float","ip","filepath","filepathwin","filepathunix","datetime","semver","macaddress","uuid","port","winhost","dnshost"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itautomationTaskParameterTypeValidationTypePropEnum = append(itautomationTaskParameterTypeValidationTypePropEnum, v)
	}
}

const (

	// ItautomationTaskParameterValidationTypeText captures enum value "text"
	ItautomationTaskParameterValidationTypeText string = "text"

	// ItautomationTaskParameterValidationTypeAlphanumeric captures enum value "alphanumeric"
	ItautomationTaskParameterValidationTypeAlphanumeric string = "alphanumeric"

	// ItautomationTaskParameterValidationTypeInteger captures enum value "integer"
	ItautomationTaskParameterValidationTypeInteger string = "integer"

	// ItautomationTaskParameterValidationTypeFloat captures enum value "float"
	ItautomationTaskParameterValidationTypeFloat string = "float"

	// ItautomationTaskParameterValidationTypeIP captures enum value "ip"
	ItautomationTaskParameterValidationTypeIP string = "ip"

	// ItautomationTaskParameterValidationTypeFilepath captures enum value "filepath"
	ItautomationTaskParameterValidationTypeFilepath string = "filepath"

	// ItautomationTaskParameterValidationTypeFilepathwin captures enum value "filepathwin"
	ItautomationTaskParameterValidationTypeFilepathwin string = "filepathwin"

	// ItautomationTaskParameterValidationTypeFilepathunix captures enum value "filepathunix"
	ItautomationTaskParameterValidationTypeFilepathunix string = "filepathunix"

	// ItautomationTaskParameterValidationTypeDatetime captures enum value "datetime"
	ItautomationTaskParameterValidationTypeDatetime string = "datetime"

	// ItautomationTaskParameterValidationTypeSemver captures enum value "semver"
	ItautomationTaskParameterValidationTypeSemver string = "semver"

	// ItautomationTaskParameterValidationTypeMacaddress captures enum value "macaddress"
	ItautomationTaskParameterValidationTypeMacaddress string = "macaddress"

	// ItautomationTaskParameterValidationTypeUUID captures enum value "uuid"
	ItautomationTaskParameterValidationTypeUUID string = "uuid"

	// ItautomationTaskParameterValidationTypePort captures enum value "port"
	ItautomationTaskParameterValidationTypePort string = "port"

	// ItautomationTaskParameterValidationTypeWinhost captures enum value "winhost"
	ItautomationTaskParameterValidationTypeWinhost string = "winhost"

	// ItautomationTaskParameterValidationTypeDnshost captures enum value "dnshost"
	ItautomationTaskParameterValidationTypeDnshost string = "dnshost"
)

// prop value enum
func (m *ItautomationTaskParameter) validateValidationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, itautomationTaskParameterTypeValidationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ItautomationTaskParameter) validateValidationType(formats strfmt.Registry) error {

	if err := validate.Required("validation_type", "body", m.ValidationType); err != nil {
		return err
	}

	// value enum
	if err := m.validateValidationTypeEnum("validation_type", "body", *m.ValidationType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this itautomation task parameter based on the context it is used
func (m *ItautomationTaskParameter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItautomationTaskParameter) contextValidateOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Options); i++ {

		if m.Options[i] != nil {

			if swag.IsZero(m.Options[i]) { // not required
				return nil
			}

			if err := m.Options[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("options" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("options" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ItautomationTaskParameter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItautomationTaskParameter) UnmarshalBinary(b []byte) error {
	var res ItautomationTaskParameter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
