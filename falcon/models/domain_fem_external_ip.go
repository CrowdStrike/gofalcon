// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DomainFemExternalIP domain fem external IP
//
// swagger:model domain.FemExternalIP
type DomainFemExternalIP struct {

	// AID if available
	Aid string `json:"aid,omitempty"`

	// ASN
	Asn int32 `json:"asn,omitempty"`

	// Cloud VM attributes
	CloudVM *DomainExternalAssetCloudVM `json:"cloud_vm,omitempty"`

	// The FQDN List of the related domains
	Fqdns []string `json:"fqdns"`

	// The IP address
	IPAddress string `json:"ip_address,omitempty"`

	// The ISP
	Isp string `json:"isp,omitempty"`

	// Information about the asset localisation
	Location *DomainExternalAssetGeographicalLocation `json:"location,omitempty"`

	// The PTR record
	Ptr string `json:"ptr,omitempty"`

	// A list of exposed services on the IP
	Services []*DomainExternalAssetService `json:"services"`
}

// Validate validates this domain fem external IP
func (m *DomainFemExternalIP) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudVM(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainFemExternalIP) validateCloudVM(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudVM) { // not required
		return nil
	}

	if m.CloudVM != nil {
		if err := m.CloudVM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud_vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloud_vm")
			}
			return err
		}
	}

	return nil
}

func (m *DomainFemExternalIP) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *DomainFemExternalIP) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(m.Services) { // not required
		return nil
	}

	for i := 0; i < len(m.Services); i++ {
		if swag.IsZero(m.Services[i]) { // not required
			continue
		}

		if m.Services[i] != nil {
			if err := m.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this domain fem external IP based on the context it is used
func (m *DomainFemExternalIP) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainFemExternalIP) contextValidateCloudVM(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudVM != nil {

		if swag.IsZero(m.CloudVM) { // not required
			return nil
		}

		if err := m.CloudVM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud_vm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloud_vm")
			}
			return err
		}
	}

	return nil
}

func (m *DomainFemExternalIP) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {

		if swag.IsZero(m.Location) { // not required
			return nil
		}

		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *DomainFemExternalIP) contextValidateServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Services); i++ {

		if m.Services[i] != nil {

			if swag.IsZero(m.Services[i]) { // not required
				return nil
			}

			if err := m.Services[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainFemExternalIP) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainFemExternalIP) UnmarshalBinary(b []byte) error {
	var res DomainFemExternalIP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
