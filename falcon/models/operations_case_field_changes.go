// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OperationsCaseFieldChanges operations case field changes
//
// swagger:model operations.CaseFieldChanges
type OperationsCaseFieldChanges struct {

	// assigned to user uuid
	// Required: true
	AssignedToUserUUID *string `json:"assigned_to_user_uuid"`

	// custom fields
	// Required: true
	CustomFields []*SdkCustomField `json:"custom_fields"`

	// description
	// Required: true
	Description *string `json:"description"`

	// name
	// Required: true
	Name *string `json:"name"`

	// remove user assignment
	// Required: true
	RemoveUserAssignment *bool `json:"remove_user_assignment"`

	// severity
	// Required: true
	Severity *int64 `json:"severity"`

	// slas active
	// Required: true
	SlasActive *bool `json:"slas_active"`

	// status
	// Required: true
	Status *string `json:"status"`

	// template
	Template *SdkTemplateSelector `json:"template,omitempty"`
}

// Validate validates this operations case field changes
func (m *OperationsCaseFieldChanges) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignedToUserUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoveUserAssignment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlasActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationsCaseFieldChanges) validateAssignedToUserUUID(formats strfmt.Registry) error {

	if err := validate.Required("assigned_to_user_uuid", "body", m.AssignedToUserUUID); err != nil {
		return err
	}

	return nil
}

func (m *OperationsCaseFieldChanges) validateCustomFields(formats strfmt.Registry) error {

	if err := validate.Required("custom_fields", "body", m.CustomFields); err != nil {
		return err
	}

	for i := 0; i < len(m.CustomFields); i++ {
		if swag.IsZero(m.CustomFields[i]) { // not required
			continue
		}

		if m.CustomFields[i] != nil {
			if err := m.CustomFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("custom_fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("custom_fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OperationsCaseFieldChanges) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *OperationsCaseFieldChanges) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *OperationsCaseFieldChanges) validateRemoveUserAssignment(formats strfmt.Registry) error {

	if err := validate.Required("remove_user_assignment", "body", m.RemoveUserAssignment); err != nil {
		return err
	}

	return nil
}

func (m *OperationsCaseFieldChanges) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *OperationsCaseFieldChanges) validateSlasActive(formats strfmt.Registry) error {

	if err := validate.Required("slas_active", "body", m.SlasActive); err != nil {
		return err
	}

	return nil
}

func (m *OperationsCaseFieldChanges) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *OperationsCaseFieldChanges) validateTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.Template) { // not required
		return nil
	}

	if m.Template != nil {
		if err := m.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this operations case field changes based on the context it is used
func (m *OperationsCaseFieldChanges) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationsCaseFieldChanges) contextValidateCustomFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CustomFields); i++ {

		if m.CustomFields[i] != nil {

			if swag.IsZero(m.CustomFields[i]) { // not required
				return nil
			}

			if err := m.CustomFields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("custom_fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("custom_fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OperationsCaseFieldChanges) contextValidateTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.Template != nil {

		if swag.IsZero(m.Template) { // not required
			return nil
		}

		if err := m.Template.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperationsCaseFieldChanges) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsCaseFieldChanges) UnmarshalBinary(b []byte) error {
	var res OperationsCaseFieldChanges
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
