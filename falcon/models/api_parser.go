// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIParser api parser
//
// swagger:model api.Parser
type APIParser struct {

	// A description of what the parser does, how it works, notes or similar
	Description string `json:"description,omitempty"`

	// The human-readable name shown in the UI
	// Required: true
	DisplayName *string `json:"display_name"`

	// A list of fields that will be removed from the event before it's parsed. These fields will not be included when calculating usage
	// Required: true
	FieldsToBeRemovedBeforeParsing []string `json:"fields_to_be_removed_before_parsing"`

	// A list of fields that should be used for sharding. See https://library.humio.com/stable/docs/parsers/tagging/
	// Required: true
	FieldsToTag []string `json:"fields_to_tag"`

	// The unique identifier of the parser
	// Required: true
	ID *string `json:"id"`

	// Indicates whether this is a system-provided parser
	// Required: true
	IsBuiltIn *bool `json:"is_built_in"`

	// The name of parser template
	// Required: true
	Name *string `json:"name"`

	// Identifies the package this parser belongs to, if any
	PackageID string `json:"package_id,omitempty"`

	// The parser script that transforms the input into events. Humio Language v1
	// Required: true
	Script *string `json:"script"`

	// A list of tests that the parser can be tested against
	TestCases []*APIParserTestCase `json:"test_cases"`
}

// Validate validates this api parser
func (m *APIParser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFieldsToBeRemovedBeforeParsing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFieldsToTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsBuiltIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScript(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestCases(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIParser) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("display_name", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *APIParser) validateFieldsToBeRemovedBeforeParsing(formats strfmt.Registry) error {

	if err := validate.Required("fields_to_be_removed_before_parsing", "body", m.FieldsToBeRemovedBeforeParsing); err != nil {
		return err
	}

	return nil
}

func (m *APIParser) validateFieldsToTag(formats strfmt.Registry) error {

	if err := validate.Required("fields_to_tag", "body", m.FieldsToTag); err != nil {
		return err
	}

	return nil
}

func (m *APIParser) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *APIParser) validateIsBuiltIn(formats strfmt.Registry) error {

	if err := validate.Required("is_built_in", "body", m.IsBuiltIn); err != nil {
		return err
	}

	return nil
}

func (m *APIParser) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *APIParser) validateScript(formats strfmt.Registry) error {

	if err := validate.Required("script", "body", m.Script); err != nil {
		return err
	}

	return nil
}

func (m *APIParser) validateTestCases(formats strfmt.Registry) error {
	if swag.IsZero(m.TestCases) { // not required
		return nil
	}

	for i := 0; i < len(m.TestCases); i++ {
		if swag.IsZero(m.TestCases[i]) { // not required
			continue
		}

		if m.TestCases[i] != nil {
			if err := m.TestCases[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("test_cases" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("test_cases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this api parser based on the context it is used
func (m *APIParser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTestCases(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIParser) contextValidateTestCases(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TestCases); i++ {

		if m.TestCases[i] != nil {

			if swag.IsZero(m.TestCases[i]) { // not required
				return nil
			}

			if err := m.TestCases[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("test_cases" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("test_cases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIParser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIParser) UnmarshalBinary(b []byte) error {
	var res APIParser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
