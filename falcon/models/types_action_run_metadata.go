// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TypesActionRunMetadata types action run metadata
//
// swagger:model types.ActionRunMetadata
type TypesActionRunMetadata struct {

	// collected objects
	CollectedObjects int32 `json:"collected_objects,omitempty"`

	// end time
	EndTime *TypesTimestamp `json:"end_time,omitempty"`

	// integration task id
	IntegrationTaskID int64 `json:"integration_task_id,omitempty"`

	// integration task name
	IntegrationTaskName string `json:"integration_task_name,omitempty"`

	// integration task type
	IntegrationTaskType *TypesIntegrationTaskType `json:"integration_task_type,omitempty"`

	// start time
	StartTime *TypesTimestamp `json:"start_time,omitempty"`

	// total objects
	TotalObjects int32 `json:"total_objects,omitempty"`
}

// Validate validates this types action run metadata
func (m *TypesActionRunMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegrationTaskType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesActionRunMetadata) validateEndTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if m.EndTime != nil {
		if err := m.EndTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("end_time")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("end_time")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunMetadata) validateIntegrationTaskType(formats strfmt.Registry) error {
	if swag.IsZero(m.IntegrationTaskType) { // not required
		return nil
	}

	if m.IntegrationTaskType != nil {
		if err := m.IntegrationTaskType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("integration_task_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("integration_task_type")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunMetadata) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if m.StartTime != nil {
		if err := m.StartTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("start_time")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("start_time")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this types action run metadata based on the context it is used
func (m *TypesActionRunMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEndTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIntegrationTaskType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesActionRunMetadata) contextValidateEndTime(ctx context.Context, formats strfmt.Registry) error {

	if m.EndTime != nil {

		if swag.IsZero(m.EndTime) { // not required
			return nil
		}

		if err := m.EndTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("end_time")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("end_time")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunMetadata) contextValidateIntegrationTaskType(ctx context.Context, formats strfmt.Registry) error {

	if m.IntegrationTaskType != nil {

		if swag.IsZero(m.IntegrationTaskType) { // not required
			return nil
		}

		if err := m.IntegrationTaskType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("integration_task_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("integration_task_type")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunMetadata) contextValidateStartTime(ctx context.Context, formats strfmt.Registry) error {

	if m.StartTime != nil {

		if swag.IsZero(m.StartTime) { // not required
			return nil
		}

		if err := m.StartTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("start_time")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("start_time")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TypesActionRunMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesActionRunMetadata) UnmarshalBinary(b []byte) error {
	var res TypesActionRunMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
