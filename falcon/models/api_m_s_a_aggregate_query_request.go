// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIMSAAggregateQueryRequest api m s a aggregate query request
//
// swagger:model api.MSAAggregateQueryRequest
type APIMSAAggregateQueryRequest struct {

	// date ranges
	// Required: true
	DateRanges []*MsaDateRangeSpec `json:"date_ranges"`

	// field
	// Required: true
	Field *string `json:"field"`

	// filter
	// Required: true
	Filter *string `json:"filter"`

	// from
	// Required: true
	From *int32 `json:"from"`

	// name
	// Required: true
	Name *string `json:"name"`

	// size
	// Required: true
	Size *int32 `json:"size"`

	// sort
	// Required: true
	Sort *string `json:"sort"`

	// type
	// Required: true
	// Enum: [terms date_range]
	Type *string `json:"type"`
}

// Validate validates this api m s a aggregate query request
func (m *APIMSAAggregateQueryRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateRanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIMSAAggregateQueryRequest) validateDateRanges(formats strfmt.Registry) error {

	if err := validate.Required("date_ranges", "body", m.DateRanges); err != nil {
		return err
	}

	for i := 0; i < len(m.DateRanges); i++ {
		if swag.IsZero(m.DateRanges[i]) { // not required
			continue
		}

		if m.DateRanges[i] != nil {
			if err := m.DateRanges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("date_ranges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("date_ranges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIMSAAggregateQueryRequest) validateField(formats strfmt.Registry) error {

	if err := validate.Required("field", "body", m.Field); err != nil {
		return err
	}

	return nil
}

func (m *APIMSAAggregateQueryRequest) validateFilter(formats strfmt.Registry) error {

	if err := validate.Required("filter", "body", m.Filter); err != nil {
		return err
	}

	return nil
}

func (m *APIMSAAggregateQueryRequest) validateFrom(formats strfmt.Registry) error {

	if err := validate.Required("from", "body", m.From); err != nil {
		return err
	}

	return nil
}

func (m *APIMSAAggregateQueryRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *APIMSAAggregateQueryRequest) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *APIMSAAggregateQueryRequest) validateSort(formats strfmt.Registry) error {

	if err := validate.Required("sort", "body", m.Sort); err != nil {
		return err
	}

	return nil
}

var apiMSAAggregateQueryRequestTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["terms","date_range"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiMSAAggregateQueryRequestTypeTypePropEnum = append(apiMSAAggregateQueryRequestTypeTypePropEnum, v)
	}
}

const (

	// APIMSAAggregateQueryRequestTypeTerms captures enum value "terms"
	APIMSAAggregateQueryRequestTypeTerms string = "terms"

	// APIMSAAggregateQueryRequestTypeDateRange captures enum value "date_range"
	APIMSAAggregateQueryRequestTypeDateRange string = "date_range"
)

// prop value enum
func (m *APIMSAAggregateQueryRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, apiMSAAggregateQueryRequestTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *APIMSAAggregateQueryRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this api m s a aggregate query request based on the context it is used
func (m *APIMSAAggregateQueryRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDateRanges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIMSAAggregateQueryRequest) contextValidateDateRanges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DateRanges); i++ {

		if m.DateRanges[i] != nil {

			if swag.IsZero(m.DateRanges[i]) { // not required
				return nil
			}

			if err := m.DateRanges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("date_ranges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("date_ranges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIMSAAggregateQueryRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIMSAAggregateQueryRequest) UnmarshalBinary(b []byte) error {
	var res APIMSAAggregateQueryRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
