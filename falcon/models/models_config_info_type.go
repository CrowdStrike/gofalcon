// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsConfigInfoType models config info type
//
// swagger:model models.ConfigInfoType
type ModelsConfigInfoType struct {

	// cmd
	// Required: true
	Cmd []string `json:"Cmd"`

	// entrypoint
	// Required: true
	Entrypoint []string `json:"Entrypoint"`

	// env
	// Required: true
	Env []string `json:"Env"`

	// exposed ports
	// Required: true
	ExposedPorts map[string]ModelsConfigInfoTypeExposedPorts `json:"ExposedPorts"`

	// labels
	// Required: true
	Labels map[string]string `json:"Labels"`

	// stop signal
	// Required: true
	StopSignal *string `json:"StopSignal"`

	// user
	// Required: true
	User *string `json:"User"`

	// volumes
	// Required: true
	Volumes map[string]ModelsConfigInfoTypeVolumes `json:"Volumes"`

	// working dir
	// Required: true
	WorkingDir *string `json:"WorkingDir"`
}

// Validate validates this models config info type
func (m *ModelsConfigInfoType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCmd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntrypoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnv(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExposedPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopSignal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkingDir(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsConfigInfoType) validateCmd(formats strfmt.Registry) error {

	if err := validate.Required("Cmd", "body", m.Cmd); err != nil {
		return err
	}

	return nil
}

func (m *ModelsConfigInfoType) validateEntrypoint(formats strfmt.Registry) error {

	if err := validate.Required("Entrypoint", "body", m.Entrypoint); err != nil {
		return err
	}

	return nil
}

func (m *ModelsConfigInfoType) validateEnv(formats strfmt.Registry) error {

	if err := validate.Required("Env", "body", m.Env); err != nil {
		return err
	}

	return nil
}

func (m *ModelsConfigInfoType) validateExposedPorts(formats strfmt.Registry) error {

	if err := validate.Required("ExposedPorts", "body", m.ExposedPorts); err != nil {
		return err
	}

	for k := range m.ExposedPorts {

		if err := validate.Required("ExposedPorts"+"."+k, "body", m.ExposedPorts[k]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ModelsConfigInfoType) validateLabels(formats strfmt.Registry) error {

	if err := validate.Required("Labels", "body", m.Labels); err != nil {
		return err
	}

	return nil
}

func (m *ModelsConfigInfoType) validateStopSignal(formats strfmt.Registry) error {

	if err := validate.Required("StopSignal", "body", m.StopSignal); err != nil {
		return err
	}

	return nil
}

func (m *ModelsConfigInfoType) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("User", "body", m.User); err != nil {
		return err
	}

	return nil
}

func (m *ModelsConfigInfoType) validateVolumes(formats strfmt.Registry) error {

	if err := validate.Required("Volumes", "body", m.Volumes); err != nil {
		return err
	}

	for k := range m.Volumes {

		if err := validate.Required("Volumes"+"."+k, "body", m.Volumes[k]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ModelsConfigInfoType) validateWorkingDir(formats strfmt.Registry) error {

	if err := validate.Required("WorkingDir", "body", m.WorkingDir); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models config info type based on context it is used
func (m *ModelsConfigInfoType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsConfigInfoType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsConfigInfoType) UnmarshalBinary(b []byte) error {
	var res ModelsConfigInfoType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
