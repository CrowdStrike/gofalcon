// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegistrationIOMEvent registration i o m event
//
// swagger:model registration.IOMEvent
type RegistrationIOMEvent struct {

	// account id
	// Required: true
	AccountID *string `json:"account_id"`

	// account name
	// Required: true
	AccountName *string `json:"account_name"`

	// azure tenant id
	// Required: true
	AzureTenantID *string `json:"azure_tenant_id"`

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// cloud provider
	// Required: true
	CloudProvider *string `json:"cloud_provider"`

	// custom policy id
	CustomPolicyID string `json:"custom_policy_id,omitempty"`

	// finding
	// Required: true
	Finding *string `json:"finding"`

	// policy id
	PolicyID string `json:"policy_id,omitempty"`

	// policy statement
	// Required: true
	PolicyStatement *string `json:"policy_statement"`

	// policy type
	PolicyType string `json:"policy_type,omitempty"`

	// region
	// Required: true
	Region *string `json:"region"`

	// report date time
	// Required: true
	ReportDateTime *string `json:"report_date_time"`

	// resource attributes
	// Required: true
	ResourceAttributes *string `json:"resource_attributes"`

	// resource create time
	// Required: true
	ResourceCreateTime *string `json:"resource_create_time"`

	// resource id
	// Required: true
	ResourceID *string `json:"resource_id"`

	// resource id type
	// Required: true
	ResourceIDType *string `json:"resource_id_type"`

	// resource url
	// Required: true
	ResourceURL *string `json:"resource_url"`

	// service
	// Required: true
	Service *string `json:"service"`

	// severity
	// Required: true
	Severity *string `json:"severity"`

	// status
	// Required: true
	Status *string `json:"status"`

	// tags
	// Required: true
	Tags *string `json:"tags"`
}

// Validate validates this registration i o m event
func (m *RegistrationIOMEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyStatement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceIDType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegistrationIOMEvent) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("account_id", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationIOMEvent) validateAccountName(formats strfmt.Registry) error {

	if err := validate.Required("account_name", "body", m.AccountName); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationIOMEvent) validateAzureTenantID(formats strfmt.Registry) error {

	if err := validate.Required("azure_tenant_id", "body", m.AzureTenantID); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationIOMEvent) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationIOMEvent) validateCloudProvider(formats strfmt.Registry) error {

	if err := validate.Required("cloud_provider", "body", m.CloudProvider); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationIOMEvent) validateFinding(formats strfmt.Registry) error {

	if err := validate.Required("finding", "body", m.Finding); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationIOMEvent) validatePolicyStatement(formats strfmt.Registry) error {

	if err := validate.Required("policy_statement", "body", m.PolicyStatement); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationIOMEvent) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationIOMEvent) validateReportDateTime(formats strfmt.Registry) error {

	if err := validate.Required("report_date_time", "body", m.ReportDateTime); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationIOMEvent) validateResourceAttributes(formats strfmt.Registry) error {

	if err := validate.Required("resource_attributes", "body", m.ResourceAttributes); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationIOMEvent) validateResourceCreateTime(formats strfmt.Registry) error {

	if err := validate.Required("resource_create_time", "body", m.ResourceCreateTime); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationIOMEvent) validateResourceID(formats strfmt.Registry) error {

	if err := validate.Required("resource_id", "body", m.ResourceID); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationIOMEvent) validateResourceIDType(formats strfmt.Registry) error {

	if err := validate.Required("resource_id_type", "body", m.ResourceIDType); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationIOMEvent) validateResourceURL(formats strfmt.Registry) error {

	if err := validate.Required("resource_url", "body", m.ResourceURL); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationIOMEvent) validateService(formats strfmt.Registry) error {

	if err := validate.Required("service", "body", m.Service); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationIOMEvent) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationIOMEvent) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationIOMEvent) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this registration i o m event based on context it is used
func (m *RegistrationIOMEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RegistrationIOMEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegistrationIOMEvent) UnmarshalBinary(b []byte) error {
	var res RegistrationIOMEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
