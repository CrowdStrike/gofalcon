// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicyframeworkRuleOverride policyframework rule override
//
// swagger:model policyframework.RuleOverride
type PolicyframeworkRuleOverride struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// deleted at
	// Format: date-time
	DeletedAt strfmt.DateTime `json:"deleted_at,omitempty"`

	// expiration timestamp
	// Format: date-time
	ExpirationTimestamp strfmt.DateTime `json:"expiration_timestamp,omitempty"`

	// override type
	OverrideType string `json:"override_type,omitempty"`

	// severity
	Severity int32 `json:"severity,omitempty"`

	// suppressed
	Suppressed bool `json:"suppressed,omitempty"`

	// suppressed by
	// Required: true
	SuppressedBy *string `json:"suppressed_by"`

	// suppression comment
	SuppressionComment string `json:"suppression_comment,omitempty"`

	// suppression reason
	// Required: true
	SuppressionReason *string `json:"suppression_reason"`

	// update reason
	UpdateReason string `json:"update_reason,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this policyframework rule override
func (m *PolicyframeworkRuleOverride) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuppressedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuppressionReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyframeworkRuleOverride) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PolicyframeworkRuleOverride) validateDeletedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.DeletedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("deleted_at", "body", "date-time", m.DeletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PolicyframeworkRuleOverride) validateExpirationTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("expiration_timestamp", "body", "date-time", m.ExpirationTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PolicyframeworkRuleOverride) validateSuppressedBy(formats strfmt.Registry) error {

	if err := validate.Required("suppressed_by", "body", m.SuppressedBy); err != nil {
		return err
	}

	return nil
}

func (m *PolicyframeworkRuleOverride) validateSuppressionReason(formats strfmt.Registry) error {

	if err := validate.Required("suppression_reason", "body", m.SuppressionReason); err != nil {
		return err
	}

	return nil
}

func (m *PolicyframeworkRuleOverride) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this policyframework rule override based on context it is used
func (m *PolicyframeworkRuleOverride) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PolicyframeworkRuleOverride) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyframeworkRuleOverride) UnmarshalBinary(b []byte) error {
	var res PolicyframeworkRuleOverride
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
