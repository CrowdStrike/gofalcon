// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FalconforitapiTaskParameter falconforitapi task parameter
//
// swagger:model falconforitapi.TaskParameter
type FalconforitapiTaskParameter struct {

	// custom validation message
	// Required: true
	CustomValidationMessage *string `json:"custom_validation_message"`

	// custom validation regex
	// Required: true
	CustomValidationRegex *string `json:"custom_validation_regex"`

	// default value
	// Required: true
	DefaultValue *string `json:"default_value"`

	// input type
	// Required: true
	InputType *string `json:"input_type"`

	// key
	// Required: true
	Key *string `json:"key"`

	// label
	// Required: true
	Label *string `json:"label"`

	// options
	// Required: true
	Options []*FalconforitapiParameterOption `json:"options"`

	// validation type
	// Required: true
	ValidationType *string `json:"validation_type"`
}

// Validate validates this falconforitapi task parameter
func (m *FalconforitapiTaskParameter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomValidationMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomValidationRegex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiTaskParameter) validateCustomValidationMessage(formats strfmt.Registry) error {

	if err := validate.Required("custom_validation_message", "body", m.CustomValidationMessage); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiTaskParameter) validateCustomValidationRegex(formats strfmt.Registry) error {

	if err := validate.Required("custom_validation_regex", "body", m.CustomValidationRegex); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiTaskParameter) validateDefaultValue(formats strfmt.Registry) error {

	if err := validate.Required("default_value", "body", m.DefaultValue); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiTaskParameter) validateInputType(formats strfmt.Registry) error {

	if err := validate.Required("input_type", "body", m.InputType); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiTaskParameter) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiTaskParameter) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiTaskParameter) validateOptions(formats strfmt.Registry) error {

	if err := validate.Required("options", "body", m.Options); err != nil {
		return err
	}

	for i := 0; i < len(m.Options); i++ {
		if swag.IsZero(m.Options[i]) { // not required
			continue
		}

		if m.Options[i] != nil {
			if err := m.Options[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconforitapiTaskParameter) validateValidationType(formats strfmt.Registry) error {

	if err := validate.Required("validation_type", "body", m.ValidationType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this falconforitapi task parameter based on the context it is used
func (m *FalconforitapiTaskParameter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiTaskParameter) contextValidateOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Options); i++ {

		if m.Options[i] != nil {

			if swag.IsZero(m.Options[i]) { // not required
				return nil
			}

			if err := m.Options[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FalconforitapiTaskParameter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FalconforitapiTaskParameter) UnmarshalBinary(b []byte) error {
	var res FalconforitapiTaskParameter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
