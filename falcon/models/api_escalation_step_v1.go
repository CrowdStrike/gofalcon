// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIEscalationStepV1 api escalation step v1
//
// swagger:model api.EscalationStepV1
type APIEscalationStepV1 struct {

	// escalate after seconds
	// Required: true
	EscalateAfterSeconds *int32 `json:"escalate_after_seconds"`

	// notification group id
	// Required: true
	NotificationGroupID *string `json:"notification_group_id"`
}

// Validate validates this api escalation step v1
func (m *APIEscalationStepV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEscalateAfterSeconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationGroupID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIEscalationStepV1) validateEscalateAfterSeconds(formats strfmt.Registry) error {

	if err := validate.Required("escalate_after_seconds", "body", m.EscalateAfterSeconds); err != nil {
		return err
	}

	return nil
}

func (m *APIEscalationStepV1) validateNotificationGroupID(formats strfmt.Registry) error {

	if err := validate.Required("notification_group_id", "body", m.NotificationGroupID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this api escalation step v1 based on context it is used
func (m *APIEscalationStepV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *APIEscalationStepV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIEscalationStepV1) UnmarshalBinary(b []byte) error {
	var res APIEscalationStepV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
