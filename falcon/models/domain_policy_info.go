// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainPolicyInfo domain policy info
//
// swagger:model domain.PolicyInfo
type DomainPolicyInfo struct {

	// created at
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"CreatedAt"`

	// deleted at
	// Required: true
	// Format: date-time
	DeletedAt *strfmt.DateTime `json:"DeletedAt"`

	// ID
	// Required: true
	ID *int64 `json:"ID"`

	// updated at
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"UpdatedAt"`

	// alert logic
	AlertLogic string `json:"alert_logic,omitempty"`

	// api command
	APICommand string `json:"api_command,omitempty"`

	// cli command
	CliCommand string `json:"cli_command,omitempty"`

	// cloud document
	CloudDocument string `json:"cloud_document,omitempty"`

	// cloud platform
	CloudPlatform int32 `json:"cloud_platform,omitempty"`

	// cloud platform type
	CloudPlatformType string `json:"cloud_platform_type,omitempty"`

	// cloud service
	CloudService int32 `json:"cloud_service,omitempty"`

	// cloud service friendly
	CloudServiceFriendly string `json:"cloud_service_friendly,omitempty"`

	// cloud service subtype
	CloudServiceSubtype string `json:"cloud_service_subtype,omitempty"`

	// cloud service type
	CloudServiceType string `json:"cloud_service_type,omitempty"`

	// default severity
	DefaultSeverity string `json:"default_severity,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// event type
	EventType string `json:"event_type,omitempty"`

	// mitre attack cloud matrix
	MitreAttackCloudMatrix string `json:"mitre_attack_cloud_matrix,omitempty"`

	// mitre attack cloud subtype
	MitreAttackCloudSubtype string `json:"mitre_attack_cloud_subtype,omitempty"`

	// policy fail query
	PolicyFailQuery string `json:"policy_fail_query,omitempty"`

	// policy pass query
	PolicyPassQuery string `json:"policy_pass_query,omitempty"`

	// policy remediation
	PolicyRemediation string `json:"policy_remediation,omitempty"`

	// policy severity
	PolicySeverity int32 `json:"policy_severity,omitempty"`

	// policy statement
	PolicyStatement string `json:"policy_statement,omitempty"`
}

// Validate validates this domain policy info
func (m *DomainPolicyInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainPolicyInfo) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("CreatedAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("CreatedAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainPolicyInfo) validateDeletedAt(formats strfmt.Registry) error {

	if err := validate.Required("DeletedAt", "body", m.DeletedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("DeletedAt", "body", "date-time", m.DeletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainPolicyInfo) validateID(formats strfmt.Registry) error {

	if err := validate.Required("ID", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DomainPolicyInfo) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("UpdatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("UpdatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain policy info based on context it is used
func (m *DomainPolicyInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainPolicyInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainPolicyInfo) UnmarshalBinary(b []byte) error {
	var res DomainPolicyInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
