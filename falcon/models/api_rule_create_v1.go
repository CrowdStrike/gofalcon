// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIRuleCreateV1 api rule create v1
//
// swagger:model api.RuleCreateV1
type APIRuleCreateV1 struct {

	// comment
	// Required: true
	Comment *string `json:"comment"`

	// description
	// Required: true
	Description *string `json:"description"`

	// disposition id
	// Required: true
	DispositionID *int32 `json:"disposition_id"`

	// field values
	// Required: true
	FieldValues []*DomainFieldValue `json:"field_values"`

	// name
	// Required: true
	Name *string `json:"name"`

	// pattern severity
	// Required: true
	PatternSeverity *string `json:"pattern_severity"`

	// rulegroup id
	// Required: true
	RulegroupID *string `json:"rulegroup_id"`

	// ruletype id
	// Required: true
	RuletypeID *string `json:"ruletype_id"`
}

// Validate validates this api rule create v1
func (m *APIRuleCreateV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDispositionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFieldValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePatternSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRulegroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuletypeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIRuleCreateV1) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("comment", "body", m.Comment); err != nil {
		return err
	}

	return nil
}

func (m *APIRuleCreateV1) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *APIRuleCreateV1) validateDispositionID(formats strfmt.Registry) error {

	if err := validate.Required("disposition_id", "body", m.DispositionID); err != nil {
		return err
	}

	return nil
}

func (m *APIRuleCreateV1) validateFieldValues(formats strfmt.Registry) error {

	if err := validate.Required("field_values", "body", m.FieldValues); err != nil {
		return err
	}

	for i := 0; i < len(m.FieldValues); i++ {
		if swag.IsZero(m.FieldValues[i]) { // not required
			continue
		}

		if m.FieldValues[i] != nil {
			if err := m.FieldValues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("field_values" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("field_values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIRuleCreateV1) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *APIRuleCreateV1) validatePatternSeverity(formats strfmt.Registry) error {

	if err := validate.Required("pattern_severity", "body", m.PatternSeverity); err != nil {
		return err
	}

	return nil
}

func (m *APIRuleCreateV1) validateRulegroupID(formats strfmt.Registry) error {

	if err := validate.Required("rulegroup_id", "body", m.RulegroupID); err != nil {
		return err
	}

	return nil
}

func (m *APIRuleCreateV1) validateRuletypeID(formats strfmt.Registry) error {

	if err := validate.Required("ruletype_id", "body", m.RuletypeID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this api rule create v1 based on the context it is used
func (m *APIRuleCreateV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFieldValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIRuleCreateV1) contextValidateFieldValues(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FieldValues); i++ {

		if m.FieldValues[i] != nil {

			if swag.IsZero(m.FieldValues[i]) { // not required
				return nil
			}

			if err := m.FieldValues[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("field_values" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("field_values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIRuleCreateV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIRuleCreateV1) UnmarshalBinary(b []byte) error {
	var res APIRuleCreateV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
