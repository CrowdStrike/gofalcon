// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DigestFlow digest flow
//
// swagger:model .digestFlow
type DigestFlow struct {

	// Latest known ingest time for digested data
	// Required: true
	IngestTimeKnownGood *int64 `json:"ingestTimeKnownGood"`

	// Maximum ingest latency for the returned data
	// Required: true
	MaxIngestLatency *int64 `json:"maxIngestLatency"`

	// Miniming ingest time for data included in the results
	// Required: true
	MinIngestTimeIncluded *int64 `json:"minIngestTimeIncluded"`
}

// Validate validates this digest flow
func (m *DigestFlow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIngestTimeKnownGood(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxIngestLatency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinIngestTimeIncluded(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DigestFlow) validateIngestTimeKnownGood(formats strfmt.Registry) error {

	if err := validate.Required("ingestTimeKnownGood", "body", m.IngestTimeKnownGood); err != nil {
		return err
	}

	return nil
}

func (m *DigestFlow) validateMaxIngestLatency(formats strfmt.Registry) error {

	if err := validate.Required("maxIngestLatency", "body", m.MaxIngestLatency); err != nil {
		return err
	}

	return nil
}

func (m *DigestFlow) validateMinIngestTimeIncluded(formats strfmt.Registry) error {

	if err := validate.Required("minIngestTimeIncluded", "body", m.MinIngestTimeIncluded); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this digest flow based on context it is used
func (m *DigestFlow) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DigestFlow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DigestFlow) UnmarshalBinary(b []byte) error {
	var res DigestFlow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
