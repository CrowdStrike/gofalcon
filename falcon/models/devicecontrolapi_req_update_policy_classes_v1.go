// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DevicecontrolapiReqUpdatePolicyClassesV1 devicecontrolapi req update policy classes v1
//
// swagger:model devicecontrolapi.ReqUpdatePolicyClassesV1
type DevicecontrolapiReqUpdatePolicyClassesV1 struct {

	// bluetooth classes
	BluetoothClasses *DevicecontrolapiReqUpdateBluetoothClassesV1 `json:"bluetooth_classes,omitempty"`

	// ID of the policy to update
	// Required: true
	ID *string `json:"id"`

	// usb classes
	UsbClasses *DevicecontrolapiReqUpdateUSBClassesV1 `json:"usb_classes,omitempty"`
}

// Validate validates this devicecontrolapi req update policy classes v1
func (m *DevicecontrolapiReqUpdatePolicyClassesV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBluetoothClasses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsbClasses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontrolapiReqUpdatePolicyClassesV1) validateBluetoothClasses(formats strfmt.Registry) error {
	if swag.IsZero(m.BluetoothClasses) { // not required
		return nil
	}

	if m.BluetoothClasses != nil {
		if err := m.BluetoothClasses.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bluetooth_classes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bluetooth_classes")
			}
			return err
		}
	}

	return nil
}

func (m *DevicecontrolapiReqUpdatePolicyClassesV1) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiReqUpdatePolicyClassesV1) validateUsbClasses(formats strfmt.Registry) error {
	if swag.IsZero(m.UsbClasses) { // not required
		return nil
	}

	if m.UsbClasses != nil {
		if err := m.UsbClasses.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usb_classes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usb_classes")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this devicecontrolapi req update policy classes v1 based on the context it is used
func (m *DevicecontrolapiReqUpdatePolicyClassesV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBluetoothClasses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsbClasses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontrolapiReqUpdatePolicyClassesV1) contextValidateBluetoothClasses(ctx context.Context, formats strfmt.Registry) error {

	if m.BluetoothClasses != nil {

		if swag.IsZero(m.BluetoothClasses) { // not required
			return nil
		}

		if err := m.BluetoothClasses.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bluetooth_classes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bluetooth_classes")
			}
			return err
		}
	}

	return nil
}

func (m *DevicecontrolapiReqUpdatePolicyClassesV1) contextValidateUsbClasses(ctx context.Context, formats strfmt.Registry) error {

	if m.UsbClasses != nil {

		if swag.IsZero(m.UsbClasses) { // not required
			return nil
		}

		if err := m.UsbClasses.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usb_classes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usb_classes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DevicecontrolapiReqUpdatePolicyClassesV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevicecontrolapiReqUpdatePolicyClassesV1) UnmarshalBinary(b []byte) error {
	var res DevicecontrolapiReqUpdatePolicyClassesV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
