// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsAPIUnidentifiedContainer models API unidentified container
//
// swagger:model models.APIUnidentifiedContainer
type ModelsAPIUnidentifiedContainer struct {

	// assessed images
	// Required: true
	AssessedImages []*ModelsImageInformation `json:"assessed_images"`

	// assessed images count
	// Required: true
	AssessedImagesCount *string `json:"assessed_images_count"`

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// cluster name
	// Required: true
	ClusterName *string `json:"cluster_name"`

	// containers impacted
	// Required: true
	ContainersImpacted []*ModelsContainerInformation `json:"containers_impacted"`

	// containers impacted count
	// Required: true
	ContainersImpactedCount *string `json:"containers_impacted_count"`

	// detect timestamp
	// Required: true
	DetectTimestamp *string `json:"detect_timestamp"`

	// detections count
	// Required: true
	DetectionsCount *string `json:"detections_count"`

	// first seen
	// Required: true
	FirstSeen *string `json:"first_seen"`

	// host id
	// Required: true
	HostID *string `json:"host_id"`

	// image assessment detections count
	// Required: true
	ImageAssessmentDetectionsCount *string `json:"image_assessment_detections_count"`

	// last seen
	// Required: true
	LastSeen *string `json:"last_seen"`

	// namespace
	// Required: true
	Namespace *string `json:"namespace"`

	// node name
	// Required: true
	NodeName *string `json:"node_name"`

	// pod id
	// Required: true
	PodID *string `json:"pod_id"`

	// pod name
	// Required: true
	PodName *string `json:"pod_name"`

	// runtime detections count
	// Required: true
	RuntimeDetectionsCount *string `json:"runtime_detections_count"`

	// severity
	// Required: true
	Severity *string `json:"severity"`

	// unassessed images
	// Required: true
	UnassessedImages []*ModelsImageInformation `json:"unassessed_images"`

	// unassessed images count
	// Required: true
	UnassessedImagesCount *string `json:"unassessed_images_count"`

	// visible to k8s
	// Required: true
	VisibleToK8s *string `json:"visible_to_k8s"`
}

// Validate validates this models API unidentified container
func (m *ModelsAPIUnidentifiedContainer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssessedImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssessedImagesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainersImpacted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainersImpactedCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectionsCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstSeen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageAssessmentDetectionsCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSeen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntimeDetectionsCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnassessedImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnassessedImagesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibleToK8s(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIUnidentifiedContainer) validateAssessedImages(formats strfmt.Registry) error {

	if err := validate.Required("assessed_images", "body", m.AssessedImages); err != nil {
		return err
	}

	for i := 0; i < len(m.AssessedImages); i++ {
		if swag.IsZero(m.AssessedImages[i]) { // not required
			continue
		}

		if m.AssessedImages[i] != nil {
			if err := m.AssessedImages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assessed_images" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assessed_images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsAPIUnidentifiedContainer) validateAssessedImagesCount(formats strfmt.Registry) error {

	if err := validate.Required("assessed_images_count", "body", m.AssessedImagesCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIUnidentifiedContainer) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIUnidentifiedContainer) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("cluster_name", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIUnidentifiedContainer) validateContainersImpacted(formats strfmt.Registry) error {

	if err := validate.Required("containers_impacted", "body", m.ContainersImpacted); err != nil {
		return err
	}

	for i := 0; i < len(m.ContainersImpacted); i++ {
		if swag.IsZero(m.ContainersImpacted[i]) { // not required
			continue
		}

		if m.ContainersImpacted[i] != nil {
			if err := m.ContainersImpacted[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("containers_impacted" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("containers_impacted" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsAPIUnidentifiedContainer) validateContainersImpactedCount(formats strfmt.Registry) error {

	if err := validate.Required("containers_impacted_count", "body", m.ContainersImpactedCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIUnidentifiedContainer) validateDetectTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("detect_timestamp", "body", m.DetectTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIUnidentifiedContainer) validateDetectionsCount(formats strfmt.Registry) error {

	if err := validate.Required("detections_count", "body", m.DetectionsCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIUnidentifiedContainer) validateFirstSeen(formats strfmt.Registry) error {

	if err := validate.Required("first_seen", "body", m.FirstSeen); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIUnidentifiedContainer) validateHostID(formats strfmt.Registry) error {

	if err := validate.Required("host_id", "body", m.HostID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIUnidentifiedContainer) validateImageAssessmentDetectionsCount(formats strfmt.Registry) error {

	if err := validate.Required("image_assessment_detections_count", "body", m.ImageAssessmentDetectionsCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIUnidentifiedContainer) validateLastSeen(formats strfmt.Registry) error {

	if err := validate.Required("last_seen", "body", m.LastSeen); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIUnidentifiedContainer) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIUnidentifiedContainer) validateNodeName(formats strfmt.Registry) error {

	if err := validate.Required("node_name", "body", m.NodeName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIUnidentifiedContainer) validatePodID(formats strfmt.Registry) error {

	if err := validate.Required("pod_id", "body", m.PodID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIUnidentifiedContainer) validatePodName(formats strfmt.Registry) error {

	if err := validate.Required("pod_name", "body", m.PodName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIUnidentifiedContainer) validateRuntimeDetectionsCount(formats strfmt.Registry) error {

	if err := validate.Required("runtime_detections_count", "body", m.RuntimeDetectionsCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIUnidentifiedContainer) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIUnidentifiedContainer) validateUnassessedImages(formats strfmt.Registry) error {

	if err := validate.Required("unassessed_images", "body", m.UnassessedImages); err != nil {
		return err
	}

	for i := 0; i < len(m.UnassessedImages); i++ {
		if swag.IsZero(m.UnassessedImages[i]) { // not required
			continue
		}

		if m.UnassessedImages[i] != nil {
			if err := m.UnassessedImages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unassessed_images" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("unassessed_images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsAPIUnidentifiedContainer) validateUnassessedImagesCount(formats strfmt.Registry) error {

	if err := validate.Required("unassessed_images_count", "body", m.UnassessedImagesCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIUnidentifiedContainer) validateVisibleToK8s(formats strfmt.Registry) error {

	if err := validate.Required("visible_to_k8s", "body", m.VisibleToK8s); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this models API unidentified container based on the context it is used
func (m *ModelsAPIUnidentifiedContainer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssessedImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContainersImpacted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnassessedImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIUnidentifiedContainer) contextValidateAssessedImages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AssessedImages); i++ {

		if m.AssessedImages[i] != nil {

			if swag.IsZero(m.AssessedImages[i]) { // not required
				return nil
			}

			if err := m.AssessedImages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assessed_images" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assessed_images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsAPIUnidentifiedContainer) contextValidateContainersImpacted(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ContainersImpacted); i++ {

		if m.ContainersImpacted[i] != nil {

			if swag.IsZero(m.ContainersImpacted[i]) { // not required
				return nil
			}

			if err := m.ContainersImpacted[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("containers_impacted" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("containers_impacted" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsAPIUnidentifiedContainer) contextValidateUnassessedImages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UnassessedImages); i++ {

		if m.UnassessedImages[i] != nil {

			if swag.IsZero(m.UnassessedImages[i]) { // not required
				return nil
			}

			if err := m.UnassessedImages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unassessed_images" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("unassessed_images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsAPIUnidentifiedContainer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsAPIUnidentifiedContainer) UnmarshalBinary(b []byte) error {
	var res ModelsAPIUnidentifiedContainer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
