// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicymanagerEUJOption policymanager e u j option
//
// swagger:model policymanager.EUJOption
type PolicymanagerEUJOption struct {

	// default
	// Required: true
	Default *bool `json:"default"`

	// id
	// Required: true
	ID *string `json:"id"`

	// justification
	// Required: true
	Justification *string `json:"justification"`

	// selected
	// Required: true
	Selected *bool `json:"selected"`
}

// Validate validates this policymanager e u j option
func (m *PolicymanagerEUJOption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefault(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJustification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelected(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicymanagerEUJOption) validateDefault(formats strfmt.Registry) error {

	if err := validate.Required("default", "body", m.Default); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerEUJOption) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerEUJOption) validateJustification(formats strfmt.Registry) error {

	if err := validate.Required("justification", "body", m.Justification); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerEUJOption) validateSelected(formats strfmt.Registry) error {

	if err := validate.Required("selected", "body", m.Selected); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this policymanager e u j option based on context it is used
func (m *PolicymanagerEUJOption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PolicymanagerEUJOption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicymanagerEUJOption) UnmarshalBinary(b []byte) error {
	var res PolicymanagerEUJOption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
