// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CompliancePosture compliance posture
//
// swagger:model compliance.Posture
type CompliancePosture struct {

	// failing
	Failing int32 `json:"failing,omitempty"`

	// passing
	Passing int32 `json:"passing,omitempty"`

	// score
	// Required: true
	Score *int32 `json:"score"`
}

// Validate validates this compliance posture
func (m *CompliancePosture) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompliancePosture) validateScore(formats strfmt.Registry) error {

	if err := validate.Required("score", "body", m.Score); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this compliance posture based on context it is used
func (m *CompliancePosture) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CompliancePosture) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CompliancePosture) UnmarshalBinary(b []byte) error {
	var res CompliancePosture
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
