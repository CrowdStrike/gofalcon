// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsPackageNameVersionType models package name version type
//
// swagger:model models.PackageNameVersionType
type ModelsPackageNameVersionType struct {

	// package fixed version
	// Required: true
	PackageFixedVersion *string `json:"package_fixed_version"`

	// package name version
	// Required: true
	PackageNameVersion *string `json:"package_name_version"`

	// package os version
	// Required: true
	PackageOsVersion *string `json:"package_os_version"`

	// package remediation
	// Required: true
	PackageRemediation *string `json:"package_remediation"`

	// package type
	// Required: true
	PackageType *string `json:"package_type"`
}

// Validate validates this models package name version type
func (m *ModelsPackageNameVersionType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackageFixedVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageNameVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageOsVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageRemediation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsPackageNameVersionType) validatePackageFixedVersion(formats strfmt.Registry) error {

	if err := validate.Required("package_fixed_version", "body", m.PackageFixedVersion); err != nil {
		return err
	}

	return nil
}

func (m *ModelsPackageNameVersionType) validatePackageNameVersion(formats strfmt.Registry) error {

	if err := validate.Required("package_name_version", "body", m.PackageNameVersion); err != nil {
		return err
	}

	return nil
}

func (m *ModelsPackageNameVersionType) validatePackageOsVersion(formats strfmt.Registry) error {

	if err := validate.Required("package_os_version", "body", m.PackageOsVersion); err != nil {
		return err
	}

	return nil
}

func (m *ModelsPackageNameVersionType) validatePackageRemediation(formats strfmt.Registry) error {

	if err := validate.Required("package_remediation", "body", m.PackageRemediation); err != nil {
		return err
	}

	return nil
}

func (m *ModelsPackageNameVersionType) validatePackageType(formats strfmt.Registry) error {

	if err := validate.Required("package_type", "body", m.PackageType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models package name version type based on context it is used
func (m *ModelsPackageNameVersionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsPackageNameVersionType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsPackageNameVersionType) UnmarshalBinary(b []byte) error {
	var res ModelsPackageNameVersionType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
