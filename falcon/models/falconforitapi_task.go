// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FalconforitapiTask falconforitapi task
//
// swagger:model falconforitapi.Task
type FalconforitapiTask struct {

	// access type of the task, allowed values - Public,Shared,Private
	// Required: true
	AccessType *string `json:"access_type"`

	// assigned user ids to the task, when access_type is Shared
	AssignedUserIds []string `json:"assigned_user_ids"`

	// created by
	// Required: true
	CreatedBy *string `json:"created_by"`

	// created time
	// Required: true
	// Format: date-time
	CreatedTime *strfmt.DateTime `json:"created_time"`

	// description
	// Required: true
	Description *string `json:"description"`

	// group ids
	GroupIds []string `json:"group_ids"`

	// group names
	GroupNames []string `json:"group_names"`

	// groups
	// Required: true
	Groups []*FalconforitapiGroupMembership `json:"groups"`

	// has active schedule
	HasActiveSchedule bool `json:"has_active_schedule,omitempty"`

	// has task parameters
	// Required: true
	HasTaskParameters *bool `json:"has_task_parameters"`

	// id
	// Required: true
	ID *string `json:"id"`

	// is preset
	// Required: true
	IsPreset *bool `json:"is_preset"`

	// is private
	// Required: true
	IsPrivate *bool `json:"is_private"`

	// last run time
	// Required: true
	// Format: date-time
	LastRunTime *strfmt.DateTime `json:"last_run_time"`

	// modified by
	// Required: true
	ModifiedBy *string `json:"modified_by"`

	// modified time
	// Required: true
	// Format: date-time
	ModifiedTime *strfmt.DateTime `json:"modified_time"`

	// name
	// Required: true
	Name *string `json:"name"`

	// os query
	OsQuery string `json:"os_query,omitempty"`

	// output parser config
	OutputParserConfig *FalconforitapiOutputParserConfig `json:"output_parser_config,omitempty"`

	// parameters
	Parameters []*FalconforitapiTaskParameter `json:"parameters"`

	// queries
	Queries *FalconforitapiScripts `json:"queries,omitempty"`

	// task ids in which this task is referenced
	ReferencedTaskIds []string `json:"referenced_task_ids"`

	// remediation trigger condition
	RemediationTriggerCondition []*FalconforitapiConditionGroup `json:"remediation_trigger_condition"`

	// remediations
	Remediations *FalconforitapiScripts `json:"remediations,omitempty"`

	// runs
	// Required: true
	Runs *int32 `json:"runs"`

	// supported os
	// Required: true
	SupportedOs []string `json:"supported_os"`

	// target
	// Required: true
	Target *string `json:"target"`

	// type
	// Required: true
	Type *string `json:"type"`

	// verification condition
	VerificationCondition []*FalconforitapiConditionGroup `json:"verification_condition"`
}

// Validate validates this falconforitapi task
func (m *FalconforitapiTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasTaskParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsPreset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsPrivate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastRunTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputParserConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediationTriggerCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerificationCondition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiTask) validateAccessType(formats strfmt.Registry) error {

	if err := validate.Required("access_type", "body", m.AccessType); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiTask) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("created_by", "body", m.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiTask) validateCreatedTime(formats strfmt.Registry) error {

	if err := validate.Required("created_time", "body", m.CreatedTime); err != nil {
		return err
	}

	if err := validate.FormatOf("created_time", "body", "date-time", m.CreatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiTask) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiTask) validateGroups(formats strfmt.Registry) error {

	if err := validate.Required("groups", "body", m.Groups); err != nil {
		return err
	}

	for i := 0; i < len(m.Groups); i++ {
		if swag.IsZero(m.Groups[i]) { // not required
			continue
		}

		if m.Groups[i] != nil {
			if err := m.Groups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconforitapiTask) validateHasTaskParameters(formats strfmt.Registry) error {

	if err := validate.Required("has_task_parameters", "body", m.HasTaskParameters); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiTask) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiTask) validateIsPreset(formats strfmt.Registry) error {

	if err := validate.Required("is_preset", "body", m.IsPreset); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiTask) validateIsPrivate(formats strfmt.Registry) error {

	if err := validate.Required("is_private", "body", m.IsPrivate); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiTask) validateLastRunTime(formats strfmt.Registry) error {

	if err := validate.Required("last_run_time", "body", m.LastRunTime); err != nil {
		return err
	}

	if err := validate.FormatOf("last_run_time", "body", "date-time", m.LastRunTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiTask) validateModifiedBy(formats strfmt.Registry) error {

	if err := validate.Required("modified_by", "body", m.ModifiedBy); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiTask) validateModifiedTime(formats strfmt.Registry) error {

	if err := validate.Required("modified_time", "body", m.ModifiedTime); err != nil {
		return err
	}

	if err := validate.FormatOf("modified_time", "body", "date-time", m.ModifiedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiTask) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiTask) validateOutputParserConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.OutputParserConfig) { // not required
		return nil
	}

	if m.OutputParserConfig != nil {
		if err := m.OutputParserConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output_parser_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output_parser_config")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiTask) validateParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconforitapiTask) validateQueries(formats strfmt.Registry) error {
	if swag.IsZero(m.Queries) { // not required
		return nil
	}

	if m.Queries != nil {
		if err := m.Queries.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queries")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queries")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiTask) validateRemediationTriggerCondition(formats strfmt.Registry) error {
	if swag.IsZero(m.RemediationTriggerCondition) { // not required
		return nil
	}

	for i := 0; i < len(m.RemediationTriggerCondition); i++ {
		if swag.IsZero(m.RemediationTriggerCondition[i]) { // not required
			continue
		}

		if m.RemediationTriggerCondition[i] != nil {
			if err := m.RemediationTriggerCondition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remediation_trigger_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remediation_trigger_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconforitapiTask) validateRemediations(formats strfmt.Registry) error {
	if swag.IsZero(m.Remediations) { // not required
		return nil
	}

	if m.Remediations != nil {
		if err := m.Remediations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remediations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remediations")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiTask) validateRuns(formats strfmt.Registry) error {

	if err := validate.Required("runs", "body", m.Runs); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiTask) validateSupportedOs(formats strfmt.Registry) error {

	if err := validate.Required("supported_os", "body", m.SupportedOs); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiTask) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiTask) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiTask) validateVerificationCondition(formats strfmt.Registry) error {
	if swag.IsZero(m.VerificationCondition) { // not required
		return nil
	}

	for i := 0; i < len(m.VerificationCondition); i++ {
		if swag.IsZero(m.VerificationCondition[i]) { // not required
			continue
		}

		if m.VerificationCondition[i] != nil {
			if err := m.VerificationCondition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this falconforitapi task based on the context it is used
func (m *FalconforitapiTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutputParserConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemediationTriggerCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemediations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVerificationCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiTask) contextValidateGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Groups); i++ {

		if m.Groups[i] != nil {

			if swag.IsZero(m.Groups[i]) { // not required
				return nil
			}

			if err := m.Groups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconforitapiTask) contextValidateOutputParserConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.OutputParserConfig != nil {

		if swag.IsZero(m.OutputParserConfig) { // not required
			return nil
		}

		if err := m.OutputParserConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output_parser_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output_parser_config")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiTask) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Parameters); i++ {

		if m.Parameters[i] != nil {

			if swag.IsZero(m.Parameters[i]) { // not required
				return nil
			}

			if err := m.Parameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconforitapiTask) contextValidateQueries(ctx context.Context, formats strfmt.Registry) error {

	if m.Queries != nil {

		if swag.IsZero(m.Queries) { // not required
			return nil
		}

		if err := m.Queries.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queries")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queries")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiTask) contextValidateRemediationTriggerCondition(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RemediationTriggerCondition); i++ {

		if m.RemediationTriggerCondition[i] != nil {

			if swag.IsZero(m.RemediationTriggerCondition[i]) { // not required
				return nil
			}

			if err := m.RemediationTriggerCondition[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remediation_trigger_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remediation_trigger_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconforitapiTask) contextValidateRemediations(ctx context.Context, formats strfmt.Registry) error {

	if m.Remediations != nil {

		if swag.IsZero(m.Remediations) { // not required
			return nil
		}

		if err := m.Remediations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remediations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remediations")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiTask) contextValidateVerificationCondition(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VerificationCondition); i++ {

		if m.VerificationCondition[i] != nil {

			if swag.IsZero(m.VerificationCondition[i]) { // not required
				return nil
			}

			if err := m.VerificationCondition[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FalconforitapiTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FalconforitapiTask) UnmarshalBinary(b []byte) error {
	var res FalconforitapiTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
