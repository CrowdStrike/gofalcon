// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicymanagerExternalClassificationPatch policymanager external classification patch
//
// swagger:model policymanager.ExternalClassificationPatch
type PolicymanagerExternalClassificationPatch struct {

	// classification properties
	ClassificationProperties *PolicymanagerExternalClassificationProperties `json:"classification_properties,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this policymanager external classification patch
func (m *PolicymanagerExternalClassificationPatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClassificationProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicymanagerExternalClassificationPatch) validateClassificationProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.ClassificationProperties) { // not required
		return nil
	}

	if m.ClassificationProperties != nil {
		if err := m.ClassificationProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classification_properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("classification_properties")
			}
			return err
		}
	}

	return nil
}

func (m *PolicymanagerExternalClassificationPatch) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalClassificationPatch) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this policymanager external classification patch based on the context it is used
func (m *PolicymanagerExternalClassificationPatch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClassificationProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicymanagerExternalClassificationPatch) contextValidateClassificationProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.ClassificationProperties != nil {

		if swag.IsZero(m.ClassificationProperties) { // not required
			return nil
		}

		if err := m.ClassificationProperties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classification_properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("classification_properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicymanagerExternalClassificationPatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicymanagerExternalClassificationPatch) UnmarshalBinary(b []byte) error {
	var res PolicymanagerExternalClassificationPatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
