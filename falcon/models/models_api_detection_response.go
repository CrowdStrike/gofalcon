// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsAPIDetectionResponse models API detection response
//
// swagger:model models.APIDetectionResponse
type ModelsAPIDetectionResponse struct {

	// detection uuid
	// Required: true
	DetectionUUID *string `json:"detection_uuid"`

	// file name
	// Required: true
	FileName *string `json:"file_name"`

	// last detected
	// Required: true
	// Format: date-time
	LastDetected *strfmt.DateTime `json:"last_detected"`

	// misconfigured line
	// Required: true
	MisconfiguredLine *int32 `json:"misconfigured_line"`

	// project name
	// Required: true
	ProjectName *string `json:"project_name"`

	// project owners
	// Required: true
	ProjectOwners []string `json:"project_owners"`

	// project ref
	// Required: true
	ProjectRef *string `json:"project_ref"`

	// remediation
	// Required: true
	Remediation *Remediation `json:"remediation"`

	// resource name
	// Required: true
	ResourceName *string `json:"resource_name"`

	// resource type
	// Required: true
	ResourceType *string `json:"resource_type"`

	// rule
	// Required: true
	Rule *Rule `json:"rule"`
}

// Validate validates this models API detection response
func (m *ModelsAPIDetectionResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetectionUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastDetected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMisconfiguredLine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectOwners(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIDetectionResponse) validateDetectionUUID(formats strfmt.Registry) error {

	if err := validate.Required("detection_uuid", "body", m.DetectionUUID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDetectionResponse) validateFileName(formats strfmt.Registry) error {

	if err := validate.Required("file_name", "body", m.FileName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDetectionResponse) validateLastDetected(formats strfmt.Registry) error {

	if err := validate.Required("last_detected", "body", m.LastDetected); err != nil {
		return err
	}

	if err := validate.FormatOf("last_detected", "body", "date-time", m.LastDetected.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDetectionResponse) validateMisconfiguredLine(formats strfmt.Registry) error {

	if err := validate.Required("misconfigured_line", "body", m.MisconfiguredLine); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDetectionResponse) validateProjectName(formats strfmt.Registry) error {

	if err := validate.Required("project_name", "body", m.ProjectName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDetectionResponse) validateProjectOwners(formats strfmt.Registry) error {

	if err := validate.Required("project_owners", "body", m.ProjectOwners); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDetectionResponse) validateProjectRef(formats strfmt.Registry) error {

	if err := validate.Required("project_ref", "body", m.ProjectRef); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDetectionResponse) validateRemediation(formats strfmt.Registry) error {

	if err := validate.Required("remediation", "body", m.Remediation); err != nil {
		return err
	}

	if m.Remediation != nil {
		if err := m.Remediation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remediation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remediation")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsAPIDetectionResponse) validateResourceName(formats strfmt.Registry) error {

	if err := validate.Required("resource_name", "body", m.ResourceName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDetectionResponse) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("resource_type", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDetectionResponse) validateRule(formats strfmt.Registry) error {

	if err := validate.Required("rule", "body", m.Rule); err != nil {
		return err
	}

	if m.Rule != nil {
		if err := m.Rule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this models API detection response based on the context it is used
func (m *ModelsAPIDetectionResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRemediation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIDetectionResponse) contextValidateRemediation(ctx context.Context, formats strfmt.Registry) error {

	if m.Remediation != nil {

		if err := m.Remediation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remediation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remediation")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsAPIDetectionResponse) contextValidateRule(ctx context.Context, formats strfmt.Registry) error {

	if m.Rule != nil {

		if err := m.Rule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsAPIDetectionResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsAPIDetectionResponse) UnmarshalBinary(b []byte) error {
	var res ModelsAPIDetectionResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
