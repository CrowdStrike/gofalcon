// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainRawEvent domain raw event
//
// swagger:model domain.RawEvent
type DomainRawEvent struct {

	// c ID
	// Required: true
	CID *string `json:"CID"`

	// event name
	// Required: true
	EventName *string `json:"EventName"`

	// fields
	// Required: true
	Fields map[string]string `json:"Fields"`

	// ID
	// Required: true
	ID *string `json:"ID"`

	// internal metadata
	// Required: true
	InternalMetadata interface{} `json:"InternalMetadata"`

	// local ID
	// Required: true
	LocalID *string `json:"LocalID"`

	// metadata
	// Required: true
	Metadata *DomainEventMetadata `json:"Metadata"`

	// model
	// Required: true
	Model *int64 `json:"Model"`

	// properties
	// Required: true
	Properties []DomainGenericEntity `json:"Properties"`

	// raw string
	// Required: true
	RawString *string `json:"RawString"`

	// timestamp
	// Required: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"Timestamp"`

	// trace ID
	// Required: true
	TraceID *string `json:"TraceID"`

	// type
	// Required: true
	Type *string `json:"Type"`

	// ecs categorization
	// Required: true
	EcsCategorization *EcsCategorization `json:"ecsCategorization"`

	// source event
	// Required: true
	SourceEvent *DomainRawEvent `json:"sourceEvent"`
}

// Validate validates this domain raw event
func (m *DomainRawEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInternalMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRawString(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEcsCategorization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceEvent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainRawEvent) validateCID(formats strfmt.Registry) error {

	if err := validate.Required("CID", "body", m.CID); err != nil {
		return err
	}

	return nil
}

func (m *DomainRawEvent) validateEventName(formats strfmt.Registry) error {

	if err := validate.Required("EventName", "body", m.EventName); err != nil {
		return err
	}

	return nil
}

func (m *DomainRawEvent) validateFields(formats strfmt.Registry) error {

	if err := validate.Required("Fields", "body", m.Fields); err != nil {
		return err
	}

	return nil
}

func (m *DomainRawEvent) validateID(formats strfmt.Registry) error {

	if err := validate.Required("ID", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DomainRawEvent) validateInternalMetadata(formats strfmt.Registry) error {

	if m.InternalMetadata == nil {
		return errors.Required("InternalMetadata", "body", nil)
	}

	return nil
}

func (m *DomainRawEvent) validateLocalID(formats strfmt.Registry) error {

	if err := validate.Required("LocalID", "body", m.LocalID); err != nil {
		return err
	}

	return nil
}

func (m *DomainRawEvent) validateMetadata(formats strfmt.Registry) error {

	if err := validate.Required("Metadata", "body", m.Metadata); err != nil {
		return err
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Metadata")
			}
			return err
		}
	}

	return nil
}

func (m *DomainRawEvent) validateModel(formats strfmt.Registry) error {

	if err := validate.Required("Model", "body", m.Model); err != nil {
		return err
	}

	return nil
}

func (m *DomainRawEvent) validateProperties(formats strfmt.Registry) error {

	if err := validate.Required("Properties", "body", m.Properties); err != nil {
		return err
	}

	for i := 0; i < len(m.Properties); i++ {

		if m.Properties[i] != nil {
			if err := m.Properties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Properties" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Properties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainRawEvent) validateRawString(formats strfmt.Registry) error {

	if err := validate.Required("RawString", "body", m.RawString); err != nil {
		return err
	}

	return nil
}

func (m *DomainRawEvent) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("Timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("Timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainRawEvent) validateTraceID(formats strfmt.Registry) error {

	if err := validate.Required("TraceID", "body", m.TraceID); err != nil {
		return err
	}

	return nil
}

func (m *DomainRawEvent) validateType(formats strfmt.Registry) error {

	if err := validate.Required("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *DomainRawEvent) validateEcsCategorization(formats strfmt.Registry) error {

	if err := validate.Required("ecsCategorization", "body", m.EcsCategorization); err != nil {
		return err
	}

	if m.EcsCategorization != nil {
		if err := m.EcsCategorization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecsCategorization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecsCategorization")
			}
			return err
		}
	}

	return nil
}

func (m *DomainRawEvent) validateSourceEvent(formats strfmt.Registry) error {

	if err := validate.Required("sourceEvent", "body", m.SourceEvent); err != nil {
		return err
	}

	if m.SourceEvent != nil {
		if err := m.SourceEvent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceEvent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceEvent")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this domain raw event based on the context it is used
func (m *DomainRawEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEcsCategorization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceEvent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainRawEvent) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {

		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Metadata")
			}
			return err
		}
	}

	return nil
}

func (m *DomainRawEvent) contextValidateProperties(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Properties); i++ {

		if swag.IsZero(m.Properties[i]) { // not required
			return nil
		}

		if err := m.Properties[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Properties" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Properties" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DomainRawEvent) contextValidateEcsCategorization(ctx context.Context, formats strfmt.Registry) error {

	if m.EcsCategorization != nil {

		if err := m.EcsCategorization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecsCategorization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecsCategorization")
			}
			return err
		}
	}

	return nil
}

func (m *DomainRawEvent) contextValidateSourceEvent(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceEvent != nil {

		if err := m.SourceEvent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceEvent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceEvent")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainRawEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainRawEvent) UnmarshalBinary(b []byte) error {
	var res DomainRawEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
