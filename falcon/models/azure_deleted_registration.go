// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureDeletedRegistration azure deleted registration
//
// swagger:model azure.DeletedRegistration
type AzureDeletedRegistration struct {

	// cs infra subscription id
	// Required: true
	CsInfraSubscriptionID *string `json:"cs_infra_subscription_id"`

	// deleted
	// Required: true
	Deleted *bool `json:"deleted"`

	// deployment method
	// Required: true
	DeploymentMethod *string `json:"deployment_method"`

	// deployment stack location
	// Required: true
	DeploymentStackLocation *string `json:"deployment_stack_location"`

	// deployment stack name
	// Required: true
	DeploymentStackName *string `json:"deployment_stack_name"`

	// deployment stack scope
	// Required: true
	DeploymentStackScope *string `json:"deployment_stack_scope"`

	// enterprise app url
	// Required: true
	EnterpriseAppURL *string `json:"enterprise_app_url"`

	// products
	// Required: true
	Products []*DomainProductFeatures `json:"products"`

	// status
	// Required: true
	Status *string `json:"status"`

	// subscriptions
	// Required: true
	Subscriptions []*AzureDeletedSubscriptionInfo `json:"subscriptions"`

	// tenant id
	// Required: true
	TenantID *string `json:"tenant_id"`

	// tenant name
	// Required: true
	TenantName *string `json:"tenant_name"`
}

// Validate validates this azure deleted registration
func (m *AzureDeletedRegistration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCsInfraSubscriptionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentStackLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentStackName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentStackScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnterpriseAppURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureDeletedRegistration) validateCsInfraSubscriptionID(formats strfmt.Registry) error {

	if err := validate.Required("cs_infra_subscription_id", "body", m.CsInfraSubscriptionID); err != nil {
		return err
	}

	return nil
}

func (m *AzureDeletedRegistration) validateDeleted(formats strfmt.Registry) error {

	if err := validate.Required("deleted", "body", m.Deleted); err != nil {
		return err
	}

	return nil
}

func (m *AzureDeletedRegistration) validateDeploymentMethod(formats strfmt.Registry) error {

	if err := validate.Required("deployment_method", "body", m.DeploymentMethod); err != nil {
		return err
	}

	return nil
}

func (m *AzureDeletedRegistration) validateDeploymentStackLocation(formats strfmt.Registry) error {

	if err := validate.Required("deployment_stack_location", "body", m.DeploymentStackLocation); err != nil {
		return err
	}

	return nil
}

func (m *AzureDeletedRegistration) validateDeploymentStackName(formats strfmt.Registry) error {

	if err := validate.Required("deployment_stack_name", "body", m.DeploymentStackName); err != nil {
		return err
	}

	return nil
}

func (m *AzureDeletedRegistration) validateDeploymentStackScope(formats strfmt.Registry) error {

	if err := validate.Required("deployment_stack_scope", "body", m.DeploymentStackScope); err != nil {
		return err
	}

	return nil
}

func (m *AzureDeletedRegistration) validateEnterpriseAppURL(formats strfmt.Registry) error {

	if err := validate.Required("enterprise_app_url", "body", m.EnterpriseAppURL); err != nil {
		return err
	}

	return nil
}

func (m *AzureDeletedRegistration) validateProducts(formats strfmt.Registry) error {

	if err := validate.Required("products", "body", m.Products); err != nil {
		return err
	}

	for i := 0; i < len(m.Products); i++ {
		if swag.IsZero(m.Products[i]) { // not required
			continue
		}

		if m.Products[i] != nil {
			if err := m.Products[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AzureDeletedRegistration) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *AzureDeletedRegistration) validateSubscriptions(formats strfmt.Registry) error {

	if err := validate.Required("subscriptions", "body", m.Subscriptions); err != nil {
		return err
	}

	for i := 0; i < len(m.Subscriptions); i++ {
		if swag.IsZero(m.Subscriptions[i]) { // not required
			continue
		}

		if m.Subscriptions[i] != nil {
			if err := m.Subscriptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subscriptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subscriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AzureDeletedRegistration) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenant_id", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

func (m *AzureDeletedRegistration) validateTenantName(formats strfmt.Registry) error {

	if err := validate.Required("tenant_name", "body", m.TenantName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this azure deleted registration based on the context it is used
func (m *AzureDeletedRegistration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubscriptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureDeletedRegistration) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Products); i++ {

		if m.Products[i] != nil {

			if swag.IsZero(m.Products[i]) { // not required
				return nil
			}

			if err := m.Products[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AzureDeletedRegistration) contextValidateSubscriptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Subscriptions); i++ {

		if m.Subscriptions[i] != nil {

			if swag.IsZero(m.Subscriptions[i]) { // not required
				return nil
			}

			if err := m.Subscriptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subscriptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subscriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureDeletedRegistration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureDeletedRegistration) UnmarshalBinary(b []byte) error {
	var res AzureDeletedRegistration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
