// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelUserInputUpdateRequest model user input update request
//
// swagger:model model.UserInputUpdateRequest
type ModelUserInputUpdateRequest struct {

	// input to provide to the user input activity
	// Required: true
	Input *string `json:"input"`

	// note added to user input at the time an input is provided
	// Required: true
	Note *string `json:"note"`
}

// Validate validates this model user input update request
func (m *ModelUserInputUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNote(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelUserInputUpdateRequest) validateInput(formats strfmt.Registry) error {

	if err := validate.Required("input", "body", m.Input); err != nil {
		return err
	}

	return nil
}

func (m *ModelUserInputUpdateRequest) validateNote(formats strfmt.Registry) error {

	if err := validate.Required("note", "body", m.Note); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this model user input update request based on context it is used
func (m *ModelUserInputUpdateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelUserInputUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelUserInputUpdateRequest) UnmarshalBinary(b []byte) error {
	var res ModelUserInputUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
