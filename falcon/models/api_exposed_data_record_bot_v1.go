// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIExposedDataRecordBotV1 api exposed data record bot v1
//
// swagger:model api.ExposedDataRecordBotV1
type APIExposedDataRecordBotV1 struct {

	// bot id
	BotID string `json:"bot_id,omitempty"`

	// domain detects
	DomainDetects []string `json:"domain_detects"`

	// infection build id
	InfectionBuildID string `json:"infection_build_id,omitempty"`

	// infection date
	// Format: date-time
	InfectionDate strfmt.DateTime `json:"infection_date,omitempty"`

	// infection path
	InfectionPath string `json:"infection_path,omitempty"`

	// ip
	IP string `json:"ip,omitempty"`

	// location
	Location *APIExposedDataRecordBotLocationV1 `json:"location,omitempty"`

	// operating system
	OperatingSystem *APIExposedDataRecordBotOperatingSystemV1 `json:"operating_system,omitempty"`
}

// Validate validates this api exposed data record bot v1
func (m *APIExposedDataRecordBotV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInfectionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatingSystem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIExposedDataRecordBotV1) validateInfectionDate(formats strfmt.Registry) error {
	if swag.IsZero(m.InfectionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("infection_date", "body", "date-time", m.InfectionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APIExposedDataRecordBotV1) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *APIExposedDataRecordBotV1) validateOperatingSystem(formats strfmt.Registry) error {
	if swag.IsZero(m.OperatingSystem) { // not required
		return nil
	}

	if m.OperatingSystem != nil {
		if err := m.OperatingSystem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operating_system")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operating_system")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this api exposed data record bot v1 based on the context it is used
func (m *APIExposedDataRecordBotV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperatingSystem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIExposedDataRecordBotV1) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {

		if swag.IsZero(m.Location) { // not required
			return nil
		}

		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *APIExposedDataRecordBotV1) contextValidateOperatingSystem(ctx context.Context, formats strfmt.Registry) error {

	if m.OperatingSystem != nil {

		if swag.IsZero(m.OperatingSystem) { // not required
			return nil
		}

		if err := m.OperatingSystem.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operating_system")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operating_system")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIExposedDataRecordBotV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIExposedDataRecordBotV1) UnmarshalBinary(b []byte) error {
	var res APIExposedDataRecordBotV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
