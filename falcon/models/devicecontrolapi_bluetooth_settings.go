// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DevicecontrolapiBluetoothSettings devicecontrolapi bluetooth settings
//
// swagger:model devicecontrolapi.BluetoothSettings
type DevicecontrolapiBluetoothSettings struct {

	// classes
	Classes []*DevicecontrolapiBluetoothClass `json:"classes"`

	// custom end user notifications
	CustomEndUserNotifications *DevicecontrolapiBluetoothCustomNotifications `json:"custom_end_user_notifications,omitempty"`

	// end user notification
	EndUserNotification string `json:"end_user_notification,omitempty"`

	// enforcement mode
	EnforcementMode string `json:"enforcement_mode,omitempty"`
}

// Validate validates this devicecontrolapi bluetooth settings
func (m *DevicecontrolapiBluetoothSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClasses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomEndUserNotifications(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontrolapiBluetoothSettings) validateClasses(formats strfmt.Registry) error {
	if swag.IsZero(m.Classes) { // not required
		return nil
	}

	for i := 0; i < len(m.Classes); i++ {
		if swag.IsZero(m.Classes[i]) { // not required
			continue
		}

		if m.Classes[i] != nil {
			if err := m.Classes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("classes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("classes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DevicecontrolapiBluetoothSettings) validateCustomEndUserNotifications(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomEndUserNotifications) { // not required
		return nil
	}

	if m.CustomEndUserNotifications != nil {
		if err := m.CustomEndUserNotifications.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom_end_user_notifications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom_end_user_notifications")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this devicecontrolapi bluetooth settings based on the context it is used
func (m *DevicecontrolapiBluetoothSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClasses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomEndUserNotifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontrolapiBluetoothSettings) contextValidateClasses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Classes); i++ {

		if m.Classes[i] != nil {

			if swag.IsZero(m.Classes[i]) { // not required
				return nil
			}

			if err := m.Classes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("classes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("classes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DevicecontrolapiBluetoothSettings) contextValidateCustomEndUserNotifications(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomEndUserNotifications != nil {

		if swag.IsZero(m.CustomEndUserNotifications) { // not required
			return nil
		}

		if err := m.CustomEndUserNotifications.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom_end_user_notifications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom_end_user_notifications")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DevicecontrolapiBluetoothSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevicecontrolapiBluetoothSettings) UnmarshalBinary(b []byte) error {
	var res DevicecontrolapiBluetoothSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
