// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainVulnerability domain vulnerability
//
// swagger:model domain.Vulnerability
type DomainVulnerability struct {

	// Vulnerability severity score, according to Common Vulnerability Scoring System V2
	CvssV2Base *IntelCVSSv2 `json:"cvss_v2_base,omitempty"`

	// Vulnerability severity score, according to Common Vulnerability Scoring System V3
	CvssV3Base *IntelCVSSv3 `json:"cvss_v3_base,omitempty"`

	// evaluated affected assets count
	// Required: true
	EvaluatedAffectedAssetsCount *float64 `json:"evaluatedAffectedAssetsCount"`

	// exploit status
	// Required: true
	ExploitStatus *float64 `json:"exploitStatus"`

	// exprt rating
	// Required: true
	ExprtRating *string `json:"exprt_rating"`

	// total affected assets
	// Required: true
	TotalAffectedAssets *float64 `json:"totalAffectedAssets"`
}

// Validate validates this domain vulnerability
func (m *DomainVulnerability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCvssV2Base(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCvssV3Base(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvaluatedAffectedAssetsCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExploitStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExprtRating(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalAffectedAssets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainVulnerability) validateCvssV2Base(formats strfmt.Registry) error {
	if swag.IsZero(m.CvssV2Base) { // not required
		return nil
	}

	if m.CvssV2Base != nil {
		if err := m.CvssV2Base.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cvss_v2_base")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cvss_v2_base")
			}
			return err
		}
	}

	return nil
}

func (m *DomainVulnerability) validateCvssV3Base(formats strfmt.Registry) error {
	if swag.IsZero(m.CvssV3Base) { // not required
		return nil
	}

	if m.CvssV3Base != nil {
		if err := m.CvssV3Base.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cvss_v3_base")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cvss_v3_base")
			}
			return err
		}
	}

	return nil
}

func (m *DomainVulnerability) validateEvaluatedAffectedAssetsCount(formats strfmt.Registry) error {

	if err := validate.Required("evaluatedAffectedAssetsCount", "body", m.EvaluatedAffectedAssetsCount); err != nil {
		return err
	}

	return nil
}

func (m *DomainVulnerability) validateExploitStatus(formats strfmt.Registry) error {

	if err := validate.Required("exploitStatus", "body", m.ExploitStatus); err != nil {
		return err
	}

	return nil
}

func (m *DomainVulnerability) validateExprtRating(formats strfmt.Registry) error {

	if err := validate.Required("exprt_rating", "body", m.ExprtRating); err != nil {
		return err
	}

	return nil
}

func (m *DomainVulnerability) validateTotalAffectedAssets(formats strfmt.Registry) error {

	if err := validate.Required("totalAffectedAssets", "body", m.TotalAffectedAssets); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this domain vulnerability based on the context it is used
func (m *DomainVulnerability) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCvssV2Base(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCvssV3Base(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainVulnerability) contextValidateCvssV2Base(ctx context.Context, formats strfmt.Registry) error {

	if m.CvssV2Base != nil {

		if swag.IsZero(m.CvssV2Base) { // not required
			return nil
		}

		if err := m.CvssV2Base.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cvss_v2_base")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cvss_v2_base")
			}
			return err
		}
	}

	return nil
}

func (m *DomainVulnerability) contextValidateCvssV3Base(ctx context.Context, formats strfmt.Registry) error {

	if m.CvssV3Base != nil {

		if swag.IsZero(m.CvssV3Base) { // not required
			return nil
		}

		if err := m.CvssV3Base.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cvss_v3_base")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cvss_v3_base")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainVulnerability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainVulnerability) UnmarshalBinary(b []byte) error {
	var res DomainVulnerability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
