// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainPolicySettingByAccountAndRegion domain policy setting by account and region
//
// swagger:model domain.PolicySettingByAccountAndRegion
type DomainPolicySettingByAccountAndRegion struct {

	// account id
	AccountID string `json:"account_id,omitempty"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// regions
	Regions []string `json:"regions"`

	// severity
	Severity string `json:"severity,omitempty"`

	// tag excluded
	// Required: true
	TagExcluded *bool `json:"tag_excluded"`

	// tenant id
	TenantID string `json:"tenant_id,omitempty"`
}

// Validate validates this domain policy setting by account and region
func (m *DomainPolicySettingByAccountAndRegion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagExcluded(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainPolicySettingByAccountAndRegion) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *DomainPolicySettingByAccountAndRegion) validateTagExcluded(formats strfmt.Registry) error {

	if err := validate.Required("tag_excluded", "body", m.TagExcluded); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain policy setting by account and region based on context it is used
func (m *DomainPolicySettingByAccountAndRegion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainPolicySettingByAccountAndRegion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainPolicySettingByAccountAndRegion) UnmarshalBinary(b []byte) error {
	var res DomainPolicySettingByAccountAndRegion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
