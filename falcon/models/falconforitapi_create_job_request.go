// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FalconforitapiCreateJobRequest falconforitapi create job request
//
// swagger:model falconforitapi.CreateJobRequest
type FalconforitapiCreateJobRequest struct {

	// arguments
	Arguments map[string]string `json:"arguments,omitempty"`

	// composite query
	CompositeQuery *FalconforitapiCompositeQuery `json:"composite_query,omitempty"`

	// discover new hosts interval
	DiscoverNewHostsInterval string `json:"discover_new_hosts_interval,omitempty"`

	// distribution interval
	DistributionInterval string `json:"distribution_interval,omitempty"`

	// guardrails
	Guardrails *FalconforitapiGuardrails `json:"guardrails,omitempty"`

	// osquery
	Osquery string `json:"osquery,omitempty"`

	// output parser config
	OutputParserConfig *FalconforitapiOutputParserConfig `json:"output_parser_config,omitempty"`

	// queries
	Queries *FalconforitapiScripts `json:"queries,omitempty"`

	// remediation trigger condition
	RemediationTriggerCondition []*FalconforitapiConditionGroup `json:"remediation_trigger_condition"`

	// remediations
	Remediations *FalconforitapiScripts `json:"remediations,omitempty"`

	// supported os
	// Required: true
	SupportedOs []string `json:"supported_os"`

	// target
	// Required: true
	Target *string `json:"target"`

	// task id
	TaskID string `json:"task_id,omitempty"`

	// wait time
	WaitTime string `json:"wait_time,omitempty"`
}

// Validate validates this falconforitapi create job request
func (m *FalconforitapiCreateJobRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompositeQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuardrails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputParserConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediationTriggerCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiCreateJobRequest) validateCompositeQuery(formats strfmt.Registry) error {
	if swag.IsZero(m.CompositeQuery) { // not required
		return nil
	}

	if m.CompositeQuery != nil {
		if err := m.CompositeQuery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("composite_query")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("composite_query")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiCreateJobRequest) validateGuardrails(formats strfmt.Registry) error {
	if swag.IsZero(m.Guardrails) { // not required
		return nil
	}

	if m.Guardrails != nil {
		if err := m.Guardrails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guardrails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guardrails")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiCreateJobRequest) validateOutputParserConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.OutputParserConfig) { // not required
		return nil
	}

	if m.OutputParserConfig != nil {
		if err := m.OutputParserConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output_parser_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output_parser_config")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiCreateJobRequest) validateQueries(formats strfmt.Registry) error {
	if swag.IsZero(m.Queries) { // not required
		return nil
	}

	if m.Queries != nil {
		if err := m.Queries.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queries")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queries")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiCreateJobRequest) validateRemediationTriggerCondition(formats strfmt.Registry) error {
	if swag.IsZero(m.RemediationTriggerCondition) { // not required
		return nil
	}

	for i := 0; i < len(m.RemediationTriggerCondition); i++ {
		if swag.IsZero(m.RemediationTriggerCondition[i]) { // not required
			continue
		}

		if m.RemediationTriggerCondition[i] != nil {
			if err := m.RemediationTriggerCondition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remediation_trigger_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remediation_trigger_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconforitapiCreateJobRequest) validateRemediations(formats strfmt.Registry) error {
	if swag.IsZero(m.Remediations) { // not required
		return nil
	}

	if m.Remediations != nil {
		if err := m.Remediations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remediations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remediations")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiCreateJobRequest) validateSupportedOs(formats strfmt.Registry) error {

	if err := validate.Required("supported_os", "body", m.SupportedOs); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiCreateJobRequest) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this falconforitapi create job request based on the context it is used
func (m *FalconforitapiCreateJobRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCompositeQuery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGuardrails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutputParserConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemediationTriggerCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemediations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiCreateJobRequest) contextValidateCompositeQuery(ctx context.Context, formats strfmt.Registry) error {

	if m.CompositeQuery != nil {

		if swag.IsZero(m.CompositeQuery) { // not required
			return nil
		}

		if err := m.CompositeQuery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("composite_query")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("composite_query")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiCreateJobRequest) contextValidateGuardrails(ctx context.Context, formats strfmt.Registry) error {

	if m.Guardrails != nil {

		if swag.IsZero(m.Guardrails) { // not required
			return nil
		}

		if err := m.Guardrails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guardrails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guardrails")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiCreateJobRequest) contextValidateOutputParserConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.OutputParserConfig != nil {

		if swag.IsZero(m.OutputParserConfig) { // not required
			return nil
		}

		if err := m.OutputParserConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output_parser_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output_parser_config")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiCreateJobRequest) contextValidateQueries(ctx context.Context, formats strfmt.Registry) error {

	if m.Queries != nil {

		if swag.IsZero(m.Queries) { // not required
			return nil
		}

		if err := m.Queries.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queries")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queries")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiCreateJobRequest) contextValidateRemediationTriggerCondition(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RemediationTriggerCondition); i++ {

		if m.RemediationTriggerCondition[i] != nil {

			if swag.IsZero(m.RemediationTriggerCondition[i]) { // not required
				return nil
			}

			if err := m.RemediationTriggerCondition[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remediation_trigger_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remediation_trigger_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconforitapiCreateJobRequest) contextValidateRemediations(ctx context.Context, formats strfmt.Registry) error {

	if m.Remediations != nil {

		if swag.IsZero(m.Remediations) { // not required
			return nil
		}

		if err := m.Remediations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remediations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remediations")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FalconforitapiCreateJobRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FalconforitapiCreateJobRequest) UnmarshalBinary(b []byte) error {
	var res FalconforitapiCreateJobRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
