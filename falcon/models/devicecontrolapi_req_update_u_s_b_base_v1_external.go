// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DevicecontrolapiReqUpdateUSBBaseV1External devicecontrolapi req update u s b base v1 external
//
// swagger:model devicecontrolapi.ReqUpdateUSBBaseV1External
type DevicecontrolapiReqUpdateUSBBaseV1External struct {

	// Object for custom end-user notifications
	CustomNotifications *DevicecontrolapiUSBCustomNotifications `json:"custom_notifications,omitempty"`

	// Determines if a notification will be shown to the end user (omit to keep current)
	// Enum: [NOTIFY_USER SILENT]
	EndUserNotification string `json:"end_user_notification,omitempty"`

	// Enforcement for the USB policy (omit to keep current). Note: OFF only supported for Mac platform
	// Enum: [MONITOR_ONLY MONITOR_ENFORCE OFF]
	EnforcementMode string `json:"enforcement_mode,omitempty"`

	// Boolean value to enable enhanced file metadata collection
	EnhancedFileMetadata bool `json:"enhanced_file_metadata,omitempty"`
}

// Validate validates this devicecontrolapi req update u s b base v1 external
func (m *DevicecontrolapiReqUpdateUSBBaseV1External) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomNotifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndUserNotification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnforcementMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontrolapiReqUpdateUSBBaseV1External) validateCustomNotifications(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomNotifications) { // not required
		return nil
	}

	if m.CustomNotifications != nil {
		if err := m.CustomNotifications.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom_notifications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom_notifications")
			}
			return err
		}
	}

	return nil
}

var devicecontrolapiReqUpdateUSBBaseV1ExternalTypeEndUserNotificationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NOTIFY_USER","SILENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		devicecontrolapiReqUpdateUSBBaseV1ExternalTypeEndUserNotificationPropEnum = append(devicecontrolapiReqUpdateUSBBaseV1ExternalTypeEndUserNotificationPropEnum, v)
	}
}

const (

	// DevicecontrolapiReqUpdateUSBBaseV1ExternalEndUserNotificationNOTIFYUSER captures enum value "NOTIFY_USER"
	DevicecontrolapiReqUpdateUSBBaseV1ExternalEndUserNotificationNOTIFYUSER string = "NOTIFY_USER"

	// DevicecontrolapiReqUpdateUSBBaseV1ExternalEndUserNotificationSILENT captures enum value "SILENT"
	DevicecontrolapiReqUpdateUSBBaseV1ExternalEndUserNotificationSILENT string = "SILENT"
)

// prop value enum
func (m *DevicecontrolapiReqUpdateUSBBaseV1External) validateEndUserNotificationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, devicecontrolapiReqUpdateUSBBaseV1ExternalTypeEndUserNotificationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DevicecontrolapiReqUpdateUSBBaseV1External) validateEndUserNotification(formats strfmt.Registry) error {
	if swag.IsZero(m.EndUserNotification) { // not required
		return nil
	}

	// value enum
	if err := m.validateEndUserNotificationEnum("end_user_notification", "body", m.EndUserNotification); err != nil {
		return err
	}

	return nil
}

var devicecontrolapiReqUpdateUSBBaseV1ExternalTypeEnforcementModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MONITOR_ONLY","MONITOR_ENFORCE","OFF"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		devicecontrolapiReqUpdateUSBBaseV1ExternalTypeEnforcementModePropEnum = append(devicecontrolapiReqUpdateUSBBaseV1ExternalTypeEnforcementModePropEnum, v)
	}
}

const (

	// DevicecontrolapiReqUpdateUSBBaseV1ExternalEnforcementModeMONITORONLY captures enum value "MONITOR_ONLY"
	DevicecontrolapiReqUpdateUSBBaseV1ExternalEnforcementModeMONITORONLY string = "MONITOR_ONLY"

	// DevicecontrolapiReqUpdateUSBBaseV1ExternalEnforcementModeMONITORENFORCE captures enum value "MONITOR_ENFORCE"
	DevicecontrolapiReqUpdateUSBBaseV1ExternalEnforcementModeMONITORENFORCE string = "MONITOR_ENFORCE"

	// DevicecontrolapiReqUpdateUSBBaseV1ExternalEnforcementModeOFF captures enum value "OFF"
	DevicecontrolapiReqUpdateUSBBaseV1ExternalEnforcementModeOFF string = "OFF"
)

// prop value enum
func (m *DevicecontrolapiReqUpdateUSBBaseV1External) validateEnforcementModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, devicecontrolapiReqUpdateUSBBaseV1ExternalTypeEnforcementModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DevicecontrolapiReqUpdateUSBBaseV1External) validateEnforcementMode(formats strfmt.Registry) error {
	if swag.IsZero(m.EnforcementMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnforcementModeEnum("enforcement_mode", "body", m.EnforcementMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this devicecontrolapi req update u s b base v1 external based on the context it is used
func (m *DevicecontrolapiReqUpdateUSBBaseV1External) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomNotifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontrolapiReqUpdateUSBBaseV1External) contextValidateCustomNotifications(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomNotifications != nil {

		if swag.IsZero(m.CustomNotifications) { // not required
			return nil
		}

		if err := m.CustomNotifications.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom_notifications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom_notifications")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DevicecontrolapiReqUpdateUSBBaseV1External) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevicecontrolapiReqUpdateUSBBaseV1External) UnmarshalBinary(b []byte) error {
	var res DevicecontrolapiReqUpdateUSBBaseV1External
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
