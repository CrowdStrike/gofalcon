// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItautomationRerunTaskExecutionRequest itautomation rerun task execution request
//
// swagger:model itautomation.RerunTaskExecutionRequest
type ItautomationRerunTaskExecutionRequest struct {

	// Type of rerun. When set to hosts, re-run on same hosts again. When set to failed, re-run only on failed hosts. When set to offline, re-run only on offline hosts. When set to target, re-run on all the hosts resolved to set criteria.
	// Required: true
	// Enum: [hosts failed offline target]
	RunType *string `json:"run_type"`

	// ID of the task execution to rerun. Example: f64b95555ef54ea682619ce880d267cc
	// Required: true
	TaskExecutionID *string `json:"task_execution_id"`
}

// Validate validates this itautomation rerun task execution request
func (m *ItautomationRerunTaskExecutionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRunType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskExecutionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var itautomationRerunTaskExecutionRequestTypeRunTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["hosts","failed","offline","target"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itautomationRerunTaskExecutionRequestTypeRunTypePropEnum = append(itautomationRerunTaskExecutionRequestTypeRunTypePropEnum, v)
	}
}

const (

	// ItautomationRerunTaskExecutionRequestRunTypeHosts captures enum value "hosts"
	ItautomationRerunTaskExecutionRequestRunTypeHosts string = "hosts"

	// ItautomationRerunTaskExecutionRequestRunTypeFailed captures enum value "failed"
	ItautomationRerunTaskExecutionRequestRunTypeFailed string = "failed"

	// ItautomationRerunTaskExecutionRequestRunTypeOffline captures enum value "offline"
	ItautomationRerunTaskExecutionRequestRunTypeOffline string = "offline"

	// ItautomationRerunTaskExecutionRequestRunTypeTarget captures enum value "target"
	ItautomationRerunTaskExecutionRequestRunTypeTarget string = "target"
)

// prop value enum
func (m *ItautomationRerunTaskExecutionRequest) validateRunTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, itautomationRerunTaskExecutionRequestTypeRunTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ItautomationRerunTaskExecutionRequest) validateRunType(formats strfmt.Registry) error {

	if err := validate.Required("run_type", "body", m.RunType); err != nil {
		return err
	}

	// value enum
	if err := m.validateRunTypeEnum("run_type", "body", *m.RunType); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationRerunTaskExecutionRequest) validateTaskExecutionID(formats strfmt.Registry) error {

	if err := validate.Required("task_execution_id", "body", m.TaskExecutionID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this itautomation rerun task execution request based on context it is used
func (m *ItautomationRerunTaskExecutionRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ItautomationRerunTaskExecutionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItautomationRerunTaskExecutionRequest) UnmarshalBinary(b []byte) error {
	var res ItautomationRerunTaskExecutionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
