// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleasecontentsReleaseContentResponseV1 releasecontents release content response v1
//
// swagger:model releasecontents.ReleaseContentResponseV1
type ReleasecontentsReleaseContentResponseV1 struct {

	// content category
	// Required: true
	ContentCategory *string `json:"content_category"`

	// content group id
	// Required: true
	ContentGroupID *string `json:"content_group_id"`

	// content type
	// Required: true
	ContentType *string `json:"content_type"`

	// content version
	// Required: true
	ContentVersion *ReleasecontentsReleaseContentVersionResponseV1 `json:"content_version"`

	// description
	Description string `json:"description,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// jira ticket
	JiraTicket string `json:"jira_ticket,omitempty"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this releasecontents release content response v1
func (m *ReleasecontentsReleaseContentResponseV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContentCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleasecontentsReleaseContentResponseV1) validateContentCategory(formats strfmt.Registry) error {

	if err := validate.Required("content_category", "body", m.ContentCategory); err != nil {
		return err
	}

	return nil
}

func (m *ReleasecontentsReleaseContentResponseV1) validateContentGroupID(formats strfmt.Registry) error {

	if err := validate.Required("content_group_id", "body", m.ContentGroupID); err != nil {
		return err
	}

	return nil
}

func (m *ReleasecontentsReleaseContentResponseV1) validateContentType(formats strfmt.Registry) error {

	if err := validate.Required("content_type", "body", m.ContentType); err != nil {
		return err
	}

	return nil
}

func (m *ReleasecontentsReleaseContentResponseV1) validateContentVersion(formats strfmt.Registry) error {

	if err := validate.Required("content_version", "body", m.ContentVersion); err != nil {
		return err
	}

	if m.ContentVersion != nil {
		if err := m.ContentVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("content_version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("content_version")
			}
			return err
		}
	}

	return nil
}

func (m *ReleasecontentsReleaseContentResponseV1) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ReleasecontentsReleaseContentResponseV1) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this releasecontents release content response v1 based on the context it is used
func (m *ReleasecontentsReleaseContentResponseV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContentVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleasecontentsReleaseContentResponseV1) contextValidateContentVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.ContentVersion != nil {

		if err := m.ContentVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("content_version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("content_version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleasecontentsReleaseContentResponseV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleasecontentsReleaseContentResponseV1) UnmarshalBinary(b []byte) error {
	var res ReleasecontentsReleaseContentResponseV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
