// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsImageWithRulesFailed models image with rules failed
//
// swagger:model models.ImageWithRulesFailed
type ModelsImageWithRulesFailed struct {

	// 1
	// Required: true
	Nr1 *int64 `json:"1"`

	// 2
	// Required: true
	Nr2 *int64 `json:"2"`

	// 3
	// Required: true
	Nr3 *int64 `json:"3"`

	// 4
	// Required: true
	Nr4 *int64 `json:"4"`

	// image digest
	// Required: true
	ImageDigest *string `json:"image_digest"`

	// image registry
	// Required: true
	ImageRegistry *string `json:"image_registry"`

	// image repository
	// Required: true
	ImageRepository *string `json:"image_repository"`

	// image tag
	// Required: true
	ImageTag *string `json:"image_tag"`
}

// Validate validates this models image with rules failed
func (m *ModelsImageWithRulesFailed) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNr1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageDigest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageRegistry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsImageWithRulesFailed) validateNr1(formats strfmt.Registry) error {

	if err := validate.Required("1", "body", m.Nr1); err != nil {
		return err
	}

	return nil
}

func (m *ModelsImageWithRulesFailed) validateNr2(formats strfmt.Registry) error {

	if err := validate.Required("2", "body", m.Nr2); err != nil {
		return err
	}

	return nil
}

func (m *ModelsImageWithRulesFailed) validateNr3(formats strfmt.Registry) error {

	if err := validate.Required("3", "body", m.Nr3); err != nil {
		return err
	}

	return nil
}

func (m *ModelsImageWithRulesFailed) validateNr4(formats strfmt.Registry) error {

	if err := validate.Required("4", "body", m.Nr4); err != nil {
		return err
	}

	return nil
}

func (m *ModelsImageWithRulesFailed) validateImageDigest(formats strfmt.Registry) error {

	if err := validate.Required("image_digest", "body", m.ImageDigest); err != nil {
		return err
	}

	return nil
}

func (m *ModelsImageWithRulesFailed) validateImageRegistry(formats strfmt.Registry) error {

	if err := validate.Required("image_registry", "body", m.ImageRegistry); err != nil {
		return err
	}

	return nil
}

func (m *ModelsImageWithRulesFailed) validateImageRepository(formats strfmt.Registry) error {

	if err := validate.Required("image_repository", "body", m.ImageRepository); err != nil {
		return err
	}

	return nil
}

func (m *ModelsImageWithRulesFailed) validateImageTag(formats strfmt.Registry) error {

	if err := validate.Required("image_tag", "body", m.ImageTag); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models image with rules failed based on context it is used
func (m *ModelsImageWithRulesFailed) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsImageWithRulesFailed) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsImageWithRulesFailed) UnmarshalBinary(b []byte) error {
	var res ModelsImageWithRulesFailed
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
