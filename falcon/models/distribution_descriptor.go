// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DistributionDescriptor distribution descriptor
//
// swagger:model distribution.Descriptor
type DistributionDescriptor struct {

	// annotations
	Annotations map[string]string `json:"annotations,omitempty"`

	// digest
	Digest string `json:"digest,omitempty"`

	// media type
	MediaType string `json:"mediaType,omitempty"`

	// platform
	Platform *V1Platform `json:"platform,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// urls
	Urls []string `json:"urls"`
}

// Validate validates this distribution descriptor
func (m *DistributionDescriptor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DistributionDescriptor) validatePlatform(formats strfmt.Registry) error {
	if swag.IsZero(m.Platform) { // not required
		return nil
	}

	if m.Platform != nil {
		if err := m.Platform.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("platform")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("platform")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this distribution descriptor based on the context it is used
func (m *DistributionDescriptor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePlatform(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DistributionDescriptor) contextValidatePlatform(ctx context.Context, formats strfmt.Registry) error {

	if m.Platform != nil {

		if swag.IsZero(m.Platform) { // not required
			return nil
		}

		if err := m.Platform.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("platform")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("platform")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DistributionDescriptor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DistributionDescriptor) UnmarshalBinary(b []byte) error {
	var res DistributionDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
