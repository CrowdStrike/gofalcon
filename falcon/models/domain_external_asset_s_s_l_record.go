// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DomainExternalAssetSSLRecord domain external asset s s l record
//
// swagger:model domain.ExternalAssetSSLRecord
type DomainExternalAssetSSLRecord struct {

	// alpn
	Alpn string `json:"alpn,omitempty"`

	// alternative name
	AlternativeName string `json:"alternative_name,omitempty"`

	// certificate
	Certificate *DomainExternalAssetCertificate `json:"certificate,omitempty"`

	// cipher suites
	CipherSuites []*DomainCipher `json:"cipher_suites"`

	// ja3s
	Ja3s string `json:"ja3s,omitempty"`

	// jarm
	Jarm string `json:"jarm,omitempty"`

	// supported versions
	SupportedVersions []string `json:"supported_versions"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this domain external asset s s l record
func (m *DomainExternalAssetSSLRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCipherSuites(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainExternalAssetSSLRecord) validateCertificate(formats strfmt.Registry) error {
	if swag.IsZero(m.Certificate) { // not required
		return nil
	}

	if m.Certificate != nil {
		if err := m.Certificate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificate")
			}
			return err
		}
	}

	return nil
}

func (m *DomainExternalAssetSSLRecord) validateCipherSuites(formats strfmt.Registry) error {
	if swag.IsZero(m.CipherSuites) { // not required
		return nil
	}

	for i := 0; i < len(m.CipherSuites); i++ {
		if swag.IsZero(m.CipherSuites[i]) { // not required
			continue
		}

		if m.CipherSuites[i] != nil {
			if err := m.CipherSuites[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cipher_suites" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cipher_suites" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this domain external asset s s l record based on the context it is used
func (m *DomainExternalAssetSSLRecord) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCertificate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCipherSuites(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainExternalAssetSSLRecord) contextValidateCertificate(ctx context.Context, formats strfmt.Registry) error {

	if m.Certificate != nil {

		if swag.IsZero(m.Certificate) { // not required
			return nil
		}

		if err := m.Certificate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificate")
			}
			return err
		}
	}

	return nil
}

func (m *DomainExternalAssetSSLRecord) contextValidateCipherSuites(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CipherSuites); i++ {

		if m.CipherSuites[i] != nil {

			if swag.IsZero(m.CipherSuites[i]) { // not required
				return nil
			}

			if err := m.CipherSuites[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cipher_suites" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cipher_suites" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainExternalAssetSSLRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainExternalAssetSSLRecord) UnmarshalBinary(b []byte) error {
	var res DomainExternalAssetSSLRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
