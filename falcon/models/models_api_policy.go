// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsAPIPolicy models API policy
//
// swagger:model models.APIPolicy
type ModelsAPIPolicy struct {

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// description
	// Required: true
	Description *string `json:"description"`

	// is default
	// Required: true
	IsDefault *bool `json:"is_default"`

	// is enabled
	// Required: true
	IsEnabled *bool `json:"is_enabled"`

	// name
	// Required: true
	Name *string `json:"name"`

	// policy data
	PolicyData *ModelsAPIPolicyData `json:"policy_data,omitempty"`

	// precedence
	// Required: true
	Precedence *int32 `json:"precedence"`

	// updated at
	// Required: true
	UpdatedAt *string `json:"updated_at"`

	// uuid
	// Required: true
	UUID *string `json:"uuid"`
}

// Validate validates this models API policy
func (m *ModelsAPIPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsDefault(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrecedence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIPolicy) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPolicy) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPolicy) validateIsDefault(formats strfmt.Registry) error {

	if err := validate.Required("is_default", "body", m.IsDefault); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPolicy) validateIsEnabled(formats strfmt.Registry) error {

	if err := validate.Required("is_enabled", "body", m.IsEnabled); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPolicy) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPolicy) validatePolicyData(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyData) { // not required
		return nil
	}

	if m.PolicyData != nil {
		if err := m.PolicyData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_data")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsAPIPolicy) validatePrecedence(formats strfmt.Registry) error {

	if err := validate.Required("precedence", "body", m.Precedence); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPolicy) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPolicy) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this models API policy based on the context it is used
func (m *ModelsAPIPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePolicyData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIPolicy) contextValidatePolicyData(ctx context.Context, formats strfmt.Registry) error {

	if m.PolicyData != nil {

		if swag.IsZero(m.PolicyData) { // not required
			return nil
		}

		if err := m.PolicyData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsAPIPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsAPIPolicy) UnmarshalBinary(b []byte) error {
	var res ModelsAPIPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
