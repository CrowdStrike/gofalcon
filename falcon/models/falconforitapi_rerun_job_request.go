// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FalconforitapiRerunJobRequest falconforitapi rerun job request
//
// swagger:model falconforitapi.RerunJobRequest
type FalconforitapiRerunJobRequest struct {

	// job id
	// Required: true
	JobID *string `json:"job_id"`

	// run type
	// Required: true
	RunType *string `json:"run_type"`
}

// Validate validates this falconforitapi rerun job request
func (m *FalconforitapiRerunJobRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJobID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiRerunJobRequest) validateJobID(formats strfmt.Registry) error {

	if err := validate.Required("job_id", "body", m.JobID); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiRerunJobRequest) validateRunType(formats strfmt.Registry) error {

	if err := validate.Required("run_type", "body", m.RunType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this falconforitapi rerun job request based on context it is used
func (m *FalconforitapiRerunJobRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FalconforitapiRerunJobRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FalconforitapiRerunJobRequest) UnmarshalBinary(b []byte) error {
	var res FalconforitapiRerunJobRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
