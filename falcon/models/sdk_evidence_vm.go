// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SdkEvidenceVM sdk evidence VM
//
// swagger:model sdk.EvidenceVM
type SdkEvidenceVM struct {

	// alerts
	// Required: true
	Alerts *SdkAlertEvidenceVM `json:"alerts"`

	// events
	// Required: true
	Events *SdkEventEvidenceVM `json:"events"`

	// leads
	// Required: true
	Leads *SdkLeadEvidenceVM `json:"leads"`
}

// Validate validates this sdk evidence VM
func (m *SdkEvidenceVM) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlerts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLeads(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SdkEvidenceVM) validateAlerts(formats strfmt.Registry) error {

	if err := validate.Required("alerts", "body", m.Alerts); err != nil {
		return err
	}

	if m.Alerts != nil {
		if err := m.Alerts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alerts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alerts")
			}
			return err
		}
	}

	return nil
}

func (m *SdkEvidenceVM) validateEvents(formats strfmt.Registry) error {

	if err := validate.Required("events", "body", m.Events); err != nil {
		return err
	}

	if m.Events != nil {
		if err := m.Events.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("events")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("events")
			}
			return err
		}
	}

	return nil
}

func (m *SdkEvidenceVM) validateLeads(formats strfmt.Registry) error {

	if err := validate.Required("leads", "body", m.Leads); err != nil {
		return err
	}

	if m.Leads != nil {
		if err := m.Leads.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("leads")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("leads")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sdk evidence VM based on the context it is used
func (m *SdkEvidenceVM) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlerts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLeads(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SdkEvidenceVM) contextValidateAlerts(ctx context.Context, formats strfmt.Registry) error {

	if m.Alerts != nil {

		if err := m.Alerts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alerts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alerts")
			}
			return err
		}
	}

	return nil
}

func (m *SdkEvidenceVM) contextValidateEvents(ctx context.Context, formats strfmt.Registry) error {

	if m.Events != nil {

		if err := m.Events.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("events")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("events")
			}
			return err
		}
	}

	return nil
}

func (m *SdkEvidenceVM) contextValidateLeads(ctx context.Context, formats strfmt.Registry) error {

	if m.Leads != nil {

		if err := m.Leads.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("leads")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("leads")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SdkEvidenceVM) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SdkEvidenceVM) UnmarshalBinary(b []byte) error {
	var res SdkEvidenceVM
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
