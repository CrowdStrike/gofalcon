// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIQueryJobsResults api query jobs results
//
// swagger:model api.QueryJobsResults
type APIQueryJobsResults struct {

	// Indicates whether the query has been cancelled
	// Required: true
	Cancelled *bool `json:"cancelled"`

	// True if the query has run to completion
	// Required: true
	Done *bool `json:"done"`

	// JSON of the events as an array
	// Required: true
	Events []APIQueryJobsResultsEvents `json:"events"`

	// JSON List of the files used to fulfill the query
	// Required: true
	FilesUsed []APIQueryJobsResultsFilesUsed `json:"filesUsed"`

	// Entries that match the supplied filter
	// Required: true
	FilterMatches []APIQueryJobsResultsFilterMatches `json:"filterMatches"`

	// Metadata about the result set in the form of QueryMetaDataJson
	// Required: true
	MetaData *APIQueryMetadataJSON `json:"metaData"`

	// Information used to render the distribution graph. Only supplied when the showQueryEventDistribution is set to true
	// Required: true
	QueryEventDistribution *APIQueryEventDistribution `json:"queryEventDistribution"`

	// List of warnings returned using the WarningJson
	// Required: true
	Warnings []*APIWarningJSON `json:"warnings"`
}

// Validate validates this api query jobs results
func (m *APIQueryJobsResults) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCancelled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilesUsed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilterMatches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetaData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryEventDistribution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarnings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIQueryJobsResults) validateCancelled(formats strfmt.Registry) error {

	if err := validate.Required("cancelled", "body", m.Cancelled); err != nil {
		return err
	}

	return nil
}

func (m *APIQueryJobsResults) validateDone(formats strfmt.Registry) error {

	if err := validate.Required("done", "body", m.Done); err != nil {
		return err
	}

	return nil
}

func (m *APIQueryJobsResults) validateEvents(formats strfmt.Registry) error {

	if err := validate.Required("events", "body", m.Events); err != nil {
		return err
	}

	return nil
}

func (m *APIQueryJobsResults) validateFilesUsed(formats strfmt.Registry) error {

	if err := validate.Required("filesUsed", "body", m.FilesUsed); err != nil {
		return err
	}

	return nil
}

func (m *APIQueryJobsResults) validateFilterMatches(formats strfmt.Registry) error {

	if err := validate.Required("filterMatches", "body", m.FilterMatches); err != nil {
		return err
	}

	return nil
}

func (m *APIQueryJobsResults) validateMetaData(formats strfmt.Registry) error {

	if err := validate.Required("metaData", "body", m.MetaData); err != nil {
		return err
	}

	if m.MetaData != nil {
		if err := m.MetaData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metaData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metaData")
			}
			return err
		}
	}

	return nil
}

func (m *APIQueryJobsResults) validateQueryEventDistribution(formats strfmt.Registry) error {

	if err := validate.Required("queryEventDistribution", "body", m.QueryEventDistribution); err != nil {
		return err
	}

	if m.QueryEventDistribution != nil {
		if err := m.QueryEventDistribution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queryEventDistribution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queryEventDistribution")
			}
			return err
		}
	}

	return nil
}

func (m *APIQueryJobsResults) validateWarnings(formats strfmt.Registry) error {

	if err := validate.Required("warnings", "body", m.Warnings); err != nil {
		return err
	}

	for i := 0; i < len(m.Warnings); i++ {
		if swag.IsZero(m.Warnings[i]) { // not required
			continue
		}

		if m.Warnings[i] != nil {
			if err := m.Warnings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("warnings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("warnings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this api query jobs results based on the context it is used
func (m *APIQueryJobsResults) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetaData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueryEventDistribution(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWarnings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIQueryJobsResults) contextValidateMetaData(ctx context.Context, formats strfmt.Registry) error {

	if m.MetaData != nil {

		if err := m.MetaData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metaData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metaData")
			}
			return err
		}
	}

	return nil
}

func (m *APIQueryJobsResults) contextValidateQueryEventDistribution(ctx context.Context, formats strfmt.Registry) error {

	if m.QueryEventDistribution != nil {

		if err := m.QueryEventDistribution.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queryEventDistribution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queryEventDistribution")
			}
			return err
		}
	}

	return nil
}

func (m *APIQueryJobsResults) contextValidateWarnings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Warnings); i++ {

		if m.Warnings[i] != nil {

			if swag.IsZero(m.Warnings[i]) { // not required
				return nil
			}

			if err := m.Warnings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("warnings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("warnings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIQueryJobsResults) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIQueryJobsResults) UnmarshalBinary(b []byte) error {
	var res APIQueryJobsResults
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
