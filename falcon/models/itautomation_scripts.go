// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ItautomationScripts itautomation scripts
//
// swagger:model itautomation.Scripts
type ItautomationScripts struct {

	// Linux-specific script configuration.
	Linux *ItautomationScript `json:"linux,omitempty"`

	// macOS-specific script configuration.
	Mac *ItautomationScript `json:"mac,omitempty"`

	// Windows-specific script configuration.
	Windows *ItautomationScript `json:"windows,omitempty"`
}

// Validate validates this itautomation scripts
func (m *ItautomationScripts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinux(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWindows(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItautomationScripts) validateLinux(formats strfmt.Registry) error {
	if swag.IsZero(m.Linux) { // not required
		return nil
	}

	if m.Linux != nil {
		if err := m.Linux.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linux")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("linux")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationScripts) validateMac(formats strfmt.Registry) error {
	if swag.IsZero(m.Mac) { // not required
		return nil
	}

	if m.Mac != nil {
		if err := m.Mac.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mac")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mac")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationScripts) validateWindows(formats strfmt.Registry) error {
	if swag.IsZero(m.Windows) { // not required
		return nil
	}

	if m.Windows != nil {
		if err := m.Windows.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("windows")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("windows")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this itautomation scripts based on the context it is used
func (m *ItautomationScripts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinux(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMac(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWindows(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItautomationScripts) contextValidateLinux(ctx context.Context, formats strfmt.Registry) error {

	if m.Linux != nil {

		if swag.IsZero(m.Linux) { // not required
			return nil
		}

		if err := m.Linux.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linux")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("linux")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationScripts) contextValidateMac(ctx context.Context, formats strfmt.Registry) error {

	if m.Mac != nil {

		if swag.IsZero(m.Mac) { // not required
			return nil
		}

		if err := m.Mac.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mac")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mac")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationScripts) contextValidateWindows(ctx context.Context, formats strfmt.Registry) error {

	if m.Windows != nil {

		if swag.IsZero(m.Windows) { // not required
			return nil
		}

		if err := m.Windows.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("windows")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("windows")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ItautomationScripts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItautomationScripts) UnmarshalBinary(b []byte) error {
	var res ItautomationScripts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
