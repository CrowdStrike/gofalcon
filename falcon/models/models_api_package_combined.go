// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsAPIPackageCombined models API package combined
//
// swagger:model models.APIPackageCombined
type ModelsAPIPackageCombined struct {

	// all images
	// Required: true
	AllImages *int64 `json:"all_images"`

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// license
	// Required: true
	License *string `json:"license"`

	// package name version
	// Required: true
	PackageNameVersion *string `json:"package_name_version"`

	// running images
	// Required: true
	RunningImages *int64 `json:"running_images"`

	// type
	// Required: true
	Type *string `json:"type"`

	// vulnerabilities
	// Required: true
	Vulnerabilities []*ModelsAPIPackageVulnerability `json:"vulnerabilities"`

	// vulnerability count
	// Required: true
	VulnerabilityCount *int32 `json:"vulnerability_count"`
}

// Validate validates this models API package combined
func (m *ModelsAPIPackageCombined) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicense(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageNameVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVulnerabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVulnerabilityCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIPackageCombined) validateAllImages(formats strfmt.Registry) error {

	if err := validate.Required("all_images", "body", m.AllImages); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPackageCombined) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPackageCombined) validateLicense(formats strfmt.Registry) error {

	if err := validate.Required("license", "body", m.License); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPackageCombined) validatePackageNameVersion(formats strfmt.Registry) error {

	if err := validate.Required("package_name_version", "body", m.PackageNameVersion); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPackageCombined) validateRunningImages(formats strfmt.Registry) error {

	if err := validate.Required("running_images", "body", m.RunningImages); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPackageCombined) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPackageCombined) validateVulnerabilities(formats strfmt.Registry) error {

	if err := validate.Required("vulnerabilities", "body", m.Vulnerabilities); err != nil {
		return err
	}

	for i := 0; i < len(m.Vulnerabilities); i++ {
		if swag.IsZero(m.Vulnerabilities[i]) { // not required
			continue
		}

		if m.Vulnerabilities[i] != nil {
			if err := m.Vulnerabilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vulnerabilities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vulnerabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsAPIPackageCombined) validateVulnerabilityCount(formats strfmt.Registry) error {

	if err := validate.Required("vulnerability_count", "body", m.VulnerabilityCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this models API package combined based on the context it is used
func (m *ModelsAPIPackageCombined) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVulnerabilities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIPackageCombined) contextValidateVulnerabilities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vulnerabilities); i++ {

		if m.Vulnerabilities[i] != nil {

			if swag.IsZero(m.Vulnerabilities[i]) { // not required
				return nil
			}

			if err := m.Vulnerabilities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vulnerabilities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vulnerabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsAPIPackageCombined) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsAPIPackageCombined) UnmarshalBinary(b []byte) error {
	var res ModelsAPIPackageCombined
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
