// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainCVE domain c v e
//
// swagger:model domain.CVE
type DomainCVE struct {

	// actors
	// Required: true
	Actors []string `json:"actors"`

	// additional info
	AdditionalInfo string `json:"additional_info,omitempty"`

	// base score
	// Required: true
	BaseScore *float64 `json:"base_score"`

	// cisa kev info
	// Required: true
	CisaKevInfo *DomainCISAKnownExploitedVulnerabilitiesInfo `json:"cisa_kev_info"`

	// content packages
	ContentPackages []*DomainContentPackage `json:"content_packages"`

	// cps rating
	// Required: true
	CpsRating *DomainCPSRating `json:"cps_rating"`

	// cvss v2 score
	CvssV2Score *DomainCVSSv2 `json:"cvss_v2_score,omitempty"`

	// cvss v3 score
	CvssV3Score *DomainCVSSv3 `json:"cvss_v3_score,omitempty"`

	// cvss version
	// Required: true
	CvssVersion *string `json:"cvss_version"`

	// description
	Description string `json:"description,omitempty"`

	// exploitability score
	ExploitabilityScore float64 `json:"exploitability_score,omitempty"`

	// exploited
	Exploited *DomainCVEExploit `json:"exploited,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// impact score
	ImpactScore float64 `json:"impact_score,omitempty"`

	// is supported
	// Required: true
	IsSupported *bool `json:"is_supported"`

	// metadata hash
	// Required: true
	MetadataHash *int64 `json:"metadata_hash"`

	// name
	// Required: true
	Name *string `json:"name"`

	// published date
	// Required: true
	// Format: date-time
	PublishedDate *strfmt.DateTime `json:"published_date"`

	// references
	// Required: true
	References []*DomainReference `json:"references"`

	// severity
	// Required: true
	Severity *string `json:"severity"`

	// source
	// Required: true
	Source *string `json:"source"`

	// source type
	// Required: true
	SourceType *string `json:"source_type"`

	// spotlight published date
	// Required: true
	// Format: date-time
	SpotlightPublishedDate *strfmt.DateTime `json:"spotlight_published_date"`

	// types
	// Required: true
	Types []string `json:"types"`

	// vector
	// Required: true
	Vector *string `json:"vector"`
}

// Validate validates this domain c v e
func (m *DomainCVE) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCisaKevInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentPackages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCpsRating(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCvssV2Score(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCvssV3Score(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCvssVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExploited(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsSupported(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadataHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpotlightPublishedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVector(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainCVE) validateActors(formats strfmt.Registry) error {

	if err := validate.Required("actors", "body", m.Actors); err != nil {
		return err
	}

	return nil
}

func (m *DomainCVE) validateBaseScore(formats strfmt.Registry) error {

	if err := validate.Required("base_score", "body", m.BaseScore); err != nil {
		return err
	}

	return nil
}

func (m *DomainCVE) validateCisaKevInfo(formats strfmt.Registry) error {

	if err := validate.Required("cisa_kev_info", "body", m.CisaKevInfo); err != nil {
		return err
	}

	if m.CisaKevInfo != nil {
		if err := m.CisaKevInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cisa_kev_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cisa_kev_info")
			}
			return err
		}
	}

	return nil
}

func (m *DomainCVE) validateContentPackages(formats strfmt.Registry) error {
	if swag.IsZero(m.ContentPackages) { // not required
		return nil
	}

	for i := 0; i < len(m.ContentPackages); i++ {
		if swag.IsZero(m.ContentPackages[i]) { // not required
			continue
		}

		if m.ContentPackages[i] != nil {
			if err := m.ContentPackages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("content_packages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("content_packages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainCVE) validateCpsRating(formats strfmt.Registry) error {

	if err := validate.Required("cps_rating", "body", m.CpsRating); err != nil {
		return err
	}

	if m.CpsRating != nil {
		if err := m.CpsRating.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cps_rating")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cps_rating")
			}
			return err
		}
	}

	return nil
}

func (m *DomainCVE) validateCvssV2Score(formats strfmt.Registry) error {
	if swag.IsZero(m.CvssV2Score) { // not required
		return nil
	}

	if m.CvssV2Score != nil {
		if err := m.CvssV2Score.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cvss_v2_score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cvss_v2_score")
			}
			return err
		}
	}

	return nil
}

func (m *DomainCVE) validateCvssV3Score(formats strfmt.Registry) error {
	if swag.IsZero(m.CvssV3Score) { // not required
		return nil
	}

	if m.CvssV3Score != nil {
		if err := m.CvssV3Score.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cvss_v3_score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cvss_v3_score")
			}
			return err
		}
	}

	return nil
}

func (m *DomainCVE) validateCvssVersion(formats strfmt.Registry) error {

	if err := validate.Required("cvss_version", "body", m.CvssVersion); err != nil {
		return err
	}

	return nil
}

func (m *DomainCVE) validateExploited(formats strfmt.Registry) error {
	if swag.IsZero(m.Exploited) { // not required
		return nil
	}

	if m.Exploited != nil {
		if err := m.Exploited.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exploited")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exploited")
			}
			return err
		}
	}

	return nil
}

func (m *DomainCVE) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DomainCVE) validateIsSupported(formats strfmt.Registry) error {

	if err := validate.Required("is_supported", "body", m.IsSupported); err != nil {
		return err
	}

	return nil
}

func (m *DomainCVE) validateMetadataHash(formats strfmt.Registry) error {

	if err := validate.Required("metadata_hash", "body", m.MetadataHash); err != nil {
		return err
	}

	return nil
}

func (m *DomainCVE) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DomainCVE) validatePublishedDate(formats strfmt.Registry) error {

	if err := validate.Required("published_date", "body", m.PublishedDate); err != nil {
		return err
	}

	if err := validate.FormatOf("published_date", "body", "date-time", m.PublishedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainCVE) validateReferences(formats strfmt.Registry) error {

	if err := validate.Required("references", "body", m.References); err != nil {
		return err
	}

	for i := 0; i < len(m.References); i++ {
		if swag.IsZero(m.References[i]) { // not required
			continue
		}

		if m.References[i] != nil {
			if err := m.References[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("references" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("references" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainCVE) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *DomainCVE) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

func (m *DomainCVE) validateSourceType(formats strfmt.Registry) error {

	if err := validate.Required("source_type", "body", m.SourceType); err != nil {
		return err
	}

	return nil
}

func (m *DomainCVE) validateSpotlightPublishedDate(formats strfmt.Registry) error {

	if err := validate.Required("spotlight_published_date", "body", m.SpotlightPublishedDate); err != nil {
		return err
	}

	if err := validate.FormatOf("spotlight_published_date", "body", "date-time", m.SpotlightPublishedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainCVE) validateTypes(formats strfmt.Registry) error {

	if err := validate.Required("types", "body", m.Types); err != nil {
		return err
	}

	return nil
}

func (m *DomainCVE) validateVector(formats strfmt.Registry) error {

	if err := validate.Required("vector", "body", m.Vector); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this domain c v e based on the context it is used
func (m *DomainCVE) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCisaKevInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentPackages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCpsRating(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCvssV2Score(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCvssV3Score(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExploited(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReferences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainCVE) contextValidateCisaKevInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CisaKevInfo != nil {

		if err := m.CisaKevInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cisa_kev_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cisa_kev_info")
			}
			return err
		}
	}

	return nil
}

func (m *DomainCVE) contextValidateContentPackages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ContentPackages); i++ {

		if m.ContentPackages[i] != nil {

			if swag.IsZero(m.ContentPackages[i]) { // not required
				return nil
			}

			if err := m.ContentPackages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("content_packages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("content_packages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainCVE) contextValidateCpsRating(ctx context.Context, formats strfmt.Registry) error {

	if m.CpsRating != nil {

		if err := m.CpsRating.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cps_rating")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cps_rating")
			}
			return err
		}
	}

	return nil
}

func (m *DomainCVE) contextValidateCvssV2Score(ctx context.Context, formats strfmt.Registry) error {

	if m.CvssV2Score != nil {

		if swag.IsZero(m.CvssV2Score) { // not required
			return nil
		}

		if err := m.CvssV2Score.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cvss_v2_score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cvss_v2_score")
			}
			return err
		}
	}

	return nil
}

func (m *DomainCVE) contextValidateCvssV3Score(ctx context.Context, formats strfmt.Registry) error {

	if m.CvssV3Score != nil {

		if swag.IsZero(m.CvssV3Score) { // not required
			return nil
		}

		if err := m.CvssV3Score.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cvss_v3_score")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cvss_v3_score")
			}
			return err
		}
	}

	return nil
}

func (m *DomainCVE) contextValidateExploited(ctx context.Context, formats strfmt.Registry) error {

	if m.Exploited != nil {

		if swag.IsZero(m.Exploited) { // not required
			return nil
		}

		if err := m.Exploited.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exploited")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exploited")
			}
			return err
		}
	}

	return nil
}

func (m *DomainCVE) contextValidateReferences(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.References); i++ {

		if m.References[i] != nil {

			if swag.IsZero(m.References[i]) { // not required
				return nil
			}

			if err := m.References[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("references" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("references" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainCVE) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainCVE) UnmarshalBinary(b []byte) error {
	var res DomainCVE
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
