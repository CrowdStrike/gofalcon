// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsPatchPolicyRequest models patch policy request
//
// swagger:model models.PatchPolicyRequest
type ModelsPatchPolicyRequest struct {

	// description
	// Required: true
	Description *string `json:"description"`

	// is enabled
	// Required: true
	IsEnabled *bool `json:"is_enabled"`

	// name
	// Required: true
	Name *string `json:"name"`

	// policy data
	PolicyData *ModelsRequestAPIPolicyData `json:"policy_data,omitempty"`
}

// Validate validates this models patch policy request
func (m *ModelsPatchPolicyRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsPatchPolicyRequest) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ModelsPatchPolicyRequest) validateIsEnabled(formats strfmt.Registry) error {

	if err := validate.Required("is_enabled", "body", m.IsEnabled); err != nil {
		return err
	}

	return nil
}

func (m *ModelsPatchPolicyRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ModelsPatchPolicyRequest) validatePolicyData(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyData) { // not required
		return nil
	}

	if m.PolicyData != nil {
		if err := m.PolicyData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this models patch policy request based on the context it is used
func (m *ModelsPatchPolicyRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePolicyData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsPatchPolicyRequest) contextValidatePolicyData(ctx context.Context, formats strfmt.Registry) error {

	if m.PolicyData != nil {

		if swag.IsZero(m.PolicyData) { // not required
			return nil
		}

		if err := m.PolicyData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsPatchPolicyRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsPatchPolicyRequest) UnmarshalBinary(b []byte) error {
	var res ModelsPatchPolicyRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
