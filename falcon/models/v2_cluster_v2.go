// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V2ClusterV2 v2 cluster v2
//
// swagger:model v2.ClusterV2
type V2ClusterV2 struct {

	// access
	Access string `json:"access,omitempty"`

	// agent coverage
	AgentCoverage *V2AgentCoverage `json:"agent_coverage,omitempty"`

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// cloud provider info
	CloudProviderInfo *V2CloudProviderInfo `json:"cloud_provider_info,omitempty"`

	// cloud resource id
	CloudResourceID string `json:"cloud_resource_id,omitempty"`

	// cluster id
	ClusterID string `json:"cluster_id,omitempty"`

	// cluster name
	ClusterName string `json:"cluster_name,omitempty"`

	// cluster status
	ClusterStatus string `json:"cluster_status,omitempty"`

	// kubernetes version
	KubernetesVersion string `json:"kubernetes_version,omitempty"`

	// labels
	Labels map[string]string `json:"labels,omitempty"`

	// management status
	ManagementStatus string `json:"management_status,omitempty"`

	// resource counts
	ResourceCounts map[string]int64 `json:"resource_counts,omitempty"`

	// security group
	SecurityGroup string `json:"security_group,omitempty"`

	// tags
	Tags map[string]string `json:"tags,omitempty"`

	// timestamps
	// Required: true
	Timestamps *V2TimestampFields `json:"timestamps"`

	// virtual network
	VirtualNetwork string `json:"virtual_network,omitempty"`
}

// Validate validates this v2 cluster v2
func (m *V2ClusterV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentCoverage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudProviderInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2ClusterV2) validateAgentCoverage(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentCoverage) { // not required
		return nil
	}

	if m.AgentCoverage != nil {
		if err := m.AgentCoverage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent_coverage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agent_coverage")
			}
			return err
		}
	}

	return nil
}

func (m *V2ClusterV2) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *V2ClusterV2) validateCloudProviderInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudProviderInfo) { // not required
		return nil
	}

	if m.CloudProviderInfo != nil {
		if err := m.CloudProviderInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud_provider_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloud_provider_info")
			}
			return err
		}
	}

	return nil
}

func (m *V2ClusterV2) validateTimestamps(formats strfmt.Registry) error {

	if err := validate.Required("timestamps", "body", m.Timestamps); err != nil {
		return err
	}

	if m.Timestamps != nil {
		if err := m.Timestamps.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timestamps")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timestamps")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v2 cluster v2 based on the context it is used
func (m *V2ClusterV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgentCoverage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudProviderInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimestamps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2ClusterV2) contextValidateAgentCoverage(ctx context.Context, formats strfmt.Registry) error {

	if m.AgentCoverage != nil {

		if swag.IsZero(m.AgentCoverage) { // not required
			return nil
		}

		if err := m.AgentCoverage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent_coverage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agent_coverage")
			}
			return err
		}
	}

	return nil
}

func (m *V2ClusterV2) contextValidateCloudProviderInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudProviderInfo != nil {

		if swag.IsZero(m.CloudProviderInfo) { // not required
			return nil
		}

		if err := m.CloudProviderInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud_provider_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloud_provider_info")
			}
			return err
		}
	}

	return nil
}

func (m *V2ClusterV2) contextValidateTimestamps(ctx context.Context, formats strfmt.Registry) error {

	if m.Timestamps != nil {

		if err := m.Timestamps.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timestamps")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timestamps")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2ClusterV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2ClusterV2) UnmarshalBinary(b []byte) error {
	var res V2ClusterV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
