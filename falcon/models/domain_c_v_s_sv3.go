// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainCVSSv3 domain c v s sv3
//
// swagger:model domain.CVSSv3
type DomainCVSSv3 struct {

	// attack complexity
	AttackComplexity string `json:"attack_complexity,omitempty"`

	// attack vector
	AttackVector string `json:"attack_vector,omitempty"`

	// availability impact
	AvailabilityImpact string `json:"availability_impact,omitempty"`

	// base score
	// Required: true
	BaseScore *float64 `json:"base_score"`

	// confidentiality impact
	ConfidentialityImpact string `json:"confidentiality_impact,omitempty"`

	// exploitability score
	ExploitabilityScore float64 `json:"exploitability_score,omitempty"`

	// impact score
	ImpactScore float64 `json:"impact_score,omitempty"`

	// integrity impact
	IntegrityImpact string `json:"integrity_impact,omitempty"`

	// privileges required
	PrivilegesRequired string `json:"privileges_required,omitempty"`

	// scope
	Scope string `json:"scope,omitempty"`

	// severity
	Severity string `json:"severity,omitempty"`

	// user interaction
	UserInteraction string `json:"user_interaction,omitempty"`

	// vector
	// Required: true
	Vector *string `json:"vector"`
}

// Validate validates this domain c v s sv3
func (m *DomainCVSSv3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVector(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainCVSSv3) validateBaseScore(formats strfmt.Registry) error {

	if err := validate.Required("base_score", "body", m.BaseScore); err != nil {
		return err
	}

	return nil
}

func (m *DomainCVSSv3) validateVector(formats strfmt.Registry) error {

	if err := validate.Required("vector", "body", m.Vector); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain c v s sv3 based on context it is used
func (m *DomainCVSSv3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainCVSSv3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainCVSSv3) UnmarshalBinary(b []byte) error {
	var res DomainCVSSv3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
