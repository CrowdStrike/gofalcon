// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PluginsonpremapiHostConfig pluginsonpremapi host config
//
// swagger:model pluginsonpremapi.HostConfig
type PluginsonpremapiHostConfig struct {

	// Device ID
	// Required: true
	DeviceID *string `json:"device_id"`

	// The start date of the installation
	// Format: date-time
	InstallStartDate strfmt.DateTime `json:"install_start_date,omitempty"`

	// The date of the installation
	// Format: date-time
	InstalledDate strfmt.DateTime `json:"installed_date,omitempty"`

	// Message regarding the status of the host
	Message string `json:"message,omitempty"`

	// Status of the configuration on the device
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this pluginsonpremapi host config
func (m *PluginsonpremapiHostConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstallStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstalledDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PluginsonpremapiHostConfig) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("device_id", "body", m.DeviceID); err != nil {
		return err
	}

	return nil
}

func (m *PluginsonpremapiHostConfig) validateInstallStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.InstallStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("install_start_date", "body", "date-time", m.InstallStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PluginsonpremapiHostConfig) validateInstalledDate(formats strfmt.Registry) error {
	if swag.IsZero(m.InstalledDate) { // not required
		return nil
	}

	if err := validate.FormatOf("installed_date", "body", "date-time", m.InstalledDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PluginsonpremapiHostConfig) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this pluginsonpremapi host config based on context it is used
func (m *PluginsonpremapiHostConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PluginsonpremapiHostConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PluginsonpremapiHostConfig) UnmarshalBinary(b []byte) error {
	var res PluginsonpremapiHostConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
