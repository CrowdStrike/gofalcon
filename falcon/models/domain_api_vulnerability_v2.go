// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainAPIVulnerabilityV2 domain API vulnerability v2
//
// swagger:model domain.APIVulnerabilityV2
type DomainAPIVulnerabilityV2 struct {

	// aid
	// Required: true
	Aid *string `json:"aid"`

	// app
	// Required: true
	App *DomainAPIVulnerabilityAppV2 `json:"app"`

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// closed timestamp
	ClosedTimestamp string `json:"closed_timestamp,omitempty"`

	// created timestamp
	// Required: true
	CreatedTimestamp *string `json:"created_timestamp"`

	// cve
	// Required: true
	Cve *DomainAPIVulnerabilityCVEV2 `json:"cve"`

	// host info
	// Required: true
	HostInfo *DomainAPIVulnerabilityHostInfoV2 `json:"host_info"`

	// id
	// Required: true
	ID *string `json:"id"`

	// remediation
	// Required: true
	Remediation *DomainAPIRemediationIDs `json:"remediation"`

	// status
	// Required: true
	Status *string `json:"status"`

	// updated timestamp
	// Required: true
	UpdatedTimestamp *string `json:"updated_timestamp"`
}

// Validate validates this domain API vulnerability v2
func (m *DomainAPIVulnerabilityV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCve(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAPIVulnerabilityV2) validateAid(formats strfmt.Registry) error {

	if err := validate.Required("aid", "body", m.Aid); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIVulnerabilityV2) validateApp(formats strfmt.Registry) error {

	if err := validate.Required("app", "body", m.App); err != nil {
		return err
	}

	if m.App != nil {
		if err := m.App.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app")
			}
			return err
		}
	}

	return nil
}

func (m *DomainAPIVulnerabilityV2) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIVulnerabilityV2) validateCreatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("created_timestamp", "body", m.CreatedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIVulnerabilityV2) validateCve(formats strfmt.Registry) error {

	if err := validate.Required("cve", "body", m.Cve); err != nil {
		return err
	}

	if m.Cve != nil {
		if err := m.Cve.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cve")
			}
			return err
		}
	}

	return nil
}

func (m *DomainAPIVulnerabilityV2) validateHostInfo(formats strfmt.Registry) error {

	if err := validate.Required("host_info", "body", m.HostInfo); err != nil {
		return err
	}

	if m.HostInfo != nil {
		if err := m.HostInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host_info")
			}
			return err
		}
	}

	return nil
}

func (m *DomainAPIVulnerabilityV2) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIVulnerabilityV2) validateRemediation(formats strfmt.Registry) error {

	if err := validate.Required("remediation", "body", m.Remediation); err != nil {
		return err
	}

	if m.Remediation != nil {
		if err := m.Remediation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remediation")
			}
			return err
		}
	}

	return nil
}

func (m *DomainAPIVulnerabilityV2) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIVulnerabilityV2) validateUpdatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("updated_timestamp", "body", m.UpdatedTimestamp); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainAPIVulnerabilityV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainAPIVulnerabilityV2) UnmarshalBinary(b []byte) error {
	var res DomainAPIVulnerabilityV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
