// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DomainVulnerabilityCvssV2 domain vulnerability cvss v2
//
// swagger:model domain.VulnerabilityCvssV2
type DomainVulnerabilityCvssV2 struct {

	// Access complexity of the vulnerability, one of: Low, Medium, High
	AccessComplexity string `json:"access_complexity,omitempty"`

	// Access vector describing how the vulnerability is exploited, one of: Local, Network, AdjacentNetwork
	AccessVector string `json:"access_vector,omitempty"`

	// Represents the number of times an attacker must authenticate to a target in order to exploit a vulnerability, one of: None, Single, Multiple
	Authentication string `json:"authentication,omitempty"`

	// availability impact
	AvailabilityImpact string `json:"availability_impact,omitempty"`

	// confidentiality impact
	ConfidentialityImpact string `json:"confidentiality_impact,omitempty"`

	// Represents the impact to integrity of a successfully exploited vulnerability, one of: None, Partial, Complete
	IntegrityImpact string `json:"integrity_impact,omitempty"`

	// Score of the vulnerability - which is between 0 and 10, the higher is the score - the more riskier the vulnerability is
	Score float64 `json:"score,omitempty"`

	// Severity of the vulnerability, can be empty or one of: LOW, MEDIUM, HIGH
	Severity string `json:"severity,omitempty"`
}

// Validate validates this domain vulnerability cvss v2
func (m *DomainVulnerabilityCvssV2) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this domain vulnerability cvss v2 based on context it is used
func (m *DomainVulnerabilityCvssV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainVulnerabilityCvssV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainVulnerabilityCvssV2) UnmarshalBinary(b []byte) error {
	var res DomainVulnerabilityCvssV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
