// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItautomationPolicy itautomation policy
//
// swagger:model itautomation.Policy
type ItautomationPolicy struct {

	// Configuration settings for the policy
	Config *ItautomationPolicyConfig `json:"config,omitempty"`

	// Timestamp when the policy was created. Example: 2025-01-23T18:49:26.785778Z
	// Required: true
	CreatedAt *string `json:"created_at"`

	// User who created the policy. Example: john.smith@crowdstrike.com
	// Required: true
	CreatedBy *string `json:"created_by"`

	// Description of the policy. Example: windows policy check
	// Required: true
	Description *string `json:"description"`

	// List of host groups associated with this policy.Example: 'g53b95555ef54ea682419ce990d267cc'
	HostGroups []string `json:"host_groups"`

	// ID of the policy. Example: f64b95555ef54ea682619ce880d267cc
	// Required: true
	ID *string `json:"id"`

	// Whether the policy is enabled or disabled
	IsEnabled bool `json:"is_enabled,omitempty"`

	// Timestamp when the policy was last modified. Example: 2025-01-23T18:49:26.785778Z
	// Required: true
	ModifiedAt *string `json:"modified_at"`

	// User who last modified the policy. Example: john.smith@crowdstrike.com
	// Required: true
	ModifiedBy *string `json:"modified_by"`

	// The name of the policy. Example: platform_policy
	// Required: true
	Name *string `json:"name"`

	// Priority level of the policy
	Precedence int32 `json:"precedence,omitempty"`

	// The platform for the policy
	// Required: true
	// Enum: ["Windows","Linux","Mac"]
	Target *string `json:"target"`
}

// Validate validates this itautomation policy
func (m *ItautomationPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItautomationPolicy) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("config")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("config")
			}

			return err
		}
	}

	return nil
}

func (m *ItautomationPolicy) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationPolicy) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("created_by", "body", m.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationPolicy) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationPolicy) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationPolicy) validateModifiedAt(formats strfmt.Registry) error {

	if err := validate.Required("modified_at", "body", m.ModifiedAt); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationPolicy) validateModifiedBy(formats strfmt.Registry) error {

	if err := validate.Required("modified_by", "body", m.ModifiedBy); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationPolicy) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var itautomationPolicyTypeTargetPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Windows","Linux","Mac"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itautomationPolicyTypeTargetPropEnum = append(itautomationPolicyTypeTargetPropEnum, v)
	}
}

const (

	// ItautomationPolicyTargetWindows captures enum value "Windows"
	ItautomationPolicyTargetWindows string = "Windows"

	// ItautomationPolicyTargetLinux captures enum value "Linux"
	ItautomationPolicyTargetLinux string = "Linux"

	// ItautomationPolicyTargetMac captures enum value "Mac"
	ItautomationPolicyTargetMac string = "Mac"
)

// prop value enum
func (m *ItautomationPolicy) validateTargetEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, itautomationPolicyTypeTargetPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ItautomationPolicy) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	// value enum
	if err := m.validateTargetEnum("target", "body", *m.Target); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this itautomation policy based on the context it is used
func (m *ItautomationPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItautomationPolicy) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {

		if swag.IsZero(m.Config) { // not required
			return nil
		}

		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("config")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("config")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ItautomationPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItautomationPolicy) UnmarshalBinary(b []byte) error {
	var res ItautomationPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
