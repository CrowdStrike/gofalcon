// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FalconforitapiUpdateTaskRequest falconforitapi update task request
//
// swagger:model falconforitapi.UpdateTaskRequest
type FalconforitapiUpdateTaskRequest struct {

	// access type of the task, allowed values - Public,Shared,Private
	AccessType string `json:"access_type,omitempty"`

	// assigned user ids to the task, when access_type is Shared
	AssignedUserIds []string `json:"assigned_user_ids"`

	// description
	// Required: true
	Description *string `json:"description"`

	// is private
	// Required: true
	IsPrivate *bool `json:"is_private"`

	// name
	// Required: true
	Name *string `json:"name"`

	// os query
	OsQuery string `json:"os_query,omitempty"`

	// output parser config
	OutputParserConfig *FalconforitapiOutputParserConfig `json:"output_parser_config,omitempty"`

	// parameters
	Parameters []*FalconforitapiTaskParameter `json:"parameters"`

	// queries
	Queries *FalconforitapiScripts `json:"queries,omitempty"`

	// remediation trigger condition
	RemediationTriggerCondition []*FalconforitapiConditionGroup `json:"remediation_trigger_condition"`

	// remediations
	Remediations *FalconforitapiScripts `json:"remediations,omitempty"`

	// supported os
	// Required: true
	SupportedOs []string `json:"supported_os"`

	// target
	// Required: true
	Target *string `json:"target"`

	// task group id to which this task needs to associated with
	TaskGroupID string `json:"task_group_id,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`

	// verification condition
	VerificationCondition []*FalconforitapiConditionGroup `json:"verification_condition"`
}

// Validate validates this falconforitapi update task request
func (m *FalconforitapiUpdateTaskRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsPrivate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputParserConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediationTriggerCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerificationCondition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiUpdateTaskRequest) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiUpdateTaskRequest) validateIsPrivate(formats strfmt.Registry) error {

	if err := validate.Required("is_private", "body", m.IsPrivate); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiUpdateTaskRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiUpdateTaskRequest) validateOutputParserConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.OutputParserConfig) { // not required
		return nil
	}

	if m.OutputParserConfig != nil {
		if err := m.OutputParserConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output_parser_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output_parser_config")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiUpdateTaskRequest) validateParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconforitapiUpdateTaskRequest) validateQueries(formats strfmt.Registry) error {
	if swag.IsZero(m.Queries) { // not required
		return nil
	}

	if m.Queries != nil {
		if err := m.Queries.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queries")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queries")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiUpdateTaskRequest) validateRemediationTriggerCondition(formats strfmt.Registry) error {
	if swag.IsZero(m.RemediationTriggerCondition) { // not required
		return nil
	}

	for i := 0; i < len(m.RemediationTriggerCondition); i++ {
		if swag.IsZero(m.RemediationTriggerCondition[i]) { // not required
			continue
		}

		if m.RemediationTriggerCondition[i] != nil {
			if err := m.RemediationTriggerCondition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remediation_trigger_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remediation_trigger_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconforitapiUpdateTaskRequest) validateRemediations(formats strfmt.Registry) error {
	if swag.IsZero(m.Remediations) { // not required
		return nil
	}

	if m.Remediations != nil {
		if err := m.Remediations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remediations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remediations")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiUpdateTaskRequest) validateSupportedOs(formats strfmt.Registry) error {

	if err := validate.Required("supported_os", "body", m.SupportedOs); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiUpdateTaskRequest) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiUpdateTaskRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiUpdateTaskRequest) validateVerificationCondition(formats strfmt.Registry) error {
	if swag.IsZero(m.VerificationCondition) { // not required
		return nil
	}

	for i := 0; i < len(m.VerificationCondition); i++ {
		if swag.IsZero(m.VerificationCondition[i]) { // not required
			continue
		}

		if m.VerificationCondition[i] != nil {
			if err := m.VerificationCondition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this falconforitapi update task request based on the context it is used
func (m *FalconforitapiUpdateTaskRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOutputParserConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemediationTriggerCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemediations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVerificationCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiUpdateTaskRequest) contextValidateOutputParserConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.OutputParserConfig != nil {

		if swag.IsZero(m.OutputParserConfig) { // not required
			return nil
		}

		if err := m.OutputParserConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output_parser_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output_parser_config")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiUpdateTaskRequest) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Parameters); i++ {

		if m.Parameters[i] != nil {

			if swag.IsZero(m.Parameters[i]) { // not required
				return nil
			}

			if err := m.Parameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconforitapiUpdateTaskRequest) contextValidateQueries(ctx context.Context, formats strfmt.Registry) error {

	if m.Queries != nil {

		if swag.IsZero(m.Queries) { // not required
			return nil
		}

		if err := m.Queries.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queries")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queries")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiUpdateTaskRequest) contextValidateRemediationTriggerCondition(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RemediationTriggerCondition); i++ {

		if m.RemediationTriggerCondition[i] != nil {

			if swag.IsZero(m.RemediationTriggerCondition[i]) { // not required
				return nil
			}

			if err := m.RemediationTriggerCondition[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remediation_trigger_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remediation_trigger_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconforitapiUpdateTaskRequest) contextValidateRemediations(ctx context.Context, formats strfmt.Registry) error {

	if m.Remediations != nil {

		if swag.IsZero(m.Remediations) { // not required
			return nil
		}

		if err := m.Remediations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remediations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remediations")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiUpdateTaskRequest) contextValidateVerificationCondition(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VerificationCondition); i++ {

		if m.VerificationCondition[i] != nil {

			if swag.IsZero(m.VerificationCondition[i]) { // not required
				return nil
			}

			if err := m.VerificationCondition[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FalconforitapiUpdateTaskRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FalconforitapiUpdateTaskRequest) UnmarshalBinary(b []byte) error {
	var res FalconforitapiUpdateTaskRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
