// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainAPIAggregateGroupByClustersV2 domain API aggregate group by clusters v2
//
// swagger:model domain.APIAggregateGroupByClustersV2
type DomainAPIAggregateGroupByClustersV2 struct {

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// cloud account id
	// Required: true
	CloudAccountID *string `json:"cloud_account_id"`

	// cloud provider
	// Required: true
	CloudProvider *string `json:"cloud_provider"`

	// cloud region
	// Required: true
	CloudRegion *string `json:"cloud_region"`

	// cluster derived id
	// Required: true
	ClusterDerivedID *string `json:"cluster_derived_id"`

	// cluster id
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// cluster name
	// Required: true
	ClusterName *string `json:"cluster_name"`

	// cluster type
	// Required: true
	ClusterType *string `json:"cluster_type"`

	// failed containers count
	// Required: true
	FailedContainersCount *int32 `json:"failed_containers_count"`

	// failed images count
	// Required: true
	FailedImagesCount *int32 `json:"failed_images_count"`

	// failed nodes count
	// Required: true
	FailedNodesCount *int32 `json:"failed_nodes_count"`

	// failed rules count
	// Required: true
	FailedRulesCount *int32 `json:"failed_rules_count"`

	// passed containers count
	// Required: true
	PassedContainersCount *int32 `json:"passed_containers_count"`

	// passed images count
	// Required: true
	PassedImagesCount *int32 `json:"passed_images_count"`

	// passed nodes count
	// Required: true
	PassedNodesCount *int32 `json:"passed_nodes_count"`

	// passed rules count
	// Required: true
	PassedRulesCount *int32 `json:"passed_rules_count"`

	// percentage of passed assets
	// Required: true
	PercentageOfPassedAssets *float64 `json:"percentage_of_passed_assets"`

	// percentage of passed rules
	// Required: true
	PercentageOfPassedRules *float64 `json:"percentage_of_passed_rules"`

	// total containers count
	// Required: true
	TotalContainersCount *int32 `json:"total_containers_count"`

	// total images count
	// Required: true
	TotalImagesCount *int32 `json:"total_images_count"`

	// total nodes count
	// Required: true
	TotalNodesCount *int32 `json:"total_nodes_count"`
}

// Validate validates this domain API aggregate group by clusters v2
func (m *DomainAPIAggregateGroupByClustersV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterDerivedID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedContainersCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedImagesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedNodesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedRulesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassedContainersCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassedImagesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassedNodesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassedRulesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePercentageOfPassedAssets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePercentageOfPassedRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalContainersCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalImagesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalNodesCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAPIAggregateGroupByClustersV2) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateGroupByClustersV2) validateCloudAccountID(formats strfmt.Registry) error {

	if err := validate.Required("cloud_account_id", "body", m.CloudAccountID); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateGroupByClustersV2) validateCloudProvider(formats strfmt.Registry) error {

	if err := validate.Required("cloud_provider", "body", m.CloudProvider); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateGroupByClustersV2) validateCloudRegion(formats strfmt.Registry) error {

	if err := validate.Required("cloud_region", "body", m.CloudRegion); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateGroupByClustersV2) validateClusterDerivedID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_derived_id", "body", m.ClusterDerivedID); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateGroupByClustersV2) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateGroupByClustersV2) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("cluster_name", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateGroupByClustersV2) validateClusterType(formats strfmt.Registry) error {

	if err := validate.Required("cluster_type", "body", m.ClusterType); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateGroupByClustersV2) validateFailedContainersCount(formats strfmt.Registry) error {

	if err := validate.Required("failed_containers_count", "body", m.FailedContainersCount); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateGroupByClustersV2) validateFailedImagesCount(formats strfmt.Registry) error {

	if err := validate.Required("failed_images_count", "body", m.FailedImagesCount); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateGroupByClustersV2) validateFailedNodesCount(formats strfmt.Registry) error {

	if err := validate.Required("failed_nodes_count", "body", m.FailedNodesCount); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateGroupByClustersV2) validateFailedRulesCount(formats strfmt.Registry) error {

	if err := validate.Required("failed_rules_count", "body", m.FailedRulesCount); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateGroupByClustersV2) validatePassedContainersCount(formats strfmt.Registry) error {

	if err := validate.Required("passed_containers_count", "body", m.PassedContainersCount); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateGroupByClustersV2) validatePassedImagesCount(formats strfmt.Registry) error {

	if err := validate.Required("passed_images_count", "body", m.PassedImagesCount); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateGroupByClustersV2) validatePassedNodesCount(formats strfmt.Registry) error {

	if err := validate.Required("passed_nodes_count", "body", m.PassedNodesCount); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateGroupByClustersV2) validatePassedRulesCount(formats strfmt.Registry) error {

	if err := validate.Required("passed_rules_count", "body", m.PassedRulesCount); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateGroupByClustersV2) validatePercentageOfPassedAssets(formats strfmt.Registry) error {

	if err := validate.Required("percentage_of_passed_assets", "body", m.PercentageOfPassedAssets); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateGroupByClustersV2) validatePercentageOfPassedRules(formats strfmt.Registry) error {

	if err := validate.Required("percentage_of_passed_rules", "body", m.PercentageOfPassedRules); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateGroupByClustersV2) validateTotalContainersCount(formats strfmt.Registry) error {

	if err := validate.Required("total_containers_count", "body", m.TotalContainersCount); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateGroupByClustersV2) validateTotalImagesCount(formats strfmt.Registry) error {

	if err := validate.Required("total_images_count", "body", m.TotalImagesCount); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateGroupByClustersV2) validateTotalNodesCount(formats strfmt.Registry) error {

	if err := validate.Required("total_nodes_count", "body", m.TotalNodesCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain API aggregate group by clusters v2 based on context it is used
func (m *DomainAPIAggregateGroupByClustersV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainAPIAggregateGroupByClustersV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainAPIAggregateGroupByClustersV2) UnmarshalBinary(b []byte) error {
	var res DomainAPIAggregateGroupByClustersV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
