// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsAPIVulnerabilityInfo models API vulnerability info
//
// swagger:model models.APIVulnerabilityInfo
type ModelsAPIVulnerabilityInfo struct {

	// cps current rating
	// Required: true
	CpsCurrentRating *string `json:"cps_current_rating"`

	// cve id
	// Required: true
	CveID *string `json:"cve_id"`

	// cvss score
	// Required: true
	CvssScore *string `json:"cvss_score"`

	// description
	// Required: true
	Description *string `json:"description"`

	// exploit found
	// Required: true
	ExploitFound *string `json:"exploit_found"`

	// exploited status string
	// Required: true
	ExploitedStatusString *string `json:"exploited_status_string"`

	// images impacted
	// Required: true
	ImagesImpacted *int64 `json:"images_impacted"`

	// packages
	// Required: true
	Packages []*ModelsPackageNameVersionType `json:"packages"`

	// published date
	// Required: true
	PublishedDate *string `json:"published_date"`

	// severity
	// Required: true
	Severity *string `json:"severity"`

	// threat actors
	// Required: true
	ThreatActors []string `json:"threat_actors"`
}

// Validate validates this models API vulnerability info
func (m *ModelsAPIVulnerabilityInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCpsCurrentRating(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCveID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCvssScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExploitFound(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExploitedStatusString(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImagesImpacted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThreatActors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIVulnerabilityInfo) validateCpsCurrentRating(formats strfmt.Registry) error {

	if err := validate.Required("cps_current_rating", "body", m.CpsCurrentRating); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityInfo) validateCveID(formats strfmt.Registry) error {

	if err := validate.Required("cve_id", "body", m.CveID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityInfo) validateCvssScore(formats strfmt.Registry) error {

	if err := validate.Required("cvss_score", "body", m.CvssScore); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityInfo) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityInfo) validateExploitFound(formats strfmt.Registry) error {

	if err := validate.Required("exploit_found", "body", m.ExploitFound); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityInfo) validateExploitedStatusString(formats strfmt.Registry) error {

	if err := validate.Required("exploited_status_string", "body", m.ExploitedStatusString); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityInfo) validateImagesImpacted(formats strfmt.Registry) error {

	if err := validate.Required("images_impacted", "body", m.ImagesImpacted); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityInfo) validatePackages(formats strfmt.Registry) error {

	if err := validate.Required("packages", "body", m.Packages); err != nil {
		return err
	}

	for i := 0; i < len(m.Packages); i++ {
		if swag.IsZero(m.Packages[i]) { // not required
			continue
		}

		if m.Packages[i] != nil {
			if err := m.Packages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("packages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsAPIVulnerabilityInfo) validatePublishedDate(formats strfmt.Registry) error {

	if err := validate.Required("published_date", "body", m.PublishedDate); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityInfo) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityInfo) validateThreatActors(formats strfmt.Registry) error {

	if err := validate.Required("threat_actors", "body", m.ThreatActors); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this models API vulnerability info based on the context it is used
func (m *ModelsAPIVulnerabilityInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePackages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIVulnerabilityInfo) contextValidatePackages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Packages); i++ {

		if m.Packages[i] != nil {

			if swag.IsZero(m.Packages[i]) { // not required
				return nil
			}

			if err := m.Packages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("packages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsAPIVulnerabilityInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsAPIVulnerabilityInfo) UnmarshalBinary(b []byte) error {
	var res ModelsAPIVulnerabilityInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
