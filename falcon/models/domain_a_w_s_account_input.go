// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainAWSAccountInput domain a w s account input
//
// swagger:model domain.AWSAccountInput
type DomainAWSAccountInput struct {

	// account number
	// Required: true
	AccountNumber *string `json:"account_number"`

	// batch regions
	// Required: true
	BatchRegions []*DomainAWSBatchClusterRegion `json:"batch_regions"`

	// iam external id
	// Required: true
	IamExternalID *string `json:"iam_external_id"`

	// iam role arn
	// Required: true
	IamRoleArn *string `json:"iam_role_arn"`

	// kms alias
	// Required: true
	KmsAlias *string `json:"kms_alias"`

	// processing account
	// Required: true
	ProcessingAccount *string `json:"processing_account"`
}

// Validate validates this domain a w s account input
func (m *DomainAWSAccountInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBatchRegions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIamExternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIamRoleArn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKmsAlias(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessingAccount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAWSAccountInput) validateAccountNumber(formats strfmt.Registry) error {

	if err := validate.Required("account_number", "body", m.AccountNumber); err != nil {
		return err
	}

	return nil
}

func (m *DomainAWSAccountInput) validateBatchRegions(formats strfmt.Registry) error {

	if err := validate.Required("batch_regions", "body", m.BatchRegions); err != nil {
		return err
	}

	for i := 0; i < len(m.BatchRegions); i++ {
		if swag.IsZero(m.BatchRegions[i]) { // not required
			continue
		}

		if m.BatchRegions[i] != nil {
			if err := m.BatchRegions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("batch_regions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("batch_regions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainAWSAccountInput) validateIamExternalID(formats strfmt.Registry) error {

	if err := validate.Required("iam_external_id", "body", m.IamExternalID); err != nil {
		return err
	}

	return nil
}

func (m *DomainAWSAccountInput) validateIamRoleArn(formats strfmt.Registry) error {

	if err := validate.Required("iam_role_arn", "body", m.IamRoleArn); err != nil {
		return err
	}

	return nil
}

func (m *DomainAWSAccountInput) validateKmsAlias(formats strfmt.Registry) error {

	if err := validate.Required("kms_alias", "body", m.KmsAlias); err != nil {
		return err
	}

	return nil
}

func (m *DomainAWSAccountInput) validateProcessingAccount(formats strfmt.Registry) error {

	if err := validate.Required("processing_account", "body", m.ProcessingAccount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this domain a w s account input based on the context it is used
func (m *DomainAWSAccountInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBatchRegions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAWSAccountInput) contextValidateBatchRegions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BatchRegions); i++ {

		if m.BatchRegions[i] != nil {

			if swag.IsZero(m.BatchRegions[i]) { // not required
				return nil
			}

			if err := m.BatchRegions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("batch_regions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("batch_regions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainAWSAccountInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainAWSAccountInput) UnmarshalBinary(b []byte) error {
	var res DomainAWSAccountInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
