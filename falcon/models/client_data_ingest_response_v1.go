// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClientDataIngestResponseV1 client data ingest response v1
//
// swagger:model client.DataIngestResponseV1
type ClientDataIngestResponseV1 struct {

	// repo
	// Required: true
	Repo *ClientRepository `json:"repo"`

	// rows written
	// Required: true
	RowsWritten *int32 `json:"rows_written"`
}

// Validate validates this client data ingest response v1
func (m *ClientDataIngestResponseV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRepo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRowsWritten(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClientDataIngestResponseV1) validateRepo(formats strfmt.Registry) error {

	if err := validate.Required("repo", "body", m.Repo); err != nil {
		return err
	}

	if m.Repo != nil {
		if err := m.Repo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repo")
			}
			return err
		}
	}

	return nil
}

func (m *ClientDataIngestResponseV1) validateRowsWritten(formats strfmt.Registry) error {

	if err := validate.Required("rows_written", "body", m.RowsWritten); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this client data ingest response v1 based on the context it is used
func (m *ClientDataIngestResponseV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRepo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClientDataIngestResponseV1) contextValidateRepo(ctx context.Context, formats strfmt.Registry) error {

	if m.Repo != nil {

		if err := m.Repo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClientDataIngestResponseV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClientDataIngestResponseV1) UnmarshalBinary(b []byte) error {
	var res ClientDataIngestResponseV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
