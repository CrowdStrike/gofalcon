// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItautomationUpdateTaskGroupRequest itautomation update task group request
//
// swagger:model itautomation.UpdateTaskGroupRequest
type ItautomationUpdateTaskGroupRequest struct {

	// Access type of the group
	// Enum: [Public Shared]
	AccessType string `json:"access_type,omitempty"`

	// User group IDs to add to the group, when access_type is Shared. Use GET /it-automation/queries/it-user-groups/v1 to fetch user group IDs
	AddAssignedUserGroupIds []string `json:"add_assigned_user_group_ids"`

	// User IDs to add to the group, when access_type is Shared. Use GET /user-management/queries/users/v1 to fetch user IDs
	AddAssignedUserIds []string `json:"add_assigned_user_ids"`

	// IDs of existing tasks to add to task group. Get task ids via GET /it-automation/queries/task-groups/v1
	AddTaskIds []string `json:"add_task_ids"`

	// Description of the task group
	Description string `json:"description,omitempty"`

	// Name of the task group
	Name string `json:"name,omitempty"`

	// User group IDs to remove from the group, when access_type is Shared. Use GET /it-automation/queries/it-user-groups/v1 to fetch user group IDs
	RemoveAssignedUserGroupIds []string `json:"remove_assigned_user_group_ids"`

	// User IDs to remove from the group, when access_type is Shared. Use GET /user-management/queries/users/v1 to fetch user IDs
	RemoveAssignedUserIds []string `json:"remove_assigned_user_ids"`

	// IDs of existing tasks to remove from task group. Get task ids via GET /it-automation/queries/task-groups/v1
	RemoveTaskIds []string `json:"remove_task_ids"`
}

// Validate validates this itautomation update task group request
func (m *ItautomationUpdateTaskGroupRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var itautomationUpdateTaskGroupRequestTypeAccessTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Public","Shared"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itautomationUpdateTaskGroupRequestTypeAccessTypePropEnum = append(itautomationUpdateTaskGroupRequestTypeAccessTypePropEnum, v)
	}
}

const (

	// ItautomationUpdateTaskGroupRequestAccessTypePublic captures enum value "Public"
	ItautomationUpdateTaskGroupRequestAccessTypePublic string = "Public"

	// ItautomationUpdateTaskGroupRequestAccessTypeShared captures enum value "Shared"
	ItautomationUpdateTaskGroupRequestAccessTypeShared string = "Shared"
)

// prop value enum
func (m *ItautomationUpdateTaskGroupRequest) validateAccessTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, itautomationUpdateTaskGroupRequestTypeAccessTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ItautomationUpdateTaskGroupRequest) validateAccessType(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccessTypeEnum("access_type", "body", m.AccessType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this itautomation update task group request based on context it is used
func (m *ItautomationUpdateTaskGroupRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ItautomationUpdateTaskGroupRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItautomationUpdateTaskGroupRequest) UnmarshalBinary(b []byte) error {
	var res ItautomationUpdateTaskGroupRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
