// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsScanReportType models scan report type
//
// swagger:model models.ScanReportType
type ModelsScanReportType struct {

	// application packages
	ApplicationPackages []*ModelsApplicationPackageInfoType `json:"ApplicationPackages"`

	// detection engine info
	// Required: true
	DetectionEngineInfo *ModelsDetectionEngineInfoType `json:"DetectionEngineInfo"`

	// detections
	// Required: true
	Detections []*ModelsDetectionInfoType `json:"Detections"`

	// vulnerabilities
	// Required: true
	Vulnerabilities []*ModelsPackageVulnerabilityType `json:"Vulnerabilities"`

	// vulnerabilities truncated
	VulnerabilitiesTruncated *ModelsVulnerabilitiesType `json:"VulnerabilitiesTruncated,omitempty"`

	// job metadata
	// Required: true
	JobMetadata *ModelsJobMetaData `json:"job_metadata"`

	// os info
	// Required: true
	OsInfo *ModelsOSInfoType `json:"os_info"`

	// results
	// Required: true
	Results *ModelsScanResults `json:"results"`
}

// Validate validates this models scan report type
func (m *ModelsScanReportType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationPackages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectionEngineInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVulnerabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVulnerabilitiesTruncated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsScanReportType) validateApplicationPackages(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationPackages) { // not required
		return nil
	}

	for i := 0; i < len(m.ApplicationPackages); i++ {
		if swag.IsZero(m.ApplicationPackages[i]) { // not required
			continue
		}

		if m.ApplicationPackages[i] != nil {
			if err := m.ApplicationPackages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ApplicationPackages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ApplicationPackages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsScanReportType) validateDetectionEngineInfo(formats strfmt.Registry) error {

	if err := validate.Required("DetectionEngineInfo", "body", m.DetectionEngineInfo); err != nil {
		return err
	}

	if m.DetectionEngineInfo != nil {
		if err := m.DetectionEngineInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DetectionEngineInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DetectionEngineInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsScanReportType) validateDetections(formats strfmt.Registry) error {

	if err := validate.Required("Detections", "body", m.Detections); err != nil {
		return err
	}

	for i := 0; i < len(m.Detections); i++ {
		if swag.IsZero(m.Detections[i]) { // not required
			continue
		}

		if m.Detections[i] != nil {
			if err := m.Detections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Detections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Detections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsScanReportType) validateVulnerabilities(formats strfmt.Registry) error {

	if err := validate.Required("Vulnerabilities", "body", m.Vulnerabilities); err != nil {
		return err
	}

	for i := 0; i < len(m.Vulnerabilities); i++ {
		if swag.IsZero(m.Vulnerabilities[i]) { // not required
			continue
		}

		if m.Vulnerabilities[i] != nil {
			if err := m.Vulnerabilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Vulnerabilities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Vulnerabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsScanReportType) validateVulnerabilitiesTruncated(formats strfmt.Registry) error {
	if swag.IsZero(m.VulnerabilitiesTruncated) { // not required
		return nil
	}

	if m.VulnerabilitiesTruncated != nil {
		if err := m.VulnerabilitiesTruncated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VulnerabilitiesTruncated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VulnerabilitiesTruncated")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsScanReportType) validateJobMetadata(formats strfmt.Registry) error {

	if err := validate.Required("job_metadata", "body", m.JobMetadata); err != nil {
		return err
	}

	if m.JobMetadata != nil {
		if err := m.JobMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job_metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("job_metadata")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsScanReportType) validateOsInfo(formats strfmt.Registry) error {

	if err := validate.Required("os_info", "body", m.OsInfo); err != nil {
		return err
	}

	if m.OsInfo != nil {
		if err := m.OsInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("os_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("os_info")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsScanReportType) validateResults(formats strfmt.Registry) error {

	if err := validate.Required("results", "body", m.Results); err != nil {
		return err
	}

	if m.Results != nil {
		if err := m.Results.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("results")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("results")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this models scan report type based on the context it is used
func (m *ModelsScanReportType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationPackages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDetectionEngineInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDetections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVulnerabilities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVulnerabilitiesTruncated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJobMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOsInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsScanReportType) contextValidateApplicationPackages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ApplicationPackages); i++ {

		if m.ApplicationPackages[i] != nil {

			if swag.IsZero(m.ApplicationPackages[i]) { // not required
				return nil
			}

			if err := m.ApplicationPackages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ApplicationPackages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ApplicationPackages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsScanReportType) contextValidateDetectionEngineInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DetectionEngineInfo != nil {

		if err := m.DetectionEngineInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DetectionEngineInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DetectionEngineInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsScanReportType) contextValidateDetections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Detections); i++ {

		if m.Detections[i] != nil {

			if swag.IsZero(m.Detections[i]) { // not required
				return nil
			}

			if err := m.Detections[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Detections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Detections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsScanReportType) contextValidateVulnerabilities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vulnerabilities); i++ {

		if m.Vulnerabilities[i] != nil {

			if swag.IsZero(m.Vulnerabilities[i]) { // not required
				return nil
			}

			if err := m.Vulnerabilities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Vulnerabilities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Vulnerabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsScanReportType) contextValidateVulnerabilitiesTruncated(ctx context.Context, formats strfmt.Registry) error {

	if m.VulnerabilitiesTruncated != nil {

		if swag.IsZero(m.VulnerabilitiesTruncated) { // not required
			return nil
		}

		if err := m.VulnerabilitiesTruncated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VulnerabilitiesTruncated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VulnerabilitiesTruncated")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsScanReportType) contextValidateJobMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.JobMetadata != nil {

		if err := m.JobMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job_metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("job_metadata")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsScanReportType) contextValidateOsInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.OsInfo != nil {

		if err := m.OsInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("os_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("os_info")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsScanReportType) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	if m.Results != nil {

		if err := m.Results.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("results")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("results")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsScanReportType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsScanReportType) UnmarshalBinary(b []byte) error {
	var res ModelsScanReportType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
