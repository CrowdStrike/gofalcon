// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TypesServiceNowService types service now service
//
// swagger:model types.ServiceNowService
type TypesServiceNowService struct {

	// application server
	// Required: true
	ApplicationServer *string `json:"applicationServer"`

	// business applications
	// Required: true
	BusinessApplications *TypesServiceServiceBusinessApplication `json:"businessApplications"`

	// consumers
	// Required: true
	Consumers *int64 `json:"consumers"`

	// datasource count
	// Required: true
	DatasourceCount *int64 `json:"datasourceCount"`

	// dependencies
	// Required: true
	Dependencies *int64 `json:"dependencies"`

	// downstream count
	// Required: true
	DownstreamCount *int64 `json:"downstreamCount"`

	// group by
	// Required: true
	GroupBy map[string]TypesListValue `json:"groupBy"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// language type
	// Required: true
	LanguageType *string `json:"languageType"`

	// language version
	// Required: true
	LanguageVersion *string `json:"languageVersion"`

	// mom count
	// Required: true
	MomCount *int64 `json:"momCount"`

	// name
	// Required: true
	Name *string `json:"name"`

	// owner department
	// Required: true
	OwnerDepartment *string `json:"ownerDepartment"`

	// owner email
	// Required: true
	OwnerEmail *string `json:"ownerEmail"`

	// owner name
	// Required: true
	OwnerName *string `json:"ownerName"`

	// persistent signature
	// Required: true
	PersistentSignature *string `json:"persistentSignature"`

	// properties
	// Required: true
	Properties *TypesServiceServiceTraits `json:"properties"`

	// service version
	// Required: true
	ServiceVersion *string `json:"serviceVersion"`

	// tags
	// Required: true
	Tags *TypesServiceServiceTag `json:"tags"`

	// technology type
	// Required: true
	TechnologyType *string `json:"technologyType"`

	// type
	// Required: true
	Type *string `json:"type"`

	// updated at
	// Required: true
	UpdatedAt *int64 `json:"updatedAt"`

	// upstream count
	// Required: true
	UpstreamCount *int64 `json:"upstreamCount"`
}

// Validate validates this types service now service
func (m *TypesServiceNowService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessApplications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsumers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatasourceCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownstreamCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguageVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMomCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerDepartment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersistentSignature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTechnologyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpstreamCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesServiceNowService) validateApplicationServer(formats strfmt.Registry) error {

	if err := validate.Required("applicationServer", "body", m.ApplicationServer); err != nil {
		return err
	}

	return nil
}

func (m *TypesServiceNowService) validateBusinessApplications(formats strfmt.Registry) error {

	if err := validate.Required("businessApplications", "body", m.BusinessApplications); err != nil {
		return err
	}

	if m.BusinessApplications != nil {
		if err := m.BusinessApplications.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("businessApplications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("businessApplications")
			}
			return err
		}
	}

	return nil
}

func (m *TypesServiceNowService) validateConsumers(formats strfmt.Registry) error {

	if err := validate.Required("consumers", "body", m.Consumers); err != nil {
		return err
	}

	return nil
}

func (m *TypesServiceNowService) validateDatasourceCount(formats strfmt.Registry) error {

	if err := validate.Required("datasourceCount", "body", m.DatasourceCount); err != nil {
		return err
	}

	return nil
}

func (m *TypesServiceNowService) validateDependencies(formats strfmt.Registry) error {

	if err := validate.Required("dependencies", "body", m.Dependencies); err != nil {
		return err
	}

	return nil
}

func (m *TypesServiceNowService) validateDownstreamCount(formats strfmt.Registry) error {

	if err := validate.Required("downstreamCount", "body", m.DownstreamCount); err != nil {
		return err
	}

	return nil
}

func (m *TypesServiceNowService) validateGroupBy(formats strfmt.Registry) error {

	if err := validate.Required("groupBy", "body", m.GroupBy); err != nil {
		return err
	}

	for k := range m.GroupBy {

		if err := validate.Required("groupBy"+"."+k, "body", m.GroupBy[k]); err != nil {
			return err
		}

	}

	return nil
}

func (m *TypesServiceNowService) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TypesServiceNowService) validateLanguageType(formats strfmt.Registry) error {

	if err := validate.Required("languageType", "body", m.LanguageType); err != nil {
		return err
	}

	return nil
}

func (m *TypesServiceNowService) validateLanguageVersion(formats strfmt.Registry) error {

	if err := validate.Required("languageVersion", "body", m.LanguageVersion); err != nil {
		return err
	}

	return nil
}

func (m *TypesServiceNowService) validateMomCount(formats strfmt.Registry) error {

	if err := validate.Required("momCount", "body", m.MomCount); err != nil {
		return err
	}

	return nil
}

func (m *TypesServiceNowService) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TypesServiceNowService) validateOwnerDepartment(formats strfmt.Registry) error {

	if err := validate.Required("ownerDepartment", "body", m.OwnerDepartment); err != nil {
		return err
	}

	return nil
}

func (m *TypesServiceNowService) validateOwnerEmail(formats strfmt.Registry) error {

	if err := validate.Required("ownerEmail", "body", m.OwnerEmail); err != nil {
		return err
	}

	return nil
}

func (m *TypesServiceNowService) validateOwnerName(formats strfmt.Registry) error {

	if err := validate.Required("ownerName", "body", m.OwnerName); err != nil {
		return err
	}

	return nil
}

func (m *TypesServiceNowService) validatePersistentSignature(formats strfmt.Registry) error {

	if err := validate.Required("persistentSignature", "body", m.PersistentSignature); err != nil {
		return err
	}

	return nil
}

func (m *TypesServiceNowService) validateProperties(formats strfmt.Registry) error {

	if err := validate.Required("properties", "body", m.Properties); err != nil {
		return err
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

func (m *TypesServiceNowService) validateServiceVersion(formats strfmt.Registry) error {

	if err := validate.Required("serviceVersion", "body", m.ServiceVersion); err != nil {
		return err
	}

	return nil
}

func (m *TypesServiceNowService) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	if m.Tags != nil {
		if err := m.Tags.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tags")
			}
			return err
		}
	}

	return nil
}

func (m *TypesServiceNowService) validateTechnologyType(formats strfmt.Registry) error {

	if err := validate.Required("technologyType", "body", m.TechnologyType); err != nil {
		return err
	}

	return nil
}

func (m *TypesServiceNowService) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *TypesServiceNowService) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *TypesServiceNowService) validateUpstreamCount(formats strfmt.Registry) error {

	if err := validate.Required("upstreamCount", "body", m.UpstreamCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this types service now service based on the context it is used
func (m *TypesServiceNowService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBusinessApplications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesServiceNowService) contextValidateBusinessApplications(ctx context.Context, formats strfmt.Registry) error {

	if m.BusinessApplications != nil {

		if err := m.BusinessApplications.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("businessApplications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("businessApplications")
			}
			return err
		}
	}

	return nil
}

func (m *TypesServiceNowService) contextValidateProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.Properties != nil {

		if err := m.Properties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

func (m *TypesServiceNowService) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	if m.Tags != nil {

		if err := m.Tags.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tags")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TypesServiceNowService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesServiceNowService) UnmarshalBinary(b []byte) error {
	var res TypesServiceNowService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
