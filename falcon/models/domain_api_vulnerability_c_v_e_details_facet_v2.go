// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainAPIVulnerabilityCVEDetailsFacetV2 domain API vulnerability c v e details facet v2
//
// swagger:model domain.APIVulnerabilityCVEDetailsFacetV2
type DomainAPIVulnerabilityCVEDetailsFacetV2 struct {

	// actors
	Actors []string `json:"actors"`

	// base score
	BaseScore float64 `json:"base_score,omitempty"`

	// cisa info
	CisaInfo *DomainAPIVulnerabilityCVECISAInfo `json:"cisa_info,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// exploit status
	ExploitStatus int64 `json:"exploit_status,omitempty"`

	// exploitability score
	ExploitabilityScore float64 `json:"exploitability_score,omitempty"`

	// exprt rating
	ExprtRating string `json:"exprt_rating,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// impact score
	ImpactScore float64 `json:"impact_score,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// published date
	PublishedDate string `json:"published_date,omitempty"`

	// references
	References []string `json:"references"`

	// remediation level
	RemediationLevel string `json:"remediation_level,omitempty"`

	// severity
	Severity string `json:"severity,omitempty"`

	// spotlight published date
	SpotlightPublishedDate string `json:"spotlight_published_date,omitempty"`

	// vector
	Vector string `json:"vector,omitempty"`

	// vendor advisory
	VendorAdvisory []string `json:"vendor_advisory"`
}

// Validate validates this domain API vulnerability c v e details facet v2
func (m *DomainAPIVulnerabilityCVEDetailsFacetV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCisaInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAPIVulnerabilityCVEDetailsFacetV2) validateCisaInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CisaInfo) { // not required
		return nil
	}

	if m.CisaInfo != nil {
		if err := m.CisaInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cisa_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cisa_info")
			}
			return err
		}
	}

	return nil
}

func (m *DomainAPIVulnerabilityCVEDetailsFacetV2) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this domain API vulnerability c v e details facet v2 based on the context it is used
func (m *DomainAPIVulnerabilityCVEDetailsFacetV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCisaInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAPIVulnerabilityCVEDetailsFacetV2) contextValidateCisaInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CisaInfo != nil {
		if err := m.CisaInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cisa_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cisa_info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainAPIVulnerabilityCVEDetailsFacetV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainAPIVulnerabilityCVEDetailsFacetV2) UnmarshalBinary(b []byte) error {
	var res DomainAPIVulnerabilityCVEDetailsFacetV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
