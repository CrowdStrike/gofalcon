// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainOCITenancyValidated domain o c i tenancy validated
//
// swagger:model domain.OCITenancyValidated
type DomainOCITenancyValidated struct {

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// Region of OCI Account/Tenancy
	// Required: true
	HomeRegion *string `json:"home_region"`

	// OCI Tenancy Registration status
	// Required: true
	OverallStatus *string `json:"overall_status"`

	// Tenancy registration details for each product and feature
	// Required: true
	Products map[string]DomainOCITenancyValidatedProducts `json:"products"`

	// tenancy ocid
	// Required: true
	TenancyOcid *string `json:"tenancy_ocid"`
}

// Validate validates this domain o c i tenancy validated
func (m *DomainOCITenancyValidated) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHomeRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverallStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenancyOcid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainOCITenancyValidated) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyValidated) validateHomeRegion(formats strfmt.Registry) error {

	if err := validate.Required("home_region", "body", m.HomeRegion); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyValidated) validateOverallStatus(formats strfmt.Registry) error {

	if err := validate.Required("overall_status", "body", m.OverallStatus); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyValidated) validateProducts(formats strfmt.Registry) error {

	if err := validate.Required("products", "body", m.Products); err != nil {
		return err
	}

	for k := range m.Products {

		if err := validate.Required("products"+"."+k, "body", m.Products[k]); err != nil {
			return err
		}

		if err := validate.Required("products"+"."+k, "body", DomainOCITenancyValidatedProducts(m.Products[k])); err != nil {
			return err
		}

		if val, ok := m.Products[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *DomainOCITenancyValidated) validateTenancyOcid(formats strfmt.Registry) error {

	if err := validate.Required("tenancy_ocid", "body", m.TenancyOcid); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this domain o c i tenancy validated based on the context it is used
func (m *DomainOCITenancyValidated) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainOCITenancyValidated) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.Required("products", "body", m.Products); err != nil {
		return err
	}

	for k := range m.Products {

		if err := validate.Required("products"+"."+k, "body", DomainOCITenancyValidatedProducts(m.Products[k])); err != nil {
			return err
		}

		if val, ok := m.Products[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainOCITenancyValidated) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainOCITenancyValidated) UnmarshalBinary(b []byte) error {
	var res DomainOCITenancyValidated
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
