// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsClusterWithFailedRules models cluster with failed rules
//
// swagger:model models.ClusterWithFailedRules
type ModelsClusterWithFailedRules struct {

	// 1
	// Required: true
	Nr1 *int64 `json:"1"`

	// 2
	// Required: true
	Nr2 *int64 `json:"2"`

	// 3
	// Required: true
	Nr3 *int64 `json:"3"`

	// 4
	// Required: true
	Nr4 *int64 `json:"4"`

	// cluster id
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// cluster name
	// Required: true
	ClusterName *string `json:"cluster_name"`
}

// Validate validates this models cluster with failed rules
func (m *ModelsClusterWithFailedRules) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNr1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsClusterWithFailedRules) validateNr1(formats strfmt.Registry) error {

	if err := validate.Required("1", "body", m.Nr1); err != nil {
		return err
	}

	return nil
}

func (m *ModelsClusterWithFailedRules) validateNr2(formats strfmt.Registry) error {

	if err := validate.Required("2", "body", m.Nr2); err != nil {
		return err
	}

	return nil
}

func (m *ModelsClusterWithFailedRules) validateNr3(formats strfmt.Registry) error {

	if err := validate.Required("3", "body", m.Nr3); err != nil {
		return err
	}

	return nil
}

func (m *ModelsClusterWithFailedRules) validateNr4(formats strfmt.Registry) error {

	if err := validate.Required("4", "body", m.Nr4); err != nil {
		return err
	}

	return nil
}

func (m *ModelsClusterWithFailedRules) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsClusterWithFailedRules) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("cluster_name", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models cluster with failed rules based on context it is used
func (m *ModelsClusterWithFailedRules) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsClusterWithFailedRules) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsClusterWithFailedRules) UnmarshalBinary(b []byte) error {
	var res ModelsClusterWithFailedRules
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
