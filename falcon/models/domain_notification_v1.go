// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainNotificationV1 domain notification v1
//
// swagger:model domain.NotificationV1
type DomainNotificationV1 struct {

	// The email of the user who is assigned to this notification
	AssignedToUID string `json:"assigned_to_uid,omitempty"`

	// The name of the user who is assigned to this notification
	AssignedToUsername string `json:"assigned_to_username,omitempty"`

	// The unique ID of the user who is assigned to this notification
	AssignedToUUID string `json:"assigned_to_uuid,omitempty"`

	// The date when the notification was generated
	// Required: true
	// Format: date-time
	CreatedDate *strfmt.DateTime `json:"created_date"`

	// Highlighted content based on the rule that generated the notifications. Highlights are surrounded with a <cs-highlight> tag
	Highlights []string `json:"highlights"`

	// The ID of the notification
	// Required: true
	ID *string `json:"id"`

	// Timestamp when the intelligence item is considered to have been posted
	// Required: true
	// Format: date-time
	ItemDate *strfmt.DateTime `json:"item_date"`

	// ID of the intelligence item which generated the match
	// Required: true
	ItemID *string `json:"item_id"`

	// Type of intelligence item based on format, e.g. post, reply, botnet_config
	// Required: true
	ItemType *string `json:"item_type"`

	// The ID of the rule that generated this notification
	// Required: true
	RuleID *string `json:"rule_id"`

	// The name of the rule that generated this notification
	// Required: true
	RuleName *string `json:"rule_name"`

	// rule priority
	// Required: true
	RulePriority *string `json:"rule_priority"`

	// rule topic
	// Required: true
	RuleTopic *string `json:"rule_topic"`

	// The notification status. This can be one of: new, in-progress, closed-false-positive, closed-true-positive.
	// Required: true
	Status *string `json:"status"`

	// The date when the notification was updated
	// Required: true
	// Format: date-time
	UpdatedDate *strfmt.DateTime `json:"updated_date"`
}

// Validate validates this domain notification v1
func (m *DomainNotificationV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRulePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleTopic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainNotificationV1) validateCreatedDate(formats strfmt.Registry) error {

	if err := validate.Required("created_date", "body", m.CreatedDate); err != nil {
		return err
	}

	if err := validate.FormatOf("created_date", "body", "date-time", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainNotificationV1) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DomainNotificationV1) validateItemDate(formats strfmt.Registry) error {

	if err := validate.Required("item_date", "body", m.ItemDate); err != nil {
		return err
	}

	if err := validate.FormatOf("item_date", "body", "date-time", m.ItemDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainNotificationV1) validateItemID(formats strfmt.Registry) error {

	if err := validate.Required("item_id", "body", m.ItemID); err != nil {
		return err
	}

	return nil
}

func (m *DomainNotificationV1) validateItemType(formats strfmt.Registry) error {

	if err := validate.Required("item_type", "body", m.ItemType); err != nil {
		return err
	}

	return nil
}

func (m *DomainNotificationV1) validateRuleID(formats strfmt.Registry) error {

	if err := validate.Required("rule_id", "body", m.RuleID); err != nil {
		return err
	}

	return nil
}

func (m *DomainNotificationV1) validateRuleName(formats strfmt.Registry) error {

	if err := validate.Required("rule_name", "body", m.RuleName); err != nil {
		return err
	}

	return nil
}

func (m *DomainNotificationV1) validateRulePriority(formats strfmt.Registry) error {

	if err := validate.Required("rule_priority", "body", m.RulePriority); err != nil {
		return err
	}

	return nil
}

func (m *DomainNotificationV1) validateRuleTopic(formats strfmt.Registry) error {

	if err := validate.Required("rule_topic", "body", m.RuleTopic); err != nil {
		return err
	}

	return nil
}

func (m *DomainNotificationV1) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *DomainNotificationV1) validateUpdatedDate(formats strfmt.Registry) error {

	if err := validate.Required("updated_date", "body", m.UpdatedDate); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_date", "body", "date-time", m.UpdatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain notification v1 based on context it is used
func (m *DomainNotificationV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainNotificationV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainNotificationV1) UnmarshalBinary(b []byte) error {
	var res DomainNotificationV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
