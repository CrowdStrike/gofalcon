// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainRule domain rule
//
// swagger:model domain.Rule
type DomainRule struct {

	// created date
	// Required: true
	CreatedDate *int64 `json:"created_date"`

	// description
	// Required: true
	Description *string `json:"description"`

	// id
	// Required: true
	ID *int32 `json:"id"`

	// last modified date
	// Required: true
	LastModifiedDate *int64 `json:"last_modified_date"`

	// name
	// Required: true
	Name *string `json:"name"`

	// rich text description
	// Required: true
	RichTextDescription *string `json:"rich_text_description"`

	// short description
	// Required: true
	ShortDescription *string `json:"short_description"`

	// tags
	// Required: true
	Tags []string `json:"tags"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this domain rule
func (m *DomainRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRichTextDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShortDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainRule) validateCreatedDate(formats strfmt.Registry) error {

	if err := validate.Required("created_date", "body", m.CreatedDate); err != nil {
		return err
	}

	return nil
}

func (m *DomainRule) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *DomainRule) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DomainRule) validateLastModifiedDate(formats strfmt.Registry) error {

	if err := validate.Required("last_modified_date", "body", m.LastModifiedDate); err != nil {
		return err
	}

	return nil
}

func (m *DomainRule) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DomainRule) validateRichTextDescription(formats strfmt.Registry) error {

	if err := validate.Required("rich_text_description", "body", m.RichTextDescription); err != nil {
		return err
	}

	return nil
}

func (m *DomainRule) validateShortDescription(formats strfmt.Registry) error {

	if err := validate.Required("short_description", "body", m.ShortDescription); err != nil {
		return err
	}

	return nil
}

func (m *DomainRule) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

func (m *DomainRule) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain rule based on context it is used
func (m *DomainRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainRule) UnmarshalBinary(b []byte) error {
	var res DomainRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
