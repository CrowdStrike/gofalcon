// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsSnapshotInventoryPayload models snapshot inventory payload
//
// swagger:model models.SnapshotInventoryPayload
type ModelsSnapshotInventoryPayload struct {

	// job metadata
	// Required: true
	JobMetadata *ModelsJobMetaData `json:"job_metadata"`

	// results
	// Required: true
	Results *ModelsScanResults `json:"results"`
}

// Validate validates this models snapshot inventory payload
func (m *ModelsSnapshotInventoryPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJobMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsSnapshotInventoryPayload) validateJobMetadata(formats strfmt.Registry) error {

	if err := validate.Required("job_metadata", "body", m.JobMetadata); err != nil {
		return err
	}

	if m.JobMetadata != nil {
		if err := m.JobMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job_metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("job_metadata")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsSnapshotInventoryPayload) validateResults(formats strfmt.Registry) error {

	if err := validate.Required("results", "body", m.Results); err != nil {
		return err
	}

	if m.Results != nil {
		if err := m.Results.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("results")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("results")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this models snapshot inventory payload based on the context it is used
func (m *ModelsSnapshotInventoryPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateJobMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsSnapshotInventoryPayload) contextValidateJobMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.JobMetadata != nil {

		if err := m.JobMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job_metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("job_metadata")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsSnapshotInventoryPayload) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	if m.Results != nil {

		if err := m.Results.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("results")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("results")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsSnapshotInventoryPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsSnapshotInventoryPayload) UnmarshalBinary(b []byte) error {
	var res ModelsSnapshotInventoryPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
