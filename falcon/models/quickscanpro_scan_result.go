// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuickscanproScanResult quickscanpro scan result
//
// swagger:model quickscanpro.ScanResult
type QuickscanproScanResult struct {

	// beta intelligence context
	BetaIntelligenceContext interface{} `json:"beta_intelligence_context,omitempty"`

	// file artifacts
	// Required: true
	FileArtifacts []*QuickscanproFileResult `json:"file_artifacts"`

	// mitre attacks
	MitreAttacks []*QuickscanproMITREAttack `json:"mitre_attacks"`

	// url artifacts
	URLArtifacts []*QuickscanproURLResult `json:"url_artifacts"`

	// verdict
	// Required: true
	// Enum: [clean suspicious malicious unknown]
	Verdict *string `json:"verdict"`

	// verdict reason
	// Required: true
	VerdictReason *string `json:"verdict_reason"`

	// verdict source
	VerdictSource []string `json:"verdict_source"`
}

// Validate validates this quickscanpro scan result
func (m *QuickscanproScanResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileArtifacts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMitreAttacks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURLArtifacts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerdict(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerdictReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuickscanproScanResult) validateFileArtifacts(formats strfmt.Registry) error {

	if err := validate.Required("file_artifacts", "body", m.FileArtifacts); err != nil {
		return err
	}

	for i := 0; i < len(m.FileArtifacts); i++ {
		if swag.IsZero(m.FileArtifacts[i]) { // not required
			continue
		}

		if m.FileArtifacts[i] != nil {
			if err := m.FileArtifacts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("file_artifacts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("file_artifacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QuickscanproScanResult) validateMitreAttacks(formats strfmt.Registry) error {
	if swag.IsZero(m.MitreAttacks) { // not required
		return nil
	}

	for i := 0; i < len(m.MitreAttacks); i++ {
		if swag.IsZero(m.MitreAttacks[i]) { // not required
			continue
		}

		if m.MitreAttacks[i] != nil {
			if err := m.MitreAttacks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mitre_attacks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mitre_attacks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QuickscanproScanResult) validateURLArtifacts(formats strfmt.Registry) error {
	if swag.IsZero(m.URLArtifacts) { // not required
		return nil
	}

	for i := 0; i < len(m.URLArtifacts); i++ {
		if swag.IsZero(m.URLArtifacts[i]) { // not required
			continue
		}

		if m.URLArtifacts[i] != nil {
			if err := m.URLArtifacts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("url_artifacts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("url_artifacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var quickscanproScanResultTypeVerdictPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["clean","suspicious","malicious","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		quickscanproScanResultTypeVerdictPropEnum = append(quickscanproScanResultTypeVerdictPropEnum, v)
	}
}

const (

	// QuickscanproScanResultVerdictClean captures enum value "clean"
	QuickscanproScanResultVerdictClean string = "clean"

	// QuickscanproScanResultVerdictSuspicious captures enum value "suspicious"
	QuickscanproScanResultVerdictSuspicious string = "suspicious"

	// QuickscanproScanResultVerdictMalicious captures enum value "malicious"
	QuickscanproScanResultVerdictMalicious string = "malicious"

	// QuickscanproScanResultVerdictUnknown captures enum value "unknown"
	QuickscanproScanResultVerdictUnknown string = "unknown"
)

// prop value enum
func (m *QuickscanproScanResult) validateVerdictEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, quickscanproScanResultTypeVerdictPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QuickscanproScanResult) validateVerdict(formats strfmt.Registry) error {

	if err := validate.Required("verdict", "body", m.Verdict); err != nil {
		return err
	}

	// value enum
	if err := m.validateVerdictEnum("verdict", "body", *m.Verdict); err != nil {
		return err
	}

	return nil
}

func (m *QuickscanproScanResult) validateVerdictReason(formats strfmt.Registry) error {

	if err := validate.Required("verdict_reason", "body", m.VerdictReason); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this quickscanpro scan result based on the context it is used
func (m *QuickscanproScanResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFileArtifacts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMitreAttacks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateURLArtifacts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuickscanproScanResult) contextValidateFileArtifacts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FileArtifacts); i++ {

		if m.FileArtifacts[i] != nil {

			if swag.IsZero(m.FileArtifacts[i]) { // not required
				return nil
			}

			if err := m.FileArtifacts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("file_artifacts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("file_artifacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QuickscanproScanResult) contextValidateMitreAttacks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MitreAttacks); i++ {

		if m.MitreAttacks[i] != nil {

			if swag.IsZero(m.MitreAttacks[i]) { // not required
				return nil
			}

			if err := m.MitreAttacks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mitre_attacks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mitre_attacks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QuickscanproScanResult) contextValidateURLArtifacts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.URLArtifacts); i++ {

		if m.URLArtifacts[i] != nil {

			if swag.IsZero(m.URLArtifacts[i]) { // not required
				return nil
			}

			if err := m.URLArtifacts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("url_artifacts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("url_artifacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuickscanproScanResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuickscanproScanResult) UnmarshalBinary(b []byte) error {
	var res QuickscanproScanResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
