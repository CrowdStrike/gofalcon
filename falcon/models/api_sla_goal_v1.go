// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APISLAGoalV1 api SLA goal v1
//
// swagger:model api.SLAGoalV1
type APISLAGoalV1 struct {

	// duration seconds
	// Required: true
	DurationSeconds *int64 `json:"duration_seconds"`

	// escalation policy
	EscalationPolicy *APIEscalationPolicyV1 `json:"escalation_policy,omitempty"`

	// type
	// Required: true
	// Enum: [ack resolve]
	Type *string `json:"type"`
}

// Validate validates this api SLA goal v1
func (m *APISLAGoalV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDurationSeconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEscalationPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APISLAGoalV1) validateDurationSeconds(formats strfmt.Registry) error {

	if err := validate.Required("duration_seconds", "body", m.DurationSeconds); err != nil {
		return err
	}

	return nil
}

func (m *APISLAGoalV1) validateEscalationPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.EscalationPolicy) { // not required
		return nil
	}

	if m.EscalationPolicy != nil {
		if err := m.EscalationPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("escalation_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("escalation_policy")
			}
			return err
		}
	}

	return nil
}

var apiSlaGoalV1TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ack","resolve"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiSlaGoalV1TypeTypePropEnum = append(apiSlaGoalV1TypeTypePropEnum, v)
	}
}

const (

	// APISLAGoalV1TypeAck captures enum value "ack"
	APISLAGoalV1TypeAck string = "ack"

	// APISLAGoalV1TypeResolve captures enum value "resolve"
	APISLAGoalV1TypeResolve string = "resolve"
)

// prop value enum
func (m *APISLAGoalV1) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, apiSlaGoalV1TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *APISLAGoalV1) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this api SLA goal v1 based on the context it is used
func (m *APISLAGoalV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEscalationPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APISLAGoalV1) contextValidateEscalationPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.EscalationPolicy != nil {

		if swag.IsZero(m.EscalationPolicy) { // not required
			return nil
		}

		if err := m.EscalationPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("escalation_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("escalation_policy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APISLAGoalV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APISLAGoalV1) UnmarshalBinary(b []byte) error {
	var res APISLAGoalV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
