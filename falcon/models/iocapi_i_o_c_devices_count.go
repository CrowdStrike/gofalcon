// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IocapiIOCDevicesCount iocapi i o c devices count
//
// swagger:model iocapi.IOCDevicesCount
type IocapiIOCDevicesCount struct {

	// device count
	// Required: true
	DeviceCount *int32 `json:"device_count"`

	// id
	// Required: true
	ID *string `json:"id"`

	// limit exceeded
	LimitExceeded bool `json:"limit_exceeded,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`

	// value
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this iocapi i o c devices count
func (m *IocapiIOCDevicesCount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IocapiIOCDevicesCount) validateDeviceCount(formats strfmt.Registry) error {

	if err := validate.Required("device_count", "body", m.DeviceCount); err != nil {
		return err
	}

	return nil
}

func (m *IocapiIOCDevicesCount) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *IocapiIOCDevicesCount) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *IocapiIOCDevicesCount) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this iocapi i o c devices count based on context it is used
func (m *IocapiIOCDevicesCount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IocapiIOCDevicesCount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IocapiIOCDevicesCount) UnmarshalBinary(b []byte) error {
	var res IocapiIOCDevicesCount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
