// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClientSystemDefinitionProvisionRequest client system definition provision request
//
// swagger:model client.SystemDefinitionProvisionRequest
type ClientSystemDefinitionProvisionRequest struct {

	// Optional name to be set on the customer scope definition. Must be unique within a given CID.
	// Required: true
	Name *string `json:"name"`

	// Runtime parameters to be interpolated to template model
	// Required: true
	Parameters *ParameterTemplateProvisionParameters `json:"parameters"`

	// ID of the system definition template that was previously created
	// Required: true
	TemplateID *string `json:"template_id"`

	// Name of the system definition template to provision
	// Required: true
	TemplateName *string `json:"template_name"`

	// Version of system definition template that was previously created, if omitted the latest version will be used.
	// Required: true
	TemplateVersion *string `json:"template_version"`
}

// Validate validates this client system definition provision request
func (m *ClientSystemDefinitionProvisionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClientSystemDefinitionProvisionRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ClientSystemDefinitionProvisionRequest) validateParameters(formats strfmt.Registry) error {

	if err := validate.Required("parameters", "body", m.Parameters); err != nil {
		return err
	}

	if m.Parameters != nil {
		if err := m.Parameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameters")
			}
			return err
		}
	}

	return nil
}

func (m *ClientSystemDefinitionProvisionRequest) validateTemplateID(formats strfmt.Registry) error {

	if err := validate.Required("template_id", "body", m.TemplateID); err != nil {
		return err
	}

	return nil
}

func (m *ClientSystemDefinitionProvisionRequest) validateTemplateName(formats strfmt.Registry) error {

	if err := validate.Required("template_name", "body", m.TemplateName); err != nil {
		return err
	}

	return nil
}

func (m *ClientSystemDefinitionProvisionRequest) validateTemplateVersion(formats strfmt.Registry) error {

	if err := validate.Required("template_version", "body", m.TemplateVersion); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this client system definition provision request based on the context it is used
func (m *ClientSystemDefinitionProvisionRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClientSystemDefinitionProvisionRequest) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.Parameters != nil {

		if err := m.Parameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClientSystemDefinitionProvisionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClientSystemDefinitionProvisionRequest) UnmarshalBinary(b []byte) error {
	var res ClientSystemDefinitionProvisionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
