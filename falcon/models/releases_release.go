// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleasesRelease releases release
//
// swagger:model releases.Release
type ReleasesRelease struct {

	// created by
	CreatedBy string `json:"created_by,omitempty"`

	// created timestamp
	// Required: true
	// Format: date-time
	CreatedTimestamp *strfmt.DateTime `json:"created_timestamp"`

	// deployed timestamp
	// Format: date-time
	DeployedTimestamp strfmt.DateTime `json:"deployed_timestamp,omitempty"`

	// deployment start timestamp
	// Format: date-time
	DeploymentStartTimestamp strfmt.DateTime `json:"deployment_start_timestamp,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// last modified by
	LastModifiedBy string `json:"last_modified_by,omitempty"`

	// last modified timestamp
	// Format: date-time
	LastModifiedTimestamp strfmt.DateTime `json:"last_modified_timestamp,omitempty"`

	// release contents
	// Required: true
	ReleaseContents []*ReleasecontentsReleaseContent `json:"release_contents"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this releases release
func (m *ReleasesRelease) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseContents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleasesRelease) validateCreatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("created_timestamp", "body", m.CreatedTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("created_timestamp", "body", "date-time", m.CreatedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReleasesRelease) validateDeployedTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.DeployedTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("deployed_timestamp", "body", "date-time", m.DeployedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReleasesRelease) validateDeploymentStartTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.DeploymentStartTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("deployment_start_timestamp", "body", "date-time", m.DeploymentStartTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReleasesRelease) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ReleasesRelease) validateLastModifiedTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modified_timestamp", "body", "date-time", m.LastModifiedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReleasesRelease) validateReleaseContents(formats strfmt.Registry) error {

	if err := validate.Required("release_contents", "body", m.ReleaseContents); err != nil {
		return err
	}

	for i := 0; i < len(m.ReleaseContents); i++ {
		if swag.IsZero(m.ReleaseContents[i]) { // not required
			continue
		}

		if m.ReleaseContents[i] != nil {
			if err := m.ReleaseContents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("release_contents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("release_contents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReleasesRelease) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this releases release based on the context it is used
func (m *ReleasesRelease) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReleaseContents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleasesRelease) contextValidateReleaseContents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReleaseContents); i++ {

		if m.ReleaseContents[i] != nil {

			if swag.IsZero(m.ReleaseContents[i]) { // not required
				return nil
			}

			if err := m.ReleaseContents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("release_contents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("release_contents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleasesRelease) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleasesRelease) UnmarshalBinary(b []byte) error {
	var res ReleasesRelease
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
