// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskexecutionsVerificationSummary taskexecutions verification summary
//
// swagger:model taskexecutions.VerificationSummary
type TaskexecutionsVerificationSummary struct {

	// Number of hosts where verification was not successful.
	// Required: true
	UnverifiedHostCount *int32 `json:"unverified_host_count"`

	// Number of hosts where verification was successful.
	// Required: true
	VerifiedHostCount *int32 `json:"verified_host_count"`
}

// Validate validates this taskexecutions verification summary
func (m *TaskexecutionsVerificationSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUnverifiedHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerifiedHostCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskexecutionsVerificationSummary) validateUnverifiedHostCount(formats strfmt.Registry) error {

	if err := validate.Required("unverified_host_count", "body", m.UnverifiedHostCount); err != nil {
		return err
	}

	return nil
}

func (m *TaskexecutionsVerificationSummary) validateVerifiedHostCount(formats strfmt.Registry) error {

	if err := validate.Required("verified_host_count", "body", m.VerifiedHostCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this taskexecutions verification summary based on context it is used
func (m *TaskexecutionsVerificationSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TaskexecutionsVerificationSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskexecutionsVerificationSummary) UnmarshalBinary(b []byte) error {
	var res TaskexecutionsVerificationSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
