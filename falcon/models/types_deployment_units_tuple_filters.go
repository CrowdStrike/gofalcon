// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TypesDeploymentUnitsTupleFilters types deployment units tuple filters
//
// swagger:model types.DeploymentUnitsTupleFilters
type TypesDeploymentUnitsTupleFilters struct {

	// excludes
	Excludes []*TypesTupleToString `json:"excludes"`

	// includes
	Includes []*TypesTupleToString `json:"includes"`
}

// Validate validates this types deployment units tuple filters
func (m *TypesDeploymentUnitsTupleFilters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExcludes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncludes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesDeploymentUnitsTupleFilters) validateExcludes(formats strfmt.Registry) error {
	if swag.IsZero(m.Excludes) { // not required
		return nil
	}

	for i := 0; i < len(m.Excludes); i++ {
		if swag.IsZero(m.Excludes[i]) { // not required
			continue
		}

		if m.Excludes[i] != nil {
			if err := m.Excludes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("excludes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("excludes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TypesDeploymentUnitsTupleFilters) validateIncludes(formats strfmt.Registry) error {
	if swag.IsZero(m.Includes) { // not required
		return nil
	}

	for i := 0; i < len(m.Includes); i++ {
		if swag.IsZero(m.Includes[i]) { // not required
			continue
		}

		if m.Includes[i] != nil {
			if err := m.Includes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("includes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("includes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this types deployment units tuple filters based on the context it is used
func (m *TypesDeploymentUnitsTupleFilters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExcludes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncludes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesDeploymentUnitsTupleFilters) contextValidateExcludes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Excludes); i++ {

		if m.Excludes[i] != nil {

			if swag.IsZero(m.Excludes[i]) { // not required
				return nil
			}

			if err := m.Excludes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("excludes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("excludes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TypesDeploymentUnitsTupleFilters) contextValidateIncludes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Includes); i++ {

		if m.Includes[i] != nil {

			if swag.IsZero(m.Includes[i]) { // not required
				return nil
			}

			if err := m.Includes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("includes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("includes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TypesDeploymentUnitsTupleFilters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesDeploymentUnitsTupleFilters) UnmarshalBinary(b []byte) error {
	var res TypesDeploymentUnitsTupleFilters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
