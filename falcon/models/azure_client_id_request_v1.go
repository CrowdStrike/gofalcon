// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureClientIDRequestV1 azure client ID request v1
//
// swagger:model azure.ClientIDRequestV1
type AzureClientIDRequestV1 struct {

	// ms graph permission ids
	// Required: true
	MsGraphPermissionIds []string `json:"ms_graph_permission_ids"`

	// tenant id
	// Required: true
	TenantID *string `json:"tenant_id"`
}

// Validate validates this azure client ID request v1
func (m *AzureClientIDRequestV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMsGraphPermissionIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureClientIDRequestV1) validateMsGraphPermissionIds(formats strfmt.Registry) error {

	if err := validate.Required("ms_graph_permission_ids", "body", m.MsGraphPermissionIds); err != nil {
		return err
	}

	return nil
}

func (m *AzureClientIDRequestV1) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenant_id", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this azure client ID request v1 based on context it is used
func (m *AzureClientIDRequestV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AzureClientIDRequestV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureClientIDRequestV1) UnmarshalBinary(b []byte) error {
	var res AzureClientIDRequestV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
