// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DomainECrimeKillChain domain e crime kill chain
//
// swagger:model domain.ECrimeKillChain
type DomainECrimeKillChain struct {

	// attribution
	Attribution string `json:"attribution,omitempty"`

	// crimes
	Crimes string `json:"crimes,omitempty"`

	// customers
	Customers string `json:"customers,omitempty"`

	// marketing
	Marketing string `json:"marketing,omitempty"`

	// monetization
	Monetization string `json:"monetization,omitempty"`

	// rich text attribution
	RichTextAttribution string `json:"rich_text_attribution,omitempty"`

	// rich text crimes
	RichTextCrimes string `json:"rich_text_crimes,omitempty"`

	// rich text customers
	RichTextCustomers string `json:"rich_text_customers,omitempty"`

	// rich text marketing
	RichTextMarketing string `json:"rich_text_marketing,omitempty"`

	// rich text monetization
	RichTextMonetization string `json:"rich_text_monetization,omitempty"`

	// rich text services offered
	RichTextServicesOffered string `json:"rich_text_services_offered,omitempty"`

	// rich text services used
	RichTextServicesUsed string `json:"rich_text_services_used,omitempty"`

	// rich text technical tradecraft
	RichTextTechnicalTradecraft string `json:"rich_text_technical_tradecraft,omitempty"`

	// rich text victims
	RichTextVictims string `json:"rich_text_victims,omitempty"`

	// services offered
	ServicesOffered string `json:"services_offered,omitempty"`

	// services used
	ServicesUsed string `json:"services_used,omitempty"`

	// technical tradecraft
	TechnicalTradecraft string `json:"technical_tradecraft,omitempty"`

	// victims
	Victims string `json:"victims,omitempty"`
}

// Validate validates this domain e crime kill chain
func (m *DomainECrimeKillChain) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this domain e crime kill chain based on context it is used
func (m *DomainECrimeKillChain) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainECrimeKillChain) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainECrimeKillChain) UnmarshalBinary(b []byte) error {
	var res DomainECrimeKillChain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
