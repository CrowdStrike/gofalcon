// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItautomationConcurrencyConfig itautomation concurrency config
//
// swagger:model itautomation.ConcurrencyConfig
type ItautomationConcurrencyConfig struct {

	// Maximum number of hosts that can transfer files simultaneously. Example: 4000
	// Maximum: 5000
	// Minimum: 1
	ConcurrentHostFileTransferLimit int32 `json:"concurrent_host_file_transfer_limit,omitempty"`

	// Maximum number of hosts that can run operations simultaneously. Example:1000
	// Maximum: 100000
	// Minimum: 1
	ConcurrentHostLimit int32 `json:"concurrent_host_limit,omitempty"`

	// Maximum number of tasks that can run in parallel. Example: 3
	// Maximum: 5
	// Minimum: 1
	ConcurrentTaskLimit int32 `json:"concurrent_task_limit,omitempty"`
}

// Validate validates this itautomation concurrency config
func (m *ItautomationConcurrencyConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConcurrentHostFileTransferLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConcurrentHostLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConcurrentTaskLimit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItautomationConcurrencyConfig) validateConcurrentHostFileTransferLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.ConcurrentHostFileTransferLimit) { // not required
		return nil
	}

	if err := validate.MinimumInt("concurrent_host_file_transfer_limit", "body", int64(m.ConcurrentHostFileTransferLimit), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("concurrent_host_file_transfer_limit", "body", int64(m.ConcurrentHostFileTransferLimit), 5000, false); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationConcurrencyConfig) validateConcurrentHostLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.ConcurrentHostLimit) { // not required
		return nil
	}

	if err := validate.MinimumInt("concurrent_host_limit", "body", int64(m.ConcurrentHostLimit), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("concurrent_host_limit", "body", int64(m.ConcurrentHostLimit), 100000, false); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationConcurrencyConfig) validateConcurrentTaskLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.ConcurrentTaskLimit) { // not required
		return nil
	}

	if err := validate.MinimumInt("concurrent_task_limit", "body", int64(m.ConcurrentTaskLimit), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("concurrent_task_limit", "body", int64(m.ConcurrentTaskLimit), 5, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this itautomation concurrency config based on context it is used
func (m *ItautomationConcurrencyConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ItautomationConcurrencyConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItautomationConcurrencyConfig) UnmarshalBinary(b []byte) error {
	var res ItautomationConcurrencyConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
