// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainCard domain card
//
// swagger:model domain.Card
type DomainCard struct {

	// bin code
	BinCode string `json:"bin_code,omitempty"`

	// cardholder name
	CardholderName string `json:"cardholder_name,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// expiration
	Expiration string `json:"expiration,omitempty"`

	// issuing bank
	IssuingBank string `json:"issuing_bank,omitempty"`

	// last transaction at
	// Format: date-time
	LastTransactionAt strfmt.DateTime `json:"last_transaction_at,omitempty"`

	// servicecode
	Servicecode string `json:"servicecode,omitempty"`
}

// Validate validates this domain card
func (m *DomainCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastTransactionAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainCard) validateLastTransactionAt(formats strfmt.Registry) error {
	if swag.IsZero(m.LastTransactionAt) { // not required
		return nil
	}

	if err := validate.FormatOf("last_transaction_at", "body", "date-time", m.LastTransactionAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain card based on context it is used
func (m *DomainCard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainCard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainCard) UnmarshalBinary(b []byte) error {
	var res DomainCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
