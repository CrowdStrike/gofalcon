// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VulnerabilitymetadataapiCSExploit vulnerabilitymetadataapi c s exploit
//
// swagger:model vulnerabilitymetadataapi.CSExploit
type VulnerabilitymetadataapiCSExploit struct {

	// exploit code maturity
	// Required: true
	ExploitCodeMaturity *string `json:"exploit_code_maturity"`

	// published timestamp
	// Required: true
	// Format: date-time
	PublishedTimestamp *strfmt.DateTime `json:"published_timestamp"`

	// sources
	// Required: true
	Sources []*VulnerabilitymetadataapiExploitSource `json:"sources"`

	// status
	// Required: true
	Status *int64 `json:"status"`

	// status label
	// Required: true
	StatusLabel *string `json:"status_label"`

	// updated timestamp
	// Required: true
	// Format: date-time
	UpdatedTimestamp *strfmt.DateTime `json:"updated_timestamp"`
}

// Validate validates this vulnerabilitymetadataapi c s exploit
func (m *VulnerabilitymetadataapiCSExploit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExploitCodeMaturity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilitymetadataapiCSExploit) validateExploitCodeMaturity(formats strfmt.Registry) error {

	if err := validate.Required("exploit_code_maturity", "body", m.ExploitCodeMaturity); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiCSExploit) validatePublishedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("published_timestamp", "body", m.PublishedTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("published_timestamp", "body", "date-time", m.PublishedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiCSExploit) validateSources(formats strfmt.Registry) error {

	if err := validate.Required("sources", "body", m.Sources); err != nil {
		return err
	}

	for i := 0; i < len(m.Sources); i++ {
		if swag.IsZero(m.Sources[i]) { // not required
			continue
		}

		if m.Sources[i] != nil {
			if err := m.Sources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VulnerabilitymetadataapiCSExploit) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiCSExploit) validateStatusLabel(formats strfmt.Registry) error {

	if err := validate.Required("status_label", "body", m.StatusLabel); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiCSExploit) validateUpdatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("updated_timestamp", "body", m.UpdatedTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_timestamp", "body", "date-time", m.UpdatedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this vulnerabilitymetadataapi c s exploit based on the context it is used
func (m *VulnerabilitymetadataapiCSExploit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilitymetadataapiCSExploit) contextValidateSources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Sources); i++ {

		if m.Sources[i] != nil {

			if swag.IsZero(m.Sources[i]) { // not required
				return nil
			}

			if err := m.Sources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VulnerabilitymetadataapiCSExploit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VulnerabilitymetadataapiCSExploit) UnmarshalBinary(b []byte) error {
	var res VulnerabilitymetadataapiCSExploit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
