// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VulnerabilitymetadataapiImpact vulnerabilitymetadataapi impact
//
// swagger:model vulnerabilitymetadataapi.Impact
type VulnerabilitymetadataapiImpact struct {

	// cvss v2
	// Required: true
	CvssV2 *VulnerabilitymetadataapiCVSSv2 `json:"cvss_v2"`

	// cvss v3
	// Required: true
	CvssV3 *VulnerabilitymetadataapiCVSSv3 `json:"cvss_v3"`
}

// Validate validates this vulnerabilitymetadataapi impact
func (m *VulnerabilitymetadataapiImpact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCvssV2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCvssV3(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilitymetadataapiImpact) validateCvssV2(formats strfmt.Registry) error {

	if err := validate.Required("cvss_v2", "body", m.CvssV2); err != nil {
		return err
	}

	if m.CvssV2 != nil {
		if err := m.CvssV2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cvss_v2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cvss_v2")
			}
			return err
		}
	}

	return nil
}

func (m *VulnerabilitymetadataapiImpact) validateCvssV3(formats strfmt.Registry) error {

	if err := validate.Required("cvss_v3", "body", m.CvssV3); err != nil {
		return err
	}

	if m.CvssV3 != nil {
		if err := m.CvssV3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cvss_v3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cvss_v3")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vulnerabilitymetadataapi impact based on the context it is used
func (m *VulnerabilitymetadataapiImpact) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCvssV2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCvssV3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilitymetadataapiImpact) contextValidateCvssV2(ctx context.Context, formats strfmt.Registry) error {

	if m.CvssV2 != nil {

		if err := m.CvssV2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cvss_v2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cvss_v2")
			}
			return err
		}
	}

	return nil
}

func (m *VulnerabilitymetadataapiImpact) contextValidateCvssV3(ctx context.Context, formats strfmt.Registry) error {

	if m.CvssV3 != nil {

		if err := m.CvssV3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cvss_v3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cvss_v3")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VulnerabilitymetadataapiImpact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VulnerabilitymetadataapiImpact) UnmarshalBinary(b []byte) error {
	var res VulnerabilitymetadataapiImpact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
