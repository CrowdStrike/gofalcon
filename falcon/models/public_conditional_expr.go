// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PublicConditionalExpr public conditional expr
//
// swagger:model public.ConditionalExpr
type PublicConditionalExpr struct {

	// Comparison operator to use. Allowed values are: LessThan, GreaterThan, LessThanEquals, GreaterThanEquals, Equals, NotEquals, Contains, NotContains, Matches, NotMatches
	// Required: true
	DataComparator *string `json:"data_comparator"`

	// Data type for comparison. Allowed values are: StringType, NumericType, SemverType
	// Required: true
	DataType *string `json:"data_type"`

	// Result key to evaluate. In the case of an osquery this will be the column name. In the case of a script this would be the the script column name (if an output parser config is used) or script_output/script_error otherwise.
	// Required: true
	Key *string `json:"key"`

	// ID of the task this condition applies to. Example: f64b95555ef54ea682619ce880d267cc
	// Required: true
	TaskID *string `json:"task_id"`

	// Value to compare against. Example: stopped
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this public conditional expr
func (m *PublicConditionalExpr) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataComparator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicConditionalExpr) validateDataComparator(formats strfmt.Registry) error {

	if err := validate.Required("data_comparator", "body", m.DataComparator); err != nil {
		return err
	}

	return nil
}

func (m *PublicConditionalExpr) validateDataType(formats strfmt.Registry) error {

	if err := validate.Required("data_type", "body", m.DataType); err != nil {
		return err
	}

	return nil
}

func (m *PublicConditionalExpr) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *PublicConditionalExpr) validateTaskID(formats strfmt.Registry) error {

	if err := validate.Required("task_id", "body", m.TaskID); err != nil {
		return err
	}

	return nil
}

func (m *PublicConditionalExpr) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this public conditional expr based on context it is used
func (m *PublicConditionalExpr) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PublicConditionalExpr) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicConditionalExpr) UnmarshalBinary(b []byte) error {
	var res PublicConditionalExpr
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
