// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TypesIntegrationTask types integration task
//
// swagger:model types.IntegrationTask
type TypesIntegrationTask struct {

	// access token
	AccessToken string `json:"access_token,omitempty"`

	// additional header
	AdditionalHeader string `json:"additional_header,omitempty"`

	// business application
	BusinessApplication string `json:"business_application,omitempty"`

	// data
	Data string `json:"data,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// integration
	Integration *TypesIntegration `json:"integration,omitempty"`

	// integration task type
	IntegrationTaskType *TypesIntegrationTaskType `json:"integration_task_type,omitempty"`

	// latest task run
	LatestTaskRun *TypesActionRun `json:"latest_task_run,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// next run
	NextRun *TypesTimestamp `json:"next_run,omitempty"`

	// progress
	Progress int32 `json:"progress,omitempty"`

	// schedule
	Schedule *TypesComposedSchedule `json:"schedule,omitempty"`

	// schedule every unit display name
	ScheduleEveryUnitDisplayName string `json:"schedule_every_unit_display_name,omitempty"`

	// trigger
	Trigger string `json:"trigger,omitempty"`

	// type
	Type *TypesIntegrationTaskType `json:"type,omitempty"`
}

// Validate validates this types integration task
func (m *TypesIntegrationTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIntegration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegrationTaskType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestTaskRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesIntegrationTask) validateIntegration(formats strfmt.Registry) error {
	if swag.IsZero(m.Integration) { // not required
		return nil
	}

	if m.Integration != nil {
		if err := m.Integration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("integration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("integration")
			}
			return err
		}
	}

	return nil
}

func (m *TypesIntegrationTask) validateIntegrationTaskType(formats strfmt.Registry) error {
	if swag.IsZero(m.IntegrationTaskType) { // not required
		return nil
	}

	if m.IntegrationTaskType != nil {
		if err := m.IntegrationTaskType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("integration_task_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("integration_task_type")
			}
			return err
		}
	}

	return nil
}

func (m *TypesIntegrationTask) validateLatestTaskRun(formats strfmt.Registry) error {
	if swag.IsZero(m.LatestTaskRun) { // not required
		return nil
	}

	if m.LatestTaskRun != nil {
		if err := m.LatestTaskRun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latest_task_run")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("latest_task_run")
			}
			return err
		}
	}

	return nil
}

func (m *TypesIntegrationTask) validateNextRun(formats strfmt.Registry) error {
	if swag.IsZero(m.NextRun) { // not required
		return nil
	}

	if m.NextRun != nil {
		if err := m.NextRun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("next_run")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("next_run")
			}
			return err
		}
	}

	return nil
}

func (m *TypesIntegrationTask) validateSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *TypesIntegrationTask) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this types integration task based on the context it is used
func (m *TypesIntegrationTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIntegration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIntegrationTaskType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLatestTaskRun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNextRun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesIntegrationTask) contextValidateIntegration(ctx context.Context, formats strfmt.Registry) error {

	if m.Integration != nil {

		if swag.IsZero(m.Integration) { // not required
			return nil
		}

		if err := m.Integration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("integration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("integration")
			}
			return err
		}
	}

	return nil
}

func (m *TypesIntegrationTask) contextValidateIntegrationTaskType(ctx context.Context, formats strfmt.Registry) error {

	if m.IntegrationTaskType != nil {

		if swag.IsZero(m.IntegrationTaskType) { // not required
			return nil
		}

		if err := m.IntegrationTaskType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("integration_task_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("integration_task_type")
			}
			return err
		}
	}

	return nil
}

func (m *TypesIntegrationTask) contextValidateLatestTaskRun(ctx context.Context, formats strfmt.Registry) error {

	if m.LatestTaskRun != nil {

		if swag.IsZero(m.LatestTaskRun) { // not required
			return nil
		}

		if err := m.LatestTaskRun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latest_task_run")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("latest_task_run")
			}
			return err
		}
	}

	return nil
}

func (m *TypesIntegrationTask) contextValidateNextRun(ctx context.Context, formats strfmt.Registry) error {

	if m.NextRun != nil {

		if swag.IsZero(m.NextRun) { // not required
			return nil
		}

		if err := m.NextRun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("next_run")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("next_run")
			}
			return err
		}
	}

	return nil
}

func (m *TypesIntegrationTask) contextValidateSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.Schedule != nil {

		if swag.IsZero(m.Schedule) { // not required
			return nil
		}

		if err := m.Schedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *TypesIntegrationTask) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {

		if swag.IsZero(m.Type) { // not required
			return nil
		}

		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TypesIntegrationTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesIntegrationTask) UnmarshalBinary(b []byte) error {
	var res TypesIntegrationTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
