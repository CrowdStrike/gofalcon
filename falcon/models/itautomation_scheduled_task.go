// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItautomationScheduledTask itautomation scheduled task
//
// swagger:model itautomation.ScheduledTask
type ItautomationScheduledTask struct {

	// Username of the user who created the scheduled task. Example: john.doe@example.com
	// Required: true
	CreatedBy *string `json:"created_by"`

	// Timestamp when the scheduled task was created. Example: 2023-05-01T10:00:00Z
	// Required: true
	// Format: date-time
	CreatedTime *strfmt.DateTime `json:"created_time"`

	// Whether to discover new hosts for the scheduled task. Example: true
	DiscoverNewHosts bool `json:"discover_new_hosts,omitempty"`

	// Whether to discover offline hosts for the scheduled task. Example: true
	DiscoverOfflineHosts bool `json:"discover_offline_hosts,omitempty"`

	// Whether to distribute the scheduled task. Example: true
	Distribute bool `json:"distribute,omitempty"`

	// Additional arguments for the scheduled task
	ExecutionArgs map[string]string `json:"execution_args,omitempty"`

	//  Duration for which the task stays active. Once expired, new and offline hosts won't be targeted. Example: 1m
	ExpirationInterval string `json:"expiration_interval,omitempty"`

	// Safety limits for task execution
	Guardrails *FalconforitapiGuardrails `json:"guardrails,omitempty"`

	// Unique identifier of the scheduled task. Example: st_123456789
	// Required: true
	ID *string `json:"id"`

	// Whether the scheduled task is active. Example: true
	// Required: true
	IsActive *bool `json:"is_active"`

	// Whether this is a preset scheduled task. Example: true
	// Required: true
	IsPreset *bool `json:"is_preset"`

	// Timestamp of the last execution of this scheduled task. Example: 2023-05-01T15:30:00Z
	// Format: date-time
	LastRun strfmt.DateTime `json:"last_run,omitempty"`

	// Username of the user who last modified the scheduled task. Example: jane.smith@example.com
	ModifiedBy string `json:"modified_by,omitempty"`

	// Timestamp when the scheduled task was last modified. Example: 2023-05-02T14:30:00Z
	// Format: date-time
	ModifiedTime strfmt.DateTime `json:"modified_time,omitempty"`

	// Timestamp of the next scheduled execution of this task. Example: 2023-05-02T15:30:00Z
	// Format: date-time
	NextRunTime strfmt.DateTime `json:"next_run_time,omitempty"`

	// Schedule details for the task execution
	// Required: true
	Schedule *FalconforitapiSchedule `json:"schedule"`

	// Custom name for the scheduled task. Example: Weekly Security Scan
	ScheduledName string `json:"scheduled_name,omitempty"`

	// Filter expression to select target hosts. Example: hostname:*prod*
	// Required: true
	Target *string `json:"target"`

	// Unique identifier of the associated task. Example: f64b95555ef54ea682619ce880d267cc
	// Required: true
	TaskID *string `json:"task_id"`

	// Name of the associated task. Example: Daily System Scan
	// Required: true
	TaskName *string `json:"task_name"`

	// Type of the associated task. Example: scan
	// Required: true
	TaskType *string `json:"task_type"`

	// Conditions that trigger remediation actions
	TriggerCondition []*FalconforitapiConditionGroup `json:"trigger_condition"`
}

// Validate validates this itautomation scheduled task
func (m *ItautomationScheduledTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuardrails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsPreset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextRunTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerCondition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItautomationScheduledTask) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("created_by", "body", m.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationScheduledTask) validateCreatedTime(formats strfmt.Registry) error {

	if err := validate.Required("created_time", "body", m.CreatedTime); err != nil {
		return err
	}

	if err := validate.FormatOf("created_time", "body", "date-time", m.CreatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationScheduledTask) validateGuardrails(formats strfmt.Registry) error {
	if swag.IsZero(m.Guardrails) { // not required
		return nil
	}

	if m.Guardrails != nil {
		if err := m.Guardrails.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("guardrails")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("guardrails")
			}

			return err
		}
	}

	return nil
}

func (m *ItautomationScheduledTask) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationScheduledTask) validateIsActive(formats strfmt.Registry) error {

	if err := validate.Required("is_active", "body", m.IsActive); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationScheduledTask) validateIsPreset(formats strfmt.Registry) error {

	if err := validate.Required("is_preset", "body", m.IsPreset); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationScheduledTask) validateLastRun(formats strfmt.Registry) error {
	if swag.IsZero(m.LastRun) { // not required
		return nil
	}

	if err := validate.FormatOf("last_run", "body", "date-time", m.LastRun.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationScheduledTask) validateModifiedTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("modified_time", "body", "date-time", m.ModifiedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationScheduledTask) validateNextRunTime(formats strfmt.Registry) error {
	if swag.IsZero(m.NextRunTime) { // not required
		return nil
	}

	if err := validate.FormatOf("next_run_time", "body", "date-time", m.NextRunTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationScheduledTask) validateSchedule(formats strfmt.Registry) error {

	if err := validate.Required("schedule", "body", m.Schedule); err != nil {
		return err
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("schedule")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("schedule")
			}

			return err
		}
	}

	return nil
}

func (m *ItautomationScheduledTask) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationScheduledTask) validateTaskID(formats strfmt.Registry) error {

	if err := validate.Required("task_id", "body", m.TaskID); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationScheduledTask) validateTaskName(formats strfmt.Registry) error {

	if err := validate.Required("task_name", "body", m.TaskName); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationScheduledTask) validateTaskType(formats strfmt.Registry) error {

	if err := validate.Required("task_type", "body", m.TaskType); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationScheduledTask) validateTriggerCondition(formats strfmt.Registry) error {
	if swag.IsZero(m.TriggerCondition) { // not required
		return nil
	}

	for i := 0; i < len(m.TriggerCondition); i++ {
		if swag.IsZero(m.TriggerCondition[i]) { // not required
			continue
		}

		if m.TriggerCondition[i] != nil {
			if err := m.TriggerCondition[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this itautomation scheduled task based on the context it is used
func (m *ItautomationScheduledTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGuardrails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTriggerCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItautomationScheduledTask) contextValidateGuardrails(ctx context.Context, formats strfmt.Registry) error {

	if m.Guardrails != nil {

		if swag.IsZero(m.Guardrails) { // not required
			return nil
		}

		if err := m.Guardrails.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("guardrails")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("guardrails")
			}

			return err
		}
	}

	return nil
}

func (m *ItautomationScheduledTask) contextValidateSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.Schedule != nil {

		if err := m.Schedule.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("schedule")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("schedule")
			}

			return err
		}
	}

	return nil
}

func (m *ItautomationScheduledTask) contextValidateTriggerCondition(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TriggerCondition); i++ {

		if m.TriggerCondition[i] != nil {

			if swag.IsZero(m.TriggerCondition[i]) { // not required
				return nil
			}

			if err := m.TriggerCondition[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ItautomationScheduledTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItautomationScheduledTask) UnmarshalBinary(b []byte) error {
	var res ItautomationScheduledTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
