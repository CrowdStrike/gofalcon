// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecurityCheckMetricsGetMetrics security check metrics get metrics
//
// swagger:model SecurityCheckMetrics_GetMetrics
type SecurityCheckMetricsGetMetrics struct {

	// Account id
	// Required: true
	AccountID *string `json:"account_id"`

	// Integrations count
	// Required: true
	IntegrationsCount *int64 `json:"integrations_count"`

	// Security domain count
	// Required: true
	SecurityDomainCount *int64 `json:"security_domain_count"`

	// status breakdown
	// Required: true
	StatusBreakdown *StatusBreakdownSecurityCheckMetricsGetMetrics `json:"status_breakdown"`

	// Total score percentage
	// Required: true
	TotalScorePercentage *int64 `json:"total_score_percentage"`

	// Total security checks count
	// Required: true
	TotalSecurityChecksCount *int64 `json:"total_security_checks_count"`
}

// Validate validates this security check metrics get metrics
func (m *SecurityCheckMetricsGetMetrics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegrationsCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityDomainCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusBreakdown(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalScorePercentage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalSecurityChecksCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityCheckMetricsGetMetrics) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("account_id", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckMetricsGetMetrics) validateIntegrationsCount(formats strfmt.Registry) error {

	if err := validate.Required("integrations_count", "body", m.IntegrationsCount); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckMetricsGetMetrics) validateSecurityDomainCount(formats strfmt.Registry) error {

	if err := validate.Required("security_domain_count", "body", m.SecurityDomainCount); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckMetricsGetMetrics) validateStatusBreakdown(formats strfmt.Registry) error {

	if err := validate.Required("status_breakdown", "body", m.StatusBreakdown); err != nil {
		return err
	}

	if m.StatusBreakdown != nil {
		if err := m.StatusBreakdown.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_breakdown")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_breakdown")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityCheckMetricsGetMetrics) validateTotalScorePercentage(formats strfmt.Registry) error {

	if err := validate.Required("total_score_percentage", "body", m.TotalScorePercentage); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckMetricsGetMetrics) validateTotalSecurityChecksCount(formats strfmt.Registry) error {

	if err := validate.Required("total_security_checks_count", "body", m.TotalSecurityChecksCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this security check metrics get metrics based on the context it is used
func (m *SecurityCheckMetricsGetMetrics) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatusBreakdown(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityCheckMetricsGetMetrics) contextValidateStatusBreakdown(ctx context.Context, formats strfmt.Registry) error {

	if m.StatusBreakdown != nil {

		if err := m.StatusBreakdown.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_breakdown")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_breakdown")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityCheckMetricsGetMetrics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityCheckMetricsGetMetrics) UnmarshalBinary(b []byte) error {
	var res SecurityCheckMetricsGetMetrics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
