// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TypesReasonTag types reason tag
//
// swagger:model types.ReasonTag
type TypesReasonTag struct {

	// aws Api gateway type
	AwsAPIGatewayType *TypesAwsAPIGatewayReasonTag `json:"awsApiGatewayType,omitempty"`

	// aws elastic Ip type
	AwsElasticIPType *TypesAwsElasticIPReasonTag `json:"awsElasticIpType,omitempty"`

	// aws lambda Api gateway type
	AwsLambdaAPIGatewayType *TypesAwsLambdaAPIGatewayReasonTag `json:"awsLambdaApiGatewayType,omitempty"`

	// aws load balancer type
	AwsLoadBalancerType *TypesAwsLoadBalancerReasonTag `json:"awsLoadBalancerType,omitempty"`

	// azure application gateway type
	AzureApplicationGatewayType *TypesAzureApplicationGatewayReasonTag `json:"azureApplicationGatewayType,omitempty"`

	// azure load balancer type
	AzureLoadBalancerType *TypesAzureLoadBalancerReasonTag `json:"azureLoadBalancerType,omitempty"`

	// db reason tag
	DbReasonTag *TypesDataTypeDbReasonTag `json:"dbReasonTag,omitempty"`

	// k8s load balancer type
	K8sLoadBalancerType *TypesK8SLoadBalancerReasonTag `json:"k8sLoadBalancerType,omitempty"`

	// mq reason tag
	MqReasonTag *TypesDataTypeMqReasonTag `json:"mqReasonTag,omitempty"`

	// type
	Type int32 `json:"type,omitempty"`
}

// Validate validates this types reason tag
func (m *TypesReasonTag) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsAPIGatewayType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsElasticIPType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsLambdaAPIGatewayType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsLoadBalancerType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureApplicationGatewayType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureLoadBalancerType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDbReasonTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateK8sLoadBalancerType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMqReasonTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesReasonTag) validateAwsAPIGatewayType(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsAPIGatewayType) { // not required
		return nil
	}

	if m.AwsAPIGatewayType != nil {
		if err := m.AwsAPIGatewayType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsApiGatewayType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsApiGatewayType")
			}
			return err
		}
	}

	return nil
}

func (m *TypesReasonTag) validateAwsElasticIPType(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsElasticIPType) { // not required
		return nil
	}

	if m.AwsElasticIPType != nil {
		if err := m.AwsElasticIPType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsElasticIpType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsElasticIpType")
			}
			return err
		}
	}

	return nil
}

func (m *TypesReasonTag) validateAwsLambdaAPIGatewayType(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsLambdaAPIGatewayType) { // not required
		return nil
	}

	if m.AwsLambdaAPIGatewayType != nil {
		if err := m.AwsLambdaAPIGatewayType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsLambdaApiGatewayType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsLambdaApiGatewayType")
			}
			return err
		}
	}

	return nil
}

func (m *TypesReasonTag) validateAwsLoadBalancerType(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsLoadBalancerType) { // not required
		return nil
	}

	if m.AwsLoadBalancerType != nil {
		if err := m.AwsLoadBalancerType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsLoadBalancerType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsLoadBalancerType")
			}
			return err
		}
	}

	return nil
}

func (m *TypesReasonTag) validateAzureApplicationGatewayType(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureApplicationGatewayType) { // not required
		return nil
	}

	if m.AzureApplicationGatewayType != nil {
		if err := m.AzureApplicationGatewayType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureApplicationGatewayType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureApplicationGatewayType")
			}
			return err
		}
	}

	return nil
}

func (m *TypesReasonTag) validateAzureLoadBalancerType(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureLoadBalancerType) { // not required
		return nil
	}

	if m.AzureLoadBalancerType != nil {
		if err := m.AzureLoadBalancerType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureLoadBalancerType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureLoadBalancerType")
			}
			return err
		}
	}

	return nil
}

func (m *TypesReasonTag) validateDbReasonTag(formats strfmt.Registry) error {
	if swag.IsZero(m.DbReasonTag) { // not required
		return nil
	}

	if m.DbReasonTag != nil {
		if err := m.DbReasonTag.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dbReasonTag")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dbReasonTag")
			}
			return err
		}
	}

	return nil
}

func (m *TypesReasonTag) validateK8sLoadBalancerType(formats strfmt.Registry) error {
	if swag.IsZero(m.K8sLoadBalancerType) { // not required
		return nil
	}

	if m.K8sLoadBalancerType != nil {
		if err := m.K8sLoadBalancerType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("k8sLoadBalancerType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("k8sLoadBalancerType")
			}
			return err
		}
	}

	return nil
}

func (m *TypesReasonTag) validateMqReasonTag(formats strfmt.Registry) error {
	if swag.IsZero(m.MqReasonTag) { // not required
		return nil
	}

	if m.MqReasonTag != nil {
		if err := m.MqReasonTag.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mqReasonTag")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mqReasonTag")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this types reason tag based on the context it is used
func (m *TypesReasonTag) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsAPIGatewayType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsElasticIPType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsLambdaAPIGatewayType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsLoadBalancerType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureApplicationGatewayType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureLoadBalancerType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDbReasonTag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateK8sLoadBalancerType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMqReasonTag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesReasonTag) contextValidateAwsAPIGatewayType(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsAPIGatewayType != nil {

		if swag.IsZero(m.AwsAPIGatewayType) { // not required
			return nil
		}

		if err := m.AwsAPIGatewayType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsApiGatewayType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsApiGatewayType")
			}
			return err
		}
	}

	return nil
}

func (m *TypesReasonTag) contextValidateAwsElasticIPType(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsElasticIPType != nil {

		if swag.IsZero(m.AwsElasticIPType) { // not required
			return nil
		}

		if err := m.AwsElasticIPType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsElasticIpType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsElasticIpType")
			}
			return err
		}
	}

	return nil
}

func (m *TypesReasonTag) contextValidateAwsLambdaAPIGatewayType(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsLambdaAPIGatewayType != nil {

		if swag.IsZero(m.AwsLambdaAPIGatewayType) { // not required
			return nil
		}

		if err := m.AwsLambdaAPIGatewayType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsLambdaApiGatewayType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsLambdaApiGatewayType")
			}
			return err
		}
	}

	return nil
}

func (m *TypesReasonTag) contextValidateAwsLoadBalancerType(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsLoadBalancerType != nil {

		if swag.IsZero(m.AwsLoadBalancerType) { // not required
			return nil
		}

		if err := m.AwsLoadBalancerType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsLoadBalancerType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsLoadBalancerType")
			}
			return err
		}
	}

	return nil
}

func (m *TypesReasonTag) contextValidateAzureApplicationGatewayType(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureApplicationGatewayType != nil {

		if swag.IsZero(m.AzureApplicationGatewayType) { // not required
			return nil
		}

		if err := m.AzureApplicationGatewayType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureApplicationGatewayType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureApplicationGatewayType")
			}
			return err
		}
	}

	return nil
}

func (m *TypesReasonTag) contextValidateAzureLoadBalancerType(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureLoadBalancerType != nil {

		if swag.IsZero(m.AzureLoadBalancerType) { // not required
			return nil
		}

		if err := m.AzureLoadBalancerType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureLoadBalancerType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureLoadBalancerType")
			}
			return err
		}
	}

	return nil
}

func (m *TypesReasonTag) contextValidateDbReasonTag(ctx context.Context, formats strfmt.Registry) error {

	if m.DbReasonTag != nil {

		if swag.IsZero(m.DbReasonTag) { // not required
			return nil
		}

		if err := m.DbReasonTag.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dbReasonTag")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dbReasonTag")
			}
			return err
		}
	}

	return nil
}

func (m *TypesReasonTag) contextValidateK8sLoadBalancerType(ctx context.Context, formats strfmt.Registry) error {

	if m.K8sLoadBalancerType != nil {

		if swag.IsZero(m.K8sLoadBalancerType) { // not required
			return nil
		}

		if err := m.K8sLoadBalancerType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("k8sLoadBalancerType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("k8sLoadBalancerType")
			}
			return err
		}
	}

	return nil
}

func (m *TypesReasonTag) contextValidateMqReasonTag(ctx context.Context, formats strfmt.Registry) error {

	if m.MqReasonTag != nil {

		if swag.IsZero(m.MqReasonTag) { // not required
			return nil
		}

		if err := m.MqReasonTag.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mqReasonTag")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mqReasonTag")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TypesReasonTag) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesReasonTag) UnmarshalBinary(b []byte) error {
	var res TypesReasonTag
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
