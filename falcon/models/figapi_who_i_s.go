// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FigapiWhoIS figapi who i s
//
// swagger:model figapi.WhoIS
type FigapiWhoIS struct {

	// admin contact
	AdminContact *FigapiWhoisRecord `json:"AdminContact,omitempty"`

	// billing contact
	BillingContact *FigapiWhoisRecord `json:"BillingContact,omitempty"`

	// registrant contact
	RegistrantContact *FigapiWhoisRecord `json:"RegistrantContact,omitempty"`

	// technical contact
	TechnicalContact *FigapiWhoisRecord `json:"TechnicalContact,omitempty"`
}

// Validate validates this figapi who i s
func (m *FigapiWhoIS) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdminContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrantContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTechnicalContact(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FigapiWhoIS) validateAdminContact(formats strfmt.Registry) error {
	if swag.IsZero(m.AdminContact) { // not required
		return nil
	}

	if m.AdminContact != nil {
		if err := m.AdminContact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AdminContact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AdminContact")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiWhoIS) validateBillingContact(formats strfmt.Registry) error {
	if swag.IsZero(m.BillingContact) { // not required
		return nil
	}

	if m.BillingContact != nil {
		if err := m.BillingContact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BillingContact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BillingContact")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiWhoIS) validateRegistrantContact(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistrantContact) { // not required
		return nil
	}

	if m.RegistrantContact != nil {
		if err := m.RegistrantContact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegistrantContact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RegistrantContact")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiWhoIS) validateTechnicalContact(formats strfmt.Registry) error {
	if swag.IsZero(m.TechnicalContact) { // not required
		return nil
	}

	if m.TechnicalContact != nil {
		if err := m.TechnicalContact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TechnicalContact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TechnicalContact")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this figapi who i s based on the context it is used
func (m *FigapiWhoIS) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdminContact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBillingContact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegistrantContact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTechnicalContact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FigapiWhoIS) contextValidateAdminContact(ctx context.Context, formats strfmt.Registry) error {

	if m.AdminContact != nil {

		if swag.IsZero(m.AdminContact) { // not required
			return nil
		}

		if err := m.AdminContact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AdminContact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AdminContact")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiWhoIS) contextValidateBillingContact(ctx context.Context, formats strfmt.Registry) error {

	if m.BillingContact != nil {

		if swag.IsZero(m.BillingContact) { // not required
			return nil
		}

		if err := m.BillingContact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BillingContact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BillingContact")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiWhoIS) contextValidateRegistrantContact(ctx context.Context, formats strfmt.Registry) error {

	if m.RegistrantContact != nil {

		if swag.IsZero(m.RegistrantContact) { // not required
			return nil
		}

		if err := m.RegistrantContact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegistrantContact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RegistrantContact")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiWhoIS) contextValidateTechnicalContact(ctx context.Context, formats strfmt.Registry) error {

	if m.TechnicalContact != nil {

		if swag.IsZero(m.TechnicalContact) { // not required
			return nil
		}

		if err := m.TechnicalContact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TechnicalContact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TechnicalContact")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FigapiWhoIS) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FigapiWhoIS) UnmarshalBinary(b []byte) error {
	var res FigapiWhoIS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
