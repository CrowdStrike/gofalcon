// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FalconforitapiAggregateHostCount falconforitapi aggregate host count
//
// swagger:model falconforitapi.AggregateHostCount
type FalconforitapiAggregateHostCount struct {

	// canceled host count
	// Required: true
	CanceledHostCount *int32 `json:"canceled_host_count"`

	// expired host count
	// Required: true
	ExpiredHostCount *int32 `json:"expired_host_count"`

	// failed host count
	// Required: true
	FailedHostCount *int32 `json:"failed_host_count"`

	// initiated host count
	// Required: true
	InitiatedHostCount *int32 `json:"initiated_host_count"`

	// offline host count
	// Required: true
	OfflineHostCount *int32 `json:"offline_host_count"`

	// queued host count
	// Required: true
	QueuedHostCount *int32 `json:"queued_host_count"`

	// running host count
	// Required: true
	RunningHostCount *int32 `json:"running_host_count"`

	// success host count
	// Required: true
	SuccessHostCount *int32 `json:"success_host_count"`
}

// Validate validates this falconforitapi aggregate host count
func (m *FalconforitapiAggregateHostCount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCanceledHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiredHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiatedHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfflineHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueuedHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuccessHostCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiAggregateHostCount) validateCanceledHostCount(formats strfmt.Registry) error {

	if err := validate.Required("canceled_host_count", "body", m.CanceledHostCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiAggregateHostCount) validateExpiredHostCount(formats strfmt.Registry) error {

	if err := validate.Required("expired_host_count", "body", m.ExpiredHostCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiAggregateHostCount) validateFailedHostCount(formats strfmt.Registry) error {

	if err := validate.Required("failed_host_count", "body", m.FailedHostCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiAggregateHostCount) validateInitiatedHostCount(formats strfmt.Registry) error {

	if err := validate.Required("initiated_host_count", "body", m.InitiatedHostCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiAggregateHostCount) validateOfflineHostCount(formats strfmt.Registry) error {

	if err := validate.Required("offline_host_count", "body", m.OfflineHostCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiAggregateHostCount) validateQueuedHostCount(formats strfmt.Registry) error {

	if err := validate.Required("queued_host_count", "body", m.QueuedHostCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiAggregateHostCount) validateRunningHostCount(formats strfmt.Registry) error {

	if err := validate.Required("running_host_count", "body", m.RunningHostCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiAggregateHostCount) validateSuccessHostCount(formats strfmt.Registry) error {

	if err := validate.Required("success_host_count", "body", m.SuccessHostCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this falconforitapi aggregate host count based on context it is used
func (m *FalconforitapiAggregateHostCount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FalconforitapiAggregateHostCount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FalconforitapiAggregateHostCount) UnmarshalBinary(b []byte) error {
	var res FalconforitapiAggregateHostCount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
