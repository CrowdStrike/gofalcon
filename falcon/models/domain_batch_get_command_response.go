// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainBatchGetCommandResponse domain batch get command response
//
// swagger:model domain.BatchGetCommandResponse
type DomainBatchGetCommandResponse struct {

	// batch get cmd req id
	// Required: true
	BatchGetCmdReqID *string `json:"batch_get_cmd_req_id"`

	// combined
	// Required: true
	Combined *DomainMultiCommandExecuteResponse `json:"combined"`

	// errors
	// Required: true
	Errors []*MsaAPIError `json:"errors"`

	// meta
	// Required: true
	Meta *MsaMetaInfo `json:"meta"`
}

// Validate validates this domain batch get command response
func (m *DomainBatchGetCommandResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBatchGetCmdReqID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCombined(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainBatchGetCommandResponse) validateBatchGetCmdReqID(formats strfmt.Registry) error {

	if err := validate.Required("batch_get_cmd_req_id", "body", m.BatchGetCmdReqID); err != nil {
		return err
	}

	return nil
}

func (m *DomainBatchGetCommandResponse) validateCombined(formats strfmt.Registry) error {

	if err := validate.Required("combined", "body", m.Combined); err != nil {
		return err
	}

	if m.Combined != nil {
		if err := m.Combined.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("combined")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("combined")
			}
			return err
		}
	}

	return nil
}

func (m *DomainBatchGetCommandResponse) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("errors", "body", m.Errors); err != nil {
		return err
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainBatchGetCommandResponse) validateMeta(formats strfmt.Registry) error {

	if err := validate.Required("meta", "body", m.Meta); err != nil {
		return err
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this domain batch get command response based on the context it is used
func (m *DomainBatchGetCommandResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCombined(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainBatchGetCommandResponse) contextValidateCombined(ctx context.Context, formats strfmt.Registry) error {

	if m.Combined != nil {
		if err := m.Combined.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("combined")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("combined")
			}
			return err
		}
	}

	return nil
}

func (m *DomainBatchGetCommandResponse) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {
			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainBatchGetCommandResponse) contextValidateMeta(ctx context.Context, formats strfmt.Registry) error {

	if m.Meta != nil {
		if err := m.Meta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainBatchGetCommandResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainBatchGetCommandResponse) UnmarshalBinary(b []byte) error {
	var res DomainBatchGetCommandResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
