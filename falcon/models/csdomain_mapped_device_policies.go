// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CsdomainMappedDevicePolicies csdomain mapped device policies
//
// swagger:model csdomain.MappedDevicePolicies
type CsdomainMappedDevicePolicies struct {

	// airlock
	Airlock *CsdomainDevicePolicy `json:"airlock,omitempty"`

	// automox
	Automox *CsdomainDevicePolicy `json:"automox,omitempty"`

	// device control
	DeviceControl *CsdomainDevicePolicy `json:"device_control,omitempty"`

	// firewall
	Firewall *CsdomainDevicePolicy `json:"firewall,omitempty"`

	// global config
	GlobalConfig *CsdomainDevicePolicy `json:"global_config,omitempty"`

	// netskope
	Netskope *CsdomainDevicePolicy `json:"netskope,omitempty"`

	// prevention
	Prevention *CsdomainDevicePolicy `json:"prevention,omitempty"`

	// remote response
	RemoteResponse *CsdomainDevicePolicy `json:"remote_response,omitempty"`

	// sensor update
	SensorUpdate *CsdomainDevicePolicy `json:"sensor_update,omitempty"`
}

// Validate validates this csdomain mapped device policies
func (m *CsdomainMappedDevicePolicies) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAirlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutomox(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceControl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirewall(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGlobalConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetskope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrevention(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSensorUpdate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CsdomainMappedDevicePolicies) validateAirlock(formats strfmt.Registry) error {
	if swag.IsZero(m.Airlock) { // not required
		return nil
	}

	if m.Airlock != nil {
		if err := m.Airlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("airlock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("airlock")
			}
			return err
		}
	}

	return nil
}

func (m *CsdomainMappedDevicePolicies) validateAutomox(formats strfmt.Registry) error {
	if swag.IsZero(m.Automox) { // not required
		return nil
	}

	if m.Automox != nil {
		if err := m.Automox.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("automox")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("automox")
			}
			return err
		}
	}

	return nil
}

func (m *CsdomainMappedDevicePolicies) validateDeviceControl(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceControl) { // not required
		return nil
	}

	if m.DeviceControl != nil {
		if err := m.DeviceControl.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device_control")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device_control")
			}
			return err
		}
	}

	return nil
}

func (m *CsdomainMappedDevicePolicies) validateFirewall(formats strfmt.Registry) error {
	if swag.IsZero(m.Firewall) { // not required
		return nil
	}

	if m.Firewall != nil {
		if err := m.Firewall.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firewall")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firewall")
			}
			return err
		}
	}

	return nil
}

func (m *CsdomainMappedDevicePolicies) validateGlobalConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.GlobalConfig) { // not required
		return nil
	}

	if m.GlobalConfig != nil {
		if err := m.GlobalConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("global_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("global_config")
			}
			return err
		}
	}

	return nil
}

func (m *CsdomainMappedDevicePolicies) validateNetskope(formats strfmt.Registry) error {
	if swag.IsZero(m.Netskope) { // not required
		return nil
	}

	if m.Netskope != nil {
		if err := m.Netskope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netskope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netskope")
			}
			return err
		}
	}

	return nil
}

func (m *CsdomainMappedDevicePolicies) validatePrevention(formats strfmt.Registry) error {
	if swag.IsZero(m.Prevention) { // not required
		return nil
	}

	if m.Prevention != nil {
		if err := m.Prevention.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prevention")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prevention")
			}
			return err
		}
	}

	return nil
}

func (m *CsdomainMappedDevicePolicies) validateRemoteResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoteResponse) { // not required
		return nil
	}

	if m.RemoteResponse != nil {
		if err := m.RemoteResponse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_response")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remote_response")
			}
			return err
		}
	}

	return nil
}

func (m *CsdomainMappedDevicePolicies) validateSensorUpdate(formats strfmt.Registry) error {
	if swag.IsZero(m.SensorUpdate) { // not required
		return nil
	}

	if m.SensorUpdate != nil {
		if err := m.SensorUpdate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sensor_update")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sensor_update")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this csdomain mapped device policies based on the context it is used
func (m *CsdomainMappedDevicePolicies) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAirlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAutomox(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceControl(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFirewall(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGlobalConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetskope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrevention(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemoteResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSensorUpdate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CsdomainMappedDevicePolicies) contextValidateAirlock(ctx context.Context, formats strfmt.Registry) error {

	if m.Airlock != nil {
		if err := m.Airlock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("airlock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("airlock")
			}
			return err
		}
	}

	return nil
}

func (m *CsdomainMappedDevicePolicies) contextValidateAutomox(ctx context.Context, formats strfmt.Registry) error {

	if m.Automox != nil {
		if err := m.Automox.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("automox")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("automox")
			}
			return err
		}
	}

	return nil
}

func (m *CsdomainMappedDevicePolicies) contextValidateDeviceControl(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceControl != nil {
		if err := m.DeviceControl.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device_control")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device_control")
			}
			return err
		}
	}

	return nil
}

func (m *CsdomainMappedDevicePolicies) contextValidateFirewall(ctx context.Context, formats strfmt.Registry) error {

	if m.Firewall != nil {
		if err := m.Firewall.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firewall")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firewall")
			}
			return err
		}
	}

	return nil
}

func (m *CsdomainMappedDevicePolicies) contextValidateGlobalConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.GlobalConfig != nil {
		if err := m.GlobalConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("global_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("global_config")
			}
			return err
		}
	}

	return nil
}

func (m *CsdomainMappedDevicePolicies) contextValidateNetskope(ctx context.Context, formats strfmt.Registry) error {

	if m.Netskope != nil {
		if err := m.Netskope.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netskope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netskope")
			}
			return err
		}
	}

	return nil
}

func (m *CsdomainMappedDevicePolicies) contextValidatePrevention(ctx context.Context, formats strfmt.Registry) error {

	if m.Prevention != nil {
		if err := m.Prevention.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prevention")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prevention")
			}
			return err
		}
	}

	return nil
}

func (m *CsdomainMappedDevicePolicies) contextValidateRemoteResponse(ctx context.Context, formats strfmt.Registry) error {

	if m.RemoteResponse != nil {
		if err := m.RemoteResponse.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_response")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remote_response")
			}
			return err
		}
	}

	return nil
}

func (m *CsdomainMappedDevicePolicies) contextValidateSensorUpdate(ctx context.Context, formats strfmt.Registry) error {

	if m.SensorUpdate != nil {
		if err := m.SensorUpdate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sensor_update")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sensor_update")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CsdomainMappedDevicePolicies) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CsdomainMappedDevicePolicies) UnmarshalBinary(b []byte) error {
	var res CsdomainMappedDevicePolicies
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
