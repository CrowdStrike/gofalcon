// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainCommandExecuteResponse domain command execute response
//
// swagger:model domain.CommandExecuteResponse
type DomainCommandExecuteResponse struct {

	// cloud request id
	// Required: true
	CloudRequestID *string `json:"cloud_request_id"`

	// queued command offline
	// Required: true
	QueuedCommandOffline *bool `json:"queued_command_offline"`

	// session id
	// Required: true
	SessionID *string `json:"session_id"`
}

// Validate validates this domain command execute response
func (m *DomainCommandExecuteResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudRequestID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueuedCommandOffline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainCommandExecuteResponse) validateCloudRequestID(formats strfmt.Registry) error {

	if err := validate.Required("cloud_request_id", "body", m.CloudRequestID); err != nil {
		return err
	}

	return nil
}

func (m *DomainCommandExecuteResponse) validateQueuedCommandOffline(formats strfmt.Registry) error {

	if err := validate.Required("queued_command_offline", "body", m.QueuedCommandOffline); err != nil {
		return err
	}

	return nil
}

func (m *DomainCommandExecuteResponse) validateSessionID(formats strfmt.Registry) error {

	if err := validate.Required("session_id", "body", m.SessionID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain command execute response based on context it is used
func (m *DomainCommandExecuteResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainCommandExecuteResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainCommandExecuteResponse) UnmarshalBinary(b []byte) error {
	var res DomainCommandExecuteResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
