// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FigapiLookupIndicator figapi lookup indicator
//
// swagger:model figapi.LookupIndicator
type FigapiLookupIndicator struct {

	// adversaries
	Adversaries []*FigapiAdversary `json:"Adversaries"`

	// Total range of customers affected by this indicator
	AffectedCustomers string `json:"AffectedCustomers,omitempty"`

	// certificates
	Certificates []*FigapiX509Certificate `json:"Certificates"`

	// coin address details
	CoinAddressDetails *FigapiCoinAddress `json:"CoinAddressDetails,omitempty"`

	// countries
	Countries []*FigapiCountry `json:"Countries"`

	// credentials details
	CredentialsDetails *FigapiCredentials `json:"CredentialsDetails,omitempty"`

	// Structure for Domain type indicator
	DomainDetails *FigapiDomain `json:"DomainDetails,omitempty"`

	// email address details
	EmailAddressDetails *FigapiEmailAddressDetails `json:"EmailAddressDetails,omitempty"`

	// Structure for File type indicator
	FileDetails *FigapiFile `json:"FileDetails,omitempty"`

	// Indicators first seen
	FirstSeen string `json:"FirstSeen,omitempty"`

	// The indicator ID. Concatenation of type and indicator fields. Based on the CKB2 vertex ID.
	ID string `json:"ID,omitempty"`

	// Structure for IPv4 type indicator
	IPV4Details *FigapiIPV4 `json:"IPv4Details,omitempty"`

	// Structure for IPv6 type indicator
	IPV6Details *FigapiIPV6 `json:"IPv6Details,omitempty"`

	// Multi field property describing indicators kill-chain, possible properties: `ActionOnObjectives`, `C2`, `Delivery`, `Exploitation`, `Installation`, `Reconnaissance`, `Weaponization`
	KillChain []string `json:"KillChain"`

	// Indicators last seen
	LastSeen string `json:"LastSeen,omitempty"`

	// last updated
	LastUpdated string `json:"LastUpdated,omitempty"`

	// The value matched to this indicator
	LookupValue string `json:"LookupValue,omitempty"`

	// Indicates a confidence level by which an indicator is considered to be malicious, this can be one of: `Low`, `Medium`, `High`
	MaliciousConfidence string `json:"MaliciousConfidence,omitempty"`

	// Indicates when was the confidence was last set
	MaliciousConfidenceValidatedTime string `json:"MaliciousConfidenceValidatedTime,omitempty"`

	// publish date
	PublishDate string `json:"PublishDate,omitempty"`

	// reports
	Reports []*FigapiReport `json:"Reports"`

	// sectors
	Sectors []*FigapiSector `json:"Sectors"`

	// threat types
	ThreatTypes []string `json:"ThreatTypes"`

	// threats
	Threats []*FigapiThreat `json:"Threats"`

	// Type of the indicator, this can be one of: `File`, `Domain`, `IPv4`, `IPv6`, `URL`
	Type string `json:"Type,omitempty"`

	// Structure for URL type indicator
	URLDetails *FigapiURL `json:"URLDetails,omitempty"`

	// unique identifier details
	UniqueIdentifierDetails *FigapiUniqueIdentifier `json:"UniqueIdentifierDetails,omitempty"`

	// vulnerabilities
	Vulnerabilities []*FigapiVulnerability `json:"Vulnerabilities"`
}

// Validate validates this figapi lookup indicator
func (m *FigapiLookupIndicator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdversaries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCoinAddressDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentialsDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomainDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailAddressDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV4Details(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV6Details(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReports(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSectors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThreats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURLDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniqueIdentifierDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVulnerabilities(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FigapiLookupIndicator) validateAdversaries(formats strfmt.Registry) error {
	if swag.IsZero(m.Adversaries) { // not required
		return nil
	}

	for i := 0; i < len(m.Adversaries); i++ {
		if swag.IsZero(m.Adversaries[i]) { // not required
			continue
		}

		if m.Adversaries[i] != nil {
			if err := m.Adversaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Adversaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Adversaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FigapiLookupIndicator) validateCertificates(formats strfmt.Registry) error {
	if swag.IsZero(m.Certificates) { // not required
		return nil
	}

	for i := 0; i < len(m.Certificates); i++ {
		if swag.IsZero(m.Certificates[i]) { // not required
			continue
		}

		if m.Certificates[i] != nil {
			if err := m.Certificates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Certificates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Certificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FigapiLookupIndicator) validateCoinAddressDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.CoinAddressDetails) { // not required
		return nil
	}

	if m.CoinAddressDetails != nil {
		if err := m.CoinAddressDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CoinAddressDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CoinAddressDetails")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiLookupIndicator) validateCountries(formats strfmt.Registry) error {
	if swag.IsZero(m.Countries) { // not required
		return nil
	}

	for i := 0; i < len(m.Countries); i++ {
		if swag.IsZero(m.Countries[i]) { // not required
			continue
		}

		if m.Countries[i] != nil {
			if err := m.Countries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Countries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Countries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FigapiLookupIndicator) validateCredentialsDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.CredentialsDetails) { // not required
		return nil
	}

	if m.CredentialsDetails != nil {
		if err := m.CredentialsDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CredentialsDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CredentialsDetails")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiLookupIndicator) validateDomainDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.DomainDetails) { // not required
		return nil
	}

	if m.DomainDetails != nil {
		if err := m.DomainDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DomainDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DomainDetails")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiLookupIndicator) validateEmailAddressDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.EmailAddressDetails) { // not required
		return nil
	}

	if m.EmailAddressDetails != nil {
		if err := m.EmailAddressDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EmailAddressDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EmailAddressDetails")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiLookupIndicator) validateFileDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.FileDetails) { // not required
		return nil
	}

	if m.FileDetails != nil {
		if err := m.FileDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FileDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FileDetails")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiLookupIndicator) validateIPV4Details(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV4Details) { // not required
		return nil
	}

	if m.IPV4Details != nil {
		if err := m.IPV4Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IPv4Details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("IPv4Details")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiLookupIndicator) validateIPV6Details(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV6Details) { // not required
		return nil
	}

	if m.IPV6Details != nil {
		if err := m.IPV6Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IPv6Details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("IPv6Details")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiLookupIndicator) validateReports(formats strfmt.Registry) error {
	if swag.IsZero(m.Reports) { // not required
		return nil
	}

	for i := 0; i < len(m.Reports); i++ {
		if swag.IsZero(m.Reports[i]) { // not required
			continue
		}

		if m.Reports[i] != nil {
			if err := m.Reports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Reports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Reports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FigapiLookupIndicator) validateSectors(formats strfmt.Registry) error {
	if swag.IsZero(m.Sectors) { // not required
		return nil
	}

	for i := 0; i < len(m.Sectors); i++ {
		if swag.IsZero(m.Sectors[i]) { // not required
			continue
		}

		if m.Sectors[i] != nil {
			if err := m.Sectors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Sectors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Sectors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FigapiLookupIndicator) validateThreats(formats strfmt.Registry) error {
	if swag.IsZero(m.Threats) { // not required
		return nil
	}

	for i := 0; i < len(m.Threats); i++ {
		if swag.IsZero(m.Threats[i]) { // not required
			continue
		}

		if m.Threats[i] != nil {
			if err := m.Threats[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Threats" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Threats" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FigapiLookupIndicator) validateURLDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.URLDetails) { // not required
		return nil
	}

	if m.URLDetails != nil {
		if err := m.URLDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("URLDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("URLDetails")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiLookupIndicator) validateUniqueIdentifierDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.UniqueIdentifierDetails) { // not required
		return nil
	}

	if m.UniqueIdentifierDetails != nil {
		if err := m.UniqueIdentifierDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UniqueIdentifierDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UniqueIdentifierDetails")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiLookupIndicator) validateVulnerabilities(formats strfmt.Registry) error {
	if swag.IsZero(m.Vulnerabilities) { // not required
		return nil
	}

	for i := 0; i < len(m.Vulnerabilities); i++ {
		if swag.IsZero(m.Vulnerabilities[i]) { // not required
			continue
		}

		if m.Vulnerabilities[i] != nil {
			if err := m.Vulnerabilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Vulnerabilities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Vulnerabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this figapi lookup indicator based on the context it is used
func (m *FigapiLookupIndicator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdversaries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCertificates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCoinAddressDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCountries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCredentialsDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDomainDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmailAddressDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFileDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPV4Details(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPV6Details(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReports(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSectors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThreats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateURLDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUniqueIdentifierDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVulnerabilities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FigapiLookupIndicator) contextValidateAdversaries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Adversaries); i++ {

		if m.Adversaries[i] != nil {

			if swag.IsZero(m.Adversaries[i]) { // not required
				return nil
			}

			if err := m.Adversaries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Adversaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Adversaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FigapiLookupIndicator) contextValidateCertificates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Certificates); i++ {

		if m.Certificates[i] != nil {

			if swag.IsZero(m.Certificates[i]) { // not required
				return nil
			}

			if err := m.Certificates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Certificates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Certificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FigapiLookupIndicator) contextValidateCoinAddressDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.CoinAddressDetails != nil {

		if swag.IsZero(m.CoinAddressDetails) { // not required
			return nil
		}

		if err := m.CoinAddressDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CoinAddressDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CoinAddressDetails")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiLookupIndicator) contextValidateCountries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Countries); i++ {

		if m.Countries[i] != nil {

			if swag.IsZero(m.Countries[i]) { // not required
				return nil
			}

			if err := m.Countries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Countries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Countries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FigapiLookupIndicator) contextValidateCredentialsDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.CredentialsDetails != nil {

		if swag.IsZero(m.CredentialsDetails) { // not required
			return nil
		}

		if err := m.CredentialsDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CredentialsDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CredentialsDetails")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiLookupIndicator) contextValidateDomainDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.DomainDetails != nil {

		if swag.IsZero(m.DomainDetails) { // not required
			return nil
		}

		if err := m.DomainDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DomainDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DomainDetails")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiLookupIndicator) contextValidateEmailAddressDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.EmailAddressDetails != nil {

		if swag.IsZero(m.EmailAddressDetails) { // not required
			return nil
		}

		if err := m.EmailAddressDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EmailAddressDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EmailAddressDetails")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiLookupIndicator) contextValidateFileDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.FileDetails != nil {

		if swag.IsZero(m.FileDetails) { // not required
			return nil
		}

		if err := m.FileDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FileDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FileDetails")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiLookupIndicator) contextValidateIPV4Details(ctx context.Context, formats strfmt.Registry) error {

	if m.IPV4Details != nil {

		if swag.IsZero(m.IPV4Details) { // not required
			return nil
		}

		if err := m.IPV4Details.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IPv4Details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("IPv4Details")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiLookupIndicator) contextValidateIPV6Details(ctx context.Context, formats strfmt.Registry) error {

	if m.IPV6Details != nil {

		if swag.IsZero(m.IPV6Details) { // not required
			return nil
		}

		if err := m.IPV6Details.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IPv6Details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("IPv6Details")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiLookupIndicator) contextValidateReports(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Reports); i++ {

		if m.Reports[i] != nil {

			if swag.IsZero(m.Reports[i]) { // not required
				return nil
			}

			if err := m.Reports[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Reports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Reports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FigapiLookupIndicator) contextValidateSectors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Sectors); i++ {

		if m.Sectors[i] != nil {

			if swag.IsZero(m.Sectors[i]) { // not required
				return nil
			}

			if err := m.Sectors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Sectors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Sectors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FigapiLookupIndicator) contextValidateThreats(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Threats); i++ {

		if m.Threats[i] != nil {

			if swag.IsZero(m.Threats[i]) { // not required
				return nil
			}

			if err := m.Threats[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Threats" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Threats" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FigapiLookupIndicator) contextValidateURLDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.URLDetails != nil {

		if swag.IsZero(m.URLDetails) { // not required
			return nil
		}

		if err := m.URLDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("URLDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("URLDetails")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiLookupIndicator) contextValidateUniqueIdentifierDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.UniqueIdentifierDetails != nil {

		if swag.IsZero(m.UniqueIdentifierDetails) { // not required
			return nil
		}

		if err := m.UniqueIdentifierDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UniqueIdentifierDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UniqueIdentifierDetails")
			}
			return err
		}
	}

	return nil
}

func (m *FigapiLookupIndicator) contextValidateVulnerabilities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vulnerabilities); i++ {

		if m.Vulnerabilities[i] != nil {

			if swag.IsZero(m.Vulnerabilities[i]) { // not required
				return nil
			}

			if err := m.Vulnerabilities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Vulnerabilities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Vulnerabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FigapiLookupIndicator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FigapiLookupIndicator) UnmarshalBinary(b []byte) error {
	var res FigapiLookupIndicator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
