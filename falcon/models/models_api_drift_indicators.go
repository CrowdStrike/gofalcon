// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsAPIDriftIndicators models API drift indicators
//
// swagger:model models.APIDriftIndicators
type ModelsAPIDriftIndicators struct {

	// agent id
	// Required: true
	AgentID *string `json:"agent_id"`

	// aid
	// Required: true
	Aid *string `json:"aid"`

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// cloud name
	// Required: true
	CloudName *string `json:"cloud_name"`

	// command line
	// Required: true
	CommandLine *string `json:"command_line"`

	// computer name
	// Required: true
	ComputerName *string `json:"computer_name"`

	// container id
	// Required: true
	ContainerID *string `json:"container_id"`

	// detection description
	// Required: true
	DetectionDescription *string `json:"detection_description"`

	// detection id
	// Required: true
	DetectionID *string `json:"detection_id"`

	// detection name
	// Required: true
	DetectionName *string `json:"detection_name"`

	// file name
	// Required: true
	FileName *string `json:"file_name"`

	// host id
	// Required: true
	HostID *string `json:"host_id"`

	// indicator process id
	// Required: true
	IndicatorProcessID *string `json:"indicator_process_id"`

	// namespace
	// Required: true
	Namespace *string `json:"namespace"`

	// occurred at
	// Required: true
	OccurredAt *string `json:"occurred_at"`

	// parent process id
	// Required: true
	ParentProcessID *string `json:"parent_process_id"`

	// pod id
	// Required: true
	PodID *string `json:"pod_id"`

	// pod name
	// Required: true
	PodName *string `json:"pod_name"`

	// prevented
	// Required: true
	Prevented *bool `json:"prevented"`

	// prevention status
	// Required: true
	PreventionStatus []string `json:"prevention_status"`

	// prevention status string
	// Required: true
	PreventionStatusString *string `json:"prevention_status_string"`

	// scheduler name
	// Required: true
	SchedulerName *string `json:"scheduler_name"`

	// severity
	// Required: true
	Severity *string `json:"severity"`

	// sha256
	// Required: true
	Sha256 *string `json:"sha256"`

	// timestamp
	// Required: true
	Timestamp *string `json:"timestamp"`
}

// Validate validates this models API drift indicators
func (m *ModelsAPIDriftIndicators) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommandLine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectionDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectionName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndicatorProcessID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOccurredAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentProcessID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrevented(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreventionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreventionStatusString(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedulerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSha256(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIDriftIndicators) validateAgentID(formats strfmt.Registry) error {

	if err := validate.Required("agent_id", "body", m.AgentID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validateAid(formats strfmt.Registry) error {

	if err := validate.Required("aid", "body", m.Aid); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validateCloudName(formats strfmt.Registry) error {

	if err := validate.Required("cloud_name", "body", m.CloudName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validateCommandLine(formats strfmt.Registry) error {

	if err := validate.Required("command_line", "body", m.CommandLine); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validateComputerName(formats strfmt.Registry) error {

	if err := validate.Required("computer_name", "body", m.ComputerName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validateContainerID(formats strfmt.Registry) error {

	if err := validate.Required("container_id", "body", m.ContainerID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validateDetectionDescription(formats strfmt.Registry) error {

	if err := validate.Required("detection_description", "body", m.DetectionDescription); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validateDetectionID(formats strfmt.Registry) error {

	if err := validate.Required("detection_id", "body", m.DetectionID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validateDetectionName(formats strfmt.Registry) error {

	if err := validate.Required("detection_name", "body", m.DetectionName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validateFileName(formats strfmt.Registry) error {

	if err := validate.Required("file_name", "body", m.FileName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validateHostID(formats strfmt.Registry) error {

	if err := validate.Required("host_id", "body", m.HostID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validateIndicatorProcessID(formats strfmt.Registry) error {

	if err := validate.Required("indicator_process_id", "body", m.IndicatorProcessID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validateOccurredAt(formats strfmt.Registry) error {

	if err := validate.Required("occurred_at", "body", m.OccurredAt); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validateParentProcessID(formats strfmt.Registry) error {

	if err := validate.Required("parent_process_id", "body", m.ParentProcessID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validatePodID(formats strfmt.Registry) error {

	if err := validate.Required("pod_id", "body", m.PodID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validatePodName(formats strfmt.Registry) error {

	if err := validate.Required("pod_name", "body", m.PodName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validatePrevented(formats strfmt.Registry) error {

	if err := validate.Required("prevented", "body", m.Prevented); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validatePreventionStatus(formats strfmt.Registry) error {

	if err := validate.Required("prevention_status", "body", m.PreventionStatus); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validatePreventionStatusString(formats strfmt.Registry) error {

	if err := validate.Required("prevention_status_string", "body", m.PreventionStatusString); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validateSchedulerName(formats strfmt.Registry) error {

	if err := validate.Required("scheduler_name", "body", m.SchedulerName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validateSha256(formats strfmt.Registry) error {

	if err := validate.Required("sha256", "body", m.Sha256); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIDriftIndicators) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models API drift indicators based on context it is used
func (m *ModelsAPIDriftIndicators) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsAPIDriftIndicators) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsAPIDriftIndicators) UnmarshalBinary(b []byte) error {
	var res ModelsAPIDriftIndicators
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
