// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureAzureSubscriptionV1 azure azure subscription v1
//
// swagger:model azure.AzureSubscriptionV1
type AzureAzureSubscriptionV1 struct {

	// account type
	AccountType string `json:"account_type,omitempty"`

	// conditions
	// Required: true
	Conditions []*AzureAzureSubscriptionV1Conditions `json:"conditions"`

	// created
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created"`

	// management group id
	ManagementGroupID string `json:"management_group_id,omitempty"`

	// management group name
	ManagementGroupName string `json:"management_group_name,omitempty"`

	// product permission status
	ProductPermissionStatus []*DomainProductPermission `json:"product_permission_status"`

	// registration
	Registration *AzureAzureRegistrationV1 `json:"registration,omitempty"`

	// registration id
	RegistrationID string `json:"registration_id,omitempty"`

	// subscription id
	SubscriptionID string `json:"subscription_id,omitempty"`

	// subscription name
	SubscriptionName string `json:"subscription_name,omitempty"`

	// tenant id
	TenantID string `json:"tenant_id,omitempty"`

	// updated
	// Required: true
	// Format: date-time
	Updated *strfmt.DateTime `json:"updated"`
}

// Validate validates this azure azure subscription v1
func (m *AzureAzureSubscriptionV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductPermissionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureAzureSubscriptionV1) validateConditions(formats strfmt.Registry) error {

	if err := validate.Required("conditions", "body", m.Conditions); err != nil {
		return err
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AzureAzureSubscriptionV1) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AzureAzureSubscriptionV1) validateProductPermissionStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ProductPermissionStatus) { // not required
		return nil
	}

	for i := 0; i < len(m.ProductPermissionStatus); i++ {
		if swag.IsZero(m.ProductPermissionStatus[i]) { // not required
			continue
		}

		if m.ProductPermissionStatus[i] != nil {
			if err := m.ProductPermissionStatus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("product_permission_status" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("product_permission_status" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AzureAzureSubscriptionV1) validateRegistration(formats strfmt.Registry) error {
	if swag.IsZero(m.Registration) { // not required
		return nil
	}

	if m.Registration != nil {
		if err := m.Registration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registration")
			}
			return err
		}
	}

	return nil
}

func (m *AzureAzureSubscriptionV1) validateUpdated(formats strfmt.Registry) error {

	if err := validate.Required("updated", "body", m.Updated); err != nil {
		return err
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this azure azure subscription v1 based on the context it is used
func (m *AzureAzureSubscriptionV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProductPermissionStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegistration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureAzureSubscriptionV1) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {

			if swag.IsZero(m.Conditions[i]) { // not required
				return nil
			}

			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AzureAzureSubscriptionV1) contextValidateProductPermissionStatus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProductPermissionStatus); i++ {

		if m.ProductPermissionStatus[i] != nil {

			if swag.IsZero(m.ProductPermissionStatus[i]) { // not required
				return nil
			}

			if err := m.ProductPermissionStatus[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("product_permission_status" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("product_permission_status" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AzureAzureSubscriptionV1) contextValidateRegistration(ctx context.Context, formats strfmt.Registry) error {

	if m.Registration != nil {

		if swag.IsZero(m.Registration) { // not required
			return nil
		}

		if err := m.Registration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registration")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureAzureSubscriptionV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureAzureSubscriptionV1) UnmarshalBinary(b []byte) error {
	var res AzureAzureSubscriptionV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
