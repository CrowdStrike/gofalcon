// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsAPIPackageVulnerability models API package vulnerability
//
// swagger:model models.APIPackageVulnerability
type ModelsAPIPackageVulnerability struct {

	// cveid
	// Required: true
	Cveid *string `json:"cveid"`

	// description
	// Required: true
	Description *string `json:"description"`

	// fix resolution
	// Required: true
	FixResolution []string `json:"fix_resolution"`

	// severity
	// Required: true
	Severity *string `json:"severity"`
}

// Validate validates this models API package vulnerability
func (m *ModelsAPIPackageVulnerability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCveid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFixResolution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIPackageVulnerability) validateCveid(formats strfmt.Registry) error {

	if err := validate.Required("cveid", "body", m.Cveid); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPackageVulnerability) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPackageVulnerability) validateFixResolution(formats strfmt.Registry) error {

	if err := validate.Required("fix_resolution", "body", m.FixResolution); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPackageVulnerability) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models API package vulnerability based on context it is used
func (m *ModelsAPIPackageVulnerability) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsAPIPackageVulnerability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsAPIPackageVulnerability) UnmarshalBinary(b []byte) error {
	var res ModelsAPIPackageVulnerability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
