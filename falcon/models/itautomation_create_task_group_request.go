// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItautomationCreateTaskGroupRequest itautomation create task group request
//
// swagger:model itautomation.CreateTaskGroupRequest
type ItautomationCreateTaskGroupRequest struct {

	// Access type of the group
	// Required: true
	// Enum: ["Public","Shared"]
	AccessType *string `json:"access_type"`

	// Assigned user group IDs of the group, when access_type is Shared. Use GET /it-automation/queries/it-user-groups/v1 to fetch user group IDs
	AssignedUserGroupIds []string `json:"assigned_user_group_ids"`

	// Assigned user IDs of the group, when access_type is Shared. Use GET /user-management/queries/users/v1 to fetch user IDs
	AssignedUserIds []string `json:"assigned_user_ids"`

	// Description of the task group
	Description string `json:"description,omitempty"`

	// Name of the task group
	// Required: true
	Name *string `json:"name"`

	// IDs of existing tasks to add to task group upon creation. Use PATCH /it-automation/entities/task-groups/v1 to add task ids later
	TaskIds []string `json:"task_ids"`
}

// Validate validates this itautomation create task group request
func (m *ItautomationCreateTaskGroupRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var itautomationCreateTaskGroupRequestTypeAccessTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Public","Shared"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itautomationCreateTaskGroupRequestTypeAccessTypePropEnum = append(itautomationCreateTaskGroupRequestTypeAccessTypePropEnum, v)
	}
}

const (

	// ItautomationCreateTaskGroupRequestAccessTypePublic captures enum value "Public"
	ItautomationCreateTaskGroupRequestAccessTypePublic string = "Public"

	// ItautomationCreateTaskGroupRequestAccessTypeShared captures enum value "Shared"
	ItautomationCreateTaskGroupRequestAccessTypeShared string = "Shared"
)

// prop value enum
func (m *ItautomationCreateTaskGroupRequest) validateAccessTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, itautomationCreateTaskGroupRequestTypeAccessTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ItautomationCreateTaskGroupRequest) validateAccessType(formats strfmt.Registry) error {

	if err := validate.Required("access_type", "body", m.AccessType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAccessTypeEnum("access_type", "body", *m.AccessType); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationCreateTaskGroupRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this itautomation create task group request based on context it is used
func (m *ItautomationCreateTaskGroupRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ItautomationCreateTaskGroupRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItautomationCreateTaskGroupRequest) UnmarshalBinary(b []byte) error {
	var res ItautomationCreateTaskGroupRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
