// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainExternalExportJob domain external export job
//
// swagger:model domain.ExternalExportJob
type DomainExternalExportJob struct {

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// id
	// Required: true
	ID *string `json:"id"`

	// Resource to be exported
	// Required: true
	Resource *string `json:"resource"`

	// Number of times the job was retried
	// Required: true
	Retries *int32 `json:"retries"`

	// Current status of the job. One of [READY, WAITING, IN_PROGRESS, DONE, FAILED, WAITING_FOR_RETRY, CANCELED, RESULT_DELETED]
	// Required: true
	Status *string `json:"status"`

	// updated at
	// Required: true
	UpdatedAt *string `json:"updated_at"`
}

// Validate validates this domain external export job
func (m *DomainExternalExportJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainExternalExportJob) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *DomainExternalExportJob) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DomainExternalExportJob) validateResource(formats strfmt.Registry) error {

	if err := validate.Required("resource", "body", m.Resource); err != nil {
		return err
	}

	return nil
}

func (m *DomainExternalExportJob) validateRetries(formats strfmt.Registry) error {

	if err := validate.Required("retries", "body", m.Retries); err != nil {
		return err
	}

	return nil
}

func (m *DomainExternalExportJob) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *DomainExternalExportJob) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain external export job based on context it is used
func (m *DomainExternalExportJob) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainExternalExportJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainExternalExportJob) UnmarshalBinary(b []byte) error {
	var res DomainExternalExportJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
