// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskexecutionsStartTaskExecutionRequest taskexecutions start task execution request
//
// swagger:model taskexecutions.StartTaskExecutionRequest
type TaskexecutionsStartTaskExecutionRequest struct {

	// Key-value pairs of parameter values to pass to the job. Each parameter key used in the task must have a corresponding argument value provided. Example: {'api_key': 'abc123', 'region': 'us-east-1'}
	Arguments map[string]string `json:"arguments,omitempty"`

	// discover new hosts interval
	DiscoverNewHostsInterval string `json:"discover_new_hosts_interval,omitempty"`

	// distribution interval
	DistributionInterval string `json:"distribution_interval,omitempty"`

	// guardrails
	Guardrails *TaskexecutionsGuardrails `json:"guardrails,omitempty"`

	// target
	Target string `json:"target,omitempty"`

	// task id
	// Required: true
	TaskID *string `json:"task_id"`

	// Conditions that trigger remediation scripts execution. If the field is omitted the trigger condition specified at task creation, if any, will be used.
	TriggerCondition []*PublicConditionGroup `json:"trigger_condition"`

	// wait time
	WaitTime string `json:"wait_time,omitempty"`
}

// Validate validates this taskexecutions start task execution request
func (m *TaskexecutionsStartTaskExecutionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGuardrails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerCondition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskexecutionsStartTaskExecutionRequest) validateGuardrails(formats strfmt.Registry) error {
	if swag.IsZero(m.Guardrails) { // not required
		return nil
	}

	if m.Guardrails != nil {
		if err := m.Guardrails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guardrails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guardrails")
			}
			return err
		}
	}

	return nil
}

func (m *TaskexecutionsStartTaskExecutionRequest) validateTaskID(formats strfmt.Registry) error {

	if err := validate.Required("task_id", "body", m.TaskID); err != nil {
		return err
	}

	return nil
}

func (m *TaskexecutionsStartTaskExecutionRequest) validateTriggerCondition(formats strfmt.Registry) error {
	if swag.IsZero(m.TriggerCondition) { // not required
		return nil
	}

	for i := 0; i < len(m.TriggerCondition); i++ {
		if swag.IsZero(m.TriggerCondition[i]) { // not required
			continue
		}

		if m.TriggerCondition[i] != nil {
			if err := m.TriggerCondition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this taskexecutions start task execution request based on the context it is used
func (m *TaskexecutionsStartTaskExecutionRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGuardrails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTriggerCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskexecutionsStartTaskExecutionRequest) contextValidateGuardrails(ctx context.Context, formats strfmt.Registry) error {

	if m.Guardrails != nil {

		if swag.IsZero(m.Guardrails) { // not required
			return nil
		}

		if err := m.Guardrails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guardrails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guardrails")
			}
			return err
		}
	}

	return nil
}

func (m *TaskexecutionsStartTaskExecutionRequest) contextValidateTriggerCondition(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TriggerCondition); i++ {

		if m.TriggerCondition[i] != nil {

			if swag.IsZero(m.TriggerCondition[i]) { // not required
				return nil
			}

			if err := m.TriggerCondition[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskexecutionsStartTaskExecutionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskexecutionsStartTaskExecutionRequest) UnmarshalBinary(b []byte) error {
	var res TaskexecutionsStartTaskExecutionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
