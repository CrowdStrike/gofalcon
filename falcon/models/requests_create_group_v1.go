// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RequestsCreateGroupV1 A specific device group to create
//
// swagger:model requests.CreateGroupV1
type RequestsCreateGroupV1 struct {

	// The FQL assignment rule for the group. This may only be specified if the groups type is 'dynamic'
	AssignmentRule string `json:"assignment_rule,omitempty"`

	// The description of the group
	Description string `json:"description,omitempty"`

	// The type of device group to create
	// Required: true
	// Enum: [static dynamic staticByID]
	GroupType *string `json:"group_type"`

	// The name of the group
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this requests create group v1
func (m *RequestsCreateGroupV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroupType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var requestsCreateGroupV1TypeGroupTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["static","dynamic","staticByID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		requestsCreateGroupV1TypeGroupTypePropEnum = append(requestsCreateGroupV1TypeGroupTypePropEnum, v)
	}
}

const (

	// RequestsCreateGroupV1GroupTypeStatic captures enum value "static"
	RequestsCreateGroupV1GroupTypeStatic string = "static"

	// RequestsCreateGroupV1GroupTypeDynamic captures enum value "dynamic"
	RequestsCreateGroupV1GroupTypeDynamic string = "dynamic"

	// RequestsCreateGroupV1GroupTypeStaticByID captures enum value "staticByID"
	RequestsCreateGroupV1GroupTypeStaticByID string = "staticByID"
)

// prop value enum
func (m *RequestsCreateGroupV1) validateGroupTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, requestsCreateGroupV1TypeGroupTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RequestsCreateGroupV1) validateGroupType(formats strfmt.Registry) error {

	if err := validate.Required("group_type", "body", m.GroupType); err != nil {
		return err
	}

	// value enum
	if err := m.validateGroupTypeEnum("group_type", "body", *m.GroupType); err != nil {
		return err
	}

	return nil
}

func (m *RequestsCreateGroupV1) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this requests create group v1 based on context it is used
func (m *RequestsCreateGroupV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RequestsCreateGroupV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestsCreateGroupV1) UnmarshalBinary(b []byte) error {
	var res RequestsCreateGroupV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
