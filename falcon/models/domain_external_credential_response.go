// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainExternalCredentialResponse domain external credential response
//
// swagger:model domain.ExternalCredentialResponse
type DomainExternalCredentialResponse struct {

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// details
	// Required: true
	Details DomainExternalCredentialResponseDetails `json:"details"`

	// expired
	// Required: true
	Expired *bool `json:"expired"`

	// expired at
	// Required: true
	ExpiredAt *string `json:"expired_at"`

	// id
	// Required: true
	ID *string `json:"id"`

	// updated at
	// Required: true
	UpdatedAt *string `json:"updated_at"`
}

// Validate validates this domain external credential response
func (m *DomainExternalCredentialResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpired(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiredAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainExternalCredentialResponse) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *DomainExternalCredentialResponse) validateDetails(formats strfmt.Registry) error {

	if m.Details == nil {
		return errors.Required("details", "body", nil)
	}

	return nil
}

func (m *DomainExternalCredentialResponse) validateExpired(formats strfmt.Registry) error {

	if err := validate.Required("expired", "body", m.Expired); err != nil {
		return err
	}

	return nil
}

func (m *DomainExternalCredentialResponse) validateExpiredAt(formats strfmt.Registry) error {

	if err := validate.Required("expired_at", "body", m.ExpiredAt); err != nil {
		return err
	}

	return nil
}

func (m *DomainExternalCredentialResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DomainExternalCredentialResponse) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain external credential response based on context it is used
func (m *DomainExternalCredentialResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainExternalCredentialResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainExternalCredentialResponse) UnmarshalBinary(b []byte) error {
	var res DomainExternalCredentialResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
