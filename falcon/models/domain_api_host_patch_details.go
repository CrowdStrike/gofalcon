// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainAPIHostPatchDetails domain API host patch details
//
// swagger:model domain.APIHostPatchDetails
type DomainAPIHostPatchDetails struct {

	// active patches
	// Required: true
	ActivePatches *int32 `json:"active_patches"`

	// aid
	// Required: true
	Aid *string `json:"aid"`

	// device type
	// Required: true
	DeviceType *string `json:"device_type"`

	// hostname
	// Required: true
	Hostname *string `json:"hostname"`

	// installed patches
	// Required: true
	InstalledPatches []*DomainAPIPatchInfo `json:"installed_patches"`

	// last patch confirmed
	// Required: true
	LastPatchConfirmed *string `json:"last_patch_confirmed"`

	// pending patches
	// Required: true
	PendingPatches *int32 `json:"pending_patches"`

	// reboot required
	// Required: true
	RebootRequired *bool `json:"reboot_required"`
}

// Validate validates this domain API host patch details
func (m *DomainAPIHostPatchDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivePatches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstalledPatches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastPatchConfirmed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePendingPatches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebootRequired(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAPIHostPatchDetails) validateActivePatches(formats strfmt.Registry) error {

	if err := validate.Required("active_patches", "body", m.ActivePatches); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIHostPatchDetails) validateAid(formats strfmt.Registry) error {

	if err := validate.Required("aid", "body", m.Aid); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIHostPatchDetails) validateDeviceType(formats strfmt.Registry) error {

	if err := validate.Required("device_type", "body", m.DeviceType); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIHostPatchDetails) validateHostname(formats strfmt.Registry) error {

	if err := validate.Required("hostname", "body", m.Hostname); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIHostPatchDetails) validateInstalledPatches(formats strfmt.Registry) error {

	if err := validate.Required("installed_patches", "body", m.InstalledPatches); err != nil {
		return err
	}

	for i := 0; i < len(m.InstalledPatches); i++ {
		if swag.IsZero(m.InstalledPatches[i]) { // not required
			continue
		}

		if m.InstalledPatches[i] != nil {
			if err := m.InstalledPatches[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("installed_patches" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("installed_patches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainAPIHostPatchDetails) validateLastPatchConfirmed(formats strfmt.Registry) error {

	if err := validate.Required("last_patch_confirmed", "body", m.LastPatchConfirmed); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIHostPatchDetails) validatePendingPatches(formats strfmt.Registry) error {

	if err := validate.Required("pending_patches", "body", m.PendingPatches); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIHostPatchDetails) validateRebootRequired(formats strfmt.Registry) error {

	if err := validate.Required("reboot_required", "body", m.RebootRequired); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this domain API host patch details based on the context it is used
func (m *DomainAPIHostPatchDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstalledPatches(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAPIHostPatchDetails) contextValidateInstalledPatches(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InstalledPatches); i++ {

		if m.InstalledPatches[i] != nil {

			if swag.IsZero(m.InstalledPatches[i]) { // not required
				return nil
			}

			if err := m.InstalledPatches[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("installed_patches" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("installed_patches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainAPIHostPatchDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainAPIHostPatchDetails) UnmarshalBinary(b []byte) error {
	var res DomainAPIHostPatchDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
