// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GraphGateway graph gateway
//
// swagger:model graph.Gateway
type GraphGateway struct {

	// References to the incoming and outgoing sequence flows attached to the gateway.
	// Required: true
	Flows *Flows `json:"flows"`

	// node ID
	// Required: true
	NodeID *string `json:"nodeID"`

	// The type of gateway being specified, allowed values are; exclusive, inclusive and parallel.
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this graph gateway
func (m *GraphGateway) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlows(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphGateway) validateFlows(formats strfmt.Registry) error {

	if err := validate.Required("flows", "body", m.Flows); err != nil {
		return err
	}

	if m.Flows != nil {
		if err := m.Flows.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flows")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flows")
			}
			return err
		}
	}

	return nil
}

func (m *GraphGateway) validateNodeID(formats strfmt.Registry) error {

	if err := validate.Required("nodeID", "body", m.NodeID); err != nil {
		return err
	}

	return nil
}

func (m *GraphGateway) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this graph gateway based on the context it is used
func (m *GraphGateway) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFlows(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphGateway) contextValidateFlows(ctx context.Context, formats strfmt.Registry) error {

	if m.Flows != nil {

		if err := m.Flows.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flows")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flows")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GraphGateway) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GraphGateway) UnmarshalBinary(b []byte) error {
	var res GraphGateway
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
