// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AffectedEntityGetAffected affected entity get affected
//
// swagger:model AffectedEntity_GetAffected
type AffectedEntityGetAffected struct {

	// Account id
	// Required: true
	AccountID *string `json:"account_id"`

	// Dismiss expiration date
	// Format: date-time
	DismissExpirationDate *strfmt.DateTime `json:"dismiss_expiration_date,omitempty"`

	// Dismissed
	// Required: true
	Dismissed *bool `json:"dismissed"`

	// Dismissed reason
	// Min Length: 1
	DismissedReason *string `json:"dismissed_reason,omitempty"`

	// Entity name
	// Required: true
	// Min Length: 1
	EntityName *string `json:"entity_name"`

	// extra context
	ExtraContext []interface{} `json:"extra_context"`

	// Has usage
	// Required: true
	HasUsage *bool `json:"has_usage"`

	// Type
	// Required: true
	// Min Length: 1
	Type *string `json:"type"`

	// usage
	Usage *AffectedEntityGetAffectedUsage `json:"usage,omitempty"`
}

// Validate validates this affected entity get affected
func (m *AffectedEntityGetAffected) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDismissExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDismissed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDismissedReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasUsage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AffectedEntityGetAffected) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("account_id", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *AffectedEntityGetAffected) validateDismissExpirationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.DismissExpirationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("dismiss_expiration_date", "body", "date-time", m.DismissExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AffectedEntityGetAffected) validateDismissed(formats strfmt.Registry) error {

	if err := validate.Required("dismissed", "body", m.Dismissed); err != nil {
		return err
	}

	return nil
}

func (m *AffectedEntityGetAffected) validateDismissedReason(formats strfmt.Registry) error {
	if swag.IsZero(m.DismissedReason) { // not required
		return nil
	}

	if err := validate.MinLength("dismissed_reason", "body", *m.DismissedReason, 1); err != nil {
		return err
	}

	return nil
}

func (m *AffectedEntityGetAffected) validateEntityName(formats strfmt.Registry) error {

	if err := validate.Required("entity_name", "body", m.EntityName); err != nil {
		return err
	}

	if err := validate.MinLength("entity_name", "body", *m.EntityName, 1); err != nil {
		return err
	}

	return nil
}

func (m *AffectedEntityGetAffected) validateHasUsage(formats strfmt.Registry) error {

	if err := validate.Required("has_usage", "body", m.HasUsage); err != nil {
		return err
	}

	return nil
}

func (m *AffectedEntityGetAffected) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.MinLength("type", "body", *m.Type, 1); err != nil {
		return err
	}

	return nil
}

func (m *AffectedEntityGetAffected) validateUsage(formats strfmt.Registry) error {
	if swag.IsZero(m.Usage) { // not required
		return nil
	}

	if m.Usage != nil {
		if err := m.Usage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this affected entity get affected based on the context it is used
func (m *AffectedEntityGetAffected) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AffectedEntityGetAffected) contextValidateUsage(ctx context.Context, formats strfmt.Registry) error {

	if m.Usage != nil {

		if swag.IsZero(m.Usage) { // not required
			return nil
		}

		if err := m.Usage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AffectedEntityGetAffected) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AffectedEntityGetAffected) UnmarshalBinary(b []byte) error {
	var res AffectedEntityGetAffected
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AffectedEntityGetAffectedUsage Usage
//
// swagger:model AffectedEntityGetAffectedUsage
type AffectedEntityGetAffectedUsage struct {

	// First occurrence timestamp in ISO format
	// Format: date-time
	FirstOccurrenceTime strfmt.DateTime `json:"first_occurrence_time,omitempty"`

	// Last occurrence timestamp in ISO format
	// Format: date-time
	LastOccurrenceTime strfmt.DateTime `json:"last_occurrence_time,omitempty"`

	// Total count of occurrences
	TotalCount int64 `json:"total_count,omitempty"`
}

// Validate validates this affected entity get affected usage
func (m *AffectedEntityGetAffectedUsage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirstOccurrenceTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastOccurrenceTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AffectedEntityGetAffectedUsage) validateFirstOccurrenceTime(formats strfmt.Registry) error {
	if swag.IsZero(m.FirstOccurrenceTime) { // not required
		return nil
	}

	if err := validate.FormatOf("usage"+"."+"first_occurrence_time", "body", "date-time", m.FirstOccurrenceTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AffectedEntityGetAffectedUsage) validateLastOccurrenceTime(formats strfmt.Registry) error {
	if swag.IsZero(m.LastOccurrenceTime) { // not required
		return nil
	}

	if err := validate.FormatOf("usage"+"."+"last_occurrence_time", "body", "date-time", m.LastOccurrenceTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this affected entity get affected usage based on context it is used
func (m *AffectedEntityGetAffectedUsage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AffectedEntityGetAffectedUsage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AffectedEntityGetAffectedUsage) UnmarshalBinary(b []byte) error {
	var res AffectedEntityGetAffectedUsage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
