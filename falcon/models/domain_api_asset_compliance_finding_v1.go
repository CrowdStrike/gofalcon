// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainAPIAssetComplianceFindingV1 domain API asset compliance finding v1
//
// swagger:model domain.APIAssetComplianceFindingV1
type DomainAPIAssetComplianceFindingV1 struct {

	// asset type
	// Required: true
	AssetType *string `json:"asset_type"`

	// framework name
	// Required: true
	FrameworkName *string `json:"framework_name"`

	// framework name version
	// Required: true
	FrameworkNameVersion *string `json:"framework_name_version"`

	// framework version
	// Required: true
	FrameworkVersion *string `json:"framework_version"`

	// id
	ID string `json:"id,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// recommendation id
	// Required: true
	RecommendationID *string `json:"recommendation_id"`

	// severity
	// Required: true
	Severity *int32 `json:"severity"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this domain API asset compliance finding v1
func (m *DomainAPIAssetComplianceFindingV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssetType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrameworkName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrameworkNameVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrameworkVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecommendationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAPIAssetComplianceFindingV1) validateAssetType(formats strfmt.Registry) error {

	if err := validate.Required("asset_type", "body", m.AssetType); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAssetComplianceFindingV1) validateFrameworkName(formats strfmt.Registry) error {

	if err := validate.Required("framework_name", "body", m.FrameworkName); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAssetComplianceFindingV1) validateFrameworkNameVersion(formats strfmt.Registry) error {

	if err := validate.Required("framework_name_version", "body", m.FrameworkNameVersion); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAssetComplianceFindingV1) validateFrameworkVersion(formats strfmt.Registry) error {

	if err := validate.Required("framework_version", "body", m.FrameworkVersion); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAssetComplianceFindingV1) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAssetComplianceFindingV1) validateRecommendationID(formats strfmt.Registry) error {

	if err := validate.Required("recommendation_id", "body", m.RecommendationID); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAssetComplianceFindingV1) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAssetComplianceFindingV1) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain API asset compliance finding v1 based on context it is used
func (m *DomainAPIAssetComplianceFindingV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainAPIAssetComplianceFindingV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainAPIAssetComplianceFindingV1) UnmarshalBinary(b []byte) error {
	var res DomainAPIAssetComplianceFindingV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
