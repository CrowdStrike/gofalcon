// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InsightsInsight insights insight
//
// swagger:model insights.Insight
type InsightsInsight struct {

	// details
	// Required: true
	Details map[string]InsightsDetails `json:"details"`

	// external
	// Required: true
	External []*InsightsExternal `json:"external"`

	// internal
	Internal interface{} `json:"internal,omitempty"`
}

// Validate validates this insights insight
func (m *InsightsInsight) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InsightsInsight) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("details", "body", m.Details); err != nil {
		return err
	}

	for k := range m.Details {

		if err := validate.Required("details"+"."+k, "body", m.Details[k]); err != nil {
			return err
		}
		if val, ok := m.Details[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *InsightsInsight) validateExternal(formats strfmt.Registry) error {

	if err := validate.Required("external", "body", m.External); err != nil {
		return err
	}

	for i := 0; i < len(m.External); i++ {
		if swag.IsZero(m.External[i]) { // not required
			continue
		}

		if m.External[i] != nil {
			if err := m.External[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("external" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("external" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this insights insight based on the context it is used
func (m *InsightsInsight) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InsightsInsight) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.Required("details", "body", m.Details); err != nil {
		return err
	}

	for k := range m.Details {

		if val, ok := m.Details[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *InsightsInsight) contextValidateExternal(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.External); i++ {

		if m.External[i] != nil {

			if swag.IsZero(m.External[i]) { // not required
				return nil
			}

			if err := m.External[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("external" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("external" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InsightsInsight) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InsightsInsight) UnmarshalBinary(b []byte) error {
	var res InsightsInsight
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
