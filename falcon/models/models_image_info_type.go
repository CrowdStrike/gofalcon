// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsImageInfoType models image info type
//
// swagger:model models.ImageInfoType
type ModelsImageInfoType struct {

	// architecture
	// Required: true
	Architecture *string `json:"Architecture"`

	// created at
	CreatedAt string `json:"CreatedAt,omitempty"`

	// digest
	// Required: true
	Digest *string `json:"Digest"`

	// ID
	// Required: true
	ID *string `json:"ID"`

	// registry
	Registry string `json:"Registry,omitempty"`

	// repository
	Repository string `json:"Repository,omitempty"`

	// size
	// Required: true
	Size *int64 `json:"Size"`

	// tag
	Tag string `json:"Tag,omitempty"`

	// config s3 key
	ConfigS3Key string `json:"config_s3_key,omitempty"`

	// manifest s3 key
	ManifestS3Key string `json:"manifest_s3_key,omitempty"`

	// scan request s3 key
	ScanRequestS3Key string `json:"scan_request_s3_key,omitempty"`

	// source
	Source string `json:"source,omitempty"`
}

// Validate validates this models image info type
func (m *ModelsImageInfoType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchitecture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDigest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsImageInfoType) validateArchitecture(formats strfmt.Registry) error {

	if err := validate.Required("Architecture", "body", m.Architecture); err != nil {
		return err
	}

	return nil
}

func (m *ModelsImageInfoType) validateDigest(formats strfmt.Registry) error {

	if err := validate.Required("Digest", "body", m.Digest); err != nil {
		return err
	}

	return nil
}

func (m *ModelsImageInfoType) validateID(formats strfmt.Registry) error {

	if err := validate.Required("ID", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsImageInfoType) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("Size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models image info type based on context it is used
func (m *ModelsImageInfoType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsImageInfoType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsImageInfoType) UnmarshalBinary(b []byte) error {
	var res ModelsImageInfoType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
