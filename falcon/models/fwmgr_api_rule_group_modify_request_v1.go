// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FwmgrAPIRuleGroupModifyRequestV1 fwmgr api rule group modify request v1
//
// swagger:model fwmgr.api.RuleGroupModifyRequestV1
type FwmgrAPIRuleGroupModifyRequestV1 struct {

	// diff operations
	// Required: true
	DiffOperations []*FwmgrAPIJSONDiff `json:"diff_operations"`

	// diff type
	// Required: true
	DiffType *string `json:"diff_type"`

	// id
	// Required: true
	ID *string `json:"id"`

	// rule ids
	// Required: true
	RuleIds []string `json:"rule_ids"`

	// rule versions
	// Required: true
	RuleVersions []int64 `json:"rule_versions"`

	// tracking
	// Required: true
	Tracking *string `json:"tracking"`
}

// Validate validates this fwmgr api rule group modify request v1
func (m *FwmgrAPIRuleGroupModifyRequestV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiffOperations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiffType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleVersions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTracking(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FwmgrAPIRuleGroupModifyRequestV1) validateDiffOperations(formats strfmt.Registry) error {

	if err := validate.Required("diff_operations", "body", m.DiffOperations); err != nil {
		return err
	}

	for i := 0; i < len(m.DiffOperations); i++ {
		if swag.IsZero(m.DiffOperations[i]) { // not required
			continue
		}

		if m.DiffOperations[i] != nil {
			if err := m.DiffOperations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diff_operations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("diff_operations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FwmgrAPIRuleGroupModifyRequestV1) validateDiffType(formats strfmt.Registry) error {

	if err := validate.Required("diff_type", "body", m.DiffType); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleGroupModifyRequestV1) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleGroupModifyRequestV1) validateRuleIds(formats strfmt.Registry) error {

	if err := validate.Required("rule_ids", "body", m.RuleIds); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleGroupModifyRequestV1) validateRuleVersions(formats strfmt.Registry) error {

	if err := validate.Required("rule_versions", "body", m.RuleVersions); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleGroupModifyRequestV1) validateTracking(formats strfmt.Registry) error {

	if err := validate.Required("tracking", "body", m.Tracking); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this fwmgr api rule group modify request v1 based on the context it is used
func (m *FwmgrAPIRuleGroupModifyRequestV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiffOperations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FwmgrAPIRuleGroupModifyRequestV1) contextValidateDiffOperations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DiffOperations); i++ {

		if m.DiffOperations[i] != nil {
			if err := m.DiffOperations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diff_operations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("diff_operations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FwmgrAPIRuleGroupModifyRequestV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FwmgrAPIRuleGroupModifyRequestV1) UnmarshalBinary(b []byte) error {
	var res FwmgrAPIRuleGroupModifyRequestV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
