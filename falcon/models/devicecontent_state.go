// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DevicecontentState devicecontent state
//
// swagger:model devicecontent.State
type DevicecontentState struct {

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// content update policy applied date
	ContentUpdatePolicyAppliedDate string `json:"content_update_policy_applied_date,omitempty"`

	// content update policy id
	ContentUpdatePolicyID string `json:"content_update_policy_id,omitempty"`

	// device id
	// Required: true
	DeviceID *string `json:"device_id"`

	// groups
	Groups []string `json:"groups"`

	// hidden status
	HiddenStatus string `json:"hidden_status,omitempty"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// last seen
	LastSeen string `json:"last_seen,omitempty"`

	// platform name
	PlatformName string `json:"platform_name,omitempty"`

	// rapid response content
	RapidResponseContent *DevicecontentContentCategory `json:"rapid_response_content,omitempty"`

	// reduced functionality mode
	ReducedFunctionalityMode string `json:"reduced_functionality_mode,omitempty"`

	// sensor operations
	SensorOperations *DevicecontentContentCategory `json:"sensor_operations,omitempty"`

	// system critical
	SystemCritical *DevicecontentContentCategory `json:"system_critical,omitempty"`

	// vulnerability management
	VulnerabilityManagement *DevicecontentContentCategory `json:"vulnerability_management,omitempty"`
}

// Validate validates this devicecontent state
func (m *DevicecontentState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRapidResponseContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSensorOperations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemCritical(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVulnerabilityManagement(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontentState) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontentState) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("device_id", "body", m.DeviceID); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontentState) validateRapidResponseContent(formats strfmt.Registry) error {
	if swag.IsZero(m.RapidResponseContent) { // not required
		return nil
	}

	if m.RapidResponseContent != nil {
		if err := m.RapidResponseContent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rapid_response_content")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rapid_response_content")
			}
			return err
		}
	}

	return nil
}

func (m *DevicecontentState) validateSensorOperations(formats strfmt.Registry) error {
	if swag.IsZero(m.SensorOperations) { // not required
		return nil
	}

	if m.SensorOperations != nil {
		if err := m.SensorOperations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sensor_operations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sensor_operations")
			}
			return err
		}
	}

	return nil
}

func (m *DevicecontentState) validateSystemCritical(formats strfmt.Registry) error {
	if swag.IsZero(m.SystemCritical) { // not required
		return nil
	}

	if m.SystemCritical != nil {
		if err := m.SystemCritical.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("system_critical")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("system_critical")
			}
			return err
		}
	}

	return nil
}

func (m *DevicecontentState) validateVulnerabilityManagement(formats strfmt.Registry) error {
	if swag.IsZero(m.VulnerabilityManagement) { // not required
		return nil
	}

	if m.VulnerabilityManagement != nil {
		if err := m.VulnerabilityManagement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vulnerability_management")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vulnerability_management")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this devicecontent state based on the context it is used
func (m *DevicecontentState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRapidResponseContent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSensorOperations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSystemCritical(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVulnerabilityManagement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontentState) contextValidateRapidResponseContent(ctx context.Context, formats strfmt.Registry) error {

	if m.RapidResponseContent != nil {

		if swag.IsZero(m.RapidResponseContent) { // not required
			return nil
		}

		if err := m.RapidResponseContent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rapid_response_content")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rapid_response_content")
			}
			return err
		}
	}

	return nil
}

func (m *DevicecontentState) contextValidateSensorOperations(ctx context.Context, formats strfmt.Registry) error {

	if m.SensorOperations != nil {

		if swag.IsZero(m.SensorOperations) { // not required
			return nil
		}

		if err := m.SensorOperations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sensor_operations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sensor_operations")
			}
			return err
		}
	}

	return nil
}

func (m *DevicecontentState) contextValidateSystemCritical(ctx context.Context, formats strfmt.Registry) error {

	if m.SystemCritical != nil {

		if swag.IsZero(m.SystemCritical) { // not required
			return nil
		}

		if err := m.SystemCritical.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("system_critical")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("system_critical")
			}
			return err
		}
	}

	return nil
}

func (m *DevicecontentState) contextValidateVulnerabilityManagement(ctx context.Context, formats strfmt.Registry) error {

	if m.VulnerabilityManagement != nil {

		if swag.IsZero(m.VulnerabilityManagement) { // not required
			return nil
		}

		if err := m.VulnerabilityManagement.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vulnerability_management")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vulnerability_management")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DevicecontentState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevicecontentState) UnmarshalBinary(b []byte) error {
	var res DevicecontentState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
