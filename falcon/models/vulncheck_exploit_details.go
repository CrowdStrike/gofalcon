// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VulncheckExploitDetails vulncheck exploit details
//
// swagger:model vulncheck.ExploitDetails
type VulncheckExploitDetails struct {

	// botnets
	Botnets []*VulncheckExploitBotnets `json:"botnets"`

	// counts
	// Required: true
	Counts *VulncheckExploitCounts `json:"counts"`

	// epss
	Epss *VulncheckEPSS `json:"epss,omitempty"`

	// exploit found
	// Required: true
	ExploitFound *bool `json:"exploit_found"`

	// exploits
	Exploits []*VulncheckExploitRecord `json:"exploits"`

	// max exploit maturity
	// Required: true
	MaxExploitMaturity *string `json:"max_exploit_maturity"`

	// ransomware
	Ransomware []*VulncheckExploitRansomware `json:"ransomware"`

	// reported exploited by botnets
	// Required: true
	ReportedExploitedByBotnets *bool `json:"reported_exploited_by_botnets"`

	// reported exploited by named threat actors
	// Required: true
	ReportedExploitedByNamedThreatActors *bool `json:"reported_exploited_by_named_threat_actors"`

	// reported exploited by ransomware
	// Required: true
	ReportedExploitedByRansomware *bool `json:"reported_exploited_by_ransomware"`

	// reported exploited in the wild
	// Required: true
	ReportedExploitedInTheWild *bool `json:"reported_exploited_in_the_wild"`

	// threat actors
	ThreatActors []*VulncheckExploitThreatActor `json:"threat_actors"`

	// timeline
	// Required: true
	Timeline *VulncheckExploitTimeline `json:"timeline"`

	// trending
	// Required: true
	Trending *VulncheckExploitTrending `json:"trending"`
}

// Validate validates this vulncheck exploit details
func (m *VulncheckExploitDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBotnets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEpss(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExploitFound(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExploits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxExploitMaturity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRansomware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportedExploitedByBotnets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportedExploitedByNamedThreatActors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportedExploitedByRansomware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportedExploitedInTheWild(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThreatActors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrending(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulncheckExploitDetails) validateBotnets(formats strfmt.Registry) error {
	if swag.IsZero(m.Botnets) { // not required
		return nil
	}

	for i := 0; i < len(m.Botnets); i++ {
		if swag.IsZero(m.Botnets[i]) { // not required
			continue
		}

		if m.Botnets[i] != nil {
			if err := m.Botnets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("botnets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("botnets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VulncheckExploitDetails) validateCounts(formats strfmt.Registry) error {

	if err := validate.Required("counts", "body", m.Counts); err != nil {
		return err
	}

	if m.Counts != nil {
		if err := m.Counts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("counts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("counts")
			}
			return err
		}
	}

	return nil
}

func (m *VulncheckExploitDetails) validateEpss(formats strfmt.Registry) error {
	if swag.IsZero(m.Epss) { // not required
		return nil
	}

	if m.Epss != nil {
		if err := m.Epss.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("epss")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("epss")
			}
			return err
		}
	}

	return nil
}

func (m *VulncheckExploitDetails) validateExploitFound(formats strfmt.Registry) error {

	if err := validate.Required("exploit_found", "body", m.ExploitFound); err != nil {
		return err
	}

	return nil
}

func (m *VulncheckExploitDetails) validateExploits(formats strfmt.Registry) error {
	if swag.IsZero(m.Exploits) { // not required
		return nil
	}

	for i := 0; i < len(m.Exploits); i++ {
		if swag.IsZero(m.Exploits[i]) { // not required
			continue
		}

		if m.Exploits[i] != nil {
			if err := m.Exploits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exploits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exploits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VulncheckExploitDetails) validateMaxExploitMaturity(formats strfmt.Registry) error {

	if err := validate.Required("max_exploit_maturity", "body", m.MaxExploitMaturity); err != nil {
		return err
	}

	return nil
}

func (m *VulncheckExploitDetails) validateRansomware(formats strfmt.Registry) error {
	if swag.IsZero(m.Ransomware) { // not required
		return nil
	}

	for i := 0; i < len(m.Ransomware); i++ {
		if swag.IsZero(m.Ransomware[i]) { // not required
			continue
		}

		if m.Ransomware[i] != nil {
			if err := m.Ransomware[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ransomware" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ransomware" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VulncheckExploitDetails) validateReportedExploitedByBotnets(formats strfmt.Registry) error {

	if err := validate.Required("reported_exploited_by_botnets", "body", m.ReportedExploitedByBotnets); err != nil {
		return err
	}

	return nil
}

func (m *VulncheckExploitDetails) validateReportedExploitedByNamedThreatActors(formats strfmt.Registry) error {

	if err := validate.Required("reported_exploited_by_named_threat_actors", "body", m.ReportedExploitedByNamedThreatActors); err != nil {
		return err
	}

	return nil
}

func (m *VulncheckExploitDetails) validateReportedExploitedByRansomware(formats strfmt.Registry) error {

	if err := validate.Required("reported_exploited_by_ransomware", "body", m.ReportedExploitedByRansomware); err != nil {
		return err
	}

	return nil
}

func (m *VulncheckExploitDetails) validateReportedExploitedInTheWild(formats strfmt.Registry) error {

	if err := validate.Required("reported_exploited_in_the_wild", "body", m.ReportedExploitedInTheWild); err != nil {
		return err
	}

	return nil
}

func (m *VulncheckExploitDetails) validateThreatActors(formats strfmt.Registry) error {
	if swag.IsZero(m.ThreatActors) { // not required
		return nil
	}

	for i := 0; i < len(m.ThreatActors); i++ {
		if swag.IsZero(m.ThreatActors[i]) { // not required
			continue
		}

		if m.ThreatActors[i] != nil {
			if err := m.ThreatActors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("threat_actors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("threat_actors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VulncheckExploitDetails) validateTimeline(formats strfmt.Registry) error {

	if err := validate.Required("timeline", "body", m.Timeline); err != nil {
		return err
	}

	if m.Timeline != nil {
		if err := m.Timeline.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeline")
			}
			return err
		}
	}

	return nil
}

func (m *VulncheckExploitDetails) validateTrending(formats strfmt.Registry) error {

	if err := validate.Required("trending", "body", m.Trending); err != nil {
		return err
	}

	if m.Trending != nil {
		if err := m.Trending.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trending")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trending")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vulncheck exploit details based on the context it is used
func (m *VulncheckExploitDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBotnets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEpss(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExploits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRansomware(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThreatActors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeline(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrending(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulncheckExploitDetails) contextValidateBotnets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Botnets); i++ {

		if m.Botnets[i] != nil {

			if swag.IsZero(m.Botnets[i]) { // not required
				return nil
			}

			if err := m.Botnets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("botnets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("botnets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VulncheckExploitDetails) contextValidateCounts(ctx context.Context, formats strfmt.Registry) error {

	if m.Counts != nil {

		if err := m.Counts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("counts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("counts")
			}
			return err
		}
	}

	return nil
}

func (m *VulncheckExploitDetails) contextValidateEpss(ctx context.Context, formats strfmt.Registry) error {

	if m.Epss != nil {

		if swag.IsZero(m.Epss) { // not required
			return nil
		}

		if err := m.Epss.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("epss")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("epss")
			}
			return err
		}
	}

	return nil
}

func (m *VulncheckExploitDetails) contextValidateExploits(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Exploits); i++ {

		if m.Exploits[i] != nil {

			if swag.IsZero(m.Exploits[i]) { // not required
				return nil
			}

			if err := m.Exploits[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exploits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exploits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VulncheckExploitDetails) contextValidateRansomware(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ransomware); i++ {

		if m.Ransomware[i] != nil {

			if swag.IsZero(m.Ransomware[i]) { // not required
				return nil
			}

			if err := m.Ransomware[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ransomware" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ransomware" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VulncheckExploitDetails) contextValidateThreatActors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ThreatActors); i++ {

		if m.ThreatActors[i] != nil {

			if swag.IsZero(m.ThreatActors[i]) { // not required
				return nil
			}

			if err := m.ThreatActors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("threat_actors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("threat_actors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VulncheckExploitDetails) contextValidateTimeline(ctx context.Context, formats strfmt.Registry) error {

	if m.Timeline != nil {

		if err := m.Timeline.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeline")
			}
			return err
		}
	}

	return nil
}

func (m *VulncheckExploitDetails) contextValidateTrending(ctx context.Context, formats strfmt.Registry) error {

	if m.Trending != nil {

		if err := m.Trending.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trending")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trending")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VulncheckExploitDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VulncheckExploitDetails) UnmarshalBinary(b []byte) error {
	var res VulncheckExploitDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
