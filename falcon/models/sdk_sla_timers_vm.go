// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SdkSLATimersVM sdk SLA timers VM
//
// swagger:model sdk.SLATimersVM
type SdkSLATimersVM struct {

	// acknowledgement
	// Required: true
	Acknowledgement *SdkSLATimerVM `json:"acknowledgement"`

	// resolution
	// Required: true
	Resolution *SdkSLATimerVM `json:"resolution"`
}

// Validate validates this sdk SLA timers VM
func (m *SdkSLATimersVM) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcknowledgement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResolution(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SdkSLATimersVM) validateAcknowledgement(formats strfmt.Registry) error {

	if err := validate.Required("acknowledgement", "body", m.Acknowledgement); err != nil {
		return err
	}

	if m.Acknowledgement != nil {
		if err := m.Acknowledgement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acknowledgement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acknowledgement")
			}
			return err
		}
	}

	return nil
}

func (m *SdkSLATimersVM) validateResolution(formats strfmt.Registry) error {

	if err := validate.Required("resolution", "body", m.Resolution); err != nil {
		return err
	}

	if m.Resolution != nil {
		if err := m.Resolution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resolution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resolution")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sdk SLA timers VM based on the context it is used
func (m *SdkSLATimersVM) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAcknowledgement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResolution(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SdkSLATimersVM) contextValidateAcknowledgement(ctx context.Context, formats strfmt.Registry) error {

	if m.Acknowledgement != nil {

		if err := m.Acknowledgement.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acknowledgement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acknowledgement")
			}
			return err
		}
	}

	return nil
}

func (m *SdkSLATimersVM) contextValidateResolution(ctx context.Context, formats strfmt.Registry) error {

	if m.Resolution != nil {

		if err := m.Resolution.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resolution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resolution")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SdkSLATimersVM) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SdkSLATimersVM) UnmarshalBinary(b []byte) error {
	var res SdkSLATimersVM
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
