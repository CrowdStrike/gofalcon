// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApidomainDynamicExecuteSearchRequestV1 apidomain dynamic execute search request v1
//
// swagger:model apidomain.DynamicExecuteSearchRequestV1
type ApidomainDynamicExecuteSearchRequestV1 struct {

	// end
	End string `json:"end,omitempty"`

	// repo or view
	// Required: true
	RepoOrView *string `json:"repo_or_view"`

	// search query
	// Required: true
	SearchQuery *string `json:"search_query"`

	// search query args
	// Required: true
	SearchQueryArgs interface{} `json:"search_query_args"`

	// start
	Start string `json:"start,omitempty"`
}

// Validate validates this apidomain dynamic execute search request v1
func (m *ApidomainDynamicExecuteSearchRequestV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRepoOrView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSearchQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSearchQueryArgs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApidomainDynamicExecuteSearchRequestV1) validateRepoOrView(formats strfmt.Registry) error {

	if err := validate.Required("repo_or_view", "body", m.RepoOrView); err != nil {
		return err
	}

	return nil
}

func (m *ApidomainDynamicExecuteSearchRequestV1) validateSearchQuery(formats strfmt.Registry) error {

	if err := validate.Required("search_query", "body", m.SearchQuery); err != nil {
		return err
	}

	return nil
}

func (m *ApidomainDynamicExecuteSearchRequestV1) validateSearchQueryArgs(formats strfmt.Registry) error {

	if m.SearchQueryArgs == nil {
		return errors.Required("search_query_args", "body", nil)
	}

	return nil
}

// ContextValidate validates this apidomain dynamic execute search request v1 based on context it is used
func (m *ApidomainDynamicExecuteSearchRequestV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ApidomainDynamicExecuteSearchRequestV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApidomainDynamicExecuteSearchRequestV1) UnmarshalBinary(b []byte) error {
	var res ApidomainDynamicExecuteSearchRequestV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
