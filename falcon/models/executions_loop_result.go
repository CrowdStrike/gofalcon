// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExecutionsLoopResult executions loop result
//
// swagger:model executions.LoopResult
type ExecutionsLoopResult struct {

	// Details of all child executions associated with the loop. A child execution is generated for each iteration of the input data.
	// Required: true
	ChildExecutions []*ExecutionsChildExecutionResult `json:"child_executions"`

	// Timestamp of when the execution completed. Only present when status is an end state.
	// Format: date-time
	EndTimestamp strfmt.DateTime `json:"end_timestamp,omitempty"`

	// When a node execution is in an error status this field is present and provides an error code that can be used to determine details why the failure occurred.
	ErrorCode int32 `json:"error_code,omitempty"`

	// When a node execution is in an error status this field is present and provides a user friendly error message.
	ErrorMessage string `json:"error_message,omitempty"`

	// Display name of the input field that the sub model is iterating over.
	// Required: true
	InputField *string `json:"input_field"`

	// Metadata about aggregate iteration count per status. This is computed from child_executions.
	// Required: true
	Iterations *ExecutionsIterations `json:"iterations"`

	// Whether this node's result is mocked
	Mocked bool `json:"mocked,omitempty"`

	// Unique id of the node as specified in the definition.
	// Required: true
	NodeID *string `json:"node_id"`

	// Timestamp of when the execution first started.
	// Required: true
	// Format: date-time
	StartTimestamp *strfmt.DateTime `json:"start_timestamp"`

	// Current status of execution for the activity.
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this executions loop result
func (m *ExecutionsLoopResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChildExecutions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIterations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExecutionsLoopResult) validateChildExecutions(formats strfmt.Registry) error {

	if err := validate.Required("child_executions", "body", m.ChildExecutions); err != nil {
		return err
	}

	for i := 0; i < len(m.ChildExecutions); i++ {
		if swag.IsZero(m.ChildExecutions[i]) { // not required
			continue
		}

		if m.ChildExecutions[i] != nil {
			if err := m.ChildExecutions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("child_executions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("child_executions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExecutionsLoopResult) validateEndTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.EndTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("end_timestamp", "body", "date-time", m.EndTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionsLoopResult) validateInputField(formats strfmt.Registry) error {

	if err := validate.Required("input_field", "body", m.InputField); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionsLoopResult) validateIterations(formats strfmt.Registry) error {

	if err := validate.Required("iterations", "body", m.Iterations); err != nil {
		return err
	}

	if m.Iterations != nil {
		if err := m.Iterations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iterations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iterations")
			}
			return err
		}
	}

	return nil
}

func (m *ExecutionsLoopResult) validateNodeID(formats strfmt.Registry) error {

	if err := validate.Required("node_id", "body", m.NodeID); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionsLoopResult) validateStartTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("start_timestamp", "body", m.StartTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("start_timestamp", "body", "date-time", m.StartTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionsLoopResult) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this executions loop result based on the context it is used
func (m *ExecutionsLoopResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChildExecutions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIterations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExecutionsLoopResult) contextValidateChildExecutions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ChildExecutions); i++ {

		if m.ChildExecutions[i] != nil {

			if swag.IsZero(m.ChildExecutions[i]) { // not required
				return nil
			}

			if err := m.ChildExecutions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("child_executions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("child_executions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExecutionsLoopResult) contextValidateIterations(ctx context.Context, formats strfmt.Registry) error {

	if m.Iterations != nil {

		if err := m.Iterations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iterations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iterations")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExecutionsLoopResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExecutionsLoopResult) UnmarshalBinary(b []byte) error {
	var res ExecutionsLoopResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
