// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DetectionEnrichmentHost detection enrichment host
//
// swagger:model detection.EnrichmentHost
type DetectionEnrichmentHost struct {

	// id
	ID string `json:"id,omitempty"`

	// launch time
	LaunchTime int32 `json:"launch_time,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// network
	Network *DetectionHostNetwork `json:"network,omitempty"`

	// platform
	Platform string `json:"platform,omitempty"`

	// region
	Region string `json:"region,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this detection enrichment host
func (m *DetectionEnrichmentHost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DetectionEnrichmentHost) validateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this detection enrichment host based on the context it is used
func (m *DetectionEnrichmentHost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DetectionEnrichmentHost) contextValidateNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.Network != nil {

		if swag.IsZero(m.Network) { // not required
			return nil
		}

		if err := m.Network.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DetectionEnrichmentHost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DetectionEnrichmentHost) UnmarshalBinary(b []byte) error {
	var res DetectionEnrichmentHost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
