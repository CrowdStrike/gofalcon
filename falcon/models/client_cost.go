// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClientCost client cost
//
// swagger:model client.Cost
type ClientCost struct {

	// live cost
	// Required: true
	LiveCost *int32 `json:"liveCost"`

	// query count
	// Required: true
	QueryCount *int32 `json:"queryCount"`

	// static cost
	// Required: true
	StaticCost *int32 `json:"staticCost"`
}

// Validate validates this client cost
func (m *ClientCost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLiveCost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStaticCost(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClientCost) validateLiveCost(formats strfmt.Registry) error {

	if err := validate.Required("liveCost", "body", m.LiveCost); err != nil {
		return err
	}

	return nil
}

func (m *ClientCost) validateQueryCount(formats strfmt.Registry) error {

	if err := validate.Required("queryCount", "body", m.QueryCount); err != nil {
		return err
	}

	return nil
}

func (m *ClientCost) validateStaticCost(formats strfmt.Registry) error {

	if err := validate.Required("staticCost", "body", m.StaticCost); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this client cost based on context it is used
func (m *ClientCost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClientCost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClientCost) UnmarshalBinary(b []byte) error {
	var res ClientCost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
