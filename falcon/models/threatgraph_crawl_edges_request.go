// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ThreatgraphCrawlEdgesRequest threatgraph crawl edges request
//
// swagger:model threatgraph.CrawlEdgesRequest
type ThreatgraphCrawlEdgesRequest struct {

	// edge direction
	// Required: true
	EdgeDirection *string `json:"edge_direction"`

	// edge type
	// Required: true
	EdgeType *string `json:"edge_type"`

	// limit
	// Required: true
	Limit *int32 `json:"limit"`

	// next requests
	NextRequests []*ThreatgraphCrawlEdgesRequest `json:"next_requests"`

	// scope
	// Required: true
	Scope *string `json:"scope"`

	// sort descending
	SortDescending bool `json:"sort_descending,omitempty"`
}

// Validate validates this threatgraph crawl edges request
func (m *ThreatgraphCrawlEdgesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEdgeDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextRequests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThreatgraphCrawlEdgesRequest) validateEdgeDirection(formats strfmt.Registry) error {

	if err := validate.Required("edge_direction", "body", m.EdgeDirection); err != nil {
		return err
	}

	return nil
}

func (m *ThreatgraphCrawlEdgesRequest) validateEdgeType(formats strfmt.Registry) error {

	if err := validate.Required("edge_type", "body", m.EdgeType); err != nil {
		return err
	}

	return nil
}

func (m *ThreatgraphCrawlEdgesRequest) validateLimit(formats strfmt.Registry) error {

	if err := validate.Required("limit", "body", m.Limit); err != nil {
		return err
	}

	return nil
}

func (m *ThreatgraphCrawlEdgesRequest) validateNextRequests(formats strfmt.Registry) error {
	if swag.IsZero(m.NextRequests) { // not required
		return nil
	}

	for i := 0; i < len(m.NextRequests); i++ {
		if swag.IsZero(m.NextRequests[i]) { // not required
			continue
		}

		if m.NextRequests[i] != nil {
			if err := m.NextRequests[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("next_requests" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("next_requests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ThreatgraphCrawlEdgesRequest) validateScope(formats strfmt.Registry) error {

	if err := validate.Required("scope", "body", m.Scope); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this threatgraph crawl edges request based on the context it is used
func (m *ThreatgraphCrawlEdgesRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNextRequests(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThreatgraphCrawlEdgesRequest) contextValidateNextRequests(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NextRequests); i++ {

		if m.NextRequests[i] != nil {
			if err := m.NextRequests[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("next_requests" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("next_requests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ThreatgraphCrawlEdgesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThreatgraphCrawlEdgesRequest) UnmarshalBinary(b []byte) error {
	var res ThreatgraphCrawlEdgesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
