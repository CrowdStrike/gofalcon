// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsAPIAssessmentDetections models API assessment detections
//
// swagger:model models.APIAssessmentDetections
type ModelsAPIAssessmentDetections struct {

	// description
	// Required: true
	Description *string `json:"description"`

	// details
	// Required: true
	Details *string `json:"details"`

	// detection type
	// Required: true
	DetectionType *string `json:"detection_type"`

	// id
	// Required: true
	ID *string `json:"id"`

	// image architecture
	// Required: true
	ImageArchitecture *string `json:"image_architecture"`

	// image created at
	// Required: true
	ImageCreatedAt *string `json:"image_created_at"`

	// image digest
	// Required: true
	ImageDigest *string `json:"image_digest"`

	// image id
	// Required: true
	ImageID *string `json:"image_id"`

	// image registry
	// Required: true
	ImageRegistry *string `json:"image_registry"`

	// image repository
	// Required: true
	ImageRepository *string `json:"image_repository"`

	// image size
	// Required: true
	ImageSize *string `json:"image_size"`

	// image tag
	// Required: true
	ImageTag *string `json:"image_tag"`

	// name
	// Required: true
	Name *string `json:"name"`

	// os name
	// Required: true
	OsName *string `json:"os_name"`

	// os version
	// Required: true
	OsVersion *string `json:"os_version"`

	// remediation
	// Required: true
	Remediation *string `json:"remediation"`

	// severity
	// Required: true
	Severity *string `json:"severity"`

	// title
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this models API assessment detections
func (m *ModelsAPIAssessmentDetections) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageArchitecture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageDigest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageRegistry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIAssessmentDetections) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIAssessmentDetections) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("details", "body", m.Details); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIAssessmentDetections) validateDetectionType(formats strfmt.Registry) error {

	if err := validate.Required("detection_type", "body", m.DetectionType); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIAssessmentDetections) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIAssessmentDetections) validateImageArchitecture(formats strfmt.Registry) error {

	if err := validate.Required("image_architecture", "body", m.ImageArchitecture); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIAssessmentDetections) validateImageCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("image_created_at", "body", m.ImageCreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIAssessmentDetections) validateImageDigest(formats strfmt.Registry) error {

	if err := validate.Required("image_digest", "body", m.ImageDigest); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIAssessmentDetections) validateImageID(formats strfmt.Registry) error {

	if err := validate.Required("image_id", "body", m.ImageID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIAssessmentDetections) validateImageRegistry(formats strfmt.Registry) error {

	if err := validate.Required("image_registry", "body", m.ImageRegistry); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIAssessmentDetections) validateImageRepository(formats strfmt.Registry) error {

	if err := validate.Required("image_repository", "body", m.ImageRepository); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIAssessmentDetections) validateImageSize(formats strfmt.Registry) error {

	if err := validate.Required("image_size", "body", m.ImageSize); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIAssessmentDetections) validateImageTag(formats strfmt.Registry) error {

	if err := validate.Required("image_tag", "body", m.ImageTag); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIAssessmentDetections) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIAssessmentDetections) validateOsName(formats strfmt.Registry) error {

	if err := validate.Required("os_name", "body", m.OsName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIAssessmentDetections) validateOsVersion(formats strfmt.Registry) error {

	if err := validate.Required("os_version", "body", m.OsVersion); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIAssessmentDetections) validateRemediation(formats strfmt.Registry) error {

	if err := validate.Required("remediation", "body", m.Remediation); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIAssessmentDetections) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIAssessmentDetections) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models API assessment detections based on context it is used
func (m *ModelsAPIAssessmentDetections) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsAPIAssessmentDetections) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsAPIAssessmentDetections) UnmarshalBinary(b []byte) error {
	var res ModelsAPIAssessmentDetections
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
