// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SdkSLAVM sdk SLA VM
//
// swagger:model sdk.SLAVM
type SdkSLAVM struct {

	// active timer status
	// Required: true
	ActiveTimerStatus *string `json:"active_timer_status"`

	// active timer time due
	// Required: true
	ActiveTimerTimeDue *int64 `json:"active_timer_time_due"`

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// snapshot id
	// Required: true
	SnapshotID *string `json:"snapshot_id"`

	// timers
	// Required: true
	Timers *SdkSLATimersVM `json:"timers"`
}

// Validate validates this sdk SLA VM
func (m *SdkSLAVM) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveTimerStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActiveTimerTimeDue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SdkSLAVM) validateActiveTimerStatus(formats strfmt.Registry) error {

	if err := validate.Required("active_timer_status", "body", m.ActiveTimerStatus); err != nil {
		return err
	}

	return nil
}

func (m *SdkSLAVM) validateActiveTimerTimeDue(formats strfmt.Registry) error {

	if err := validate.Required("active_timer_time_due", "body", m.ActiveTimerTimeDue); err != nil {
		return err
	}

	return nil
}

func (m *SdkSLAVM) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SdkSLAVM) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SdkSLAVM) validateSnapshotID(formats strfmt.Registry) error {

	if err := validate.Required("snapshot_id", "body", m.SnapshotID); err != nil {
		return err
	}

	return nil
}

func (m *SdkSLAVM) validateTimers(formats strfmt.Registry) error {

	if err := validate.Required("timers", "body", m.Timers); err != nil {
		return err
	}

	if m.Timers != nil {
		if err := m.Timers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timers")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sdk SLA VM based on the context it is used
func (m *SdkSLAVM) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTimers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SdkSLAVM) contextValidateTimers(ctx context.Context, formats strfmt.Registry) error {

	if m.Timers != nil {

		if err := m.Timers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timers")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SdkSLAVM) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SdkSLAVM) UnmarshalBinary(b []byte) error {
	var res SdkSLAVM
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
