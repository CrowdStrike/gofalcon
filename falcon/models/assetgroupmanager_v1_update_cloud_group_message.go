// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssetgroupmanagerV1UpdateCloudGroupMessage assetgroupmanager v1 update cloud group message
//
// swagger:model assetgroupmanager.v1.UpdateCloudGroupMessage
type AssetgroupmanagerV1UpdateCloudGroupMessage struct {

	// The new Business Impact for the group.
	// It will be deleted if the value is sent empty.
	// Enum: [ high moderate low]
	BusinessImpact string `json:"business_impact,omitempty"`

	// Business Impact is one of the "business context" field of the group.
	// It will be deleted if the value is sent empty.
	// Max Length: 100
	BusinessUnit string `json:"business_unit,omitempty"`

	// The new Description for the group.
	// Max Length: 1000
	Description string `json:"description,omitempty"`

	// Environment is one of the "business context" field of the group.
	// It will be deleted if the value is sent empty.
	// Enum: [ dev test stage prod]
	Environment string `json:"environment,omitempty"`

	// The UUID of the group to be updated.
	ID string `json:"id,omitempty"`

	// Group name is unique and case insensitive.
	// Max Length: 100
	Name string `json:"name,omitempty"`

	// The owners field contains a list of user emails.
	// An empty list of owners means that the group will be updated to have no owners.
	Owners []string `json:"owners"`

	// The new Selectors for the cloud group.
	// This doesn't support partial updates and always must include **all existing selectors**.
	Selectors *AssetgroupmanagerV1WriteCloudGroupSelectors `json:"selectors,omitempty"`
}

// Validate validates this assetgroupmanager v1 update cloud group message
func (m *AssetgroupmanagerV1UpdateCloudGroupMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBusinessImpact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var assetgroupmanagerV1UpdateCloudGroupMessageTypeBusinessImpactPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","high","moderate","low"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assetgroupmanagerV1UpdateCloudGroupMessageTypeBusinessImpactPropEnum = append(assetgroupmanagerV1UpdateCloudGroupMessageTypeBusinessImpactPropEnum, v)
	}
}

const (

	// AssetgroupmanagerV1UpdateCloudGroupMessageBusinessImpactEmpty captures enum value ""
	AssetgroupmanagerV1UpdateCloudGroupMessageBusinessImpactEmpty string = ""

	// AssetgroupmanagerV1UpdateCloudGroupMessageBusinessImpactHigh captures enum value "high"
	AssetgroupmanagerV1UpdateCloudGroupMessageBusinessImpactHigh string = "high"

	// AssetgroupmanagerV1UpdateCloudGroupMessageBusinessImpactModerate captures enum value "moderate"
	AssetgroupmanagerV1UpdateCloudGroupMessageBusinessImpactModerate string = "moderate"

	// AssetgroupmanagerV1UpdateCloudGroupMessageBusinessImpactLow captures enum value "low"
	AssetgroupmanagerV1UpdateCloudGroupMessageBusinessImpactLow string = "low"
)

// prop value enum
func (m *AssetgroupmanagerV1UpdateCloudGroupMessage) validateBusinessImpactEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, assetgroupmanagerV1UpdateCloudGroupMessageTypeBusinessImpactPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AssetgroupmanagerV1UpdateCloudGroupMessage) validateBusinessImpact(formats strfmt.Registry) error {
	if swag.IsZero(m.BusinessImpact) { // not required
		return nil
	}

	// value enum
	if err := m.validateBusinessImpactEnum("business_impact", "body", m.BusinessImpact); err != nil {
		return err
	}

	return nil
}

func (m *AssetgroupmanagerV1UpdateCloudGroupMessage) validateBusinessUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.BusinessUnit) { // not required
		return nil
	}

	if err := validate.MaxLength("business_unit", "body", m.BusinessUnit, 100); err != nil {
		return err
	}

	return nil
}

func (m *AssetgroupmanagerV1UpdateCloudGroupMessage) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 1000); err != nil {
		return err
	}

	return nil
}

var assetgroupmanagerV1UpdateCloudGroupMessageTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","dev","test","stage","prod"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assetgroupmanagerV1UpdateCloudGroupMessageTypeEnvironmentPropEnum = append(assetgroupmanagerV1UpdateCloudGroupMessageTypeEnvironmentPropEnum, v)
	}
}

const (

	// AssetgroupmanagerV1UpdateCloudGroupMessageEnvironmentEmpty captures enum value ""
	AssetgroupmanagerV1UpdateCloudGroupMessageEnvironmentEmpty string = ""

	// AssetgroupmanagerV1UpdateCloudGroupMessageEnvironmentDev captures enum value "dev"
	AssetgroupmanagerV1UpdateCloudGroupMessageEnvironmentDev string = "dev"

	// AssetgroupmanagerV1UpdateCloudGroupMessageEnvironmentTest captures enum value "test"
	AssetgroupmanagerV1UpdateCloudGroupMessageEnvironmentTest string = "test"

	// AssetgroupmanagerV1UpdateCloudGroupMessageEnvironmentStage captures enum value "stage"
	AssetgroupmanagerV1UpdateCloudGroupMessageEnvironmentStage string = "stage"

	// AssetgroupmanagerV1UpdateCloudGroupMessageEnvironmentProd captures enum value "prod"
	AssetgroupmanagerV1UpdateCloudGroupMessageEnvironmentProd string = "prod"
)

// prop value enum
func (m *AssetgroupmanagerV1UpdateCloudGroupMessage) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, assetgroupmanagerV1UpdateCloudGroupMessageTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AssetgroupmanagerV1UpdateCloudGroupMessage) validateEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnvironmentEnum("environment", "body", m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *AssetgroupmanagerV1UpdateCloudGroupMessage) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", m.Name, 100); err != nil {
		return err
	}

	return nil
}

func (m *AssetgroupmanagerV1UpdateCloudGroupMessage) validateSelectors(formats strfmt.Registry) error {
	if swag.IsZero(m.Selectors) { // not required
		return nil
	}

	if m.Selectors != nil {
		if err := m.Selectors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selectors")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("selectors")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this assetgroupmanager v1 update cloud group message based on the context it is used
func (m *AssetgroupmanagerV1UpdateCloudGroupMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelectors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetgroupmanagerV1UpdateCloudGroupMessage) contextValidateSelectors(ctx context.Context, formats strfmt.Registry) error {

	if m.Selectors != nil {

		if swag.IsZero(m.Selectors) { // not required
			return nil
		}

		if err := m.Selectors.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selectors")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("selectors")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetgroupmanagerV1UpdateCloudGroupMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetgroupmanagerV1UpdateCloudGroupMessage) UnmarshalBinary(b []byte) error {
	var res AssetgroupmanagerV1UpdateCloudGroupMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
