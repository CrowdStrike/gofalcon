// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EvaluationsEvaluation evaluations evaluation
//
// swagger:model evaluations.Evaluation
type EvaluationsEvaluation struct {

	// business impact
	BusinessImpact []string `json:"business_impact"`

	// cid
	Cid string `json:"cid,omitempty"`

	// cloud
	Cloud *EvaluationsEvaluationCloud `json:"cloud,omitempty"`

	// cloud groups
	CloudGroups []*DomainCloudScope `json:"cloud_groups"`

	// cloud groups v2
	CloudGroupsV2 []*DomainCloudGroup `json:"cloud_groups_v2"`

	// cloud labels
	CloudLabels []*ClassificationLabel `json:"cloud_labels"`

	// environment
	Environment []string `json:"environment"`

	// evaluation
	Evaluation *EvaluationsEvaluationDoc `json:"evaluation,omitempty"`

	// groups
	Groups []string `json:"groups"`

	// id
	ID string `json:"id,omitempty"`

	// resource
	Resource *EvaluationsEvaluationResource `json:"resource,omitempty"`
}

// Validate validates this evaluations evaluation
func (m *EvaluationsEvaluation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloud(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudGroupsV2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvaluation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvaluationsEvaluation) validateCloud(formats strfmt.Registry) error {
	if swag.IsZero(m.Cloud) { // not required
		return nil
	}

	if m.Cloud != nil {
		if err := m.Cloud.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloud")
			}
			return err
		}
	}

	return nil
}

func (m *EvaluationsEvaluation) validateCloudGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.CloudGroups); i++ {
		if swag.IsZero(m.CloudGroups[i]) { // not required
			continue
		}

		if m.CloudGroups[i] != nil {
			if err := m.CloudGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloud_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloud_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EvaluationsEvaluation) validateCloudGroupsV2(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudGroupsV2) { // not required
		return nil
	}

	for i := 0; i < len(m.CloudGroupsV2); i++ {
		if swag.IsZero(m.CloudGroupsV2[i]) { // not required
			continue
		}

		if m.CloudGroupsV2[i] != nil {
			if err := m.CloudGroupsV2[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloud_groups_v2" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloud_groups_v2" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EvaluationsEvaluation) validateCloudLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudLabels) { // not required
		return nil
	}

	for i := 0; i < len(m.CloudLabels); i++ {
		if swag.IsZero(m.CloudLabels[i]) { // not required
			continue
		}

		if m.CloudLabels[i] != nil {
			if err := m.CloudLabels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloud_labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloud_labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EvaluationsEvaluation) validateEvaluation(formats strfmt.Registry) error {
	if swag.IsZero(m.Evaluation) { // not required
		return nil
	}

	if m.Evaluation != nil {
		if err := m.Evaluation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evaluation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("evaluation")
			}
			return err
		}
	}

	return nil
}

func (m *EvaluationsEvaluation) validateResource(formats strfmt.Registry) error {
	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	if m.Resource != nil {
		if err := m.Resource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resource")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this evaluations evaluation based on the context it is used
func (m *EvaluationsEvaluation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloud(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudGroupsV2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEvaluation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvaluationsEvaluation) contextValidateCloud(ctx context.Context, formats strfmt.Registry) error {

	if m.Cloud != nil {

		if swag.IsZero(m.Cloud) { // not required
			return nil
		}

		if err := m.Cloud.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloud")
			}
			return err
		}
	}

	return nil
}

func (m *EvaluationsEvaluation) contextValidateCloudGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CloudGroups); i++ {

		if m.CloudGroups[i] != nil {

			if swag.IsZero(m.CloudGroups[i]) { // not required
				return nil
			}

			if err := m.CloudGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloud_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloud_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EvaluationsEvaluation) contextValidateCloudGroupsV2(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CloudGroupsV2); i++ {

		if m.CloudGroupsV2[i] != nil {

			if swag.IsZero(m.CloudGroupsV2[i]) { // not required
				return nil
			}

			if err := m.CloudGroupsV2[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloud_groups_v2" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloud_groups_v2" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EvaluationsEvaluation) contextValidateCloudLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CloudLabels); i++ {

		if m.CloudLabels[i] != nil {

			if swag.IsZero(m.CloudLabels[i]) { // not required
				return nil
			}

			if err := m.CloudLabels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloud_labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloud_labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EvaluationsEvaluation) contextValidateEvaluation(ctx context.Context, formats strfmt.Registry) error {

	if m.Evaluation != nil {

		if swag.IsZero(m.Evaluation) { // not required
			return nil
		}

		if err := m.Evaluation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evaluation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("evaluation")
			}
			return err
		}
	}

	return nil
}

func (m *EvaluationsEvaluation) contextValidateResource(ctx context.Context, formats strfmt.Registry) error {

	if m.Resource != nil {

		if swag.IsZero(m.Resource) { // not required
			return nil
		}

		if err := m.Resource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EvaluationsEvaluation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EvaluationsEvaluation) UnmarshalBinary(b []byte) error {
	var res EvaluationsEvaluation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
