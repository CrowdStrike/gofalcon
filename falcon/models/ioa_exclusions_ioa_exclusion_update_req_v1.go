// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoaExclusionsIoaExclusionUpdateReqV1 ioa exclusions ioa exclusion update req v1
//
// swagger:model ioa_exclusions.IoaExclusionUpdateReqV1
type IoaExclusionsIoaExclusionUpdateReqV1 struct {

	// cl regex
	// Required: true
	ClRegex *string `json:"cl_regex"`

	// comment
	Comment string `json:"comment,omitempty"`

	// description
	// Required: true
	Description *string `json:"description"`

	// detection json
	// Required: true
	DetectionJSON *string `json:"detection_json"`

	// groups
	// Required: true
	Groups []string `json:"groups"`

	// id
	// Required: true
	ID *string `json:"id"`

	// ifn regex
	// Required: true
	IfnRegex *string `json:"ifn_regex"`

	// name
	// Required: true
	Name *string `json:"name"`

	// pattern id
	// Required: true
	PatternID *string `json:"pattern_id"`

	// pattern name
	// Required: true
	PatternName *string `json:"pattern_name"`
}

// Validate validates this ioa exclusions ioa exclusion update req v1
func (m *IoaExclusionsIoaExclusionUpdateReqV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClRegex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectionJSON(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIfnRegex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePatternID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePatternName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoaExclusionsIoaExclusionUpdateReqV1) validateClRegex(formats strfmt.Registry) error {

	if err := validate.Required("cl_regex", "body", m.ClRegex); err != nil {
		return err
	}

	return nil
}

func (m *IoaExclusionsIoaExclusionUpdateReqV1) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *IoaExclusionsIoaExclusionUpdateReqV1) validateDetectionJSON(formats strfmt.Registry) error {

	if err := validate.Required("detection_json", "body", m.DetectionJSON); err != nil {
		return err
	}

	return nil
}

func (m *IoaExclusionsIoaExclusionUpdateReqV1) validateGroups(formats strfmt.Registry) error {

	if err := validate.Required("groups", "body", m.Groups); err != nil {
		return err
	}

	return nil
}

func (m *IoaExclusionsIoaExclusionUpdateReqV1) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *IoaExclusionsIoaExclusionUpdateReqV1) validateIfnRegex(formats strfmt.Registry) error {

	if err := validate.Required("ifn_regex", "body", m.IfnRegex); err != nil {
		return err
	}

	return nil
}

func (m *IoaExclusionsIoaExclusionUpdateReqV1) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *IoaExclusionsIoaExclusionUpdateReqV1) validatePatternID(formats strfmt.Registry) error {

	if err := validate.Required("pattern_id", "body", m.PatternID); err != nil {
		return err
	}

	return nil
}

func (m *IoaExclusionsIoaExclusionUpdateReqV1) validatePatternName(formats strfmt.Registry) error {

	if err := validate.Required("pattern_name", "body", m.PatternName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ioa exclusions ioa exclusion update req v1 based on context it is used
func (m *IoaExclusionsIoaExclusionUpdateReqV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IoaExclusionsIoaExclusionUpdateReqV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoaExclusionsIoaExclusionUpdateReqV1) UnmarshalBinary(b []byte) error {
	var res IoaExclusionsIoaExclusionUpdateReqV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
