// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIContentPatternUpdateRequestV1 api content pattern update request v1
//
// swagger:model api.ContentPatternUpdateRequestV1
type APIContentPatternUpdateRequestV1 struct {

	// category
	// Required: true
	Category *string `json:"category"`

	// description
	// Required: true
	Description *string `json:"description"`

	// example
	// Required: true
	Example *string `json:"example"`

	// id
	// Required: true
	ID *string `json:"id"`

	// min match threshold
	// Required: true
	MinMatchThreshold *int32 `json:"min_match_threshold"`

	// name
	Name string `json:"name,omitempty"`

	// regexes
	// Required: true
	Regexes []string `json:"regexes"`

	// region
	// Required: true
	Region *string `json:"region"`
}

// Validate validates this api content pattern update request v1
func (m *APIContentPatternUpdateRequestV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExample(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinMatchThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegexes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIContentPatternUpdateRequestV1) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

func (m *APIContentPatternUpdateRequestV1) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *APIContentPatternUpdateRequestV1) validateExample(formats strfmt.Registry) error {

	if err := validate.Required("example", "body", m.Example); err != nil {
		return err
	}

	return nil
}

func (m *APIContentPatternUpdateRequestV1) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *APIContentPatternUpdateRequestV1) validateMinMatchThreshold(formats strfmt.Registry) error {

	if err := validate.Required("min_match_threshold", "body", m.MinMatchThreshold); err != nil {
		return err
	}

	return nil
}

func (m *APIContentPatternUpdateRequestV1) validateRegexes(formats strfmt.Registry) error {

	if err := validate.Required("regexes", "body", m.Regexes); err != nil {
		return err
	}

	return nil
}

func (m *APIContentPatternUpdateRequestV1) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this api content pattern update request v1 based on context it is used
func (m *APIContentPatternUpdateRequestV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *APIContentPatternUpdateRequestV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIContentPatternUpdateRequestV1) UnmarshalBinary(b []byte) error {
	var res APIContentPatternUpdateRequestV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
