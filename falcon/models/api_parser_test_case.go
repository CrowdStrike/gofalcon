// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIParserTestCase api parser test case
//
// swagger:model api.ParserTestCase
type APIParserTestCase struct {

	// The input to the test
	// Required: true
	Event *APIParserTestEvent `json:"event"`

	// List of assertions, to different outputs
	// Required: true
	OutputAssertions []*APIParserTestCaseAssertionsForOutput `json:"output_assertions"`
}

// Validate validates this api parser test case
func (m *APIParserTestCase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputAssertions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIParserTestCase) validateEvent(formats strfmt.Registry) error {

	if err := validate.Required("event", "body", m.Event); err != nil {
		return err
	}

	if m.Event != nil {
		if err := m.Event.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("event")
			}
			return err
		}
	}

	return nil
}

func (m *APIParserTestCase) validateOutputAssertions(formats strfmt.Registry) error {

	if err := validate.Required("output_assertions", "body", m.OutputAssertions); err != nil {
		return err
	}

	for i := 0; i < len(m.OutputAssertions); i++ {
		if swag.IsZero(m.OutputAssertions[i]) { // not required
			continue
		}

		if m.OutputAssertions[i] != nil {
			if err := m.OutputAssertions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("output_assertions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("output_assertions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this api parser test case based on the context it is used
func (m *APIParserTestCase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEvent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutputAssertions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIParserTestCase) contextValidateEvent(ctx context.Context, formats strfmt.Registry) error {

	if m.Event != nil {

		if err := m.Event.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("event")
			}
			return err
		}
	}

	return nil
}

func (m *APIParserTestCase) contextValidateOutputAssertions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OutputAssertions); i++ {

		if m.OutputAssertions[i] != nil {

			if swag.IsZero(m.OutputAssertions[i]) { // not required
				return nil
			}

			if err := m.OutputAssertions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("output_assertions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("output_assertions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIParserTestCase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIParserTestCase) UnmarshalBinary(b []byte) error {
	var res APIParserTestCase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
