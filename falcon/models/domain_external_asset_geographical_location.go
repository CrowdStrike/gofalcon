// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DomainExternalAssetGeographicalLocation domain external asset geographical location
//
// swagger:model domain.ExternalAssetGeographicalLocation
type DomainExternalAssetGeographicalLocation struct {

	// area code
	AreaCode string `json:"area_code,omitempty"`

	// city
	City string `json:"city,omitempty"`

	// country code
	CountryCode string `json:"country_code,omitempty"`

	// country name
	CountryName string `json:"country_name,omitempty"`

	// geo point
	GeoPoint *DomainGeoPoint `json:"geo_point,omitempty"`

	// postal code
	PostalCode string `json:"postal_code,omitempty"`

	// region code
	RegionCode string `json:"region_code,omitempty"`

	// region name
	RegionName string `json:"region_name,omitempty"`

	// timezone
	Timezone string `json:"timezone,omitempty"`
}

// Validate validates this domain external asset geographical location
func (m *DomainExternalAssetGeographicalLocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGeoPoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainExternalAssetGeographicalLocation) validateGeoPoint(formats strfmt.Registry) error {
	if swag.IsZero(m.GeoPoint) { // not required
		return nil
	}

	if m.GeoPoint != nil {
		if err := m.GeoPoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geo_point")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("geo_point")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this domain external asset geographical location based on the context it is used
func (m *DomainExternalAssetGeographicalLocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGeoPoint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainExternalAssetGeographicalLocation) contextValidateGeoPoint(ctx context.Context, formats strfmt.Registry) error {

	if m.GeoPoint != nil {

		if swag.IsZero(m.GeoPoint) { // not required
			return nil
		}

		if err := m.GeoPoint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geo_point")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("geo_point")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainExternalAssetGeographicalLocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainExternalAssetGeographicalLocation) UnmarshalBinary(b []byte) error {
	var res DomainExternalAssetGeographicalLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
