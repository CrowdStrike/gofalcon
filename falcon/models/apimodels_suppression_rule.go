// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApimodelsSuppressionRule apimodels suppression rule
//
// swagger:model apimodels.SuppressionRule
type ApimodelsSuppressionRule struct {

	// created at
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// created by
	// Required: true
	CreatedBy *string `json:"created_by"`

	// deleted at
	// Format: date-time
	DeletedAt strfmt.DateTime `json:"deleted_at,omitempty"`

	// deleted by
	DeletedBy string `json:"deleted_by,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// disabled
	// Required: true
	Disabled *bool `json:"disabled"`

	// domain
	// Required: true
	Domain *string `json:"domain"`

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// rule ids
	RuleIds []string `json:"rule_ids"`

	// rule selection count
	// Required: true
	RuleSelectionCount *int32 `json:"rule_selection_count"`

	// rule selection filter
	RuleSelectionFilter *ApimodelsRuleSelectionFilter `json:"rule_selection_filter,omitempty"`

	// rule selection type
	// Required: true
	RuleSelectionType *string `json:"rule_selection_type"`

	// scope asset filter
	ScopeAssetFilter *ApimodelsAssetFilter `json:"scope_asset_filter,omitempty"`

	// scope type
	// Required: true
	ScopeType *string `json:"scope_type"`

	// subdomain
	// Required: true
	Subdomain *string `json:"subdomain"`

	// suppression comment
	SuppressionComment string `json:"suppression_comment,omitempty"`

	// suppression expiration date
	// Required: true
	SuppressionExpirationDate *string `json:"suppression_expiration_date"`

	// suppression reason
	// Required: true
	SuppressionReason *string `json:"suppression_reason"`

	// update reason
	UpdateReason string `json:"update_reason,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// updated by
	UpdatedBy string `json:"updated_by,omitempty"`
}

// Validate validates this apimodels suppression rule
func (m *ApimodelsSuppressionRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleSelectionCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleSelectionFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleSelectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScopeAssetFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScopeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubdomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuppressionExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuppressionReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApimodelsSuppressionRule) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsSuppressionRule) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("created_by", "body", m.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsSuppressionRule) validateDeletedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.DeletedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("deleted_at", "body", "date-time", m.DeletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsSuppressionRule) validateDisabled(formats strfmt.Registry) error {

	if err := validate.Required("disabled", "body", m.Disabled); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsSuppressionRule) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsSuppressionRule) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsSuppressionRule) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsSuppressionRule) validateRuleSelectionCount(formats strfmt.Registry) error {

	if err := validate.Required("rule_selection_count", "body", m.RuleSelectionCount); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsSuppressionRule) validateRuleSelectionFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.RuleSelectionFilter) { // not required
		return nil
	}

	if m.RuleSelectionFilter != nil {
		if err := m.RuleSelectionFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule_selection_filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule_selection_filter")
			}
			return err
		}
	}

	return nil
}

func (m *ApimodelsSuppressionRule) validateRuleSelectionType(formats strfmt.Registry) error {

	if err := validate.Required("rule_selection_type", "body", m.RuleSelectionType); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsSuppressionRule) validateScopeAssetFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.ScopeAssetFilter) { // not required
		return nil
	}

	if m.ScopeAssetFilter != nil {
		if err := m.ScopeAssetFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope_asset_filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope_asset_filter")
			}
			return err
		}
	}

	return nil
}

func (m *ApimodelsSuppressionRule) validateScopeType(formats strfmt.Registry) error {

	if err := validate.Required("scope_type", "body", m.ScopeType); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsSuppressionRule) validateSubdomain(formats strfmt.Registry) error {

	if err := validate.Required("subdomain", "body", m.Subdomain); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsSuppressionRule) validateSuppressionExpirationDate(formats strfmt.Registry) error {

	if err := validate.Required("suppression_expiration_date", "body", m.SuppressionExpirationDate); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsSuppressionRule) validateSuppressionReason(formats strfmt.Registry) error {

	if err := validate.Required("suppression_reason", "body", m.SuppressionReason); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsSuppressionRule) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this apimodels suppression rule based on the context it is used
func (m *ApimodelsSuppressionRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRuleSelectionFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScopeAssetFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApimodelsSuppressionRule) contextValidateRuleSelectionFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.RuleSelectionFilter != nil {

		if swag.IsZero(m.RuleSelectionFilter) { // not required
			return nil
		}

		if err := m.RuleSelectionFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule_selection_filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule_selection_filter")
			}
			return err
		}
	}

	return nil
}

func (m *ApimodelsSuppressionRule) contextValidateScopeAssetFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.ScopeAssetFilter != nil {

		if swag.IsZero(m.ScopeAssetFilter) { // not required
			return nil
		}

		if err := m.ScopeAssetFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope_asset_filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope_asset_filter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApimodelsSuppressionRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApimodelsSuppressionRule) UnmarshalBinary(b []byte) error {
	var res ApimodelsSuppressionRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
