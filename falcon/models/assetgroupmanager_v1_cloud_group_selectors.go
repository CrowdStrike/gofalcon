// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AssetgroupmanagerV1CloudGroupSelectors Selectors assigned to a Cloud Group, including the read-only registry/repository/tag selectors.
//
// swagger:model assetgroupmanager.v1.CloudGroupSelectors
type AssetgroupmanagerV1CloudGroupSelectors struct {

	// Select cloud resources by cloud provider.
	CloudResources []*AssetgroupmanagerV1CloudResourceSelector `json:"cloud_resources"`

	// Read-only selector where an Image should match any of these registries.
	ImageRegistries []string `json:"image_registries"`

	// Read-only selector where an Image should match any of these repositories.
	ImageRepositories []string `json:"image_repositories"`

	// Read-only selector where an Image should match any of these tags.
	ImageTags []string `json:"image_tags"`

	// Select images by image registry.
	Images []*AssetgroupmanagerV1ImageSelector `json:"images"`
}

// Validate validates this assetgroupmanager v1 cloud group selectors
func (m *AssetgroupmanagerV1CloudGroupSelectors) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetgroupmanagerV1CloudGroupSelectors) validateCloudResources(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudResources) { // not required
		return nil
	}

	for i := 0; i < len(m.CloudResources); i++ {
		if swag.IsZero(m.CloudResources[i]) { // not required
			continue
		}

		if m.CloudResources[i] != nil {
			if err := m.CloudResources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloud_resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloud_resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AssetgroupmanagerV1CloudGroupSelectors) validateImages(formats strfmt.Registry) error {
	if swag.IsZero(m.Images) { // not required
		return nil
	}

	for i := 0; i < len(m.Images); i++ {
		if swag.IsZero(m.Images[i]) { // not required
			continue
		}

		if m.Images[i] != nil {
			if err := m.Images[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("images" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this assetgroupmanager v1 cloud group selectors based on the context it is used
func (m *AssetgroupmanagerV1CloudGroupSelectors) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetgroupmanagerV1CloudGroupSelectors) contextValidateCloudResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CloudResources); i++ {

		if m.CloudResources[i] != nil {

			if swag.IsZero(m.CloudResources[i]) { // not required
				return nil
			}

			if err := m.CloudResources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloud_resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloud_resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AssetgroupmanagerV1CloudGroupSelectors) contextValidateImages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Images); i++ {

		if m.Images[i] != nil {

			if swag.IsZero(m.Images[i]) { // not required
				return nil
			}

			if err := m.Images[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("images" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetgroupmanagerV1CloudGroupSelectors) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetgroupmanagerV1CloudGroupSelectors) UnmarshalBinary(b []byte) error {
	var res AssetgroupmanagerV1CloudGroupSelectors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
