// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItautomationRunLiveQueryRequest itautomation run live query request
//
// swagger:model itautomation.RunLiveQueryRequest
type ItautomationRunLiveQueryRequest struct {

	// Specifies task ids and host attributes for composite querying
	CompositeQuery *ItautomationCompositeQuery `json:"composite_query,omitempty"`

	// Whether to discover new hosts for the scheduled task. Example: true
	DiscoverNewHosts bool `json:"discover_new_hosts,omitempty"`

	// Whether to discover offline hosts for the scheduled task. Example: true
	DiscoverOfflineHosts bool `json:"discover_offline_hosts,omitempty"`

	// Whether to distribute the scheduled task. Example: true
	Distribute bool `json:"distribute,omitempty"`

	//  Duration for which the task stays active. Once expired, new and offline hosts won't be targeted. Example: 1m
	ExpirationInterval string `json:"expiration_interval,omitempty"`

	// Execution guardrails and limits
	Guardrails *FalconforitapiGuardrails `json:"guardrails,omitempty"`

	// OSQuery to execute. Example: select * from users
	Osquery string `json:"osquery,omitempty"`

	// Specifies columns and delimiter for parsing script execution results
	OutputParserConfig *ItautomationOutputParserConfig `json:"output_parser_config,omitempty"`

	// Script queries to run per platform
	Queries *ItautomationScripts `json:"queries,omitempty"`

	// Configuration for parsing script output into multiple rows
	RowsParserConfig *ItautomationRowsParserConfig `json:"rows_parser_config,omitempty"`

	// Target filter in FQL format. Example: platform_name: 'Windows'
	// Required: true
	Target *string `json:"target"`
}

// Validate validates this itautomation run live query request
func (m *ItautomationRunLiveQueryRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompositeQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuardrails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputParserConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRowsParserConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItautomationRunLiveQueryRequest) validateCompositeQuery(formats strfmt.Registry) error {
	if swag.IsZero(m.CompositeQuery) { // not required
		return nil
	}

	if m.CompositeQuery != nil {
		if err := m.CompositeQuery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("composite_query")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("composite_query")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationRunLiveQueryRequest) validateGuardrails(formats strfmt.Registry) error {
	if swag.IsZero(m.Guardrails) { // not required
		return nil
	}

	if m.Guardrails != nil {
		if err := m.Guardrails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guardrails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guardrails")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationRunLiveQueryRequest) validateOutputParserConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.OutputParserConfig) { // not required
		return nil
	}

	if m.OutputParserConfig != nil {
		if err := m.OutputParserConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output_parser_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output_parser_config")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationRunLiveQueryRequest) validateQueries(formats strfmt.Registry) error {
	if swag.IsZero(m.Queries) { // not required
		return nil
	}

	if m.Queries != nil {
		if err := m.Queries.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queries")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queries")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationRunLiveQueryRequest) validateRowsParserConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.RowsParserConfig) { // not required
		return nil
	}

	if m.RowsParserConfig != nil {
		if err := m.RowsParserConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rows_parser_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rows_parser_config")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationRunLiveQueryRequest) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this itautomation run live query request based on the context it is used
func (m *ItautomationRunLiveQueryRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCompositeQuery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGuardrails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutputParserConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRowsParserConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItautomationRunLiveQueryRequest) contextValidateCompositeQuery(ctx context.Context, formats strfmt.Registry) error {

	if m.CompositeQuery != nil {

		if swag.IsZero(m.CompositeQuery) { // not required
			return nil
		}

		if err := m.CompositeQuery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("composite_query")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("composite_query")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationRunLiveQueryRequest) contextValidateGuardrails(ctx context.Context, formats strfmt.Registry) error {

	if m.Guardrails != nil {

		if swag.IsZero(m.Guardrails) { // not required
			return nil
		}

		if err := m.Guardrails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guardrails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guardrails")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationRunLiveQueryRequest) contextValidateOutputParserConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.OutputParserConfig != nil {

		if swag.IsZero(m.OutputParserConfig) { // not required
			return nil
		}

		if err := m.OutputParserConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output_parser_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output_parser_config")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationRunLiveQueryRequest) contextValidateQueries(ctx context.Context, formats strfmt.Registry) error {

	if m.Queries != nil {

		if swag.IsZero(m.Queries) { // not required
			return nil
		}

		if err := m.Queries.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queries")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queries")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationRunLiveQueryRequest) contextValidateRowsParserConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.RowsParserConfig != nil {

		if swag.IsZero(m.RowsParserConfig) { // not required
			return nil
		}

		if err := m.RowsParserConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rows_parser_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rows_parser_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ItautomationRunLiveQueryRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItautomationRunLiveQueryRequest) UnmarshalBinary(b []byte) error {
	var res ItautomationRunLiveQueryRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
