// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceapiDevicePagingV2 deviceapi device paging v2
//
// swagger:model deviceapi.DevicePagingV2
type DeviceapiDevicePagingV2 struct {

	// expires at
	ExpiresAt int64 `json:"expires_at,omitempty"`

	// limit
	Limit int32 `json:"limit,omitempty"`

	// next
	Next string `json:"next,omitempty"`

	// offset
	// Required: true
	Offset *string `json:"offset"`

	// previous
	Previous string `json:"previous,omitempty"`

	// total
	// Required: true
	Total *int64 `json:"total"`
}

// Validate validates this deviceapi device paging v2
func (m *DeviceapiDevicePagingV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOffset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceapiDevicePagingV2) validateOffset(formats strfmt.Registry) error {

	if err := validate.Required("offset", "body", m.Offset); err != nil {
		return err
	}

	return nil
}

func (m *DeviceapiDevicePagingV2) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("total", "body", m.Total); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this deviceapi device paging v2 based on context it is used
func (m *DeviceapiDevicePagingV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceapiDevicePagingV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceapiDevicePagingV2) UnmarshalBinary(b []byte) error {
	var res DeviceapiDevicePagingV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
