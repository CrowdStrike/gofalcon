// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SdkSLATimerVM sdk SLA timer VM
//
// swagger:model sdk.SLATimerVM
type SdkSLATimerVM struct {

	// duration seconds
	// Required: true
	DurationSeconds *int64 `json:"duration_seconds"`

	// goal id
	// Required: true
	GoalID *string `json:"goal_id"`

	// status
	// Required: true
	Status *string `json:"status"`

	// time completed
	TimeCompleted int64 `json:"time_completed,omitempty"`

	// time due
	TimeDue int64 `json:"time_due,omitempty"`

	// time paused
	TimePaused int64 `json:"time_paused,omitempty"`

	// time started
	TimeStarted int64 `json:"time_started,omitempty"`

	// total pause time
	TotalPauseTime int64 `json:"total_pause_time,omitempty"`
}

// Validate validates this sdk SLA timer VM
func (m *SdkSLATimerVM) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDurationSeconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGoalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SdkSLATimerVM) validateDurationSeconds(formats strfmt.Registry) error {

	if err := validate.Required("duration_seconds", "body", m.DurationSeconds); err != nil {
		return err
	}

	return nil
}

func (m *SdkSLATimerVM) validateGoalID(formats strfmt.Registry) error {

	if err := validate.Required("goal_id", "body", m.GoalID); err != nil {
		return err
	}

	return nil
}

func (m *SdkSLATimerVM) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sdk SLA timer VM based on context it is used
func (m *SdkSLATimerVM) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SdkSLATimerVM) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SdkSLATimerVM) UnmarshalBinary(b []byte) error {
	var res SdkSLATimerVM
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
