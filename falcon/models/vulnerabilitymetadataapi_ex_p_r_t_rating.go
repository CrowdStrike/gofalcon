// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VulnerabilitymetadataapiExPRTRating vulnerabilitymetadataapi ex p r t rating
//
// swagger:model vulnerabilitymetadataapi.ExPRTRating
type VulnerabilitymetadataapiExPRTRating struct {

	// current rating
	// Required: true
	CurrentRating *VulnerabilitymetadataapiRating `json:"current_rating"`

	// highest rating
	// Required: true
	HighestRating *VulnerabilitymetadataapiRating `json:"highest_rating"`

	// negative indicators
	// Required: true
	NegativeIndicators []*VulnerabilitymetadataapiIndicator `json:"negative_indicators"`

	// positive indicators
	// Required: true
	PositiveIndicators []*VulnerabilitymetadataapiIndicator `json:"positive_indicators"`

	// rating history
	// Required: true
	RatingHistory []*VulnerabilitymetadataapiRating `json:"rating_history"`
}

// Validate validates this vulnerabilitymetadataapi ex p r t rating
func (m *VulnerabilitymetadataapiExPRTRating) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentRating(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHighestRating(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNegativeIndicators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePositiveIndicators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRatingHistory(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilitymetadataapiExPRTRating) validateCurrentRating(formats strfmt.Registry) error {

	if err := validate.Required("current_rating", "body", m.CurrentRating); err != nil {
		return err
	}

	if m.CurrentRating != nil {
		if err := m.CurrentRating.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("current_rating")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("current_rating")
			}
			return err
		}
	}

	return nil
}

func (m *VulnerabilitymetadataapiExPRTRating) validateHighestRating(formats strfmt.Registry) error {

	if err := validate.Required("highest_rating", "body", m.HighestRating); err != nil {
		return err
	}

	if m.HighestRating != nil {
		if err := m.HighestRating.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("highest_rating")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("highest_rating")
			}
			return err
		}
	}

	return nil
}

func (m *VulnerabilitymetadataapiExPRTRating) validateNegativeIndicators(formats strfmt.Registry) error {

	if err := validate.Required("negative_indicators", "body", m.NegativeIndicators); err != nil {
		return err
	}

	for i := 0; i < len(m.NegativeIndicators); i++ {
		if swag.IsZero(m.NegativeIndicators[i]) { // not required
			continue
		}

		if m.NegativeIndicators[i] != nil {
			if err := m.NegativeIndicators[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("negative_indicators" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("negative_indicators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VulnerabilitymetadataapiExPRTRating) validatePositiveIndicators(formats strfmt.Registry) error {

	if err := validate.Required("positive_indicators", "body", m.PositiveIndicators); err != nil {
		return err
	}

	for i := 0; i < len(m.PositiveIndicators); i++ {
		if swag.IsZero(m.PositiveIndicators[i]) { // not required
			continue
		}

		if m.PositiveIndicators[i] != nil {
			if err := m.PositiveIndicators[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("positive_indicators" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("positive_indicators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VulnerabilitymetadataapiExPRTRating) validateRatingHistory(formats strfmt.Registry) error {

	if err := validate.Required("rating_history", "body", m.RatingHistory); err != nil {
		return err
	}

	for i := 0; i < len(m.RatingHistory); i++ {
		if swag.IsZero(m.RatingHistory[i]) { // not required
			continue
		}

		if m.RatingHistory[i] != nil {
			if err := m.RatingHistory[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rating_history" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rating_history" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this vulnerabilitymetadataapi ex p r t rating based on the context it is used
func (m *VulnerabilitymetadataapiExPRTRating) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCurrentRating(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHighestRating(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNegativeIndicators(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePositiveIndicators(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRatingHistory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilitymetadataapiExPRTRating) contextValidateCurrentRating(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrentRating != nil {

		if err := m.CurrentRating.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("current_rating")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("current_rating")
			}
			return err
		}
	}

	return nil
}

func (m *VulnerabilitymetadataapiExPRTRating) contextValidateHighestRating(ctx context.Context, formats strfmt.Registry) error {

	if m.HighestRating != nil {

		if err := m.HighestRating.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("highest_rating")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("highest_rating")
			}
			return err
		}
	}

	return nil
}

func (m *VulnerabilitymetadataapiExPRTRating) contextValidateNegativeIndicators(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NegativeIndicators); i++ {

		if m.NegativeIndicators[i] != nil {

			if swag.IsZero(m.NegativeIndicators[i]) { // not required
				return nil
			}

			if err := m.NegativeIndicators[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("negative_indicators" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("negative_indicators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VulnerabilitymetadataapiExPRTRating) contextValidatePositiveIndicators(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PositiveIndicators); i++ {

		if m.PositiveIndicators[i] != nil {

			if swag.IsZero(m.PositiveIndicators[i]) { // not required
				return nil
			}

			if err := m.PositiveIndicators[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("positive_indicators" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("positive_indicators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VulnerabilitymetadataapiExPRTRating) contextValidateRatingHistory(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RatingHistory); i++ {

		if m.RatingHistory[i] != nil {

			if swag.IsZero(m.RatingHistory[i]) { // not required
				return nil
			}

			if err := m.RatingHistory[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rating_history" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rating_history" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VulnerabilitymetadataapiExPRTRating) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VulnerabilitymetadataapiExPRTRating) UnmarshalBinary(b []byte) error {
	var res VulnerabilitymetadataapiExPRTRating
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
