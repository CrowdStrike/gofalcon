// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DevicecontrolapiUSBExceptionBase devicecontrolapi u s b exception base
//
// swagger:model devicecontrolapi.USBExceptionBase
type DevicecontrolapiUSBExceptionBase struct {

	// Action to be taken when the exception is matched
	// Enum: [FULL_ACCESS BLOCK_EXECUTE BLOCK_WRITE_EXECUTE BLOCK_ALL WHITELIST]
	Action string `json:"action,omitempty"`

	// USB Device class
	// Enum: [ANY AUDIO_VIDEO IMAGING MASS_STORAGE MOBILE PRINTER WIRELESS]
	Class string `json:"class,omitempty"`

	// Composite ID of the vendor ID, product ID, and serial number. Format: <vendor ID>_<product ID>_<serial number>
	CombinedID string `json:"combined_id,omitempty"`

	// Description for the exception
	Description string `json:"description,omitempty"`

	// yyyy-mm-ddThh:mm:ssZ (UTC) format of the time to remove the exception if temporary. Only provide this value for temporary exceptions
	// Format: date-time
	ExpirationTime strfmt.DateTime `json:"expiration_time,omitempty"`

	// ID of the exception. Leave empty to create a new exception
	// Required: true
	ID *string `json:"id"`

	// Decimal value of the product ID. Required if a serial number is provided
	ProductID string `json:"product_id,omitempty"`

	// Device product name
	ProductName string `json:"product_name,omitempty"`

	// Device serial number
	SerialNumber string `json:"serial_number,omitempty"`

	// Boolean value to indicate if wildcard matching should be used on the serial number
	UseWildcard bool `json:"use_wildcard,omitempty"`

	// Decimal value of the vendor ID
	VendorID string `json:"vendor_id,omitempty"`

	// Device vendor name
	VendorName string `json:"vendor_name,omitempty"`
}

// Validate validates this devicecontrolapi u s b exception base
func (m *DevicecontrolapiUSBExceptionBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var devicecontrolapiUSBExceptionBaseTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FULL_ACCESS","BLOCK_EXECUTE","BLOCK_WRITE_EXECUTE","BLOCK_ALL","WHITELIST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		devicecontrolapiUSBExceptionBaseTypeActionPropEnum = append(devicecontrolapiUSBExceptionBaseTypeActionPropEnum, v)
	}
}

const (

	// DevicecontrolapiUSBExceptionBaseActionFULLACCESS captures enum value "FULL_ACCESS"
	DevicecontrolapiUSBExceptionBaseActionFULLACCESS string = "FULL_ACCESS"

	// DevicecontrolapiUSBExceptionBaseActionBLOCKEXECUTE captures enum value "BLOCK_EXECUTE"
	DevicecontrolapiUSBExceptionBaseActionBLOCKEXECUTE string = "BLOCK_EXECUTE"

	// DevicecontrolapiUSBExceptionBaseActionBLOCKWRITEEXECUTE captures enum value "BLOCK_WRITE_EXECUTE"
	DevicecontrolapiUSBExceptionBaseActionBLOCKWRITEEXECUTE string = "BLOCK_WRITE_EXECUTE"

	// DevicecontrolapiUSBExceptionBaseActionBLOCKALL captures enum value "BLOCK_ALL"
	DevicecontrolapiUSBExceptionBaseActionBLOCKALL string = "BLOCK_ALL"

	// DevicecontrolapiUSBExceptionBaseActionWHITELIST captures enum value "WHITELIST"
	DevicecontrolapiUSBExceptionBaseActionWHITELIST string = "WHITELIST"
)

// prop value enum
func (m *DevicecontrolapiUSBExceptionBase) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, devicecontrolapiUSBExceptionBaseTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DevicecontrolapiUSBExceptionBase) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

var devicecontrolapiUSBExceptionBaseTypeClassPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ANY","AUDIO_VIDEO","IMAGING","MASS_STORAGE","MOBILE","PRINTER","WIRELESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		devicecontrolapiUSBExceptionBaseTypeClassPropEnum = append(devicecontrolapiUSBExceptionBaseTypeClassPropEnum, v)
	}
}

const (

	// DevicecontrolapiUSBExceptionBaseClassANY captures enum value "ANY"
	DevicecontrolapiUSBExceptionBaseClassANY string = "ANY"

	// DevicecontrolapiUSBExceptionBaseClassAUDIOVIDEO captures enum value "AUDIO_VIDEO"
	DevicecontrolapiUSBExceptionBaseClassAUDIOVIDEO string = "AUDIO_VIDEO"

	// DevicecontrolapiUSBExceptionBaseClassIMAGING captures enum value "IMAGING"
	DevicecontrolapiUSBExceptionBaseClassIMAGING string = "IMAGING"

	// DevicecontrolapiUSBExceptionBaseClassMASSSTORAGE captures enum value "MASS_STORAGE"
	DevicecontrolapiUSBExceptionBaseClassMASSSTORAGE string = "MASS_STORAGE"

	// DevicecontrolapiUSBExceptionBaseClassMOBILE captures enum value "MOBILE"
	DevicecontrolapiUSBExceptionBaseClassMOBILE string = "MOBILE"

	// DevicecontrolapiUSBExceptionBaseClassPRINTER captures enum value "PRINTER"
	DevicecontrolapiUSBExceptionBaseClassPRINTER string = "PRINTER"

	// DevicecontrolapiUSBExceptionBaseClassWIRELESS captures enum value "WIRELESS"
	DevicecontrolapiUSBExceptionBaseClassWIRELESS string = "WIRELESS"
)

// prop value enum
func (m *DevicecontrolapiUSBExceptionBase) validateClassEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, devicecontrolapiUSBExceptionBaseTypeClassPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DevicecontrolapiUSBExceptionBase) validateClass(formats strfmt.Registry) error {
	if swag.IsZero(m.Class) { // not required
		return nil
	}

	// value enum
	if err := m.validateClassEnum("class", "body", m.Class); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiUSBExceptionBase) validateExpirationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("expiration_time", "body", "date-time", m.ExpirationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiUSBExceptionBase) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this devicecontrolapi u s b exception base based on context it is used
func (m *DevicecontrolapiUSBExceptionBase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DevicecontrolapiUSBExceptionBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevicecontrolapiUSBExceptionBase) UnmarshalBinary(b []byte) error {
	var res DevicecontrolapiUSBExceptionBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
