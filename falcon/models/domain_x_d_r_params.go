// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainXDRParams domain x d r params
//
// swagger:model domain.XDRParams
type DomainXDRParams struct {

	// assign to
	// Required: true
	AssignTo *string `json:"assign_to"`

	// assign to uuid
	// Required: true
	AssignToUUID *string `json:"assign_to_uuid"`

	// comment
	// Required: true
	Comment *string `json:"comment"`

	// execution offset
	// Required: true
	ExecutionOffset *string `json:"execution_offset"`

	// severity
	// Required: true
	Severity *int64 `json:"severity"`

	// status
	// Required: true
	Status *string `json:"status"`

	// tactic
	// Required: true
	Tactic *string `json:"tactic"`

	// tags
	// Required: true
	Tags []string `json:"tags"`

	// technique
	// Required: true
	Technique *string `json:"technique"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this domain x d r params
func (m *DomainXDRParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssignToUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionOffset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTactic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTechnique(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainXDRParams) validateAssignTo(formats strfmt.Registry) error {

	if err := validate.Required("assign_to", "body", m.AssignTo); err != nil {
		return err
	}

	return nil
}

func (m *DomainXDRParams) validateAssignToUUID(formats strfmt.Registry) error {

	if err := validate.Required("assign_to_uuid", "body", m.AssignToUUID); err != nil {
		return err
	}

	return nil
}

func (m *DomainXDRParams) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("comment", "body", m.Comment); err != nil {
		return err
	}

	return nil
}

func (m *DomainXDRParams) validateExecutionOffset(formats strfmt.Registry) error {

	if err := validate.Required("execution_offset", "body", m.ExecutionOffset); err != nil {
		return err
	}

	return nil
}

func (m *DomainXDRParams) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *DomainXDRParams) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *DomainXDRParams) validateTactic(formats strfmt.Registry) error {

	if err := validate.Required("tactic", "body", m.Tactic); err != nil {
		return err
	}

	return nil
}

func (m *DomainXDRParams) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

func (m *DomainXDRParams) validateTechnique(formats strfmt.Registry) error {

	if err := validate.Required("technique", "body", m.Technique); err != nil {
		return err
	}

	return nil
}

func (m *DomainXDRParams) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain x d r params based on context it is used
func (m *DomainXDRParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainXDRParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainXDRParams) UnmarshalBinary(b []byte) error {
	var res DomainXDRParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
