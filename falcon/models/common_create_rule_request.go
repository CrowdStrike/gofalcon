// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonCreateRuleRequest common create rule request
//
// swagger:model common.CreateRuleRequest
type CommonCreateRuleRequest struct {

	// alert info
	// Required: true
	AlertInfo *string `json:"alert_info"`

	// attack types
	// Required: true
	AttackTypes *string `json:"attack_types"`

	// auto remediable
	// Required: true
	AutoRemediable *bool `json:"auto_remediable"`

	// controls
	// Required: true
	Controls []*DbmodelsControlReference `json:"controls"`

	// description
	// Required: true
	Description *string `json:"description"`

	// domain
	// Required: true
	Domain *string `json:"domain"`

	// logic
	// Required: true
	Logic *string `json:"logic"`

	// mitre tactics id
	// Required: true
	MitreTacticsID *string `json:"mitre_tactics_id"`

	// mitre tactics name
	// Required: true
	MitreTacticsName *string `json:"mitre_tactics_name"`

	// mitre tactics url
	// Required: true
	MitreTacticsURL *string `json:"mitre_tactics_url"`

	// mitre techniques id
	// Required: true
	MitreTechniquesID *string `json:"mitre_techniques_id"`

	// mitre techniques name
	// Required: true
	MitreTechniquesName *string `json:"mitre_techniques_name"`

	// mitre techniques url
	// Required: true
	MitreTechniquesURL *string `json:"mitre_techniques_url"`

	// name
	// Required: true
	Name *string `json:"name"`

	// parent rule id
	// Required: true
	ParentRuleID *string `json:"parent_rule_id"`

	// platform
	// Required: true
	Platform *string `json:"platform"`

	// provider
	// Required: true
	Provider *string `json:"provider"`

	// remediation info
	// Required: true
	RemediationInfo *string `json:"remediation_info"`

	// remediation url
	// Required: true
	RemediationURL *string `json:"remediation_url"`

	// resource type
	// Required: true
	ResourceType *string `json:"resource_type"`

	// service
	// Required: true
	Service *string `json:"service"`

	// severity
	// Required: true
	Severity *int32 `json:"severity"`

	// subdomain
	// Required: true
	Subdomain *string `json:"subdomain"`
}

// Validate validates this common create rule request
func (m *CommonCreateRuleRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttackTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutoRemediable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMitreTacticsID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMitreTacticsName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMitreTacticsURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMitreTechniquesID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMitreTechniquesName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMitreTechniquesURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentRuleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediationInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediationURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubdomain(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonCreateRuleRequest) validateAlertInfo(formats strfmt.Registry) error {

	if err := validate.Required("alert_info", "body", m.AlertInfo); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateRuleRequest) validateAttackTypes(formats strfmt.Registry) error {

	if err := validate.Required("attack_types", "body", m.AttackTypes); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateRuleRequest) validateAutoRemediable(formats strfmt.Registry) error {

	if err := validate.Required("auto_remediable", "body", m.AutoRemediable); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateRuleRequest) validateControls(formats strfmt.Registry) error {

	if err := validate.Required("controls", "body", m.Controls); err != nil {
		return err
	}

	for i := 0; i < len(m.Controls); i++ {
		if swag.IsZero(m.Controls[i]) { // not required
			continue
		}

		if m.Controls[i] != nil {
			if err := m.Controls[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controls" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonCreateRuleRequest) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateRuleRequest) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateRuleRequest) validateLogic(formats strfmt.Registry) error {

	if err := validate.Required("logic", "body", m.Logic); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateRuleRequest) validateMitreTacticsID(formats strfmt.Registry) error {

	if err := validate.Required("mitre_tactics_id", "body", m.MitreTacticsID); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateRuleRequest) validateMitreTacticsName(formats strfmt.Registry) error {

	if err := validate.Required("mitre_tactics_name", "body", m.MitreTacticsName); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateRuleRequest) validateMitreTacticsURL(formats strfmt.Registry) error {

	if err := validate.Required("mitre_tactics_url", "body", m.MitreTacticsURL); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateRuleRequest) validateMitreTechniquesID(formats strfmt.Registry) error {

	if err := validate.Required("mitre_techniques_id", "body", m.MitreTechniquesID); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateRuleRequest) validateMitreTechniquesName(formats strfmt.Registry) error {

	if err := validate.Required("mitre_techniques_name", "body", m.MitreTechniquesName); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateRuleRequest) validateMitreTechniquesURL(formats strfmt.Registry) error {

	if err := validate.Required("mitre_techniques_url", "body", m.MitreTechniquesURL); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateRuleRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateRuleRequest) validateParentRuleID(formats strfmt.Registry) error {

	if err := validate.Required("parent_rule_id", "body", m.ParentRuleID); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateRuleRequest) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateRuleRequest) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("provider", "body", m.Provider); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateRuleRequest) validateRemediationInfo(formats strfmt.Registry) error {

	if err := validate.Required("remediation_info", "body", m.RemediationInfo); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateRuleRequest) validateRemediationURL(formats strfmt.Registry) error {

	if err := validate.Required("remediation_url", "body", m.RemediationURL); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateRuleRequest) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("resource_type", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateRuleRequest) validateService(formats strfmt.Registry) error {

	if err := validate.Required("service", "body", m.Service); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateRuleRequest) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateRuleRequest) validateSubdomain(formats strfmt.Registry) error {

	if err := validate.Required("subdomain", "body", m.Subdomain); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this common create rule request based on the context it is used
func (m *CommonCreateRuleRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateControls(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonCreateRuleRequest) contextValidateControls(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Controls); i++ {

		if m.Controls[i] != nil {

			if swag.IsZero(m.Controls[i]) { // not required
				return nil
			}

			if err := m.Controls[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controls" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonCreateRuleRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonCreateRuleRequest) UnmarshalBinary(b []byte) error {
	var res CommonCreateRuleRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
