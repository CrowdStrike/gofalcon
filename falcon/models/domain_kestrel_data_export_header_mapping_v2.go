// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainKestrelDataExportHeaderMappingV2 domain kestrel data export header mapping v2
//
// swagger:model domain.KestrelDataExportHeaderMappingV2
type DomainKestrelDataExportHeaderMappingV2 struct {

	// column
	// Required: true
	Column *string `json:"column"`

	// computation functions
	// Required: true
	ComputationFunctions []*DomainKestrelDataExportHeaderComputationFunctionV2 `json:"computation_functions"`

	// header name
	// Required: true
	HeaderName *string `json:"header_name"`

	// use data as value
	// Required: true
	UseDataAsValue *bool `json:"use_data_as_value"`
}

// Validate validates this domain kestrel data export header mapping v2
func (m *DomainKestrelDataExportHeaderMappingV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputationFunctions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeaderName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUseDataAsValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainKestrelDataExportHeaderMappingV2) validateColumn(formats strfmt.Registry) error {

	if err := validate.Required("column", "body", m.Column); err != nil {
		return err
	}

	return nil
}

func (m *DomainKestrelDataExportHeaderMappingV2) validateComputationFunctions(formats strfmt.Registry) error {

	if err := validate.Required("computation_functions", "body", m.ComputationFunctions); err != nil {
		return err
	}

	for i := 0; i < len(m.ComputationFunctions); i++ {
		if swag.IsZero(m.ComputationFunctions[i]) { // not required
			continue
		}

		if m.ComputationFunctions[i] != nil {
			if err := m.ComputationFunctions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("computation_functions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("computation_functions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainKestrelDataExportHeaderMappingV2) validateHeaderName(formats strfmt.Registry) error {

	if err := validate.Required("header_name", "body", m.HeaderName); err != nil {
		return err
	}

	return nil
}

func (m *DomainKestrelDataExportHeaderMappingV2) validateUseDataAsValue(formats strfmt.Registry) error {

	if err := validate.Required("use_data_as_value", "body", m.UseDataAsValue); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this domain kestrel data export header mapping v2 based on the context it is used
func (m *DomainKestrelDataExportHeaderMappingV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComputationFunctions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainKestrelDataExportHeaderMappingV2) contextValidateComputationFunctions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ComputationFunctions); i++ {

		if m.ComputationFunctions[i] != nil {

			if swag.IsZero(m.ComputationFunctions[i]) { // not required
				return nil
			}

			if err := m.ComputationFunctions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("computation_functions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("computation_functions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainKestrelDataExportHeaderMappingV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainKestrelDataExportHeaderMappingV2) UnmarshalBinary(b []byte) error {
	var res DomainKestrelDataExportHeaderMappingV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
