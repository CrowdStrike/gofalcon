// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsInventoryType models inventory type
//
// swagger:model models.InventoryType
type ModelsInventoryType struct {

	// application packages
	ApplicationPackages []*ModelsApplicationPackageInfoType `json:"ApplicationPackages"`

	// config
	// Required: true
	Config *V1Image `json:"Config"`

	// config info
	// Required: true
	ConfigInfo *ModelsConfigInfoType `json:"ConfigInfo"`

	// e l f binaries
	// Required: true
	ELFBinaries []*ModelsELFBinaryInfoType `json:"ELFBinaries"`

	// image info
	// Required: true
	ImageInfo *ModelsImageInfoType `json:"ImageInfo"`

	// inventory engine info
	// Required: true
	InventoryEngineInfo *ModelsInventoryEngineInfoType `json:"InventoryEngineInfo"`

	// layers
	// Required: true
	Layers []*ModelsLayerInfoType `json:"Layers"`

	// m l models
	MLModels []*ModelsMLModelType `json:"MLModels"`

	// manifest
	// Required: true
	Manifest *Schema2Manifest `json:"Manifest"`

	// o s info
	// Required: true
	OSInfo *ModelsOSInfoType `json:"OSInfo"`

	// packages
	// Required: true
	Packages []*ModelsPackageInfoType `json:"Packages"`

	// ai related
	AiRelated bool `json:"ai_related,omitempty"`

	// high entropy s3 file exists
	HighEntropyS3FileExists bool `json:"high_entropy_s3_file_exists,omitempty"`

	// interesting strings
	InterestingStrings []*ModelsHEStringFileInfoType `json:"interesting_strings"`

	// whiteout files
	WhiteoutFiles []string `json:"whiteout_files"`
}

// Validate validates this models inventory type
func (m *ModelsInventoryType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationPackages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateELFBinaries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInventoryEngineInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLayers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMLModels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManifest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOSInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterestingStrings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsInventoryType) validateApplicationPackages(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationPackages) { // not required
		return nil
	}

	for i := 0; i < len(m.ApplicationPackages); i++ {
		if swag.IsZero(m.ApplicationPackages[i]) { // not required
			continue
		}

		if m.ApplicationPackages[i] != nil {
			if err := m.ApplicationPackages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ApplicationPackages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ApplicationPackages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsInventoryType) validateConfig(formats strfmt.Registry) error {

	if err := validate.Required("Config", "body", m.Config); err != nil {
		return err
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Config")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsInventoryType) validateConfigInfo(formats strfmt.Registry) error {

	if err := validate.Required("ConfigInfo", "body", m.ConfigInfo); err != nil {
		return err
	}

	if m.ConfigInfo != nil {
		if err := m.ConfigInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ConfigInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ConfigInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsInventoryType) validateELFBinaries(formats strfmt.Registry) error {

	if err := validate.Required("ELFBinaries", "body", m.ELFBinaries); err != nil {
		return err
	}

	for i := 0; i < len(m.ELFBinaries); i++ {
		if swag.IsZero(m.ELFBinaries[i]) { // not required
			continue
		}

		if m.ELFBinaries[i] != nil {
			if err := m.ELFBinaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ELFBinaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ELFBinaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsInventoryType) validateImageInfo(formats strfmt.Registry) error {

	if err := validate.Required("ImageInfo", "body", m.ImageInfo); err != nil {
		return err
	}

	if m.ImageInfo != nil {
		if err := m.ImageInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ImageInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ImageInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsInventoryType) validateInventoryEngineInfo(formats strfmt.Registry) error {

	if err := validate.Required("InventoryEngineInfo", "body", m.InventoryEngineInfo); err != nil {
		return err
	}

	if m.InventoryEngineInfo != nil {
		if err := m.InventoryEngineInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("InventoryEngineInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("InventoryEngineInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsInventoryType) validateLayers(formats strfmt.Registry) error {

	if err := validate.Required("Layers", "body", m.Layers); err != nil {
		return err
	}

	for i := 0; i < len(m.Layers); i++ {
		if swag.IsZero(m.Layers[i]) { // not required
			continue
		}

		if m.Layers[i] != nil {
			if err := m.Layers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Layers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Layers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsInventoryType) validateMLModels(formats strfmt.Registry) error {
	if swag.IsZero(m.MLModels) { // not required
		return nil
	}

	for i := 0; i < len(m.MLModels); i++ {
		if swag.IsZero(m.MLModels[i]) { // not required
			continue
		}

		if m.MLModels[i] != nil {
			if err := m.MLModels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MLModels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("MLModels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsInventoryType) validateManifest(formats strfmt.Registry) error {

	if err := validate.Required("Manifest", "body", m.Manifest); err != nil {
		return err
	}

	if m.Manifest != nil {
		if err := m.Manifest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Manifest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Manifest")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsInventoryType) validateOSInfo(formats strfmt.Registry) error {

	if err := validate.Required("OSInfo", "body", m.OSInfo); err != nil {
		return err
	}

	if m.OSInfo != nil {
		if err := m.OSInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OSInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OSInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsInventoryType) validatePackages(formats strfmt.Registry) error {

	if err := validate.Required("Packages", "body", m.Packages); err != nil {
		return err
	}

	for i := 0; i < len(m.Packages); i++ {
		if swag.IsZero(m.Packages[i]) { // not required
			continue
		}

		if m.Packages[i] != nil {
			if err := m.Packages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Packages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Packages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsInventoryType) validateInterestingStrings(formats strfmt.Registry) error {
	if swag.IsZero(m.InterestingStrings) { // not required
		return nil
	}

	for i := 0; i < len(m.InterestingStrings); i++ {
		if swag.IsZero(m.InterestingStrings[i]) { // not required
			continue
		}

		if m.InterestingStrings[i] != nil {
			if err := m.InterestingStrings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interesting_strings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interesting_strings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this models inventory type based on the context it is used
func (m *ModelsInventoryType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationPackages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateELFBinaries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImageInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInventoryEngineInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLayers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMLModels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateManifest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOSInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInterestingStrings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsInventoryType) contextValidateApplicationPackages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ApplicationPackages); i++ {

		if m.ApplicationPackages[i] != nil {

			if swag.IsZero(m.ApplicationPackages[i]) { // not required
				return nil
			}

			if err := m.ApplicationPackages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ApplicationPackages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ApplicationPackages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsInventoryType) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {

		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Config")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsInventoryType) contextValidateConfigInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ConfigInfo != nil {

		if err := m.ConfigInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ConfigInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ConfigInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsInventoryType) contextValidateELFBinaries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ELFBinaries); i++ {

		if m.ELFBinaries[i] != nil {

			if swag.IsZero(m.ELFBinaries[i]) { // not required
				return nil
			}

			if err := m.ELFBinaries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ELFBinaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ELFBinaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsInventoryType) contextValidateImageInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ImageInfo != nil {

		if err := m.ImageInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ImageInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ImageInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsInventoryType) contextValidateInventoryEngineInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.InventoryEngineInfo != nil {

		if err := m.InventoryEngineInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("InventoryEngineInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("InventoryEngineInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsInventoryType) contextValidateLayers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Layers); i++ {

		if m.Layers[i] != nil {

			if swag.IsZero(m.Layers[i]) { // not required
				return nil
			}

			if err := m.Layers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Layers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Layers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsInventoryType) contextValidateMLModels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MLModels); i++ {

		if m.MLModels[i] != nil {

			if swag.IsZero(m.MLModels[i]) { // not required
				return nil
			}

			if err := m.MLModels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MLModels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("MLModels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsInventoryType) contextValidateManifest(ctx context.Context, formats strfmt.Registry) error {

	if m.Manifest != nil {

		if err := m.Manifest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Manifest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Manifest")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsInventoryType) contextValidateOSInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.OSInfo != nil {

		if err := m.OSInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OSInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OSInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsInventoryType) contextValidatePackages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Packages); i++ {

		if m.Packages[i] != nil {

			if swag.IsZero(m.Packages[i]) { // not required
				return nil
			}

			if err := m.Packages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Packages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Packages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsInventoryType) contextValidateInterestingStrings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InterestingStrings); i++ {

		if m.InterestingStrings[i] != nil {

			if swag.IsZero(m.InterestingStrings[i]) { // not required
				return nil
			}

			if err := m.InterestingStrings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interesting_strings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interesting_strings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsInventoryType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsInventoryType) UnmarshalBinary(b []byte) error {
	var res ModelsInventoryType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
