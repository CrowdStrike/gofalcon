// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsComplianceExportGroupedByRulesReport models compliance export grouped by rules report
//
// swagger:model models.ComplianceExportGroupedByRulesReport
type ModelsComplianceExportGroupedByRulesReport struct {

	// asset type
	// Required: true
	AssetType *string `json:"asset_type"`

	// authority
	// Required: true
	Authority *string `json:"authority"`

	// clusters
	// Required: true
	Clusters *int64 `json:"clusters"`

	// clusters list
	// Required: true
	ClustersList *string `json:"clusters_list"`

	// failed containers
	// Required: true
	FailedContainers *int64 `json:"failed_containers"`

	// failed images
	// Required: true
	FailedImages *int64 `json:"failed_images"`

	// name
	// Required: true
	Name *string `json:"name"`

	// passed containers
	// Required: true
	PassedContainers *int64 `json:"passed_containers"`

	// passed images
	// Required: true
	PassedImages *int64 `json:"passed_images"`

	// rule id
	// Required: true
	RuleID *string `json:"rule_id"`

	// severity
	// Required: true
	Severity *float64 `json:"severity"`

	// total containers
	// Required: true
	TotalContainers *int64 `json:"total_containers"`

	// total images
	// Required: true
	TotalImages *int64 `json:"total_images"`
}

// Validate validates this models compliance export grouped by rules report
func (m *ModelsComplianceExportGroupedByRulesReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssetType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClustersList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedContainers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassedContainers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassedImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalContainers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalImages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsComplianceExportGroupedByRulesReport) validateAssetType(formats strfmt.Registry) error {

	if err := validate.Required("asset_type", "body", m.AssetType); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByRulesReport) validateAuthority(formats strfmt.Registry) error {

	if err := validate.Required("authority", "body", m.Authority); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByRulesReport) validateClusters(formats strfmt.Registry) error {

	if err := validate.Required("clusters", "body", m.Clusters); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByRulesReport) validateClustersList(formats strfmt.Registry) error {

	if err := validate.Required("clusters_list", "body", m.ClustersList); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByRulesReport) validateFailedContainers(formats strfmt.Registry) error {

	if err := validate.Required("failed_containers", "body", m.FailedContainers); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByRulesReport) validateFailedImages(formats strfmt.Registry) error {

	if err := validate.Required("failed_images", "body", m.FailedImages); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByRulesReport) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByRulesReport) validatePassedContainers(formats strfmt.Registry) error {

	if err := validate.Required("passed_containers", "body", m.PassedContainers); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByRulesReport) validatePassedImages(formats strfmt.Registry) error {

	if err := validate.Required("passed_images", "body", m.PassedImages); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByRulesReport) validateRuleID(formats strfmt.Registry) error {

	if err := validate.Required("rule_id", "body", m.RuleID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByRulesReport) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByRulesReport) validateTotalContainers(formats strfmt.Registry) error {

	if err := validate.Required("total_containers", "body", m.TotalContainers); err != nil {
		return err
	}

	return nil
}

func (m *ModelsComplianceExportGroupedByRulesReport) validateTotalImages(formats strfmt.Registry) error {

	if err := validate.Required("total_images", "body", m.TotalImages); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models compliance export grouped by rules report based on context it is used
func (m *ModelsComplianceExportGroupedByRulesReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsComplianceExportGroupedByRulesReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsComplianceExportGroupedByRulesReport) UnmarshalBinary(b []byte) error {
	var res ModelsComplianceExportGroupedByRulesReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
