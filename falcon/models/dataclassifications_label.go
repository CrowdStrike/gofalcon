// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataclassificationsLabel dataclassifications label
//
// swagger:model dataclassifications.Label
type DataclassificationsLabel struct {

	// label id
	// Required: true
	LabelID *string `json:"label_id"`

	// label name
	// Required: true
	LabelName *string `json:"label_name"`

	// last seen
	// Required: true
	// Format: date-time
	LastSeen *strfmt.DateTime `json:"last_seen"`
}

// Validate validates this dataclassifications label
func (m *DataclassificationsLabel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabelID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSeen(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataclassificationsLabel) validateLabelID(formats strfmt.Registry) error {

	if err := validate.Required("label_id", "body", m.LabelID); err != nil {
		return err
	}

	return nil
}

func (m *DataclassificationsLabel) validateLabelName(formats strfmt.Registry) error {

	if err := validate.Required("label_name", "body", m.LabelName); err != nil {
		return err
	}

	return nil
}

func (m *DataclassificationsLabel) validateLastSeen(formats strfmt.Registry) error {

	if err := validate.Required("last_seen", "body", m.LastSeen); err != nil {
		return err
	}

	if err := validate.FormatOf("last_seen", "body", "date-time", m.LastSeen.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this dataclassifications label based on context it is used
func (m *DataclassificationsLabel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DataclassificationsLabel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataclassificationsLabel) UnmarshalBinary(b []byte) error {
	var res DataclassificationsLabel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
