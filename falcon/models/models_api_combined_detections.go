// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsAPICombinedDetections models API combined detections
//
// swagger:model models.APICombinedDetections
type ModelsAPICombinedDetections struct {

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// containers impacted
	// Required: true
	ContainersImpacted *int64 `json:"containers_impacted"`

	// description
	// Required: true
	Description *string `json:"description"`

	// details
	// Required: true
	Details []string `json:"details"`

	// detection id
	// Required: true
	DetectionID *string `json:"detection_id"`

	// detection name
	// Required: true
	DetectionName *string `json:"detection_name"`

	// detection severity
	// Required: true
	DetectionSeverity *string `json:"detection_severity"`

	// detection type
	// Required: true
	DetectionType *string `json:"detection_type"`

	// images impacted
	// Required: true
	ImagesImpacted *int64 `json:"images_impacted"`

	// last detected
	// Required: true
	LastDetected *string `json:"last_detected"`

	// remediation
	// Required: true
	Remediation *string `json:"remediation"`

	// title
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this models API combined detections
func (m *ModelsAPICombinedDetections) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainersImpacted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectionName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectionSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImagesImpacted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastDetected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPICombinedDetections) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICombinedDetections) validateContainersImpacted(formats strfmt.Registry) error {

	if err := validate.Required("containers_impacted", "body", m.ContainersImpacted); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICombinedDetections) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICombinedDetections) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("details", "body", m.Details); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICombinedDetections) validateDetectionID(formats strfmt.Registry) error {

	if err := validate.Required("detection_id", "body", m.DetectionID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICombinedDetections) validateDetectionName(formats strfmt.Registry) error {

	if err := validate.Required("detection_name", "body", m.DetectionName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICombinedDetections) validateDetectionSeverity(formats strfmt.Registry) error {

	if err := validate.Required("detection_severity", "body", m.DetectionSeverity); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICombinedDetections) validateDetectionType(formats strfmt.Registry) error {

	if err := validate.Required("detection_type", "body", m.DetectionType); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICombinedDetections) validateImagesImpacted(formats strfmt.Registry) error {

	if err := validate.Required("images_impacted", "body", m.ImagesImpacted); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICombinedDetections) validateLastDetected(formats strfmt.Registry) error {

	if err := validate.Required("last_detected", "body", m.LastDetected); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICombinedDetections) validateRemediation(formats strfmt.Registry) error {

	if err := validate.Required("remediation", "body", m.Remediation); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICombinedDetections) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models API combined detections based on context it is used
func (m *ModelsAPICombinedDetections) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsAPICombinedDetections) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsAPICombinedDetections) UnmarshalBinary(b []byte) error {
	var res ModelsAPICombinedDetections
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
