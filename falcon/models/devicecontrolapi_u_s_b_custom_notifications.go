// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DevicecontrolapiUSBCustomNotifications devicecontrolapi u s b custom notifications
//
// swagger:model devicecontrolapi.USBCustomNotifications
type DevicecontrolapiUSBCustomNotifications struct {

	// blocked notification
	BlockedNotification *DevicecontrolapiUSBCustomNotification `json:"blocked_notification,omitempty"`

	// restricted notification
	RestrictedNotification *DevicecontrolapiUSBCustomNotification `json:"restricted_notification,omitempty"`
}

// Validate validates this devicecontrolapi u s b custom notifications
func (m *DevicecontrolapiUSBCustomNotifications) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlockedNotification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestrictedNotification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontrolapiUSBCustomNotifications) validateBlockedNotification(formats strfmt.Registry) error {
	if swag.IsZero(m.BlockedNotification) { // not required
		return nil
	}

	if m.BlockedNotification != nil {
		if err := m.BlockedNotification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("blocked_notification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("blocked_notification")
			}
			return err
		}
	}

	return nil
}

func (m *DevicecontrolapiUSBCustomNotifications) validateRestrictedNotification(formats strfmt.Registry) error {
	if swag.IsZero(m.RestrictedNotification) { // not required
		return nil
	}

	if m.RestrictedNotification != nil {
		if err := m.RestrictedNotification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restricted_notification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restricted_notification")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this devicecontrolapi u s b custom notifications based on the context it is used
func (m *DevicecontrolapiUSBCustomNotifications) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlockedNotification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestrictedNotification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontrolapiUSBCustomNotifications) contextValidateBlockedNotification(ctx context.Context, formats strfmt.Registry) error {

	if m.BlockedNotification != nil {

		if swag.IsZero(m.BlockedNotification) { // not required
			return nil
		}

		if err := m.BlockedNotification.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("blocked_notification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("blocked_notification")
			}
			return err
		}
	}

	return nil
}

func (m *DevicecontrolapiUSBCustomNotifications) contextValidateRestrictedNotification(ctx context.Context, formats strfmt.Registry) error {

	if m.RestrictedNotification != nil {

		if swag.IsZero(m.RestrictedNotification) { // not required
			return nil
		}

		if err := m.RestrictedNotification.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restricted_notification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restricted_notification")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DevicecontrolapiUSBCustomNotifications) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevicecontrolapiUSBCustomNotifications) UnmarshalBinary(b []byte) error {
	var res DevicecontrolapiUSBCustomNotifications
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
