// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VulnerabilitymetadataapiProviderMetadata vulnerabilitymetadataapi provider metadata
//
// swagger:model vulnerabilitymetadataapi.ProviderMetadata
type VulnerabilitymetadataapiProviderMetadata struct {

	// falcon
	// Required: true
	Falcon *VulnerabilitymetadataapiFalconVulnMetadata `json:"falcon"`

	// qualys
	// Required: true
	Qualys *VulnerabilitymetadataapiQualysVulnMetadata `json:"qualys"`

	// tenable
	// Required: true
	Tenable *VulnerabilitymetadataapiTenableVulnMetadata `json:"tenable"`
}

// Validate validates this vulnerabilitymetadataapi provider metadata
func (m *VulnerabilitymetadataapiProviderMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFalcon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQualys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilitymetadataapiProviderMetadata) validateFalcon(formats strfmt.Registry) error {

	if err := validate.Required("falcon", "body", m.Falcon); err != nil {
		return err
	}

	if m.Falcon != nil {
		if err := m.Falcon.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("falcon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("falcon")
			}
			return err
		}
	}

	return nil
}

func (m *VulnerabilitymetadataapiProviderMetadata) validateQualys(formats strfmt.Registry) error {

	if err := validate.Required("qualys", "body", m.Qualys); err != nil {
		return err
	}

	if m.Qualys != nil {
		if err := m.Qualys.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qualys")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("qualys")
			}
			return err
		}
	}

	return nil
}

func (m *VulnerabilitymetadataapiProviderMetadata) validateTenable(formats strfmt.Registry) error {

	if err := validate.Required("tenable", "body", m.Tenable); err != nil {
		return err
	}

	if m.Tenable != nil {
		if err := m.Tenable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tenable")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tenable")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vulnerabilitymetadataapi provider metadata based on the context it is used
func (m *VulnerabilitymetadataapiProviderMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFalcon(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQualys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTenable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilitymetadataapiProviderMetadata) contextValidateFalcon(ctx context.Context, formats strfmt.Registry) error {

	if m.Falcon != nil {

		if err := m.Falcon.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("falcon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("falcon")
			}
			return err
		}
	}

	return nil
}

func (m *VulnerabilitymetadataapiProviderMetadata) contextValidateQualys(ctx context.Context, formats strfmt.Registry) error {

	if m.Qualys != nil {

		if err := m.Qualys.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qualys")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("qualys")
			}
			return err
		}
	}

	return nil
}

func (m *VulnerabilitymetadataapiProviderMetadata) contextValidateTenable(ctx context.Context, formats strfmt.Registry) error {

	if m.Tenable != nil {

		if err := m.Tenable.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tenable")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tenable")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VulnerabilitymetadataapiProviderMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VulnerabilitymetadataapiProviderMetadata) UnmarshalBinary(b []byte) error {
	var res VulnerabilitymetadataapiProviderMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
