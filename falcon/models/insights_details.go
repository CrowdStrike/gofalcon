// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InsightsDetails insights details
//
// swagger:model insights.Details
type InsightsDetails struct {

	// calculated at
	// Required: true
	// Format: date-time
	CalculatedAt *strfmt.DateTime `json:"calculatedAt"`

	// context
	Context interface{} `json:"context,omitempty"`

	// value
	// Required: true
	Value InsightsDetailsValue `json:"value"`
}

// Validate validates this insights details
func (m *InsightsDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCalculatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InsightsDetails) validateCalculatedAt(formats strfmt.Registry) error {

	if err := validate.Required("calculatedAt", "body", m.CalculatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("calculatedAt", "body", "date-time", m.CalculatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InsightsDetails) validateValue(formats strfmt.Registry) error {

	if m.Value == nil {
		return errors.Required("value", "body", nil)
	}

	return nil
}

// ContextValidate validates this insights details based on context it is used
func (m *InsightsDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InsightsDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InsightsDetails) UnmarshalBinary(b []byte) error {
	var res InsightsDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
