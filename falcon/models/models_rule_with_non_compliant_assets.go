// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsRuleWithNonCompliantAssets models rule with non compliant assets
//
// swagger:model models.RuleWithNonCompliantAssets
type ModelsRuleWithNonCompliantAssets struct {

	// asset count
	// Required: true
	AssetCount *int64 `json:"asset_count"`

	// name
	// Required: true
	Name *string `json:"name"`

	// recommendation id
	// Required: true
	RecommendationID *string `json:"recommendation_id"`

	// severity
	// Required: true
	Severity *int64 `json:"severity"`
}

// Validate validates this models rule with non compliant assets
func (m *ModelsRuleWithNonCompliantAssets) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssetCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecommendationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsRuleWithNonCompliantAssets) validateAssetCount(formats strfmt.Registry) error {

	if err := validate.Required("asset_count", "body", m.AssetCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsRuleWithNonCompliantAssets) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ModelsRuleWithNonCompliantAssets) validateRecommendationID(formats strfmt.Registry) error {

	if err := validate.Required("recommendation_id", "body", m.RecommendationID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsRuleWithNonCompliantAssets) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models rule with non compliant assets based on context it is used
func (m *ModelsRuleWithNonCompliantAssets) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsRuleWithNonCompliantAssets) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsRuleWithNonCompliantAssets) UnmarshalBinary(b []byte) error {
	var res ModelsRuleWithNonCompliantAssets
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
