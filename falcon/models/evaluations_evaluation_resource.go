// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EvaluationsEvaluationResource evaluations evaluation resource
//
// swagger:model evaluations.EvaluationResource
type EvaluationsEvaluationResource struct {

	// captured
	// Format: date-time
	Captured strfmt.DateTime `json:"captured,omitempty"`

	// cloud groups
	CloudGroups []*DomainCloudScope `json:"cloud_groups"`

	// cloud labels
	CloudLabels []*ClassificationLabel `json:"cloud_labels"`

	// cloud scopes
	CloudScopes []*ClassificationCloudScopeRule `json:"cloud_scopes"`

	// creation time
	// Format: date-time
	CreationTime strfmt.DateTime `json:"creation_time,omitempty"`

	// gcrn
	Gcrn string `json:"gcrn,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// resource id
	ResourceID string `json:"resource_id,omitempty"`

	// resource name
	ResourceName string `json:"resource_name,omitempty"`

	// resource type
	ResourceType string `json:"resource_type,omitempty"`

	// resource type name
	ResourceTypeName string `json:"resource_type_name,omitempty"`

	// service
	Service string `json:"service,omitempty"`

	// service category
	ServiceCategory string `json:"service_category,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// tags
	Tags map[string]string `json:"tags,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this evaluations evaluation resource
func (m *EvaluationsEvaluationResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCaptured(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudScopes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvaluationsEvaluationResource) validateCaptured(formats strfmt.Registry) error {
	if swag.IsZero(m.Captured) { // not required
		return nil
	}

	if err := validate.FormatOf("captured", "body", "date-time", m.Captured.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationsEvaluationResource) validateCloudGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.CloudGroups); i++ {
		if swag.IsZero(m.CloudGroups[i]) { // not required
			continue
		}

		if m.CloudGroups[i] != nil {
			if err := m.CloudGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloud_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloud_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EvaluationsEvaluationResource) validateCloudLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudLabels) { // not required
		return nil
	}

	for i := 0; i < len(m.CloudLabels); i++ {
		if swag.IsZero(m.CloudLabels[i]) { // not required
			continue
		}

		if m.CloudLabels[i] != nil {
			if err := m.CloudLabels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloud_labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloud_labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EvaluationsEvaluationResource) validateCloudScopes(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudScopes) { // not required
		return nil
	}

	for i := 0; i < len(m.CloudScopes); i++ {
		if swag.IsZero(m.CloudScopes[i]) { // not required
			continue
		}

		if m.CloudScopes[i] != nil {
			if err := m.CloudScopes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloud_scopes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloud_scopes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EvaluationsEvaluationResource) validateCreationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_time", "body", "date-time", m.CreationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this evaluations evaluation resource based on the context it is used
func (m *EvaluationsEvaluationResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudScopes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvaluationsEvaluationResource) contextValidateCloudGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CloudGroups); i++ {

		if m.CloudGroups[i] != nil {

			if swag.IsZero(m.CloudGroups[i]) { // not required
				return nil
			}

			if err := m.CloudGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloud_groups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloud_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EvaluationsEvaluationResource) contextValidateCloudLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CloudLabels); i++ {

		if m.CloudLabels[i] != nil {

			if swag.IsZero(m.CloudLabels[i]) { // not required
				return nil
			}

			if err := m.CloudLabels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloud_labels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloud_labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EvaluationsEvaluationResource) contextValidateCloudScopes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CloudScopes); i++ {

		if m.CloudScopes[i] != nil {

			if swag.IsZero(m.CloudScopes[i]) { // not required
				return nil
			}

			if err := m.CloudScopes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloud_scopes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloud_scopes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EvaluationsEvaluationResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EvaluationsEvaluationResource) UnmarshalBinary(b []byte) error {
	var res EvaluationsEvaluationResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
