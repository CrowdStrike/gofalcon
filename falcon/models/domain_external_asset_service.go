// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainExternalAssetService domain external asset service
//
// swagger:model domain.ExternalAssetService
type DomainExternalAssetService struct {

	// Details about the applications associated to the service
	Applications []*DomainExternalAssetApplication `json:"applications"`

	// HATEOAS representation of related URLs for downloading/previewing blobs
	BlobLinks *DomainExternalAssetServiceBlobsLinks `json:"blob_links,omitempty"`

	// The cloud provider name
	CloudProvider string `json:"cloud_provider,omitempty"`

	// A list of Common Platform Enumeration identifiers for this service. The schema format is: cpe:<cpe_version>:<part>:<vendor>:<product>:<version>:<update>:<edition>:<language>:<sw_edition>:<target_sw>:<target_hw>:<other>
	Cpes []string `json:"cpes"`

	// The first time this service was observed
	// Format: date-time
	FirstSeen strfmt.DateTime `json:"first_seen,omitempty"`

	// The hosting provider name
	HostingProvider string `json:"hosting_provider,omitempty"`

	// A list of common HTTP attributes extracted from the response
	HTTPAttributes *DomainExternalAssetHTTPAttributes `json:"http_attributes,omitempty"`

	// The unique external asset identifier
	// Required: true
	ID *string `json:"id"`

	// The date on which this was last scanned
	// Required: true
	// Format: date-time
	LastSeen *strfmt.DateTime `json:"last_seen"`

	// The operating system the service is running on
	Os string `json:"os,omitempty"`

	// The name of the platform on which the service is running (Windows, Mac, Linux).
	PlatformName string `json:"platform_name,omitempty"`

	// The port on which the service is accessible
	// Required: true
	Port *int32 `json:"port"`

	// The protocol used to access this service
	// Required: true
	Protocol *string `json:"protocol"`

	// The availability status for this service
	// Required: true
	Status *string `json:"status"`

	// The status code returned by the service
	// Required: true
	StatusCode *int32 `json:"status_code"`

	// List of subsidiaries that the asset belongs to
	Subsidiaries []*DomainExternalAssetSubsidiary `json:"subsidiaries"`

	// SSL/TLS information
	TLS *DomainExternalAssetSSLRecord `json:"tls,omitempty"`

	// The network transport used to access this service
	// Required: true
	Transport *string `json:"transport"`
}

// Validate validates this domain external asset service
func (m *DomainExternalAssetService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlobLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstSeen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSeen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubsidiaries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTLS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransport(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainExternalAssetService) validateApplications(formats strfmt.Registry) error {
	if swag.IsZero(m.Applications) { // not required
		return nil
	}

	for i := 0; i < len(m.Applications); i++ {
		if swag.IsZero(m.Applications[i]) { // not required
			continue
		}

		if m.Applications[i] != nil {
			if err := m.Applications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainExternalAssetService) validateBlobLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.BlobLinks) { // not required
		return nil
	}

	if m.BlobLinks != nil {
		if err := m.BlobLinks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("blob_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("blob_links")
			}
			return err
		}
	}

	return nil
}

func (m *DomainExternalAssetService) validateFirstSeen(formats strfmt.Registry) error {
	if swag.IsZero(m.FirstSeen) { // not required
		return nil
	}

	if err := validate.FormatOf("first_seen", "body", "date-time", m.FirstSeen.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainExternalAssetService) validateHTTPAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.HTTPAttributes) { // not required
		return nil
	}

	if m.HTTPAttributes != nil {
		if err := m.HTTPAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http_attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("http_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *DomainExternalAssetService) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DomainExternalAssetService) validateLastSeen(formats strfmt.Registry) error {

	if err := validate.Required("last_seen", "body", m.LastSeen); err != nil {
		return err
	}

	if err := validate.FormatOf("last_seen", "body", "date-time", m.LastSeen.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainExternalAssetService) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

func (m *DomainExternalAssetService) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *DomainExternalAssetService) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *DomainExternalAssetService) validateStatusCode(formats strfmt.Registry) error {

	if err := validate.Required("status_code", "body", m.StatusCode); err != nil {
		return err
	}

	return nil
}

func (m *DomainExternalAssetService) validateSubsidiaries(formats strfmt.Registry) error {
	if swag.IsZero(m.Subsidiaries) { // not required
		return nil
	}

	for i := 0; i < len(m.Subsidiaries); i++ {
		if swag.IsZero(m.Subsidiaries[i]) { // not required
			continue
		}

		if m.Subsidiaries[i] != nil {
			if err := m.Subsidiaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subsidiaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subsidiaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainExternalAssetService) validateTLS(formats strfmt.Registry) error {
	if swag.IsZero(m.TLS) { // not required
		return nil
	}

	if m.TLS != nil {
		if err := m.TLS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tls")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tls")
			}
			return err
		}
	}

	return nil
}

func (m *DomainExternalAssetService) validateTransport(formats strfmt.Registry) error {

	if err := validate.Required("transport", "body", m.Transport); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this domain external asset service based on the context it is used
func (m *DomainExternalAssetService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBlobLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHTTPAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubsidiaries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTLS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainExternalAssetService) contextValidateApplications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Applications); i++ {

		if m.Applications[i] != nil {

			if swag.IsZero(m.Applications[i]) { // not required
				return nil
			}

			if err := m.Applications[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainExternalAssetService) contextValidateBlobLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.BlobLinks != nil {

		if swag.IsZero(m.BlobLinks) { // not required
			return nil
		}

		if err := m.BlobLinks.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("blob_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("blob_links")
			}
			return err
		}
	}

	return nil
}

func (m *DomainExternalAssetService) contextValidateHTTPAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.HTTPAttributes != nil {

		if swag.IsZero(m.HTTPAttributes) { // not required
			return nil
		}

		if err := m.HTTPAttributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http_attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("http_attributes")
			}
			return err
		}
	}

	return nil
}

func (m *DomainExternalAssetService) contextValidateSubsidiaries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Subsidiaries); i++ {

		if m.Subsidiaries[i] != nil {

			if swag.IsZero(m.Subsidiaries[i]) { // not required
				return nil
			}

			if err := m.Subsidiaries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subsidiaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subsidiaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainExternalAssetService) contextValidateTLS(ctx context.Context, formats strfmt.Registry) error {

	if m.TLS != nil {

		if swag.IsZero(m.TLS) { // not required
			return nil
		}

		if err := m.TLS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tls")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tls")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainExternalAssetService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainExternalAssetService) UnmarshalBinary(b []byte) error {
	var res DomainExternalAssetService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
