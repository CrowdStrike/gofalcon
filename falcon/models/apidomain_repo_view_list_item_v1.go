// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApidomainRepoViewListItemV1 apidomain repo view list item v1
//
// swagger:model apidomain.RepoViewListItemV1
type ApidomainRepoViewListItemV1 struct {

	// connections
	Connections []*ApidomainViewConnectionV1 `json:"connections"`

	// description
	// Required: true
	Description *string `json:"description"`

	// display name
	// Required: true
	DisplayName *string `json:"display_name"`

	// has test data
	// Required: true
	HasTestData *bool `json:"has_test_data"`

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// name contracted
	// Required: true
	NameContracted *string `json:"name_contracted"`

	// size
	Size int64 `json:"size,omitempty"`

	// type name
	// Required: true
	TypeName *string `json:"type_name"`
}

// Validate validates this apidomain repo view list item v1
func (m *ApidomainRepoViewListItemV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasTestData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameContracted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApidomainRepoViewListItemV1) validateConnections(formats strfmt.Registry) error {
	if swag.IsZero(m.Connections) { // not required
		return nil
	}

	for i := 0; i < len(m.Connections); i++ {
		if swag.IsZero(m.Connections[i]) { // not required
			continue
		}

		if m.Connections[i] != nil {
			if err := m.Connections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApidomainRepoViewListItemV1) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ApidomainRepoViewListItemV1) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("display_name", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *ApidomainRepoViewListItemV1) validateHasTestData(formats strfmt.Registry) error {

	if err := validate.Required("has_test_data", "body", m.HasTestData); err != nil {
		return err
	}

	return nil
}

func (m *ApidomainRepoViewListItemV1) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ApidomainRepoViewListItemV1) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ApidomainRepoViewListItemV1) validateNameContracted(formats strfmt.Registry) error {

	if err := validate.Required("name_contracted", "body", m.NameContracted); err != nil {
		return err
	}

	return nil
}

func (m *ApidomainRepoViewListItemV1) validateTypeName(formats strfmt.Registry) error {

	if err := validate.Required("type_name", "body", m.TypeName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this apidomain repo view list item v1 based on the context it is used
func (m *ApidomainRepoViewListItemV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApidomainRepoViewListItemV1) contextValidateConnections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Connections); i++ {

		if m.Connections[i] != nil {

			if swag.IsZero(m.Connections[i]) { // not required
				return nil
			}

			if err := m.Connections[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApidomainRepoViewListItemV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApidomainRepoViewListItemV1) UnmarshalBinary(b []byte) error {
	var res ApidomainRepoViewListItemV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
