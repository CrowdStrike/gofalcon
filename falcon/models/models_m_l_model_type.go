// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsMLModelType models m l model type
//
// swagger:model models.MLModelType
type ModelsMLModelType struct {

	// details
	// Required: true
	Details interface{} `json:"Details"`

	// detection name
	DetectionName string `json:"DetectionName,omitempty"`

	// hash
	// Required: true
	Hash *string `json:"Hash"`

	// layer hash
	// Required: true
	LayerHash *string `json:"LayerHash"`

	// layer index
	// Required: true
	LayerIndex *int32 `json:"LayerIndex"`

	// malicious
	// Required: true
	Malicious *bool `json:"Malicious"`

	// path
	// Required: true
	Path *string `json:"Path"`

	// size
	// Required: true
	Size *int64 `json:"Size"`
}

// Validate validates this models m l model type
func (m *ModelsMLModelType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLayerHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLayerIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMalicious(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsMLModelType) validateDetails(formats strfmt.Registry) error {

	if m.Details == nil {
		return errors.Required("Details", "body", nil)
	}

	return nil
}

func (m *ModelsMLModelType) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("Hash", "body", m.Hash); err != nil {
		return err
	}

	return nil
}

func (m *ModelsMLModelType) validateLayerHash(formats strfmt.Registry) error {

	if err := validate.Required("LayerHash", "body", m.LayerHash); err != nil {
		return err
	}

	return nil
}

func (m *ModelsMLModelType) validateLayerIndex(formats strfmt.Registry) error {

	if err := validate.Required("LayerIndex", "body", m.LayerIndex); err != nil {
		return err
	}

	return nil
}

func (m *ModelsMLModelType) validateMalicious(formats strfmt.Registry) error {

	if err := validate.Required("Malicious", "body", m.Malicious); err != nil {
		return err
	}

	return nil
}

func (m *ModelsMLModelType) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("Path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *ModelsMLModelType) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("Size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models m l model type based on context it is used
func (m *ModelsMLModelType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsMLModelType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsMLModelType) UnmarshalBinary(b []byte) error {
	var res ModelsMLModelType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
