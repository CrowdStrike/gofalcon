// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainSchedule domain schedule
//
// swagger:model domain.Schedule
type DomainSchedule struct {

	// can stagger
	// Required: true
	CanStagger *bool `json:"can_stagger"`

	// definition
	// Required: true
	Definition *string `json:"definition"`

	// display
	// Required: true
	Display *string `json:"display"`
}

// Validate validates this domain schedule
func (m *DomainSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCanStagger(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplay(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainSchedule) validateCanStagger(formats strfmt.Registry) error {

	if err := validate.Required("can_stagger", "body", m.CanStagger); err != nil {
		return err
	}

	return nil
}

func (m *DomainSchedule) validateDefinition(formats strfmt.Registry) error {

	if err := validate.Required("definition", "body", m.Definition); err != nil {
		return err
	}

	return nil
}

func (m *DomainSchedule) validateDisplay(formats strfmt.Registry) error {

	if err := validate.Required("display", "body", m.Display); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain schedule based on context it is used
func (m *DomainSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainSchedule) UnmarshalBinary(b []byte) error {
	var res DomainSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
