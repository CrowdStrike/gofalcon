// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DevicecontrolapiRespPolicyV2 devicecontrolapi resp policy v2
//
// swagger:model devicecontrolapi.RespPolicyV2
type DevicecontrolapiRespPolicyV2 struct {

	// Default or Automatic
	// Required: true
	AssignmentType *string `json:"assignment_type"`

	// Bluetooth channel file version number
	BluetoothChannelVersion int64 `json:"bluetooth_channel_version,omitempty"`

	// Object for specific Bluetooth settings
	BluetoothSettings *DevicecontrolapiBluetoothSettings `json:"bluetooth_settings,omitempty"`

	// Customer ID of the policy
	// Required: true
	Cid *string `json:"cid"`

	// CS username who created the policy
	// Required: true
	CreatedBy *string `json:"created_by"`

	// UTC time policy created
	// Required: true
	CreatedTimestamp *string `json:"created_timestamp"`

	// Description of the policy
	Description string `json:"description,omitempty"`

	// Policy level enablement of the policy
	// Required: true
	Enabled *bool `json:"enabled"`

	// Host group IDs assigned to this policy
	// Required: true
	Groups []string `json:"groups"`

	// ID of the policy
	// Required: true
	ID *string `json:"id"`

	// Last CS username who modified the policy
	// Required: true
	ModifiedBy *string `json:"modified_by"`

	// UTC time policy modified
	// Required: true
	ModifiedTimestamp *string `json:"modified_timestamp"`

	// Name of the policy
	// Required: true
	Name *string `json:"name"`

	// The platform numeric value. Windows:0, MacOS:1
	// Required: true
	PlatformID *string `json:"platform_id"`

	// Policy platform name (Windows or Mac)
	// Required: true
	PlatformName *string `json:"platform_name"`

	// Order in which a policy is applied (lower values is higher precedence)
	// Required: true
	Precedence *int64 `json:"precedence"`

	// The hash of hostgroups assigned to the policy
	SettingsHash string `json:"settings_hash,omitempty"`

	// USB channel file version number
	// Required: true
	UsbChannelVersion *int64 `json:"usb_channel_version"`

	// Object for the USB specific policy settings
	// Required: true
	UsbSettings *DevicecontrolapiRespUSBSettingsV2 `json:"usb_settings"`
}

// Validate validates this devicecontrolapi resp policy v2
func (m *DevicecontrolapiRespPolicyV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignmentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBluetoothSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrecedence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsbChannelVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsbSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontrolapiRespPolicyV2) validateAssignmentType(formats strfmt.Registry) error {

	if err := validate.Required("assignment_type", "body", m.AssignmentType); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiRespPolicyV2) validateBluetoothSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.BluetoothSettings) { // not required
		return nil
	}

	if m.BluetoothSettings != nil {
		if err := m.BluetoothSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bluetooth_settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bluetooth_settings")
			}
			return err
		}
	}

	return nil
}

func (m *DevicecontrolapiRespPolicyV2) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiRespPolicyV2) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("created_by", "body", m.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiRespPolicyV2) validateCreatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("created_timestamp", "body", m.CreatedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiRespPolicyV2) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiRespPolicyV2) validateGroups(formats strfmt.Registry) error {

	if err := validate.Required("groups", "body", m.Groups); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiRespPolicyV2) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiRespPolicyV2) validateModifiedBy(formats strfmt.Registry) error {

	if err := validate.Required("modified_by", "body", m.ModifiedBy); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiRespPolicyV2) validateModifiedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("modified_timestamp", "body", m.ModifiedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiRespPolicyV2) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiRespPolicyV2) validatePlatformID(formats strfmt.Registry) error {

	if err := validate.Required("platform_id", "body", m.PlatformID); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiRespPolicyV2) validatePlatformName(formats strfmt.Registry) error {

	if err := validate.Required("platform_name", "body", m.PlatformName); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiRespPolicyV2) validatePrecedence(formats strfmt.Registry) error {

	if err := validate.Required("precedence", "body", m.Precedence); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiRespPolicyV2) validateUsbChannelVersion(formats strfmt.Registry) error {

	if err := validate.Required("usb_channel_version", "body", m.UsbChannelVersion); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiRespPolicyV2) validateUsbSettings(formats strfmt.Registry) error {

	if err := validate.Required("usb_settings", "body", m.UsbSettings); err != nil {
		return err
	}

	if m.UsbSettings != nil {
		if err := m.UsbSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usb_settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usb_settings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this devicecontrolapi resp policy v2 based on the context it is used
func (m *DevicecontrolapiRespPolicyV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBluetoothSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsbSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontrolapiRespPolicyV2) contextValidateBluetoothSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.BluetoothSettings != nil {

		if swag.IsZero(m.BluetoothSettings) { // not required
			return nil
		}

		if err := m.BluetoothSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bluetooth_settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bluetooth_settings")
			}
			return err
		}
	}

	return nil
}

func (m *DevicecontrolapiRespPolicyV2) contextValidateUsbSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.UsbSettings != nil {

		if err := m.UsbSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usb_settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usb_settings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DevicecontrolapiRespPolicyV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevicecontrolapiRespPolicyV2) UnmarshalBinary(b []byte) error {
	var res DevicecontrolapiRespPolicyV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
