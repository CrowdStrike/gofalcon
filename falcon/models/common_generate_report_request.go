// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonGenerateReportRequest common generate report request
//
// swagger:model common.GenerateReportRequest
type CommonGenerateReportRequest struct {

	// fields
	// Required: true
	Fields []string `json:"fields"`

	// format
	// Required: true
	Format *string `json:"format"`

	// fql
	// Required: true
	Fql *string `json:"fql"`

	// params
	// Required: true
	Params CommonGenerateReportRequestParams `json:"params"`

	// report format
	// Required: true
	ReportFormat *string `json:"report_format"`

	// report type
	// Required: true
	ReportType *string `json:"report_type"`

	// search
	// Required: true
	Search CommonGenerateReportRequestSearch `json:"search"`

	// sort
	// Required: true
	Sort []string `json:"sort"`

	// subresource
	// Required: true
	Subresource *string `json:"subresource"`
}

// Validate validates this common generate report request
func (m *CommonGenerateReportRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFql(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSearch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubresource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonGenerateReportRequest) validateFields(formats strfmt.Registry) error {

	if err := validate.Required("fields", "body", m.Fields); err != nil {
		return err
	}

	return nil
}

func (m *CommonGenerateReportRequest) validateFormat(formats strfmt.Registry) error {

	if err := validate.Required("format", "body", m.Format); err != nil {
		return err
	}

	return nil
}

func (m *CommonGenerateReportRequest) validateFql(formats strfmt.Registry) error {

	if err := validate.Required("fql", "body", m.Fql); err != nil {
		return err
	}

	return nil
}

func (m *CommonGenerateReportRequest) validateParams(formats strfmt.Registry) error {

	if m.Params == nil {
		return errors.Required("params", "body", nil)
	}

	return nil
}

func (m *CommonGenerateReportRequest) validateReportFormat(formats strfmt.Registry) error {

	if err := validate.Required("report_format", "body", m.ReportFormat); err != nil {
		return err
	}

	return nil
}

func (m *CommonGenerateReportRequest) validateReportType(formats strfmt.Registry) error {

	if err := validate.Required("report_type", "body", m.ReportType); err != nil {
		return err
	}

	return nil
}

func (m *CommonGenerateReportRequest) validateSearch(formats strfmt.Registry) error {

	if m.Search == nil {
		return errors.Required("search", "body", nil)
	}

	return nil
}

func (m *CommonGenerateReportRequest) validateSort(formats strfmt.Registry) error {

	if err := validate.Required("sort", "body", m.Sort); err != nil {
		return err
	}

	return nil
}

func (m *CommonGenerateReportRequest) validateSubresource(formats strfmt.Registry) error {

	if err := validate.Required("subresource", "body", m.Subresource); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this common generate report request based on context it is used
func (m *CommonGenerateReportRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CommonGenerateReportRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonGenerateReportRequest) UnmarshalBinary(b []byte) error {
	var res CommonGenerateReportRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
