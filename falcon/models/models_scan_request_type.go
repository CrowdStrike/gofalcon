// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsScanRequestType models scan request type
//
// swagger:model models.ScanRequestType
type ModelsScanRequestType struct {

	// config
	// Required: true
	Config *V1Image `json:"Config"`

	// config info
	// Required: true
	ConfigInfo *ModelsConfigInfoType `json:"ConfigInfo"`

	// image info
	ImageInfo *ModelsImageInfoType `json:"ImageInfo,omitempty"`

	// image metadata
	// Required: true
	ImageMetadata *ModelsImageMetadataType `json:"ImageMetadata"`

	// layers
	// Required: true
	Layers []*ModelsLayerInfoType `json:"Layers"`

	// manifest
	// Required: true
	Manifest *Schema2Manifest `json:"Manifest"`

	// scan info
	ScanInfo *ModelsScanInfoType `json:"ScanInfo,omitempty"`

	// high entropy strings s3 key
	// Required: true
	HighEntropyStringsS3Key *string `json:"high_entropy_strings_s3_key"`

	// image inventory s3 key
	// Required: true
	ImageInventoryS3Key *string `json:"image_inventory_s3_key"`

	// layer inventory s3 key
	// Required: true
	LayerInventoryS3Key *string `json:"layer_inventory_s3_key"`

	// scan report s3 key
	// Required: true
	ScanReportS3Key *string `json:"scan_report_s3_key"`

	// scan request s3 key
	// Required: true
	ScanRequestS3Key *string `json:"scan_request_s3_key"`
}

// Validate validates this models scan request type
func (m *ModelsScanRequestType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLayers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManifest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHighEntropyStringsS3Key(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageInventoryS3Key(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLayerInventoryS3Key(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanReportS3Key(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanRequestS3Key(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsScanRequestType) validateConfig(formats strfmt.Registry) error {

	if err := validate.Required("Config", "body", m.Config); err != nil {
		return err
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Config")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsScanRequestType) validateConfigInfo(formats strfmt.Registry) error {

	if err := validate.Required("ConfigInfo", "body", m.ConfigInfo); err != nil {
		return err
	}

	if m.ConfigInfo != nil {
		if err := m.ConfigInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ConfigInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ConfigInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsScanRequestType) validateImageInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ImageInfo) { // not required
		return nil
	}

	if m.ImageInfo != nil {
		if err := m.ImageInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ImageInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ImageInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsScanRequestType) validateImageMetadata(formats strfmt.Registry) error {

	if err := validate.Required("ImageMetadata", "body", m.ImageMetadata); err != nil {
		return err
	}

	if m.ImageMetadata != nil {
		if err := m.ImageMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ImageMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ImageMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsScanRequestType) validateLayers(formats strfmt.Registry) error {

	if err := validate.Required("Layers", "body", m.Layers); err != nil {
		return err
	}

	for i := 0; i < len(m.Layers); i++ {
		if swag.IsZero(m.Layers[i]) { // not required
			continue
		}

		if m.Layers[i] != nil {
			if err := m.Layers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Layers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Layers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsScanRequestType) validateManifest(formats strfmt.Registry) error {

	if err := validate.Required("Manifest", "body", m.Manifest); err != nil {
		return err
	}

	if m.Manifest != nil {
		if err := m.Manifest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Manifest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Manifest")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsScanRequestType) validateScanInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ScanInfo) { // not required
		return nil
	}

	if m.ScanInfo != nil {
		if err := m.ScanInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ScanInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ScanInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsScanRequestType) validateHighEntropyStringsS3Key(formats strfmt.Registry) error {

	if err := validate.Required("high_entropy_strings_s3_key", "body", m.HighEntropyStringsS3Key); err != nil {
		return err
	}

	return nil
}

func (m *ModelsScanRequestType) validateImageInventoryS3Key(formats strfmt.Registry) error {

	if err := validate.Required("image_inventory_s3_key", "body", m.ImageInventoryS3Key); err != nil {
		return err
	}

	return nil
}

func (m *ModelsScanRequestType) validateLayerInventoryS3Key(formats strfmt.Registry) error {

	if err := validate.Required("layer_inventory_s3_key", "body", m.LayerInventoryS3Key); err != nil {
		return err
	}

	return nil
}

func (m *ModelsScanRequestType) validateScanReportS3Key(formats strfmt.Registry) error {

	if err := validate.Required("scan_report_s3_key", "body", m.ScanReportS3Key); err != nil {
		return err
	}

	return nil
}

func (m *ModelsScanRequestType) validateScanRequestS3Key(formats strfmt.Registry) error {

	if err := validate.Required("scan_request_s3_key", "body", m.ScanRequestS3Key); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this models scan request type based on the context it is used
func (m *ModelsScanRequestType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImageInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImageMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLayers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateManifest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScanInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsScanRequestType) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {

		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Config")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsScanRequestType) contextValidateConfigInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ConfigInfo != nil {

		if err := m.ConfigInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ConfigInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ConfigInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsScanRequestType) contextValidateImageInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ImageInfo != nil {

		if swag.IsZero(m.ImageInfo) { // not required
			return nil
		}

		if err := m.ImageInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ImageInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ImageInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsScanRequestType) contextValidateImageMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.ImageMetadata != nil {

		if err := m.ImageMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ImageMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ImageMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsScanRequestType) contextValidateLayers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Layers); i++ {

		if m.Layers[i] != nil {

			if swag.IsZero(m.Layers[i]) { // not required
				return nil
			}

			if err := m.Layers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Layers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Layers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsScanRequestType) contextValidateManifest(ctx context.Context, formats strfmt.Registry) error {

	if m.Manifest != nil {

		if err := m.Manifest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Manifest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Manifest")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsScanRequestType) contextValidateScanInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ScanInfo != nil {

		if swag.IsZero(m.ScanInfo) { // not required
			return nil
		}

		if err := m.ScanInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ScanInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ScanInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsScanRequestType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsScanRequestType) UnmarshalBinary(b []byte) error {
	var res ModelsScanRequestType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
