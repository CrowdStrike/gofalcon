// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APISLAV1CreateRequestGoals api SLA v1 create request goals
//
// swagger:model api.SLAV1CreateRequest.goals
type APISLAV1CreateRequestGoals struct {

	// duration seconds
	// Required: true
	DurationSeconds *int32 `json:"duration_seconds"`

	// escalation policy
	EscalationPolicy *APISLAV1CreateRequestGoalsEscalationPolicy `json:"escalation_policy,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this api SLA v1 create request goals
func (m *APISLAV1CreateRequestGoals) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDurationSeconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEscalationPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APISLAV1CreateRequestGoals) validateDurationSeconds(formats strfmt.Registry) error {

	if err := validate.Required("duration_seconds", "body", m.DurationSeconds); err != nil {
		return err
	}

	return nil
}

func (m *APISLAV1CreateRequestGoals) validateEscalationPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.EscalationPolicy) { // not required
		return nil
	}

	if m.EscalationPolicy != nil {
		if err := m.EscalationPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("escalation_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("escalation_policy")
			}
			return err
		}
	}

	return nil
}

func (m *APISLAV1CreateRequestGoals) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this api SLA v1 create request goals based on the context it is used
func (m *APISLAV1CreateRequestGoals) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEscalationPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APISLAV1CreateRequestGoals) contextValidateEscalationPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.EscalationPolicy != nil {

		if swag.IsZero(m.EscalationPolicy) { // not required
			return nil
		}

		if err := m.EscalationPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("escalation_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("escalation_policy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APISLAV1CreateRequestGoals) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APISLAV1CreateRequestGoals) UnmarshalBinary(b []byte) error {
	var res APISLAV1CreateRequestGoals
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
