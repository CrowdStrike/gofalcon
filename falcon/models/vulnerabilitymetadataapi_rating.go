// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VulnerabilitymetadataapiRating vulnerabilitymetadataapi rating
//
// swagger:model vulnerabilitymetadataapi.Rating
type VulnerabilitymetadataapiRating struct {

	// rating
	// Required: true
	Rating *string `json:"rating"`

	// recorded timestamp
	// Required: true
	// Format: date-time
	RecordedTimestamp *strfmt.DateTime `json:"recorded_timestamp"`
}

// Validate validates this vulnerabilitymetadataapi rating
func (m *VulnerabilitymetadataapiRating) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRating(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecordedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilitymetadataapiRating) validateRating(formats strfmt.Registry) error {

	if err := validate.Required("rating", "body", m.Rating); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRating) validateRecordedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("recorded_timestamp", "body", m.RecordedTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("recorded_timestamp", "body", "date-time", m.RecordedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vulnerabilitymetadataapi rating based on context it is used
func (m *VulnerabilitymetadataapiRating) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VulnerabilitymetadataapiRating) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VulnerabilitymetadataapiRating) UnmarshalBinary(b []byte) error {
	var res VulnerabilitymetadataapiRating
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
