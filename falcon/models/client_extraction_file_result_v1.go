// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClientExtractionFileResultV1 client extraction file result v1
//
// swagger:model client.ExtractionFileResultV1
type ClientExtractionFileResultV1 struct {

	// error
	Error string `json:"error,omitempty"`

	// extract timestamp
	// Required: true
	ExtractTimestamp *string `json:"extract_timestamp"`

	// name
	// Required: true
	Name *string `json:"name"`

	// sha256
	Sha256 string `json:"sha256,omitempty"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this client extraction file result v1
func (m *ClientExtractionFileResultV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtractTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClientExtractionFileResultV1) validateExtractTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("extract_timestamp", "body", m.ExtractTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *ClientExtractionFileResultV1) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ClientExtractionFileResultV1) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this client extraction file result v1 based on context it is used
func (m *ClientExtractionFileResultV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClientExtractionFileResultV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClientExtractionFileResultV1) UnmarshalBinary(b []byte) error {
	var res ClientExtractionFileResultV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
