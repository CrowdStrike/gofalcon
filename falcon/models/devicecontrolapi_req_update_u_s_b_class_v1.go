// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DevicecontrolapiReqUpdateUSBClassV1 devicecontrolapi req update u s b class v1
//
// swagger:model devicecontrolapi.ReqUpdateUSBClassV1
type DevicecontrolapiReqUpdateUSBClassV1 struct {

	// Action to be taken for devices in this class
	// Required: true
	// Enum: [FULL_ACCESS BLOCK_EXECUTE BLOCK_WRITE_EXECUTE BLOCK_ALL WHITELIST]
	Action *string `json:"action"`

	// USB Device class
	// Required: true
	// Enum: [ANY AUDIO_VIDEO IMAGING MASS_STORAGE MOBILE PRINTER WIRELESS]
	Class *string `json:"class"`
}

// Validate validates this devicecontrolapi req update u s b class v1
func (m *DevicecontrolapiReqUpdateUSBClassV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClass(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var devicecontrolapiReqUpdateUSBClassV1TypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FULL_ACCESS","BLOCK_EXECUTE","BLOCK_WRITE_EXECUTE","BLOCK_ALL","WHITELIST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		devicecontrolapiReqUpdateUSBClassV1TypeActionPropEnum = append(devicecontrolapiReqUpdateUSBClassV1TypeActionPropEnum, v)
	}
}

const (

	// DevicecontrolapiReqUpdateUSBClassV1ActionFULLACCESS captures enum value "FULL_ACCESS"
	DevicecontrolapiReqUpdateUSBClassV1ActionFULLACCESS string = "FULL_ACCESS"

	// DevicecontrolapiReqUpdateUSBClassV1ActionBLOCKEXECUTE captures enum value "BLOCK_EXECUTE"
	DevicecontrolapiReqUpdateUSBClassV1ActionBLOCKEXECUTE string = "BLOCK_EXECUTE"

	// DevicecontrolapiReqUpdateUSBClassV1ActionBLOCKWRITEEXECUTE captures enum value "BLOCK_WRITE_EXECUTE"
	DevicecontrolapiReqUpdateUSBClassV1ActionBLOCKWRITEEXECUTE string = "BLOCK_WRITE_EXECUTE"

	// DevicecontrolapiReqUpdateUSBClassV1ActionBLOCKALL captures enum value "BLOCK_ALL"
	DevicecontrolapiReqUpdateUSBClassV1ActionBLOCKALL string = "BLOCK_ALL"

	// DevicecontrolapiReqUpdateUSBClassV1ActionWHITELIST captures enum value "WHITELIST"
	DevicecontrolapiReqUpdateUSBClassV1ActionWHITELIST string = "WHITELIST"
)

// prop value enum
func (m *DevicecontrolapiReqUpdateUSBClassV1) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, devicecontrolapiReqUpdateUSBClassV1TypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DevicecontrolapiReqUpdateUSBClassV1) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

var devicecontrolapiReqUpdateUSBClassV1TypeClassPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ANY","AUDIO_VIDEO","IMAGING","MASS_STORAGE","MOBILE","PRINTER","WIRELESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		devicecontrolapiReqUpdateUSBClassV1TypeClassPropEnum = append(devicecontrolapiReqUpdateUSBClassV1TypeClassPropEnum, v)
	}
}

const (

	// DevicecontrolapiReqUpdateUSBClassV1ClassANY captures enum value "ANY"
	DevicecontrolapiReqUpdateUSBClassV1ClassANY string = "ANY"

	// DevicecontrolapiReqUpdateUSBClassV1ClassAUDIOVIDEO captures enum value "AUDIO_VIDEO"
	DevicecontrolapiReqUpdateUSBClassV1ClassAUDIOVIDEO string = "AUDIO_VIDEO"

	// DevicecontrolapiReqUpdateUSBClassV1ClassIMAGING captures enum value "IMAGING"
	DevicecontrolapiReqUpdateUSBClassV1ClassIMAGING string = "IMAGING"

	// DevicecontrolapiReqUpdateUSBClassV1ClassMASSSTORAGE captures enum value "MASS_STORAGE"
	DevicecontrolapiReqUpdateUSBClassV1ClassMASSSTORAGE string = "MASS_STORAGE"

	// DevicecontrolapiReqUpdateUSBClassV1ClassMOBILE captures enum value "MOBILE"
	DevicecontrolapiReqUpdateUSBClassV1ClassMOBILE string = "MOBILE"

	// DevicecontrolapiReqUpdateUSBClassV1ClassPRINTER captures enum value "PRINTER"
	DevicecontrolapiReqUpdateUSBClassV1ClassPRINTER string = "PRINTER"

	// DevicecontrolapiReqUpdateUSBClassV1ClassWIRELESS captures enum value "WIRELESS"
	DevicecontrolapiReqUpdateUSBClassV1ClassWIRELESS string = "WIRELESS"
)

// prop value enum
func (m *DevicecontrolapiReqUpdateUSBClassV1) validateClassEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, devicecontrolapiReqUpdateUSBClassV1TypeClassPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DevicecontrolapiReqUpdateUSBClassV1) validateClass(formats strfmt.Registry) error {

	if err := validate.Required("class", "body", m.Class); err != nil {
		return err
	}

	// value enum
	if err := m.validateClassEnum("class", "body", *m.Class); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this devicecontrolapi req update u s b class v1 based on context it is used
func (m *DevicecontrolapiReqUpdateUSBClassV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DevicecontrolapiReqUpdateUSBClassV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevicecontrolapiReqUpdateUSBClassV1) UnmarshalBinary(b []byte) error {
	var res DevicecontrolapiReqUpdateUSBClassV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
