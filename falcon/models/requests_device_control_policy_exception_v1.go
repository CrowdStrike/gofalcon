// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RequestsDeviceControlPolicyExceptionV1 requests device control policy exception v1
//
// swagger:model requests.DeviceControlPolicyExceptionV1
type RequestsDeviceControlPolicyExceptionV1 struct {

	// action
	// Required: true
	Action *string `json:"action"`

	// USB Class ID to apply the exception. If empty it applies to all classes
	// Required: true
	Class *string `json:"class"`

	// combined id
	// Required: true
	CombinedID *string `json:"combined_id"`

	// Unique identifier for an exception
	// Required: true
	ID *string `json:"id"`

	// match method
	// Required: true
	MatchMethod *string `json:"match_method"`

	// product id
	// Required: true
	ProductID *string `json:"product_id"`

	// product id decimal
	// Required: true
	ProductIDDecimal *string `json:"product_id_decimal"`

	// product name
	// Required: true
	ProductName *string `json:"product_name"`

	// serial number
	// Required: true
	SerialNumber *string `json:"serial_number"`

	// Hexadecimal VendorID used to apply the exception
	// Required: true
	VendorID *string `json:"vendor_id"`

	// Hexadecimal VendorID used to apply the exception
	// Required: true
	VendorIDDecimal *string `json:"vendor_id_decimal"`

	// Vendor Name, optional
	// Required: true
	VendorName *string `json:"vendor_name"`
}

// Validate validates this requests device control policy exception v1
func (m *RequestsDeviceControlPolicyExceptionV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCombinedID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductIDDecimal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSerialNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendorIDDecimal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendorName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestsDeviceControlPolicyExceptionV1) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *RequestsDeviceControlPolicyExceptionV1) validateClass(formats strfmt.Registry) error {

	if err := validate.Required("class", "body", m.Class); err != nil {
		return err
	}

	return nil
}

func (m *RequestsDeviceControlPolicyExceptionV1) validateCombinedID(formats strfmt.Registry) error {

	if err := validate.Required("combined_id", "body", m.CombinedID); err != nil {
		return err
	}

	return nil
}

func (m *RequestsDeviceControlPolicyExceptionV1) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *RequestsDeviceControlPolicyExceptionV1) validateMatchMethod(formats strfmt.Registry) error {

	if err := validate.Required("match_method", "body", m.MatchMethod); err != nil {
		return err
	}

	return nil
}

func (m *RequestsDeviceControlPolicyExceptionV1) validateProductID(formats strfmt.Registry) error {

	if err := validate.Required("product_id", "body", m.ProductID); err != nil {
		return err
	}

	return nil
}

func (m *RequestsDeviceControlPolicyExceptionV1) validateProductIDDecimal(formats strfmt.Registry) error {

	if err := validate.Required("product_id_decimal", "body", m.ProductIDDecimal); err != nil {
		return err
	}

	return nil
}

func (m *RequestsDeviceControlPolicyExceptionV1) validateProductName(formats strfmt.Registry) error {

	if err := validate.Required("product_name", "body", m.ProductName); err != nil {
		return err
	}

	return nil
}

func (m *RequestsDeviceControlPolicyExceptionV1) validateSerialNumber(formats strfmt.Registry) error {

	if err := validate.Required("serial_number", "body", m.SerialNumber); err != nil {
		return err
	}

	return nil
}

func (m *RequestsDeviceControlPolicyExceptionV1) validateVendorID(formats strfmt.Registry) error {

	if err := validate.Required("vendor_id", "body", m.VendorID); err != nil {
		return err
	}

	return nil
}

func (m *RequestsDeviceControlPolicyExceptionV1) validateVendorIDDecimal(formats strfmt.Registry) error {

	if err := validate.Required("vendor_id_decimal", "body", m.VendorIDDecimal); err != nil {
		return err
	}

	return nil
}

func (m *RequestsDeviceControlPolicyExceptionV1) validateVendorName(formats strfmt.Registry) error {

	if err := validate.Required("vendor_name", "body", m.VendorName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RequestsDeviceControlPolicyExceptionV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestsDeviceControlPolicyExceptionV1) UnmarshalBinary(b []byte) error {
	var res RequestsDeviceControlPolicyExceptionV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
