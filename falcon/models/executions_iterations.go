// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExecutionsIterations executions iterations
//
// swagger:model executions.Iterations
type ExecutionsIterations struct {

	// count of executions with completed status.
	// Required: true
	Completed *int32 `json:"completed"`

	// count of executions with failed status.
	// Required: true
	Failed *int32 `json:"failed"`

	// count of executions with in progress status
	// Required: true
	InProgress *int32 `json:"in_progress"`

	// true when sub-model has non recoverable status
	// Required: true
	IsNonrecoverable *bool `json:"is_nonrecoverable"`

	// count of executions that are pending
	// Required: true
	Pending *int32 `json:"pending"`

	// count of total executions.
	// Required: true
	Total *int32 `json:"total"`
}

// Validate validates this executions iterations
func (m *ExecutionsIterations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInProgress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsNonrecoverable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePending(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExecutionsIterations) validateCompleted(formats strfmt.Registry) error {

	if err := validate.Required("completed", "body", m.Completed); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionsIterations) validateFailed(formats strfmt.Registry) error {

	if err := validate.Required("failed", "body", m.Failed); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionsIterations) validateInProgress(formats strfmt.Registry) error {

	if err := validate.Required("in_progress", "body", m.InProgress); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionsIterations) validateIsNonrecoverable(formats strfmt.Registry) error {

	if err := validate.Required("is_nonrecoverable", "body", m.IsNonrecoverable); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionsIterations) validatePending(formats strfmt.Registry) error {

	if err := validate.Required("pending", "body", m.Pending); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionsIterations) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("total", "body", m.Total); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this executions iterations based on context it is used
func (m *ExecutionsIterations) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ExecutionsIterations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExecutionsIterations) UnmarshalBinary(b []byte) error {
	var res ExecutionsIterations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
