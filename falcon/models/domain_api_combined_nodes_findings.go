// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainAPICombinedNodesFindings domain API combined nodes findings
//
// swagger:model domain.APICombinedNodesFindings
type DomainAPICombinedNodesFindings struct {

	// aid
	// Required: true
	Aid *string `json:"aid"`

	// assessments
	// Required: true
	Assessments []*DomainAssetFinding `json:"assessments"`

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// cloud account id
	CloudAccountID string `json:"cloud_account_id,omitempty"`

	// cloud provider
	CloudProvider string `json:"cloud_provider,omitempty"`

	// cloud region
	CloudRegion string `json:"cloud_region,omitempty"`

	// cluster name
	ClusterName string `json:"cluster_name,omitempty"`

	// cluster type
	ClusterType string `json:"cluster_type,omitempty"`

	// node id
	NodeID string `json:"node_id,omitempty"`

	// node ipv4
	NodeIPV4 string `json:"node_ipv4,omitempty"`

	// node ipv6
	NodeIPV6 string `json:"node_ipv6,omitempty"`

	// node name
	NodeName string `json:"node_name,omitempty"`

	// node type
	NodeType int32 `json:"node_type,omitempty"`
}

// Validate validates this domain API combined nodes findings
func (m *DomainAPICombinedNodesFindings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssessments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAPICombinedNodesFindings) validateAid(formats strfmt.Registry) error {

	if err := validate.Required("aid", "body", m.Aid); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPICombinedNodesFindings) validateAssessments(formats strfmt.Registry) error {

	if err := validate.Required("assessments", "body", m.Assessments); err != nil {
		return err
	}

	for i := 0; i < len(m.Assessments); i++ {
		if swag.IsZero(m.Assessments[i]) { // not required
			continue
		}

		if m.Assessments[i] != nil {
			if err := m.Assessments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assessments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assessments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainAPICombinedNodesFindings) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this domain API combined nodes findings based on the context it is used
func (m *DomainAPICombinedNodesFindings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssessments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAPICombinedNodesFindings) contextValidateAssessments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Assessments); i++ {

		if m.Assessments[i] != nil {

			if swag.IsZero(m.Assessments[i]) { // not required
				return nil
			}

			if err := m.Assessments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assessments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assessments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainAPICombinedNodesFindings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainAPICombinedNodesFindings) UnmarshalBinary(b []byte) error {
	var res DomainAPICombinedNodesFindings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
