// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SdkCaseVM sdk case VM
//
// swagger:model sdk.CaseVM
type SdkCaseVM struct {

	// analysis results
	// Required: true
	AnalysisResults *SdkAnalysisResultsVM `json:"analysis_results"`

	// assigned to
	// Required: true
	AssignedTo *SdkFalconUserVM `json:"assigned_to"`

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// consistency
	// Required: true
	Consistency *SdkConsistencyVM `json:"consistency"`

	// created by
	// Required: true
	CreatedBy *SdkFalconUserVM `json:"created_by"`

	// created timestamp
	// Required: true
	// Format: date-time
	CreatedTimestamp *strfmt.DateTime `json:"created_timestamp"`

	// description
	// Required: true
	Description *string `json:"description"`

	// end timestamp
	// Required: true
	// Format: date-time
	EndTimestamp *strfmt.DateTime `json:"end_timestamp"`

	// evidence
	// Required: true
	Evidence *SdkEvidenceVM `json:"evidence"`

	// fields
	Fields []*SdkCustomFieldVM `json:"fields"`

	// id
	// Required: true
	ID *string `json:"id"`

	// last updated by
	// Required: true
	LastUpdatedBy *SdkFalconUserVM `json:"last_updated_by"`

	// name
	// Required: true
	Name *string `json:"name"`

	// severity
	// Required: true
	Severity *int64 `json:"severity"`

	// sla
	SLA *SdkSLAVM `json:"sla,omitempty"`

	// start timestamp
	// Required: true
	// Format: date-time
	StartTimestamp *strfmt.DateTime `json:"start_timestamp"`

	// status
	// Required: true
	Status *string `json:"status"`

	// tags
	Tags []string `json:"tags"`

	// template
	Template *SdkTemplateVM `json:"template,omitempty"`

	// updated timestamp
	// Required: true
	// Format: date-time
	UpdatedTimestamp *strfmt.DateTime `json:"updated_timestamp"`

	// version
	// Required: true
	Version *int64 `json:"version"`
}

// Validate validates this sdk case VM
func (m *SdkCaseVM) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnalysisResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssignedTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsistency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvidence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSLA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SdkCaseVM) validateAnalysisResults(formats strfmt.Registry) error {

	if err := validate.Required("analysis_results", "body", m.AnalysisResults); err != nil {
		return err
	}

	if m.AnalysisResults != nil {
		if err := m.AnalysisResults.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("analysis_results")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("analysis_results")
			}
			return err
		}
	}

	return nil
}

func (m *SdkCaseVM) validateAssignedTo(formats strfmt.Registry) error {

	if err := validate.Required("assigned_to", "body", m.AssignedTo); err != nil {
		return err
	}

	if m.AssignedTo != nil {
		if err := m.AssignedTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assigned_to")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assigned_to")
			}
			return err
		}
	}

	return nil
}

func (m *SdkCaseVM) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *SdkCaseVM) validateConsistency(formats strfmt.Registry) error {

	if err := validate.Required("consistency", "body", m.Consistency); err != nil {
		return err
	}

	if m.Consistency != nil {
		if err := m.Consistency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consistency")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consistency")
			}
			return err
		}
	}

	return nil
}

func (m *SdkCaseVM) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("created_by", "body", m.CreatedBy); err != nil {
		return err
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

func (m *SdkCaseVM) validateCreatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("created_timestamp", "body", m.CreatedTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("created_timestamp", "body", "date-time", m.CreatedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SdkCaseVM) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *SdkCaseVM) validateEndTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("end_timestamp", "body", m.EndTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("end_timestamp", "body", "date-time", m.EndTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SdkCaseVM) validateEvidence(formats strfmt.Registry) error {

	if err := validate.Required("evidence", "body", m.Evidence); err != nil {
		return err
	}

	if m.Evidence != nil {
		if err := m.Evidence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evidence")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("evidence")
			}
			return err
		}
	}

	return nil
}

func (m *SdkCaseVM) validateFields(formats strfmt.Registry) error {
	if swag.IsZero(m.Fields) { // not required
		return nil
	}

	for i := 0; i < len(m.Fields); i++ {
		if swag.IsZero(m.Fields[i]) { // not required
			continue
		}

		if m.Fields[i] != nil {
			if err := m.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SdkCaseVM) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SdkCaseVM) validateLastUpdatedBy(formats strfmt.Registry) error {

	if err := validate.Required("last_updated_by", "body", m.LastUpdatedBy); err != nil {
		return err
	}

	if m.LastUpdatedBy != nil {
		if err := m.LastUpdatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_updated_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_updated_by")
			}
			return err
		}
	}

	return nil
}

func (m *SdkCaseVM) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SdkCaseVM) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *SdkCaseVM) validateSLA(formats strfmt.Registry) error {
	if swag.IsZero(m.SLA) { // not required
		return nil
	}

	if m.SLA != nil {
		if err := m.SLA.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sla")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sla")
			}
			return err
		}
	}

	return nil
}

func (m *SdkCaseVM) validateStartTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("start_timestamp", "body", m.StartTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("start_timestamp", "body", "date-time", m.StartTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SdkCaseVM) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *SdkCaseVM) validateTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.Template) { // not required
		return nil
	}

	if m.Template != nil {
		if err := m.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

func (m *SdkCaseVM) validateUpdatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("updated_timestamp", "body", m.UpdatedTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_timestamp", "body", "date-time", m.UpdatedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SdkCaseVM) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this sdk case VM based on the context it is used
func (m *SdkCaseVM) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAnalysisResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssignedTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsistency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEvidence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastUpdatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSLA(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SdkCaseVM) contextValidateAnalysisResults(ctx context.Context, formats strfmt.Registry) error {

	if m.AnalysisResults != nil {

		if err := m.AnalysisResults.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("analysis_results")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("analysis_results")
			}
			return err
		}
	}

	return nil
}

func (m *SdkCaseVM) contextValidateAssignedTo(ctx context.Context, formats strfmt.Registry) error {

	if m.AssignedTo != nil {

		if err := m.AssignedTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assigned_to")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assigned_to")
			}
			return err
		}
	}

	return nil
}

func (m *SdkCaseVM) contextValidateConsistency(ctx context.Context, formats strfmt.Registry) error {

	if m.Consistency != nil {

		if err := m.Consistency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consistency")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consistency")
			}
			return err
		}
	}

	return nil
}

func (m *SdkCaseVM) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedBy != nil {

		if err := m.CreatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

func (m *SdkCaseVM) contextValidateEvidence(ctx context.Context, formats strfmt.Registry) error {

	if m.Evidence != nil {

		if err := m.Evidence.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evidence")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("evidence")
			}
			return err
		}
	}

	return nil
}

func (m *SdkCaseVM) contextValidateFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Fields); i++ {

		if m.Fields[i] != nil {

			if swag.IsZero(m.Fields[i]) { // not required
				return nil
			}

			if err := m.Fields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SdkCaseVM) contextValidateLastUpdatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.LastUpdatedBy != nil {

		if err := m.LastUpdatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_updated_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_updated_by")
			}
			return err
		}
	}

	return nil
}

func (m *SdkCaseVM) contextValidateSLA(ctx context.Context, formats strfmt.Registry) error {

	if m.SLA != nil {

		if swag.IsZero(m.SLA) { // not required
			return nil
		}

		if err := m.SLA.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sla")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sla")
			}
			return err
		}
	}

	return nil
}

func (m *SdkCaseVM) contextValidateTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.Template != nil {

		if swag.IsZero(m.Template) { // not required
			return nil
		}

		if err := m.Template.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SdkCaseVM) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SdkCaseVM) UnmarshalBinary(b []byte) error {
	var res SdkCaseVM
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
