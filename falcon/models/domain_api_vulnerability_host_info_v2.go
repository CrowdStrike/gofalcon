// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainAPIVulnerabilityHostInfoV2 domain API vulnerability host info v2
//
// swagger:model domain.APIVulnerabilityHostInfoV2
type DomainAPIVulnerabilityHostInfoV2 struct {

	// groups
	Groups []*DomainAPIHostGroup `json:"groups"`

	// hostname
	// Required: true
	Hostname *string `json:"hostname"`

	// local ip
	// Required: true
	LocalIP *string `json:"local_ip"`

	// machine domain
	// Required: true
	MachineDomain *string `json:"machine_domain"`

	// os version
	// Required: true
	OsVersion *string `json:"os_version"`

	// ou
	// Required: true
	Ou *string `json:"ou"`

	// platform
	Platform string `json:"platform,omitempty"`

	// site name
	// Required: true
	SiteName *string `json:"site_name"`

	// system manufacturer
	// Required: true
	SystemManufacturer *string `json:"system_manufacturer"`

	// tags
	Tags []string `json:"tags"`
}

// Validate validates this domain API vulnerability host info v2
func (m *DomainAPIVulnerabilityHostInfoV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiteName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemManufacturer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAPIVulnerabilityHostInfoV2) validateGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.Groups) { // not required
		return nil
	}

	for i := 0; i < len(m.Groups); i++ {
		if swag.IsZero(m.Groups[i]) { // not required
			continue
		}

		if m.Groups[i] != nil {
			if err := m.Groups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainAPIVulnerabilityHostInfoV2) validateHostname(formats strfmt.Registry) error {

	if err := validate.Required("hostname", "body", m.Hostname); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIVulnerabilityHostInfoV2) validateLocalIP(formats strfmt.Registry) error {

	if err := validate.Required("local_ip", "body", m.LocalIP); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIVulnerabilityHostInfoV2) validateMachineDomain(formats strfmt.Registry) error {

	if err := validate.Required("machine_domain", "body", m.MachineDomain); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIVulnerabilityHostInfoV2) validateOsVersion(formats strfmt.Registry) error {

	if err := validate.Required("os_version", "body", m.OsVersion); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIVulnerabilityHostInfoV2) validateOu(formats strfmt.Registry) error {

	if err := validate.Required("ou", "body", m.Ou); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIVulnerabilityHostInfoV2) validateSiteName(formats strfmt.Registry) error {

	if err := validate.Required("site_name", "body", m.SiteName); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIVulnerabilityHostInfoV2) validateSystemManufacturer(formats strfmt.Registry) error {

	if err := validate.Required("system_manufacturer", "body", m.SystemManufacturer); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainAPIVulnerabilityHostInfoV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainAPIVulnerabilityHostInfoV2) UnmarshalBinary(b []byte) error {
	var res DomainAPIVulnerabilityHostInfoV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
