// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureRegistrationSettings azure registration settings
//
// swagger:model azure.RegistrationSettings
type AzureRegistrationSettings struct {

	// account type
	AccountType string `json:"account_type,omitempty"`

	// additional properties
	AdditionalProperties interface{} `json:"additional_properties,omitempty"`

	// api client key id
	APIClientKeyID string `json:"api_client_key_id,omitempty"`

	// api client key type
	APIClientKeyType string `json:"api_client_key_type,omitempty"`

	// deployment stack host id
	DeploymentStackHostID string `json:"deployment_stack_host_id,omitempty"`

	// deployment stack name
	DeploymentStackName string `json:"deployment_stack_name,omitempty"`

	// environment
	Environment string `json:"environment,omitempty"`

	// microsoft graph permission ids
	// Required: true
	MicrosoftGraphPermissionIds []string `json:"microsoft_graph_permission_ids"`

	// microsoft graph permission ids readonly
	MicrosoftGraphPermissionIdsReadonly bool `json:"microsoft_graph_permission_ids_readonly,omitempty"`

	// products
	Products []*DomainProductFeatures `json:"products"`

	// resource name prefix
	ResourceNamePrefix string `json:"resource_name_prefix,omitempty"`

	// resource name suffix
	ResourceNameSuffix string `json:"resource_name_suffix,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// tags
	// Required: true
	Tags map[string]string `json:"tags"`

	// template version
	TemplateVersion string `json:"template_version,omitempty"`
}

// Validate validates this azure registration settings
func (m *AzureRegistrationSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMicrosoftGraphPermissionIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureRegistrationSettings) validateMicrosoftGraphPermissionIds(formats strfmt.Registry) error {

	if err := validate.Required("microsoft_graph_permission_ids", "body", m.MicrosoftGraphPermissionIds); err != nil {
		return err
	}

	return nil
}

func (m *AzureRegistrationSettings) validateProducts(formats strfmt.Registry) error {
	if swag.IsZero(m.Products) { // not required
		return nil
	}

	for i := 0; i < len(m.Products); i++ {
		if swag.IsZero(m.Products[i]) { // not required
			continue
		}

		if m.Products[i] != nil {
			if err := m.Products[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AzureRegistrationSettings) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this azure registration settings based on the context it is used
func (m *AzureRegistrationSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureRegistrationSettings) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Products); i++ {

		if m.Products[i] != nil {

			if swag.IsZero(m.Products[i]) { // not required
				return nil
			}

			if err := m.Products[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureRegistrationSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureRegistrationSettings) UnmarshalBinary(b []byte) error {
	var res AzureRegistrationSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
