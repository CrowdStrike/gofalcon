// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsInventoryScanRequestType models inventory scan request type
//
// swagger:model models.InventoryScanRequestType
type ModelsInventoryScanRequestType struct {

	// agent uuid
	// Required: true
	AgentUUID *string `json:"agent_uuid"`

	// agent version
	// Required: true
	AgentVersion *string `json:"agent_version"`

	// agent version hash
	// Required: true
	AgentVersionHash *string `json:"agent_version_hash"`

	// cluster id
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// cluster name
	// Required: true
	ClusterName *string `json:"cluster_name"`

	// container id
	ContainerID string `json:"container_id,omitempty"`

	// ephemeral scan
	EphemeralScan bool `json:"ephemeral_scan,omitempty"`

	// helm version
	// Required: true
	HelmVersion *string `json:"helm_version"`

	// high entropy strings
	HighEntropyStrings []*ModelsHEStringFileInfoType `json:"high_entropy_strings"`

	// host ip
	// Required: true
	HostIP *string `json:"host_ip"`

	// host name
	// Required: true
	HostName *string `json:"host_name"`

	// inventory
	// Required: true
	Inventory *ModelsInventoryType `json:"inventory"`

	// original image name
	// Required: true
	OriginalImageName *string `json:"original_image_name"`

	// pod id
	PodID string `json:"pod_id,omitempty"`

	// pod name
	PodName string `json:"pod_name,omitempty"`

	// pod namespace
	PodNamespace string `json:"pod_namespace,omitempty"`

	// runmode
	// Required: true
	Runmode *string `json:"runmode"`

	// runtime type
	RuntimeType string `json:"runtime_type,omitempty"`

	// scan request
	// Required: true
	ScanRequest *ModelsScanRequestType `json:"scan_request"`
}

// Validate validates this models inventory scan request type
func (m *ModelsInventoryScanRequestType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentVersionHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHelmVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHighEntropyStrings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInventory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginalImageName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunmode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanRequest(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsInventoryScanRequestType) validateAgentUUID(formats strfmt.Registry) error {

	if err := validate.Required("agent_uuid", "body", m.AgentUUID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsInventoryScanRequestType) validateAgentVersion(formats strfmt.Registry) error {

	if err := validate.Required("agent_version", "body", m.AgentVersion); err != nil {
		return err
	}

	return nil
}

func (m *ModelsInventoryScanRequestType) validateAgentVersionHash(formats strfmt.Registry) error {

	if err := validate.Required("agent_version_hash", "body", m.AgentVersionHash); err != nil {
		return err
	}

	return nil
}

func (m *ModelsInventoryScanRequestType) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsInventoryScanRequestType) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("cluster_name", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsInventoryScanRequestType) validateHelmVersion(formats strfmt.Registry) error {

	if err := validate.Required("helm_version", "body", m.HelmVersion); err != nil {
		return err
	}

	return nil
}

func (m *ModelsInventoryScanRequestType) validateHighEntropyStrings(formats strfmt.Registry) error {
	if swag.IsZero(m.HighEntropyStrings) { // not required
		return nil
	}

	for i := 0; i < len(m.HighEntropyStrings); i++ {
		if swag.IsZero(m.HighEntropyStrings[i]) { // not required
			continue
		}

		if m.HighEntropyStrings[i] != nil {
			if err := m.HighEntropyStrings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("high_entropy_strings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("high_entropy_strings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsInventoryScanRequestType) validateHostIP(formats strfmt.Registry) error {

	if err := validate.Required("host_ip", "body", m.HostIP); err != nil {
		return err
	}

	return nil
}

func (m *ModelsInventoryScanRequestType) validateHostName(formats strfmt.Registry) error {

	if err := validate.Required("host_name", "body", m.HostName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsInventoryScanRequestType) validateInventory(formats strfmt.Registry) error {

	if err := validate.Required("inventory", "body", m.Inventory); err != nil {
		return err
	}

	if m.Inventory != nil {
		if err := m.Inventory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inventory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inventory")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsInventoryScanRequestType) validateOriginalImageName(formats strfmt.Registry) error {

	if err := validate.Required("original_image_name", "body", m.OriginalImageName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsInventoryScanRequestType) validateRunmode(formats strfmt.Registry) error {

	if err := validate.Required("runmode", "body", m.Runmode); err != nil {
		return err
	}

	return nil
}

func (m *ModelsInventoryScanRequestType) validateScanRequest(formats strfmt.Registry) error {

	if err := validate.Required("scan_request", "body", m.ScanRequest); err != nil {
		return err
	}

	if m.ScanRequest != nil {
		if err := m.ScanRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scan_request")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scan_request")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this models inventory scan request type based on the context it is used
func (m *ModelsInventoryScanRequestType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHighEntropyStrings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInventory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScanRequest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsInventoryScanRequestType) contextValidateHighEntropyStrings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HighEntropyStrings); i++ {

		if m.HighEntropyStrings[i] != nil {

			if swag.IsZero(m.HighEntropyStrings[i]) { // not required
				return nil
			}

			if err := m.HighEntropyStrings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("high_entropy_strings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("high_entropy_strings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsInventoryScanRequestType) contextValidateInventory(ctx context.Context, formats strfmt.Registry) error {

	if m.Inventory != nil {

		if err := m.Inventory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inventory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inventory")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsInventoryScanRequestType) contextValidateScanRequest(ctx context.Context, formats strfmt.Registry) error {

	if m.ScanRequest != nil {

		if err := m.ScanRequest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scan_request")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scan_request")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsInventoryScanRequestType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsInventoryScanRequestType) UnmarshalBinary(b []byte) error {
	var res ModelsInventoryScanRequestType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
