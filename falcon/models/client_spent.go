// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClientSpent client spent
//
// swagger:model client.Spent
type ClientSpent struct {

	// day
	// Required: true
	Day *ClientCost `json:"day"`

	// hour
	// Required: true
	Hour *ClientCost `json:"hour"`

	// one minute
	// Required: true
	OneMinute *ClientCost `json:"oneMinute"`

	// ten minutes
	// Required: true
	TenMinutes *ClientCost `json:"tenMinutes"`
}

// Validate validates this client spent
func (m *ClientSpent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHour(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOneMinute(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenMinutes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClientSpent) validateDay(formats strfmt.Registry) error {

	if err := validate.Required("day", "body", m.Day); err != nil {
		return err
	}

	if m.Day != nil {
		if err := m.Day.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("day")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("day")
			}
			return err
		}
	}

	return nil
}

func (m *ClientSpent) validateHour(formats strfmt.Registry) error {

	if err := validate.Required("hour", "body", m.Hour); err != nil {
		return err
	}

	if m.Hour != nil {
		if err := m.Hour.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hour")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hour")
			}
			return err
		}
	}

	return nil
}

func (m *ClientSpent) validateOneMinute(formats strfmt.Registry) error {

	if err := validate.Required("oneMinute", "body", m.OneMinute); err != nil {
		return err
	}

	if m.OneMinute != nil {
		if err := m.OneMinute.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oneMinute")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oneMinute")
			}
			return err
		}
	}

	return nil
}

func (m *ClientSpent) validateTenMinutes(formats strfmt.Registry) error {

	if err := validate.Required("tenMinutes", "body", m.TenMinutes); err != nil {
		return err
	}

	if m.TenMinutes != nil {
		if err := m.TenMinutes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tenMinutes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tenMinutes")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this client spent based on the context it is used
func (m *ClientSpent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHour(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOneMinute(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTenMinutes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClientSpent) contextValidateDay(ctx context.Context, formats strfmt.Registry) error {

	if m.Day != nil {

		if err := m.Day.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("day")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("day")
			}
			return err
		}
	}

	return nil
}

func (m *ClientSpent) contextValidateHour(ctx context.Context, formats strfmt.Registry) error {

	if m.Hour != nil {

		if err := m.Hour.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hour")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hour")
			}
			return err
		}
	}

	return nil
}

func (m *ClientSpent) contextValidateOneMinute(ctx context.Context, formats strfmt.Registry) error {

	if m.OneMinute != nil {

		if err := m.OneMinute.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oneMinute")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oneMinute")
			}
			return err
		}
	}

	return nil
}

func (m *ClientSpent) contextValidateTenMinutes(ctx context.Context, formats strfmt.Registry) error {

	if m.TenMinutes != nil {

		if err := m.TenMinutes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tenMinutes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tenMinutes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClientSpent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClientSpent) UnmarshalBinary(b []byte) error {
	var res ClientSpent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
