// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VulnerabilitymetadataapiRule vulnerabilitymetadataapi rule
//
// swagger:model vulnerabilitymetadataapi.Rule
type VulnerabilitymetadataapiRule struct {

	// audit procedure
	// Required: true
	AuditProcedure *string `json:"audit_procedure"`

	// authority
	// Required: true
	Authority *string `json:"authority"`

	// benchmark
	// Required: true
	Benchmark *VulnerabilitymetadataapiRuleBenchmark `json:"benchmark"`

	// category
	// Required: true
	Category *string `json:"category"`

	// cce
	// Required: true
	Cce *string `json:"cce"`

	// controls
	// Required: true
	Controls []*VulnerabilitymetadataapiRuleControl `json:"controls"`

	// cs id
	// Required: true
	CsID *string `json:"cs_id"`

	// description
	// Required: true
	Description *string `json:"description"`

	// domain
	// Required: true
	Domain *string `json:"domain"`

	// id
	// Required: true
	ID *string `json:"id"`

	// impact statement
	// Required: true
	ImpactStatement *string `json:"impact_statement"`

	// mitre attack tactics
	// Required: true
	MitreAttackTactics []*VulnerabilitymetadataapiRuleMitreAttackTactics `json:"mitre_attack_tactics"`

	// name
	// Required: true
	Name *string `json:"name"`

	// platform name
	// Required: true
	PlatformName *string `json:"platform_name"`

	// rationale statement
	// Required: true
	RationaleStatement *string `json:"rationale_statement"`

	// requirement id
	// Required: true
	RequirementID *string `json:"requirement_id"`

	// resource metadata
	// Required: true
	ResourceMetadata *string `json:"resource_metadata"`

	// resource type
	// Required: true
	ResourceType []*VulnerabilitymetadataapiRuleResourceType `json:"resource_type"`

	// revision
	// Required: true
	Revision *string `json:"revision"`

	// severity
	// Required: true
	Severity *string `json:"severity"`

	// subdomain
	// Required: true
	Subdomain *string `json:"subdomain"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this vulnerabilitymetadataapi rule
func (m *VulnerabilitymetadataapiRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuditProcedure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBenchmark(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCsID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImpactStatement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMitreAttackTactics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRationaleStatement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequirementID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubdomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilitymetadataapiRule) validateAuditProcedure(formats strfmt.Registry) error {

	if err := validate.Required("audit_procedure", "body", m.AuditProcedure); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) validateAuthority(formats strfmt.Registry) error {

	if err := validate.Required("authority", "body", m.Authority); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) validateBenchmark(formats strfmt.Registry) error {

	if err := validate.Required("benchmark", "body", m.Benchmark); err != nil {
		return err
	}

	if m.Benchmark != nil {
		if err := m.Benchmark.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("benchmark")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("benchmark")
			}
			return err
		}
	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) validateCce(formats strfmt.Registry) error {

	if err := validate.Required("cce", "body", m.Cce); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) validateControls(formats strfmt.Registry) error {

	if err := validate.Required("controls", "body", m.Controls); err != nil {
		return err
	}

	for i := 0; i < len(m.Controls); i++ {
		if swag.IsZero(m.Controls[i]) { // not required
			continue
		}

		if m.Controls[i] != nil {
			if err := m.Controls[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controls" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) validateCsID(formats strfmt.Registry) error {

	if err := validate.Required("cs_id", "body", m.CsID); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) validateImpactStatement(formats strfmt.Registry) error {

	if err := validate.Required("impact_statement", "body", m.ImpactStatement); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) validateMitreAttackTactics(formats strfmt.Registry) error {

	if err := validate.Required("mitre_attack_tactics", "body", m.MitreAttackTactics); err != nil {
		return err
	}

	for i := 0; i < len(m.MitreAttackTactics); i++ {
		if swag.IsZero(m.MitreAttackTactics[i]) { // not required
			continue
		}

		if m.MitreAttackTactics[i] != nil {
			if err := m.MitreAttackTactics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mitre_attack_tactics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mitre_attack_tactics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) validatePlatformName(formats strfmt.Registry) error {

	if err := validate.Required("platform_name", "body", m.PlatformName); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) validateRationaleStatement(formats strfmt.Registry) error {

	if err := validate.Required("rationale_statement", "body", m.RationaleStatement); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) validateRequirementID(formats strfmt.Registry) error {

	if err := validate.Required("requirement_id", "body", m.RequirementID); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) validateResourceMetadata(formats strfmt.Registry) error {

	if err := validate.Required("resource_metadata", "body", m.ResourceMetadata); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("resource_type", "body", m.ResourceType); err != nil {
		return err
	}

	for i := 0; i < len(m.ResourceType); i++ {
		if swag.IsZero(m.ResourceType[i]) { // not required
			continue
		}

		if m.ResourceType[i] != nil {
			if err := m.ResourceType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resource_type" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resource_type" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) validateRevision(formats strfmt.Registry) error {

	if err := validate.Required("revision", "body", m.Revision); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) validateSubdomain(formats strfmt.Registry) error {

	if err := validate.Required("subdomain", "body", m.Subdomain); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this vulnerabilitymetadataapi rule based on the context it is used
func (m *VulnerabilitymetadataapiRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBenchmark(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateControls(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMitreAttackTactics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilitymetadataapiRule) contextValidateBenchmark(ctx context.Context, formats strfmt.Registry) error {

	if m.Benchmark != nil {

		if err := m.Benchmark.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("benchmark")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("benchmark")
			}
			return err
		}
	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) contextValidateControls(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Controls); i++ {

		if m.Controls[i] != nil {

			if swag.IsZero(m.Controls[i]) { // not required
				return nil
			}

			if err := m.Controls[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controls" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) contextValidateMitreAttackTactics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MitreAttackTactics); i++ {

		if m.MitreAttackTactics[i] != nil {

			if swag.IsZero(m.MitreAttackTactics[i]) { // not required
				return nil
			}

			if err := m.MitreAttackTactics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mitre_attack_tactics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mitre_attack_tactics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VulnerabilitymetadataapiRule) contextValidateResourceType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ResourceType); i++ {

		if m.ResourceType[i] != nil {

			if swag.IsZero(m.ResourceType[i]) { // not required
				return nil
			}

			if err := m.ResourceType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resource_type" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resource_type" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VulnerabilitymetadataapiRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VulnerabilitymetadataapiRule) UnmarshalBinary(b []byte) error {
	var res VulnerabilitymetadataapiRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
