// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsContainer models container
//
// swagger:model models.Container
type ModelsContainer struct {

	// agents
	// Required: true
	Agents []ModelsContainerAgents `json:"agents"`

	// allow privilege escalation
	// Required: true
	AllowPrivilegeEscalation *bool `json:"allow_privilege_escalation"`

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// cloud account id
	// Required: true
	CloudAccountID *string `json:"cloud_account_id"`

	// cloud name
	// Required: true
	CloudName *string `json:"cloud_name"`

	// cloud region
	// Required: true
	CloudRegion *string `json:"cloud_region"`

	// cloud service
	// Required: true
	CloudService *string `json:"cloud_service"`

	// cluster id
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// cluster name
	// Required: true
	ClusterName *string `json:"cluster_name"`

	// config labels
	// Required: true
	ConfigLabels *string `json:"config_labels"`

	// container id
	// Required: true
	ContainerID *string `json:"container_id"`

	// container name
	// Required: true
	ContainerName *string `json:"container_name"`

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// first seen
	// Required: true
	FirstSeen *string `json:"first_seen"`

	// image application package count
	// Required: true
	ImageApplicationPackageCount *int32 `json:"image_application_package_count"`

	// image assessed at
	// Required: true
	ImageAssessedAt *int64 `json:"image_assessed_at"`

	// image detection count
	// Required: true
	ImageDetectionCount *int32 `json:"image_detection_count"`

	// image digest
	// Required: true
	ImageDigest *string `json:"image_digest"`

	// image has been assessed
	// Required: true
	ImageHasBeenAssessed *bool `json:"image_has_been_assessed"`

	// image highest severity vulnerability
	// Required: true
	ImageHighestSeverityVulnerability *string `json:"image_highest_severity_vulnerability"`

	// image id
	// Required: true
	ImageID *string `json:"image_id"`

	// image package count
	// Required: true
	ImagePackageCount *int32 `json:"image_package_count"`

	// image registry
	// Required: true
	ImageRegistry *string `json:"image_registry"`

	// image repository
	// Required: true
	ImageRepository *string `json:"image_repository"`

	// image tag
	// Required: true
	ImageTag *string `json:"image_tag"`

	// image vulnerability count
	// Required: true
	ImageVulnerabilityCount *int32 `json:"image_vulnerability_count"`

	// insecure mount source
	// Required: true
	InsecureMountSource *string `json:"insecure_mount_source"`

	// insecure mount type
	// Required: true
	InsecureMountType *string `json:"insecure_mount_type"`

	// insecure propagation mode
	// Required: true
	InsecurePropagationMode *bool `json:"insecure_propagation_mode"`

	// interactive mode
	// Required: true
	InteractiveMode *bool `json:"interactive_mode"`

	// ipv4
	// Required: true
	IPV4 *string `json:"ipv4"`

	// ipv6
	// Required: true
	IPV6 *string `json:"ipv6"`

	// kac agent id
	// Required: true
	KacAgentID *string `json:"kac_agent_id"`

	// labels
	// Required: true
	Labels map[string]string `json:"labels"`

	// labels list
	// Required: true
	LabelsList []string `json:"labels_list"`

	// last seen
	// Required: true
	LastSeen *string `json:"last_seen"`

	// namespace
	// Required: true
	Namespace *string `json:"namespace"`

	// node name
	// Required: true
	NodeName *string `json:"node_name"`

	// node uid
	// Required: true
	NodeUID *string `json:"node_uid"`

	// pod id
	// Required: true
	PodID *string `json:"pod_id"`

	// pod name
	// Required: true
	PodName *string `json:"pod_name"`

	// ports
	// Required: true
	Ports []ModelsContainerPorts `json:"ports"`

	// privileged
	// Required: true
	Privileged *bool `json:"privileged"`

	// root write access
	// Required: true
	RootWriteAccess *bool `json:"root_write_access"`

	// run as root group
	// Required: true
	RunAsRootGroup *bool `json:"run_as_root_group"`

	// run as root user
	// Required: true
	RunAsRootUser *bool `json:"run_as_root_user"`

	// running status
	// Required: true
	RunningStatus *bool `json:"running_status"`

	// volume mounts
	// Required: true
	VolumeMounts *string `json:"volume_mounts"`
}

// Validate validates this models container
func (m *ModelsContainer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllowPrivilegeEscalation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstSeen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageApplicationPackageCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageAssessedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageDetectionCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageDigest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageHasBeenAssessed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageHighestSeverityVulnerability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImagePackageCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageRegistry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageVulnerabilityCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInsecureMountSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInsecureMountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInsecurePropagationMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInteractiveMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKacAgentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSeen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivileged(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootWriteAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunAsRootGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunAsRootUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeMounts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsContainer) validateAgents(formats strfmt.Registry) error {

	if err := validate.Required("agents", "body", m.Agents); err != nil {
		return err
	}

	for i := 0; i < len(m.Agents); i++ {

		if m.Agents[i] != nil {
			if err := m.Agents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsContainer) validateAllowPrivilegeEscalation(formats strfmt.Registry) error {

	if err := validate.Required("allow_privilege_escalation", "body", m.AllowPrivilegeEscalation); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateCloudAccountID(formats strfmt.Registry) error {

	if err := validate.Required("cloud_account_id", "body", m.CloudAccountID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateCloudName(formats strfmt.Registry) error {

	if err := validate.Required("cloud_name", "body", m.CloudName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateCloudRegion(formats strfmt.Registry) error {

	if err := validate.Required("cloud_region", "body", m.CloudRegion); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateCloudService(formats strfmt.Registry) error {

	if err := validate.Required("cloud_service", "body", m.CloudService); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("cluster_name", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateConfigLabels(formats strfmt.Registry) error {

	if err := validate.Required("config_labels", "body", m.ConfigLabels); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateContainerID(formats strfmt.Registry) error {

	if err := validate.Required("container_id", "body", m.ContainerID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateContainerName(formats strfmt.Registry) error {

	if err := validate.Required("container_name", "body", m.ContainerName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateFirstSeen(formats strfmt.Registry) error {

	if err := validate.Required("first_seen", "body", m.FirstSeen); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateImageApplicationPackageCount(formats strfmt.Registry) error {

	if err := validate.Required("image_application_package_count", "body", m.ImageApplicationPackageCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateImageAssessedAt(formats strfmt.Registry) error {

	if err := validate.Required("image_assessed_at", "body", m.ImageAssessedAt); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateImageDetectionCount(formats strfmt.Registry) error {

	if err := validate.Required("image_detection_count", "body", m.ImageDetectionCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateImageDigest(formats strfmt.Registry) error {

	if err := validate.Required("image_digest", "body", m.ImageDigest); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateImageHasBeenAssessed(formats strfmt.Registry) error {

	if err := validate.Required("image_has_been_assessed", "body", m.ImageHasBeenAssessed); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateImageHighestSeverityVulnerability(formats strfmt.Registry) error {

	if err := validate.Required("image_highest_severity_vulnerability", "body", m.ImageHighestSeverityVulnerability); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateImageID(formats strfmt.Registry) error {

	if err := validate.Required("image_id", "body", m.ImageID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateImagePackageCount(formats strfmt.Registry) error {

	if err := validate.Required("image_package_count", "body", m.ImagePackageCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateImageRegistry(formats strfmt.Registry) error {

	if err := validate.Required("image_registry", "body", m.ImageRegistry); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateImageRepository(formats strfmt.Registry) error {

	if err := validate.Required("image_repository", "body", m.ImageRepository); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateImageTag(formats strfmt.Registry) error {

	if err := validate.Required("image_tag", "body", m.ImageTag); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateImageVulnerabilityCount(formats strfmt.Registry) error {

	if err := validate.Required("image_vulnerability_count", "body", m.ImageVulnerabilityCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateInsecureMountSource(formats strfmt.Registry) error {

	if err := validate.Required("insecure_mount_source", "body", m.InsecureMountSource); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateInsecureMountType(formats strfmt.Registry) error {

	if err := validate.Required("insecure_mount_type", "body", m.InsecureMountType); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateInsecurePropagationMode(formats strfmt.Registry) error {

	if err := validate.Required("insecure_propagation_mode", "body", m.InsecurePropagationMode); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateInteractiveMode(formats strfmt.Registry) error {

	if err := validate.Required("interactive_mode", "body", m.InteractiveMode); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateIPV4(formats strfmt.Registry) error {

	if err := validate.Required("ipv4", "body", m.IPV4); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateIPV6(formats strfmt.Registry) error {

	if err := validate.Required("ipv6", "body", m.IPV6); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateKacAgentID(formats strfmt.Registry) error {

	if err := validate.Required("kac_agent_id", "body", m.KacAgentID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateLabels(formats strfmt.Registry) error {

	if err := validate.Required("labels", "body", m.Labels); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateLabelsList(formats strfmt.Registry) error {

	if err := validate.Required("labels_list", "body", m.LabelsList); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateLastSeen(formats strfmt.Registry) error {

	if err := validate.Required("last_seen", "body", m.LastSeen); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateNodeName(formats strfmt.Registry) error {

	if err := validate.Required("node_name", "body", m.NodeName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateNodeUID(formats strfmt.Registry) error {

	if err := validate.Required("node_uid", "body", m.NodeUID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validatePodID(formats strfmt.Registry) error {

	if err := validate.Required("pod_id", "body", m.PodID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validatePodName(formats strfmt.Registry) error {

	if err := validate.Required("pod_name", "body", m.PodName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validatePorts(formats strfmt.Registry) error {

	if err := validate.Required("ports", "body", m.Ports); err != nil {
		return err
	}

	for i := 0; i < len(m.Ports); i++ {

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsContainer) validatePrivileged(formats strfmt.Registry) error {

	if err := validate.Required("privileged", "body", m.Privileged); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateRootWriteAccess(formats strfmt.Registry) error {

	if err := validate.Required("root_write_access", "body", m.RootWriteAccess); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateRunAsRootGroup(formats strfmt.Registry) error {

	if err := validate.Required("run_as_root_group", "body", m.RunAsRootGroup); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateRunAsRootUser(formats strfmt.Registry) error {

	if err := validate.Required("run_as_root_user", "body", m.RunAsRootUser); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateRunningStatus(formats strfmt.Registry) error {

	if err := validate.Required("running_status", "body", m.RunningStatus); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainer) validateVolumeMounts(formats strfmt.Registry) error {

	if err := validate.Required("volume_mounts", "body", m.VolumeMounts); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this models container based on the context it is used
func (m *ModelsContainer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsContainer) contextValidateAgents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Agents); i++ {

		if swag.IsZero(m.Agents[i]) { // not required
			return nil
		}

		if err := m.Agents[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agents" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agents" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ModelsContainer) contextValidatePorts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ports); i++ {

		if swag.IsZero(m.Ports[i]) { // not required
			return nil
		}

		if err := m.Ports[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ports" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ports" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsContainer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsContainer) UnmarshalBinary(b []byte) error {
	var res ModelsContainer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
