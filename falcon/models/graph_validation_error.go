// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GraphValidationError graph validation error
//
// swagger:model graph.ValidationError
type GraphValidationError struct {

	// The cid the validation error applies to if it is not the CID managing the workflow
	Cid string `json:"cid,omitempty"`

	// identifier for UI to indicate reason for node being invalid.
	Code int32 `json:"code,omitempty"`

	// Display name for the property if it exists in a trigger or activity
	DisplayName string `json:"display_name,omitempty"`

	// Detail of why the node is invalid.
	// Required: true
	Message *string `json:"message"`

	// ID of the node in the graph that has been invalidated.
	NodeID string `json:"node_id,omitempty"`

	// ID of the parent node in the graph that resulted in a child node being invalidated.
	ParentNodeID string `json:"parent_node_id,omitempty"`

	// Used to specify an exact property that is invalid for fql evaluation
	Property string `json:"property,omitempty"`

	// Resouce ID for property if it exists, e.g. trigger ID or activity ID
	ResourceID string `json:"resource_id,omitempty"`
}

// Validate validates this graph validation error
func (m *GraphValidationError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphValidationError) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this graph validation error based on context it is used
func (m *GraphValidationError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GraphValidationError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GraphValidationError) UnmarshalBinary(b []byte) error {
	var res GraphValidationError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
