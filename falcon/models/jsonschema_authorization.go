// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JsonschemaAuthorization jsonschema authorization
//
// swagger:model jsonschema.Authorization
type JsonschemaAuthorization struct {

	// api scope
	APIScope string `json:"apiScope,omitempty"`

	// complex permissions
	// Required: true
	ComplexPermissions *JsonschemaComplexPermissions `json:"complexPermissions"`

	// feature flag
	// Required: true
	FeatureFlag *string `json:"featureFlag"`

	// permissions
	// Required: true
	Permissions []*JsonschemaPermission `json:"permissions"`
}

// Validate validates this jsonschema authorization
func (m *JsonschemaAuthorization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComplexPermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatureFlag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JsonschemaAuthorization) validateComplexPermissions(formats strfmt.Registry) error {

	if err := validate.Required("complexPermissions", "body", m.ComplexPermissions); err != nil {
		return err
	}

	if m.ComplexPermissions != nil {
		if err := m.ComplexPermissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("complexPermissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("complexPermissions")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaAuthorization) validateFeatureFlag(formats strfmt.Registry) error {

	if err := validate.Required("featureFlag", "body", m.FeatureFlag); err != nil {
		return err
	}

	return nil
}

func (m *JsonschemaAuthorization) validatePermissions(formats strfmt.Registry) error {

	if err := validate.Required("permissions", "body", m.Permissions); err != nil {
		return err
	}

	for i := 0; i < len(m.Permissions); i++ {
		if swag.IsZero(m.Permissions[i]) { // not required
			continue
		}

		if m.Permissions[i] != nil {
			if err := m.Permissions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("permissions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this jsonschema authorization based on the context it is used
func (m *JsonschemaAuthorization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComplexPermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JsonschemaAuthorization) contextValidateComplexPermissions(ctx context.Context, formats strfmt.Registry) error {

	if m.ComplexPermissions != nil {

		if err := m.ComplexPermissions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("complexPermissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("complexPermissions")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaAuthorization) contextValidatePermissions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Permissions); i++ {

		if m.Permissions[i] != nil {

			if swag.IsZero(m.Permissions[i]) { // not required
				return nil
			}

			if err := m.Permissions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("permissions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *JsonschemaAuthorization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JsonschemaAuthorization) UnmarshalBinary(b []byte) error {
	var res JsonschemaAuthorization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
