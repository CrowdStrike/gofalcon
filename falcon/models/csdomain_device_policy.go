// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CsdomainDevicePolicy csdomain device policy
//
// swagger:model csdomain.DevicePolicy
type CsdomainDevicePolicy struct {

	// applied
	Applied bool `json:"applied,omitempty"`

	// applied date
	// Format: date-time
	AppliedDate strfmt.DateTime `json:"applied_date,omitempty"`

	// assigned date
	// Format: date-time
	AssignedDate strfmt.DateTime `json:"assigned_date,omitempty"`

	// policy id
	// Required: true
	PolicyID *string `json:"policy_id"`

	// policy type
	// Required: true
	PolicyType *string `json:"policy_type"`

	// rule groups
	RuleGroups []string `json:"rule_groups"`

	// rule set id
	RuleSetID string `json:"rule_set_id,omitempty"`

	// settings hash
	SettingsHash string `json:"settings_hash,omitempty"`

	// uninstall protection
	UninstallProtection string `json:"uninstall_protection,omitempty"`
}

// Validate validates this csdomain device policy
func (m *CsdomainDevicePolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppliedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssignedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CsdomainDevicePolicy) validateAppliedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.AppliedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("applied_date", "body", "date-time", m.AppliedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CsdomainDevicePolicy) validateAssignedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.AssignedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("assigned_date", "body", "date-time", m.AssignedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CsdomainDevicePolicy) validatePolicyID(formats strfmt.Registry) error {

	if err := validate.Required("policy_id", "body", m.PolicyID); err != nil {
		return err
	}

	return nil
}

func (m *CsdomainDevicePolicy) validatePolicyType(formats strfmt.Registry) error {

	if err := validate.Required("policy_type", "body", m.PolicyType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this csdomain device policy based on context it is used
func (m *CsdomainDevicePolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CsdomainDevicePolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CsdomainDevicePolicy) UnmarshalBinary(b []byte) error {
	var res CsdomainDevicePolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
