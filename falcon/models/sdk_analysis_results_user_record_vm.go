// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SdkAnalysisResultsUserRecordVM sdk analysis results user record VM
//
// swagger:model sdk.AnalysisResultsUserRecordVM
type SdkAnalysisResultsUserRecordVM struct {

	// email addresses
	// Required: true
	EmailAddresses []string `json:"email_addresses"`

	// idp user id
	// Required: true
	IdpUserID *string `json:"idp_user_id"`

	// sid
	// Required: true
	Sid *string `json:"sid"`

	// user full name
	// Required: true
	UserFullName *string `json:"user_full_name"`

	// user id
	// Required: true
	UserID *string `json:"user_id"`

	// user principal id
	// Required: true
	UserPrincipalID *string `json:"user_principal_id"`

	// user token key id
	// Required: true
	UserTokenKeyID *string `json:"user_token_key_id"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this sdk analysis results user record VM
func (m *SdkAnalysisResultsUserRecordVM) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmailAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdpUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserFullName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserPrincipalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserTokenKeyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SdkAnalysisResultsUserRecordVM) validateEmailAddresses(formats strfmt.Registry) error {

	if err := validate.Required("email_addresses", "body", m.EmailAddresses); err != nil {
		return err
	}

	return nil
}

func (m *SdkAnalysisResultsUserRecordVM) validateIdpUserID(formats strfmt.Registry) error {

	if err := validate.Required("idp_user_id", "body", m.IdpUserID); err != nil {
		return err
	}

	return nil
}

func (m *SdkAnalysisResultsUserRecordVM) validateSid(formats strfmt.Registry) error {

	if err := validate.Required("sid", "body", m.Sid); err != nil {
		return err
	}

	return nil
}

func (m *SdkAnalysisResultsUserRecordVM) validateUserFullName(formats strfmt.Registry) error {

	if err := validate.Required("user_full_name", "body", m.UserFullName); err != nil {
		return err
	}

	return nil
}

func (m *SdkAnalysisResultsUserRecordVM) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

func (m *SdkAnalysisResultsUserRecordVM) validateUserPrincipalID(formats strfmt.Registry) error {

	if err := validate.Required("user_principal_id", "body", m.UserPrincipalID); err != nil {
		return err
	}

	return nil
}

func (m *SdkAnalysisResultsUserRecordVM) validateUserTokenKeyID(formats strfmt.Registry) error {

	if err := validate.Required("user_token_key_id", "body", m.UserTokenKeyID); err != nil {
		return err
	}

	return nil
}

func (m *SdkAnalysisResultsUserRecordVM) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sdk analysis results user record VM based on context it is used
func (m *SdkAnalysisResultsUserRecordVM) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SdkAnalysisResultsUserRecordVM) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SdkAnalysisResultsUserRecordVM) UnmarshalBinary(b []byte) error {
	var res SdkAnalysisResultsUserRecordVM
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
