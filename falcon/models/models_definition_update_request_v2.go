// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsDefinitionUpdateRequestV2 models definition update request v2
//
// swagger:model models.DefinitionUpdateRequestV2
type ModelsDefinitionUpdateRequestV2 struct {

	// definition
	// Required: true
	Definition *V2Definition `json:"Definition"`

	// Optional user provided description to outline the changes made as part of the update. Maximum of 500 characters.
	ChangeLog string `json:"change_log,omitempty"`

	// Specifies whether a new definition should be enabled when created, always set to false if it's imported'
	// Required: true
	Enabled *bool `json:"enabled"`

	// Child CID selection parameters for flight control aware workflows
	FlightControl *DefinitionsFlightControlRequest `json:"flight_control,omitempty"`

	// Used to identify documents across versions
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this models definition update request v2
func (m *ModelsDefinitionUpdateRequestV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlightControl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsDefinitionUpdateRequestV2) validateDefinition(formats strfmt.Registry) error {

	if err := validate.Required("Definition", "body", m.Definition); err != nil {
		return err
	}

	if m.Definition != nil {
		if err := m.Definition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Definition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Definition")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsDefinitionUpdateRequestV2) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *ModelsDefinitionUpdateRequestV2) validateFlightControl(formats strfmt.Registry) error {
	if swag.IsZero(m.FlightControl) { // not required
		return nil
	}

	if m.FlightControl != nil {
		if err := m.FlightControl.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flight_control")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flight_control")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsDefinitionUpdateRequestV2) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this models definition update request v2 based on the context it is used
func (m *ModelsDefinitionUpdateRequestV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDefinition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlightControl(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsDefinitionUpdateRequestV2) contextValidateDefinition(ctx context.Context, formats strfmt.Registry) error {

	if m.Definition != nil {

		if err := m.Definition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Definition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Definition")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsDefinitionUpdateRequestV2) contextValidateFlightControl(ctx context.Context, formats strfmt.Registry) error {

	if m.FlightControl != nil {

		if swag.IsZero(m.FlightControl) { // not required
			return nil
		}

		if err := m.FlightControl.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flight_control")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flight_control")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsDefinitionUpdateRequestV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsDefinitionUpdateRequestV2) UnmarshalBinary(b []byte) error {
	var res ModelsDefinitionUpdateRequestV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
