// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItautomationUpdateTaskRequest itautomation update task request
//
// swagger:model itautomation.UpdateTaskRequest
type ItautomationUpdateTaskRequest struct {

	// Access type of the task
	// Enum: ["Public","Shared"]
	AccessType string `json:"access_type,omitempty"`

	// User group IDs to add to the assigned user group IDs of the task, when access_type is Shared. Use GET /it-automation/queries/it-user-groups/v1 to fetch user group IDs
	AddAssignedUserGroupIds []string `json:"add_assigned_user_group_ids"`

	// User IDs to add to the assigned user IDs of the task, when access_type is Shared. Use GET /user-management/queries/users/v1 to fetch user IDs
	AddAssignedUserIds []string `json:"add_assigned_user_ids"`

	// Composite query configuration containing task IDs and host attributes for multi-task execution
	CompositeQuery *ItautomationCompositeQuery `json:"composite_query,omitempty"`

	// Detailed description of what the task does. Example: User Table Validation Check
	Description string `json:"description,omitempty"`

	// Name of the task. Example: OSQuery Check
	Name string `json:"name,omitempty"`

	// OSQuery to execute. Example: select * from users
	OsQuery string `json:"os_query,omitempty"`

	// Specifies the columns and delimiter used to parse script execution results
	OutputParserConfig *ItautomationOutputParserConfig `json:"output_parser_config,omitempty"`

	// Script queries to run per platform
	Queries *ItautomationScripts `json:"queries,omitempty"`

	// Remediation scripts to run per platform
	Remediations *ItautomationScripts `json:"remediations,omitempty"`

	// User group IDs to remove from the assigned user group IDs of the task, when access_type is Shared. Use GET /it-automation/queries/it-user-groups/v1 to fetch user group IDs
	RemoveAssignedUserGroupIds []string `json:"remove_assigned_user_group_ids"`

	// User IDs to remove from the assigned user IDs of the task, when access_type is Shared. Use GET /user-management/queries/users/v1 to fetch user IDs
	RemoveAssignedUserIds []string `json:"remove_assigned_user_ids"`

	// Configuration for parsing script output into multiple rows
	RowsParserConfig *ItautomationRowsParserConfig `json:"rows_parser_config,omitempty"`

	// Target filter in FQL format. Example: platform_name: 'Windows'
	Target string `json:"target,omitempty"`

	// ID of the task group to associate this task with
	TaskGroupID string `json:"task_group_id,omitempty"`

	// Parameters for the task
	TaskParameters []*ItautomationTaskParameter `json:"task_parameters"`

	// Type of task
	// Enum: ["query","remediation"]
	TaskType string `json:"task_type,omitempty"`

	// Conditions that trigger remediation scripts execution
	TriggerCondition []*FalconforitapiConditionGroup `json:"trigger_condition"`

	// Conditions that verify the outcome of the remediation scripts execution
	VerificationCondition []*FalconforitapiConditionGroup `json:"verification_condition"`
}

// Validate validates this itautomation update task request
func (m *ItautomationUpdateTaskRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompositeQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputParserConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRowsParserConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerificationCondition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var itautomationUpdateTaskRequestTypeAccessTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Public","Shared"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itautomationUpdateTaskRequestTypeAccessTypePropEnum = append(itautomationUpdateTaskRequestTypeAccessTypePropEnum, v)
	}
}

const (

	// ItautomationUpdateTaskRequestAccessTypePublic captures enum value "Public"
	ItautomationUpdateTaskRequestAccessTypePublic string = "Public"

	// ItautomationUpdateTaskRequestAccessTypeShared captures enum value "Shared"
	ItautomationUpdateTaskRequestAccessTypeShared string = "Shared"
)

// prop value enum
func (m *ItautomationUpdateTaskRequest) validateAccessTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, itautomationUpdateTaskRequestTypeAccessTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ItautomationUpdateTaskRequest) validateAccessType(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccessTypeEnum("access_type", "body", m.AccessType); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationUpdateTaskRequest) validateCompositeQuery(formats strfmt.Registry) error {
	if swag.IsZero(m.CompositeQuery) { // not required
		return nil
	}

	if m.CompositeQuery != nil {
		if err := m.CompositeQuery.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("composite_query")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("composite_query")
			}

			return err
		}
	}

	return nil
}

func (m *ItautomationUpdateTaskRequest) validateOutputParserConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.OutputParserConfig) { // not required
		return nil
	}

	if m.OutputParserConfig != nil {
		if err := m.OutputParserConfig.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("output_parser_config")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("output_parser_config")
			}

			return err
		}
	}

	return nil
}

func (m *ItautomationUpdateTaskRequest) validateQueries(formats strfmt.Registry) error {
	if swag.IsZero(m.Queries) { // not required
		return nil
	}

	if m.Queries != nil {
		if err := m.Queries.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("queries")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("queries")
			}

			return err
		}
	}

	return nil
}

func (m *ItautomationUpdateTaskRequest) validateRemediations(formats strfmt.Registry) error {
	if swag.IsZero(m.Remediations) { // not required
		return nil
	}

	if m.Remediations != nil {
		if err := m.Remediations.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("remediations")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("remediations")
			}

			return err
		}
	}

	return nil
}

func (m *ItautomationUpdateTaskRequest) validateRowsParserConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.RowsParserConfig) { // not required
		return nil
	}

	if m.RowsParserConfig != nil {
		if err := m.RowsParserConfig.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("rows_parser_config")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("rows_parser_config")
			}

			return err
		}
	}

	return nil
}

func (m *ItautomationUpdateTaskRequest) validateTaskParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.TaskParameters) { // not required
		return nil
	}

	for i := 0; i < len(m.TaskParameters); i++ {
		if swag.IsZero(m.TaskParameters[i]) { // not required
			continue
		}

		if m.TaskParameters[i] != nil {
			if err := m.TaskParameters[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("task_parameters" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("task_parameters" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

var itautomationUpdateTaskRequestTypeTaskTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["query","remediation"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itautomationUpdateTaskRequestTypeTaskTypePropEnum = append(itautomationUpdateTaskRequestTypeTaskTypePropEnum, v)
	}
}

const (

	// ItautomationUpdateTaskRequestTaskTypeQuery captures enum value "query"
	ItautomationUpdateTaskRequestTaskTypeQuery string = "query"

	// ItautomationUpdateTaskRequestTaskTypeRemediation captures enum value "remediation"
	ItautomationUpdateTaskRequestTaskTypeRemediation string = "remediation"
)

// prop value enum
func (m *ItautomationUpdateTaskRequest) validateTaskTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, itautomationUpdateTaskRequestTypeTaskTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ItautomationUpdateTaskRequest) validateTaskType(formats strfmt.Registry) error {
	if swag.IsZero(m.TaskType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTaskTypeEnum("task_type", "body", m.TaskType); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationUpdateTaskRequest) validateTriggerCondition(formats strfmt.Registry) error {
	if swag.IsZero(m.TriggerCondition) { // not required
		return nil
	}

	for i := 0; i < len(m.TriggerCondition); i++ {
		if swag.IsZero(m.TriggerCondition[i]) { // not required
			continue
		}

		if m.TriggerCondition[i] != nil {
			if err := m.TriggerCondition[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ItautomationUpdateTaskRequest) validateVerificationCondition(formats strfmt.Registry) error {
	if swag.IsZero(m.VerificationCondition) { // not required
		return nil
	}

	for i := 0; i < len(m.VerificationCondition); i++ {
		if swag.IsZero(m.VerificationCondition[i]) { // not required
			continue
		}

		if m.VerificationCondition[i] != nil {
			if err := m.VerificationCondition[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this itautomation update task request based on the context it is used
func (m *ItautomationUpdateTaskRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCompositeQuery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutputParserConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemediations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRowsParserConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaskParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTriggerCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVerificationCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItautomationUpdateTaskRequest) contextValidateCompositeQuery(ctx context.Context, formats strfmt.Registry) error {

	if m.CompositeQuery != nil {

		if swag.IsZero(m.CompositeQuery) { // not required
			return nil
		}

		if err := m.CompositeQuery.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("composite_query")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("composite_query")
			}

			return err
		}
	}

	return nil
}

func (m *ItautomationUpdateTaskRequest) contextValidateOutputParserConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.OutputParserConfig != nil {

		if swag.IsZero(m.OutputParserConfig) { // not required
			return nil
		}

		if err := m.OutputParserConfig.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("output_parser_config")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("output_parser_config")
			}

			return err
		}
	}

	return nil
}

func (m *ItautomationUpdateTaskRequest) contextValidateQueries(ctx context.Context, formats strfmt.Registry) error {

	if m.Queries != nil {

		if swag.IsZero(m.Queries) { // not required
			return nil
		}

		if err := m.Queries.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("queries")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("queries")
			}

			return err
		}
	}

	return nil
}

func (m *ItautomationUpdateTaskRequest) contextValidateRemediations(ctx context.Context, formats strfmt.Registry) error {

	if m.Remediations != nil {

		if swag.IsZero(m.Remediations) { // not required
			return nil
		}

		if err := m.Remediations.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("remediations")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("remediations")
			}

			return err
		}
	}

	return nil
}

func (m *ItautomationUpdateTaskRequest) contextValidateRowsParserConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.RowsParserConfig != nil {

		if swag.IsZero(m.RowsParserConfig) { // not required
			return nil
		}

		if err := m.RowsParserConfig.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("rows_parser_config")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("rows_parser_config")
			}

			return err
		}
	}

	return nil
}

func (m *ItautomationUpdateTaskRequest) contextValidateTaskParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TaskParameters); i++ {

		if m.TaskParameters[i] != nil {

			if swag.IsZero(m.TaskParameters[i]) { // not required
				return nil
			}

			if err := m.TaskParameters[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("task_parameters" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("task_parameters" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ItautomationUpdateTaskRequest) contextValidateTriggerCondition(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TriggerCondition); i++ {

		if m.TriggerCondition[i] != nil {

			if swag.IsZero(m.TriggerCondition[i]) { // not required
				return nil
			}

			if err := m.TriggerCondition[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ItautomationUpdateTaskRequest) contextValidateVerificationCondition(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VerificationCondition); i++ {

		if m.VerificationCondition[i] != nil {

			if swag.IsZero(m.VerificationCondition[i]) { // not required
				return nil
			}

			if err := m.VerificationCondition[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ItautomationUpdateTaskRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItautomationUpdateTaskRequest) UnmarshalBinary(b []byte) error {
	var res ItautomationUpdateTaskRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
