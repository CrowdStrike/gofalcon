// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsAPICustomerAndImage models API customer and image
//
// swagger:model models.APICustomerAndImage
type ModelsAPICustomerAndImage struct {

	// base os
	// Required: true
	BaseOs *string `json:"base_os"`

	// base os version
	// Required: true
	BaseOsVersion *string `json:"base_os_version"`

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// config
	Config *ModelsLightWeightConfig `json:"config,omitempty"`

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// crowdstrike user
	// Required: true
	CrowdstrikeUser *string `json:"crowdstrike_user"`

	// digest
	// Required: true
	Digest *string `json:"digest"`

	// eol date
	// Required: true
	EolDate *string `json:"eol_date"`

	// first scanned
	// Required: true
	FirstScanned *string `json:"first_scanned"`

	// image id
	// Required: true
	ImageID *string `json:"image_id"`

	// image scanning active
	// Required: true
	ImageScanningActive *bool `json:"image_scanning_active"`

	// image size
	// Required: true
	ImageSize *int64 `json:"image_size"`

	// registry
	// Required: true
	Registry *string `json:"registry"`

	// repository
	// Required: true
	Repository *string `json:"repository"`

	// tag
	// Required: true
	Tag *string `json:"tag"`

	// updated at
	// Required: true
	UpdatedAt *string `json:"updated_at"`

	// uuid
	// Required: true
	UUID *string `json:"uuid"`
}

// Validate validates this models API customer and image
func (m *ModelsAPICustomerAndImage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseOsVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrowdstrikeUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDigest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEolDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstScanned(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageScanningActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPICustomerAndImage) validateBaseOs(formats strfmt.Registry) error {

	if err := validate.Required("base_os", "body", m.BaseOs); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICustomerAndImage) validateBaseOsVersion(formats strfmt.Registry) error {

	if err := validate.Required("base_os_version", "body", m.BaseOsVersion); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICustomerAndImage) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICustomerAndImage) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsAPICustomerAndImage) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICustomerAndImage) validateCrowdstrikeUser(formats strfmt.Registry) error {

	if err := validate.Required("crowdstrike_user", "body", m.CrowdstrikeUser); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICustomerAndImage) validateDigest(formats strfmt.Registry) error {

	if err := validate.Required("digest", "body", m.Digest); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICustomerAndImage) validateEolDate(formats strfmt.Registry) error {

	if err := validate.Required("eol_date", "body", m.EolDate); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICustomerAndImage) validateFirstScanned(formats strfmt.Registry) error {

	if err := validate.Required("first_scanned", "body", m.FirstScanned); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICustomerAndImage) validateImageID(formats strfmt.Registry) error {

	if err := validate.Required("image_id", "body", m.ImageID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICustomerAndImage) validateImageScanningActive(formats strfmt.Registry) error {

	if err := validate.Required("image_scanning_active", "body", m.ImageScanningActive); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICustomerAndImage) validateImageSize(formats strfmt.Registry) error {

	if err := validate.Required("image_size", "body", m.ImageSize); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICustomerAndImage) validateRegistry(formats strfmt.Registry) error {

	if err := validate.Required("registry", "body", m.Registry); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICustomerAndImage) validateRepository(formats strfmt.Registry) error {

	if err := validate.Required("repository", "body", m.Repository); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICustomerAndImage) validateTag(formats strfmt.Registry) error {

	if err := validate.Required("tag", "body", m.Tag); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICustomerAndImage) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPICustomerAndImage) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this models API customer and image based on the context it is used
func (m *ModelsAPICustomerAndImage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPICustomerAndImage) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {

		if swag.IsZero(m.Config) { // not required
			return nil
		}

		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsAPICustomerAndImage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsAPICustomerAndImage) UnmarshalBinary(b []byte) error {
	var res ModelsAPICustomerAndImage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
