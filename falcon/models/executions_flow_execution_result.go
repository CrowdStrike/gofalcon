// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExecutionsFlowExecutionResult executions flow execution result
//
// swagger:model executions.FlowExecutionResult
type ExecutionsFlowExecutionResult struct {

	// Conditional statement associated with the flow. The workflow only proceeds down this flow of the condition is met.
	Condition *ExecutionsConditionResult `json:"condition,omitempty"`

	// Timestamp of when the execution completed. Only present when status is an end state.
	// Format: date-time
	EndTimestamp strfmt.DateTime `json:"end_timestamp,omitempty"`

	// When a node execution is in an error status this field is present and provides an error code that can be used to determine details why the failure occurred.
	ErrorCode int32 `json:"error_code,omitempty"`

	// When a node execution is in an error status this field is present and provides a user friendly error message.
	ErrorMessage string `json:"error_message,omitempty"`

	// Whether this node's result is mocked
	Mocked bool `json:"mocked,omitempty"`

	// Unique id of the node as specified in the definition.
	// Required: true
	NodeID *string `json:"node_id"`

	// Timestamp of when the execution first started.
	// Required: true
	// Format: date-time
	StartTimestamp *strfmt.DateTime `json:"start_timestamp"`

	// Current status of execution for the activity.
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this executions flow execution result
func (m *ExecutionsFlowExecutionResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExecutionsFlowExecutionResult) validateCondition(formats strfmt.Registry) error {
	if swag.IsZero(m.Condition) { // not required
		return nil
	}

	if m.Condition != nil {
		if err := m.Condition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("condition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("condition")
			}
			return err
		}
	}

	return nil
}

func (m *ExecutionsFlowExecutionResult) validateEndTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.EndTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("end_timestamp", "body", "date-time", m.EndTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionsFlowExecutionResult) validateNodeID(formats strfmt.Registry) error {

	if err := validate.Required("node_id", "body", m.NodeID); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionsFlowExecutionResult) validateStartTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("start_timestamp", "body", m.StartTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("start_timestamp", "body", "date-time", m.StartTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExecutionsFlowExecutionResult) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this executions flow execution result based on the context it is used
func (m *ExecutionsFlowExecutionResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExecutionsFlowExecutionResult) contextValidateCondition(ctx context.Context, formats strfmt.Registry) error {

	if m.Condition != nil {

		if swag.IsZero(m.Condition) { // not required
			return nil
		}

		if err := m.Condition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("condition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("condition")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExecutionsFlowExecutionResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExecutionsFlowExecutionResult) UnmarshalBinary(b []byte) error {
	var res ExecutionsFlowExecutionResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
