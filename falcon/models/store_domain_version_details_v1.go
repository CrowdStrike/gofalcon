// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StoreDomainVersionDetailsV1 store domain version details v1
//
// swagger:model store.domain.VersionDetailsV1
type StoreDomainVersionDetailsV1 struct {

	// list of API scopes the app needs for integration
	// Required: true
	APIScopes []string `json:"api_scopes"`

	// the UTC timestamp when the version was approved by CrowdStrike
	ApprovalDate string `json:"approval_date,omitempty"`

	// the changes associated with the version
	ChangeLog []string `json:"change_log"`

	// the FDR events allowed in the version
	// Required: true
	EventFilter *StoreDomainEventFilter `json:"event_filter"`

	// the version of the partner's product that corresponds to the access version in the marketplace'
	PartnerVersion string `json:"partner_version,omitempty"`

	// list of Partner RTR commands associated with the version
	// Required: true
	RtrCommands []*StoreDomainRTRCommandDetailsV1 `json:"rtr_commands"`

	// the current state of the version in the approval process
	State string `json:"state,omitempty"`

	// the internal app version represented as a date (YYYY-MM-DD)
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this store domain version details v1
func (m *StoreDomainVersionDetailsV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIScopes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRtrCommands(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoreDomainVersionDetailsV1) validateAPIScopes(formats strfmt.Registry) error {

	if err := validate.Required("api_scopes", "body", m.APIScopes); err != nil {
		return err
	}

	return nil
}

func (m *StoreDomainVersionDetailsV1) validateEventFilter(formats strfmt.Registry) error {

	if err := validate.Required("event_filter", "body", m.EventFilter); err != nil {
		return err
	}

	if m.EventFilter != nil {
		if err := m.EventFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event_filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("event_filter")
			}
			return err
		}
	}

	return nil
}

func (m *StoreDomainVersionDetailsV1) validateRtrCommands(formats strfmt.Registry) error {

	if err := validate.Required("rtr_commands", "body", m.RtrCommands); err != nil {
		return err
	}

	for i := 0; i < len(m.RtrCommands); i++ {
		if swag.IsZero(m.RtrCommands[i]) { // not required
			continue
		}

		if m.RtrCommands[i] != nil {
			if err := m.RtrCommands[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rtr_commands" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rtr_commands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StoreDomainVersionDetailsV1) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this store domain version details v1 based on the context it is used
func (m *StoreDomainVersionDetailsV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEventFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRtrCommands(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoreDomainVersionDetailsV1) contextValidateEventFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.EventFilter != nil {
		if err := m.EventFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event_filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("event_filter")
			}
			return err
		}
	}

	return nil
}

func (m *StoreDomainVersionDetailsV1) contextValidateRtrCommands(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RtrCommands); i++ {

		if m.RtrCommands[i] != nil {
			if err := m.RtrCommands[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rtr_commands" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rtr_commands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoreDomainVersionDetailsV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoreDomainVersionDetailsV1) UnmarshalBinary(b []byte) error {
	var res StoreDomainVersionDetailsV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
