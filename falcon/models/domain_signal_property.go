// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainSignalProperty domain signal property
//
// swagger:model domain.SignalProperty
type DomainSignalProperty struct {

	// criteria
	// Required: true
	Criteria *string `json:"criteria"`

	// group name
	// Required: true
	GroupName *string `json:"group_name"`

	// meets criteria
	// Required: true
	MeetsCriteria *string `json:"meets_criteria"`

	// signal id
	// Required: true
	SignalID *string `json:"signal_id"`

	// signal name
	// Required: true
	SignalName *string `json:"signal_name"`
}

// Validate validates this domain signal property
func (m *DomainSignalProperty) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCriteria(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeetsCriteria(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignalName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainSignalProperty) validateCriteria(formats strfmt.Registry) error {

	if err := validate.Required("criteria", "body", m.Criteria); err != nil {
		return err
	}

	return nil
}

func (m *DomainSignalProperty) validateGroupName(formats strfmt.Registry) error {

	if err := validate.Required("group_name", "body", m.GroupName); err != nil {
		return err
	}

	return nil
}

func (m *DomainSignalProperty) validateMeetsCriteria(formats strfmt.Registry) error {

	if err := validate.Required("meets_criteria", "body", m.MeetsCriteria); err != nil {
		return err
	}

	return nil
}

func (m *DomainSignalProperty) validateSignalID(formats strfmt.Registry) error {

	if err := validate.Required("signal_id", "body", m.SignalID); err != nil {
		return err
	}

	return nil
}

func (m *DomainSignalProperty) validateSignalName(formats strfmt.Registry) error {

	if err := validate.Required("signal_name", "body", m.SignalName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain signal property based on context it is used
func (m *DomainSignalProperty) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainSignalProperty) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainSignalProperty) UnmarshalBinary(b []byte) error {
	var res DomainSignalProperty
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
