// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HumioSearchDomainRole humio search domain role
//
// swagger:model humio.SearchDomainRole
type HumioSearchDomainRole struct {

	// role
	// Required: true
	Role *APIRole `json:"role"`

	// search domain
	// Required: true
	SearchDomain *HumioSearchDomain `json:"searchDomain"`
}

// Validate validates this humio search domain role
func (m *HumioSearchDomainRole) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSearchDomain(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HumioSearchDomainRole) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	if m.Role != nil {
		if err := m.Role.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

func (m *HumioSearchDomainRole) validateSearchDomain(formats strfmt.Registry) error {

	if err := validate.Required("searchDomain", "body", m.SearchDomain); err != nil {
		return err
	}

	if m.SearchDomain != nil {
		if err := m.SearchDomain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("searchDomain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("searchDomain")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this humio search domain role based on the context it is used
func (m *HumioSearchDomainRole) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSearchDomain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HumioSearchDomainRole) contextValidateRole(ctx context.Context, formats strfmt.Registry) error {

	if m.Role != nil {

		if err := m.Role.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

func (m *HumioSearchDomainRole) contextValidateSearchDomain(ctx context.Context, formats strfmt.Registry) error {

	if m.SearchDomain != nil {

		if err := m.SearchDomain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("searchDomain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("searchDomain")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HumioSearchDomainRole) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HumioSearchDomainRole) UnmarshalBinary(b []byte) error {
	var res HumioSearchDomainRole
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
