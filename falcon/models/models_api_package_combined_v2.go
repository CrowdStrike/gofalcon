// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsAPIPackageCombinedV2 models API package combined v2
//
// swagger:model models.APIPackageCombinedV2
type ModelsAPIPackageCombinedV2 struct {

	// ai related
	// Required: true
	AiRelated *bool `json:"ai_related"`

	// all images
	// Required: true
	AllImages *int64 `json:"all_images"`

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// cveid
	// Required: true
	Cveid *string `json:"cveid"`

	// fix resolution
	// Required: true
	FixResolution []string `json:"fix_resolution"`

	// license
	// Required: true
	License *string `json:"license"`

	// package name version
	// Required: true
	PackageNameVersion *string `json:"package_name_version"`

	// running images
	// Required: true
	RunningImages *int64 `json:"running_images"`

	// severity
	// Required: true
	Severity *string `json:"severity"`

	// type
	// Required: true
	Type *string `json:"type"`

	// vulnerability description
	// Required: true
	VulnerabilityDescription *string `json:"vulnerability_description"`
}

// Validate validates this models API package combined v2
func (m *ModelsAPIPackageCombinedV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAiRelated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCveid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFixResolution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicense(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageNameVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVulnerabilityDescription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIPackageCombinedV2) validateAiRelated(formats strfmt.Registry) error {

	if err := validate.Required("ai_related", "body", m.AiRelated); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPackageCombinedV2) validateAllImages(formats strfmt.Registry) error {

	if err := validate.Required("all_images", "body", m.AllImages); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPackageCombinedV2) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPackageCombinedV2) validateCveid(formats strfmt.Registry) error {

	if err := validate.Required("cveid", "body", m.Cveid); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPackageCombinedV2) validateFixResolution(formats strfmt.Registry) error {

	if err := validate.Required("fix_resolution", "body", m.FixResolution); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPackageCombinedV2) validateLicense(formats strfmt.Registry) error {

	if err := validate.Required("license", "body", m.License); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPackageCombinedV2) validatePackageNameVersion(formats strfmt.Registry) error {

	if err := validate.Required("package_name_version", "body", m.PackageNameVersion); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPackageCombinedV2) validateRunningImages(formats strfmt.Registry) error {

	if err := validate.Required("running_images", "body", m.RunningImages); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPackageCombinedV2) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPackageCombinedV2) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPackageCombinedV2) validateVulnerabilityDescription(formats strfmt.Registry) error {

	if err := validate.Required("vulnerability_description", "body", m.VulnerabilityDescription); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models API package combined v2 based on context it is used
func (m *ModelsAPIPackageCombinedV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsAPIPackageCombinedV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsAPIPackageCombinedV2) UnmarshalBinary(b []byte) error {
	var res ModelsAPIPackageCombinedV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
