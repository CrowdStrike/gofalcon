// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicymanagerExternalClassification policymanager external classification
//
// swagger:model policymanager.ExternalClassification
type PolicymanagerExternalClassification struct {

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// classification properties
	// Required: true
	ClassificationProperties *PolicymanagerExternalClassificationProperties `json:"classification_properties"`

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// created by
	// Required: true
	CreatedBy *string `json:"created_by"`

	// id
	// Required: true
	ID *string `json:"id"`

	// modified at
	// Required: true
	ModifiedAt *string `json:"modified_at"`

	// modified by
	// Required: true
	ModifiedBy *string `json:"modified_by"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this policymanager external classification
func (m *PolicymanagerExternalClassification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClassificationProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicymanagerExternalClassification) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalClassification) validateClassificationProperties(formats strfmt.Registry) error {

	if err := validate.Required("classification_properties", "body", m.ClassificationProperties); err != nil {
		return err
	}

	if m.ClassificationProperties != nil {
		if err := m.ClassificationProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classification_properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("classification_properties")
			}
			return err
		}
	}

	return nil
}

func (m *PolicymanagerExternalClassification) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalClassification) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("created_by", "body", m.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalClassification) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalClassification) validateModifiedAt(formats strfmt.Registry) error {

	if err := validate.Required("modified_at", "body", m.ModifiedAt); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalClassification) validateModifiedBy(formats strfmt.Registry) error {

	if err := validate.Required("modified_by", "body", m.ModifiedBy); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalClassification) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this policymanager external classification based on the context it is used
func (m *PolicymanagerExternalClassification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClassificationProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicymanagerExternalClassification) contextValidateClassificationProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.ClassificationProperties != nil {

		if err := m.ClassificationProperties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classification_properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("classification_properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicymanagerExternalClassification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicymanagerExternalClassification) UnmarshalBinary(b []byte) error {
	var res PolicymanagerExternalClassification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
