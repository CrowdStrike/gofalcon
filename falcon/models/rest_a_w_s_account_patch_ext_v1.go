// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RestAWSAccountPatchExtV1 rest a w s account patch ext v1
//
// swagger:model rest.AWSAccountPatchExtV1
type RestAWSAccountPatchExtV1 struct {

	// account id
	// Required: true
	AccountID *string `json:"account_id"`

	// csp events
	CspEvents bool `json:"csp_events,omitempty"`

	// disable products
	DisableProducts []*RestAccountProductRequestExtV1 `json:"disable_products"`

	// log ingestion method
	LogIngestionMethod string `json:"log_ingestion_method,omitempty"`

	// organization id
	OrganizationID string `json:"organization_id,omitempty"`

	// products
	Products []*RestAccountProductRequestExtV1 `json:"products"`

	// reader role arn
	ReaderRoleArn string `json:"reader_role_arn,omitempty"`

	// resource name prefix
	ResourceNamePrefix string `json:"resource_name_prefix,omitempty"`

	// resource name suffix
	ResourceNameSuffix string `json:"resource_name_suffix,omitempty"`

	// s3 log ingestion bucket name
	S3LogIngestionBucketName string `json:"s3_log_ingestion_bucket_name,omitempty"`

	// s3 log ingestion bucket prefix
	S3LogIngestionBucketPrefix string `json:"s3_log_ingestion_bucket_prefix,omitempty"`

	// s3 log ingestion kms key arn
	S3LogIngestionKmsKeyArn string `json:"s3_log_ingestion_kms_key_arn,omitempty"`

	// s3 log ingestion sns topic arn
	S3LogIngestionSnsTopicArn string `json:"s3_log_ingestion_sns_topic_arn,omitempty"`
}

// Validate validates this rest a w s account patch ext v1
func (m *RestAWSAccountPatchExtV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisableProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestAWSAccountPatchExtV1) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("account_id", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *RestAWSAccountPatchExtV1) validateDisableProducts(formats strfmt.Registry) error {
	if swag.IsZero(m.DisableProducts) { // not required
		return nil
	}

	for i := 0; i < len(m.DisableProducts); i++ {
		if swag.IsZero(m.DisableProducts[i]) { // not required
			continue
		}

		if m.DisableProducts[i] != nil {
			if err := m.DisableProducts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disable_products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("disable_products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestAWSAccountPatchExtV1) validateProducts(formats strfmt.Registry) error {
	if swag.IsZero(m.Products) { // not required
		return nil
	}

	for i := 0; i < len(m.Products); i++ {
		if swag.IsZero(m.Products[i]) { // not required
			continue
		}

		if m.Products[i] != nil {
			if err := m.Products[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this rest a w s account patch ext v1 based on the context it is used
func (m *RestAWSAccountPatchExtV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDisableProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestAWSAccountPatchExtV1) contextValidateDisableProducts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DisableProducts); i++ {

		if m.DisableProducts[i] != nil {

			if swag.IsZero(m.DisableProducts[i]) { // not required
				return nil
			}

			if err := m.DisableProducts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disable_products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("disable_products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestAWSAccountPatchExtV1) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Products); i++ {

		if m.Products[i] != nil {

			if swag.IsZero(m.Products[i]) { // not required
				return nil
			}

			if err := m.Products[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestAWSAccountPatchExtV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestAWSAccountPatchExtV1) UnmarshalBinary(b []byte) error {
	var res RestAWSAccountPatchExtV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
