// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainExposedDataRecordBotOperatingSystemV1 domain exposed data record bot operating system v1
//
// swagger:model domain.ExposedDataRecordBotOperatingSystemV1
type DomainExposedDataRecordBotOperatingSystemV1 struct {

	// antivirus
	// Required: true
	Antivirus []string `json:"antivirus"`

	// computer name
	// Required: true
	ComputerName *string `json:"computer_name"`

	// domain
	// Required: true
	Domain *string `json:"domain"`

	// hardware id
	// Required: true
	HardwareID *string `json:"hardware_id"`

	// installed software
	// Required: true
	InstalledSoftware []string `json:"installed_software"`

	// language
	// Required: true
	Language *string `json:"language"`

	// layouts
	// Required: true
	Layouts []string `json:"layouts"`

	// os architecture
	// Required: true
	OsArchitecture *string `json:"os_architecture"`

	// os version
	// Required: true
	OsVersion *string `json:"os_version"`

	// timezone
	// Required: true
	Timezone *string `json:"timezone"`

	// uac
	// Required: true
	Uac *string `json:"uac"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this domain exposed data record bot operating system v1
func (m *DomainExposedDataRecordBotOperatingSystemV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAntivirus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHardwareID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstalledSoftware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLayouts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsArchitecture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimezone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainExposedDataRecordBotOperatingSystemV1) validateAntivirus(formats strfmt.Registry) error {

	if err := validate.Required("antivirus", "body", m.Antivirus); err != nil {
		return err
	}

	return nil
}

func (m *DomainExposedDataRecordBotOperatingSystemV1) validateComputerName(formats strfmt.Registry) error {

	if err := validate.Required("computer_name", "body", m.ComputerName); err != nil {
		return err
	}

	return nil
}

func (m *DomainExposedDataRecordBotOperatingSystemV1) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *DomainExposedDataRecordBotOperatingSystemV1) validateHardwareID(formats strfmt.Registry) error {

	if err := validate.Required("hardware_id", "body", m.HardwareID); err != nil {
		return err
	}

	return nil
}

func (m *DomainExposedDataRecordBotOperatingSystemV1) validateInstalledSoftware(formats strfmt.Registry) error {

	if err := validate.Required("installed_software", "body", m.InstalledSoftware); err != nil {
		return err
	}

	return nil
}

func (m *DomainExposedDataRecordBotOperatingSystemV1) validateLanguage(formats strfmt.Registry) error {

	if err := validate.Required("language", "body", m.Language); err != nil {
		return err
	}

	return nil
}

func (m *DomainExposedDataRecordBotOperatingSystemV1) validateLayouts(formats strfmt.Registry) error {

	if err := validate.Required("layouts", "body", m.Layouts); err != nil {
		return err
	}

	return nil
}

func (m *DomainExposedDataRecordBotOperatingSystemV1) validateOsArchitecture(formats strfmt.Registry) error {

	if err := validate.Required("os_architecture", "body", m.OsArchitecture); err != nil {
		return err
	}

	return nil
}

func (m *DomainExposedDataRecordBotOperatingSystemV1) validateOsVersion(formats strfmt.Registry) error {

	if err := validate.Required("os_version", "body", m.OsVersion); err != nil {
		return err
	}

	return nil
}

func (m *DomainExposedDataRecordBotOperatingSystemV1) validateTimezone(formats strfmt.Registry) error {

	if err := validate.Required("timezone", "body", m.Timezone); err != nil {
		return err
	}

	return nil
}

func (m *DomainExposedDataRecordBotOperatingSystemV1) validateUac(formats strfmt.Registry) error {

	if err := validate.Required("uac", "body", m.Uac); err != nil {
		return err
	}

	return nil
}

func (m *DomainExposedDataRecordBotOperatingSystemV1) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain exposed data record bot operating system v1 based on context it is used
func (m *DomainExposedDataRecordBotOperatingSystemV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainExposedDataRecordBotOperatingSystemV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainExposedDataRecordBotOperatingSystemV1) UnmarshalBinary(b []byte) error {
	var res DomainExposedDataRecordBotOperatingSystemV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
