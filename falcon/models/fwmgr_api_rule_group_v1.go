// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FwmgrAPIRuleGroupV1 fwmgr api rule group v1
//
// swagger:model fwmgr.api.RuleGroupV1
type FwmgrAPIRuleGroupV1 struct {

	// created by
	// Required: true
	CreatedBy *string `json:"created_by"`

	// created on
	// Required: true
	CreatedOn *string `json:"created_on"`

	// customer id
	// Required: true
	CustomerID *string `json:"customer_id"`

	// deleted
	// Required: true
	Deleted *bool `json:"deleted"`

	// description
	// Required: true
	Description *string `json:"description"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// id
	// Required: true
	ID *string `json:"id"`

	// modified by
	// Required: true
	ModifiedBy *string `json:"modified_by"`

	// modified on
	// Required: true
	ModifiedOn *string `json:"modified_on"`

	// name
	// Required: true
	Name *string `json:"name"`

	// platform
	// Required: true
	Platform *string `json:"platform"`

	// policy ids
	// Required: true
	PolicyIds []string `json:"policy_ids"`

	// rule ids
	// Required: true
	RuleIds []string `json:"rule_ids"`

	// tracking
	// Required: true
	Tracking *string `json:"tracking"`
}

// Validate validates this fwmgr api rule group v1
func (m *FwmgrAPIRuleGroupV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTracking(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FwmgrAPIRuleGroupV1) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("created_by", "body", m.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleGroupV1) validateCreatedOn(formats strfmt.Registry) error {

	if err := validate.Required("created_on", "body", m.CreatedOn); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleGroupV1) validateCustomerID(formats strfmt.Registry) error {

	if err := validate.Required("customer_id", "body", m.CustomerID); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleGroupV1) validateDeleted(formats strfmt.Registry) error {

	if err := validate.Required("deleted", "body", m.Deleted); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleGroupV1) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleGroupV1) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleGroupV1) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleGroupV1) validateModifiedBy(formats strfmt.Registry) error {

	if err := validate.Required("modified_by", "body", m.ModifiedBy); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleGroupV1) validateModifiedOn(formats strfmt.Registry) error {

	if err := validate.Required("modified_on", "body", m.ModifiedOn); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleGroupV1) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleGroupV1) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleGroupV1) validatePolicyIds(formats strfmt.Registry) error {

	if err := validate.Required("policy_ids", "body", m.PolicyIds); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleGroupV1) validateRuleIds(formats strfmt.Registry) error {

	if err := validate.Required("rule_ids", "body", m.RuleIds); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrAPIRuleGroupV1) validateTracking(formats strfmt.Registry) error {

	if err := validate.Required("tracking", "body", m.Tracking); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this fwmgr api rule group v1 based on context it is used
func (m *FwmgrAPIRuleGroupV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FwmgrAPIRuleGroupV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FwmgrAPIRuleGroupV1) UnmarshalBinary(b []byte) error {
	var res FwmgrAPIRuleGroupV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
