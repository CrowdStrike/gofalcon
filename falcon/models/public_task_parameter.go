// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PublicTaskParameter public task parameter
//
// swagger:model public.TaskParameter
type PublicTaskParameter struct {

	// Message to show on failure of custom validation regex. Example: API Key must be 32 alphanumeric characters
	// Required: true
	CustomValidationMessage *string `json:"custom_validation_message"`

	// Custom regex pattern to apply when input_type is text. If specified, this overrides any value of validation_type. Example: ^[A-Za-z0-9]{32}$
	// Required: true
	CustomValidationRegex *string `json:"custom_validation_regex"`

	// Default value for the parameter used to populate the UI input when executing a task. This value is not used for tasks initiated through the API. Example: default-api-key
	// Required: true
	DefaultValue *string `json:"default_value"`

	// Type of input field. Parameters with type text will apply validation_type. Parameters with type option will use defined options list. One of: [text, option]
	// Required: true
	InputType *string `json:"input_type"`

	// Unique identifier for the parameter, corresponds to placeholder used in task content. Example: api_key, would be key for placeholder {{.api_key}}
	// Required: true
	Key *string `json:"key"`

	// Human readable label for the parameter. Example: API Key
	// Required: true
	Label *string `json:"label"`

	// Available options for option inputs. Options are only used if input_type is option.
	// Required: true
	Options []*PublicParameterOption `json:"options"`

	// Type of validation to apply when input_type is text. One of: [text, alphanumeric, integer, float, ip, filepath, filepathwin, filepathunix, datetime, semver, macaddress, uuid, port, winhost, dnshost]
	// Required: true
	ValidationType *string `json:"validation_type"`
}

// Validate validates this public task parameter
func (m *PublicTaskParameter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomValidationMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomValidationRegex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicTaskParameter) validateCustomValidationMessage(formats strfmt.Registry) error {

	if err := validate.Required("custom_validation_message", "body", m.CustomValidationMessage); err != nil {
		return err
	}

	return nil
}

func (m *PublicTaskParameter) validateCustomValidationRegex(formats strfmt.Registry) error {

	if err := validate.Required("custom_validation_regex", "body", m.CustomValidationRegex); err != nil {
		return err
	}

	return nil
}

func (m *PublicTaskParameter) validateDefaultValue(formats strfmt.Registry) error {

	if err := validate.Required("default_value", "body", m.DefaultValue); err != nil {
		return err
	}

	return nil
}

func (m *PublicTaskParameter) validateInputType(formats strfmt.Registry) error {

	if err := validate.Required("input_type", "body", m.InputType); err != nil {
		return err
	}

	return nil
}

func (m *PublicTaskParameter) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *PublicTaskParameter) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *PublicTaskParameter) validateOptions(formats strfmt.Registry) error {

	if err := validate.Required("options", "body", m.Options); err != nil {
		return err
	}

	for i := 0; i < len(m.Options); i++ {
		if swag.IsZero(m.Options[i]) { // not required
			continue
		}

		if m.Options[i] != nil {
			if err := m.Options[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PublicTaskParameter) validateValidationType(formats strfmt.Registry) error {

	if err := validate.Required("validation_type", "body", m.ValidationType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this public task parameter based on the context it is used
func (m *PublicTaskParameter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicTaskParameter) contextValidateOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Options); i++ {

		if m.Options[i] != nil {

			if swag.IsZero(m.Options[i]) { // not required
				return nil
			}

			if err := m.Options[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublicTaskParameter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicTaskParameter) UnmarshalBinary(b []byte) error {
	var res PublicTaskParameter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
