// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DomainTelegramInfo domain telegram info
//
// swagger:model domain.TelegramInfo
type DomainTelegramInfo struct {

	// channel info
	ChannelInfo *DomainTelegramChannelInfo `json:"channel_info,omitempty"`

	// recipient info
	RecipientInfo *DomainTelegramRecipientInfo `json:"recipient_info,omitempty"`

	// sender info
	SenderInfo *DomainTelegramSenderInfo `json:"sender_info,omitempty"`
}

// Validate validates this domain telegram info
func (m *DomainTelegramInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannelInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipientInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSenderInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainTelegramInfo) validateChannelInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ChannelInfo) { // not required
		return nil
	}

	if m.ChannelInfo != nil {
		if err := m.ChannelInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channel_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("channel_info")
			}
			return err
		}
	}

	return nil
}

func (m *DomainTelegramInfo) validateRecipientInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.RecipientInfo) { // not required
		return nil
	}

	if m.RecipientInfo != nil {
		if err := m.RecipientInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recipient_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recipient_info")
			}
			return err
		}
	}

	return nil
}

func (m *DomainTelegramInfo) validateSenderInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SenderInfo) { // not required
		return nil
	}

	if m.SenderInfo != nil {
		if err := m.SenderInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sender_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sender_info")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this domain telegram info based on the context it is used
func (m *DomainTelegramInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChannelInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecipientInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSenderInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainTelegramInfo) contextValidateChannelInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ChannelInfo != nil {

		if swag.IsZero(m.ChannelInfo) { // not required
			return nil
		}

		if err := m.ChannelInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channel_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("channel_info")
			}
			return err
		}
	}

	return nil
}

func (m *DomainTelegramInfo) contextValidateRecipientInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.RecipientInfo != nil {

		if swag.IsZero(m.RecipientInfo) { // not required
			return nil
		}

		if err := m.RecipientInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recipient_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recipient_info")
			}
			return err
		}
	}

	return nil
}

func (m *DomainTelegramInfo) contextValidateSenderInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SenderInfo != nil {

		if swag.IsZero(m.SenderInfo) { // not required
			return nil
		}

		if err := m.SenderInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sender_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sender_info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainTelegramInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainTelegramInfo) UnmarshalBinary(b []byte) error {
	var res DomainTelegramInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
