// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecurityCheckWithComplianceGetSecurityChecks security check with compliance get security checks
//
// swagger:model SecurityCheckWithCompliance_GetSecurityChecks
type SecurityCheckWithComplianceGetSecurityChecks struct {

	// Account id
	// Required: true
	AccountID *string `json:"account_id"`

	// Affected
	// Required: true
	Affected *int64 `json:"affected"`

	// Base check id
	// Required: true
	BaseCheckID *string `json:"base_check_id"`

	// compliance data
	// Required: true
	ComplianceData []map[string]*string `json:"compliance_data"`

	// Created by
	// Required: true
	// Min Length: 1
	CreatedBy *string `json:"created_by"`

	// Creation date
	// Required: true
	// Format: date-time
	CreationDate *strfmt.DateTime `json:"creation_date"`

	// Details
	// Required: true
	// Min Length: 1
	Details *string `json:"details"`

	// Dismiss expiration date
	// Required: true
	// Format: date-time
	DismissExpirationDate *strfmt.DateTime `json:"dismiss_expiration_date"`

	// Dismiss reason
	// Required: true
	// Min Length: 1
	DismissReason *string `json:"dismiss_reason"`

	// Id
	// Required: true
	ID *string `json:"id"`

	// Impact
	// Required: true
	// Min Length: 1
	Impact *string `json:"impact"`

	// Integration alias
	// Required: true
	// Min Length: 1
	IntegrationAlias *string `json:"integration_alias"`

	// Integration id
	// Required: true
	IntegrationID *string `json:"integration_id"`

	// Is global
	// Required: true
	IsGlobal *bool `json:"is_global"`

	// Name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// Remediation plan
	// Required: true
	// Min Length: 1
	RemediationPlan *string `json:"remediation_plan"`

	// Saas name
	// Required: true
	// Min Length: 1
	SaasName *string `json:"saas_name"`

	// Security check type
	// Required: true
	// Min Length: 1
	SecurityCheckType *string `json:"security_check_type"`

	// Security domain
	// Required: true
	// Min Length: 1
	SecurityDomain *string `json:"security_domain"`

	// Status
	// Required: true
	// Min Length: 1
	Status *string `json:"status"`

	// Status last changed date
	// Required: true
	// Format: date-time
	StatusLastChangedDate *strfmt.DateTime `json:"status_last_changed_date"`

	// Status reason
	// Required: true
	// Min Length: 1
	StatusReason *string `json:"status_reason"`

	// User who dismissed
	// Required: true
	// Min Length: 1
	UserWhoDismissed *string `json:"user_who_dismissed"`
}

// Validate validates this security check with compliance get security checks
func (m *SecurityCheckWithComplianceGetSecurityChecks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseCheckID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComplianceData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDismissExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDismissReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImpact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegrationAlias(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegrationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsGlobal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediationPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSaasName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityCheckType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusLastChangedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserWhoDismissed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityCheckWithComplianceGetSecurityChecks) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("account_id", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckWithComplianceGetSecurityChecks) validateAffected(formats strfmt.Registry) error {

	if err := validate.Required("affected", "body", m.Affected); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckWithComplianceGetSecurityChecks) validateBaseCheckID(formats strfmt.Registry) error {

	if err := validate.Required("base_check_id", "body", m.BaseCheckID); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckWithComplianceGetSecurityChecks) validateComplianceData(formats strfmt.Registry) error {

	if err := validate.Required("compliance_data", "body", m.ComplianceData); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckWithComplianceGetSecurityChecks) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("created_by", "body", m.CreatedBy); err != nil {
		return err
	}

	if err := validate.MinLength("created_by", "body", *m.CreatedBy, 1); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckWithComplianceGetSecurityChecks) validateCreationDate(formats strfmt.Registry) error {

	if err := validate.Required("creation_date", "body", m.CreationDate); err != nil {
		return err
	}

	if err := validate.FormatOf("creation_date", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckWithComplianceGetSecurityChecks) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("details", "body", m.Details); err != nil {
		return err
	}

	if err := validate.MinLength("details", "body", *m.Details, 1); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckWithComplianceGetSecurityChecks) validateDismissExpirationDate(formats strfmt.Registry) error {

	if err := validate.Required("dismiss_expiration_date", "body", m.DismissExpirationDate); err != nil {
		return err
	}

	if err := validate.FormatOf("dismiss_expiration_date", "body", "date-time", m.DismissExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckWithComplianceGetSecurityChecks) validateDismissReason(formats strfmt.Registry) error {

	if err := validate.Required("dismiss_reason", "body", m.DismissReason); err != nil {
		return err
	}

	if err := validate.MinLength("dismiss_reason", "body", *m.DismissReason, 1); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckWithComplianceGetSecurityChecks) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckWithComplianceGetSecurityChecks) validateImpact(formats strfmt.Registry) error {

	if err := validate.Required("impact", "body", m.Impact); err != nil {
		return err
	}

	if err := validate.MinLength("impact", "body", *m.Impact, 1); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckWithComplianceGetSecurityChecks) validateIntegrationAlias(formats strfmt.Registry) error {

	if err := validate.Required("integration_alias", "body", m.IntegrationAlias); err != nil {
		return err
	}

	if err := validate.MinLength("integration_alias", "body", *m.IntegrationAlias, 1); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckWithComplianceGetSecurityChecks) validateIntegrationID(formats strfmt.Registry) error {

	if err := validate.Required("integration_id", "body", m.IntegrationID); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckWithComplianceGetSecurityChecks) validateIsGlobal(formats strfmt.Registry) error {

	if err := validate.Required("is_global", "body", m.IsGlobal); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckWithComplianceGetSecurityChecks) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckWithComplianceGetSecurityChecks) validateRemediationPlan(formats strfmt.Registry) error {

	if err := validate.Required("remediation_plan", "body", m.RemediationPlan); err != nil {
		return err
	}

	if err := validate.MinLength("remediation_plan", "body", *m.RemediationPlan, 1); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckWithComplianceGetSecurityChecks) validateSaasName(formats strfmt.Registry) error {

	if err := validate.Required("saas_name", "body", m.SaasName); err != nil {
		return err
	}

	if err := validate.MinLength("saas_name", "body", *m.SaasName, 1); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckWithComplianceGetSecurityChecks) validateSecurityCheckType(formats strfmt.Registry) error {

	if err := validate.Required("security_check_type", "body", m.SecurityCheckType); err != nil {
		return err
	}

	if err := validate.MinLength("security_check_type", "body", *m.SecurityCheckType, 1); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckWithComplianceGetSecurityChecks) validateSecurityDomain(formats strfmt.Registry) error {

	if err := validate.Required("security_domain", "body", m.SecurityDomain); err != nil {
		return err
	}

	if err := validate.MinLength("security_domain", "body", *m.SecurityDomain, 1); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckWithComplianceGetSecurityChecks) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.MinLength("status", "body", *m.Status, 1); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckWithComplianceGetSecurityChecks) validateStatusLastChangedDate(formats strfmt.Registry) error {

	if err := validate.Required("status_last_changed_date", "body", m.StatusLastChangedDate); err != nil {
		return err
	}

	if err := validate.FormatOf("status_last_changed_date", "body", "date-time", m.StatusLastChangedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckWithComplianceGetSecurityChecks) validateStatusReason(formats strfmt.Registry) error {

	if err := validate.Required("status_reason", "body", m.StatusReason); err != nil {
		return err
	}

	if err := validate.MinLength("status_reason", "body", *m.StatusReason, 1); err != nil {
		return err
	}

	return nil
}

func (m *SecurityCheckWithComplianceGetSecurityChecks) validateUserWhoDismissed(formats strfmt.Registry) error {

	if err := validate.Required("user_who_dismissed", "body", m.UserWhoDismissed); err != nil {
		return err
	}

	if err := validate.MinLength("user_who_dismissed", "body", *m.UserWhoDismissed, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this security check with compliance get security checks based on context it is used
func (m *SecurityCheckWithComplianceGetSecurityChecks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SecurityCheckWithComplianceGetSecurityChecks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityCheckWithComplianceGetSecurityChecks) UnmarshalBinary(b []byte) error {
	var res SecurityCheckWithComplianceGetSecurityChecks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
