// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourcesInsights resources insights
//
// swagger:model resources.Insights
type ResourcesInsights struct {

	// external
	// Required: true
	External []*ResourcesInsightDetails `json:"external"`

	// internal
	// Required: true
	Internal interface{} `json:"internal"`
}

// Validate validates this resources insights
func (m *ResourcesInsights) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExternal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInternal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourcesInsights) validateExternal(formats strfmt.Registry) error {

	if err := validate.Required("external", "body", m.External); err != nil {
		return err
	}

	for i := 0; i < len(m.External); i++ {
		if swag.IsZero(m.External[i]) { // not required
			continue
		}

		if m.External[i] != nil {
			if err := m.External[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("external" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("external" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResourcesInsights) validateInternal(formats strfmt.Registry) error {

	if m.Internal == nil {
		return errors.Required("internal", "body", nil)
	}

	return nil
}

// ContextValidate validate this resources insights based on the context it is used
func (m *ResourcesInsights) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExternal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourcesInsights) contextValidateExternal(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.External); i++ {

		if m.External[i] != nil {

			if swag.IsZero(m.External[i]) { // not required
				return nil
			}

			if err := m.External[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("external" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("external" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourcesInsights) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourcesInsights) UnmarshalBinary(b []byte) error {
	var res ResourcesInsights
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
