// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApimodelsControl apimodels control
//
// swagger:model apimodels.Control
type ApimodelsControl struct {

	// applicable profiles
	ApplicableProfiles []string `json:"applicable_profiles"`

	// authority
	// Required: true
	Authority *string `json:"authority"`

	// code
	// Required: true
	Code *string `json:"code"`

	// control type
	ControlType string `json:"control_type,omitempty"`

	// control version
	ControlVersion string `json:"control_version,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// origin
	// Required: true
	Origin *string `json:"origin"`

	// requirement
	Requirement string `json:"requirement,omitempty"`

	// section name
	SectionName string `json:"section_name,omitempty"`

	// security framework
	SecurityFramework []*ApimodelsSecurityFramework `json:"security_framework"`

	// uuid
	// Required: true
	UUID *string `json:"uuid"`
}

// Validate validates this apimodels control
func (m *ApimodelsControl) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrigin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityFramework(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApimodelsControl) validateAuthority(formats strfmt.Registry) error {

	if err := validate.Required("authority", "body", m.Authority); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsControl) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsControl) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsControl) validateOrigin(formats strfmt.Registry) error {

	if err := validate.Required("origin", "body", m.Origin); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsControl) validateSecurityFramework(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityFramework) { // not required
		return nil
	}

	for i := 0; i < len(m.SecurityFramework); i++ {
		if swag.IsZero(m.SecurityFramework[i]) { // not required
			continue
		}

		if m.SecurityFramework[i] != nil {
			if err := m.SecurityFramework[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("security_framework" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("security_framework" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApimodelsControl) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this apimodels control based on the context it is used
func (m *ApimodelsControl) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSecurityFramework(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApimodelsControl) contextValidateSecurityFramework(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SecurityFramework); i++ {

		if m.SecurityFramework[i] != nil {

			if swag.IsZero(m.SecurityFramework[i]) { // not required
				return nil
			}

			if err := m.SecurityFramework[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("security_framework" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("security_framework" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApimodelsControl) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApimodelsControl) UnmarshalBinary(b []byte) error {
	var res ApimodelsControl
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
