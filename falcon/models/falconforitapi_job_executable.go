// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FalconforitapiJobExecutable falconforitapi job executable
//
// swagger:model falconforitapi.JobExecutable
type FalconforitapiJobExecutable struct {

	// executable id
	// Required: true
	ExecutableID *string `json:"executable_id"`

	// job id
	// Required: true
	JobID *string `json:"job_id"`

	// output parser config
	// Required: true
	OutputParserConfig *FalconforitapiOutputParserConfig `json:"output_parser_config"`

	// platforms
	// Required: true
	Platforms []string `json:"platforms"`

	// sequence
	// Required: true
	Sequence *int32 `json:"sequence"`

	// stage
	// Required: true
	Stage *string `json:"stage"`

	// task id
	TaskID string `json:"task_id,omitempty"`
}

// Validate validates this falconforitapi job executable
func (m *FalconforitapiJobExecutable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExecutableID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputParserConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatforms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSequence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiJobExecutable) validateExecutableID(formats strfmt.Registry) error {

	if err := validate.Required("executable_id", "body", m.ExecutableID); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJobExecutable) validateJobID(formats strfmt.Registry) error {

	if err := validate.Required("job_id", "body", m.JobID); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJobExecutable) validateOutputParserConfig(formats strfmt.Registry) error {

	if err := validate.Required("output_parser_config", "body", m.OutputParserConfig); err != nil {
		return err
	}

	if m.OutputParserConfig != nil {
		if err := m.OutputParserConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output_parser_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output_parser_config")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiJobExecutable) validatePlatforms(formats strfmt.Registry) error {

	if err := validate.Required("platforms", "body", m.Platforms); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJobExecutable) validateSequence(formats strfmt.Registry) error {

	if err := validate.Required("sequence", "body", m.Sequence); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJobExecutable) validateStage(formats strfmt.Registry) error {

	if err := validate.Required("stage", "body", m.Stage); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this falconforitapi job executable based on the context it is used
func (m *FalconforitapiJobExecutable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOutputParserConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiJobExecutable) contextValidateOutputParserConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.OutputParserConfig != nil {

		if err := m.OutputParserConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output_parser_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output_parser_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FalconforitapiJobExecutable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FalconforitapiJobExecutable) UnmarshalBinary(b []byte) error {
	var res FalconforitapiJobExecutable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
