// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIQueryJobAroundInput api query job around input
//
// swagger:model api.QueryJobAroundInput
type APIQueryJobAroundInput struct {

	// event Id
	// Required: true
	EventID *string `json:"eventId"`

	// number of events after
	// Required: true
	NumberOfEventsAfter *int64 `json:"numberOfEventsAfter"`

	// number of events before
	// Required: true
	NumberOfEventsBefore *int64 `json:"numberOfEventsBefore"`

	// timestamp
	// Required: true
	Timestamp *int64 `json:"timestamp"`
}

// Validate validates this api query job around input
func (m *APIQueryJobAroundInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumberOfEventsAfter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumberOfEventsBefore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIQueryJobAroundInput) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("eventId", "body", m.EventID); err != nil {
		return err
	}

	return nil
}

func (m *APIQueryJobAroundInput) validateNumberOfEventsAfter(formats strfmt.Registry) error {

	if err := validate.Required("numberOfEventsAfter", "body", m.NumberOfEventsAfter); err != nil {
		return err
	}

	return nil
}

func (m *APIQueryJobAroundInput) validateNumberOfEventsBefore(formats strfmt.Registry) error {

	if err := validate.Required("numberOfEventsBefore", "body", m.NumberOfEventsBefore); err != nil {
		return err
	}

	return nil
}

func (m *APIQueryJobAroundInput) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this api query job around input based on context it is used
func (m *APIQueryJobAroundInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *APIQueryJobAroundInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIQueryJobAroundInput) UnmarshalBinary(b []byte) error {
	var res APIQueryJobAroundInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
