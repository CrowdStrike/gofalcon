// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainConfigV1 domain config v1
//
// swagger:model domain.ConfigV1
type DomainConfigV1 struct {

	// App ID of the configuration
	// Required: true
	AppID *string `json:"app_id"`

	// Config data
	// Required: true
	Config DomainConfigV1Config `json:"config"`

	// ID of the configuration
	// Required: true
	ConfigID *string `json:"config_id"`

	// Definition ID of the configuration
	// Required: true
	DefinitionID *string `json:"definition_id"`

	// The current state of the config
	// Required: true
	State *string `json:"state"`
}

// Validate validates this domain config v1
func (m *DomainConfigV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefinitionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainConfigV1) validateAppID(formats strfmt.Registry) error {

	if err := validate.Required("app_id", "body", m.AppID); err != nil {
		return err
	}

	return nil
}

func (m *DomainConfigV1) validateConfig(formats strfmt.Registry) error {

	if m.Config == nil {
		return errors.Required("config", "body", nil)
	}

	return nil
}

func (m *DomainConfigV1) validateConfigID(formats strfmt.Registry) error {

	if err := validate.Required("config_id", "body", m.ConfigID); err != nil {
		return err
	}

	return nil
}

func (m *DomainConfigV1) validateDefinitionID(formats strfmt.Registry) error {

	if err := validate.Required("definition_id", "body", m.DefinitionID); err != nil {
		return err
	}

	return nil
}

func (m *DomainConfigV1) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain config v1 based on context it is used
func (m *DomainConfigV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainConfigV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainConfigV1) UnmarshalBinary(b []byte) error {
	var res DomainConfigV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
