// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EvaluationsThreat evaluations threat
//
// swagger:model evaluations.Threat
type EvaluationsThreat struct {

	// framework
	Framework string `json:"framework,omitempty"`

	// tactic
	Tactic *EvaluationsTactic `json:"tactic,omitempty"`

	// technique
	Technique *EvaluationsTechnique `json:"technique,omitempty"`
}

// Validate validates this evaluations threat
func (m *EvaluationsThreat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTactic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTechnique(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvaluationsThreat) validateTactic(formats strfmt.Registry) error {
	if swag.IsZero(m.Tactic) { // not required
		return nil
	}

	if m.Tactic != nil {
		if err := m.Tactic.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tactic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tactic")
			}
			return err
		}
	}

	return nil
}

func (m *EvaluationsThreat) validateTechnique(formats strfmt.Registry) error {
	if swag.IsZero(m.Technique) { // not required
		return nil
	}

	if m.Technique != nil {
		if err := m.Technique.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("technique")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("technique")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this evaluations threat based on the context it is used
func (m *EvaluationsThreat) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTactic(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTechnique(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvaluationsThreat) contextValidateTactic(ctx context.Context, formats strfmt.Registry) error {

	if m.Tactic != nil {

		if swag.IsZero(m.Tactic) { // not required
			return nil
		}

		if err := m.Tactic.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tactic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tactic")
			}
			return err
		}
	}

	return nil
}

func (m *EvaluationsThreat) contextValidateTechnique(ctx context.Context, formats strfmt.Registry) error {

	if m.Technique != nil {

		if swag.IsZero(m.Technique) { // not required
			return nil
		}

		if err := m.Technique.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("technique")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("technique")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EvaluationsThreat) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EvaluationsThreat) UnmarshalBinary(b []byte) error {
	var res EvaluationsThreat
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
