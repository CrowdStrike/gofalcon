// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelFileDetails model file details
//
// swagger:model model.FileDetails
type ModelFileDetails struct {

	// case id
	// Required: true
	CaseID *string `json:"case_id"`

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// description
	// Required: true
	Description *string `json:"description"`

	// file size
	// Required: true
	FileSize *string `json:"file_size"`

	// file type
	// Required: true
	FileType *string `json:"file_type"`

	// hash value
	// Required: true
	HashValue *string `json:"hash_value"`

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// uploaded by
	// Required: true
	UploadedBy *string `json:"uploaded_by"`

	// uploaded on
	// Required: true
	// Format: date-time
	UploadedOn *strfmt.DateTime `json:"uploaded_on"`
}

// Validate validates this model file details
func (m *ModelFileDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCaseID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHashValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadedOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelFileDetails) validateCaseID(formats strfmt.Registry) error {

	if err := validate.Required("case_id", "body", m.CaseID); err != nil {
		return err
	}

	return nil
}

func (m *ModelFileDetails) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *ModelFileDetails) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ModelFileDetails) validateFileSize(formats strfmt.Registry) error {

	if err := validate.Required("file_size", "body", m.FileSize); err != nil {
		return err
	}

	return nil
}

func (m *ModelFileDetails) validateFileType(formats strfmt.Registry) error {

	if err := validate.Required("file_type", "body", m.FileType); err != nil {
		return err
	}

	return nil
}

func (m *ModelFileDetails) validateHashValue(formats strfmt.Registry) error {

	if err := validate.Required("hash_value", "body", m.HashValue); err != nil {
		return err
	}

	return nil
}

func (m *ModelFileDetails) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ModelFileDetails) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ModelFileDetails) validateUploadedBy(formats strfmt.Registry) error {

	if err := validate.Required("uploaded_by", "body", m.UploadedBy); err != nil {
		return err
	}

	return nil
}

func (m *ModelFileDetails) validateUploadedOn(formats strfmt.Registry) error {

	if err := validate.Required("uploaded_on", "body", m.UploadedOn); err != nil {
		return err
	}

	if err := validate.FormatOf("uploaded_on", "body", "date-time", m.UploadedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this model file details based on context it is used
func (m *ModelFileDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelFileDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelFileDetails) UnmarshalBinary(b []byte) error {
	var res ModelFileDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
