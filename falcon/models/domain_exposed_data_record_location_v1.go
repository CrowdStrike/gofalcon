// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainExposedDataRecordLocationV1 domain exposed data record location v1
//
// swagger:model domain.ExposedDataRecordLocationV1
type DomainExposedDataRecordLocationV1 struct {

	// city
	// Required: true
	City *string `json:"city"`

	// country code
	// Required: true
	CountryCode *string `json:"country_code"`

	// federal admin region
	// Required: true
	FederalAdminRegion *string `json:"federal_admin_region"`

	// federal district
	// Required: true
	FederalDistrict *string `json:"federal_district"`

	// postal code
	// Required: true
	PostalCode *string `json:"postal_code"`

	// state
	// Required: true
	State *string `json:"state"`
}

// Validate validates this domain exposed data record location v1
func (m *DomainExposedDataRecordLocationV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFederalAdminRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFederalDistrict(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainExposedDataRecordLocationV1) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

func (m *DomainExposedDataRecordLocationV1) validateCountryCode(formats strfmt.Registry) error {

	if err := validate.Required("country_code", "body", m.CountryCode); err != nil {
		return err
	}

	return nil
}

func (m *DomainExposedDataRecordLocationV1) validateFederalAdminRegion(formats strfmt.Registry) error {

	if err := validate.Required("federal_admin_region", "body", m.FederalAdminRegion); err != nil {
		return err
	}

	return nil
}

func (m *DomainExposedDataRecordLocationV1) validateFederalDistrict(formats strfmt.Registry) error {

	if err := validate.Required("federal_district", "body", m.FederalDistrict); err != nil {
		return err
	}

	return nil
}

func (m *DomainExposedDataRecordLocationV1) validatePostalCode(formats strfmt.Registry) error {

	if err := validate.Required("postal_code", "body", m.PostalCode); err != nil {
		return err
	}

	return nil
}

func (m *DomainExposedDataRecordLocationV1) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain exposed data record location v1 based on context it is used
func (m *DomainExposedDataRecordLocationV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainExposedDataRecordLocationV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainExposedDataRecordLocationV1) UnmarshalBinary(b []byte) error {
	var res DomainExposedDataRecordLocationV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
