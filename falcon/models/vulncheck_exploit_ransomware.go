// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VulncheckExploitRansomware vulncheck exploit ransomware
//
// swagger:model vulncheck.ExploitRansomware
type VulncheckExploitRansomware struct {

	// ransomware families
	// Required: true
	RansomwareFamilies []string `json:"ransomware_families"`

	// reference data
	// Required: true
	ReferenceData []*VulncheckExploitRansomwareData `json:"reference_data"`
}

// Validate validates this vulncheck exploit ransomware
func (m *VulncheckExploitRansomware) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRansomwareFamilies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferenceData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulncheckExploitRansomware) validateRansomwareFamilies(formats strfmt.Registry) error {

	if err := validate.Required("ransomware_families", "body", m.RansomwareFamilies); err != nil {
		return err
	}

	return nil
}

func (m *VulncheckExploitRansomware) validateReferenceData(formats strfmt.Registry) error {

	if err := validate.Required("reference_data", "body", m.ReferenceData); err != nil {
		return err
	}

	for i := 0; i < len(m.ReferenceData); i++ {
		if swag.IsZero(m.ReferenceData[i]) { // not required
			continue
		}

		if m.ReferenceData[i] != nil {
			if err := m.ReferenceData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reference_data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("reference_data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this vulncheck exploit ransomware based on the context it is used
func (m *VulncheckExploitRansomware) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReferenceData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulncheckExploitRansomware) contextValidateReferenceData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReferenceData); i++ {

		if m.ReferenceData[i] != nil {

			if swag.IsZero(m.ReferenceData[i]) { // not required
				return nil
			}

			if err := m.ReferenceData[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reference_data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("reference_data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VulncheckExploitRansomware) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VulncheckExploitRansomware) UnmarshalBinary(b []byte) error {
	var res VulncheckExploitRansomware
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
