// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainAPIVulnerabilityAppV2 domain API vulnerability app v2
//
// swagger:model domain.APIVulnerabilityAppV2
type DomainAPIVulnerabilityAppV2 struct {

	// Refers to the normalized product name of the product for which the vulnerability has been detected
	// Required: true
	ProductNameNormalized *string `json:"product_name_normalized"`

	// Refers to the un-normalized combination of product name and version of the product for which the vulnerability has been detected
	// Required: true
	ProductNameVersion *string `json:"product_name_version"`
}

// Validate validates this domain API vulnerability app v2
func (m *DomainAPIVulnerabilityAppV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProductNameNormalized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductNameVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAPIVulnerabilityAppV2) validateProductNameNormalized(formats strfmt.Registry) error {

	if err := validate.Required("product_name_normalized", "body", m.ProductNameNormalized); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIVulnerabilityAppV2) validateProductNameVersion(formats strfmt.Registry) error {

	if err := validate.Required("product_name_version", "body", m.ProductNameVersion); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain API vulnerability app v2 based on context it is used
func (m *DomainAPIVulnerabilityAppV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainAPIVulnerabilityAppV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainAPIVulnerabilityAppV2) UnmarshalBinary(b []byte) error {
	var res DomainAPIVulnerabilityAppV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
