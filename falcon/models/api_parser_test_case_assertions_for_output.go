// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIParserTestCaseAssertionsForOutput api parser test case assertions for output
//
// swagger:model api.ParserTestCaseAssertionsForOutput
type APIParserTestCaseAssertionsForOutput struct {

	// Contains the actual assertions for the output event
	// Required: true
	Assertions *APIParserTestCaseOutputAssertions `json:"assertions"`

	// The index of the output where the assertions should be checked
	// Required: true
	OutputEventIndex *int64 `json:"output_event_index"`
}

// Validate validates this api parser test case assertions for output
func (m *APIParserTestCaseAssertionsForOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssertions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputEventIndex(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIParserTestCaseAssertionsForOutput) validateAssertions(formats strfmt.Registry) error {

	if err := validate.Required("assertions", "body", m.Assertions); err != nil {
		return err
	}

	if m.Assertions != nil {
		if err := m.Assertions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assertions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assertions")
			}
			return err
		}
	}

	return nil
}

func (m *APIParserTestCaseAssertionsForOutput) validateOutputEventIndex(formats strfmt.Registry) error {

	if err := validate.Required("output_event_index", "body", m.OutputEventIndex); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this api parser test case assertions for output based on the context it is used
func (m *APIParserTestCaseAssertionsForOutput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssertions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIParserTestCaseAssertionsForOutput) contextValidateAssertions(ctx context.Context, formats strfmt.Registry) error {

	if m.Assertions != nil {

		if err := m.Assertions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assertions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assertions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIParserTestCaseAssertionsForOutput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIParserTestCaseAssertionsForOutput) UnmarshalBinary(b []byte) error {
	var res APIParserTestCaseAssertionsForOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
