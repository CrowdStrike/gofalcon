// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DevicecontrolapiBluetoothExceptionBase devicecontrolapi bluetooth exception base
//
// swagger:model devicecontrolapi.BluetoothExceptionBase
type DevicecontrolapiBluetoothExceptionBase struct {

	// action
	Action string `json:"action,omitempty"`

	// class
	Class string `json:"class,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// expiration time
	// Format: date-time
	ExpirationTime strfmt.DateTime `json:"expiration_time,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// minor classes
	MinorClasses []string `json:"minor_classes"`

	// product id
	ProductID string `json:"product_id,omitempty"`

	// product name
	ProductName string `json:"product_name,omitempty"`

	// vendor id
	VendorID string `json:"vendor_id,omitempty"`

	// vendor id source
	VendorIDSource string `json:"vendor_id_source,omitempty"`

	// vendor name
	VendorName string `json:"vendor_name,omitempty"`
}

// Validate validates this devicecontrolapi bluetooth exception base
func (m *DevicecontrolapiBluetoothExceptionBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpirationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontrolapiBluetoothExceptionBase) validateExpirationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("expiration_time", "body", "date-time", m.ExpirationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiBluetoothExceptionBase) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this devicecontrolapi bluetooth exception base based on context it is used
func (m *DevicecontrolapiBluetoothExceptionBase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DevicecontrolapiBluetoothExceptionBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevicecontrolapiBluetoothExceptionBase) UnmarshalBinary(b []byte) error {
	var res DevicecontrolapiBluetoothExceptionBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
