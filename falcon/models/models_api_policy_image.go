// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsAPIPolicyImage models API policy image
//
// swagger:model models.APIPolicyImage
type ModelsAPIPolicyImage struct {

	// image digest
	// Required: true
	ImageDigest *string `json:"image_digest"`

	// image id
	// Required: true
	ImageID *string `json:"image_id"`

	// registry
	Registry string `json:"registry,omitempty"`

	// repository
	// Required: true
	Repository *string `json:"repository"`

	// tag
	// Required: true
	Tag *string `json:"tag"`
}

// Validate validates this models API policy image
func (m *ModelsAPIPolicyImage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImageDigest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIPolicyImage) validateImageDigest(formats strfmt.Registry) error {

	if err := validate.Required("image_digest", "body", m.ImageDigest); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPolicyImage) validateImageID(formats strfmt.Registry) error {

	if err := validate.Required("image_id", "body", m.ImageID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPolicyImage) validateRepository(formats strfmt.Registry) error {

	if err := validate.Required("repository", "body", m.Repository); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPolicyImage) validateTag(formats strfmt.Registry) error {

	if err := validate.Required("tag", "body", m.Tag); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models API policy image based on context it is used
func (m *ModelsAPIPolicyImage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsAPIPolicyImage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsAPIPolicyImage) UnmarshalBinary(b []byte) error {
	var res ModelsAPIPolicyImage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
