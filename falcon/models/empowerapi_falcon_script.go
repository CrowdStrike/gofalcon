// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EmpowerapiFalconScript empowerapi falcon script
//
// swagger:model empowerapi.FalconScript
type EmpowerapiFalconScript struct {

	// access roles
	// Required: true
	AccessRoles []string `json:"access_roles"`

	// categories
	// Required: true
	Categories []string `json:"categories"`

	// content
	Content string `json:"content,omitempty"`

	// created by
	// Required: true
	CreatedBy *string `json:"created_by"`

	// created timestamp
	// Required: true
	// Format: date-time
	CreatedTimestamp *strfmt.DateTime `json:"created_timestamp"`

	// description
	// Required: true
	Description *string `json:"description"`

	// id
	// Required: true
	ID *string `json:"id"`

	// is disruptive
	// Required: true
	IsDisruptive *bool `json:"is_disruptive"`

	// modified by
	// Required: true
	ModifiedBy *string `json:"modified_by"`

	// modified timestamp
	// Required: true
	// Format: date-time
	ModifiedTimestamp *strfmt.DateTime `json:"modified_timestamp"`

	// modifies system
	// Required: true
	ModifiesSystem *bool `json:"modifies_system"`

	// name
	// Required: true
	Name *string `json:"name"`

	// platform
	// Required: true
	Platform *string `json:"platform"`

	// required skus
	RequiredSkus []string `json:"required_skus"`

	// revision
	// Required: true
	Revision *int64 `json:"revision"`

	// sha256
	Sha256 string `json:"sha256,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// use case
	// Required: true
	UseCase *string `json:"use_case"`

	// workflow enabled
	// Required: true
	WorkflowEnabled *bool `json:"workflow_enabled"`

	// workflow input schema
	// Required: true
	WorkflowInputSchema *string `json:"workflow_input_schema"`

	// workflow output schema
	// Required: true
	WorkflowOutputSchema *string `json:"workflow_output_schema"`

	// workflow tags
	// Required: true
	WorkflowTags []string `json:"workflow_tags"`
}

// Validate validates this empowerapi falcon script
func (m *EmpowerapiFalconScript) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsDisruptive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiesSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUseCase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowInputSchema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowOutputSchema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmpowerapiFalconScript) validateAccessRoles(formats strfmt.Registry) error {

	if err := validate.Required("access_roles", "body", m.AccessRoles); err != nil {
		return err
	}

	return nil
}

func (m *EmpowerapiFalconScript) validateCategories(formats strfmt.Registry) error {

	if err := validate.Required("categories", "body", m.Categories); err != nil {
		return err
	}

	return nil
}

func (m *EmpowerapiFalconScript) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("created_by", "body", m.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (m *EmpowerapiFalconScript) validateCreatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("created_timestamp", "body", m.CreatedTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("created_timestamp", "body", "date-time", m.CreatedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EmpowerapiFalconScript) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *EmpowerapiFalconScript) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *EmpowerapiFalconScript) validateIsDisruptive(formats strfmt.Registry) error {

	if err := validate.Required("is_disruptive", "body", m.IsDisruptive); err != nil {
		return err
	}

	return nil
}

func (m *EmpowerapiFalconScript) validateModifiedBy(formats strfmt.Registry) error {

	if err := validate.Required("modified_by", "body", m.ModifiedBy); err != nil {
		return err
	}

	return nil
}

func (m *EmpowerapiFalconScript) validateModifiedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("modified_timestamp", "body", m.ModifiedTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("modified_timestamp", "body", "date-time", m.ModifiedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EmpowerapiFalconScript) validateModifiesSystem(formats strfmt.Registry) error {

	if err := validate.Required("modifies_system", "body", m.ModifiesSystem); err != nil {
		return err
	}

	return nil
}

func (m *EmpowerapiFalconScript) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *EmpowerapiFalconScript) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

func (m *EmpowerapiFalconScript) validateRevision(formats strfmt.Registry) error {

	if err := validate.Required("revision", "body", m.Revision); err != nil {
		return err
	}

	return nil
}

func (m *EmpowerapiFalconScript) validateUseCase(formats strfmt.Registry) error {

	if err := validate.Required("use_case", "body", m.UseCase); err != nil {
		return err
	}

	return nil
}

func (m *EmpowerapiFalconScript) validateWorkflowEnabled(formats strfmt.Registry) error {

	if err := validate.Required("workflow_enabled", "body", m.WorkflowEnabled); err != nil {
		return err
	}

	return nil
}

func (m *EmpowerapiFalconScript) validateWorkflowInputSchema(formats strfmt.Registry) error {

	if err := validate.Required("workflow_input_schema", "body", m.WorkflowInputSchema); err != nil {
		return err
	}

	return nil
}

func (m *EmpowerapiFalconScript) validateWorkflowOutputSchema(formats strfmt.Registry) error {

	if err := validate.Required("workflow_output_schema", "body", m.WorkflowOutputSchema); err != nil {
		return err
	}

	return nil
}

func (m *EmpowerapiFalconScript) validateWorkflowTags(formats strfmt.Registry) error {

	if err := validate.Required("workflow_tags", "body", m.WorkflowTags); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this empowerapi falcon script based on context it is used
func (m *EmpowerapiFalconScript) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EmpowerapiFalconScript) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmpowerapiFalconScript) UnmarshalBinary(b []byte) error {
	var res EmpowerapiFalconScript
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
