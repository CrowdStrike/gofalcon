// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainFemExternalAsset domain fem external asset
//
// swagger:model domain.FemExternalAsset
type DomainFemExternalAsset struct {

	// Lists the user actions can be taken on this asset (triage, delete, etc)
	// Required: true
	ApplicableActions []string `json:"applicable_actions"`

	// The type of external asset (ip, dns_domain)
	// Required: true
	AssetType *string `json:"asset_type"`

	// The customer ID
	// Required: true
	Cid *string `json:"cid"`

	// Confidence level for the asset association to the organization
	// Required: true
	Confidence *int32 `json:"confidence"`

	// The criticality level of the asset (Critical, High, Noncritical, or Unassigned)
	Criticality string `json:"criticality,omitempty"`

	// The description the user entered when manually assigning a criticality level
	CriticalityDescription string `json:"criticality_description,omitempty"`

	// The date and time the criticality level was manually assigned
	CriticalityTimestamp string `json:"criticality_timestamp,omitempty"`

	// The username of the account that manually assigned the criticality level
	CriticalityUsername string `json:"criticality_username,omitempty"`

	// A list of the source providers for the asset information
	// Required: true
	DataProviders []string `json:"data_providers"`

	// The identifier of the asset
	DiscoveredBy string `json:"discovered_by,omitempty"`

	// An object that shows how this asset has been linked to the customer inventory
	Discovery *DomainExternalAssetDiscoveryAttributes `json:"discovery,omitempty"`

	// DNS Domain details
	DNSDomain *DomainFemDNSDomain `json:"dns_domain,omitempty"`

	// The first time this asset has been observed as externally exposed
	FirstSeen string `json:"first_seen,omitempty"`

	// The unique external asset identifier
	// Required: true
	ID *string `json:"id"`

	// The internet exposure status of the asset
	InternetExposure string `json:"internet_exposure,omitempty"`

	// IP details
	IP *DomainFemExternalIP `json:"ip,omitempty"`

	// The last time this asset has been observed as externally exposed
	LastSeen string `json:"last_seen,omitempty"`

	// Flag indicating if the asset has been manually added
	Manual bool `json:"manual,omitempty"`

	// Perimeter of this asset (Official/Unofficial)
	Perimeter string `json:"perimeter,omitempty"`

	// The availability status for the asset
	// Required: true
	Status *string `json:"status"`

	// List of subsidiaries that the asset belongs to
	Subsidiaries []*DomainExternalAssetSubsidiary `json:"subsidiaries"`

	// The triage information about this asset.
	Triage *DomainExternalAssetsAPITriage `json:"triage,omitempty"`
}

// Validate validates this domain fem external asset
func (m *DomainFemExternalAsset) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicableActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfidence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataProviders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscovery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubsidiaries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainFemExternalAsset) validateApplicableActions(formats strfmt.Registry) error {

	if err := validate.Required("applicable_actions", "body", m.ApplicableActions); err != nil {
		return err
	}

	return nil
}

func (m *DomainFemExternalAsset) validateAssetType(formats strfmt.Registry) error {

	if err := validate.Required("asset_type", "body", m.AssetType); err != nil {
		return err
	}

	return nil
}

func (m *DomainFemExternalAsset) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *DomainFemExternalAsset) validateConfidence(formats strfmt.Registry) error {

	if err := validate.Required("confidence", "body", m.Confidence); err != nil {
		return err
	}

	return nil
}

func (m *DomainFemExternalAsset) validateDataProviders(formats strfmt.Registry) error {

	if err := validate.Required("data_providers", "body", m.DataProviders); err != nil {
		return err
	}

	return nil
}

func (m *DomainFemExternalAsset) validateDiscovery(formats strfmt.Registry) error {
	if swag.IsZero(m.Discovery) { // not required
		return nil
	}

	if m.Discovery != nil {
		if err := m.Discovery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discovery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("discovery")
			}
			return err
		}
	}

	return nil
}

func (m *DomainFemExternalAsset) validateDNSDomain(formats strfmt.Registry) error {
	if swag.IsZero(m.DNSDomain) { // not required
		return nil
	}

	if m.DNSDomain != nil {
		if err := m.DNSDomain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dns_domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dns_domain")
			}
			return err
		}
	}

	return nil
}

func (m *DomainFemExternalAsset) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DomainFemExternalAsset) validateIP(formats strfmt.Registry) error {
	if swag.IsZero(m.IP) { // not required
		return nil
	}

	if m.IP != nil {
		if err := m.IP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ip")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ip")
			}
			return err
		}
	}

	return nil
}

func (m *DomainFemExternalAsset) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *DomainFemExternalAsset) validateSubsidiaries(formats strfmt.Registry) error {
	if swag.IsZero(m.Subsidiaries) { // not required
		return nil
	}

	for i := 0; i < len(m.Subsidiaries); i++ {
		if swag.IsZero(m.Subsidiaries[i]) { // not required
			continue
		}

		if m.Subsidiaries[i] != nil {
			if err := m.Subsidiaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subsidiaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subsidiaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainFemExternalAsset) validateTriage(formats strfmt.Registry) error {
	if swag.IsZero(m.Triage) { // not required
		return nil
	}

	if m.Triage != nil {
		if err := m.Triage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("triage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("triage")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this domain fem external asset based on the context it is used
func (m *DomainFemExternalAsset) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiscovery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDNSDomain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubsidiaries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTriage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainFemExternalAsset) contextValidateDiscovery(ctx context.Context, formats strfmt.Registry) error {

	if m.Discovery != nil {

		if swag.IsZero(m.Discovery) { // not required
			return nil
		}

		if err := m.Discovery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discovery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("discovery")
			}
			return err
		}
	}

	return nil
}

func (m *DomainFemExternalAsset) contextValidateDNSDomain(ctx context.Context, formats strfmt.Registry) error {

	if m.DNSDomain != nil {

		if swag.IsZero(m.DNSDomain) { // not required
			return nil
		}

		if err := m.DNSDomain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dns_domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dns_domain")
			}
			return err
		}
	}

	return nil
}

func (m *DomainFemExternalAsset) contextValidateIP(ctx context.Context, formats strfmt.Registry) error {

	if m.IP != nil {

		if swag.IsZero(m.IP) { // not required
			return nil
		}

		if err := m.IP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ip")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ip")
			}
			return err
		}
	}

	return nil
}

func (m *DomainFemExternalAsset) contextValidateSubsidiaries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Subsidiaries); i++ {

		if m.Subsidiaries[i] != nil {

			if swag.IsZero(m.Subsidiaries[i]) { // not required
				return nil
			}

			if err := m.Subsidiaries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subsidiaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("subsidiaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainFemExternalAsset) contextValidateTriage(ctx context.Context, formats strfmt.Registry) error {

	if m.Triage != nil {

		if swag.IsZero(m.Triage) { // not required
			return nil
		}

		if err := m.Triage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("triage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("triage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainFemExternalAsset) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainFemExternalAsset) UnmarshalBinary(b []byte) error {
	var res DomainFemExternalAsset
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
