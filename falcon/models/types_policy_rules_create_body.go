// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TypesPolicyRulesCreateBody types policy rules create body
//
// swagger:model types.PolicyRulesCreateBody
type TypesPolicyRulesCreateBody struct {

	// action
	// Required: true
	Action *string `json:"action"`

	// activity
	Activity *Activity `json:"activity,omitempty"`

	// destination
	Destination *Destination `json:"destination,omitempty"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// name
	// Required: true
	Name *string `json:"name"`

	// simulation mode
	// Required: true
	SimulationMode *bool `json:"simulationMode"`

	// source endpoint
	SourceEndpoint *SourceEndpoint `json:"sourceEndpoint,omitempty"`

	// source user
	SourceUser *SourceUser `json:"sourceUser,omitempty"`

	// trigger
	// Required: true
	Trigger *string `json:"trigger"`
}

// Validate validates this types policy rules create body
func (m *TypesPolicyRulesCreateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActivity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSimulationMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrigger(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesPolicyRulesCreateBody) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *TypesPolicyRulesCreateBody) validateActivity(formats strfmt.Registry) error {
	if swag.IsZero(m.Activity) { // not required
		return nil
	}

	if m.Activity != nil {
		if err := m.Activity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activity")
			}
			return err
		}
	}

	return nil
}

func (m *TypesPolicyRulesCreateBody) validateDestination(formats strfmt.Registry) error {
	if swag.IsZero(m.Destination) { // not required
		return nil
	}

	if m.Destination != nil {
		if err := m.Destination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination")
			}
			return err
		}
	}

	return nil
}

func (m *TypesPolicyRulesCreateBody) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *TypesPolicyRulesCreateBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TypesPolicyRulesCreateBody) validateSimulationMode(formats strfmt.Registry) error {

	if err := validate.Required("simulationMode", "body", m.SimulationMode); err != nil {
		return err
	}

	return nil
}

func (m *TypesPolicyRulesCreateBody) validateSourceEndpoint(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceEndpoint) { // not required
		return nil
	}

	if m.SourceEndpoint != nil {
		if err := m.SourceEndpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceEndpoint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceEndpoint")
			}
			return err
		}
	}

	return nil
}

func (m *TypesPolicyRulesCreateBody) validateSourceUser(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceUser) { // not required
		return nil
	}

	if m.SourceUser != nil {
		if err := m.SourceUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceUser")
			}
			return err
		}
	}

	return nil
}

func (m *TypesPolicyRulesCreateBody) validateTrigger(formats strfmt.Registry) error {

	if err := validate.Required("trigger", "body", m.Trigger); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this types policy rules create body based on the context it is used
func (m *TypesPolicyRulesCreateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActivity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceEndpoint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesPolicyRulesCreateBody) contextValidateActivity(ctx context.Context, formats strfmt.Registry) error {

	if m.Activity != nil {

		if swag.IsZero(m.Activity) { // not required
			return nil
		}

		if err := m.Activity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activity")
			}
			return err
		}
	}

	return nil
}

func (m *TypesPolicyRulesCreateBody) contextValidateDestination(ctx context.Context, formats strfmt.Registry) error {

	if m.Destination != nil {

		if swag.IsZero(m.Destination) { // not required
			return nil
		}

		if err := m.Destination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination")
			}
			return err
		}
	}

	return nil
}

func (m *TypesPolicyRulesCreateBody) contextValidateSourceEndpoint(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceEndpoint != nil {

		if swag.IsZero(m.SourceEndpoint) { // not required
			return nil
		}

		if err := m.SourceEndpoint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceEndpoint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceEndpoint")
			}
			return err
		}
	}

	return nil
}

func (m *TypesPolicyRulesCreateBody) contextValidateSourceUser(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceUser != nil {

		if swag.IsZero(m.SourceUser) { // not required
			return nil
		}

		if err := m.SourceUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceUser")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TypesPolicyRulesCreateBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesPolicyRulesCreateBody) UnmarshalBinary(b []byte) error {
	var res TypesPolicyRulesCreateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
