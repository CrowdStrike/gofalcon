// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIRole api role
//
// swagger:model api.Role
type APIRole struct {

	// color
	// Required: true
	Color *string `json:"Color"`

	// description
	// Required: true
	Description *string `json:"Description"`

	// display name
	// Required: true
	DisplayName *string `json:"DisplayName"`

	// ID
	// Required: true
	ID *string `json:"ID"`

	// org permissions
	// Required: true
	OrgPermissions []string `json:"OrgPermissions"`

	// system permissions
	// Required: true
	SystemPermissions []string `json:"SystemPermissions"`

	// view permissions
	// Required: true
	ViewPermissions []string `json:"ViewPermissions"`
}

// Validate validates this api role
func (m *APIRole) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrgPermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemPermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewPermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIRole) validateColor(formats strfmt.Registry) error {

	if err := validate.Required("Color", "body", m.Color); err != nil {
		return err
	}

	return nil
}

func (m *APIRole) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *APIRole) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("DisplayName", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *APIRole) validateID(formats strfmt.Registry) error {

	if err := validate.Required("ID", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *APIRole) validateOrgPermissions(formats strfmt.Registry) error {

	if err := validate.Required("OrgPermissions", "body", m.OrgPermissions); err != nil {
		return err
	}

	return nil
}

func (m *APIRole) validateSystemPermissions(formats strfmt.Registry) error {

	if err := validate.Required("SystemPermissions", "body", m.SystemPermissions); err != nil {
		return err
	}

	return nil
}

func (m *APIRole) validateViewPermissions(formats strfmt.Registry) error {

	if err := validate.Required("ViewPermissions", "body", m.ViewPermissions); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this api role based on context it is used
func (m *APIRole) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *APIRole) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIRole) UnmarshalBinary(b []byte) error {
	var res APIRole
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
