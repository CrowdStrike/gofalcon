// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DevicecontrolapiReqUpdateBluetoothBaseV1 devicecontrolapi req update bluetooth base v1
//
// swagger:model devicecontrolapi.ReqUpdateBluetoothBaseV1
type DevicecontrolapiReqUpdateBluetoothBaseV1 struct {

	// Object for the Bluetooth end user notification
	// Required: true
	CustomEndUserNotifications *DevicecontrolapiBluetoothCustomNotifications `json:"custom_end_user_notifications"`

	// Determines if a notification will be shown to the end user (omit to keep current)
	// Required: true
	// Enum: [NOTIFY_USER SILENT]
	EndUserNotification *string `json:"end_user_notification"`

	// Enforcement for the Bluetooth policy (omit to keep current)
	// Required: true
	// Enum: [MONITOR_ONLY MONITOR_ENFORCE OFF]
	EnforcementMode *string `json:"enforcement_mode"`
}

// Validate validates this devicecontrolapi req update bluetooth base v1
func (m *DevicecontrolapiReqUpdateBluetoothBaseV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomEndUserNotifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndUserNotification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnforcementMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontrolapiReqUpdateBluetoothBaseV1) validateCustomEndUserNotifications(formats strfmt.Registry) error {

	if err := validate.Required("custom_end_user_notifications", "body", m.CustomEndUserNotifications); err != nil {
		return err
	}

	if m.CustomEndUserNotifications != nil {
		if err := m.CustomEndUserNotifications.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom_end_user_notifications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom_end_user_notifications")
			}
			return err
		}
	}

	return nil
}

var devicecontrolapiReqUpdateBluetoothBaseV1TypeEndUserNotificationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NOTIFY_USER","SILENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		devicecontrolapiReqUpdateBluetoothBaseV1TypeEndUserNotificationPropEnum = append(devicecontrolapiReqUpdateBluetoothBaseV1TypeEndUserNotificationPropEnum, v)
	}
}

const (

	// DevicecontrolapiReqUpdateBluetoothBaseV1EndUserNotificationNOTIFYUSER captures enum value "NOTIFY_USER"
	DevicecontrolapiReqUpdateBluetoothBaseV1EndUserNotificationNOTIFYUSER string = "NOTIFY_USER"

	// DevicecontrolapiReqUpdateBluetoothBaseV1EndUserNotificationSILENT captures enum value "SILENT"
	DevicecontrolapiReqUpdateBluetoothBaseV1EndUserNotificationSILENT string = "SILENT"
)

// prop value enum
func (m *DevicecontrolapiReqUpdateBluetoothBaseV1) validateEndUserNotificationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, devicecontrolapiReqUpdateBluetoothBaseV1TypeEndUserNotificationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DevicecontrolapiReqUpdateBluetoothBaseV1) validateEndUserNotification(formats strfmt.Registry) error {

	if err := validate.Required("end_user_notification", "body", m.EndUserNotification); err != nil {
		return err
	}

	// value enum
	if err := m.validateEndUserNotificationEnum("end_user_notification", "body", *m.EndUserNotification); err != nil {
		return err
	}

	return nil
}

var devicecontrolapiReqUpdateBluetoothBaseV1TypeEnforcementModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MONITOR_ONLY","MONITOR_ENFORCE","OFF"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		devicecontrolapiReqUpdateBluetoothBaseV1TypeEnforcementModePropEnum = append(devicecontrolapiReqUpdateBluetoothBaseV1TypeEnforcementModePropEnum, v)
	}
}

const (

	// DevicecontrolapiReqUpdateBluetoothBaseV1EnforcementModeMONITORONLY captures enum value "MONITOR_ONLY"
	DevicecontrolapiReqUpdateBluetoothBaseV1EnforcementModeMONITORONLY string = "MONITOR_ONLY"

	// DevicecontrolapiReqUpdateBluetoothBaseV1EnforcementModeMONITORENFORCE captures enum value "MONITOR_ENFORCE"
	DevicecontrolapiReqUpdateBluetoothBaseV1EnforcementModeMONITORENFORCE string = "MONITOR_ENFORCE"

	// DevicecontrolapiReqUpdateBluetoothBaseV1EnforcementModeOFF captures enum value "OFF"
	DevicecontrolapiReqUpdateBluetoothBaseV1EnforcementModeOFF string = "OFF"
)

// prop value enum
func (m *DevicecontrolapiReqUpdateBluetoothBaseV1) validateEnforcementModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, devicecontrolapiReqUpdateBluetoothBaseV1TypeEnforcementModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DevicecontrolapiReqUpdateBluetoothBaseV1) validateEnforcementMode(formats strfmt.Registry) error {

	if err := validate.Required("enforcement_mode", "body", m.EnforcementMode); err != nil {
		return err
	}

	// value enum
	if err := m.validateEnforcementModeEnum("enforcement_mode", "body", *m.EnforcementMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this devicecontrolapi req update bluetooth base v1 based on the context it is used
func (m *DevicecontrolapiReqUpdateBluetoothBaseV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomEndUserNotifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontrolapiReqUpdateBluetoothBaseV1) contextValidateCustomEndUserNotifications(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomEndUserNotifications != nil {

		if err := m.CustomEndUserNotifications.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom_end_user_notifications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom_end_user_notifications")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DevicecontrolapiReqUpdateBluetoothBaseV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevicecontrolapiReqUpdateBluetoothBaseV1) UnmarshalBinary(b []byte) error {
	var res DevicecontrolapiReqUpdateBluetoothBaseV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
