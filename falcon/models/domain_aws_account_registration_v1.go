// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainAwsAccountRegistrationV1 domain aws account registration v1
//
// swagger:model domain.AwsAccountRegistrationV1
type DomainAwsAccountRegistrationV1 struct {

	// account id
	AccountID string `json:"account_id,omitempty"`

	// account name
	AccountName string `json:"account_name,omitempty"`

	// account structure
	AccountStructure string `json:"account_structure,omitempty"`

	// account type
	AccountType string `json:"account_type,omitempty"`

	// aws permissions status
	AwsPermissionsStatus []*DomainPermission `json:"aws_permissions_status"`

	// behavior assessment enabled
	// Required: true
	BehaviorAssessmentEnabled *bool `json:"behavior_assessment_enabled"`

	// cloudformation stack arn
	CloudformationStackArn string `json:"cloudformation_stack_arn,omitempty"`

	// cloudformation update url
	CloudformationUpdateURL string `json:"cloudformation_update_url,omitempty"`

	// cloudformation url
	CloudformationURL string `json:"cloudformation_url,omitempty"`

	// conditions
	Conditions []*DomainCondition `json:"conditions"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// csp events
	CspEvents bool `json:"csp_events,omitempty"`

	// custom role name
	CustomRoleName string `json:"custom_role_name,omitempty"`

	// deployment method
	DeploymentMethod string `json:"deployment_method,omitempty"`

	// dspm enabled
	// Required: true
	DspmEnabled *bool `json:"dspm_enabled"`

	// dspm regions
	DspmRegions []string `json:"dspm_regions"`

	// dspm role arn
	DspmRoleArn string `json:"dspm_role_arn,omitempty"`

	// falcon client cs generated
	FalconClientCsGenerated bool `json:"falcon_client_cs_generated,omitempty"`

	// falcon client id
	FalconClientID string `json:"falcon_client_id,omitempty"`

	// falcon client scopes
	FalconClientScopes []string `json:"falcon_client_scopes"`

	// iam role arn
	IamRoleArn string `json:"iam_role_arn,omitempty"`

	// idp enabled
	// Required: true
	IdpEnabled *bool `json:"idp_enabled"`

	// ioa regions
	IoaRegions []string `json:"ioa_regions"`

	// is cspm lite
	IsCspmLite bool `json:"is_cspm_lite,omitempty"`

	// is delegated admin
	IsDelegatedAdmin bool `json:"is_delegated_admin,omitempty"`

	// is master
	IsMaster bool `json:"is_master,omitempty"`

	// organization id
	OrganizationID string `json:"organization_id,omitempty"`

	// organization management account id
	OrganizationManagementAccountID string `json:"organization_management_account_id,omitempty"`

	// organizational units
	OrganizationalUnits string `json:"organizational_units,omitempty"`

	// products
	Products map[string]DomainFeatures `json:"products,omitempty"`

	// reader role arn
	ReaderRoleArn string `json:"reader_role_arn,omitempty"`

	// registration detailed status
	RegistrationDetailedStatus interface{} `json:"registration_detailed_status,omitempty"`

	// registration status
	RegistrationStatus string `json:"registration_status,omitempty"`

	// resource name prefix
	ResourceNamePrefix string `json:"resource_name_prefix,omitempty"`

	// resource name suffix
	ResourceNameSuffix string `json:"resource_name_suffix,omitempty"`

	// root account id
	RootAccountID string `json:"root_account_id,omitempty"`

	// s3 url
	S3URL string `json:"s3_url,omitempty"`

	// sensor management enabled
	// Required: true
	SensorManagementEnabled *bool `json:"sensor_management_enabled"`

	// settings
	Settings map[string]string `json:"settings,omitempty"`

	// status
	// Required: true
	Status *string `json:"status"`

	// tags
	Tags map[string]string `json:"tags,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// use existing cloudtrail
	UseExistingCloudtrail bool `json:"use_existing_cloudtrail,omitempty"`
}

// Validate validates this domain aws account registration v1
func (m *DomainAwsAccountRegistrationV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsPermissionsStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBehaviorAssessmentEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDspmEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdpEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSensorManagementEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAwsAccountRegistrationV1) validateAwsPermissionsStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsPermissionsStatus) { // not required
		return nil
	}

	for i := 0; i < len(m.AwsPermissionsStatus); i++ {
		if swag.IsZero(m.AwsPermissionsStatus[i]) { // not required
			continue
		}

		if m.AwsPermissionsStatus[i] != nil {
			if err := m.AwsPermissionsStatus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aws_permissions_status" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("aws_permissions_status" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainAwsAccountRegistrationV1) validateBehaviorAssessmentEnabled(formats strfmt.Registry) error {

	if err := validate.Required("behavior_assessment_enabled", "body", m.BehaviorAssessmentEnabled); err != nil {
		return err
	}

	return nil
}

func (m *DomainAwsAccountRegistrationV1) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainAwsAccountRegistrationV1) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainAwsAccountRegistrationV1) validateDspmEnabled(formats strfmt.Registry) error {

	if err := validate.Required("dspm_enabled", "body", m.DspmEnabled); err != nil {
		return err
	}

	return nil
}

func (m *DomainAwsAccountRegistrationV1) validateIdpEnabled(formats strfmt.Registry) error {

	if err := validate.Required("idp_enabled", "body", m.IdpEnabled); err != nil {
		return err
	}

	return nil
}

func (m *DomainAwsAccountRegistrationV1) validateProducts(formats strfmt.Registry) error {
	if swag.IsZero(m.Products) { // not required
		return nil
	}

	for k := range m.Products {

		if val, ok := m.Products[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *DomainAwsAccountRegistrationV1) validateSensorManagementEnabled(formats strfmt.Registry) error {

	if err := validate.Required("sensor_management_enabled", "body", m.SensorManagementEnabled); err != nil {
		return err
	}

	return nil
}

func (m *DomainAwsAccountRegistrationV1) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *DomainAwsAccountRegistrationV1) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this domain aws account registration v1 based on the context it is used
func (m *DomainAwsAccountRegistrationV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsPermissionsStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAwsAccountRegistrationV1) contextValidateAwsPermissionsStatus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AwsPermissionsStatus); i++ {

		if m.AwsPermissionsStatus[i] != nil {

			if swag.IsZero(m.AwsPermissionsStatus[i]) { // not required
				return nil
			}

			if err := m.AwsPermissionsStatus[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aws_permissions_status" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("aws_permissions_status" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainAwsAccountRegistrationV1) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {

			if swag.IsZero(m.Conditions[i]) { // not required
				return nil
			}

			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainAwsAccountRegistrationV1) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Products {

		if val, ok := m.Products[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainAwsAccountRegistrationV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainAwsAccountRegistrationV1) UnmarshalBinary(b []byte) error {
	var res DomainAwsAccountRegistrationV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
