// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PolicymanagerExternalRuleObjectList policymanager external rule object list
//
// swagger:model policymanager.ExternalRuleObjectList
type PolicymanagerExternalRuleObjectList struct {

	// add
	Add []*PolicymanagerExternalRule `json:"add"`

	// precedence
	Precedence []string `json:"precedence"`

	// remove
	Remove []string `json:"remove"`

	// value
	Value []*PolicymanagerExternalRule `json:"value"`
}

// Validate validates this policymanager external rule object list
func (m *PolicymanagerExternalRuleObjectList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicymanagerExternalRuleObjectList) validateAdd(formats strfmt.Registry) error {
	if swag.IsZero(m.Add) { // not required
		return nil
	}

	for i := 0; i < len(m.Add); i++ {
		if swag.IsZero(m.Add[i]) { // not required
			continue
		}

		if m.Add[i] != nil {
			if err := m.Add[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("add" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("add" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicymanagerExternalRuleObjectList) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	for i := 0; i < len(m.Value); i++ {
		if swag.IsZero(m.Value[i]) { // not required
			continue
		}

		if m.Value[i] != nil {
			if err := m.Value[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("value" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("value" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this policymanager external rule object list based on the context it is used
func (m *PolicymanagerExternalRuleObjectList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicymanagerExternalRuleObjectList) contextValidateAdd(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Add); i++ {

		if m.Add[i] != nil {

			if swag.IsZero(m.Add[i]) { // not required
				return nil
			}

			if err := m.Add[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("add" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("add" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicymanagerExternalRuleObjectList) contextValidateValue(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Value); i++ {

		if m.Value[i] != nil {

			if swag.IsZero(m.Value[i]) { // not required
				return nil
			}

			if err := m.Value[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("value" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("value" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicymanagerExternalRuleObjectList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicymanagerExternalRuleObjectList) UnmarshalBinary(b []byte) error {
	var res PolicymanagerExternalRuleObjectList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
