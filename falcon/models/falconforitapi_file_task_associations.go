// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FalconforitapiFileTaskAssociations falconforitapi file task associations
//
// swagger:model falconforitapi.FileTaskAssociations
type FalconforitapiFileTaskAssociations struct {

	// cumulative count
	// Required: true
	CumulativeCount *int64 `json:"cumulative_count"`

	// not shared count
	// Required: true
	NotSharedCount *int64 `json:"not_shared_count"`

	// tasks
	// Required: true
	Tasks []*FalconforitapiFileTaskAssociation `json:"tasks"`
}

// Validate validates this falconforitapi file task associations
func (m *FalconforitapiFileTaskAssociations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCumulativeCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotSharedCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTasks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiFileTaskAssociations) validateCumulativeCount(formats strfmt.Registry) error {

	if err := validate.Required("cumulative_count", "body", m.CumulativeCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiFileTaskAssociations) validateNotSharedCount(formats strfmt.Registry) error {

	if err := validate.Required("not_shared_count", "body", m.NotSharedCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiFileTaskAssociations) validateTasks(formats strfmt.Registry) error {

	if err := validate.Required("tasks", "body", m.Tasks); err != nil {
		return err
	}

	for i := 0; i < len(m.Tasks); i++ {
		if swag.IsZero(m.Tasks[i]) { // not required
			continue
		}

		if m.Tasks[i] != nil {
			if err := m.Tasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tasks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this falconforitapi file task associations based on the context it is used
func (m *FalconforitapiFileTaskAssociations) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTasks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiFileTaskAssociations) contextValidateTasks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tasks); i++ {

		if m.Tasks[i] != nil {

			if swag.IsZero(m.Tasks[i]) { // not required
				return nil
			}

			if err := m.Tasks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tasks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FalconforitapiFileTaskAssociations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FalconforitapiFileTaskAssociations) UnmarshalBinary(b []byte) error {
	var res FalconforitapiFileTaskAssociations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
