// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelUserInputViewModel model user input view model
//
// swagger:model model.UserInputViewModel
type ModelUserInputViewModel struct {

	// if not empty, only listed inputs are allowed
	// Required: true
	AllowedInputs []string `json:"allowed_inputs"`

	// if not empty, only listed responders are allowed to provide input
	// Required: true
	AllowedResponders []string `json:"allowed_responders"`

	// whether or not the user input is completed yet
	// Required: true
	Completed *bool `json:"completed"`

	// time at which the user input was modified
	// Required: true
	// Format: date-time
	CompletedAt *strfmt.DateTime `json:"completed_at"`

	// time at which the user input was created
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// ID of the user input
	// Required: true
	ID *string `json:"id"`

	// input provided by a responder user
	// Required: true
	Input *string `json:"input"`

	// note added to user input at the time an input is provided
	// Required: true
	Note *string `json:"note"`

	// user responding to the user input request
	// Required: true
	Responder *string `json:"responder"`

	// time after which the user input may be expired and no longer actionable
	// Required: true
	// Format: date-time
	TimeoutAt *strfmt.DateTime `json:"timeout_at"`
}

// Validate validates this model user input view model
func (m *ModelUserInputViewModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedInputs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllowedResponders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeoutAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelUserInputViewModel) validateAllowedInputs(formats strfmt.Registry) error {

	if err := validate.Required("allowed_inputs", "body", m.AllowedInputs); err != nil {
		return err
	}

	return nil
}

func (m *ModelUserInputViewModel) validateAllowedResponders(formats strfmt.Registry) error {

	if err := validate.Required("allowed_responders", "body", m.AllowedResponders); err != nil {
		return err
	}

	return nil
}

func (m *ModelUserInputViewModel) validateCompleted(formats strfmt.Registry) error {

	if err := validate.Required("completed", "body", m.Completed); err != nil {
		return err
	}

	return nil
}

func (m *ModelUserInputViewModel) validateCompletedAt(formats strfmt.Registry) error {

	if err := validate.Required("completed_at", "body", m.CompletedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("completed_at", "body", "date-time", m.CompletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ModelUserInputViewModel) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ModelUserInputViewModel) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ModelUserInputViewModel) validateInput(formats strfmt.Registry) error {

	if err := validate.Required("input", "body", m.Input); err != nil {
		return err
	}

	return nil
}

func (m *ModelUserInputViewModel) validateNote(formats strfmt.Registry) error {

	if err := validate.Required("note", "body", m.Note); err != nil {
		return err
	}

	return nil
}

func (m *ModelUserInputViewModel) validateResponder(formats strfmt.Registry) error {

	if err := validate.Required("responder", "body", m.Responder); err != nil {
		return err
	}

	return nil
}

func (m *ModelUserInputViewModel) validateTimeoutAt(formats strfmt.Registry) error {

	if err := validate.Required("timeout_at", "body", m.TimeoutAt); err != nil {
		return err
	}

	if err := validate.FormatOf("timeout_at", "body", "date-time", m.TimeoutAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this model user input view model based on context it is used
func (m *ModelUserInputViewModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelUserInputViewModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelUserInputViewModel) UnmarshalBinary(b []byte) error {
	var res ModelUserInputViewModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
