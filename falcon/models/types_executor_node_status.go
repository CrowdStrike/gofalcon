// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TypesExecutorNodeStatus types executor node status
//
// swagger:model types.ExecutorNodeStatus
type TypesExecutorNodeStatus struct {

	// state
	// Required: true
	State *int32 `json:"State"`

	// state last updated
	// Required: true
	StateLastUpdated *int64 `json:"StateLastUpdated"`

	// state reason
	// Required: true
	StateReason *int32 `json:"StateReason"`
}

// Validate validates this types executor node status
func (m *TypesExecutorNodeStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesExecutorNodeStatus) validateState(formats strfmt.Registry) error {

	if err := validate.Required("State", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *TypesExecutorNodeStatus) validateStateLastUpdated(formats strfmt.Registry) error {

	if err := validate.Required("StateLastUpdated", "body", m.StateLastUpdated); err != nil {
		return err
	}

	return nil
}

func (m *TypesExecutorNodeStatus) validateStateReason(formats strfmt.Registry) error {

	if err := validate.Required("StateReason", "body", m.StateReason); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this types executor node status based on context it is used
func (m *TypesExecutorNodeStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TypesExecutorNodeStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesExecutorNodeStatus) UnmarshalBinary(b []byte) error {
	var res TypesExecutorNodeStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
