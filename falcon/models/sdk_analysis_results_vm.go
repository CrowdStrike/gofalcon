// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SdkAnalysisResultsVM sdk analysis results VM
//
// swagger:model sdk.AnalysisResultsVM
type SdkAnalysisResultsVM struct {

	// alerts
	// Required: true
	Alerts *SdkAnalysisResultsAlertsVM `json:"alerts"`

	// cloud assets
	// Required: true
	CloudAssets *SdkAnalysisResultsCloudAssetsVM `json:"cloud_assets"`

	// events
	// Required: true
	Events *SdkAnalysisResultsEventsVM `json:"events"`

	// files
	// Required: true
	Files *SdkAnalysisResultsFilesVM `json:"files"`

	// hosts
	// Required: true
	Hosts *SdkAnalysisResultsHostsVM `json:"hosts"`

	// leads
	// Required: true
	Leads *SdkAnalysisResultsLeadsVM `json:"leads"`

	// users
	// Required: true
	Users *SdkAnalysisResultsUsersVM `json:"users"`
}

// Validate validates this sdk analysis results VM
func (m *SdkAnalysisResultsVM) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlerts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudAssets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLeads(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SdkAnalysisResultsVM) validateAlerts(formats strfmt.Registry) error {

	if err := validate.Required("alerts", "body", m.Alerts); err != nil {
		return err
	}

	if m.Alerts != nil {
		if err := m.Alerts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alerts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alerts")
			}
			return err
		}
	}

	return nil
}

func (m *SdkAnalysisResultsVM) validateCloudAssets(formats strfmt.Registry) error {

	if err := validate.Required("cloud_assets", "body", m.CloudAssets); err != nil {
		return err
	}

	if m.CloudAssets != nil {
		if err := m.CloudAssets.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud_assets")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloud_assets")
			}
			return err
		}
	}

	return nil
}

func (m *SdkAnalysisResultsVM) validateEvents(formats strfmt.Registry) error {

	if err := validate.Required("events", "body", m.Events); err != nil {
		return err
	}

	if m.Events != nil {
		if err := m.Events.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("events")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("events")
			}
			return err
		}
	}

	return nil
}

func (m *SdkAnalysisResultsVM) validateFiles(formats strfmt.Registry) error {

	if err := validate.Required("files", "body", m.Files); err != nil {
		return err
	}

	if m.Files != nil {
		if err := m.Files.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("files")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("files")
			}
			return err
		}
	}

	return nil
}

func (m *SdkAnalysisResultsVM) validateHosts(formats strfmt.Registry) error {

	if err := validate.Required("hosts", "body", m.Hosts); err != nil {
		return err
	}

	if m.Hosts != nil {
		if err := m.Hosts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts")
			}
			return err
		}
	}

	return nil
}

func (m *SdkAnalysisResultsVM) validateLeads(formats strfmt.Registry) error {

	if err := validate.Required("leads", "body", m.Leads); err != nil {
		return err
	}

	if m.Leads != nil {
		if err := m.Leads.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("leads")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("leads")
			}
			return err
		}
	}

	return nil
}

func (m *SdkAnalysisResultsVM) validateUsers(formats strfmt.Registry) error {

	if err := validate.Required("users", "body", m.Users); err != nil {
		return err
	}

	if m.Users != nil {
		if err := m.Users.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("users")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("users")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sdk analysis results VM based on the context it is used
func (m *SdkAnalysisResultsVM) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlerts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudAssets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLeads(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SdkAnalysisResultsVM) contextValidateAlerts(ctx context.Context, formats strfmt.Registry) error {

	if m.Alerts != nil {

		if err := m.Alerts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alerts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alerts")
			}
			return err
		}
	}

	return nil
}

func (m *SdkAnalysisResultsVM) contextValidateCloudAssets(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudAssets != nil {

		if err := m.CloudAssets.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud_assets")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloud_assets")
			}
			return err
		}
	}

	return nil
}

func (m *SdkAnalysisResultsVM) contextValidateEvents(ctx context.Context, formats strfmt.Registry) error {

	if m.Events != nil {

		if err := m.Events.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("events")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("events")
			}
			return err
		}
	}

	return nil
}

func (m *SdkAnalysisResultsVM) contextValidateFiles(ctx context.Context, formats strfmt.Registry) error {

	if m.Files != nil {

		if err := m.Files.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("files")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("files")
			}
			return err
		}
	}

	return nil
}

func (m *SdkAnalysisResultsVM) contextValidateHosts(ctx context.Context, formats strfmt.Registry) error {

	if m.Hosts != nil {

		if err := m.Hosts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts")
			}
			return err
		}
	}

	return nil
}

func (m *SdkAnalysisResultsVM) contextValidateLeads(ctx context.Context, formats strfmt.Registry) error {

	if m.Leads != nil {

		if err := m.Leads.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("leads")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("leads")
			}
			return err
		}
	}

	return nil
}

func (m *SdkAnalysisResultsVM) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	if m.Users != nil {

		if err := m.Users.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("users")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("users")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SdkAnalysisResultsVM) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SdkAnalysisResultsVM) UnmarshalBinary(b []byte) error {
	var res SdkAnalysisResultsVM
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
