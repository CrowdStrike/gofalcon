// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EvaluationsRule evaluations rule
//
// swagger:model evaluations.Rule
type EvaluationsRule struct {

	// alert logic
	AlertLogic string `json:"alert_logic,omitempty"`

	// controls
	Controls []*PolicyframeworkControl `json:"controls"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// origin
	Origin string `json:"origin,omitempty"`

	// override
	Override *PolicyframeworkRuleOverride `json:"override,omitempty"`

	// policy
	Policy *PolicyframeworkPolicyMetadata `json:"policy,omitempty"`

	// policy id
	PolicyID int32 `json:"policy_id,omitempty"`

	// remediation
	Remediation string `json:"remediation,omitempty"`

	// rule group
	RuleGroup []*PolicyframeworkRuleGroupMetadata `json:"rule_group"`

	// threat
	Threat *EvaluationsThreat `json:"threat,omitempty"`
}

// Validate validates this evaluations rule
func (m *EvaluationsRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverride(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThreat(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvaluationsRule) validateControls(formats strfmt.Registry) error {
	if swag.IsZero(m.Controls) { // not required
		return nil
	}

	for i := 0; i < len(m.Controls); i++ {
		if swag.IsZero(m.Controls[i]) { // not required
			continue
		}

		if m.Controls[i] != nil {
			if err := m.Controls[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controls" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EvaluationsRule) validateOverride(formats strfmt.Registry) error {
	if swag.IsZero(m.Override) { // not required
		return nil
	}

	if m.Override != nil {
		if err := m.Override.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("override")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("override")
			}
			return err
		}
	}

	return nil
}

func (m *EvaluationsRule) validatePolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.Policy) { // not required
		return nil
	}

	if m.Policy != nil {
		if err := m.Policy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy")
			}
			return err
		}
	}

	return nil
}

func (m *EvaluationsRule) validateRuleGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.RuleGroup) { // not required
		return nil
	}

	for i := 0; i < len(m.RuleGroup); i++ {
		if swag.IsZero(m.RuleGroup[i]) { // not required
			continue
		}

		if m.RuleGroup[i] != nil {
			if err := m.RuleGroup[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rule_group" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rule_group" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EvaluationsRule) validateThreat(formats strfmt.Registry) error {
	if swag.IsZero(m.Threat) { // not required
		return nil
	}

	if m.Threat != nil {
		if err := m.Threat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threat")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this evaluations rule based on the context it is used
func (m *EvaluationsRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateControls(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverride(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRuleGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThreat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvaluationsRule) contextValidateControls(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Controls); i++ {

		if m.Controls[i] != nil {

			if swag.IsZero(m.Controls[i]) { // not required
				return nil
			}

			if err := m.Controls[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controls" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EvaluationsRule) contextValidateOverride(ctx context.Context, formats strfmt.Registry) error {

	if m.Override != nil {

		if swag.IsZero(m.Override) { // not required
			return nil
		}

		if err := m.Override.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("override")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("override")
			}
			return err
		}
	}

	return nil
}

func (m *EvaluationsRule) contextValidatePolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.Policy != nil {

		if swag.IsZero(m.Policy) { // not required
			return nil
		}

		if err := m.Policy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy")
			}
			return err
		}
	}

	return nil
}

func (m *EvaluationsRule) contextValidateRuleGroup(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RuleGroup); i++ {

		if m.RuleGroup[i] != nil {

			if swag.IsZero(m.RuleGroup[i]) { // not required
				return nil
			}

			if err := m.RuleGroup[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rule_group" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rule_group" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EvaluationsRule) contextValidateThreat(ctx context.Context, formats strfmt.Registry) error {

	if m.Threat != nil {

		if swag.IsZero(m.Threat) { // not required
			return nil
		}

		if err := m.Threat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threat")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EvaluationsRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EvaluationsRule) UnmarshalBinary(b []byte) error {
	var res EvaluationsRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
