// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Rule rule
//
// swagger:model .rule
type Rule struct {

	// cloud provider
	// Required: true
	CloudProvider *string `json:"cloud_provider"`

	// platform
	// Required: true
	Platform *string `json:"platform"`

	// rule category
	// Required: true
	RuleCategory *string `json:"rule_category"`

	// rule name
	// Required: true
	RuleName *string `json:"rule_name"`

	// rule type
	// Required: true
	RuleType *string `json:"rule_type"`

	// rule uuid
	// Required: true
	RuleUUID *string `json:"rule_uuid"`

	// service
	// Required: true
	Service *string `json:"service"`

	// severity
	// Required: true
	Severity *int32 `json:"severity"`
}

// Validate validates this rule
func (m *Rule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Rule) validateCloudProvider(formats strfmt.Registry) error {

	if err := validate.Required("cloud_provider", "body", m.CloudProvider); err != nil {
		return err
	}

	return nil
}

func (m *Rule) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

func (m *Rule) validateRuleCategory(formats strfmt.Registry) error {

	if err := validate.Required("rule_category", "body", m.RuleCategory); err != nil {
		return err
	}

	return nil
}

func (m *Rule) validateRuleName(formats strfmt.Registry) error {

	if err := validate.Required("rule_name", "body", m.RuleName); err != nil {
		return err
	}

	return nil
}

func (m *Rule) validateRuleType(formats strfmt.Registry) error {

	if err := validate.Required("rule_type", "body", m.RuleType); err != nil {
		return err
	}

	return nil
}

func (m *Rule) validateRuleUUID(formats strfmt.Registry) error {

	if err := validate.Required("rule_uuid", "body", m.RuleUUID); err != nil {
		return err
	}

	return nil
}

func (m *Rule) validateService(formats strfmt.Registry) error {

	if err := validate.Required("service", "body", m.Service); err != nil {
		return err
	}

	return nil
}

func (m *Rule) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this rule based on context it is used
func (m *Rule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Rule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Rule) UnmarshalBinary(b []byte) error {
	var res Rule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
