// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsAPIVulnByImageCount models API vuln by image count
//
// swagger:model models.APIVulnByImageCount
type ModelsAPIVulnByImageCount struct {

	// cve id
	// Required: true
	CveID *string `json:"cve_id"`

	// images impacted
	// Required: true
	ImagesImpacted *int64 `json:"images_impacted"`

	// product
	// Required: true
	Product []string `json:"product"`

	// severity
	// Required: true
	Severity *string `json:"severity"`
}

// Validate validates this models API vuln by image count
func (m *ModelsAPIVulnByImageCount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCveID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImagesImpacted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIVulnByImageCount) validateCveID(formats strfmt.Registry) error {

	if err := validate.Required("cve_id", "body", m.CveID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnByImageCount) validateImagesImpacted(formats strfmt.Registry) error {

	if err := validate.Required("images_impacted", "body", m.ImagesImpacted); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnByImageCount) validateProduct(formats strfmt.Registry) error {

	if err := validate.Required("product", "body", m.Product); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnByImageCount) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models API vuln by image count based on context it is used
func (m *ModelsAPIVulnByImageCount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsAPIVulnByImageCount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsAPIVulnByImageCount) UnmarshalBinary(b []byte) error {
	var res ModelsAPIVulnByImageCount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
