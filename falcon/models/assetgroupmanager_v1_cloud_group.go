// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssetgroupmanagerV1CloudGroup assetgroupmanager v1 cloud group
//
// swagger:model assetgroupmanager.v1.CloudGroup
type AssetgroupmanagerV1CloudGroup struct {

	// business impact
	BusinessImpact string `json:"business_impact,omitempty"`

	// business unit
	BusinessUnit string `json:"business_unit,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// created by
	CreatedBy string `json:"created_by,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// environment
	Environment string `json:"environment,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// owners
	Owners []string `json:"owners"`

	// selectors
	Selectors *AssetgroupmanagerV1CloudGroupSelectors `json:"selectors,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// updated by
	UpdatedBy string `json:"updated_by,omitempty"`
}

// Validate validates this assetgroupmanager v1 cloud group
func (m *AssetgroupmanagerV1CloudGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetgroupmanagerV1CloudGroup) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AssetgroupmanagerV1CloudGroup) validateSelectors(formats strfmt.Registry) error {
	if swag.IsZero(m.Selectors) { // not required
		return nil
	}

	if m.Selectors != nil {
		if err := m.Selectors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selectors")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("selectors")
			}
			return err
		}
	}

	return nil
}

func (m *AssetgroupmanagerV1CloudGroup) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this assetgroupmanager v1 cloud group based on the context it is used
func (m *AssetgroupmanagerV1CloudGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelectors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetgroupmanagerV1CloudGroup) contextValidateSelectors(ctx context.Context, formats strfmt.Registry) error {

	if m.Selectors != nil {

		if swag.IsZero(m.Selectors) { // not required
			return nil
		}

		if err := m.Selectors.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selectors")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("selectors")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetgroupmanagerV1CloudGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetgroupmanagerV1CloudGroup) UnmarshalBinary(b []byte) error {
	var res AssetgroupmanagerV1CloudGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
