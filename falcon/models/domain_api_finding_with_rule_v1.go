// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DomainAPIFindingWithRuleV1 domain API finding with rule v1
//
// swagger:model domain.APIFindingWithRuleV1
type DomainAPIFindingWithRuleV1 struct {

	// Example values: NOT_AVAILABLE, AVAILABLE, DISABLE_RULE, UNSUPPORTED_RULE, OVERRIDE_STATUS
	EvaluationLogicType string `json:"evaluation_logic_type,omitempty"`

	// evaluation reason
	EvaluationReason string `json:"evaluation_reason,omitempty"`

	// host id
	HostID string `json:"host_id,omitempty"`

	// rule
	Rule *DomainAPIFindingRuleV1 `json:"rule,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// status since timestamp
	StatusSinceTimestamp string `json:"status_since_timestamp,omitempty"`
}

// Validate validates this domain API finding with rule v1
func (m *DomainAPIFindingWithRuleV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAPIFindingWithRuleV1) validateRule(formats strfmt.Registry) error {
	if swag.IsZero(m.Rule) { // not required
		return nil
	}

	if m.Rule != nil {
		if err := m.Rule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this domain API finding with rule v1 based on the context it is used
func (m *DomainAPIFindingWithRuleV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAPIFindingWithRuleV1) contextValidateRule(ctx context.Context, formats strfmt.Registry) error {

	if m.Rule != nil {

		if swag.IsZero(m.Rule) { // not required
			return nil
		}

		if err := m.Rule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainAPIFindingWithRuleV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainAPIFindingWithRuleV1) UnmarshalBinary(b []byte) error {
	var res DomainAPIFindingWithRuleV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
