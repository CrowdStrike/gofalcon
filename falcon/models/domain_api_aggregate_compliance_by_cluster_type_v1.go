// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainAPIAggregateComplianceByClusterTypeV1 domain API aggregate compliance by cluster type v1
//
// swagger:model domain.APIAggregateComplianceByClusterTypeV1
type DomainAPIAggregateComplianceByClusterTypeV1 struct {

	// cluster type
	// Required: true
	ClusterType *string `json:"cluster_type"`

	// failed rules count
	// Required: true
	FailedRulesCount *int32 `json:"failed_rules_count"`

	// passed rules count
	// Required: true
	PassedRulesCount *int32 `json:"passed_rules_count"`

	// percentage of passed rules
	// Required: true
	PercentageOfPassedRules *float64 `json:"percentage_of_passed_rules"`

	// rule status list
	// Required: true
	RuleStatusList []*DomainAPIAssetComplianceFindingV1 `json:"rule_status_list"`

	// total rules count
	// Required: true
	TotalRulesCount *int32 `json:"total_rules_count"`
}

// Validate validates this domain API aggregate compliance by cluster type v1
func (m *DomainAPIAggregateComplianceByClusterTypeV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedRulesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassedRulesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePercentageOfPassedRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleStatusList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalRulesCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAPIAggregateComplianceByClusterTypeV1) validateClusterType(formats strfmt.Registry) error {

	if err := validate.Required("cluster_type", "body", m.ClusterType); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateComplianceByClusterTypeV1) validateFailedRulesCount(formats strfmt.Registry) error {

	if err := validate.Required("failed_rules_count", "body", m.FailedRulesCount); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateComplianceByClusterTypeV1) validatePassedRulesCount(formats strfmt.Registry) error {

	if err := validate.Required("passed_rules_count", "body", m.PassedRulesCount); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateComplianceByClusterTypeV1) validatePercentageOfPassedRules(formats strfmt.Registry) error {

	if err := validate.Required("percentage_of_passed_rules", "body", m.PercentageOfPassedRules); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateComplianceByClusterTypeV1) validateRuleStatusList(formats strfmt.Registry) error {

	if err := validate.Required("rule_status_list", "body", m.RuleStatusList); err != nil {
		return err
	}

	for i := 0; i < len(m.RuleStatusList); i++ {
		if swag.IsZero(m.RuleStatusList[i]) { // not required
			continue
		}

		if m.RuleStatusList[i] != nil {
			if err := m.RuleStatusList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rule_status_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rule_status_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainAPIAggregateComplianceByClusterTypeV1) validateTotalRulesCount(formats strfmt.Registry) error {

	if err := validate.Required("total_rules_count", "body", m.TotalRulesCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this domain API aggregate compliance by cluster type v1 based on the context it is used
func (m *DomainAPIAggregateComplianceByClusterTypeV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRuleStatusList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAPIAggregateComplianceByClusterTypeV1) contextValidateRuleStatusList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RuleStatusList); i++ {

		if m.RuleStatusList[i] != nil {

			if swag.IsZero(m.RuleStatusList[i]) { // not required
				return nil
			}

			if err := m.RuleStatusList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rule_status_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rule_status_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainAPIAggregateComplianceByClusterTypeV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainAPIAggregateComplianceByClusterTypeV1) UnmarshalBinary(b []byte) error {
	var res DomainAPIAggregateComplianceByClusterTypeV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
