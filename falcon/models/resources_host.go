// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResourcesHost resources host
//
// swagger:model resources.Host
type ResourcesHost struct {

	// aid
	Aid string `json:"aid,omitempty"`

	// apps
	Apps []string `json:"apps"`

	// cve ids
	CveIds []string `json:"cve_ids"`

	// exprt ratings
	ExprtRatings []string `json:"exprt_ratings"`

	// managed by
	ManagedBy string `json:"managed_by,omitempty"`

	// os build
	OsBuild string `json:"os_build,omitempty"`

	// os version
	OsVersion string `json:"os_version,omitempty"`

	// platform name
	PlatformName string `json:"platform_name,omitempty"`

	// platform os name
	PlatformOsName string `json:"platform_os_name,omitempty"`

	// platform os version
	PlatformOsVersion string `json:"platform_os_version,omitempty"`

	// recommendations
	Recommendations []string `json:"recommendations"`

	// sensor priority
	SensorPriority string `json:"sensor_priority,omitempty"`

	// snapshot detections
	SnapshotDetections []string `json:"snapshot_detections"`

	// ssm managed
	SsmManaged bool `json:"ssm_managed,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// vulnerabilities
	Vulnerabilities []*ResourcesVulnerability `json:"vulnerabilities"`

	// vulnerabilities count
	VulnerabilitiesCount int64 `json:"vulnerabilities_count,omitempty"`
}

// Validate validates this resources host
func (m *ResourcesHost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVulnerabilities(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourcesHost) validateVulnerabilities(formats strfmt.Registry) error {
	if swag.IsZero(m.Vulnerabilities) { // not required
		return nil
	}

	for i := 0; i < len(m.Vulnerabilities); i++ {
		if swag.IsZero(m.Vulnerabilities[i]) { // not required
			continue
		}

		if m.Vulnerabilities[i] != nil {
			if err := m.Vulnerabilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vulnerabilities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vulnerabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this resources host based on the context it is used
func (m *ResourcesHost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVulnerabilities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourcesHost) contextValidateVulnerabilities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vulnerabilities); i++ {

		if m.Vulnerabilities[i] != nil {

			if swag.IsZero(m.Vulnerabilities[i]) { // not required
				return nil
			}

			if err := m.Vulnerabilities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vulnerabilities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vulnerabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourcesHost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourcesHost) UnmarshalBinary(b []byte) error {
	var res ResourcesHost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
