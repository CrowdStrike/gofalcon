// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIFileTypeV1 api file type v1
//
// swagger:model api.FileTypeV1
type APIFileTypeV1 struct {

	// category id
	// Required: true
	CategoryID *string `json:"category_id"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// last updated
	// Format: date-time
	LastUpdated strfmt.DateTime `json:"last_updated,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// supported platforms
	// Required: true
	SupportedPlatforms []string `json:"supported_platforms"`

	// supports content inspection
	// Required: true
	SupportsContentInspection *bool `json:"supports_content_inspection"`

	// supports mip extraction
	// Required: true
	SupportsMipExtraction *bool `json:"supports_mip_extraction"`
}

// Validate validates this api file type v1
func (m *APIFileTypeV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategoryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedPlatforms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportsContentInspection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportsMipExtraction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIFileTypeV1) validateCategoryID(formats strfmt.Registry) error {

	if err := validate.Required("category_id", "body", m.CategoryID); err != nil {
		return err
	}

	return nil
}

func (m *APIFileTypeV1) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APIFileTypeV1) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *APIFileTypeV1) validateLastUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APIFileTypeV1) validateSupportedPlatforms(formats strfmt.Registry) error {

	if err := validate.Required("supported_platforms", "body", m.SupportedPlatforms); err != nil {
		return err
	}

	return nil
}

func (m *APIFileTypeV1) validateSupportsContentInspection(formats strfmt.Registry) error {

	if err := validate.Required("supports_content_inspection", "body", m.SupportsContentInspection); err != nil {
		return err
	}

	return nil
}

func (m *APIFileTypeV1) validateSupportsMipExtraction(formats strfmt.Registry) error {

	if err := validate.Required("supports_mip_extraction", "body", m.SupportsMipExtraction); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this api file type v1 based on context it is used
func (m *APIFileTypeV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *APIFileTypeV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIFileTypeV1) UnmarshalBinary(b []byte) error {
	var res APIFileTypeV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
