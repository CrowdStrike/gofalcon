// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainCIDPolicyAssignments domain c ID policy assignments
//
// swagger:model domain.CIDPolicyAssignments
type DomainCIDPolicyAssignments struct {

	// cid
	Cid string `json:"cid,omitempty"`

	// cloud service
	CloudService string `json:"cloud_service,omitempty"`

	// cloud service subtype
	CloudServiceSubtype string `json:"cloud_service_subtype,omitempty"`

	// default severity
	DefaultSeverity string `json:"default_severity,omitempty"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// name
	Name string `json:"name,omitempty"`

	// policy id
	PolicyID int32 `json:"policy_id,omitempty"`

	// policy severity
	PolicySeverity int32 `json:"policy_severity,omitempty"`

	// policy timestamp
	// Format: date-time
	PolicyTimestamp strfmt.DateTime `json:"policy_timestamp,omitempty"`

	// severity
	Severity string `json:"severity,omitempty"`
}

// Validate validates this domain c ID policy assignments
func (m *DomainCIDPolicyAssignments) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainCIDPolicyAssignments) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *DomainCIDPolicyAssignments) validatePolicyTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("policy_timestamp", "body", "date-time", m.PolicyTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain c ID policy assignments based on context it is used
func (m *DomainCIDPolicyAssignments) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainCIDPolicyAssignments) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainCIDPolicyAssignments) UnmarshalBinary(b []byte) error {
	var res DomainCIDPolicyAssignments
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
