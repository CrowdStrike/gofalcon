// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GraphMulti graph multi
//
// swagger:model graph.Multi
type GraphMulti struct {

	// Name of the field that contains the array in input data
	// Required: true
	ArrayField *string `json:"array_field"`

	// Display name of the field that contains the array in input data
	// Required: true
	ArrayFieldDisplayName *string `json:"array_field_display_name"`

	// If true will allow the workflow to continue execution even if some loop iterations fail or when there are no iterations to execute
	// Required: true
	ContinueOnPartialExecution *bool `json:"continue_on_partial_execution"`

	// Maximum number of iterations allowed in sub model
	// Required: true
	MaxIterationCount *int32 `json:"max_iteration_count"`

	// Indicates the loop will run sequentially
	Sequential bool `json:"sequential,omitempty"`
}

// Validate validates this graph multi
func (m *GraphMulti) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArrayField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArrayFieldDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContinueOnPartialExecution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxIterationCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphMulti) validateArrayField(formats strfmt.Registry) error {

	if err := validate.Required("array_field", "body", m.ArrayField); err != nil {
		return err
	}

	return nil
}

func (m *GraphMulti) validateArrayFieldDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("array_field_display_name", "body", m.ArrayFieldDisplayName); err != nil {
		return err
	}

	return nil
}

func (m *GraphMulti) validateContinueOnPartialExecution(formats strfmt.Registry) error {

	if err := validate.Required("continue_on_partial_execution", "body", m.ContinueOnPartialExecution); err != nil {
		return err
	}

	return nil
}

func (m *GraphMulti) validateMaxIterationCount(formats strfmt.Registry) error {

	if err := validate.Required("max_iteration_count", "body", m.MaxIterationCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this graph multi based on context it is used
func (m *GraphMulti) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GraphMulti) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GraphMulti) UnmarshalBinary(b []byte) error {
	var res GraphMulti
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
