// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItautomationTaskGroup itautomation task group
//
// swagger:model itautomation.TaskGroup
type ItautomationTaskGroup struct {

	// Access type of the group
	// Required: true
	// Enum: ["Public","Shared","Private"]
	AccessType *string `json:"access_type"`

	// Assigned user group IDs of the group, when access_type is Shared
	AssignedUserGroupIds []string `json:"assigned_user_group_ids"`

	// Assigned user IDs of the group, when access_type is Shared
	AssignedUserIds []string `json:"assigned_user_ids"`

	// created by
	// Required: true
	CreatedBy *string `json:"created_by"`

	// created time
	// Required: true
	// Format: date-time
	CreatedTime *strfmt.DateTime `json:"created_time"`

	// description
	// Required: true
	Description *string `json:"description"`

	// id
	// Required: true
	ID *string `json:"id"`

	// is preset
	// Required: true
	IsPreset *bool `json:"is_preset"`

	// modified by
	// Required: true
	ModifiedBy *string `json:"modified_by"`

	// modified time
	// Required: true
	// Format: date-time
	ModifiedTime *strfmt.DateTime `json:"modified_time"`

	// name
	// Required: true
	Name *string `json:"name"`

	// supported os
	// Required: true
	SupportedOs []string `json:"supported_os"`

	// task ids
	// Required: true
	TaskIds []string `json:"task_ids"`
}

// Validate validates this itautomation task group
func (m *ItautomationTaskGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsPreset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var itautomationTaskGroupTypeAccessTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Public","Shared","Private"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itautomationTaskGroupTypeAccessTypePropEnum = append(itautomationTaskGroupTypeAccessTypePropEnum, v)
	}
}

const (

	// ItautomationTaskGroupAccessTypePublic captures enum value "Public"
	ItautomationTaskGroupAccessTypePublic string = "Public"

	// ItautomationTaskGroupAccessTypeShared captures enum value "Shared"
	ItautomationTaskGroupAccessTypeShared string = "Shared"

	// ItautomationTaskGroupAccessTypePrivate captures enum value "Private"
	ItautomationTaskGroupAccessTypePrivate string = "Private"
)

// prop value enum
func (m *ItautomationTaskGroup) validateAccessTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, itautomationTaskGroupTypeAccessTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ItautomationTaskGroup) validateAccessType(formats strfmt.Registry) error {

	if err := validate.Required("access_type", "body", m.AccessType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAccessTypeEnum("access_type", "body", *m.AccessType); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskGroup) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("created_by", "body", m.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskGroup) validateCreatedTime(formats strfmt.Registry) error {

	if err := validate.Required("created_time", "body", m.CreatedTime); err != nil {
		return err
	}

	if err := validate.FormatOf("created_time", "body", "date-time", m.CreatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskGroup) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskGroup) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskGroup) validateIsPreset(formats strfmt.Registry) error {

	if err := validate.Required("is_preset", "body", m.IsPreset); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskGroup) validateModifiedBy(formats strfmt.Registry) error {

	if err := validate.Required("modified_by", "body", m.ModifiedBy); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskGroup) validateModifiedTime(formats strfmt.Registry) error {

	if err := validate.Required("modified_time", "body", m.ModifiedTime); err != nil {
		return err
	}

	if err := validate.FormatOf("modified_time", "body", "date-time", m.ModifiedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskGroup) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskGroup) validateSupportedOs(formats strfmt.Registry) error {

	if err := validate.Required("supported_os", "body", m.SupportedOs); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskGroup) validateTaskIds(formats strfmt.Registry) error {

	if err := validate.Required("task_ids", "body", m.TaskIds); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this itautomation task group based on context it is used
func (m *ItautomationTaskGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ItautomationTaskGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItautomationTaskGroup) UnmarshalBinary(b []byte) error {
	var res ItautomationTaskGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
