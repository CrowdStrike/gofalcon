// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonUpdateRuleRequest common update rule request
//
// swagger:model common.UpdateRuleRequest
type CommonUpdateRuleRequest struct {

	// alert info
	AlertInfo string `json:"alert_info,omitempty"`

	// attack types
	AttackTypes []string `json:"attack_types"`

	// category
	Category string `json:"category,omitempty"`

	// controls
	Controls []*ApimodelsControlReference `json:"controls"`

	// description
	Description string `json:"description,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rule logic list
	RuleLogicList []*ApimodelsRuleLogic `json:"rule_logic_list"`

	// severity
	Severity int64 `json:"severity,omitempty"`

	// uuid
	// Required: true
	UUID *string `json:"uuid"`
}

// Validate validates this common update rule request
func (m *CommonUpdateRuleRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleLogicList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonUpdateRuleRequest) validateControls(formats strfmt.Registry) error {
	if swag.IsZero(m.Controls) { // not required
		return nil
	}

	for i := 0; i < len(m.Controls); i++ {
		if swag.IsZero(m.Controls[i]) { // not required
			continue
		}

		if m.Controls[i] != nil {
			if err := m.Controls[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controls" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonUpdateRuleRequest) validateRuleLogicList(formats strfmt.Registry) error {
	if swag.IsZero(m.RuleLogicList) { // not required
		return nil
	}

	for i := 0; i < len(m.RuleLogicList); i++ {
		if swag.IsZero(m.RuleLogicList[i]) { // not required
			continue
		}

		if m.RuleLogicList[i] != nil {
			if err := m.RuleLogicList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rule_logic_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rule_logic_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonUpdateRuleRequest) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this common update rule request based on the context it is used
func (m *CommonUpdateRuleRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateControls(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRuleLogicList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonUpdateRuleRequest) contextValidateControls(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Controls); i++ {

		if m.Controls[i] != nil {

			if swag.IsZero(m.Controls[i]) { // not required
				return nil
			}

			if err := m.Controls[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controls" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonUpdateRuleRequest) contextValidateRuleLogicList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RuleLogicList); i++ {

		if m.RuleLogicList[i] != nil {

			if swag.IsZero(m.RuleLogicList[i]) { // not required
				return nil
			}

			if err := m.RuleLogicList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rule_logic_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rule_logic_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonUpdateRuleRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonUpdateRuleRequest) UnmarshalBinary(b []byte) error {
	var res CommonUpdateRuleRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
