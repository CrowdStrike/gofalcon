// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClientJobStatus client job status
//
// swagger:model client.JobStatus
type ClientJobStatus struct {

	// content length
	ContentLength int32 `json:"content_length,omitempty"`

	// digest algo
	DigestAlgo string `json:"digest_algo,omitempty"`

	// digest hex
	DigestHex string `json:"digest_hex,omitempty"`

	// event count
	EventCount int64 `json:"event_count,omitempty"`

	// file link
	FileLink string `json:"file_link,omitempty"`

	// job id
	// Required: true
	JobID *string `json:"job_id"`

	// job url
	JobURL string `json:"job_url,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// percent complete
	PercentComplete int32 `json:"percent_complete,omitempty"`

	// result count
	ResultCount int32 `json:"result_count,omitempty"`

	// run duration
	RunDuration float64 `json:"run_duration,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this client job status
func (m *ClientJobStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJobID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClientJobStatus) validateJobID(formats strfmt.Registry) error {

	if err := validate.Required("job_id", "body", m.JobID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this client job status based on context it is used
func (m *ClientJobStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClientJobStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClientJobStatus) UnmarshalBinary(b []byte) error {
	var res ClientJobStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
