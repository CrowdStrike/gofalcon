// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FalconforitapiCompositeQuery falconforitapi composite query
//
// swagger:model falconforitapi.CompositeQuery
type FalconforitapiCompositeQuery struct {

	// host attributes
	// Required: true
	HostAttributes []string `json:"HostAttributes"`

	// task i ds
	// Required: true
	TaskIDs []string `json:"TaskIDs"`
}

// Validate validates this falconforitapi composite query
func (m *FalconforitapiCompositeQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskIDs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiCompositeQuery) validateHostAttributes(formats strfmt.Registry) error {

	if err := validate.Required("HostAttributes", "body", m.HostAttributes); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiCompositeQuery) validateTaskIDs(formats strfmt.Registry) error {

	if err := validate.Required("TaskIDs", "body", m.TaskIDs); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this falconforitapi composite query based on context it is used
func (m *FalconforitapiCompositeQuery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FalconforitapiCompositeQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FalconforitapiCompositeQuery) UnmarshalBinary(b []byte) error {
	var res FalconforitapiCompositeQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
