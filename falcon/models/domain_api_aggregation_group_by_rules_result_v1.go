// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainAPIAggregationGroupByRulesResultV1 domain API aggregation group by rules result v1
//
// swagger:model domain.APIAggregationGroupByRulesResultV1
type DomainAPIAggregationGroupByRulesResultV1 struct {

	// asset type
	// Required: true
	AssetType *string `json:"asset_type"`

	// failed assessment count
	// Required: true
	FailedAssessmentCount *int32 `json:"failed_assessment_count"`

	// framework name
	// Required: true
	FrameworkName *string `json:"framework_name"`

	// framework name version
	// Required: true
	FrameworkNameVersion *string `json:"framework_name_version"`

	// framework version
	// Required: true
	FrameworkVersion *string `json:"framework_version"`

	// id
	ID string `json:"id,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// passed assessment count
	// Required: true
	PassedAssessmentCount *int32 `json:"passed_assessment_count"`

	// percentage of passed assessments
	// Required: true
	PercentageOfPassedAssessments *float64 `json:"percentage_of_passed_assessments"`

	// recommendation id
	// Required: true
	RecommendationID *string `json:"recommendation_id"`

	// severity
	// Required: true
	Severity *int32 `json:"severity"`

	// total assessment count
	// Required: true
	TotalAssessmentCount *int32 `json:"total_assessment_count"`
}

// Validate validates this domain API aggregation group by rules result v1
func (m *DomainAPIAggregationGroupByRulesResultV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssetType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedAssessmentCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrameworkName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrameworkNameVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrameworkVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassedAssessmentCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePercentageOfPassedAssessments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecommendationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalAssessmentCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAPIAggregationGroupByRulesResultV1) validateAssetType(formats strfmt.Registry) error {

	if err := validate.Required("asset_type", "body", m.AssetType); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregationGroupByRulesResultV1) validateFailedAssessmentCount(formats strfmt.Registry) error {

	if err := validate.Required("failed_assessment_count", "body", m.FailedAssessmentCount); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregationGroupByRulesResultV1) validateFrameworkName(formats strfmt.Registry) error {

	if err := validate.Required("framework_name", "body", m.FrameworkName); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregationGroupByRulesResultV1) validateFrameworkNameVersion(formats strfmt.Registry) error {

	if err := validate.Required("framework_name_version", "body", m.FrameworkNameVersion); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregationGroupByRulesResultV1) validateFrameworkVersion(formats strfmt.Registry) error {

	if err := validate.Required("framework_version", "body", m.FrameworkVersion); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregationGroupByRulesResultV1) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregationGroupByRulesResultV1) validatePassedAssessmentCount(formats strfmt.Registry) error {

	if err := validate.Required("passed_assessment_count", "body", m.PassedAssessmentCount); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregationGroupByRulesResultV1) validatePercentageOfPassedAssessments(formats strfmt.Registry) error {

	if err := validate.Required("percentage_of_passed_assessments", "body", m.PercentageOfPassedAssessments); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregationGroupByRulesResultV1) validateRecommendationID(formats strfmt.Registry) error {

	if err := validate.Required("recommendation_id", "body", m.RecommendationID); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregationGroupByRulesResultV1) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregationGroupByRulesResultV1) validateTotalAssessmentCount(formats strfmt.Registry) error {

	if err := validate.Required("total_assessment_count", "body", m.TotalAssessmentCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain API aggregation group by rules result v1 based on context it is used
func (m *DomainAPIAggregationGroupByRulesResultV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainAPIAggregationGroupByRulesResultV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainAPIAggregationGroupByRulesResultV1) UnmarshalBinary(b []byte) error {
	var res DomainAPIAggregationGroupByRulesResultV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
