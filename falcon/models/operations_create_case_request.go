// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OperationsCreateCaseRequest operations create case request
//
// swagger:model operations.CreateCaseRequest
type OperationsCreateCaseRequest struct {

	// assigned to user uuid
	// Required: true
	AssignedToUserUUID *string `json:"assigned_to_user_uuid"`

	// description
	// Required: true
	Description *string `json:"description"`

	// evidence
	// Required: true
	Evidence *OperationsCreateCaseRequestEvidence `json:"evidence"`

	// name
	// Required: true
	Name *string `json:"name"`

	// severity
	// Required: true
	Severity *int64 `json:"severity"`

	// status
	// Required: true
	Status *string `json:"status"`

	// tags
	Tags []string `json:"tags"`

	// template
	Template *SdkTemplateSelector `json:"template,omitempty"`
}

// Validate validates this operations create case request
func (m *OperationsCreateCaseRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignedToUserUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvidence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationsCreateCaseRequest) validateAssignedToUserUUID(formats strfmt.Registry) error {

	if err := validate.Required("assigned_to_user_uuid", "body", m.AssignedToUserUUID); err != nil {
		return err
	}

	return nil
}

func (m *OperationsCreateCaseRequest) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *OperationsCreateCaseRequest) validateEvidence(formats strfmt.Registry) error {

	if err := validate.Required("evidence", "body", m.Evidence); err != nil {
		return err
	}

	if m.Evidence != nil {
		if err := m.Evidence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evidence")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("evidence")
			}
			return err
		}
	}

	return nil
}

func (m *OperationsCreateCaseRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *OperationsCreateCaseRequest) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *OperationsCreateCaseRequest) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *OperationsCreateCaseRequest) validateTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.Template) { // not required
		return nil
	}

	if m.Template != nil {
		if err := m.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this operations create case request based on the context it is used
func (m *OperationsCreateCaseRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEvidence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationsCreateCaseRequest) contextValidateEvidence(ctx context.Context, formats strfmt.Registry) error {

	if m.Evidence != nil {

		if err := m.Evidence.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("evidence")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("evidence")
			}
			return err
		}
	}

	return nil
}

func (m *OperationsCreateCaseRequest) contextValidateTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.Template != nil {

		if swag.IsZero(m.Template) { // not required
			return nil
		}

		if err := m.Template.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperationsCreateCaseRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsCreateCaseRequest) UnmarshalBinary(b []byte) error {
	var res OperationsCreateCaseRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
