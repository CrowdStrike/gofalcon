// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleasecontentsReleaseContentVersionResponseV1 releasecontents release content version response v1
//
// swagger:model releasecontents.ReleaseContentVersionResponseV1
type ReleasecontentsReleaseContentVersionResponseV1 struct {

	// customer id
	CustomerID string `json:"customer_id,omitempty"`

	// source id
	// Required: true
	SourceID *string `json:"source_id"`

	// source type
	// Required: true
	SourceType *string `json:"source_type"`

	// version
	// Required: true
	Version *int32 `json:"version"`
}

// Validate validates this releasecontents release content version response v1
func (m *ReleasecontentsReleaseContentVersionResponseV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleasecontentsReleaseContentVersionResponseV1) validateSourceID(formats strfmt.Registry) error {

	if err := validate.Required("source_id", "body", m.SourceID); err != nil {
		return err
	}

	return nil
}

func (m *ReleasecontentsReleaseContentVersionResponseV1) validateSourceType(formats strfmt.Registry) error {

	if err := validate.Required("source_type", "body", m.SourceType); err != nil {
		return err
	}

	return nil
}

func (m *ReleasecontentsReleaseContentVersionResponseV1) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this releasecontents release content version response v1 based on context it is used
func (m *ReleasecontentsReleaseContentVersionResponseV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ReleasecontentsReleaseContentVersionResponseV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleasecontentsReleaseContentVersionResponseV1) UnmarshalBinary(b []byte) error {
	var res ReleasecontentsReleaseContentVersionResponseV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
