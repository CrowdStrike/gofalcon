// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainMSSPRoles domain m s s p roles
//
// swagger:model domain.MSSPRoles
type DomainMSSPRoles struct {

	// cid group id
	// Required: true
	CidGroupID *string `json:"cid_group_id"`

	// id
	// Required: true
	ID *string `json:"id"`

	// role ids
	// Required: true
	RoleIds []string `json:"role_ids"`

	// user group id
	// Required: true
	UserGroupID *string `json:"user_group_id"`
}

// Validate validates this domain m s s p roles
func (m *DomainMSSPRoles) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCidGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserGroupID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainMSSPRoles) validateCidGroupID(formats strfmt.Registry) error {

	if err := validate.Required("cid_group_id", "body", m.CidGroupID); err != nil {
		return err
	}

	return nil
}

func (m *DomainMSSPRoles) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DomainMSSPRoles) validateRoleIds(formats strfmt.Registry) error {

	if err := validate.Required("role_ids", "body", m.RoleIds); err != nil {
		return err
	}

	return nil
}

func (m *DomainMSSPRoles) validateUserGroupID(formats strfmt.Registry) error {

	if err := validate.Required("user_group_id", "body", m.UserGroupID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain m s s p roles based on context it is used
func (m *DomainMSSPRoles) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainMSSPRoles) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainMSSPRoles) UnmarshalBinary(b []byte) error {
	var res DomainMSSPRoles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
