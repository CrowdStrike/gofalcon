// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIQueryMetadataJSON api query metadata JSON
//
// swagger:model api.QueryMetadataJSON
type APIQueryMetadataJSON struct {

	// The costs of executing the query
	// Required: true
	Costs *Costs `json:"costs"`

	// Indicates how up to date the incoming data to the query is
	// Required: true
	DigestFlow *DigestFlow `json:"digestFlow"`

	// Number of events in the result set
	// Required: true
	EventCount *int64 `json:"eventCount"`

	// Additional data about the returned events
	// Required: true
	ExtraData APIQueryMetadataJSONExtraData `json:"extraData"`

	// Order of the returned fields
	// Required: true
	FieldOrder []string `json:"fieldOrder"`

	// Filter query structure containing a definition of the query as requested. The structure matches the supplied QueryInputJob.
	// Required: true
	FilterQuery APIQueryMetadataJSONFilterQuery `json:"filterQuery"`

	// True if this is an aggregate query
	// Required: true
	IsAggregate *bool `json:"isAggregate"`

	// How soon to poll the query after it has been submitted to expected results
	// Required: true
	PollAfter *int64 `json:"pollAfter"`

	// Number of bytes processed to return results
	// Required: true
	ProcessedBytes *int64 `json:"processedBytes"`

	// Number of events processed in result set
	// Required: true
	ProcessedEvents *int64 `json:"processedEvents"`

	// Timestamp of the end of the query
	// Required: true
	QueryEnd *int64 `json:"queryEnd"`

	// Structure defining the time and duration of the returned events
	// Required: true
	QuerySpent *QuerySpent `json:"querySpent"`

	// Timestampt of when the query started
	// Required: true
	QueryStart *int64 `json:"queryStart"`

	// Number of milliseconds the query was queued before execution
	// Required: true
	QueuedMillis *int64 `json:"queuedMillis"`

	// Structure definition to the total time spent used for calculating the quota
	// Required: true
	QuotaTotalSpent *QuotaTotalSpent `json:"quotaTotalSpent"`

	// Number of the host returning the response
	// Required: true
	ResponderVHost *int64 `json:"responderVHost"`

	// Size of the buffer used to store the result
	// Required: true
	ResultBufferSize *int64 `json:"resultBufferSize"`

	// Time spent executing the query in milliseconds
	// Required: true
	TimeMillis *int64 `json:"timeMillis"`

	// Total amount of work to execute the query
	// Required: true
	TotalWork *int64 `json:"totalWork"`

	// Deprecated: Use warnings in the message root instead
	// Required: true
	Warning *string `json:"warning"`

	// Use 'warnings' in the message root instead
	// Required: true
	Warnings []string `json:"warnings"`

	// Estimate of the work done to complete the query
	// Required: true
	WorkDone *int64 `json:"workDone"`
}

// Validate validates this api query metadata JSON
func (m *APIQueryMetadataJSON) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDigestFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtraData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFieldOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilterQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsAggregate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePollAfter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessedBytes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessedEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuerySpent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueuedMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuotaTotalSpent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponderVHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResultBufferSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalWork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarning(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarnings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkDone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIQueryMetadataJSON) validateCosts(formats strfmt.Registry) error {

	if err := validate.Required("costs", "body", m.Costs); err != nil {
		return err
	}

	if m.Costs != nil {
		if err := m.Costs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("costs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("costs")
			}
			return err
		}
	}

	return nil
}

func (m *APIQueryMetadataJSON) validateDigestFlow(formats strfmt.Registry) error {

	if err := validate.Required("digestFlow", "body", m.DigestFlow); err != nil {
		return err
	}

	if m.DigestFlow != nil {
		if err := m.DigestFlow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("digestFlow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("digestFlow")
			}
			return err
		}
	}

	return nil
}

func (m *APIQueryMetadataJSON) validateEventCount(formats strfmt.Registry) error {

	if err := validate.Required("eventCount", "body", m.EventCount); err != nil {
		return err
	}

	return nil
}

func (m *APIQueryMetadataJSON) validateExtraData(formats strfmt.Registry) error {

	if m.ExtraData == nil {
		return errors.Required("extraData", "body", nil)
	}

	return nil
}

func (m *APIQueryMetadataJSON) validateFieldOrder(formats strfmt.Registry) error {

	if err := validate.Required("fieldOrder", "body", m.FieldOrder); err != nil {
		return err
	}

	return nil
}

func (m *APIQueryMetadataJSON) validateFilterQuery(formats strfmt.Registry) error {

	if m.FilterQuery == nil {
		return errors.Required("filterQuery", "body", nil)
	}

	return nil
}

func (m *APIQueryMetadataJSON) validateIsAggregate(formats strfmt.Registry) error {

	if err := validate.Required("isAggregate", "body", m.IsAggregate); err != nil {
		return err
	}

	return nil
}

func (m *APIQueryMetadataJSON) validatePollAfter(formats strfmt.Registry) error {

	if err := validate.Required("pollAfter", "body", m.PollAfter); err != nil {
		return err
	}

	return nil
}

func (m *APIQueryMetadataJSON) validateProcessedBytes(formats strfmt.Registry) error {

	if err := validate.Required("processedBytes", "body", m.ProcessedBytes); err != nil {
		return err
	}

	return nil
}

func (m *APIQueryMetadataJSON) validateProcessedEvents(formats strfmt.Registry) error {

	if err := validate.Required("processedEvents", "body", m.ProcessedEvents); err != nil {
		return err
	}

	return nil
}

func (m *APIQueryMetadataJSON) validateQueryEnd(formats strfmt.Registry) error {

	if err := validate.Required("queryEnd", "body", m.QueryEnd); err != nil {
		return err
	}

	return nil
}

func (m *APIQueryMetadataJSON) validateQuerySpent(formats strfmt.Registry) error {

	if err := validate.Required("querySpent", "body", m.QuerySpent); err != nil {
		return err
	}

	if m.QuerySpent != nil {
		if err := m.QuerySpent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("querySpent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("querySpent")
			}
			return err
		}
	}

	return nil
}

func (m *APIQueryMetadataJSON) validateQueryStart(formats strfmt.Registry) error {

	if err := validate.Required("queryStart", "body", m.QueryStart); err != nil {
		return err
	}

	return nil
}

func (m *APIQueryMetadataJSON) validateQueuedMillis(formats strfmt.Registry) error {

	if err := validate.Required("queuedMillis", "body", m.QueuedMillis); err != nil {
		return err
	}

	return nil
}

func (m *APIQueryMetadataJSON) validateQuotaTotalSpent(formats strfmt.Registry) error {

	if err := validate.Required("quotaTotalSpent", "body", m.QuotaTotalSpent); err != nil {
		return err
	}

	if m.QuotaTotalSpent != nil {
		if err := m.QuotaTotalSpent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quotaTotalSpent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quotaTotalSpent")
			}
			return err
		}
	}

	return nil
}

func (m *APIQueryMetadataJSON) validateResponderVHost(formats strfmt.Registry) error {

	if err := validate.Required("responderVHost", "body", m.ResponderVHost); err != nil {
		return err
	}

	return nil
}

func (m *APIQueryMetadataJSON) validateResultBufferSize(formats strfmt.Registry) error {

	if err := validate.Required("resultBufferSize", "body", m.ResultBufferSize); err != nil {
		return err
	}

	return nil
}

func (m *APIQueryMetadataJSON) validateTimeMillis(formats strfmt.Registry) error {

	if err := validate.Required("timeMillis", "body", m.TimeMillis); err != nil {
		return err
	}

	return nil
}

func (m *APIQueryMetadataJSON) validateTotalWork(formats strfmt.Registry) error {

	if err := validate.Required("totalWork", "body", m.TotalWork); err != nil {
		return err
	}

	return nil
}

func (m *APIQueryMetadataJSON) validateWarning(formats strfmt.Registry) error {

	if err := validate.Required("warning", "body", m.Warning); err != nil {
		return err
	}

	return nil
}

func (m *APIQueryMetadataJSON) validateWarnings(formats strfmt.Registry) error {

	if err := validate.Required("warnings", "body", m.Warnings); err != nil {
		return err
	}

	return nil
}

func (m *APIQueryMetadataJSON) validateWorkDone(formats strfmt.Registry) error {

	if err := validate.Required("workDone", "body", m.WorkDone); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this api query metadata JSON based on the context it is used
func (m *APIQueryMetadataJSON) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDigestFlow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuerySpent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuotaTotalSpent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIQueryMetadataJSON) contextValidateCosts(ctx context.Context, formats strfmt.Registry) error {

	if m.Costs != nil {

		if err := m.Costs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("costs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("costs")
			}
			return err
		}
	}

	return nil
}

func (m *APIQueryMetadataJSON) contextValidateDigestFlow(ctx context.Context, formats strfmt.Registry) error {

	if m.DigestFlow != nil {

		if err := m.DigestFlow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("digestFlow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("digestFlow")
			}
			return err
		}
	}

	return nil
}

func (m *APIQueryMetadataJSON) contextValidateQuerySpent(ctx context.Context, formats strfmt.Registry) error {

	if m.QuerySpent != nil {

		if err := m.QuerySpent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("querySpent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("querySpent")
			}
			return err
		}
	}

	return nil
}

func (m *APIQueryMetadataJSON) contextValidateQuotaTotalSpent(ctx context.Context, formats strfmt.Registry) error {

	if m.QuotaTotalSpent != nil {

		if err := m.QuotaTotalSpent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quotaTotalSpent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quotaTotalSpent")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIQueryMetadataJSON) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIQueryMetadataJSON) UnmarshalBinary(b []byte) error {
	var res APIQueryMetadataJSON
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
