// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainFileCountV2 domain file count v2
//
// swagger:model domain.FileCountV2
type DomainFileCountV2 struct {

	// malicious
	// Required: true
	Malicious *int32 `json:"malicious"`

	// quarantined
	// Required: true
	Quarantined *int32 `json:"quarantined"`

	// scanned
	// Required: true
	Scanned *int32 `json:"scanned"`

	// skipped
	// Required: true
	Skipped *int32 `json:"skipped"`

	// traversed
	// Required: true
	Traversed *int32 `json:"traversed"`
}

// Validate validates this domain file count v2
func (m *DomainFileCountV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMalicious(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuarantined(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanned(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkipped(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraversed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainFileCountV2) validateMalicious(formats strfmt.Registry) error {

	if err := validate.Required("malicious", "body", m.Malicious); err != nil {
		return err
	}

	return nil
}

func (m *DomainFileCountV2) validateQuarantined(formats strfmt.Registry) error {

	if err := validate.Required("quarantined", "body", m.Quarantined); err != nil {
		return err
	}

	return nil
}

func (m *DomainFileCountV2) validateScanned(formats strfmt.Registry) error {

	if err := validate.Required("scanned", "body", m.Scanned); err != nil {
		return err
	}

	return nil
}

func (m *DomainFileCountV2) validateSkipped(formats strfmt.Registry) error {

	if err := validate.Required("skipped", "body", m.Skipped); err != nil {
		return err
	}

	return nil
}

func (m *DomainFileCountV2) validateTraversed(formats strfmt.Registry) error {

	if err := validate.Required("traversed", "body", m.Traversed); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain file count v2 based on context it is used
func (m *DomainFileCountV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainFileCountV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainFileCountV2) UnmarshalBinary(b []byte) error {
	var res DomainFileCountV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
