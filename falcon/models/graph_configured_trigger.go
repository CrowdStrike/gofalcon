// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GraphConfiguredTrigger graph configured trigger
//
// swagger:model graph.ConfiguredTrigger
type GraphConfiguredTrigger struct {

	// Unique identifier for the selected trigger as provided by the triggers API
	ID string `json:"id,omitempty"`

	// Display name of the trigger
	// Required: true
	Name *string `json:"name"`

	// node ID
	// Required: true
	NodeID *string `json:"nodeID"`

	// Reference to the ID of the flow node outbound from the trigger.
	// Required: true
	OutgoingFlow *string `json:"outgoing_flow"`

	// JSON Schema defining parameters required for an on-demand trigger.
	Parameters *JsonschemaSchema `json:"parameters,omitempty"`

	// Details of a repeating schedule, applicable for a schedule type trigger
	TimerEventDefinition *GraphTimerEventDefinition `json:"timer_event_definition,omitempty"`

	// Denotes the type of trigger, signal based, scheduled, on demand, etc
	TriggerType string `json:"trigger_type,omitempty"`
}

// Validate validates this graph configured trigger
func (m *GraphConfiguredTrigger) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutgoingFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimerEventDefinition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphConfiguredTrigger) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *GraphConfiguredTrigger) validateNodeID(formats strfmt.Registry) error {

	if err := validate.Required("nodeID", "body", m.NodeID); err != nil {
		return err
	}

	return nil
}

func (m *GraphConfiguredTrigger) validateOutgoingFlow(formats strfmt.Registry) error {

	if err := validate.Required("outgoing_flow", "body", m.OutgoingFlow); err != nil {
		return err
	}

	return nil
}

func (m *GraphConfiguredTrigger) validateParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	if m.Parameters != nil {
		if err := m.Parameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameters")
			}
			return err
		}
	}

	return nil
}

func (m *GraphConfiguredTrigger) validateTimerEventDefinition(formats strfmt.Registry) error {
	if swag.IsZero(m.TimerEventDefinition) { // not required
		return nil
	}

	if m.TimerEventDefinition != nil {
		if err := m.TimerEventDefinition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timer_event_definition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timer_event_definition")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this graph configured trigger based on the context it is used
func (m *GraphConfiguredTrigger) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimerEventDefinition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphConfiguredTrigger) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.Parameters != nil {

		if swag.IsZero(m.Parameters) { // not required
			return nil
		}

		if err := m.Parameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameters")
			}
			return err
		}
	}

	return nil
}

func (m *GraphConfiguredTrigger) contextValidateTimerEventDefinition(ctx context.Context, formats strfmt.Registry) error {

	if m.TimerEventDefinition != nil {

		if swag.IsZero(m.TimerEventDefinition) { // not required
			return nil
		}

		if err := m.TimerEventDefinition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timer_event_definition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timer_event_definition")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GraphConfiguredTrigger) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GraphConfiguredTrigger) UnmarshalBinary(b []byte) error {
	var res GraphConfiguredTrigger
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
