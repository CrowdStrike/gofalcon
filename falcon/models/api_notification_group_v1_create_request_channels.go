// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APINotificationGroupV1CreateRequestChannels api notification group v1 create request channels
//
// swagger:model api.NotificationGroupV1CreateRequest.channels
type APINotificationGroupV1CreateRequestChannels struct {

	// config id
	// Required: true
	ConfigID *string `json:"config_id"`

	// config name
	// Required: true
	ConfigName *string `json:"config_name"`

	// recipients
	// Required: true
	Recipients []string `json:"recipients"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this api notification group v1 create request channels
func (m *APINotificationGroupV1CreateRequestChannels) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipients(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APINotificationGroupV1CreateRequestChannels) validateConfigID(formats strfmt.Registry) error {

	if err := validate.Required("config_id", "body", m.ConfigID); err != nil {
		return err
	}

	return nil
}

func (m *APINotificationGroupV1CreateRequestChannels) validateConfigName(formats strfmt.Registry) error {

	if err := validate.Required("config_name", "body", m.ConfigName); err != nil {
		return err
	}

	return nil
}

func (m *APINotificationGroupV1CreateRequestChannels) validateRecipients(formats strfmt.Registry) error {

	if err := validate.Required("recipients", "body", m.Recipients); err != nil {
		return err
	}

	return nil
}

func (m *APINotificationGroupV1CreateRequestChannels) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this api notification group v1 create request channels based on context it is used
func (m *APINotificationGroupV1CreateRequestChannels) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *APINotificationGroupV1CreateRequestChannels) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APINotificationGroupV1CreateRequestChannels) UnmarshalBinary(b []byte) error {
	var res APINotificationGroupV1CreateRequestChannels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
