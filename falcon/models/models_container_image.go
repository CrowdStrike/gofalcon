// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsContainerImage models container image
//
// swagger:model models.ContainerImage
type ModelsContainerImage struct {

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// cluster ids
	// Required: true
	ClusterIds []string `json:"cluster_ids"`

	// container count
	// Required: true
	ContainerCount *int32 `json:"container_count"`

	// containers running status
	// Required: true
	ContainersRunningStatus map[string]bool `json:"containers_running_status"`

	// hosts
	// Required: true
	Hosts []string `json:"hosts"`

	// id
	// Required: true
	ID *string `json:"id"`

	// image detection count
	// Required: true
	ImageDetectionCount *int32 `json:"image_detection_count"`

	// image digest
	// Required: true
	ImageDigest *string `json:"image_digest"`

	// image has been assessed
	// Required: true
	ImageHasBeenAssessed *bool `json:"image_has_been_assessed"`

	// image id
	// Required: true
	ImageID *string `json:"image_id"`

	// image name
	// Required: true
	ImageName *string `json:"image_name"`

	// image registry
	// Required: true
	ImageRegistry *string `json:"image_registry"`

	// image repository
	// Required: true
	ImageRepository *string `json:"image_repository"`

	// image tag
	// Required: true
	ImageTag *string `json:"image_tag"`

	// image vulnerability count
	// Required: true
	ImageVulnerabilityCount *int32 `json:"image_vulnerability_count"`

	// last seen
	// Required: true
	LastSeen *string `json:"last_seen"`

	// running container count
	// Required: true
	RunningContainerCount *int32 `json:"running_container_count"`
}

// Validate validates this models container image
func (m *ModelsContainerImage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainersRunningStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageDetectionCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageDigest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageHasBeenAssessed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageRegistry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageVulnerabilityCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSeen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningContainerCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsContainerImage) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainerImage) validateClusterIds(formats strfmt.Registry) error {

	if err := validate.Required("cluster_ids", "body", m.ClusterIds); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainerImage) validateContainerCount(formats strfmt.Registry) error {

	if err := validate.Required("container_count", "body", m.ContainerCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainerImage) validateContainersRunningStatus(formats strfmt.Registry) error {

	if err := validate.Required("containers_running_status", "body", m.ContainersRunningStatus); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainerImage) validateHosts(formats strfmt.Registry) error {

	if err := validate.Required("hosts", "body", m.Hosts); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainerImage) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainerImage) validateImageDetectionCount(formats strfmt.Registry) error {

	if err := validate.Required("image_detection_count", "body", m.ImageDetectionCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainerImage) validateImageDigest(formats strfmt.Registry) error {

	if err := validate.Required("image_digest", "body", m.ImageDigest); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainerImage) validateImageHasBeenAssessed(formats strfmt.Registry) error {

	if err := validate.Required("image_has_been_assessed", "body", m.ImageHasBeenAssessed); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainerImage) validateImageID(formats strfmt.Registry) error {

	if err := validate.Required("image_id", "body", m.ImageID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainerImage) validateImageName(formats strfmt.Registry) error {

	if err := validate.Required("image_name", "body", m.ImageName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainerImage) validateImageRegistry(formats strfmt.Registry) error {

	if err := validate.Required("image_registry", "body", m.ImageRegistry); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainerImage) validateImageRepository(formats strfmt.Registry) error {

	if err := validate.Required("image_repository", "body", m.ImageRepository); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainerImage) validateImageTag(formats strfmt.Registry) error {

	if err := validate.Required("image_tag", "body", m.ImageTag); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainerImage) validateImageVulnerabilityCount(formats strfmt.Registry) error {

	if err := validate.Required("image_vulnerability_count", "body", m.ImageVulnerabilityCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainerImage) validateLastSeen(formats strfmt.Registry) error {

	if err := validate.Required("last_seen", "body", m.LastSeen); err != nil {
		return err
	}

	return nil
}

func (m *ModelsContainerImage) validateRunningContainerCount(formats strfmt.Registry) error {

	if err := validate.Required("running_container_count", "body", m.RunningContainerCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models container image based on context it is used
func (m *ModelsContainerImage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsContainerImage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsContainerImage) UnmarshalBinary(b []byte) error {
	var res ModelsContainerImage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
