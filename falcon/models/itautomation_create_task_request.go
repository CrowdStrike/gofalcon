// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItautomationCreateTaskRequest itautomation create task request
//
// swagger:model itautomation.CreateTaskRequest
type ItautomationCreateTaskRequest struct {

	// Access type of the task
	// Required: true
	// Enum: ["Public","Shared"]
	AccessType *string `json:"access_type"`

	// Assigned user group IDs of the task, when access_type is Shared. Use GET /it-automation/queries/it-user-groups/v1 to fetch user group IDs
	AssignedUserGroupIds []string `json:"assigned_user_group_ids"`

	// Assigned user IDs of the task, when access_type is Shared. Use GET /user-management/queries/users/v1 to fetch user IDs
	AssignedUserIds []string `json:"assigned_user_ids"`

	// Composite query configuration containing task IDs and host attributes for multi-task execution
	CompositeQuery *ItautomationCompositeQuery `json:"composite_query,omitempty"`

	// Detailed description of what the task does. Example: User Table Validation Check
	Description string `json:"description,omitempty"`

	// Name of the task. Example: OSQuery Check
	// Required: true
	Name *string `json:"name"`

	// OSQuery to execute. Example: select * from users
	OsQuery string `json:"os_query,omitempty"`

	// Specifies the columns and delimiter used to parse script execution results
	OutputParserConfig *ItautomationOutputParserConfig `json:"output_parser_config,omitempty"`

	// Script queries to run per platform
	Queries *ItautomationScripts `json:"queries,omitempty"`

	// Remediation scripts to run per platform
	Remediations *ItautomationScripts `json:"remediations,omitempty"`

	// Target filter in FQL format. Example: platform_name: 'Windows'
	// Required: true
	Target *string `json:"target"`

	// ID of the task group to associate this task with
	TaskGroupID string `json:"task_group_id,omitempty"`

	// Parameters for the task
	TaskParameters []*ItautomationTaskParameter `json:"task_parameters"`

	// Type of task
	// Required: true
	// Enum: ["query","remediation"]
	TaskType *string `json:"task_type"`

	// Conditions that trigger remediation scripts execution
	TriggerCondition []*FalconforitapiConditionGroup `json:"trigger_condition"`

	// Conditions that verify the outcome of the remediation scripts execution
	VerificationCondition []*FalconforitapiConditionGroup `json:"verification_condition"`
}

// Validate validates this itautomation create task request
func (m *ItautomationCreateTaskRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompositeQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputParserConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerificationCondition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var itautomationCreateTaskRequestTypeAccessTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Public","Shared"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itautomationCreateTaskRequestTypeAccessTypePropEnum = append(itautomationCreateTaskRequestTypeAccessTypePropEnum, v)
	}
}

const (

	// ItautomationCreateTaskRequestAccessTypePublic captures enum value "Public"
	ItautomationCreateTaskRequestAccessTypePublic string = "Public"

	// ItautomationCreateTaskRequestAccessTypeShared captures enum value "Shared"
	ItautomationCreateTaskRequestAccessTypeShared string = "Shared"
)

// prop value enum
func (m *ItautomationCreateTaskRequest) validateAccessTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, itautomationCreateTaskRequestTypeAccessTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ItautomationCreateTaskRequest) validateAccessType(formats strfmt.Registry) error {

	if err := validate.Required("access_type", "body", m.AccessType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAccessTypeEnum("access_type", "body", *m.AccessType); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationCreateTaskRequest) validateCompositeQuery(formats strfmt.Registry) error {
	if swag.IsZero(m.CompositeQuery) { // not required
		return nil
	}

	if m.CompositeQuery != nil {
		if err := m.CompositeQuery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("composite_query")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("composite_query")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationCreateTaskRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationCreateTaskRequest) validateOutputParserConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.OutputParserConfig) { // not required
		return nil
	}

	if m.OutputParserConfig != nil {
		if err := m.OutputParserConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output_parser_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output_parser_config")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationCreateTaskRequest) validateQueries(formats strfmt.Registry) error {
	if swag.IsZero(m.Queries) { // not required
		return nil
	}

	if m.Queries != nil {
		if err := m.Queries.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queries")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queries")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationCreateTaskRequest) validateRemediations(formats strfmt.Registry) error {
	if swag.IsZero(m.Remediations) { // not required
		return nil
	}

	if m.Remediations != nil {
		if err := m.Remediations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remediations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remediations")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationCreateTaskRequest) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationCreateTaskRequest) validateTaskParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.TaskParameters) { // not required
		return nil
	}

	for i := 0; i < len(m.TaskParameters); i++ {
		if swag.IsZero(m.TaskParameters[i]) { // not required
			continue
		}

		if m.TaskParameters[i] != nil {
			if err := m.TaskParameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("task_parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("task_parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var itautomationCreateTaskRequestTypeTaskTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["query","remediation"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itautomationCreateTaskRequestTypeTaskTypePropEnum = append(itautomationCreateTaskRequestTypeTaskTypePropEnum, v)
	}
}

const (

	// ItautomationCreateTaskRequestTaskTypeQuery captures enum value "query"
	ItautomationCreateTaskRequestTaskTypeQuery string = "query"

	// ItautomationCreateTaskRequestTaskTypeRemediation captures enum value "remediation"
	ItautomationCreateTaskRequestTaskTypeRemediation string = "remediation"
)

// prop value enum
func (m *ItautomationCreateTaskRequest) validateTaskTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, itautomationCreateTaskRequestTypeTaskTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ItautomationCreateTaskRequest) validateTaskType(formats strfmt.Registry) error {

	if err := validate.Required("task_type", "body", m.TaskType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTaskTypeEnum("task_type", "body", *m.TaskType); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationCreateTaskRequest) validateTriggerCondition(formats strfmt.Registry) error {
	if swag.IsZero(m.TriggerCondition) { // not required
		return nil
	}

	for i := 0; i < len(m.TriggerCondition); i++ {
		if swag.IsZero(m.TriggerCondition[i]) { // not required
			continue
		}

		if m.TriggerCondition[i] != nil {
			if err := m.TriggerCondition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ItautomationCreateTaskRequest) validateVerificationCondition(formats strfmt.Registry) error {
	if swag.IsZero(m.VerificationCondition) { // not required
		return nil
	}

	for i := 0; i < len(m.VerificationCondition); i++ {
		if swag.IsZero(m.VerificationCondition[i]) { // not required
			continue
		}

		if m.VerificationCondition[i] != nil {
			if err := m.VerificationCondition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this itautomation create task request based on the context it is used
func (m *ItautomationCreateTaskRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCompositeQuery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutputParserConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemediations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaskParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTriggerCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVerificationCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItautomationCreateTaskRequest) contextValidateCompositeQuery(ctx context.Context, formats strfmt.Registry) error {

	if m.CompositeQuery != nil {

		if swag.IsZero(m.CompositeQuery) { // not required
			return nil
		}

		if err := m.CompositeQuery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("composite_query")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("composite_query")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationCreateTaskRequest) contextValidateOutputParserConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.OutputParserConfig != nil {

		if swag.IsZero(m.OutputParserConfig) { // not required
			return nil
		}

		if err := m.OutputParserConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output_parser_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output_parser_config")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationCreateTaskRequest) contextValidateQueries(ctx context.Context, formats strfmt.Registry) error {

	if m.Queries != nil {

		if swag.IsZero(m.Queries) { // not required
			return nil
		}

		if err := m.Queries.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queries")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queries")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationCreateTaskRequest) contextValidateRemediations(ctx context.Context, formats strfmt.Registry) error {

	if m.Remediations != nil {

		if swag.IsZero(m.Remediations) { // not required
			return nil
		}

		if err := m.Remediations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remediations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remediations")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationCreateTaskRequest) contextValidateTaskParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TaskParameters); i++ {

		if m.TaskParameters[i] != nil {

			if swag.IsZero(m.TaskParameters[i]) { // not required
				return nil
			}

			if err := m.TaskParameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("task_parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("task_parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ItautomationCreateTaskRequest) contextValidateTriggerCondition(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TriggerCondition); i++ {

		if m.TriggerCondition[i] != nil {

			if swag.IsZero(m.TriggerCondition[i]) { // not required
				return nil
			}

			if err := m.TriggerCondition[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ItautomationCreateTaskRequest) contextValidateVerificationCondition(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VerificationCondition); i++ {

		if m.VerificationCondition[i] != nil {

			if swag.IsZero(m.VerificationCondition[i]) { // not required
				return nil
			}

			if err := m.VerificationCondition[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ItautomationCreateTaskRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItautomationCreateTaskRequest) UnmarshalBinary(b []byte) error {
	var res ItautomationCreateTaskRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
