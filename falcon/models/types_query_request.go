// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TypesQueryRequest types query request
//
// swagger:model types.QueryRequest
type TypesQueryRequest struct {

	// paginate
	Paginate *TypesPaginate `json:"paginate,omitempty"`

	// query
	// Required: true
	Query *string `json:"query"`

	// revision Id
	RevisionID int64 `json:"revisionId,omitempty"`

	// select fields
	SelectFields *TypesQueryRequestSelectFields `json:"selectFields,omitempty"`

	// timestamp
	Timestamp int64 `json:"timestamp,omitempty"`
}

// Validate validates this types query request
func (m *TypesQueryRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePaginate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesQueryRequest) validatePaginate(formats strfmt.Registry) error {
	if swag.IsZero(m.Paginate) { // not required
		return nil
	}

	if m.Paginate != nil {
		if err := m.Paginate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paginate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paginate")
			}
			return err
		}
	}

	return nil
}

func (m *TypesQueryRequest) validateQuery(formats strfmt.Registry) error {

	if err := validate.Required("query", "body", m.Query); err != nil {
		return err
	}

	return nil
}

func (m *TypesQueryRequest) validateSelectFields(formats strfmt.Registry) error {
	if swag.IsZero(m.SelectFields) { // not required
		return nil
	}

	if m.SelectFields != nil {
		if err := m.SelectFields.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selectFields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("selectFields")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this types query request based on the context it is used
func (m *TypesQueryRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePaginate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelectFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesQueryRequest) contextValidatePaginate(ctx context.Context, formats strfmt.Registry) error {

	if m.Paginate != nil {

		if swag.IsZero(m.Paginate) { // not required
			return nil
		}

		if err := m.Paginate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paginate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paginate")
			}
			return err
		}
	}

	return nil
}

func (m *TypesQueryRequest) contextValidateSelectFields(ctx context.Context, formats strfmt.Registry) error {

	if m.SelectFields != nil {

		if swag.IsZero(m.SelectFields) { // not required
			return nil
		}

		if err := m.SelectFields.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selectFields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("selectFields")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TypesQueryRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesQueryRequest) UnmarshalBinary(b []byte) error {
	var res TypesQueryRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
