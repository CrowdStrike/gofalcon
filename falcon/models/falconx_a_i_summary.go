// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FalconxAISummary falconx a i summary
//
// swagger:model falconx.AISummary
type FalconxAISummary struct {

	// error message
	ErrorMessage string `json:"error_message,omitempty"`

	// report id
	// Required: true
	ReportID *string `json:"report_id"`

	// status
	// Required: true
	Status *string `json:"status"`

	// summary
	Summary string `json:"summary,omitempty"`

	// summary id
	// Required: true
	SummaryID *string `json:"summary_id"`

	// updated at
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`

	// version timestamp
	// Required: true
	// Format: date-time
	VersionTimestamp *strfmt.DateTime `json:"version_timestamp"`
}

// Validate validates this falconx a i summary
func (m *FalconxAISummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReportID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummaryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconxAISummary) validateReportID(formats strfmt.Registry) error {

	if err := validate.Required("report_id", "body", m.ReportID); err != nil {
		return err
	}

	return nil
}

func (m *FalconxAISummary) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *FalconxAISummary) validateSummaryID(formats strfmt.Registry) error {

	if err := validate.Required("summary_id", "body", m.SummaryID); err != nil {
		return err
	}

	return nil
}

func (m *FalconxAISummary) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FalconxAISummary) validateVersionTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("version_timestamp", "body", m.VersionTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("version_timestamp", "body", "date-time", m.VersionTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this falconx a i summary based on context it is used
func (m *FalconxAISummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FalconxAISummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FalconxAISummary) UnmarshalBinary(b []byte) error {
	var res FalconxAISummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
