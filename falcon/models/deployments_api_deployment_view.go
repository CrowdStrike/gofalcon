// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeploymentsAPIDeploymentView deployments API deployment view
//
// swagger:model deployments.APIDeploymentView
type DeploymentsAPIDeploymentView struct {

	// complete timestamp
	// Format: date-time
	CompleteTimestamp strfmt.DateTime `json:"complete_timestamp,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// modified by
	ModifiedBy string `json:"modified_by,omitempty"`

	// modified timestamp
	// Format: date-time
	ModifiedTimestamp strfmt.DateTime `json:"modified_timestamp,omitempty"`

	// rings
	Rings []*DeploymentsAPIDeploymentRingView `json:"rings"`

	// start timestamp
	// Format: date-time
	StartTimestamp strfmt.DateTime `json:"start_timestamp,omitempty"`

	// status
	// Required: true
	Status *string `json:"status"`

	// template id
	TemplateID string `json:"template_id,omitempty"`
}

// Validate validates this deployments API deployment view
func (m *DeploymentsAPIDeploymentView) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompleteTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentsAPIDeploymentView) validateCompleteTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.CompleteTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("complete_timestamp", "body", "date-time", m.CompleteTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentsAPIDeploymentView) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentsAPIDeploymentView) validateModifiedTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("modified_timestamp", "body", "date-time", m.ModifiedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentsAPIDeploymentView) validateRings(formats strfmt.Registry) error {
	if swag.IsZero(m.Rings) { // not required
		return nil
	}

	for i := 0; i < len(m.Rings); i++ {
		if swag.IsZero(m.Rings[i]) { // not required
			continue
		}

		if m.Rings[i] != nil {
			if err := m.Rings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentsAPIDeploymentView) validateStartTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("start_timestamp", "body", "date-time", m.StartTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentsAPIDeploymentView) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this deployments API deployment view based on the context it is used
func (m *DeploymentsAPIDeploymentView) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentsAPIDeploymentView) contextValidateRings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rings); i++ {

		if m.Rings[i] != nil {

			if swag.IsZero(m.Rings[i]) { // not required
				return nil
			}

			if err := m.Rings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentsAPIDeploymentView) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentsAPIDeploymentView) UnmarshalBinary(b []byte) error {
	var res DeploymentsAPIDeploymentView
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
