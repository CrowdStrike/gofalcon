// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsExtAPIImageCombined models ext API image combined
//
// swagger:model models.ExtAPIImageCombined
type ModelsExtAPIImageCombined struct {

	// base os
	// Required: true
	BaseOs *string `json:"base_os"`

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// containers
	// Required: true
	Containers *int64 `json:"containers"`

	// detections
	// Required: true
	Detections *int32 `json:"detections"`

	// first seen
	// Required: true
	FirstSeen *string `json:"first_seen"`

	// highest detection severity
	// Required: true
	HighestDetectionSeverity *string `json:"highest_detection_severity"`

	// highest vulnerability severity
	// Required: true
	HighestVulnerabilitySeverity *string `json:"highest_vulnerability_severity"`

	// image digest
	// Required: true
	ImageDigest *string `json:"image_digest"`

	// image id
	// Required: true
	ImageID *string `json:"image_id"`

	// last seen
	// Required: true
	LastSeen *string `json:"last_seen"`

	// layers with vulnerabilities
	// Required: true
	LayersWithVulnerabilities *int32 `json:"layers_with_vulnerabilities"`

	// packages
	// Required: true
	Packages *int32 `json:"packages"`

	// registry
	// Required: true
	Registry *string `json:"registry"`

	// report url by id and digest
	// Required: true
	ReportURLByIDAndDigest *string `json:"report_url_by_id_and_digest"`

	// report url by repo and tag
	// Required: true
	ReportURLByRepoAndTag *string `json:"report_url_by_repo_and_tag"`

	// repository
	// Required: true
	Repository *string `json:"repository"`

	// tag
	// Required: true
	Tag *string `json:"tag"`

	// vulnerabilities
	// Required: true
	Vulnerabilities *int32 `json:"vulnerabilities"`

	// warning
	// Required: true
	Warning *int32 `json:"warning"`
}

// Validate validates this models ext API image combined
func (m *ModelsExtAPIImageCombined) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstSeen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHighestDetectionSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHighestVulnerabilitySeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageDigest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSeen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLayersWithVulnerabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportURLByIDAndDigest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportURLByRepoAndTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVulnerabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarning(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsExtAPIImageCombined) validateBaseOs(formats strfmt.Registry) error {

	if err := validate.Required("base_os", "body", m.BaseOs); err != nil {
		return err
	}

	return nil
}

func (m *ModelsExtAPIImageCombined) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *ModelsExtAPIImageCombined) validateContainers(formats strfmt.Registry) error {

	if err := validate.Required("containers", "body", m.Containers); err != nil {
		return err
	}

	return nil
}

func (m *ModelsExtAPIImageCombined) validateDetections(formats strfmt.Registry) error {

	if err := validate.Required("detections", "body", m.Detections); err != nil {
		return err
	}

	return nil
}

func (m *ModelsExtAPIImageCombined) validateFirstSeen(formats strfmt.Registry) error {

	if err := validate.Required("first_seen", "body", m.FirstSeen); err != nil {
		return err
	}

	return nil
}

func (m *ModelsExtAPIImageCombined) validateHighestDetectionSeverity(formats strfmt.Registry) error {

	if err := validate.Required("highest_detection_severity", "body", m.HighestDetectionSeverity); err != nil {
		return err
	}

	return nil
}

func (m *ModelsExtAPIImageCombined) validateHighestVulnerabilitySeverity(formats strfmt.Registry) error {

	if err := validate.Required("highest_vulnerability_severity", "body", m.HighestVulnerabilitySeverity); err != nil {
		return err
	}

	return nil
}

func (m *ModelsExtAPIImageCombined) validateImageDigest(formats strfmt.Registry) error {

	if err := validate.Required("image_digest", "body", m.ImageDigest); err != nil {
		return err
	}

	return nil
}

func (m *ModelsExtAPIImageCombined) validateImageID(formats strfmt.Registry) error {

	if err := validate.Required("image_id", "body", m.ImageID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsExtAPIImageCombined) validateLastSeen(formats strfmt.Registry) error {

	if err := validate.Required("last_seen", "body", m.LastSeen); err != nil {
		return err
	}

	return nil
}

func (m *ModelsExtAPIImageCombined) validateLayersWithVulnerabilities(formats strfmt.Registry) error {

	if err := validate.Required("layers_with_vulnerabilities", "body", m.LayersWithVulnerabilities); err != nil {
		return err
	}

	return nil
}

func (m *ModelsExtAPIImageCombined) validatePackages(formats strfmt.Registry) error {

	if err := validate.Required("packages", "body", m.Packages); err != nil {
		return err
	}

	return nil
}

func (m *ModelsExtAPIImageCombined) validateRegistry(formats strfmt.Registry) error {

	if err := validate.Required("registry", "body", m.Registry); err != nil {
		return err
	}

	return nil
}

func (m *ModelsExtAPIImageCombined) validateReportURLByIDAndDigest(formats strfmt.Registry) error {

	if err := validate.Required("report_url_by_id_and_digest", "body", m.ReportURLByIDAndDigest); err != nil {
		return err
	}

	return nil
}

func (m *ModelsExtAPIImageCombined) validateReportURLByRepoAndTag(formats strfmt.Registry) error {

	if err := validate.Required("report_url_by_repo_and_tag", "body", m.ReportURLByRepoAndTag); err != nil {
		return err
	}

	return nil
}

func (m *ModelsExtAPIImageCombined) validateRepository(formats strfmt.Registry) error {

	if err := validate.Required("repository", "body", m.Repository); err != nil {
		return err
	}

	return nil
}

func (m *ModelsExtAPIImageCombined) validateTag(formats strfmt.Registry) error {

	if err := validate.Required("tag", "body", m.Tag); err != nil {
		return err
	}

	return nil
}

func (m *ModelsExtAPIImageCombined) validateVulnerabilities(formats strfmt.Registry) error {

	if err := validate.Required("vulnerabilities", "body", m.Vulnerabilities); err != nil {
		return err
	}

	return nil
}

func (m *ModelsExtAPIImageCombined) validateWarning(formats strfmt.Registry) error {

	if err := validate.Required("warning", "body", m.Warning); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models ext API image combined based on context it is used
func (m *ModelsExtAPIImageCombined) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsExtAPIImageCombined) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsExtAPIImageCombined) UnmarshalBinary(b []byte) error {
	var res ModelsExtAPIImageCombined
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
