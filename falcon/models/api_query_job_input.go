// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIQueryJobInput api query job input
//
// swagger:model api.QueryJobInput
type APIQueryJobInput struct {

	// Enables some LogScale functions, such as head() and tail(), to stop processing all data in the selected timeframe and exit the query early
	AllowEventSkipping bool `json:"allowEventSkipping,omitempty"`

	// JSON blob with parameters defined in query
	Arguments interface{} `json:"arguments,omitempty"`

	// Find events that occurred around the time of a specific event.
	Around *APIQueryJobAroundInput `json:"around,omitempty"`

	// The number of buckets the system should create during live query searches, when no other explicit bucketing aggregate is specified
	AutobucketCount int64 `json:"autobucketCount,omitempty"`

	// The date and time to use as the ending point of the search results
	End string `json:"end,omitempty"`

	// The end date and time applied for @ingesttimestamp
	IngestEnd string `json:"ingestEnd,omitempty"`

	// The end date and time applied for @ingesttimestamp
	IngestStart string `json:"ingestStart,omitempty"`

	// Sets whether this query is live. Defaults to false . Live queries are continuously updated.
	IsLive bool `json:"isLive,omitempty"`

	// The CQL query to use for the search
	// Required: true
	QueryString *string `json:"queryString"`

	// The date and time to use as the starting point of the search results
	Start string `json:"start,omitempty"`

	// The time zone to use if start and end times are not specified in milliseconds. Eg: UTC
	TimeZone string `json:"timeZone,omitempty"`

	// A positive or negative number representing how many minutes a given time zone is ahead or behind Coordinated Universal Time (UTC)
	TimeZoneOffsetMinutes int64 `json:"timeZoneOffsetMinutes,omitempty"`

	// When set to true, the eventâ€™s ingestStart and ingestEnd times are used as the basis for the query timespan rather than the start and end timestamps
	UseIngestTime bool `json:"useIngestTime,omitempty"`
}

// Validate validates this api query job input
func (m *APIQueryJobInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAround(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryString(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIQueryJobInput) validateAround(formats strfmt.Registry) error {
	if swag.IsZero(m.Around) { // not required
		return nil
	}

	if m.Around != nil {
		if err := m.Around.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("around")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("around")
			}
			return err
		}
	}

	return nil
}

func (m *APIQueryJobInput) validateQueryString(formats strfmt.Registry) error {

	if err := validate.Required("queryString", "body", m.QueryString); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this api query job input based on the context it is used
func (m *APIQueryJobInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAround(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIQueryJobInput) contextValidateAround(ctx context.Context, formats strfmt.Registry) error {

	if m.Around != nil {

		if swag.IsZero(m.Around) { // not required
			return nil
		}

		if err := m.Around.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("around")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("around")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIQueryJobInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIQueryJobInput) UnmarshalBinary(b []byte) error {
	var res APIQueryJobInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
