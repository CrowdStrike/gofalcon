// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainAPIAggregateFailedRulesByClustersV3 domain API aggregate failed rules by clusters v3
//
// swagger:model domain.APIAggregateFailedRulesByClustersV3
type DomainAPIAggregateFailedRulesByClustersV3 struct {

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// cluster derived id
	// Required: true
	ClusterDerivedID *string `json:"cluster_derived_id"`

	// cluster id
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// cluster name
	// Required: true
	ClusterName *string `json:"cluster_name"`

	// failed rules count
	// Required: true
	FailedRulesCount *int32 `json:"failed_rules_count"`

	// failed rules count by severity
	// Required: true
	FailedRulesCountBySeverity *DomainCountBySeverity `json:"failed_rules_count_by_severity"`
}

// Validate validates this domain API aggregate failed rules by clusters v3
func (m *DomainAPIAggregateFailedRulesByClustersV3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterDerivedID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedRulesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedRulesCountBySeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAPIAggregateFailedRulesByClustersV3) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateFailedRulesByClustersV3) validateClusterDerivedID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_derived_id", "body", m.ClusterDerivedID); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateFailedRulesByClustersV3) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateFailedRulesByClustersV3) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("cluster_name", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateFailedRulesByClustersV3) validateFailedRulesCount(formats strfmt.Registry) error {

	if err := validate.Required("failed_rules_count", "body", m.FailedRulesCount); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIAggregateFailedRulesByClustersV3) validateFailedRulesCountBySeverity(formats strfmt.Registry) error {

	if err := validate.Required("failed_rules_count_by_severity", "body", m.FailedRulesCountBySeverity); err != nil {
		return err
	}

	if m.FailedRulesCountBySeverity != nil {
		if err := m.FailedRulesCountBySeverity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failed_rules_count_by_severity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failed_rules_count_by_severity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this domain API aggregate failed rules by clusters v3 based on the context it is used
func (m *DomainAPIAggregateFailedRulesByClustersV3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFailedRulesCountBySeverity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAPIAggregateFailedRulesByClustersV3) contextValidateFailedRulesCountBySeverity(ctx context.Context, formats strfmt.Registry) error {

	if m.FailedRulesCountBySeverity != nil {

		if err := m.FailedRulesCountBySeverity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failed_rules_count_by_severity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failed_rules_count_by_severity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainAPIAggregateFailedRulesByClustersV3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainAPIAggregateFailedRulesByClustersV3) UnmarshalBinary(b []byte) error {
	var res DomainAPIAggregateFailedRulesByClustersV3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
