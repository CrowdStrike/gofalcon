// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsNode models node
//
// swagger:model models.Node
type ModelsNode struct {

	// agents
	// Required: true
	Agents []ModelsNodeAgents `json:"agents"`

	// annotations list
	// Required: true
	AnnotationsList []string `json:"annotations_list"`

	// architecture
	// Required: true
	Architecture *string `json:"architecture"`

	// base image
	// Required: true
	BaseImage *string `json:"base_image"`

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// cloud account id
	// Required: true
	CloudAccountID *string `json:"cloud_account_id"`

	// cloud instance id
	// Required: true
	CloudInstanceID *string `json:"cloud_instance_id"`

	// cloud instance type
	// Required: true
	CloudInstanceType *string `json:"cloud_instance_type"`

	// cloud name
	// Required: true
	CloudName *string `json:"cloud_name"`

	// cloud region
	// Required: true
	CloudRegion *string `json:"cloud_region"`

	// cluster id
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// cluster name
	// Required: true
	ClusterName *string `json:"cluster_name"`

	// container count
	// Required: true
	ContainerCount *int32 `json:"container_count"`

	// container runtime version
	// Required: true
	ContainerRuntimeVersion *string `json:"container_runtime_version"`

	// cpu
	// Required: true
	CPU *string `json:"cpu"`

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// external ip
	// Required: true
	ExternalIP *string `json:"external_ip"`

	// first seen
	// Required: true
	FirstSeen *string `json:"first_seen"`

	// ipv4
	// Required: true
	IPV4 *string `json:"ipv4"`

	// ipv6
	// Required: true
	IPV6 *string `json:"ipv6"`

	// kernel version
	// Required: true
	KernelVersion *string `json:"kernel_version"`

	// kubernetes version
	// Required: true
	KubernetesVersion *string `json:"kubernetes_version"`

	// labels
	// Required: true
	Labels map[string]string `json:"labels"`

	// labels list
	// Required: true
	LabelsList []string `json:"labels_list"`

	// last seen
	// Required: true
	LastSeen *string `json:"last_seen"`

	// memory
	// Required: true
	Memory *string `json:"memory"`

	// node id
	// Required: true
	NodeID *string `json:"node_id"`

	// node name
	// Required: true
	NodeName *string `json:"node_name"`

	// os
	// Required: true
	Os *string `json:"os"`

	// pod cidr
	// Required: true
	PodCidr *string `json:"pod_cidr"`

	// pod count
	// Required: true
	PodCount *int32 `json:"pod_count"`

	// provider id
	// Required: true
	ProviderID *string `json:"provider_id"`

	// storage
	// Required: true
	Storage *string `json:"storage"`

	// uid
	// Required: true
	UID *string `json:"uid"`
}

// Validate validates this models node
func (m *ModelsNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnnotationsList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchitecture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudInstanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerRuntimeVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstSeen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKernelVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSeen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodCidr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsNode) validateAgents(formats strfmt.Registry) error {

	if err := validate.Required("agents", "body", m.Agents); err != nil {
		return err
	}

	for i := 0; i < len(m.Agents); i++ {

		if m.Agents[i] != nil {
			if err := m.Agents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsNode) validateAnnotationsList(formats strfmt.Registry) error {

	if err := validate.Required("annotations_list", "body", m.AnnotationsList); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateArchitecture(formats strfmt.Registry) error {

	if err := validate.Required("architecture", "body", m.Architecture); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateBaseImage(formats strfmt.Registry) error {

	if err := validate.Required("base_image", "body", m.BaseImage); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateCloudAccountID(formats strfmt.Registry) error {

	if err := validate.Required("cloud_account_id", "body", m.CloudAccountID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateCloudInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("cloud_instance_id", "body", m.CloudInstanceID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateCloudInstanceType(formats strfmt.Registry) error {

	if err := validate.Required("cloud_instance_type", "body", m.CloudInstanceType); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateCloudName(formats strfmt.Registry) error {

	if err := validate.Required("cloud_name", "body", m.CloudName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateCloudRegion(formats strfmt.Registry) error {

	if err := validate.Required("cloud_region", "body", m.CloudRegion); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("cluster_name", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateContainerCount(formats strfmt.Registry) error {

	if err := validate.Required("container_count", "body", m.ContainerCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateContainerRuntimeVersion(formats strfmt.Registry) error {

	if err := validate.Required("container_runtime_version", "body", m.ContainerRuntimeVersion); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateCPU(formats strfmt.Registry) error {

	if err := validate.Required("cpu", "body", m.CPU); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateExternalIP(formats strfmt.Registry) error {

	if err := validate.Required("external_ip", "body", m.ExternalIP); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateFirstSeen(formats strfmt.Registry) error {

	if err := validate.Required("first_seen", "body", m.FirstSeen); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateIPV4(formats strfmt.Registry) error {

	if err := validate.Required("ipv4", "body", m.IPV4); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateIPV6(formats strfmt.Registry) error {

	if err := validate.Required("ipv6", "body", m.IPV6); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateKernelVersion(formats strfmt.Registry) error {

	if err := validate.Required("kernel_version", "body", m.KernelVersion); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateKubernetesVersion(formats strfmt.Registry) error {

	if err := validate.Required("kubernetes_version", "body", m.KubernetesVersion); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateLabels(formats strfmt.Registry) error {

	if err := validate.Required("labels", "body", m.Labels); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateLabelsList(formats strfmt.Registry) error {

	if err := validate.Required("labels_list", "body", m.LabelsList); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateLastSeen(formats strfmt.Registry) error {

	if err := validate.Required("last_seen", "body", m.LastSeen); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateMemory(formats strfmt.Registry) error {

	if err := validate.Required("memory", "body", m.Memory); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateNodeID(formats strfmt.Registry) error {

	if err := validate.Required("node_id", "body", m.NodeID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateNodeName(formats strfmt.Registry) error {

	if err := validate.Required("node_name", "body", m.NodeName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateOs(formats strfmt.Registry) error {

	if err := validate.Required("os", "body", m.Os); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validatePodCidr(formats strfmt.Registry) error {

	if err := validate.Required("pod_cidr", "body", m.PodCidr); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validatePodCount(formats strfmt.Registry) error {

	if err := validate.Required("pod_count", "body", m.PodCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateProviderID(formats strfmt.Registry) error {

	if err := validate.Required("provider_id", "body", m.ProviderID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateStorage(formats strfmt.Registry) error {

	if err := validate.Required("storage", "body", m.Storage); err != nil {
		return err
	}

	return nil
}

func (m *ModelsNode) validateUID(formats strfmt.Registry) error {

	if err := validate.Required("uid", "body", m.UID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this models node based on the context it is used
func (m *ModelsNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsNode) contextValidateAgents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Agents); i++ {

		if swag.IsZero(m.Agents[i]) { // not required
			return nil
		}

		if err := m.Agents[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agents" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agents" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsNode) UnmarshalBinary(b []byte) error {
	var res ModelsNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
