// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsAPIVulnerabilityCombined models API vulnerability combined
//
// swagger:model models.APIVulnerabilityCombined
type ModelsAPIVulnerabilityCombined struct {

	// containers impacted
	// Required: true
	ContainersImpacted *int64 `json:"containers_impacted"`

	// cps current rating
	// Required: true
	CpsCurrentRating *string `json:"cps_current_rating"`

	// cve id
	// Required: true
	CveID *string `json:"cve_id"`

	// cvss score
	// Required: true
	CvssScore *float32 `json:"cvss_score"`

	// description
	// Required: true
	Description *string `json:"description"`

	// exploit found
	// Required: true
	ExploitFound *bool `json:"exploit_found"`

	// exploited status
	// Required: true
	ExploitedStatus *int32 `json:"exploited_status"`

	// images impacted
	// Required: true
	ImagesImpacted *int64 `json:"images_impacted"`

	// packages impacted
	// Required: true
	PackagesImpacted *int64 `json:"packages_impacted"`

	// published date
	// Required: true
	PublishedDate *string `json:"published_date"`

	// remediation available
	// Required: true
	RemediationAvailable *bool `json:"remediation_available"`

	// severity
	// Required: true
	Severity *string `json:"severity"`
}

// Validate validates this models API vulnerability combined
func (m *ModelsAPIVulnerabilityCombined) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainersImpacted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCpsCurrentRating(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCveID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCvssScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExploitFound(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExploitedStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImagesImpacted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackagesImpacted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediationAvailable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIVulnerabilityCombined) validateContainersImpacted(formats strfmt.Registry) error {

	if err := validate.Required("containers_impacted", "body", m.ContainersImpacted); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityCombined) validateCpsCurrentRating(formats strfmt.Registry) error {

	if err := validate.Required("cps_current_rating", "body", m.CpsCurrentRating); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityCombined) validateCveID(formats strfmt.Registry) error {

	if err := validate.Required("cve_id", "body", m.CveID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityCombined) validateCvssScore(formats strfmt.Registry) error {

	if err := validate.Required("cvss_score", "body", m.CvssScore); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityCombined) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityCombined) validateExploitFound(formats strfmt.Registry) error {

	if err := validate.Required("exploit_found", "body", m.ExploitFound); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityCombined) validateExploitedStatus(formats strfmt.Registry) error {

	if err := validate.Required("exploited_status", "body", m.ExploitedStatus); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityCombined) validateImagesImpacted(formats strfmt.Registry) error {

	if err := validate.Required("images_impacted", "body", m.ImagesImpacted); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityCombined) validatePackagesImpacted(formats strfmt.Registry) error {

	if err := validate.Required("packages_impacted", "body", m.PackagesImpacted); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityCombined) validatePublishedDate(formats strfmt.Registry) error {

	if err := validate.Required("published_date", "body", m.PublishedDate); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityCombined) validateRemediationAvailable(formats strfmt.Registry) error {

	if err := validate.Required("remediation_available", "body", m.RemediationAvailable); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityCombined) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models API vulnerability combined based on context it is used
func (m *ModelsAPIVulnerabilityCombined) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsAPIVulnerabilityCombined) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsAPIVulnerabilityCombined) UnmarshalBinary(b []byte) error {
	var res ModelsAPIVulnerabilityCombined
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
