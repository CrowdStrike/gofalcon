// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VulncheckExploitThreatActor vulncheck exploit threat actor
//
// swagger:model vulncheck.ExploitThreatActor
type VulncheckExploitThreatActor struct {

	// cve references
	CveReferences []*VulncheckExploitCVEReference `json:"cve_references"`

	// malpedia url
	MalpediaURL string `json:"malpedia_url,omitempty"`

	// misp id
	MispID string `json:"misp_id,omitempty"`

	// misp threat actor names
	MispThreatActorNames []string `json:"misp_threat_actor_names"`

	// mitre id
	MitreID string `json:"mitre_id,omitempty"`

	// mitre threat actor names
	MitreThreatActorNames []string `json:"mitre_threat_actor_names"`

	// threat actor name
	ThreatActorName string `json:"threat_actor_name,omitempty"`

	// vendor names for threat actors
	VendorNamesForThreatActors []*VulncheckThreatActorVendorName `json:"vendor_names_for_threat_actors"`
}

// Validate validates this vulncheck exploit threat actor
func (m *VulncheckExploitThreatActor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCveReferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendorNamesForThreatActors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulncheckExploitThreatActor) validateCveReferences(formats strfmt.Registry) error {
	if swag.IsZero(m.CveReferences) { // not required
		return nil
	}

	for i := 0; i < len(m.CveReferences); i++ {
		if swag.IsZero(m.CveReferences[i]) { // not required
			continue
		}

		if m.CveReferences[i] != nil {
			if err := m.CveReferences[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cve_references" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cve_references" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VulncheckExploitThreatActor) validateVendorNamesForThreatActors(formats strfmt.Registry) error {
	if swag.IsZero(m.VendorNamesForThreatActors) { // not required
		return nil
	}

	for i := 0; i < len(m.VendorNamesForThreatActors); i++ {
		if swag.IsZero(m.VendorNamesForThreatActors[i]) { // not required
			continue
		}

		if m.VendorNamesForThreatActors[i] != nil {
			if err := m.VendorNamesForThreatActors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vendor_names_for_threat_actors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vendor_names_for_threat_actors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this vulncheck exploit threat actor based on the context it is used
func (m *VulncheckExploitThreatActor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCveReferences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVendorNamesForThreatActors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulncheckExploitThreatActor) contextValidateCveReferences(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CveReferences); i++ {

		if m.CveReferences[i] != nil {

			if swag.IsZero(m.CveReferences[i]) { // not required
				return nil
			}

			if err := m.CveReferences[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cve_references" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cve_references" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VulncheckExploitThreatActor) contextValidateVendorNamesForThreatActors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VendorNamesForThreatActors); i++ {

		if m.VendorNamesForThreatActors[i] != nil {

			if swag.IsZero(m.VendorNamesForThreatActors[i]) { // not required
				return nil
			}

			if err := m.VendorNamesForThreatActors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vendor_names_for_threat_actors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vendor_names_for_threat_actors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VulncheckExploitThreatActor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VulncheckExploitThreatActor) UnmarshalBinary(b []byte) error {
	var res VulncheckExploitThreatActor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
