// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainOCITenancyRotatedKey domain o c i tenancy rotated key
//
// swagger:model domain.OCITenancyRotatedKey
type DomainOCITenancyRotatedKey struct {

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// finger print
	// Required: true
	FingerPrint *string `json:"finger_print"`

	// public key
	// Required: true
	PublicKey *string `json:"public_key"`

	// tenancy ocid
	// Required: true
	TenancyOcid *string `json:"tenancy_ocid"`
}

// Validate validates this domain o c i tenancy rotated key
func (m *DomainOCITenancyRotatedKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFingerPrint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenancyOcid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainOCITenancyRotatedKey) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyRotatedKey) validateFingerPrint(formats strfmt.Registry) error {

	if err := validate.Required("finger_print", "body", m.FingerPrint); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyRotatedKey) validatePublicKey(formats strfmt.Registry) error {

	if err := validate.Required("public_key", "body", m.PublicKey); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyRotatedKey) validateTenancyOcid(formats strfmt.Registry) error {

	if err := validate.Required("tenancy_ocid", "body", m.TenancyOcid); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain o c i tenancy rotated key based on context it is used
func (m *DomainOCITenancyRotatedKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainOCITenancyRotatedKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainOCITenancyRotatedKey) UnmarshalBinary(b []byte) error {
	var res DomainOCITenancyRotatedKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
