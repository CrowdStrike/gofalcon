// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JsonschemaSubSchema jsonschema sub schema
//
// swagger:model jsonschema.SubSchema
type JsonschemaSubSchema struct {

	// dollar ref
	DollarRef string `json:"$ref,omitempty"`

	// dollar schema
	DollarSchema string `json:"$schema,omitempty"`

	// additional items
	AdditionalItems string `json:"additionalItems,omitempty"`

	// additional properties
	AdditionalProperties string `json:"additionalProperties,omitempty"`

	// all of
	AllOf []*JsonschemaSubSchema `json:"allOf"`

	// any of
	AnyOf []*JsonschemaSubSchema `json:"anyOf"`

	// binary encoding
	BinaryEncoding string `json:"binaryEncoding,omitempty"`

	// const
	Const JsonschemaSubSchemaConst `json:"const,omitempty"`

	// default
	Default JsonschemaSubSchemaDefault `json:"default,omitempty"`

	// dependencies
	Dependencies map[string]JsonschemaSubSchema `json:"dependencies,omitempty"`

	// deprecated
	Deprecated bool `json:"deprecated,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// else
	Else *JsonschemaSubSchema `json:"else,omitempty"`

	// enum
	Enum []JsonschemaSubSchemaEnum `json:"enum"`

	// error message
	ErrorMessage string `json:"errorMessage,omitempty"`

	// examples
	Examples []JsonschemaSubSchemaExamples `json:"examples"`

	// exclusive maximum
	ExclusiveMaximum bool `json:"exclusiveMaximum,omitempty"`

	// exclusive minimum
	ExclusiveMinimum bool `json:"exclusiveMinimum,omitempty"`

	// format
	Format string `json:"format,omitempty"`

	// if
	If *JsonschemaSubSchema `json:"if,omitempty"`

	// items
	Items *JsonschemaSubSchema `json:"items,omitempty"`

	// max items
	MaxItems int32 `json:"maxItems,omitempty"`

	// max length
	MaxLength int32 `json:"maxLength,omitempty"`

	// max properties
	MaxProperties int32 `json:"maxProperties,omitempty"`

	// maximum
	Maximum int32 `json:"maximum,omitempty"`

	// media
	Media *JsonschemaSubSchema `json:"media,omitempty"`

	// min items
	MinItems int32 `json:"minItems,omitempty"`

	// min length
	MinLength int32 `json:"minLength,omitempty"`

	// min properties
	MinProperties int32 `json:"minProperties,omitempty"`

	// minimum
	Minimum int32 `json:"minimum,omitempty"`

	// multiple of
	MultipleOf int32 `json:"multipleOf,omitempty"`

	// not
	Not *JsonschemaSubSchema `json:"not,omitempty"`

	// one of
	OneOf []*JsonschemaSubSchema `json:"oneOf"`

	// pattern
	Pattern string `json:"pattern,omitempty"`

	// pattern properties
	PatternProperties map[string]JsonschemaSubSchema `json:"patternProperties,omitempty"`

	// properties
	Properties map[string]JsonschemaSubSchema `json:"properties,omitempty"`

	// required
	Required []string `json:"required"`

	// then
	Then *JsonschemaSubSchema `json:"then,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// ui component
	UIComponent string `json:"ui:component,omitempty"`

	// unique items
	UniqueItems bool `json:"uniqueItems,omitempty"`

	// x cs authorization
	XCsAuthorization *JsonschemaAuthorization `json:"x-cs-authorization,omitempty"`

	// x cs can create
	XCsCanCreate bool `json:"x-cs-can-create,omitempty"`

	// x cs condition group fields
	XCsConditionGroupFields *JsonschemaConditionGroupFields `json:"x-cs-condition-group-fields,omitempty"`

	// x cs do not hide
	XCsDoNotHide bool `json:"x-cs-do-not-hide,omitempty"`

	// x cs immutable
	XCsImmutable bool `json:"x-cs-immutable,omitempty"`

	// x cs indexable
	XCsIndexable bool `json:"x-cs-indexable,omitempty"`

	// x cs indexable fields
	XCsIndexableFields []*JsonschemaCollectionIndexField `json:"x-cs-indexable-fields"`

	// x cs max duration
	XCsMaxDuration int32 `json:"x-cs-max-duration,omitempty"`

	// x cs min duration
	XCsMinDuration int32 `json:"x-cs-min-duration,omitempty"`

	// x cs not parameterizable
	XCsNotParameterizable bool `json:"x-cs-not-parameterizable,omitempty"`

	// x cs order
	XCsOrder []string `json:"x-cs-order"`

	// x cs pivot
	XCsPivot *JsonschemaPivot `json:"x-cs-pivot,omitempty"`

	// x cs signals
	XCsSignals *JsonschemaSignalsExtensions `json:"x-cs-signals,omitempty"`

	// x cs signals category
	XCsSignalsCategory string `json:"x-cs-signals-category,omitempty"`

	// x cs signals operators
	XCsSignalsOperators []string `json:"x-cs-signals-operators"`

	// x cs signals sub category
	XCsSignalsSubCategory string `json:"x-cs-signals-subCategory,omitempty"`

	// x cs tags
	XCsTags []string `json:"x-cs-tags"`

	// x cs ui
	XCsUI *JsonschemaUIExtensions `json:"x-cs-ui,omitempty"`

	// x cs workflow
	XCsWorkflow *JsonschemaWorkflowExtensions `json:"x-cs-workflow,omitempty"`
}

// Validate validates this jsonschema sub schema
func (m *JsonschemaSubSchema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllOf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnyOf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMedia(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOneOf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePatternProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXCsAuthorization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXCsConditionGroupFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXCsIndexableFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXCsPivot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXCsSignals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXCsUI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXCsWorkflow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JsonschemaSubSchema) validateAllOf(formats strfmt.Registry) error {
	if swag.IsZero(m.AllOf) { // not required
		return nil
	}

	for i := 0; i < len(m.AllOf); i++ {
		if swag.IsZero(m.AllOf[i]) { // not required
			continue
		}

		if m.AllOf[i] != nil {
			if err := m.AllOf[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("allOf" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("allOf" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JsonschemaSubSchema) validateAnyOf(formats strfmt.Registry) error {
	if swag.IsZero(m.AnyOf) { // not required
		return nil
	}

	for i := 0; i < len(m.AnyOf); i++ {
		if swag.IsZero(m.AnyOf[i]) { // not required
			continue
		}

		if m.AnyOf[i] != nil {
			if err := m.AnyOf[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("anyOf" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("anyOf" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JsonschemaSubSchema) validateDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.Dependencies) { // not required
		return nil
	}

	for k := range m.Dependencies {

		if err := validate.Required("dependencies"+"."+k, "body", m.Dependencies[k]); err != nil {
			return err
		}
		if val, ok := m.Dependencies[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependencies" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dependencies" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *JsonschemaSubSchema) validateElse(formats strfmt.Registry) error {
	if swag.IsZero(m.Else) { // not required
		return nil
	}

	if m.Else != nil {
		if err := m.Else.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("else")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("else")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaSubSchema) validateIf(formats strfmt.Registry) error {
	if swag.IsZero(m.If) { // not required
		return nil
	}

	if m.If != nil {
		if err := m.If.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("if")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("if")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaSubSchema) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(m.Items) { // not required
		return nil
	}

	if m.Items != nil {
		if err := m.Items.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("items")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("items")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaSubSchema) validateMedia(formats strfmt.Registry) error {
	if swag.IsZero(m.Media) { // not required
		return nil
	}

	if m.Media != nil {
		if err := m.Media.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("media")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("media")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaSubSchema) validateNot(formats strfmt.Registry) error {
	if swag.IsZero(m.Not) { // not required
		return nil
	}

	if m.Not != nil {
		if err := m.Not.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("not")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaSubSchema) validateOneOf(formats strfmt.Registry) error {
	if swag.IsZero(m.OneOf) { // not required
		return nil
	}

	for i := 0; i < len(m.OneOf); i++ {
		if swag.IsZero(m.OneOf[i]) { // not required
			continue
		}

		if m.OneOf[i] != nil {
			if err := m.OneOf[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("oneOf" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("oneOf" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JsonschemaSubSchema) validatePatternProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.PatternProperties) { // not required
		return nil
	}

	for k := range m.PatternProperties {

		if err := validate.Required("patternProperties"+"."+k, "body", m.PatternProperties[k]); err != nil {
			return err
		}
		if val, ok := m.PatternProperties[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("patternProperties" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("patternProperties" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *JsonschemaSubSchema) validateProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	for k := range m.Properties {

		if err := validate.Required("properties"+"."+k, "body", m.Properties[k]); err != nil {
			return err
		}
		if val, ok := m.Properties[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("properties" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("properties" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *JsonschemaSubSchema) validateThen(formats strfmt.Registry) error {
	if swag.IsZero(m.Then) { // not required
		return nil
	}

	if m.Then != nil {
		if err := m.Then.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("then")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("then")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaSubSchema) validateXCsAuthorization(formats strfmt.Registry) error {
	if swag.IsZero(m.XCsAuthorization) { // not required
		return nil
	}

	if m.XCsAuthorization != nil {
		if err := m.XCsAuthorization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("x-cs-authorization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("x-cs-authorization")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaSubSchema) validateXCsConditionGroupFields(formats strfmt.Registry) error {
	if swag.IsZero(m.XCsConditionGroupFields) { // not required
		return nil
	}

	if m.XCsConditionGroupFields != nil {
		if err := m.XCsConditionGroupFields.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("x-cs-condition-group-fields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("x-cs-condition-group-fields")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaSubSchema) validateXCsIndexableFields(formats strfmt.Registry) error {
	if swag.IsZero(m.XCsIndexableFields) { // not required
		return nil
	}

	for i := 0; i < len(m.XCsIndexableFields); i++ {
		if swag.IsZero(m.XCsIndexableFields[i]) { // not required
			continue
		}

		if m.XCsIndexableFields[i] != nil {
			if err := m.XCsIndexableFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("x-cs-indexable-fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("x-cs-indexable-fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JsonschemaSubSchema) validateXCsPivot(formats strfmt.Registry) error {
	if swag.IsZero(m.XCsPivot) { // not required
		return nil
	}

	if m.XCsPivot != nil {
		if err := m.XCsPivot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("x-cs-pivot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("x-cs-pivot")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaSubSchema) validateXCsSignals(formats strfmt.Registry) error {
	if swag.IsZero(m.XCsSignals) { // not required
		return nil
	}

	if m.XCsSignals != nil {
		if err := m.XCsSignals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("x-cs-signals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("x-cs-signals")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaSubSchema) validateXCsUI(formats strfmt.Registry) error {
	if swag.IsZero(m.XCsUI) { // not required
		return nil
	}

	if m.XCsUI != nil {
		if err := m.XCsUI.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("x-cs-ui")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("x-cs-ui")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaSubSchema) validateXCsWorkflow(formats strfmt.Registry) error {
	if swag.IsZero(m.XCsWorkflow) { // not required
		return nil
	}

	if m.XCsWorkflow != nil {
		if err := m.XCsWorkflow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("x-cs-workflow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("x-cs-workflow")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this jsonschema sub schema based on the context it is used
func (m *JsonschemaSubSchema) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllOf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAnyOf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMedia(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOneOf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePatternProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThen(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateXCsAuthorization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateXCsConditionGroupFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateXCsIndexableFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateXCsPivot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateXCsSignals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateXCsUI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateXCsWorkflow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JsonschemaSubSchema) contextValidateAllOf(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AllOf); i++ {

		if m.AllOf[i] != nil {

			if swag.IsZero(m.AllOf[i]) { // not required
				return nil
			}

			if err := m.AllOf[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("allOf" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("allOf" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JsonschemaSubSchema) contextValidateAnyOf(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AnyOf); i++ {

		if m.AnyOf[i] != nil {

			if swag.IsZero(m.AnyOf[i]) { // not required
				return nil
			}

			if err := m.AnyOf[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("anyOf" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("anyOf" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JsonschemaSubSchema) contextValidateDependencies(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Dependencies {

		if val, ok := m.Dependencies[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *JsonschemaSubSchema) contextValidateElse(ctx context.Context, formats strfmt.Registry) error {

	if m.Else != nil {

		if swag.IsZero(m.Else) { // not required
			return nil
		}

		if err := m.Else.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("else")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("else")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaSubSchema) contextValidateIf(ctx context.Context, formats strfmt.Registry) error {

	if m.If != nil {

		if swag.IsZero(m.If) { // not required
			return nil
		}

		if err := m.If.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("if")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("if")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaSubSchema) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	if m.Items != nil {

		if swag.IsZero(m.Items) { // not required
			return nil
		}

		if err := m.Items.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("items")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("items")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaSubSchema) contextValidateMedia(ctx context.Context, formats strfmt.Registry) error {

	if m.Media != nil {

		if swag.IsZero(m.Media) { // not required
			return nil
		}

		if err := m.Media.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("media")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("media")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaSubSchema) contextValidateNot(ctx context.Context, formats strfmt.Registry) error {

	if m.Not != nil {

		if swag.IsZero(m.Not) { // not required
			return nil
		}

		if err := m.Not.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("not")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaSubSchema) contextValidateOneOf(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OneOf); i++ {

		if m.OneOf[i] != nil {

			if swag.IsZero(m.OneOf[i]) { // not required
				return nil
			}

			if err := m.OneOf[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("oneOf" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("oneOf" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JsonschemaSubSchema) contextValidatePatternProperties(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.PatternProperties {

		if val, ok := m.PatternProperties[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *JsonschemaSubSchema) contextValidateProperties(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Properties {

		if val, ok := m.Properties[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *JsonschemaSubSchema) contextValidateThen(ctx context.Context, formats strfmt.Registry) error {

	if m.Then != nil {

		if swag.IsZero(m.Then) { // not required
			return nil
		}

		if err := m.Then.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("then")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("then")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaSubSchema) contextValidateXCsAuthorization(ctx context.Context, formats strfmt.Registry) error {

	if m.XCsAuthorization != nil {

		if swag.IsZero(m.XCsAuthorization) { // not required
			return nil
		}

		if err := m.XCsAuthorization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("x-cs-authorization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("x-cs-authorization")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaSubSchema) contextValidateXCsConditionGroupFields(ctx context.Context, formats strfmt.Registry) error {

	if m.XCsConditionGroupFields != nil {

		if swag.IsZero(m.XCsConditionGroupFields) { // not required
			return nil
		}

		if err := m.XCsConditionGroupFields.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("x-cs-condition-group-fields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("x-cs-condition-group-fields")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaSubSchema) contextValidateXCsIndexableFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.XCsIndexableFields); i++ {

		if m.XCsIndexableFields[i] != nil {

			if swag.IsZero(m.XCsIndexableFields[i]) { // not required
				return nil
			}

			if err := m.XCsIndexableFields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("x-cs-indexable-fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("x-cs-indexable-fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JsonschemaSubSchema) contextValidateXCsPivot(ctx context.Context, formats strfmt.Registry) error {

	if m.XCsPivot != nil {

		if swag.IsZero(m.XCsPivot) { // not required
			return nil
		}

		if err := m.XCsPivot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("x-cs-pivot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("x-cs-pivot")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaSubSchema) contextValidateXCsSignals(ctx context.Context, formats strfmt.Registry) error {

	if m.XCsSignals != nil {

		if swag.IsZero(m.XCsSignals) { // not required
			return nil
		}

		if err := m.XCsSignals.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("x-cs-signals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("x-cs-signals")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaSubSchema) contextValidateXCsUI(ctx context.Context, formats strfmt.Registry) error {

	if m.XCsUI != nil {

		if swag.IsZero(m.XCsUI) { // not required
			return nil
		}

		if err := m.XCsUI.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("x-cs-ui")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("x-cs-ui")
			}
			return err
		}
	}

	return nil
}

func (m *JsonschemaSubSchema) contextValidateXCsWorkflow(ctx context.Context, formats strfmt.Registry) error {

	if m.XCsWorkflow != nil {

		if swag.IsZero(m.XCsWorkflow) { // not required
			return nil
		}

		if err := m.XCsWorkflow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("x-cs-workflow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("x-cs-workflow")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JsonschemaSubSchema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JsonschemaSubSchema) UnmarshalBinary(b []byte) error {
	var res JsonschemaSubSchema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
