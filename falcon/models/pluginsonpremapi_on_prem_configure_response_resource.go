// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PluginsonpremapiOnPremConfigureResponseResource pluginsonpremapi on prem configure response resource
//
// swagger:model pluginsonpremapi.OnPremConfigureResponseResource
type PluginsonpremapiOnPremConfigureResponseResource struct {

	// eligible devices
	// Required: true
	EligibleDevices []*PluginsonpremapiEligibleDevice `json:"eligible_devices"`

	// host group id
	// Required: true
	HostGroupID *string `json:"host_group_id"`

	// ineligible devices
	// Required: true
	IneligibleDevices []*PluginsonpremapiIneligibleDevice `json:"ineligible_devices"`

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this pluginsonpremapi on prem configure response resource
func (m *PluginsonpremapiOnPremConfigureResponseResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEligibleDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIneligibleDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PluginsonpremapiOnPremConfigureResponseResource) validateEligibleDevices(formats strfmt.Registry) error {

	if err := validate.Required("eligible_devices", "body", m.EligibleDevices); err != nil {
		return err
	}

	for i := 0; i < len(m.EligibleDevices); i++ {
		if swag.IsZero(m.EligibleDevices[i]) { // not required
			continue
		}

		if m.EligibleDevices[i] != nil {
			if err := m.EligibleDevices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eligible_devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("eligible_devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PluginsonpremapiOnPremConfigureResponseResource) validateHostGroupID(formats strfmt.Registry) error {

	if err := validate.Required("host_group_id", "body", m.HostGroupID); err != nil {
		return err
	}

	return nil
}

func (m *PluginsonpremapiOnPremConfigureResponseResource) validateIneligibleDevices(formats strfmt.Registry) error {

	if err := validate.Required("ineligible_devices", "body", m.IneligibleDevices); err != nil {
		return err
	}

	for i := 0; i < len(m.IneligibleDevices); i++ {
		if swag.IsZero(m.IneligibleDevices[i]) { // not required
			continue
		}

		if m.IneligibleDevices[i] != nil {
			if err := m.IneligibleDevices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ineligible_devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ineligible_devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PluginsonpremapiOnPremConfigureResponseResource) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this pluginsonpremapi on prem configure response resource based on the context it is used
func (m *PluginsonpremapiOnPremConfigureResponseResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEligibleDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIneligibleDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PluginsonpremapiOnPremConfigureResponseResource) contextValidateEligibleDevices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EligibleDevices); i++ {

		if m.EligibleDevices[i] != nil {

			if swag.IsZero(m.EligibleDevices[i]) { // not required
				return nil
			}

			if err := m.EligibleDevices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eligible_devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("eligible_devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PluginsonpremapiOnPremConfigureResponseResource) contextValidateIneligibleDevices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IneligibleDevices); i++ {

		if m.IneligibleDevices[i] != nil {

			if swag.IsZero(m.IneligibleDevices[i]) { // not required
				return nil
			}

			if err := m.IneligibleDevices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ineligible_devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ineligible_devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PluginsonpremapiOnPremConfigureResponseResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PluginsonpremapiOnPremConfigureResponseResource) UnmarshalBinary(b []byte) error {
	var res PluginsonpremapiOnPremConfigureResponseResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
