// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainProductFeatureStatus domain product feature status
//
// swagger:model domain.ProductFeatureStatus
type DomainProductFeatureStatus struct {

	// conditions
	// Required: true
	Conditions []*DomainProductFeatureStatusConditions `json:"conditions"`

	// OCI Tenancy registration deployment method
	// Required: true
	DeploymentMethod *string `json:"deployment_method"`

	// Feature enabled or not
	// Required: true
	IsEnabled *bool `json:"is_enabled"`

	// OCI Tenancy registration permission issues
	Issues []*DomainOCIIssue `json:"issues"`

	// Permissions status returned via API.
	// Required: true
	PermissionsStatus []*DomainOCIPermission `json:"permissions_status"`

	// Person who register OCI Tenancy
	// Required: true
	Persona *string `json:"persona"`

	// OCI Tenancy detailed status
	// Required: true
	RegistrationDetailedStatus *string `json:"registration_detailed_status"`

	// Feature status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this domain product feature status
func (m *DomainProductFeatureStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissionsStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersona(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationDetailedStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainProductFeatureStatus) validateConditions(formats strfmt.Registry) error {

	if err := validate.Required("conditions", "body", m.Conditions); err != nil {
		return err
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainProductFeatureStatus) validateDeploymentMethod(formats strfmt.Registry) error {

	if err := validate.Required("deployment_method", "body", m.DeploymentMethod); err != nil {
		return err
	}

	return nil
}

func (m *DomainProductFeatureStatus) validateIsEnabled(formats strfmt.Registry) error {

	if err := validate.Required("is_enabled", "body", m.IsEnabled); err != nil {
		return err
	}

	return nil
}

func (m *DomainProductFeatureStatus) validateIssues(formats strfmt.Registry) error {
	if swag.IsZero(m.Issues) { // not required
		return nil
	}

	for i := 0; i < len(m.Issues); i++ {
		if swag.IsZero(m.Issues[i]) { // not required
			continue
		}

		if m.Issues[i] != nil {
			if err := m.Issues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("issues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("issues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainProductFeatureStatus) validatePermissionsStatus(formats strfmt.Registry) error {

	if err := validate.Required("permissions_status", "body", m.PermissionsStatus); err != nil {
		return err
	}

	for i := 0; i < len(m.PermissionsStatus); i++ {
		if swag.IsZero(m.PermissionsStatus[i]) { // not required
			continue
		}

		if m.PermissionsStatus[i] != nil {
			if err := m.PermissionsStatus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("permissions_status" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("permissions_status" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainProductFeatureStatus) validatePersona(formats strfmt.Registry) error {

	if err := validate.Required("persona", "body", m.Persona); err != nil {
		return err
	}

	return nil
}

func (m *DomainProductFeatureStatus) validateRegistrationDetailedStatus(formats strfmt.Registry) error {

	if err := validate.Required("registration_detailed_status", "body", m.RegistrationDetailedStatus); err != nil {
		return err
	}

	return nil
}

func (m *DomainProductFeatureStatus) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this domain product feature status based on the context it is used
func (m *DomainProductFeatureStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIssues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermissionsStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainProductFeatureStatus) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {

			if swag.IsZero(m.Conditions[i]) { // not required
				return nil
			}

			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainProductFeatureStatus) contextValidateIssues(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Issues); i++ {

		if m.Issues[i] != nil {

			if swag.IsZero(m.Issues[i]) { // not required
				return nil
			}

			if err := m.Issues[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("issues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("issues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainProductFeatureStatus) contextValidatePermissionsStatus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PermissionsStatus); i++ {

		if m.PermissionsStatus[i] != nil {

			if swag.IsZero(m.PermissionsStatus[i]) { // not required
				return nil
			}

			if err := m.PermissionsStatus[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("permissions_status" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("permissions_status" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainProductFeatureStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainProductFeatureStatus) UnmarshalBinary(b []byte) error {
	var res DomainProductFeatureStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
