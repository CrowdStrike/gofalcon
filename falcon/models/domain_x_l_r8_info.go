// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainXLR8Info domain x l r8 info
//
// swagger:model domain.XLR8Info
type DomainXLR8Info struct {

	// asset criticality
	// Required: true
	AssetCriticality *string `json:"asset_criticality"`

	// internet exposed
	// Required: true
	InternetExposed *bool `json:"internet_exposed"`

	// risk score
	// Required: true
	RiskScore *int32 `json:"risk_score"`

	// risk score string
	// Required: true
	RiskScoreString *string `json:"risk_score_string"`
}

// Validate validates this domain x l r8 info
func (m *DomainXLR8Info) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssetCriticality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInternetExposed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRiskScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRiskScoreString(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainXLR8Info) validateAssetCriticality(formats strfmt.Registry) error {

	if err := validate.Required("asset_criticality", "body", m.AssetCriticality); err != nil {
		return err
	}

	return nil
}

func (m *DomainXLR8Info) validateInternetExposed(formats strfmt.Registry) error {

	if err := validate.Required("internet_exposed", "body", m.InternetExposed); err != nil {
		return err
	}

	return nil
}

func (m *DomainXLR8Info) validateRiskScore(formats strfmt.Registry) error {

	if err := validate.Required("risk_score", "body", m.RiskScore); err != nil {
		return err
	}

	return nil
}

func (m *DomainXLR8Info) validateRiskScoreString(formats strfmt.Registry) error {

	if err := validate.Required("risk_score_string", "body", m.RiskScoreString); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain x l r8 info based on context it is used
func (m *DomainXLR8Info) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainXLR8Info) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainXLR8Info) UnmarshalBinary(b []byte) error {
	var res DomainXLR8Info
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
