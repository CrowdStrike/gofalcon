// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainBaseAPIVulnerabilityV2 domain base API vulnerability v2
//
// swagger:model domain.BaseAPIVulnerabilityV2
type DomainBaseAPIVulnerabilityV2 struct {

	// aid
	// Required: true
	Aid *string `json:"aid"`

	// app
	App *DomainAPIVulnerabilityAppV2 `json:"app,omitempty"`

	// apps
	Apps []*DomainAPIVulnerabilityExtendedAppV2 `json:"apps"`

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// closed timestamp
	ClosedTimestamp string `json:"closed_timestamp,omitempty"`

	// created timestamp
	// Required: true
	CreatedTimestamp *string `json:"created_timestamp"`

	// cve
	Cve *DomainAPIVulnerabilityCVEDetailsFacetV2 `json:"cve,omitempty"`

	// host info
	HostInfo *DomainAPIVulnerabilityHostFacetV2 `json:"host_info,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// remediation
	Remediation *DomainAPIVulnerabilityRemediationFacetV2 `json:"remediation,omitempty"`

	// status
	// Required: true
	Status *string `json:"status"`

	// suppression info
	SuppressionInfo *DomainAPIVulnerabilitySuppressionInfoV2 `json:"suppression_info,omitempty"`

	// updated timestamp
	// Required: true
	UpdatedTimestamp *string `json:"updated_timestamp"`
}

// Validate validates this domain base API vulnerability v2
func (m *DomainBaseAPIVulnerabilityV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCve(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuppressionInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainBaseAPIVulnerabilityV2) validateAid(formats strfmt.Registry) error {

	if err := validate.Required("aid", "body", m.Aid); err != nil {
		return err
	}

	return nil
}

func (m *DomainBaseAPIVulnerabilityV2) validateApp(formats strfmt.Registry) error {
	if swag.IsZero(m.App) { // not required
		return nil
	}

	if m.App != nil {
		if err := m.App.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("app")
			}
			return err
		}
	}

	return nil
}

func (m *DomainBaseAPIVulnerabilityV2) validateApps(formats strfmt.Registry) error {
	if swag.IsZero(m.Apps) { // not required
		return nil
	}

	for i := 0; i < len(m.Apps); i++ {
		if swag.IsZero(m.Apps[i]) { // not required
			continue
		}

		if m.Apps[i] != nil {
			if err := m.Apps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("apps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("apps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainBaseAPIVulnerabilityV2) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *DomainBaseAPIVulnerabilityV2) validateCreatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("created_timestamp", "body", m.CreatedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *DomainBaseAPIVulnerabilityV2) validateCve(formats strfmt.Registry) error {
	if swag.IsZero(m.Cve) { // not required
		return nil
	}

	if m.Cve != nil {
		if err := m.Cve.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cve")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cve")
			}
			return err
		}
	}

	return nil
}

func (m *DomainBaseAPIVulnerabilityV2) validateHostInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.HostInfo) { // not required
		return nil
	}

	if m.HostInfo != nil {
		if err := m.HostInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host_info")
			}
			return err
		}
	}

	return nil
}

func (m *DomainBaseAPIVulnerabilityV2) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DomainBaseAPIVulnerabilityV2) validateRemediation(formats strfmt.Registry) error {
	if swag.IsZero(m.Remediation) { // not required
		return nil
	}

	if m.Remediation != nil {
		if err := m.Remediation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remediation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remediation")
			}
			return err
		}
	}

	return nil
}

func (m *DomainBaseAPIVulnerabilityV2) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *DomainBaseAPIVulnerabilityV2) validateSuppressionInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SuppressionInfo) { // not required
		return nil
	}

	if m.SuppressionInfo != nil {
		if err := m.SuppressionInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("suppression_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("suppression_info")
			}
			return err
		}
	}

	return nil
}

func (m *DomainBaseAPIVulnerabilityV2) validateUpdatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("updated_timestamp", "body", m.UpdatedTimestamp); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this domain base API vulnerability v2 based on the context it is used
func (m *DomainBaseAPIVulnerabilityV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateApps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCve(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemediation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSuppressionInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainBaseAPIVulnerabilityV2) contextValidateApp(ctx context.Context, formats strfmt.Registry) error {

	if m.App != nil {
		if err := m.App.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("app")
			}
			return err
		}
	}

	return nil
}

func (m *DomainBaseAPIVulnerabilityV2) contextValidateApps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Apps); i++ {

		if m.Apps[i] != nil {
			if err := m.Apps[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("apps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("apps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainBaseAPIVulnerabilityV2) contextValidateCve(ctx context.Context, formats strfmt.Registry) error {

	if m.Cve != nil {
		if err := m.Cve.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cve")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cve")
			}
			return err
		}
	}

	return nil
}

func (m *DomainBaseAPIVulnerabilityV2) contextValidateHostInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.HostInfo != nil {
		if err := m.HostInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host_info")
			}
			return err
		}
	}

	return nil
}

func (m *DomainBaseAPIVulnerabilityV2) contextValidateRemediation(ctx context.Context, formats strfmt.Registry) error {

	if m.Remediation != nil {
		if err := m.Remediation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remediation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remediation")
			}
			return err
		}
	}

	return nil
}

func (m *DomainBaseAPIVulnerabilityV2) contextValidateSuppressionInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SuppressionInfo != nil {
		if err := m.SuppressionInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("suppression_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("suppression_info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainBaseAPIVulnerabilityV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainBaseAPIVulnerabilityV2) UnmarshalBinary(b []byte) error {
	var res DomainBaseAPIVulnerabilityV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
