// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceControlExceptionReqV1 device control exception req v1
//
// swagger:model device_control.ExceptionReqV1
type DeviceControlExceptionReqV1 struct {

	// Action to be taken for devices matching this exception. Note: BLOCK_EXECUTE and BLOCK_WRITE_EXECUTE only valid for MASS_STORAGE class
	// Enum: [FULL_ACCESS BLOCK_ALL BLOCK_EXECUTE BLOCK_WRITE_EXECUTE]
	Action string `json:"action,omitempty"`

	// Combined identifier in the format 'vendorID_productID_serialNumber'. Not allowed if use_wildcard is true.
	CombinedID string `json:"combined_id,omitempty"`

	// Description for this exception. Maximum length: 512 characters.
	Description string `json:"description,omitempty"`

	// yyyy-mm-ddThh:mm:ssZ (UTC) format of the time to remove the exception if temporary. Must be in the future.
	// Format: date-time
	ExpirationTime strfmt.DateTime `json:"expiration_time,omitempty"`

	// Unique identifier for an exception. If omitted, a new exception will be created.
	ID string `json:"id,omitempty"`

	// Hexadecimal ProductID used to apply the exception. Must be a valid hex value representing a decimal value less than 65535. Only one of product_id or product_id_decimal is required.
	ProductID string `json:"product_id,omitempty"`

	// Decimal ProductID used to apply the exception. Must be a valid decimal value less than 65535. Only one of product_id or product_id_decimal is required.
	ProductIDDecimal string `json:"product_id_decimal,omitempty"`

	// Product Name, optional.
	ProductName string `json:"product_name,omitempty"`

	// Serial number of the USB device. Maximum length: 126 characters. Required when use_wildcard is true.
	SerialNumber string `json:"serial_number,omitempty"`

	// true indicates using blob syntax for USB serial numbers. When true, requires serial_number and either vendor_id(_decimal) and product_id(_decimal). Cannot be used with combined_id. Double asterisks (**) are not supported.
	UseWildcard bool `json:"use_wildcard,omitempty"`

	// Hexadecimal VendorID used to apply the exception. Must be a valid hex value representing a decimal value less than 65535. Only one of vendor_id or vendor_id_decimal is required.
	VendorID string `json:"vendor_id,omitempty"`

	// Decimal VendorID used to apply the exception. Must be a valid decimal value less than 65535. Only one of vendor_id or vendor_id_decimal is required.
	VendorIDDecimal string `json:"vendor_id_decimal,omitempty"`

	// Vendor Name, optional
	VendorName string `json:"vendor_name,omitempty"`
}

// Validate validates this device control exception req v1
func (m *DeviceControlExceptionReqV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deviceControlExceptionReqV1TypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FULL_ACCESS","BLOCK_ALL","BLOCK_EXECUTE","BLOCK_WRITE_EXECUTE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceControlExceptionReqV1TypeActionPropEnum = append(deviceControlExceptionReqV1TypeActionPropEnum, v)
	}
}

const (

	// DeviceControlExceptionReqV1ActionFULLACCESS captures enum value "FULL_ACCESS"
	DeviceControlExceptionReqV1ActionFULLACCESS string = "FULL_ACCESS"

	// DeviceControlExceptionReqV1ActionBLOCKALL captures enum value "BLOCK_ALL"
	DeviceControlExceptionReqV1ActionBLOCKALL string = "BLOCK_ALL"

	// DeviceControlExceptionReqV1ActionBLOCKEXECUTE captures enum value "BLOCK_EXECUTE"
	DeviceControlExceptionReqV1ActionBLOCKEXECUTE string = "BLOCK_EXECUTE"

	// DeviceControlExceptionReqV1ActionBLOCKWRITEEXECUTE captures enum value "BLOCK_WRITE_EXECUTE"
	DeviceControlExceptionReqV1ActionBLOCKWRITEEXECUTE string = "BLOCK_WRITE_EXECUTE"
)

// prop value enum
func (m *DeviceControlExceptionReqV1) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceControlExceptionReqV1TypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceControlExceptionReqV1) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *DeviceControlExceptionReqV1) validateExpirationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("expiration_time", "body", "date-time", m.ExpirationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this device control exception req v1 based on context it is used
func (m *DeviceControlExceptionReqV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceControlExceptionReqV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceControlExceptionReqV1) UnmarshalBinary(b []byte) error {
	var res DeviceControlExceptionReqV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
