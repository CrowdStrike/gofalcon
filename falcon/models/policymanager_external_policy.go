// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicymanagerExternalPolicy policymanager external policy
//
// swagger:model policymanager.ExternalPolicy
type PolicymanagerExternalPolicy struct {

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// created by
	// Required: true
	CreatedBy *string `json:"created_by"`

	// description
	// Required: true
	Description *string `json:"description"`

	// host groups
	// Required: true
	HostGroups *PolicymanagerHostGroups `json:"host_groups"`

	// id
	// Required: true
	ID *string `json:"id"`

	// is default
	// Required: true
	IsDefault *bool `json:"is_default"`

	// is enabled
	// Required: true
	IsEnabled *bool `json:"is_enabled"`

	// modified at
	// Required: true
	ModifiedAt *string `json:"modified_at"`

	// modified by
	// Required: true
	ModifiedBy *string `json:"modified_by"`

	// name
	// Required: true
	Name *string `json:"name"`

	// Accepts values: 'win', 'mac'
	// Required: true
	// Enum: [win mac]
	PlatformName *string `json:"platform_name"`

	// policy properties
	// Required: true
	PolicyProperties *PolicymanagerPolicyProperties `json:"policy_properties"`

	// policy type
	// Required: true
	PolicyType *string `json:"policy_type"`

	// precedence
	// Required: true
	Precedence *int32 `json:"precedence"`
}

// Validate validates this policymanager external policy
func (m *PolicymanagerExternalPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsDefault(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrecedence(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicymanagerExternalPolicy) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalPolicy) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalPolicy) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("created_by", "body", m.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalPolicy) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalPolicy) validateHostGroups(formats strfmt.Registry) error {

	if err := validate.Required("host_groups", "body", m.HostGroups); err != nil {
		return err
	}

	if m.HostGroups != nil {
		if err := m.HostGroups.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host_groups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host_groups")
			}
			return err
		}
	}

	return nil
}

func (m *PolicymanagerExternalPolicy) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalPolicy) validateIsDefault(formats strfmt.Registry) error {

	if err := validate.Required("is_default", "body", m.IsDefault); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalPolicy) validateIsEnabled(formats strfmt.Registry) error {

	if err := validate.Required("is_enabled", "body", m.IsEnabled); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalPolicy) validateModifiedAt(formats strfmt.Registry) error {

	if err := validate.Required("modified_at", "body", m.ModifiedAt); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalPolicy) validateModifiedBy(formats strfmt.Registry) error {

	if err := validate.Required("modified_by", "body", m.ModifiedBy); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalPolicy) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var policymanagerExternalPolicyTypePlatformNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["win","mac"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policymanagerExternalPolicyTypePlatformNamePropEnum = append(policymanagerExternalPolicyTypePlatformNamePropEnum, v)
	}
}

const (

	// PolicymanagerExternalPolicyPlatformNameWin captures enum value "win"
	PolicymanagerExternalPolicyPlatformNameWin string = "win"

	// PolicymanagerExternalPolicyPlatformNameMac captures enum value "mac"
	PolicymanagerExternalPolicyPlatformNameMac string = "mac"
)

// prop value enum
func (m *PolicymanagerExternalPolicy) validatePlatformNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policymanagerExternalPolicyTypePlatformNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicymanagerExternalPolicy) validatePlatformName(formats strfmt.Registry) error {

	if err := validate.Required("platform_name", "body", m.PlatformName); err != nil {
		return err
	}

	// value enum
	if err := m.validatePlatformNameEnum("platform_name", "body", *m.PlatformName); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalPolicy) validatePolicyProperties(formats strfmt.Registry) error {

	if err := validate.Required("policy_properties", "body", m.PolicyProperties); err != nil {
		return err
	}

	if m.PolicyProperties != nil {
		if err := m.PolicyProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_properties")
			}
			return err
		}
	}

	return nil
}

func (m *PolicymanagerExternalPolicy) validatePolicyType(formats strfmt.Registry) error {

	if err := validate.Required("policy_type", "body", m.PolicyType); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalPolicy) validatePrecedence(formats strfmt.Registry) error {

	if err := validate.Required("precedence", "body", m.Precedence); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this policymanager external policy based on the context it is used
func (m *PolicymanagerExternalPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHostGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicymanagerExternalPolicy) contextValidateHostGroups(ctx context.Context, formats strfmt.Registry) error {

	if m.HostGroups != nil {

		if err := m.HostGroups.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host_groups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host_groups")
			}
			return err
		}
	}

	return nil
}

func (m *PolicymanagerExternalPolicy) contextValidatePolicyProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.PolicyProperties != nil {

		if err := m.PolicyProperties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicymanagerExternalPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicymanagerExternalPolicy) UnmarshalBinary(b []byte) error {
	var res PolicymanagerExternalPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
