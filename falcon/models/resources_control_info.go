// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourcesControlInfo resources control info
//
// swagger:model resources.ControlInfo
type ResourcesControlInfo struct {

	// benchmark
	// Required: true
	Benchmark *ResourcesBenchmark `json:"benchmark"`

	// framework
	// Required: true
	Framework *string `json:"framework"`

	// name
	// Required: true
	Name *string `json:"name"`

	// type
	// Required: true
	Type *string `json:"type"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this resources control info
func (m *ResourcesControlInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBenchmark(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFramework(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourcesControlInfo) validateBenchmark(formats strfmt.Registry) error {

	if err := validate.Required("benchmark", "body", m.Benchmark); err != nil {
		return err
	}

	if m.Benchmark != nil {
		if err := m.Benchmark.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("benchmark")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("benchmark")
			}
			return err
		}
	}

	return nil
}

func (m *ResourcesControlInfo) validateFramework(formats strfmt.Registry) error {

	if err := validate.Required("framework", "body", m.Framework); err != nil {
		return err
	}

	return nil
}

func (m *ResourcesControlInfo) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ResourcesControlInfo) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ResourcesControlInfo) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this resources control info based on the context it is used
func (m *ResourcesControlInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBenchmark(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourcesControlInfo) contextValidateBenchmark(ctx context.Context, formats strfmt.Registry) error {

	if m.Benchmark != nil {

		if err := m.Benchmark.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("benchmark")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("benchmark")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourcesControlInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourcesControlInfo) UnmarshalBinary(b []byte) error {
	var res ResourcesControlInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
