// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ParameterConditionFieldProvisionParameter parameter condition field provision parameter
//
// swagger:model parameter.ConditionFieldProvisionParameter
type ParameterConditionFieldProvisionParameter struct {

	// Fully qualified name of the field
	// Required: true
	Name *string `json:"name"`

	// Optional operator to be used as part of the condition. It not supplied the default in the template will be used.
	// Required: true
	Operator *string `json:"operator"`

	// Value used for the condition, type is dynamic depending on the underlying field.
	// Required: true
	Value ParameterConditionFieldProvisionParameterValue `json:"value"`
}

// Validate validates this parameter condition field provision parameter
func (m *ParameterConditionFieldProvisionParameter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParameterConditionFieldProvisionParameter) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ParameterConditionFieldProvisionParameter) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *ParameterConditionFieldProvisionParameter) validateValue(formats strfmt.Registry) error {

	if m.Value == nil {
		return errors.Required("value", "body", nil)
	}

	return nil
}

// ContextValidate validates this parameter condition field provision parameter based on context it is used
func (m *ParameterConditionFieldProvisionParameter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ParameterConditionFieldProvisionParameter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParameterConditionFieldProvisionParameter) UnmarshalBinary(b []byte) error {
	var res ParameterConditionFieldProvisionParameter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
