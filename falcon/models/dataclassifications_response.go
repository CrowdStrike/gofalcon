// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataclassificationsResponse dataclassifications response
//
// swagger:model dataclassifications.Response
type DataclassificationsResponse struct {

	// findings
	Findings []*DataclassificationsDataClassificationFinding `json:"findings"`

	// found
	// Required: true
	Found *bool `json:"found"`

	// labels
	Labels map[string]string `json:"labels,omitempty"`

	// last updated
	// Format: date-time
	LastUpdated strfmt.DateTime `json:"last_updated,omitempty"`

	// scanned
	// Required: true
	Scanned *bool `json:"scanned"`

	// tags
	Tags map[string]DataclassificationsTag `json:"tags,omitempty"`
}

// Validate validates this dataclassifications response
func (m *DataclassificationsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFindings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFound(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanned(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataclassificationsResponse) validateFindings(formats strfmt.Registry) error {
	if swag.IsZero(m.Findings) { // not required
		return nil
	}

	for i := 0; i < len(m.Findings); i++ {
		if swag.IsZero(m.Findings[i]) { // not required
			continue
		}

		if m.Findings[i] != nil {
			if err := m.Findings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("findings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("findings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataclassificationsResponse) validateFound(formats strfmt.Registry) error {

	if err := validate.Required("found", "body", m.Found); err != nil {
		return err
	}

	return nil
}

func (m *DataclassificationsResponse) validateLastUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DataclassificationsResponse) validateScanned(formats strfmt.Registry) error {

	if err := validate.Required("scanned", "body", m.Scanned); err != nil {
		return err
	}

	return nil
}

func (m *DataclassificationsResponse) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for k := range m.Tags {

		if err := validate.Required("tags"+"."+k, "body", m.Tags[k]); err != nil {
			return err
		}
		if val, ok := m.Tags[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this dataclassifications response based on the context it is used
func (m *DataclassificationsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFindings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataclassificationsResponse) contextValidateFindings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Findings); i++ {

		if m.Findings[i] != nil {

			if swag.IsZero(m.Findings[i]) { // not required
				return nil
			}

			if err := m.Findings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("findings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("findings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataclassificationsResponse) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Tags {

		if val, ok := m.Tags[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataclassificationsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataclassificationsResponse) UnmarshalBinary(b []byte) error {
	var res DataclassificationsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
