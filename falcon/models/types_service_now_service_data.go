// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TypesServiceNowServiceData types service now service data
//
// swagger:model types.ServiceNowServiceData
type TypesServiceNowServiceData struct {

	// service now service
	// Required: true
	ServiceNowService *TypesServiceNowService `json:"ServiceNowService"`

	// apis
	// Required: true
	Apis *TypesServiceServiceInterface `json:"apis"`

	// artifacts
	// Required: true
	Artifacts *TypesServiceServiceArtifact `json:"artifacts"`

	// configurations
	// Required: true
	Configurations *TypesServiceServiceConfiguration `json:"configurations"`

	// dependencies
	// Required: true
	Dependencies *TypesServiceServiceDependency `json:"dependencies"`

	// deployment units
	// Required: true
	DeploymentUnits []string `json:"deployment_units"`

	// frameworks
	// Required: true
	Frameworks *TypesServiceServiceFramework `json:"frameworks"`

	// libraries
	// Required: true
	Libraries *TypesServiceServiceLibrary `json:"libraries"`

	// topics queues
	// Required: true
	TopicsQueues []*TypesInterface `json:"topics_queues"`
}

// Validate validates this types service now service data
func (m *TypesServiceNowServiceData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServiceNowService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifacts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigurations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentUnits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrameworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibraries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopicsQueues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesServiceNowServiceData) validateServiceNowService(formats strfmt.Registry) error {

	if err := validate.Required("ServiceNowService", "body", m.ServiceNowService); err != nil {
		return err
	}

	if m.ServiceNowService != nil {
		if err := m.ServiceNowService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ServiceNowService")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ServiceNowService")
			}
			return err
		}
	}

	return nil
}

func (m *TypesServiceNowServiceData) validateApis(formats strfmt.Registry) error {

	if err := validate.Required("apis", "body", m.Apis); err != nil {
		return err
	}

	if m.Apis != nil {
		if err := m.Apis.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apis")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apis")
			}
			return err
		}
	}

	return nil
}

func (m *TypesServiceNowServiceData) validateArtifacts(formats strfmt.Registry) error {

	if err := validate.Required("artifacts", "body", m.Artifacts); err != nil {
		return err
	}

	if m.Artifacts != nil {
		if err := m.Artifacts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifacts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("artifacts")
			}
			return err
		}
	}

	return nil
}

func (m *TypesServiceNowServiceData) validateConfigurations(formats strfmt.Registry) error {

	if err := validate.Required("configurations", "body", m.Configurations); err != nil {
		return err
	}

	if m.Configurations != nil {
		if err := m.Configurations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configurations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configurations")
			}
			return err
		}
	}

	return nil
}

func (m *TypesServiceNowServiceData) validateDependencies(formats strfmt.Registry) error {

	if err := validate.Required("dependencies", "body", m.Dependencies); err != nil {
		return err
	}

	if m.Dependencies != nil {
		if err := m.Dependencies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dependencies")
			}
			return err
		}
	}

	return nil
}

func (m *TypesServiceNowServiceData) validateDeploymentUnits(formats strfmt.Registry) error {

	if err := validate.Required("deployment_units", "body", m.DeploymentUnits); err != nil {
		return err
	}

	return nil
}

func (m *TypesServiceNowServiceData) validateFrameworks(formats strfmt.Registry) error {

	if err := validate.Required("frameworks", "body", m.Frameworks); err != nil {
		return err
	}

	if m.Frameworks != nil {
		if err := m.Frameworks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("frameworks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("frameworks")
			}
			return err
		}
	}

	return nil
}

func (m *TypesServiceNowServiceData) validateLibraries(formats strfmt.Registry) error {

	if err := validate.Required("libraries", "body", m.Libraries); err != nil {
		return err
	}

	if m.Libraries != nil {
		if err := m.Libraries.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("libraries")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("libraries")
			}
			return err
		}
	}

	return nil
}

func (m *TypesServiceNowServiceData) validateTopicsQueues(formats strfmt.Registry) error {

	if err := validate.Required("topics_queues", "body", m.TopicsQueues); err != nil {
		return err
	}

	for i := 0; i < len(m.TopicsQueues); i++ {
		if swag.IsZero(m.TopicsQueues[i]) { // not required
			continue
		}

		if m.TopicsQueues[i] != nil {
			if err := m.TopicsQueues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("topics_queues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("topics_queues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this types service now service data based on the context it is used
func (m *TypesServiceNowServiceData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateServiceNowService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateApis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArtifacts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigurations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFrameworks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLibraries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTopicsQueues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesServiceNowServiceData) contextValidateServiceNowService(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceNowService != nil {

		if err := m.ServiceNowService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ServiceNowService")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ServiceNowService")
			}
			return err
		}
	}

	return nil
}

func (m *TypesServiceNowServiceData) contextValidateApis(ctx context.Context, formats strfmt.Registry) error {

	if m.Apis != nil {

		if err := m.Apis.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apis")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apis")
			}
			return err
		}
	}

	return nil
}

func (m *TypesServiceNowServiceData) contextValidateArtifacts(ctx context.Context, formats strfmt.Registry) error {

	if m.Artifacts != nil {

		if err := m.Artifacts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifacts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("artifacts")
			}
			return err
		}
	}

	return nil
}

func (m *TypesServiceNowServiceData) contextValidateConfigurations(ctx context.Context, formats strfmt.Registry) error {

	if m.Configurations != nil {

		if err := m.Configurations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configurations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configurations")
			}
			return err
		}
	}

	return nil
}

func (m *TypesServiceNowServiceData) contextValidateDependencies(ctx context.Context, formats strfmt.Registry) error {

	if m.Dependencies != nil {

		if err := m.Dependencies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dependencies")
			}
			return err
		}
	}

	return nil
}

func (m *TypesServiceNowServiceData) contextValidateFrameworks(ctx context.Context, formats strfmt.Registry) error {

	if m.Frameworks != nil {

		if err := m.Frameworks.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("frameworks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("frameworks")
			}
			return err
		}
	}

	return nil
}

func (m *TypesServiceNowServiceData) contextValidateLibraries(ctx context.Context, formats strfmt.Registry) error {

	if m.Libraries != nil {

		if err := m.Libraries.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("libraries")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("libraries")
			}
			return err
		}
	}

	return nil
}

func (m *TypesServiceNowServiceData) contextValidateTopicsQueues(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TopicsQueues); i++ {

		if m.TopicsQueues[i] != nil {

			if swag.IsZero(m.TopicsQueues[i]) { // not required
				return nil
			}

			if err := m.TopicsQueues[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("topics_queues" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("topics_queues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TypesServiceNowServiceData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesServiceNowServiceData) UnmarshalBinary(b []byte) error {
	var res TypesServiceNowServiceData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
