// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataclassificationsTag dataclassifications tag
//
// swagger:model dataclassifications.Tag
type DataclassificationsTag struct {

	// labels
	// Required: true
	Labels map[string]DataclassificationsLabel `json:"labels"`

	// last seen
	// Required: true
	// Format: date-time
	LastSeen *strfmt.DateTime `json:"last_seen"`

	// tag id
	// Required: true
	TagID *string `json:"tag_id"`

	// tag name
	// Required: true
	TagName *string `json:"tag_name"`
}

// Validate validates this dataclassifications tag
func (m *DataclassificationsTag) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSeen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataclassificationsTag) validateLabels(formats strfmt.Registry) error {

	if err := validate.Required("labels", "body", m.Labels); err != nil {
		return err
	}

	for k := range m.Labels {

		if err := validate.Required("labels"+"."+k, "body", m.Labels[k]); err != nil {
			return err
		}
		if val, ok := m.Labels[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labels" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataclassificationsTag) validateLastSeen(formats strfmt.Registry) error {

	if err := validate.Required("last_seen", "body", m.LastSeen); err != nil {
		return err
	}

	if err := validate.FormatOf("last_seen", "body", "date-time", m.LastSeen.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DataclassificationsTag) validateTagID(formats strfmt.Registry) error {

	if err := validate.Required("tag_id", "body", m.TagID); err != nil {
		return err
	}

	return nil
}

func (m *DataclassificationsTag) validateTagName(formats strfmt.Registry) error {

	if err := validate.Required("tag_name", "body", m.TagName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this dataclassifications tag based on the context it is used
func (m *DataclassificationsTag) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataclassificationsTag) contextValidateLabels(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.Required("labels", "body", m.Labels); err != nil {
		return err
	}

	for k := range m.Labels {

		if val, ok := m.Labels[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataclassificationsTag) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataclassificationsTag) UnmarshalBinary(b []byte) error {
	var res DataclassificationsTag
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
