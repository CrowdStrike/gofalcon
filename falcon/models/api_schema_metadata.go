// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APISchemaMetadata api schema metadata
//
// swagger:model api.SchemaMetadata
type APISchemaMetadata struct {

	// collection name
	// Required: true
	CollectionName *string `json:"collection_name"`

	// collection version
	CollectionVersion string `json:"collection_version,omitempty"`

	// create timestamp
	// Required: true
	// Format: date-time
	CreateTimestamp *strfmt.DateTime `json:"create_timestamp"`

	// created by
	CreatedBy *APIUserMetadata `json:"created_by,omitempty"`

	// indexed fields
	// Required: true
	IndexedFields []*APIIndexedFields `json:"indexed_fields"`

	// last modified by
	LastModifiedBy *APIUserMetadata `json:"last_modified_by,omitempty"`

	// last modified timestamp
	// Required: true
	// Format: date-time
	LastModifiedTimestamp *strfmt.DateTime `json:"last_modified_timestamp"`

	// namespace
	// Required: true
	Namespace *string `json:"namespace"`

	// status
	// Required: true
	Status *string `json:"status"`

	// type
	// Required: true
	Type *string `json:"type"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this api schema metadata
func (m *APISchemaMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCollectionName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndexedFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APISchemaMetadata) validateCollectionName(formats strfmt.Registry) error {

	if err := validate.Required("collection_name", "body", m.CollectionName); err != nil {
		return err
	}

	return nil
}

func (m *APISchemaMetadata) validateCreateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("create_timestamp", "body", m.CreateTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("create_timestamp", "body", "date-time", m.CreateTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APISchemaMetadata) validateCreatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

func (m *APISchemaMetadata) validateIndexedFields(formats strfmt.Registry) error {

	if err := validate.Required("indexed_fields", "body", m.IndexedFields); err != nil {
		return err
	}

	for i := 0; i < len(m.IndexedFields); i++ {
		if swag.IsZero(m.IndexedFields[i]) { // not required
			continue
		}

		if m.IndexedFields[i] != nil {
			if err := m.IndexedFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("indexed_fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("indexed_fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APISchemaMetadata) validateLastModifiedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModifiedBy) { // not required
		return nil
	}

	if m.LastModifiedBy != nil {
		if err := m.LastModifiedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_modified_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_modified_by")
			}
			return err
		}
	}

	return nil
}

func (m *APISchemaMetadata) validateLastModifiedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("last_modified_timestamp", "body", m.LastModifiedTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("last_modified_timestamp", "body", "date-time", m.LastModifiedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APISchemaMetadata) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *APISchemaMetadata) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *APISchemaMetadata) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *APISchemaMetadata) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this api schema metadata based on the context it is used
func (m *APISchemaMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIndexedFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastModifiedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APISchemaMetadata) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedBy != nil {

		if swag.IsZero(m.CreatedBy) { // not required
			return nil
		}

		if err := m.CreatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_by")
			}
			return err
		}
	}

	return nil
}

func (m *APISchemaMetadata) contextValidateIndexedFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IndexedFields); i++ {

		if m.IndexedFields[i] != nil {

			if swag.IsZero(m.IndexedFields[i]) { // not required
				return nil
			}

			if err := m.IndexedFields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("indexed_fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("indexed_fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APISchemaMetadata) contextValidateLastModifiedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.LastModifiedBy != nil {

		if swag.IsZero(m.LastModifiedBy) { // not required
			return nil
		}

		if err := m.LastModifiedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_modified_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_modified_by")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APISchemaMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APISchemaMetadata) UnmarshalBinary(b []byte) error {
	var res APISchemaMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
