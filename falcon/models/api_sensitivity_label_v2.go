// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APISensitivityLabelV2 api sensitivity label v2
//
// swagger:model api.SensitivityLabelV2
type APISensitivityLabelV2 struct {

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// co authoring
	// Required: true
	CoAuthoring *bool `json:"co_authoring"`

	// created
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created"`

	// deleted
	// Required: true
	Deleted *bool `json:"deleted"`

	// display name
	// Required: true
	DisplayName *string `json:"display_name"`

	// external id
	// Required: true
	ExternalID *string `json:"external_id"`

	// id
	// Required: true
	ID *string `json:"id"`

	// label provider
	// Required: true
	LabelProvider *string `json:"label_provider"`

	// last updated
	// Required: true
	// Format: date-time
	LastUpdated *strfmt.DateTime `json:"last_updated"`

	// name
	// Required: true
	Name *string `json:"name"`

	// plugins configuration id
	// Required: true
	PluginsConfigurationID *string `json:"plugins_configuration_id"`

	// synced
	// Required: true
	Synced *bool `json:"synced"`
}

// Validate validates this api sensitivity label v2
func (m *APISensitivityLabelV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCoAuthoring(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePluginsConfigurationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSynced(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APISensitivityLabelV2) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *APISensitivityLabelV2) validateCoAuthoring(formats strfmt.Registry) error {

	if err := validate.Required("co_authoring", "body", m.CoAuthoring); err != nil {
		return err
	}

	return nil
}

func (m *APISensitivityLabelV2) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APISensitivityLabelV2) validateDeleted(formats strfmt.Registry) error {

	if err := validate.Required("deleted", "body", m.Deleted); err != nil {
		return err
	}

	return nil
}

func (m *APISensitivityLabelV2) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("display_name", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *APISensitivityLabelV2) validateExternalID(formats strfmt.Registry) error {

	if err := validate.Required("external_id", "body", m.ExternalID); err != nil {
		return err
	}

	return nil
}

func (m *APISensitivityLabelV2) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *APISensitivityLabelV2) validateLabelProvider(formats strfmt.Registry) error {

	if err := validate.Required("label_provider", "body", m.LabelProvider); err != nil {
		return err
	}

	return nil
}

func (m *APISensitivityLabelV2) validateLastUpdated(formats strfmt.Registry) error {

	if err := validate.Required("last_updated", "body", m.LastUpdated); err != nil {
		return err
	}

	if err := validate.FormatOf("last_updated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APISensitivityLabelV2) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *APISensitivityLabelV2) validatePluginsConfigurationID(formats strfmt.Registry) error {

	if err := validate.Required("plugins_configuration_id", "body", m.PluginsConfigurationID); err != nil {
		return err
	}

	return nil
}

func (m *APISensitivityLabelV2) validateSynced(formats strfmt.Registry) error {

	if err := validate.Required("synced", "body", m.Synced); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this api sensitivity label v2 based on context it is used
func (m *APISensitivityLabelV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *APISensitivityLabelV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APISensitivityLabelV2) UnmarshalBinary(b []byte) error {
	var res APISensitivityLabelV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
