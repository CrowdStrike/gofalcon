// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Schema2Manifest schema2 manifest
//
// swagger:model schema2.Manifest
type Schema2Manifest struct {

	// config
	// Required: true
	Config *DistributionDescriptor `json:"config"`

	// layers
	// Required: true
	Layers []*DistributionDescriptor `json:"layers"`

	// media type
	MediaType string `json:"mediaType,omitempty"`

	// schema version
	// Required: true
	SchemaVersion *int32 `json:"schemaVersion"`
}

// Validate validates this schema2 manifest
func (m *Schema2Manifest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLayers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchemaVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Schema2Manifest) validateConfig(formats strfmt.Registry) error {

	if err := validate.Required("config", "body", m.Config); err != nil {
		return err
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *Schema2Manifest) validateLayers(formats strfmt.Registry) error {

	if err := validate.Required("layers", "body", m.Layers); err != nil {
		return err
	}

	for i := 0; i < len(m.Layers); i++ {
		if swag.IsZero(m.Layers[i]) { // not required
			continue
		}

		if m.Layers[i] != nil {
			if err := m.Layers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("layers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("layers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Schema2Manifest) validateSchemaVersion(formats strfmt.Registry) error {

	if err := validate.Required("schemaVersion", "body", m.SchemaVersion); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this schema2 manifest based on the context it is used
func (m *Schema2Manifest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLayers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Schema2Manifest) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {

		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *Schema2Manifest) contextValidateLayers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Layers); i++ {

		if m.Layers[i] != nil {

			if swag.IsZero(m.Layers[i]) { // not required
				return nil
			}

			if err := m.Layers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("layers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("layers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Schema2Manifest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Schema2Manifest) UnmarshalBinary(b []byte) error {
	var res Schema2Manifest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
