// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainConfigData domain config data
//
// swagger:model domain.ConfigData
type DomainConfigData struct {

	// auth
	Auth string `json:"auth,omitempty"`

	// data
	Data string `json:"data,omitempty"`

	// enable system workflow
	// Required: true
	EnableSystemWorkflow *bool `json:"enable_system_workflow"`

	// graphical password algorithm
	GraphicalPasswordAlgorithm *DomainGPAs `json:"graphical_password_algorithm,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// immutable params
	ImmutableParams *DomainParams `json:"immutable_params,omitempty"`

	// json
	JSON DomainRequestJSON `json:"json,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// on prem
	OnPrem *DomainOnPrem `json:"on_prem,omitempty"`

	// params
	Params *DomainParams `json:"params,omitempty"`

	// permissions
	Permissions []string `json:"permissions"`

	// resource id
	ResourceID string `json:"resource_id,omitempty"`

	// resource response
	ResourceResponse string `json:"resource_response,omitempty"`

	// token parameters
	TokenParameters map[string][]string `json:"token_parameters,omitempty"`

	// x www form urlencoded
	XWwwFormUrlencoded interface{} `json:"x-www-form-urlencoded,omitempty"`
}

// Validate validates this domain config data
func (m *DomainConfigData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnableSystemWorkflow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGraphicalPasswordAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImmutableParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnPrem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainConfigData) validateEnableSystemWorkflow(formats strfmt.Registry) error {

	if err := validate.Required("enable_system_workflow", "body", m.EnableSystemWorkflow); err != nil {
		return err
	}

	return nil
}

func (m *DomainConfigData) validateGraphicalPasswordAlgorithm(formats strfmt.Registry) error {
	if swag.IsZero(m.GraphicalPasswordAlgorithm) { // not required
		return nil
	}

	if m.GraphicalPasswordAlgorithm != nil {
		if err := m.GraphicalPasswordAlgorithm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("graphical_password_algorithm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("graphical_password_algorithm")
			}
			return err
		}
	}

	return nil
}

func (m *DomainConfigData) validateImmutableParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ImmutableParams) { // not required
		return nil
	}

	if m.ImmutableParams != nil {
		if err := m.ImmutableParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("immutable_params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("immutable_params")
			}
			return err
		}
	}

	return nil
}

func (m *DomainConfigData) validateOnPrem(formats strfmt.Registry) error {
	if swag.IsZero(m.OnPrem) { // not required
		return nil
	}

	if m.OnPrem != nil {
		if err := m.OnPrem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("on_prem")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("on_prem")
			}
			return err
		}
	}

	return nil
}

func (m *DomainConfigData) validateParams(formats strfmt.Registry) error {
	if swag.IsZero(m.Params) { // not required
		return nil
	}

	if m.Params != nil {
		if err := m.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("params")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this domain config data based on the context it is used
func (m *DomainConfigData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGraphicalPasswordAlgorithm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImmutableParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOnPrem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainConfigData) contextValidateGraphicalPasswordAlgorithm(ctx context.Context, formats strfmt.Registry) error {

	if m.GraphicalPasswordAlgorithm != nil {

		if swag.IsZero(m.GraphicalPasswordAlgorithm) { // not required
			return nil
		}

		if err := m.GraphicalPasswordAlgorithm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("graphical_password_algorithm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("graphical_password_algorithm")
			}
			return err
		}
	}

	return nil
}

func (m *DomainConfigData) contextValidateImmutableParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ImmutableParams != nil {

		if swag.IsZero(m.ImmutableParams) { // not required
			return nil
		}

		if err := m.ImmutableParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("immutable_params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("immutable_params")
			}
			return err
		}
	}

	return nil
}

func (m *DomainConfigData) contextValidateOnPrem(ctx context.Context, formats strfmt.Registry) error {

	if m.OnPrem != nil {

		if swag.IsZero(m.OnPrem) { // not required
			return nil
		}

		if err := m.OnPrem.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("on_prem")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("on_prem")
			}
			return err
		}
	}

	return nil
}

func (m *DomainConfigData) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {

	if m.Params != nil {

		if swag.IsZero(m.Params) { // not required
			return nil
		}

		if err := m.Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainConfigData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainConfigData) UnmarshalBinary(b []byte) error {
	var res DomainConfigData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
