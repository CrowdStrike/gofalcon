// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ChangesACL changes ACL
//
// swagger:model changes.ACL
type ChangesACL struct {

	// acl permission change
	ACLPermissionChange []*ChangesACLChange `json:"acl_permission_change"`

	// entity
	Entity string `json:"entity,omitempty"`

	// entity id
	EntityID string `json:"entity_id,omitempty"`

	// entity name
	EntityName string `json:"entity_name,omitempty"`
}

// Validate validates this changes ACL
func (m *ChangesACL) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateACLPermissionChange(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChangesACL) validateACLPermissionChange(formats strfmt.Registry) error {
	if swag.IsZero(m.ACLPermissionChange) { // not required
		return nil
	}

	for i := 0; i < len(m.ACLPermissionChange); i++ {
		if swag.IsZero(m.ACLPermissionChange[i]) { // not required
			continue
		}

		if m.ACLPermissionChange[i] != nil {
			if err := m.ACLPermissionChange[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acl_permission_change" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acl_permission_change" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this changes ACL based on the context it is used
func (m *ChangesACL) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateACLPermissionChange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChangesACL) contextValidateACLPermissionChange(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ACLPermissionChange); i++ {

		if m.ACLPermissionChange[i] != nil {

			if swag.IsZero(m.ACLPermissionChange[i]) { // not required
				return nil
			}

			if err := m.ACLPermissionChange[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acl_permission_change" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acl_permission_change" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChangesACL) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChangesACL) UnmarshalBinary(b []byte) error {
	var res ChangesACL
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
