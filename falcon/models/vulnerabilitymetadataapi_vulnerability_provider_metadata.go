// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VulnerabilitymetadataapiVulnerabilityProviderMetadata vulnerabilitymetadataapi vulnerability provider metadata
//
// swagger:model vulnerabilitymetadataapi.VulnerabilityProviderMetadata
type VulnerabilitymetadataapiVulnerabilityProviderMetadata struct {

	// alias
	// Required: true
	Alias *string `json:"alias"`

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// created timestamp
	// Required: true
	// Format: date-time
	CreatedTimestamp *strfmt.DateTime `json:"created_timestamp"`

	// cve ids
	// Required: true
	CveIds []string `json:"cve_ids"`

	// cwe ids
	// Required: true
	CweIds []string `json:"cwe_ids"`

	// description
	// Required: true
	Description *string `json:"description"`

	// id
	// Required: true
	ID *string `json:"id"`

	// impact
	// Required: true
	Impact *VulnerabilitymetadataapiImpact `json:"impact"`

	// is evaluation supported
	IsEvaluationSupported bool `json:"is_evaluation_supported,omitempty"`

	// provider
	// Required: true
	Provider *string `json:"provider"`

	// provider metadata
	// Required: true
	ProviderMetadata *VulnerabilitymetadataapiProviderMetadata `json:"provider_metadata"`

	// references
	// Required: true
	References []*VulnerabilitymetadataapiReference `json:"references"`

	// risk metadata
	// Required: true
	RiskMetadata *VulnerabilitymetadataapiRiskMetadata `json:"risk_metadata"`

	// source created timestamp
	// Required: true
	// Format: date-time
	SourceCreatedTimestamp *strfmt.DateTime `json:"source_created_timestamp"`

	// source updated timestamp
	// Required: true
	// Format: date-time
	SourceUpdatedTimestamp *strfmt.DateTime `json:"source_updated_timestamp"`

	// updated timestamp
	// Required: true
	// Format: date-time
	UpdatedTimestamp *strfmt.DateTime `json:"updated_timestamp"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this vulnerabilitymetadataapi vulnerability provider metadata
func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlias(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCveIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCweIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImpact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviderMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRiskMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceUpdatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) validateAlias(formats strfmt.Registry) error {

	if err := validate.Required("alias", "body", m.Alias); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) validateCreatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("created_timestamp", "body", m.CreatedTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("created_timestamp", "body", "date-time", m.CreatedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) validateCveIds(formats strfmt.Registry) error {

	if err := validate.Required("cve_ids", "body", m.CveIds); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) validateCweIds(formats strfmt.Registry) error {

	if err := validate.Required("cwe_ids", "body", m.CweIds); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) validateImpact(formats strfmt.Registry) error {

	if err := validate.Required("impact", "body", m.Impact); err != nil {
		return err
	}

	if m.Impact != nil {
		if err := m.Impact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("impact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("impact")
			}
			return err
		}
	}

	return nil
}

func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("provider", "body", m.Provider); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) validateProviderMetadata(formats strfmt.Registry) error {

	if err := validate.Required("provider_metadata", "body", m.ProviderMetadata); err != nil {
		return err
	}

	if m.ProviderMetadata != nil {
		if err := m.ProviderMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provider_metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provider_metadata")
			}
			return err
		}
	}

	return nil
}

func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) validateReferences(formats strfmt.Registry) error {

	if err := validate.Required("references", "body", m.References); err != nil {
		return err
	}

	for i := 0; i < len(m.References); i++ {
		if swag.IsZero(m.References[i]) { // not required
			continue
		}

		if m.References[i] != nil {
			if err := m.References[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("references" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("references" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) validateRiskMetadata(formats strfmt.Registry) error {

	if err := validate.Required("risk_metadata", "body", m.RiskMetadata); err != nil {
		return err
	}

	if m.RiskMetadata != nil {
		if err := m.RiskMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("risk_metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("risk_metadata")
			}
			return err
		}
	}

	return nil
}

func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) validateSourceCreatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("source_created_timestamp", "body", m.SourceCreatedTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("source_created_timestamp", "body", "date-time", m.SourceCreatedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) validateSourceUpdatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("source_updated_timestamp", "body", m.SourceUpdatedTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("source_updated_timestamp", "body", "date-time", m.SourceUpdatedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) validateUpdatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("updated_timestamp", "body", m.UpdatedTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_timestamp", "body", "date-time", m.UpdatedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this vulnerabilitymetadataapi vulnerability provider metadata based on the context it is used
func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateImpact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProviderMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReferences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRiskMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) contextValidateImpact(ctx context.Context, formats strfmt.Registry) error {

	if m.Impact != nil {

		if err := m.Impact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("impact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("impact")
			}
			return err
		}
	}

	return nil
}

func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) contextValidateProviderMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.ProviderMetadata != nil {

		if err := m.ProviderMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provider_metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provider_metadata")
			}
			return err
		}
	}

	return nil
}

func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) contextValidateReferences(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.References); i++ {

		if m.References[i] != nil {

			if swag.IsZero(m.References[i]) { // not required
				return nil
			}

			if err := m.References[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("references" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("references" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) contextValidateRiskMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.RiskMetadata != nil {

		if err := m.RiskMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("risk_metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("risk_metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VulnerabilitymetadataapiVulnerabilityProviderMetadata) UnmarshalBinary(b []byte) error {
	var res VulnerabilitymetadataapiVulnerabilityProviderMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
