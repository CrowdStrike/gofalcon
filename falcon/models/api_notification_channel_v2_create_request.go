// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APINotificationChannelV2CreateRequest api notification channel v2 create request
//
// swagger:model api.NotificationChannelV2CreateRequest
type APINotificationChannelV2CreateRequest struct {

	// config id
	ConfigID string `json:"config_id,omitempty"`

	// config name
	// Required: true
	ConfigName *string `json:"config_name"`

	// params
	// Required: true
	Params interface{} `json:"params"`

	// type
	// Required: true
	// Enum: [email slack pagerduty webhook ms_teams]
	Type *string `json:"type"`
}

// Validate validates this api notification channel v2 create request
func (m *APINotificationChannelV2CreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APINotificationChannelV2CreateRequest) validateConfigName(formats strfmt.Registry) error {

	if err := validate.Required("config_name", "body", m.ConfigName); err != nil {
		return err
	}

	return nil
}

func (m *APINotificationChannelV2CreateRequest) validateParams(formats strfmt.Registry) error {

	if m.Params == nil {
		return errors.Required("params", "body", nil)
	}

	return nil
}

var apiNotificationChannelV2CreateRequestTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["email","slack","pagerduty","webhook","ms_teams"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiNotificationChannelV2CreateRequestTypeTypePropEnum = append(apiNotificationChannelV2CreateRequestTypeTypePropEnum, v)
	}
}

const (

	// APINotificationChannelV2CreateRequestTypeEmail captures enum value "email"
	APINotificationChannelV2CreateRequestTypeEmail string = "email"

	// APINotificationChannelV2CreateRequestTypeSlack captures enum value "slack"
	APINotificationChannelV2CreateRequestTypeSlack string = "slack"

	// APINotificationChannelV2CreateRequestTypePagerduty captures enum value "pagerduty"
	APINotificationChannelV2CreateRequestTypePagerduty string = "pagerduty"

	// APINotificationChannelV2CreateRequestTypeWebhook captures enum value "webhook"
	APINotificationChannelV2CreateRequestTypeWebhook string = "webhook"

	// APINotificationChannelV2CreateRequestTypeMsTeams captures enum value "ms_teams"
	APINotificationChannelV2CreateRequestTypeMsTeams string = "ms_teams"
)

// prop value enum
func (m *APINotificationChannelV2CreateRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, apiNotificationChannelV2CreateRequestTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *APINotificationChannelV2CreateRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this api notification channel v2 create request based on context it is used
func (m *APINotificationChannelV2CreateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *APINotificationChannelV2CreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APINotificationChannelV2CreateRequest) UnmarshalBinary(b []byte) error {
	var res APINotificationChannelV2CreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
