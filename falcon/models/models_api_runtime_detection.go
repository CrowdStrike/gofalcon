// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsAPIRuntimeDetection models API runtime detection
//
// swagger:model models.APIRuntimeDetection
type ModelsAPIRuntimeDetection struct {

	// action taken
	// Required: true
	ActionTaken *string `json:"action_taken"`

	// agent type
	// Required: true
	AgentType *string `json:"agent_type"`

	// aid
	// Required: true
	Aid *string `json:"aid"`

	// assigned to
	// Required: true
	AssignedTo *string `json:"assigned_to"`

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// cloud
	// Required: true
	Cloud *string `json:"cloud"`

	// cloud account id
	// Required: true
	CloudAccountID *string `json:"cloud_account_id"`

	// cloud id
	// Required: true
	CloudID *string `json:"cloud_id"`

	// cloud instance id
	// Required: true
	CloudInstanceID *string `json:"cloud_instance_id"`

	// cloud name
	// Required: true
	CloudName *string `json:"cloud_name"`

	// cluster name
	// Required: true
	ClusterName *string `json:"cluster_name"`

	// command line
	// Required: true
	CommandLine *string `json:"command_line"`

	// computer name
	// Required: true
	ComputerName *string `json:"computer_name"`

	// container devices
	// Required: true
	ContainerDevices []string `json:"container_devices"`

	// container id
	// Required: true
	ContainerID *string `json:"container_id"`

	// container interactive mode
	// Required: true
	ContainerInteractiveMode *string `json:"container_interactive_mode"`

	// container name
	// Required: true
	ContainerName *string `json:"container_name"`

	// container network ip address
	// Required: true
	ContainerNetworkIPAddress *string `json:"container_network_ip_address"`

	// container privileged
	// Required: true
	ContainerPrivileged *string `json:"container_privileged"`

	// container read only root fs
	// Required: true
	ContainerReadOnlyRootFs *string `json:"container_read_only_root_fs"`

	// container user info
	// Required: true
	ContainerUserInfo *string `json:"container_user_info"`

	// containers impacted count
	// Required: true
	ContainersImpactedCount *string `json:"containers_impacted_count"`

	// detect timestamp
	// Required: true
	DetectTimestamp *string `json:"detect_timestamp"`

	// detection description
	// Required: true
	DetectionDescription *string `json:"detection_description"`

	// detection id
	// Required: true
	DetectionID *string `json:"detection_id"`

	// detection name
	// Required: true
	DetectionName []string `json:"detection_name"`

	// executable sha 256
	// Required: true
	ExecutableSha256 *string `json:"executable_sha_256"`

	// file name
	// Required: true
	FileName *string `json:"file_name"`

	// file path
	// Required: true
	FilePath *string `json:"file_path"`

	// host containers count
	// Required: true
	HostContainersCount *string `json:"host_containers_count"`

	// host detections count
	// Required: true
	HostDetectionsCount *string `json:"host_detections_count"`

	// host detections ids
	// Required: true
	HostDetectionsIds []string `json:"host_detections_ids"`

	// host id
	// Required: true
	HostID *string `json:"host_id"`

	// host last seen timestamp
	// Required: true
	HostLastSeenTimestamp *string `json:"host_last_seen_timestamp"`

	// host type
	// Required: true
	HostType *string `json:"host_type"`

	// image digest
	// Required: true
	ImageDigest *string `json:"image_digest"`

	// image first seen timestamp
	// Required: true
	ImageFirstSeenTimestamp *string `json:"image_first_seen_timestamp"`

	// image id
	// Required: true
	ImageID *string `json:"image_id"`

	// image label
	// Required: true
	ImageLabel *string `json:"image_label"`

	// image last seen timestamp
	// Required: true
	ImageLastSeenTimestamp *string `json:"image_last_seen_timestamp"`

	// image maintainer
	// Required: true
	ImageMaintainer *string `json:"image_maintainer"`

	// image name
	// Required: true
	ImageName *string `json:"image_name"`

	// images container count
	// Required: true
	ImagesContainerCount *string `json:"images_container_count"`

	// namespace
	// Required: true
	Namespace *string `json:"namespace"`

	// network ip address
	// Required: true
	NetworkIPAddress *string `json:"network_ip_address"`

	// os version
	// Required: true
	OsVersion *string `json:"os_version"`

	// pod id
	// Required: true
	PodID *string `json:"pod_id"`

	// pod name
	// Required: true
	PodName *string `json:"pod_name"`

	// pod namespace
	// Required: true
	PodNamespace *string `json:"pod_namespace"`

	// sensor version
	// Required: true
	SensorVersion *string `json:"sensor_version"`

	// severity
	// Required: true
	Severity *string `json:"severity"`

	// tactic and technique
	// Required: true
	TacticAndTechnique *string `json:"tactic_and_technique"`

	// type
	// Required: true
	Type *string `json:"type"`

	// vulnerabilities count
	// Required: true
	VulnerabilitiesCount *string `json:"vulnerabilities_count"`
}

// Validate validates this models API runtime detection
func (m *ModelsAPIRuntimeDetection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionTaken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssignedTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloud(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommandLine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerInteractiveMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerNetworkIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerPrivileged(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerReadOnlyRootFs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerUserInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainersImpactedCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectionDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetectionName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutableSha256(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostContainersCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostDetectionsCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostDetectionsIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostLastSeenTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageDigest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageFirstSeenTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageLastSeenTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageMaintainer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImagesContainerCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSensorVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTacticAndTechnique(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVulnerabilitiesCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIRuntimeDetection) validateActionTaken(formats strfmt.Registry) error {

	if err := validate.Required("action_taken", "body", m.ActionTaken); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateAgentType(formats strfmt.Registry) error {

	if err := validate.Required("agent_type", "body", m.AgentType); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateAid(formats strfmt.Registry) error {

	if err := validate.Required("aid", "body", m.Aid); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateAssignedTo(formats strfmt.Registry) error {

	if err := validate.Required("assigned_to", "body", m.AssignedTo); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateCloud(formats strfmt.Registry) error {

	if err := validate.Required("cloud", "body", m.Cloud); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateCloudAccountID(formats strfmt.Registry) error {

	if err := validate.Required("cloud_account_id", "body", m.CloudAccountID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateCloudID(formats strfmt.Registry) error {

	if err := validate.Required("cloud_id", "body", m.CloudID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateCloudInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("cloud_instance_id", "body", m.CloudInstanceID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateCloudName(formats strfmt.Registry) error {

	if err := validate.Required("cloud_name", "body", m.CloudName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("cluster_name", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateCommandLine(formats strfmt.Registry) error {

	if err := validate.Required("command_line", "body", m.CommandLine); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateComputerName(formats strfmt.Registry) error {

	if err := validate.Required("computer_name", "body", m.ComputerName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateContainerDevices(formats strfmt.Registry) error {

	if err := validate.Required("container_devices", "body", m.ContainerDevices); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateContainerID(formats strfmt.Registry) error {

	if err := validate.Required("container_id", "body", m.ContainerID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateContainerInteractiveMode(formats strfmt.Registry) error {

	if err := validate.Required("container_interactive_mode", "body", m.ContainerInteractiveMode); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateContainerName(formats strfmt.Registry) error {

	if err := validate.Required("container_name", "body", m.ContainerName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateContainerNetworkIPAddress(formats strfmt.Registry) error {

	if err := validate.Required("container_network_ip_address", "body", m.ContainerNetworkIPAddress); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateContainerPrivileged(formats strfmt.Registry) error {

	if err := validate.Required("container_privileged", "body", m.ContainerPrivileged); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateContainerReadOnlyRootFs(formats strfmt.Registry) error {

	if err := validate.Required("container_read_only_root_fs", "body", m.ContainerReadOnlyRootFs); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateContainerUserInfo(formats strfmt.Registry) error {

	if err := validate.Required("container_user_info", "body", m.ContainerUserInfo); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateContainersImpactedCount(formats strfmt.Registry) error {

	if err := validate.Required("containers_impacted_count", "body", m.ContainersImpactedCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateDetectTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("detect_timestamp", "body", m.DetectTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateDetectionDescription(formats strfmt.Registry) error {

	if err := validate.Required("detection_description", "body", m.DetectionDescription); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateDetectionID(formats strfmt.Registry) error {

	if err := validate.Required("detection_id", "body", m.DetectionID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateDetectionName(formats strfmt.Registry) error {

	if err := validate.Required("detection_name", "body", m.DetectionName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateExecutableSha256(formats strfmt.Registry) error {

	if err := validate.Required("executable_sha_256", "body", m.ExecutableSha256); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateFileName(formats strfmt.Registry) error {

	if err := validate.Required("file_name", "body", m.FileName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateFilePath(formats strfmt.Registry) error {

	if err := validate.Required("file_path", "body", m.FilePath); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateHostContainersCount(formats strfmt.Registry) error {

	if err := validate.Required("host_containers_count", "body", m.HostContainersCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateHostDetectionsCount(formats strfmt.Registry) error {

	if err := validate.Required("host_detections_count", "body", m.HostDetectionsCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateHostDetectionsIds(formats strfmt.Registry) error {

	if err := validate.Required("host_detections_ids", "body", m.HostDetectionsIds); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateHostID(formats strfmt.Registry) error {

	if err := validate.Required("host_id", "body", m.HostID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateHostLastSeenTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("host_last_seen_timestamp", "body", m.HostLastSeenTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateHostType(formats strfmt.Registry) error {

	if err := validate.Required("host_type", "body", m.HostType); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateImageDigest(formats strfmt.Registry) error {

	if err := validate.Required("image_digest", "body", m.ImageDigest); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateImageFirstSeenTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("image_first_seen_timestamp", "body", m.ImageFirstSeenTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateImageID(formats strfmt.Registry) error {

	if err := validate.Required("image_id", "body", m.ImageID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateImageLabel(formats strfmt.Registry) error {

	if err := validate.Required("image_label", "body", m.ImageLabel); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateImageLastSeenTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("image_last_seen_timestamp", "body", m.ImageLastSeenTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateImageMaintainer(formats strfmt.Registry) error {

	if err := validate.Required("image_maintainer", "body", m.ImageMaintainer); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateImageName(formats strfmt.Registry) error {

	if err := validate.Required("image_name", "body", m.ImageName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateImagesContainerCount(formats strfmt.Registry) error {

	if err := validate.Required("images_container_count", "body", m.ImagesContainerCount); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateNetworkIPAddress(formats strfmt.Registry) error {

	if err := validate.Required("network_ip_address", "body", m.NetworkIPAddress); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateOsVersion(formats strfmt.Registry) error {

	if err := validate.Required("os_version", "body", m.OsVersion); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validatePodID(formats strfmt.Registry) error {

	if err := validate.Required("pod_id", "body", m.PodID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validatePodName(formats strfmt.Registry) error {

	if err := validate.Required("pod_name", "body", m.PodName); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validatePodNamespace(formats strfmt.Registry) error {

	if err := validate.Required("pod_namespace", "body", m.PodNamespace); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateSensorVersion(formats strfmt.Registry) error {

	if err := validate.Required("sensor_version", "body", m.SensorVersion); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateTacticAndTechnique(formats strfmt.Registry) error {

	if err := validate.Required("tactic_and_technique", "body", m.TacticAndTechnique); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIRuntimeDetection) validateVulnerabilitiesCount(formats strfmt.Registry) error {

	if err := validate.Required("vulnerabilities_count", "body", m.VulnerabilitiesCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models API runtime detection based on context it is used
func (m *ModelsAPIRuntimeDetection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsAPIRuntimeDetection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsAPIRuntimeDetection) UnmarshalBinary(b []byte) error {
	var res ModelsAPIRuntimeDetection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
