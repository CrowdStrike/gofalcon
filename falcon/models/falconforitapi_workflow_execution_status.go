// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FalconforitapiWorkflowExecutionStatus falconforitapi workflow execution status
//
// swagger:model falconforitapi.WorkflowExecutionStatus
type FalconforitapiWorkflowExecutionStatus struct {

	// execution id
	// Required: true
	ExecutionID *string `json:"execution_id"`

	// host id
	// Required: true
	HostID *string `json:"host_id"`

	// msg
	// Required: true
	Msg *string `json:"msg"`

	// query id
	// Required: true
	QueryID *string `json:"query_id"`
}

// Validate validates this falconforitapi workflow execution status
func (m *FalconforitapiWorkflowExecutionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExecutionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMsg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiWorkflowExecutionStatus) validateExecutionID(formats strfmt.Registry) error {

	if err := validate.Required("execution_id", "body", m.ExecutionID); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiWorkflowExecutionStatus) validateHostID(formats strfmt.Registry) error {

	if err := validate.Required("host_id", "body", m.HostID); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiWorkflowExecutionStatus) validateMsg(formats strfmt.Registry) error {

	if err := validate.Required("msg", "body", m.Msg); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiWorkflowExecutionStatus) validateQueryID(formats strfmt.Registry) error {

	if err := validate.Required("query_id", "body", m.QueryID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this falconforitapi workflow execution status based on context it is used
func (m *FalconforitapiWorkflowExecutionStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FalconforitapiWorkflowExecutionStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FalconforitapiWorkflowExecutionStatus) UnmarshalBinary(b []byte) error {
	var res FalconforitapiWorkflowExecutionStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
