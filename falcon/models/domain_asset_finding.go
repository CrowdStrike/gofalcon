// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainAssetFinding domain asset finding
//
// swagger:model domain.AssetFinding
type DomainAssetFinding struct {

	// authority
	// Required: true
	Authority *string `json:"authority"`

	// framework
	// Required: true
	Framework *string `json:"framework"`

	// framework name version
	// Required: true
	FrameworkNameVersion *string `json:"framework_name_version"`

	// framework version
	// Required: true
	FrameworkVersion *string `json:"framework_version"`

	// recommendation id
	// Required: true
	RecommendationID *string `json:"recommendation_id"`

	// rule id
	// Required: true
	RuleID *string `json:"rule_id"`

	// rule name
	// Required: true
	RuleName *string `json:"rule_name"`

	// severity
	// Required: true
	Severity *int64 `json:"severity"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this domain asset finding
func (m *DomainAssetFinding) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFramework(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrameworkNameVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrameworkVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecommendationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAssetFinding) validateAuthority(formats strfmt.Registry) error {

	if err := validate.Required("authority", "body", m.Authority); err != nil {
		return err
	}

	return nil
}

func (m *DomainAssetFinding) validateFramework(formats strfmt.Registry) error {

	if err := validate.Required("framework", "body", m.Framework); err != nil {
		return err
	}

	return nil
}

func (m *DomainAssetFinding) validateFrameworkNameVersion(formats strfmt.Registry) error {

	if err := validate.Required("framework_name_version", "body", m.FrameworkNameVersion); err != nil {
		return err
	}

	return nil
}

func (m *DomainAssetFinding) validateFrameworkVersion(formats strfmt.Registry) error {

	if err := validate.Required("framework_version", "body", m.FrameworkVersion); err != nil {
		return err
	}

	return nil
}

func (m *DomainAssetFinding) validateRecommendationID(formats strfmt.Registry) error {

	if err := validate.Required("recommendation_id", "body", m.RecommendationID); err != nil {
		return err
	}

	return nil
}

func (m *DomainAssetFinding) validateRuleID(formats strfmt.Registry) error {

	if err := validate.Required("rule_id", "body", m.RuleID); err != nil {
		return err
	}

	return nil
}

func (m *DomainAssetFinding) validateRuleName(formats strfmt.Registry) error {

	if err := validate.Required("rule_name", "body", m.RuleName); err != nil {
		return err
	}

	return nil
}

func (m *DomainAssetFinding) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *DomainAssetFinding) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain asset finding based on context it is used
func (m *DomainAssetFinding) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainAssetFinding) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainAssetFinding) UnmarshalBinary(b []byte) error {
	var res DomainAssetFinding
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
