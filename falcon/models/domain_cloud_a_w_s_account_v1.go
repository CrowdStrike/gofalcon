// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainCloudAWSAccountV1 domain cloud a w s account v1
//
// swagger:model domain.CloudAWSAccountV1
type DomainCloudAWSAccountV1 struct {

	// created at
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"CreatedAt"`

	// deleted at
	// Required: true
	// Format: date-time
	DeletedAt *strfmt.DateTime `json:"DeletedAt"`

	// ID
	// Required: true
	ID *int64 `json:"ID"`

	// updated at
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"UpdatedAt"`

	// 12 digit AWS provided unique identifier for the account.
	AccountID string `json:"account_id,omitempty"`

	// AWS account name
	AccountName string `json:"account_name,omitempty"`

	// account type
	AccountType string `json:"account_type,omitempty"`

	// active regions
	ActiveRegions []string `json:"active_regions"`

	// cid
	Cid string `json:"cid,omitempty"`

	// cloudformation stack arn
	CloudformationStackArn string `json:"cloudformation_stack_arn,omitempty"`

	// cloudformation update url
	CloudformationUpdateURL string `json:"cloudformation_update_url,omitempty"`

	// cloudformation url
	CloudformationURL string `json:"cloudformation_url,omitempty"`

	// conditions
	Conditions []*DomainCloudCondition `json:"conditions"`

	// csp live events are enabled
	CspEvents bool `json:"csp_events,omitempty"`

	// environment
	Environment string `json:"environment,omitempty"`

	// falcon client id
	FalconClientID string `json:"falcon_client_id,omitempty"`

	// Permissions status for each product returned via API.
	// Required: true
	IamServicePermissionsStatus []*DomainProductPermission `json:"iam_service_permissions_status"`

	// inventory filter
	// Required: true
	InventoryFilter []*DomainAWSInventoryFilterSetting `json:"inventory_filter"`

	// is custom rolename
	// Required: true
	IsCustomRolename *bool `json:"is_custom_rolename"`

	// is delegated admin
	IsDelegatedAdmin bool `json:"is_delegated_admin,omitempty"`

	// is master
	IsMaster bool `json:"is_master,omitempty"`

	// Up to 34 character AWS provided unique identifier for the organization.
	OrganizationID string `json:"organization_id,omitempty"`

	// products
	// Required: true
	Products []*DomainProductFeatures `json:"products"`

	// registration status
	RegistrationStatus string `json:"registration_status,omitempty"`

	// resource metadata
	// Required: true
	ResourceMetadata *DomainAWSAccountResourceMetadata `json:"resource_metadata"`

	// resource name prefix
	ResourceNamePrefix string `json:"resource_name_prefix,omitempty"`

	// resource name suffix
	ResourceNameSuffix string `json:"resource_name_suffix,omitempty"`

	// 12 digit AWS provided unique identifier for the root account (of the organization this account belongs to).
	RootAccountID string `json:"root_account_id,omitempty"`

	// root iam role
	RootIamRole bool `json:"root_iam_role,omitempty"`

	// s3 url
	S3URL string `json:"s3_url,omitempty"`

	// Account registration status for each product and feature
	Status []*DomainProductFeaturesStatus `json:"status"`

	// target ous
	TargetOus []string `json:"target_ous"`

	// use existing cloudtrail
	UseExistingCloudtrail bool `json:"use_existing_cloudtrail,omitempty"`
}

// Validate validates this domain cloud a w s account v1
func (m *DomainCloudAWSAccountV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIamServicePermissionsStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInventoryFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsCustomRolename(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainCloudAWSAccountV1) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("CreatedAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("CreatedAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainCloudAWSAccountV1) validateDeletedAt(formats strfmt.Registry) error {

	if err := validate.Required("DeletedAt", "body", m.DeletedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("DeletedAt", "body", "date-time", m.DeletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainCloudAWSAccountV1) validateID(formats strfmt.Registry) error {

	if err := validate.Required("ID", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DomainCloudAWSAccountV1) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("UpdatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("UpdatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainCloudAWSAccountV1) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainCloudAWSAccountV1) validateIamServicePermissionsStatus(formats strfmt.Registry) error {

	if err := validate.Required("iam_service_permissions_status", "body", m.IamServicePermissionsStatus); err != nil {
		return err
	}

	for i := 0; i < len(m.IamServicePermissionsStatus); i++ {
		if swag.IsZero(m.IamServicePermissionsStatus[i]) { // not required
			continue
		}

		if m.IamServicePermissionsStatus[i] != nil {
			if err := m.IamServicePermissionsStatus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("iam_service_permissions_status" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("iam_service_permissions_status" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainCloudAWSAccountV1) validateInventoryFilter(formats strfmt.Registry) error {

	if err := validate.Required("inventory_filter", "body", m.InventoryFilter); err != nil {
		return err
	}

	for i := 0; i < len(m.InventoryFilter); i++ {
		if swag.IsZero(m.InventoryFilter[i]) { // not required
			continue
		}

		if m.InventoryFilter[i] != nil {
			if err := m.InventoryFilter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inventory_filter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inventory_filter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainCloudAWSAccountV1) validateIsCustomRolename(formats strfmt.Registry) error {

	if err := validate.Required("is_custom_rolename", "body", m.IsCustomRolename); err != nil {
		return err
	}

	return nil
}

func (m *DomainCloudAWSAccountV1) validateProducts(formats strfmt.Registry) error {

	if err := validate.Required("products", "body", m.Products); err != nil {
		return err
	}

	for i := 0; i < len(m.Products); i++ {
		if swag.IsZero(m.Products[i]) { // not required
			continue
		}

		if m.Products[i] != nil {
			if err := m.Products[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainCloudAWSAccountV1) validateResourceMetadata(formats strfmt.Registry) error {

	if err := validate.Required("resource_metadata", "body", m.ResourceMetadata); err != nil {
		return err
	}

	if m.ResourceMetadata != nil {
		if err := m.ResourceMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resource_metadata")
			}
			return err
		}
	}

	return nil
}

func (m *DomainCloudAWSAccountV1) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	for i := 0; i < len(m.Status); i++ {
		if swag.IsZero(m.Status[i]) { // not required
			continue
		}

		if m.Status[i] != nil {
			if err := m.Status[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("status" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("status" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this domain cloud a w s account v1 based on the context it is used
func (m *DomainCloudAWSAccountV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIamServicePermissionsStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInventoryFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainCloudAWSAccountV1) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {

			if swag.IsZero(m.Conditions[i]) { // not required
				return nil
			}

			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainCloudAWSAccountV1) contextValidateIamServicePermissionsStatus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IamServicePermissionsStatus); i++ {

		if m.IamServicePermissionsStatus[i] != nil {

			if swag.IsZero(m.IamServicePermissionsStatus[i]) { // not required
				return nil
			}

			if err := m.IamServicePermissionsStatus[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("iam_service_permissions_status" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("iam_service_permissions_status" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainCloudAWSAccountV1) contextValidateInventoryFilter(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InventoryFilter); i++ {

		if m.InventoryFilter[i] != nil {

			if swag.IsZero(m.InventoryFilter[i]) { // not required
				return nil
			}

			if err := m.InventoryFilter[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inventory_filter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inventory_filter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainCloudAWSAccountV1) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Products); i++ {

		if m.Products[i] != nil {

			if swag.IsZero(m.Products[i]) { // not required
				return nil
			}

			if err := m.Products[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainCloudAWSAccountV1) contextValidateResourceMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceMetadata != nil {

		if err := m.ResourceMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resource_metadata")
			}
			return err
		}
	}

	return nil
}

func (m *DomainCloudAWSAccountV1) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Status); i++ {

		if m.Status[i] != nil {

			if swag.IsZero(m.Status[i]) { // not required
				return nil
			}

			if err := m.Status[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("status" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("status" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainCloudAWSAccountV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainCloudAWSAccountV1) UnmarshalBinary(b []byte) error {
	var res DomainCloudAWSAccountV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
