// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DevicecontrolapiRespUSBExceptionV2 devicecontrolapi resp u s b exception v2
//
// swagger:model devicecontrolapi.RespUSBExceptionV2
type DevicecontrolapiRespUSBExceptionV2 struct {

	// action
	// Required: true
	Action *string `json:"action"`

	// USB Device Class
	// Required: true
	Class *string `json:"class"`

	// combined id
	CombinedID string `json:"combined_id,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// expiration time
	// Format: date-time
	ExpirationTime strfmt.DateTime `json:"expiration_time,omitempty"`

	// ID of the exception
	// Required: true
	ID *string `json:"id"`

	// match method
	// Required: true
	MatchMethod *string `json:"match_method"`

	// product id
	ProductID string `json:"product_id,omitempty"`

	// Product name
	ProductName string `json:"product_name,omitempty"`

	// serial number
	SerialNumber string `json:"serial_number,omitempty"`

	// trigger id
	TriggerID string `json:"trigger_id,omitempty"`

	// use wildcard
	UseWildcard bool `json:"use_wildcard,omitempty"`

	// Decimal value of the vendor ID
	// Required: true
	VendorID *string `json:"vendor_id"`

	// Name of the vendor
	// Required: true
	VendorName *string `json:"vendor_name"`
}

// Validate validates this devicecontrolapi resp u s b exception v2
func (m *DevicecontrolapiRespUSBExceptionV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendorName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontrolapiRespUSBExceptionV2) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiRespUSBExceptionV2) validateClass(formats strfmt.Registry) error {

	if err := validate.Required("class", "body", m.Class); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiRespUSBExceptionV2) validateExpirationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("expiration_time", "body", "date-time", m.ExpirationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiRespUSBExceptionV2) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiRespUSBExceptionV2) validateMatchMethod(formats strfmt.Registry) error {

	if err := validate.Required("match_method", "body", m.MatchMethod); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiRespUSBExceptionV2) validateVendorID(formats strfmt.Registry) error {

	if err := validate.Required("vendor_id", "body", m.VendorID); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiRespUSBExceptionV2) validateVendorName(formats strfmt.Registry) error {

	if err := validate.Required("vendor_name", "body", m.VendorName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this devicecontrolapi resp u s b exception v2 based on context it is used
func (m *DevicecontrolapiRespUSBExceptionV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DevicecontrolapiRespUSBExceptionV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevicecontrolapiRespUSBExceptionV2) UnmarshalBinary(b []byte) error {
	var res DevicecontrolapiRespUSBExceptionV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
