// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VulnerabilitymetadataapiCVSSv2 vulnerabilitymetadataapi c v s sv2
//
// swagger:model vulnerabilitymetadataapi.CVSSv2
type VulnerabilitymetadataapiCVSSv2 struct {

	// base metrics
	// Required: true
	BaseMetrics *VulnerabilitymetadataapiBaseMetricCVSSv2 `json:"base_metrics"`

	// environmental metrics
	// Required: true
	EnvironmentalMetrics *VulnerabilitymetadataapiCVSSEnvironmentalMetrics `json:"environmental_metrics"`

	// severity
	// Required: true
	Severity *string `json:"severity"`

	// temporal metrics
	// Required: true
	TemporalMetrics *VulnerabilitymetadataapiCVSSTemporalMetrics `json:"temporal_metrics"`
}

// Validate validates this vulnerabilitymetadataapi c v s sv2
func (m *VulnerabilitymetadataapiCVSSv2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentalMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemporalMetrics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilitymetadataapiCVSSv2) validateBaseMetrics(formats strfmt.Registry) error {

	if err := validate.Required("base_metrics", "body", m.BaseMetrics); err != nil {
		return err
	}

	if m.BaseMetrics != nil {
		if err := m.BaseMetrics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base_metrics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("base_metrics")
			}
			return err
		}
	}

	return nil
}

func (m *VulnerabilitymetadataapiCVSSv2) validateEnvironmentalMetrics(formats strfmt.Registry) error {

	if err := validate.Required("environmental_metrics", "body", m.EnvironmentalMetrics); err != nil {
		return err
	}

	if m.EnvironmentalMetrics != nil {
		if err := m.EnvironmentalMetrics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("environmental_metrics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("environmental_metrics")
			}
			return err
		}
	}

	return nil
}

func (m *VulnerabilitymetadataapiCVSSv2) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiCVSSv2) validateTemporalMetrics(formats strfmt.Registry) error {

	if err := validate.Required("temporal_metrics", "body", m.TemporalMetrics); err != nil {
		return err
	}

	if m.TemporalMetrics != nil {
		if err := m.TemporalMetrics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("temporal_metrics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("temporal_metrics")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vulnerabilitymetadataapi c v s sv2 based on the context it is used
func (m *VulnerabilitymetadataapiCVSSv2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBaseMetrics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnvironmentalMetrics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemporalMetrics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilitymetadataapiCVSSv2) contextValidateBaseMetrics(ctx context.Context, formats strfmt.Registry) error {

	if m.BaseMetrics != nil {

		if err := m.BaseMetrics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base_metrics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("base_metrics")
			}
			return err
		}
	}

	return nil
}

func (m *VulnerabilitymetadataapiCVSSv2) contextValidateEnvironmentalMetrics(ctx context.Context, formats strfmt.Registry) error {

	if m.EnvironmentalMetrics != nil {

		if err := m.EnvironmentalMetrics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("environmental_metrics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("environmental_metrics")
			}
			return err
		}
	}

	return nil
}

func (m *VulnerabilitymetadataapiCVSSv2) contextValidateTemporalMetrics(ctx context.Context, formats strfmt.Registry) error {

	if m.TemporalMetrics != nil {

		if err := m.TemporalMetrics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("temporal_metrics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("temporal_metrics")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VulnerabilitymetadataapiCVSSv2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VulnerabilitymetadataapiCVSSv2) UnmarshalBinary(b []byte) error {
	var res VulnerabilitymetadataapiCVSSv2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
