// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FalconforitapiFileSizeConfigResponse falconforitapi file size config response
//
// swagger:model falconforitapi.FileSizeConfigResponse
type FalconforitapiFileSizeConfigResponse struct {

	// max file count
	// Required: true
	MaxFileCount *int32 `json:"max_file_count"`

	// max file size
	// Required: true
	MaxFileSize *int64 `json:"max_file_size"`

	// max total file size
	// Required: true
	MaxTotalFileSize *int64 `json:"max_total_file_size"`

	// max total size per job
	// Required: true
	MaxTotalSizePerJob *int64 `json:"max_total_size_per_job"`
}

// Validate validates this falconforitapi file size config response
func (m *FalconforitapiFileSizeConfigResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxFileCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxFileSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxTotalFileSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxTotalSizePerJob(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiFileSizeConfigResponse) validateMaxFileCount(formats strfmt.Registry) error {

	if err := validate.Required("max_file_count", "body", m.MaxFileCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiFileSizeConfigResponse) validateMaxFileSize(formats strfmt.Registry) error {

	if err := validate.Required("max_file_size", "body", m.MaxFileSize); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiFileSizeConfigResponse) validateMaxTotalFileSize(formats strfmt.Registry) error {

	if err := validate.Required("max_total_file_size", "body", m.MaxTotalFileSize); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiFileSizeConfigResponse) validateMaxTotalSizePerJob(formats strfmt.Registry) error {

	if err := validate.Required("max_total_size_per_job", "body", m.MaxTotalSizePerJob); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this falconforitapi file size config response based on context it is used
func (m *FalconforitapiFileSizeConfigResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FalconforitapiFileSizeConfigResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FalconforitapiFileSizeConfigResponse) UnmarshalBinary(b []byte) error {
	var res FalconforitapiFileSizeConfigResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
