// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActivitiesDependencies activities dependencies
//
// swagger:model activities.Dependencies
type ActivitiesDependencies struct {

	// Id of the store app opr foundry app template to which the dependencies appear on
	// Required: true
	AppID *string `json:"app_id"`

	// Type of the app whether its store or foundry.
	// Required: true
	AppType *string `json:"app_type"`

	// Url of the logo for the app or app template linked to this activity.
	// Required: true
	LogoURL *string `json:"logo_url"`
}

// Validate validates this activities dependencies
func (m *ActivitiesDependencies) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogoURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActivitiesDependencies) validateAppID(formats strfmt.Registry) error {

	if err := validate.Required("app_id", "body", m.AppID); err != nil {
		return err
	}

	return nil
}

func (m *ActivitiesDependencies) validateAppType(formats strfmt.Registry) error {

	if err := validate.Required("app_type", "body", m.AppType); err != nil {
		return err
	}

	return nil
}

func (m *ActivitiesDependencies) validateLogoURL(formats strfmt.Registry) error {

	if err := validate.Required("logo_url", "body", m.LogoURL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this activities dependencies based on context it is used
func (m *ActivitiesDependencies) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ActivitiesDependencies) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActivitiesDependencies) UnmarshalBinary(b []byte) error {
	var res ActivitiesDependencies
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
