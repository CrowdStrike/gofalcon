// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainAPIRuleDetailsV1 domain API rule details v1
//
// swagger:model domain.APIRuleDetailsV1
type DomainAPIRuleDetailsV1 struct {

	// additional information
	// Required: true
	AdditionalInformation *string `json:"additional_information"`

	// applicable profiles
	// Required: true
	ApplicableProfiles []string `json:"applicable_profiles"`

	// assessment status
	// Required: true
	AssessmentStatus *string `json:"assessment_status"`

	// audit procedure
	// Required: true
	AuditProcedure *string `json:"audit_procedure"`

	// authority
	// Required: true
	Authority *string `json:"authority"`

	// benchmark title
	// Required: true
	BenchmarkTitle *string `json:"benchmark_title"`

	// description
	// Required: true
	Description *string `json:"description"`

	// id
	// Required: true
	ID *string `json:"id"`

	// impact statement
	// Required: true
	ImpactStatement *string `json:"impact_statement"`

	// platform
	// Required: true
	Platform *string `json:"platform"`

	// rationale statement
	// Required: true
	RationaleStatement *string `json:"rationale_statement"`

	// recommendation id
	// Required: true
	RecommendationID *string `json:"recommendation_id"`

	// references
	References []string `json:"references"`

	// remediation procedure
	// Required: true
	RemediationProcedure *string `json:"remediation_procedure"`

	// title
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this domain API rule details v1
func (m *DomainAPIRuleDetailsV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicableProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssessmentStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuditProcedure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBenchmarkTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImpactStatement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRationaleStatement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecommendationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediationProcedure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAPIRuleDetailsV1) validateAdditionalInformation(formats strfmt.Registry) error {

	if err := validate.Required("additional_information", "body", m.AdditionalInformation); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIRuleDetailsV1) validateApplicableProfiles(formats strfmt.Registry) error {

	if err := validate.Required("applicable_profiles", "body", m.ApplicableProfiles); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIRuleDetailsV1) validateAssessmentStatus(formats strfmt.Registry) error {

	if err := validate.Required("assessment_status", "body", m.AssessmentStatus); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIRuleDetailsV1) validateAuditProcedure(formats strfmt.Registry) error {

	if err := validate.Required("audit_procedure", "body", m.AuditProcedure); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIRuleDetailsV1) validateAuthority(formats strfmt.Registry) error {

	if err := validate.Required("authority", "body", m.Authority); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIRuleDetailsV1) validateBenchmarkTitle(formats strfmt.Registry) error {

	if err := validate.Required("benchmark_title", "body", m.BenchmarkTitle); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIRuleDetailsV1) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIRuleDetailsV1) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIRuleDetailsV1) validateImpactStatement(formats strfmt.Registry) error {

	if err := validate.Required("impact_statement", "body", m.ImpactStatement); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIRuleDetailsV1) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIRuleDetailsV1) validateRationaleStatement(formats strfmt.Registry) error {

	if err := validate.Required("rationale_statement", "body", m.RationaleStatement); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIRuleDetailsV1) validateRecommendationID(formats strfmt.Registry) error {

	if err := validate.Required("recommendation_id", "body", m.RecommendationID); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIRuleDetailsV1) validateRemediationProcedure(formats strfmt.Registry) error {

	if err := validate.Required("remediation_procedure", "body", m.RemediationProcedure); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIRuleDetailsV1) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain API rule details v1 based on context it is used
func (m *DomainAPIRuleDetailsV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainAPIRuleDetailsV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainAPIRuleDetailsV1) UnmarshalBinary(b []byte) error {
	var res DomainAPIRuleDetailsV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
