// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DetectsapiAggregationResultItem detectsapi aggregation result item
//
// swagger:model detectsapi.AggregationResultItem
type DetectsapiAggregationResultItem struct {

	// total count of items falling in this bucket
	// Required: true
	Count *int64 `json:"count"`

	// used to determine the start of the range in aggregations
	From float64 `json:"from,omitempty"`

	// the formatted string version using the format parameter specification
	KeyAsString string `json:"key_as_string,omitempty"`

	// depending on the field in the search term, label could be of the form 'From-To' or the distinct values of the search term
	Label DetectsapiAggregationResultItemLabel `json:"label,omitempty"`

	// string representation of 'From' date
	StringFrom string `json:"string_from,omitempty"`

	// string representation of 'To' date
	StringTo string `json:"string_to,omitempty"`

	// nested aggregation result
	SubAggregates []*DetectsapiAggregationResult `json:"sub_aggregates"`

	// used to determine end of the range in aggregations
	To float64 `json:"to,omitempty"`

	// numeric aggregations (Min, Max, Avg, Percentile...)
	Value float64 `json:"value,omitempty"`

	// string representation of Value
	ValueAsString string `json:"value_as_string,omitempty"`
}

// Validate validates this detectsapi aggregation result item
func (m *DetectsapiAggregationResultItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubAggregates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DetectsapiAggregationResultItem) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("count", "body", m.Count); err != nil {
		return err
	}

	return nil
}

func (m *DetectsapiAggregationResultItem) validateSubAggregates(formats strfmt.Registry) error {
	if swag.IsZero(m.SubAggregates) { // not required
		return nil
	}

	for i := 0; i < len(m.SubAggregates); i++ {
		if swag.IsZero(m.SubAggregates[i]) { // not required
			continue
		}

		if m.SubAggregates[i] != nil {
			if err := m.SubAggregates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sub_aggregates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sub_aggregates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this detectsapi aggregation result item based on the context it is used
func (m *DetectsapiAggregationResultItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSubAggregates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DetectsapiAggregationResultItem) contextValidateSubAggregates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SubAggregates); i++ {

		if m.SubAggregates[i] != nil {

			if swag.IsZero(m.SubAggregates[i]) { // not required
				return nil
			}

			if err := m.SubAggregates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sub_aggregates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sub_aggregates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DetectsapiAggregationResultItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DetectsapiAggregationResultItem) UnmarshalBinary(b []byte) error {
	var res DetectsapiAggregationResultItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
