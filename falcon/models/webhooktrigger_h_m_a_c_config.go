// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WebhooktriggerHMACConfig webhooktrigger h m a c config
//
// swagger:model webhooktrigger.HMACConfig
type WebhooktriggerHMACConfig struct {

	// Delimiter for fields in HMAC calculation (dot|comma)
	FieldDelimiter string `json:"field_delimiter,omitempty"`

	// Request components to include in HMAC calculation (body|timestamp|message_id)
	Fields []string `json:"fields"`

	// Hash function to use for HMAC (e.g., sha256)
	HashFunction string `json:"hash_function,omitempty"`

	// Name of the header containing the webhook message ID
	MessageIDHeaderName string `json:"message_id_header_name,omitempty"`

	// Secret key for HMAC signing
	Secret string `json:"secret,omitempty"`

	// Encoding format for the signature
	SignatureEncoding string `json:"signature_encoding,omitempty"`

	// Name of the header containing the HMAC signature
	SignatureHeaderName string `json:"signature_header_name,omitempty"`

	// Prefix of the HMAC signature which defines the signature format
	SignaturePrefix string `json:"signature_prefix,omitempty"`

	// Name of the header containing the timestamp
	TimestampHeaderName string `json:"timestamp_header_name,omitempty"`
}

// Validate validates this webhooktrigger h m a c config
func (m *WebhooktriggerHMACConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this webhooktrigger h m a c config based on context it is used
func (m *WebhooktriggerHMACConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WebhooktriggerHMACConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebhooktriggerHMACConfig) UnmarshalBinary(b []byte) error {
	var res WebhooktriggerHMACConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
