// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainContentUpdatePolicyRespV1 domain content update policy resp v1
//
// swagger:model domain.ContentUpdatePolicyRespV1
type DomainContentUpdatePolicyRespV1 struct {

	// assignment rule
	// Required: true
	AssignmentRule *string `json:"assignment_rule"`

	// assignment type
	// Required: true
	AssignmentType *string `json:"assignment_type"`

	// channel version
	// Required: true
	ChannelVersion *int64 `json:"channel_version"`

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// created by
	// Required: true
	CreatedBy *string `json:"created_by"`

	// created timestamp
	// Required: true
	// Format: date-time
	CreatedTimestamp *strfmt.DateTime `json:"created_timestamp"`

	// description
	// Required: true
	Description *string `json:"description"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// groups
	// Required: true
	Groups []string `json:"groups"`

	// id
	// Required: true
	ID *string `json:"id"`

	// modified by
	// Required: true
	ModifiedBy *string `json:"modified_by"`

	// modified timestamp
	// Required: true
	// Format: date-time
	ModifiedTimestamp *strfmt.DateTime `json:"modified_timestamp"`

	// name
	// Required: true
	Name *string `json:"name"`

	// platform id
	// Required: true
	PlatformID *string `json:"platform_id"`

	// platform name
	// Required: true
	PlatformName *string `json:"platform_name"`

	// precedence
	// Required: true
	Precedence *int64 `json:"precedence"`

	// settings
	// Required: true
	Settings *DomainContentUpdateSettingsV1 `json:"settings"`

	// settings hash
	SettingsHash string `json:"settings_hash,omitempty"`
}

// Validate validates this domain content update policy resp v1
func (m *DomainContentUpdatePolicyRespV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignmentRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssignmentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrecedence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainContentUpdatePolicyRespV1) validateAssignmentRule(formats strfmt.Registry) error {

	if err := validate.Required("assignment_rule", "body", m.AssignmentRule); err != nil {
		return err
	}

	return nil
}

func (m *DomainContentUpdatePolicyRespV1) validateAssignmentType(formats strfmt.Registry) error {

	if err := validate.Required("assignment_type", "body", m.AssignmentType); err != nil {
		return err
	}

	return nil
}

func (m *DomainContentUpdatePolicyRespV1) validateChannelVersion(formats strfmt.Registry) error {

	if err := validate.Required("channel_version", "body", m.ChannelVersion); err != nil {
		return err
	}

	return nil
}

func (m *DomainContentUpdatePolicyRespV1) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *DomainContentUpdatePolicyRespV1) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("created_by", "body", m.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (m *DomainContentUpdatePolicyRespV1) validateCreatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("created_timestamp", "body", m.CreatedTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("created_timestamp", "body", "date-time", m.CreatedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainContentUpdatePolicyRespV1) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *DomainContentUpdatePolicyRespV1) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *DomainContentUpdatePolicyRespV1) validateGroups(formats strfmt.Registry) error {

	if err := validate.Required("groups", "body", m.Groups); err != nil {
		return err
	}

	return nil
}

func (m *DomainContentUpdatePolicyRespV1) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DomainContentUpdatePolicyRespV1) validateModifiedBy(formats strfmt.Registry) error {

	if err := validate.Required("modified_by", "body", m.ModifiedBy); err != nil {
		return err
	}

	return nil
}

func (m *DomainContentUpdatePolicyRespV1) validateModifiedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("modified_timestamp", "body", m.ModifiedTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("modified_timestamp", "body", "date-time", m.ModifiedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainContentUpdatePolicyRespV1) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DomainContentUpdatePolicyRespV1) validatePlatformID(formats strfmt.Registry) error {

	if err := validate.Required("platform_id", "body", m.PlatformID); err != nil {
		return err
	}

	return nil
}

func (m *DomainContentUpdatePolicyRespV1) validatePlatformName(formats strfmt.Registry) error {

	if err := validate.Required("platform_name", "body", m.PlatformName); err != nil {
		return err
	}

	return nil
}

func (m *DomainContentUpdatePolicyRespV1) validatePrecedence(formats strfmt.Registry) error {

	if err := validate.Required("precedence", "body", m.Precedence); err != nil {
		return err
	}

	return nil
}

func (m *DomainContentUpdatePolicyRespV1) validateSettings(formats strfmt.Registry) error {

	if err := validate.Required("settings", "body", m.Settings); err != nil {
		return err
	}

	if m.Settings != nil {
		if err := m.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this domain content update policy resp v1 based on the context it is used
func (m *DomainContentUpdatePolicyRespV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainContentUpdatePolicyRespV1) contextValidateSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.Settings != nil {

		if err := m.Settings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainContentUpdatePolicyRespV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainContentUpdatePolicyRespV1) UnmarshalBinary(b []byte) error {
	var res DomainContentUpdatePolicyRespV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
