// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegistrationPolicyExtV1 registration policy ext v1
//
// swagger:model registration.PolicyExtV1
type RegistrationPolicyExtV1 struct {

	// account id
	// Required: true
	AccountID *string `json:"account_id"`

	// account ids
	// Required: true
	AccountIds []string `json:"account_ids"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// policy id
	// Required: true
	PolicyID *int32 `json:"policy_id"`

	// regions
	// Required: true
	Regions []string `json:"regions"`

	// severity
	// Required: true
	Severity *string `json:"severity"`

	// tag excluded
	// Required: true
	TagExcluded *bool `json:"tag_excluded"`
}

// Validate validates this registration policy ext v1
func (m *RegistrationPolicyExtV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagExcluded(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegistrationPolicyExtV1) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("account_id", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationPolicyExtV1) validateAccountIds(formats strfmt.Registry) error {

	if err := validate.Required("account_ids", "body", m.AccountIds); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationPolicyExtV1) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationPolicyExtV1) validatePolicyID(formats strfmt.Registry) error {

	if err := validate.Required("policy_id", "body", m.PolicyID); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationPolicyExtV1) validateRegions(formats strfmt.Registry) error {

	if err := validate.Required("regions", "body", m.Regions); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationPolicyExtV1) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationPolicyExtV1) validateTagExcluded(formats strfmt.Registry) error {

	if err := validate.Required("tag_excluded", "body", m.TagExcluded); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this registration policy ext v1 based on context it is used
func (m *RegistrationPolicyExtV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RegistrationPolicyExtV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegistrationPolicyExtV1) UnmarshalBinary(b []byte) error {
	var res RegistrationPolicyExtV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
