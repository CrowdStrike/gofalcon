// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IngestionExPRTRatingFactors ingestion ex p r t rating factors
//
// swagger:model ingestion.ExPRTRatingFactors
type IngestionExPRTRatingFactors struct {

	// description
	// Required: true
	Description *string `json:"description"`

	// factor
	// Required: true
	Factor *string `json:"factor"`

	// impact
	// Required: true
	Impact *int32 `json:"impact"`

	// long description
	// Required: true
	LongDescription *string `json:"long_description"`
}

// Validate validates this ingestion ex p r t rating factors
func (m *IngestionExPRTRatingFactors) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFactor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImpact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLongDescription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestionExPRTRatingFactors) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *IngestionExPRTRatingFactors) validateFactor(formats strfmt.Registry) error {

	if err := validate.Required("factor", "body", m.Factor); err != nil {
		return err
	}

	return nil
}

func (m *IngestionExPRTRatingFactors) validateImpact(formats strfmt.Registry) error {

	if err := validate.Required("impact", "body", m.Impact); err != nil {
		return err
	}

	return nil
}

func (m *IngestionExPRTRatingFactors) validateLongDescription(formats strfmt.Registry) error {

	if err := validate.Required("long_description", "body", m.LongDescription); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ingestion ex p r t rating factors based on context it is used
func (m *IngestionExPRTRatingFactors) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IngestionExPRTRatingFactors) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionExPRTRatingFactors) UnmarshalBinary(b []byte) error {
	var res IngestionExPRTRatingFactors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
