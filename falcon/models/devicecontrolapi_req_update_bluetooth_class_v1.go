// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DevicecontrolapiReqUpdateBluetoothClassV1 devicecontrolapi req update bluetooth class v1
//
// swagger:model devicecontrolapi.ReqUpdateBluetoothClassV1
type DevicecontrolapiReqUpdateBluetoothClassV1 struct {

	// Action to be taken for devices in this class
	// Required: true
	// Enum: [BLOCK_ALL,FULL_ACCESS]
	Action *string `json:"action"`

	// The Bluetooth Major Device class name
	// Required: true
	Class *string `json:"class"`

	// Array of Bluetooth Minor Device Classes in the Major Class
	// Required: true
	MinorClasses []*DevicecontrolapiReqUpdateBluetoothMinorClassV1 `json:"minor_classes"`
}

// Validate validates this devicecontrolapi req update bluetooth class v1
func (m *DevicecontrolapiReqUpdateBluetoothClassV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinorClasses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var devicecontrolapiReqUpdateBluetoothClassV1TypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BLOCK_ALL,FULL_ACCESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		devicecontrolapiReqUpdateBluetoothClassV1TypeActionPropEnum = append(devicecontrolapiReqUpdateBluetoothClassV1TypeActionPropEnum, v)
	}
}

const (

	// DevicecontrolapiReqUpdateBluetoothClassV1ActionBLOCKALLFULLACCESS captures enum value "BLOCK_ALL,FULL_ACCESS"
	DevicecontrolapiReqUpdateBluetoothClassV1ActionBLOCKALLFULLACCESS string = "BLOCK_ALL,FULL_ACCESS"
)

// prop value enum
func (m *DevicecontrolapiReqUpdateBluetoothClassV1) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, devicecontrolapiReqUpdateBluetoothClassV1TypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DevicecontrolapiReqUpdateBluetoothClassV1) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiReqUpdateBluetoothClassV1) validateClass(formats strfmt.Registry) error {

	if err := validate.Required("class", "body", m.Class); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiReqUpdateBluetoothClassV1) validateMinorClasses(formats strfmt.Registry) error {

	if err := validate.Required("minor_classes", "body", m.MinorClasses); err != nil {
		return err
	}

	for i := 0; i < len(m.MinorClasses); i++ {
		if swag.IsZero(m.MinorClasses[i]) { // not required
			continue
		}

		if m.MinorClasses[i] != nil {
			if err := m.MinorClasses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("minor_classes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("minor_classes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this devicecontrolapi req update bluetooth class v1 based on the context it is used
func (m *DevicecontrolapiReqUpdateBluetoothClassV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMinorClasses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontrolapiReqUpdateBluetoothClassV1) contextValidateMinorClasses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MinorClasses); i++ {

		if m.MinorClasses[i] != nil {

			if swag.IsZero(m.MinorClasses[i]) { // not required
				return nil
			}

			if err := m.MinorClasses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("minor_classes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("minor_classes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DevicecontrolapiReqUpdateBluetoothClassV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevicecontrolapiReqUpdateBluetoothClassV1) UnmarshalBinary(b []byte) error {
	var res DevicecontrolapiReqUpdateBluetoothClassV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
