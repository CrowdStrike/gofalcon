// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TypesGetServicesRelatedEntity types get services related entity
//
// swagger:model types.GetServicesRelatedEntity
type TypesGetServicesRelatedEntity struct {

	// aggregation type
	AggregationType int32 `json:"aggregation_type,omitempty"`

	// entity type
	EntityType int32 `json:"entity_type,omitempty"`

	// filters
	Filters *TypesGetServicesRelatedEntityFilters `json:"filters,omitempty"`

	// group by fields
	GroupByFields *TypesGetServicesRelatedEntityGroupByFields `json:"groupByFields,omitempty"`
}

// Validate validates this types get services related entity
func (m *TypesGetServicesRelatedEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupByFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesGetServicesRelatedEntity) validateFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.Filters) { // not required
		return nil
	}

	if m.Filters != nil {
		if err := m.Filters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filters")
			}
			return err
		}
	}

	return nil
}

func (m *TypesGetServicesRelatedEntity) validateGroupByFields(formats strfmt.Registry) error {
	if swag.IsZero(m.GroupByFields) { // not required
		return nil
	}

	if m.GroupByFields != nil {
		if err := m.GroupByFields.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("groupByFields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("groupByFields")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this types get services related entity based on the context it is used
func (m *TypesGetServicesRelatedEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroupByFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesGetServicesRelatedEntity) contextValidateFilters(ctx context.Context, formats strfmt.Registry) error {

	if m.Filters != nil {

		if swag.IsZero(m.Filters) { // not required
			return nil
		}

		if err := m.Filters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filters")
			}
			return err
		}
	}

	return nil
}

func (m *TypesGetServicesRelatedEntity) contextValidateGroupByFields(ctx context.Context, formats strfmt.Registry) error {

	if m.GroupByFields != nil {

		if swag.IsZero(m.GroupByFields) { // not required
			return nil
		}

		if err := m.GroupByFields.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("groupByFields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("groupByFields")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TypesGetServicesRelatedEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesGetServicesRelatedEntity) UnmarshalBinary(b []byte) error {
	var res TypesGetServicesRelatedEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
