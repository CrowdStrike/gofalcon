// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainOCITenancyV1 domain o c i tenancy v1
//
// swagger:model domain.OCITenancyV1
type DomainOCITenancyV1 struct {

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// conditions
	Conditions []*DomainCloudCondition `json:"conditions"`

	// OCI Tenancy created date
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// cspm enabled
	// Required: true
	CspmEnabled *bool `json:"cspm_enabled"`

	// OCI Tenancy Registration fingerprint
	// Required: true
	FingerPrint *string `json:"finger_print"`

	// OCI Tenancy group name
	// Required: true
	GroupName *string `json:"group_name"`

	// Group OCID
	// Required: true
	GroupOcid *string `json:"group_ocid"`

	// Region of OCI Account/Tenancy
	// Required: true
	HomeRegion *string `json:"home_region"`

	// Connection to OCI succeeded or not
	// Required: true
	IsConnected *bool `json:"is_connected"`

	// OCI Tenancy key age
	// Required: true
	KeyAge *int32 `json:"key_age"`

	// OCI Tenancy Registration status
	// Required: true
	OverallStatus *string `json:"overall_status"`

	// OCI Tenancy policy name
	// Required: true
	PolicyName *string `json:"policy_name"`

	// Policy OCID
	// Required: true
	PolicyOcid *string `json:"policy_ocid"`

	// OCI Tenancy Registration private key
	PrivateKey string `json:"private_key,omitempty"`

	// Tenancy registration details for each product and feature
	// Required: true
	Products map[string]DomainOCITenancyV1Products `json:"products"`

	// OCI Tenancy Registration public key
	// Required: true
	PublicKey *string `json:"public_key"`

	// OCI Tenancy stack name
	// Required: true
	StackName *string `json:"stack_name"`

	// OCI Tenancy stack OCID
	// Required: true
	StackOcid *string `json:"stack_ocid"`

	// tenancy name
	// Required: true
	TenancyName *string `json:"tenancy_name"`

	// OCI provided unique identifier for the account.
	// Required: true
	TenancyOcid *string `json:"tenancy_ocid"`

	// OCI Tenancy updated date
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`

	// User email
	// Required: true
	UserEmail *string `json:"user_email"`

	// OCI Tenancy user name
	// Required: true
	UserName *string `json:"user_name"`

	// User OCID
	// Required: true
	UserOcid *string `json:"user_ocid"`
}

// Validate validates this domain o c i tenancy v1
func (m *DomainOCITenancyV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCspmEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFingerPrint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupOcid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHomeRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsConnected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyAge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverallStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyOcid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStackName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStackOcid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenancyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenancyOcid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserOcid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainOCITenancyV1) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyV1) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainOCITenancyV1) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyV1) validateCspmEnabled(formats strfmt.Registry) error {

	if err := validate.Required("cspm_enabled", "body", m.CspmEnabled); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyV1) validateFingerPrint(formats strfmt.Registry) error {

	if err := validate.Required("finger_print", "body", m.FingerPrint); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyV1) validateGroupName(formats strfmt.Registry) error {

	if err := validate.Required("group_name", "body", m.GroupName); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyV1) validateGroupOcid(formats strfmt.Registry) error {

	if err := validate.Required("group_ocid", "body", m.GroupOcid); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyV1) validateHomeRegion(formats strfmt.Registry) error {

	if err := validate.Required("home_region", "body", m.HomeRegion); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyV1) validateIsConnected(formats strfmt.Registry) error {

	if err := validate.Required("is_connected", "body", m.IsConnected); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyV1) validateKeyAge(formats strfmt.Registry) error {

	if err := validate.Required("key_age", "body", m.KeyAge); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyV1) validateOverallStatus(formats strfmt.Registry) error {

	if err := validate.Required("overall_status", "body", m.OverallStatus); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyV1) validatePolicyName(formats strfmt.Registry) error {

	if err := validate.Required("policy_name", "body", m.PolicyName); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyV1) validatePolicyOcid(formats strfmt.Registry) error {

	if err := validate.Required("policy_ocid", "body", m.PolicyOcid); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyV1) validateProducts(formats strfmt.Registry) error {

	if err := validate.Required("products", "body", m.Products); err != nil {
		return err
	}

	for k := range m.Products {

		if err := validate.Required("products"+"."+k, "body", m.Products[k]); err != nil {
			return err
		}

		if err := validate.Required("products"+"."+k, "body", DomainOCITenancyV1Products(m.Products[k])); err != nil {
			return err
		}

		if val, ok := m.Products[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *DomainOCITenancyV1) validatePublicKey(formats strfmt.Registry) error {

	if err := validate.Required("public_key", "body", m.PublicKey); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyV1) validateStackName(formats strfmt.Registry) error {

	if err := validate.Required("stack_name", "body", m.StackName); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyV1) validateStackOcid(formats strfmt.Registry) error {

	if err := validate.Required("stack_ocid", "body", m.StackOcid); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyV1) validateTenancyName(formats strfmt.Registry) error {

	if err := validate.Required("tenancy_name", "body", m.TenancyName); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyV1) validateTenancyOcid(formats strfmt.Registry) error {

	if err := validate.Required("tenancy_ocid", "body", m.TenancyOcid); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyV1) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyV1) validateUserEmail(formats strfmt.Registry) error {

	if err := validate.Required("user_email", "body", m.UserEmail); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyV1) validateUserName(formats strfmt.Registry) error {

	if err := validate.Required("user_name", "body", m.UserName); err != nil {
		return err
	}

	return nil
}

func (m *DomainOCITenancyV1) validateUserOcid(formats strfmt.Registry) error {

	if err := validate.Required("user_ocid", "body", m.UserOcid); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this domain o c i tenancy v1 based on the context it is used
func (m *DomainOCITenancyV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainOCITenancyV1) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {

			if swag.IsZero(m.Conditions[i]) { // not required
				return nil
			}

			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainOCITenancyV1) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.Required("products", "body", m.Products); err != nil {
		return err
	}

	for k := range m.Products {

		if err := validate.Required("products"+"."+k, "body", DomainOCITenancyV1Products(m.Products[k])); err != nil {
			return err
		}

		if val, ok := m.Products[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainOCITenancyV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainOCITenancyV1) UnmarshalBinary(b []byte) error {
	var res DomainOCITenancyV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
