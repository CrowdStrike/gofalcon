// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FalconforitapiScheduledTask falconforitapi scheduled task
//
// swagger:model falconforitapi.ScheduledTask
type FalconforitapiScheduledTask struct {

	// arguments
	Arguments map[string]string `json:"arguments,omitempty"`

	// created by
	// Required: true
	CreatedBy *string `json:"created_by"`

	// created timestamp
	// Required: true
	// Format: date-time
	CreatedTimestamp *strfmt.DateTime `json:"created_timestamp"`

	// discover new hosts interval
	DiscoverNewHostsInterval string `json:"discover_new_hosts_interval,omitempty"`

	// distribution interval
	DistributionInterval string `json:"distribution_interval,omitempty"`

	// guardrails
	Guardrails *FalconforitapiGuardrails `json:"guardrails,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// is active
	// Required: true
	IsActive *bool `json:"is_active"`

	// is preset
	// Required: true
	IsPreset *bool `json:"is_preset"`

	// last run
	// Format: date-time
	LastRun strfmt.DateTime `json:"last_run,omitempty"`

	// modified by
	ModifiedBy string `json:"modified_by,omitempty"`

	// modified time
	// Format: date-time
	ModifiedTime strfmt.DateTime `json:"modified_time,omitempty"`

	// remediation trigger condition
	RemediationTriggerCondition []*FalconforitapiConditionGroup `json:"remediation_trigger_condition"`

	// schedule
	// Required: true
	Schedule *FalconforitapiSchedule `json:"schedule"`

	// target
	// Required: true
	Target *string `json:"target"`

	// task id
	// Required: true
	TaskID *string `json:"task_id"`

	// task name
	// Required: true
	TaskName *string `json:"task_name"`

	// task type
	// Required: true
	TaskType *string `json:"task_type"`

	// wait time
	WaitTime string `json:"wait_time,omitempty"`
}

// Validate validates this falconforitapi scheduled task
func (m *FalconforitapiScheduledTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuardrails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsPreset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediationTriggerCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiScheduledTask) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("created_by", "body", m.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiScheduledTask) validateCreatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("created_timestamp", "body", m.CreatedTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("created_timestamp", "body", "date-time", m.CreatedTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiScheduledTask) validateGuardrails(formats strfmt.Registry) error {
	if swag.IsZero(m.Guardrails) { // not required
		return nil
	}

	if m.Guardrails != nil {
		if err := m.Guardrails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guardrails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guardrails")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiScheduledTask) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiScheduledTask) validateIsActive(formats strfmt.Registry) error {

	if err := validate.Required("is_active", "body", m.IsActive); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiScheduledTask) validateIsPreset(formats strfmt.Registry) error {

	if err := validate.Required("is_preset", "body", m.IsPreset); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiScheduledTask) validateLastRun(formats strfmt.Registry) error {
	if swag.IsZero(m.LastRun) { // not required
		return nil
	}

	if err := validate.FormatOf("last_run", "body", "date-time", m.LastRun.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiScheduledTask) validateModifiedTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("modified_time", "body", "date-time", m.ModifiedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiScheduledTask) validateRemediationTriggerCondition(formats strfmt.Registry) error {
	if swag.IsZero(m.RemediationTriggerCondition) { // not required
		return nil
	}

	for i := 0; i < len(m.RemediationTriggerCondition); i++ {
		if swag.IsZero(m.RemediationTriggerCondition[i]) { // not required
			continue
		}

		if m.RemediationTriggerCondition[i] != nil {
			if err := m.RemediationTriggerCondition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remediation_trigger_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remediation_trigger_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconforitapiScheduledTask) validateSchedule(formats strfmt.Registry) error {

	if err := validate.Required("schedule", "body", m.Schedule); err != nil {
		return err
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiScheduledTask) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiScheduledTask) validateTaskID(formats strfmt.Registry) error {

	if err := validate.Required("task_id", "body", m.TaskID); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiScheduledTask) validateTaskName(formats strfmt.Registry) error {

	if err := validate.Required("task_name", "body", m.TaskName); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiScheduledTask) validateTaskType(formats strfmt.Registry) error {

	if err := validate.Required("task_type", "body", m.TaskType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this falconforitapi scheduled task based on the context it is used
func (m *FalconforitapiScheduledTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGuardrails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemediationTriggerCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiScheduledTask) contextValidateGuardrails(ctx context.Context, formats strfmt.Registry) error {

	if m.Guardrails != nil {

		if swag.IsZero(m.Guardrails) { // not required
			return nil
		}

		if err := m.Guardrails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guardrails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guardrails")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiScheduledTask) contextValidateRemediationTriggerCondition(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RemediationTriggerCondition); i++ {

		if m.RemediationTriggerCondition[i] != nil {

			if swag.IsZero(m.RemediationTriggerCondition[i]) { // not required
				return nil
			}

			if err := m.RemediationTriggerCondition[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remediation_trigger_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remediation_trigger_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconforitapiScheduledTask) contextValidateSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.Schedule != nil {

		if err := m.Schedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FalconforitapiScheduledTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FalconforitapiScheduledTask) UnmarshalBinary(b []byte) error {
	var res FalconforitapiScheduledTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
