// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResourcesCloudContext resources cloud context
//
// swagger:model resources.CloudContext
type ResourcesCloudContext struct {

	// account name
	AccountName string `json:"account_name,omitempty"`

	// allows public access
	AllowsPublicAccess bool `json:"allows_public_access,omitempty"`

	// application security
	ApplicationSecurity *AspmData `json:"application_security,omitempty"`

	// asset graph
	AssetGraph *ResourcesAssetGraph `json:"asset_graph,omitempty"`

	// cspm license
	CspmLicense string `json:"cspm_license,omitempty"`

	// data classifications
	DataClassifications *DataclassificationsResponse `json:"data_classifications,omitempty"`

	// detections
	Detections *ResourcesDetections `json:"detections,omitempty"`

	// has falcon sensor
	HasFalconSensor bool `json:"has_falcon_sensor,omitempty"`

	// has tags
	HasTags bool `json:"has_tags,omitempty"`

	// host
	Host *ResourcesHost `json:"host,omitempty"`

	// insights
	Insights *InsightsInsight `json:"insights,omitempty"`

	// instance id
	InstanceID string `json:"instance_id,omitempty"`

	// instance state
	InstanceState string `json:"instance_state,omitempty"`

	// legacy resource id
	LegacyResourceID string `json:"legacy_resource_id,omitempty"`

	// legacy type id
	LegacyTypeID int32 `json:"legacy_type_id,omitempty"`

	// legacy uuid
	LegacyUUID string `json:"legacy_uuid,omitempty"`

	// managed by
	ManagedBy string `json:"managed_by,omitempty"`

	// publicly exposed
	PubliclyExposed bool `json:"publicly_exposed,omitempty"`

	// scan type
	ScanType string `json:"scan_type,omitempty"`
}

// Validate validates this resources cloud context
func (m *ResourcesCloudContext) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationSecurity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetGraph(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataClassifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInsights(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourcesCloudContext) validateApplicationSecurity(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationSecurity) { // not required
		return nil
	}

	if m.ApplicationSecurity != nil {
		if err := m.ApplicationSecurity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application_security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application_security")
			}
			return err
		}
	}

	return nil
}

func (m *ResourcesCloudContext) validateAssetGraph(formats strfmt.Registry) error {
	if swag.IsZero(m.AssetGraph) { // not required
		return nil
	}

	if m.AssetGraph != nil {
		if err := m.AssetGraph.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("asset_graph")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("asset_graph")
			}
			return err
		}
	}

	return nil
}

func (m *ResourcesCloudContext) validateDataClassifications(formats strfmt.Registry) error {
	if swag.IsZero(m.DataClassifications) { // not required
		return nil
	}

	if m.DataClassifications != nil {
		if err := m.DataClassifications.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data_classifications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data_classifications")
			}
			return err
		}
	}

	return nil
}

func (m *ResourcesCloudContext) validateDetections(formats strfmt.Registry) error {
	if swag.IsZero(m.Detections) { // not required
		return nil
	}

	if m.Detections != nil {
		if err := m.Detections.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("detections")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("detections")
			}
			return err
		}
	}

	return nil
}

func (m *ResourcesCloudContext) validateHost(formats strfmt.Registry) error {
	if swag.IsZero(m.Host) { // not required
		return nil
	}

	if m.Host != nil {
		if err := m.Host.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *ResourcesCloudContext) validateInsights(formats strfmt.Registry) error {
	if swag.IsZero(m.Insights) { // not required
		return nil
	}

	if m.Insights != nil {
		if err := m.Insights.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("insights")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("insights")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this resources cloud context based on the context it is used
func (m *ResourcesCloudContext) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationSecurity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssetGraph(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataClassifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDetections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInsights(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourcesCloudContext) contextValidateApplicationSecurity(ctx context.Context, formats strfmt.Registry) error {

	if m.ApplicationSecurity != nil {

		if swag.IsZero(m.ApplicationSecurity) { // not required
			return nil
		}

		if err := m.ApplicationSecurity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application_security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application_security")
			}
			return err
		}
	}

	return nil
}

func (m *ResourcesCloudContext) contextValidateAssetGraph(ctx context.Context, formats strfmt.Registry) error {

	if m.AssetGraph != nil {

		if swag.IsZero(m.AssetGraph) { // not required
			return nil
		}

		if err := m.AssetGraph.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("asset_graph")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("asset_graph")
			}
			return err
		}
	}

	return nil
}

func (m *ResourcesCloudContext) contextValidateDataClassifications(ctx context.Context, formats strfmt.Registry) error {

	if m.DataClassifications != nil {

		if swag.IsZero(m.DataClassifications) { // not required
			return nil
		}

		if err := m.DataClassifications.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data_classifications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data_classifications")
			}
			return err
		}
	}

	return nil
}

func (m *ResourcesCloudContext) contextValidateDetections(ctx context.Context, formats strfmt.Registry) error {

	if m.Detections != nil {

		if swag.IsZero(m.Detections) { // not required
			return nil
		}

		if err := m.Detections.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("detections")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("detections")
			}
			return err
		}
	}

	return nil
}

func (m *ResourcesCloudContext) contextValidateHost(ctx context.Context, formats strfmt.Registry) error {

	if m.Host != nil {

		if swag.IsZero(m.Host) { // not required
			return nil
		}

		if err := m.Host.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *ResourcesCloudContext) contextValidateInsights(ctx context.Context, formats strfmt.Registry) error {

	if m.Insights != nil {

		if swag.IsZero(m.Insights) { // not required
			return nil
		}

		if err := m.Insights.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("insights")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("insights")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourcesCloudContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourcesCloudContext) UnmarshalBinary(b []byte) error {
	var res ResourcesCloudContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
