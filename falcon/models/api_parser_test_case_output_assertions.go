// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIParserTestCaseOutputAssertions api parser test case output assertions
//
// swagger:model api.ParserTestCaseOutputAssertions
type APIParserTestCaseOutputAssertions struct {

	// Fields which should contain specific values in the output
	// Required: true
	FieldsHaveValues []*APIFieldHasValue `json:"fields_have_values"`

	// Fields which must not be present in the output
	// Required: true
	FieldsNotPresent []string `json:"fields_not_present"`
}

// Validate validates this api parser test case output assertions
func (m *APIParserTestCaseOutputAssertions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFieldsHaveValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFieldsNotPresent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIParserTestCaseOutputAssertions) validateFieldsHaveValues(formats strfmt.Registry) error {

	if err := validate.Required("fields_have_values", "body", m.FieldsHaveValues); err != nil {
		return err
	}

	for i := 0; i < len(m.FieldsHaveValues); i++ {
		if swag.IsZero(m.FieldsHaveValues[i]) { // not required
			continue
		}

		if m.FieldsHaveValues[i] != nil {
			if err := m.FieldsHaveValues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fields_have_values" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fields_have_values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIParserTestCaseOutputAssertions) validateFieldsNotPresent(formats strfmt.Registry) error {

	if err := validate.Required("fields_not_present", "body", m.FieldsNotPresent); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this api parser test case output assertions based on the context it is used
func (m *APIParserTestCaseOutputAssertions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFieldsHaveValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIParserTestCaseOutputAssertions) contextValidateFieldsHaveValues(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FieldsHaveValues); i++ {

		if m.FieldsHaveValues[i] != nil {

			if swag.IsZero(m.FieldsHaveValues[i]) { // not required
				return nil
			}

			if err := m.FieldsHaveValues[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fields_have_values" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fields_have_values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIParserTestCaseOutputAssertions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIParserTestCaseOutputAssertions) UnmarshalBinary(b []byte) error {
	var res APIParserTestCaseOutputAssertions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
