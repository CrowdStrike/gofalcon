// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureAzureRegistrationV1 azure azure registration v1
//
// swagger:model azure.AzureRegistrationV1
type AzureAzureRegistrationV1 struct {

	// account type
	AccountType string `json:"account_type,omitempty"`

	// additional properties
	AdditionalProperties interface{} `json:"additional_properties,omitempty"`

	// api client id
	APIClientID string `json:"api_client_id,omitempty"`

	// Type of API client: crowdstrike-generated or customer
	APIClientType string `json:"api_client_type,omitempty"`

	// app registration id
	AppRegistrationID string `json:"app_registration_id,omitempty"`

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// created
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created"`

	// cs infra subscription ids
	CsInfraSubscriptionIds []string `json:"cs_infra_subscription_ids"`

	// custom entra id permissions
	// Required: true
	CustomEntraIDPermissions []string `json:"custom_entra_id_permissions"`

	// Deployment method: terraform-native, bicep
	DeploymentMethod string `json:"deployment_method,omitempty"`

	// The ID of the subscription or management group that will host the deployment stack
	DeploymentStackHostID string `json:"deployment_stack_host_id,omitempty"`

	// dspm enabled
	// Required: true
	DspmEnabled *bool `json:"dspm_enabled"`

	// dspm regions
	DspmRegions []string `json:"dspm_regions"`

	// event hub consumer group
	EventHubConsumerGroup string `json:"event_hub_consumer_group,omitempty"`

	// event hub name
	EventHubName string `json:"event_hub_name,omitempty"`

	// event hub namespace
	EventHubNamespace string `json:"event_hub_namespace,omitempty"`

	// management group ids
	ManagementGroupIds []string `json:"management_group_ids"`

	// products
	Products []*AzureAccountProductUpsertV1 `json:"products"`

	// registration id
	// Required: true
	RegistrationID *string `json:"registration_id"`

	// registration status
	RegistrationStatus string `json:"registration_status,omitempty"`

	// resource name prefix
	ResourceNamePrefix string `json:"resource_name_prefix,omitempty"`

	// resource name suffix
	ResourceNameSuffix string `json:"resource_name_suffix,omitempty"`

	// rtvd enabled
	// Required: true
	RtvdEnabled *bool `json:"rtvd_enabled"`

	// rtvd regions
	// Required: true
	RtvdRegions []string `json:"rtvd_regions"`

	// Azure registration scope. Values: tenant, management_group, individual_sub, sub_override_within_group
	Scope string `json:"scope,omitempty"`

	// subscription ids
	SubscriptionIds []string `json:"subscription_ids"`

	// tags
	Tags map[string]string `json:"tags,omitempty"`

	// tenant id
	TenantID string `json:"tenant_id,omitempty"`

	// updated
	// Required: true
	// Format: date-time
	Updated *strfmt.DateTime `json:"updated"`
}

// Validate validates this azure azure registration v1
func (m *AzureAzureRegistrationV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomEntraIDPermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDspmEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRtvdEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRtvdRegions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureAzureRegistrationV1) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *AzureAzureRegistrationV1) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AzureAzureRegistrationV1) validateCustomEntraIDPermissions(formats strfmt.Registry) error {

	if err := validate.Required("custom_entra_id_permissions", "body", m.CustomEntraIDPermissions); err != nil {
		return err
	}

	return nil
}

func (m *AzureAzureRegistrationV1) validateDspmEnabled(formats strfmt.Registry) error {

	if err := validate.Required("dspm_enabled", "body", m.DspmEnabled); err != nil {
		return err
	}

	return nil
}

func (m *AzureAzureRegistrationV1) validateProducts(formats strfmt.Registry) error {
	if swag.IsZero(m.Products) { // not required
		return nil
	}

	for i := 0; i < len(m.Products); i++ {
		if swag.IsZero(m.Products[i]) { // not required
			continue
		}

		if m.Products[i] != nil {
			if err := m.Products[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AzureAzureRegistrationV1) validateRegistrationID(formats strfmt.Registry) error {

	if err := validate.Required("registration_id", "body", m.RegistrationID); err != nil {
		return err
	}

	return nil
}

func (m *AzureAzureRegistrationV1) validateRtvdEnabled(formats strfmt.Registry) error {

	if err := validate.Required("rtvd_enabled", "body", m.RtvdEnabled); err != nil {
		return err
	}

	return nil
}

func (m *AzureAzureRegistrationV1) validateRtvdRegions(formats strfmt.Registry) error {

	if err := validate.Required("rtvd_regions", "body", m.RtvdRegions); err != nil {
		return err
	}

	return nil
}

func (m *AzureAzureRegistrationV1) validateUpdated(formats strfmt.Registry) error {

	if err := validate.Required("updated", "body", m.Updated); err != nil {
		return err
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this azure azure registration v1 based on the context it is used
func (m *AzureAzureRegistrationV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureAzureRegistrationV1) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Products); i++ {

		if m.Products[i] != nil {

			if swag.IsZero(m.Products[i]) { // not required
				return nil
			}

			if err := m.Products[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureAzureRegistrationV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureAzureRegistrationV1) UnmarshalBinary(b []byte) error {
	var res AzureAzureRegistrationV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
