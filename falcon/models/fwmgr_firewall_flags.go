// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FwmgrFirewallFlags fwmgr firewall flags
//
// swagger:model fwmgr.firewall.Flags
type FwmgrFirewallFlags struct {

	// audit
	// Required: true
	Audit *bool `json:"audit"`

	// log
	// Required: true
	Log *bool `json:"log"`

	// monitor
	// Required: true
	Monitor *bool `json:"monitor"`
}

// Validate validates this fwmgr firewall flags
func (m *FwmgrFirewallFlags) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAudit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FwmgrFirewallFlags) validateAudit(formats strfmt.Registry) error {

	if err := validate.Required("audit", "body", m.Audit); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallFlags) validateLog(formats strfmt.Registry) error {

	if err := validate.Required("log", "body", m.Log); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallFlags) validateMonitor(formats strfmt.Registry) error {

	if err := validate.Required("monitor", "body", m.Monitor); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this fwmgr firewall flags based on context it is used
func (m *FwmgrFirewallFlags) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FwmgrFirewallFlags) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FwmgrFirewallFlags) UnmarshalBinary(b []byte) error {
	var res FwmgrFirewallFlags
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
