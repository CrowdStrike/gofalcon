// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VulnerabilitymetadataapiExploitSourceReference vulnerabilitymetadataapi exploit source reference
//
// swagger:model vulnerabilitymetadataapi.ExploitSourceReference
type VulnerabilitymetadataapiExploitSourceReference struct {

	// kind
	// Required: true
	Kind *int32 `json:"kind"`

	// label
	// Required: true
	Label *string `json:"label"`

	// url
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this vulnerabilitymetadataapi exploit source reference
func (m *VulnerabilitymetadataapiExploitSourceReference) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilitymetadataapiExploitSourceReference) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiExploitSourceReference) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiExploitSourceReference) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vulnerabilitymetadataapi exploit source reference based on context it is used
func (m *VulnerabilitymetadataapiExploitSourceReference) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VulnerabilitymetadataapiExploitSourceReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VulnerabilitymetadataapiExploitSourceReference) UnmarshalBinary(b []byte) error {
	var res VulnerabilitymetadataapiExploitSourceReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
