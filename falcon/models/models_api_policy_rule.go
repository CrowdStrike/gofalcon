// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsAPIPolicyRule models API policy rule
//
// swagger:model models.APIPolicyRule
type ModelsAPIPolicyRule struct {

	// action
	// Required: true
	Action *string `json:"action"`

	// policy rules data
	PolicyRulesData *ModelsAPIPolicyRulesData `json:"policy_rules_data,omitempty"`
}

// Validate validates this models API policy rule
func (m *ModelsAPIPolicyRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyRulesData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIPolicyRule) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPolicyRule) validatePolicyRulesData(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyRulesData) { // not required
		return nil
	}

	if m.PolicyRulesData != nil {
		if err := m.PolicyRulesData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_rules_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_rules_data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this models API policy rule based on the context it is used
func (m *ModelsAPIPolicyRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePolicyRulesData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIPolicyRule) contextValidatePolicyRulesData(ctx context.Context, formats strfmt.Registry) error {

	if m.PolicyRulesData != nil {

		if swag.IsZero(m.PolicyRulesData) { // not required
			return nil
		}

		if err := m.PolicyRulesData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_rules_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_rules_data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsAPIPolicyRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsAPIPolicyRule) UnmarshalBinary(b []byte) error {
	var res ModelsAPIPolicyRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
