// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainKestrelDataExportParams domain kestrel data export params
//
// swagger:model domain.KestrelDataExportParams
type DomainKestrelDataExportParams struct {

	// export mapping
	// Required: true
	ExportMapping []*DomainKestrelDataExportHeaderMapping `json:"export_mapping"`

	// export mapping v2
	// Required: true
	ExportMappingV2 []*DomainKestrelDataExportHeaderMappingV2 `json:"export_mapping_v2"`

	// gqe query
	// Required: true
	GqeQuery *string `json:"gqe_query"`

	// limit
	Limit int32 `json:"limit,omitempty"`

	// view id
	// Required: true
	ViewID *string `json:"view_id"`
}

// Validate validates this domain kestrel data export params
func (m *DomainKestrelDataExportParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExportMapping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExportMappingV2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGqeQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainKestrelDataExportParams) validateExportMapping(formats strfmt.Registry) error {

	if err := validate.Required("export_mapping", "body", m.ExportMapping); err != nil {
		return err
	}

	for i := 0; i < len(m.ExportMapping); i++ {
		if swag.IsZero(m.ExportMapping[i]) { // not required
			continue
		}

		if m.ExportMapping[i] != nil {
			if err := m.ExportMapping[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("export_mapping" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("export_mapping" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainKestrelDataExportParams) validateExportMappingV2(formats strfmt.Registry) error {

	if err := validate.Required("export_mapping_v2", "body", m.ExportMappingV2); err != nil {
		return err
	}

	for i := 0; i < len(m.ExportMappingV2); i++ {
		if swag.IsZero(m.ExportMappingV2[i]) { // not required
			continue
		}

		if m.ExportMappingV2[i] != nil {
			if err := m.ExportMappingV2[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("export_mapping_v2" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("export_mapping_v2" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainKestrelDataExportParams) validateGqeQuery(formats strfmt.Registry) error {

	if err := validate.Required("gqe_query", "body", m.GqeQuery); err != nil {
		return err
	}

	return nil
}

func (m *DomainKestrelDataExportParams) validateViewID(formats strfmt.Registry) error {

	if err := validate.Required("view_id", "body", m.ViewID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this domain kestrel data export params based on the context it is used
func (m *DomainKestrelDataExportParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExportMapping(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExportMappingV2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainKestrelDataExportParams) contextValidateExportMapping(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExportMapping); i++ {

		if m.ExportMapping[i] != nil {

			if swag.IsZero(m.ExportMapping[i]) { // not required
				return nil
			}

			if err := m.ExportMapping[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("export_mapping" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("export_mapping" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainKestrelDataExportParams) contextValidateExportMappingV2(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExportMappingV2); i++ {

		if m.ExportMappingV2[i] != nil {

			if swag.IsZero(m.ExportMappingV2[i]) { // not required
				return nil
			}

			if err := m.ExportMappingV2[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("export_mapping_v2" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("export_mapping_v2" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainKestrelDataExportParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainKestrelDataExportParams) UnmarshalBinary(b []byte) error {
	var res DomainKestrelDataExportParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
