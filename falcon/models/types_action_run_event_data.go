// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TypesActionRunEventData types action run event data
//
// swagger:model types.ActionRunEventData
type TypesActionRunEventData struct {

	// additional info
	AdditionalInfo string `json:"additional_info,omitempty"`

	// aws
	Aws *TypesAWSMetadata `json:"aws,omitempty"`

	// azure site
	AzureSite *TypesAzureSiteMetadata `json:"azureSite,omitempty"`

	// azure Vm
	AzureVM *TypesAzureVMMetadata `json:"azureVm,omitempty"`

	// cloud function
	CloudFunction *TypesCloudFunctionMetadata `json:"cloud_function,omitempty"`

	// crowdstrike cloud security
	CrowdstrikeCloudSecurity *TypesCrowdStrikeCloudSecurityMetadata `json:"crowdstrike_cloud_security,omitempty"`

	// ec2
	Ec2 *TypesEC2Metadata `json:"ec2,omitempty"`

	// ecs
	Ecs *TypesECSMetadata `json:"ecs,omitempty"`

	// gcp
	Gcp *TypesGCPMetadata `json:"gcp,omitempty"`

	// host
	Host *TypesHostMetadata `json:"host,omitempty"`

	// k8s
	K8s *TypesK8SMetadata `json:"k8s,omitempty"`

	// lambda
	Lambda *TypesLambdaMetadata `json:"lambda,omitempty"`

	// remedy
	Remedy *TypesRemediation `json:"remedy,omitempty"`

	// snyk
	Snyk *TypesSnykMetadata `json:"snyk,omitempty"`

	// sonatype
	Sonatype *TypesSonatypeMetadata `json:"sonatype,omitempty"`
}

// Validate validates this types action run event data
func (m *TypesActionRunEventData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAws(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureSite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureVM(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrowdstrikeCloudSecurity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEc2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEcs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateK8s(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLambda(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemedy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnyk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSonatype(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesActionRunEventData) validateAws(formats strfmt.Registry) error {
	if swag.IsZero(m.Aws) { // not required
		return nil
	}

	if m.Aws != nil {
		if err := m.Aws.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) validateAzureSite(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureSite) { // not required
		return nil
	}

	if m.AzureSite != nil {
		if err := m.AzureSite.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureSite")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureSite")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) validateAzureVM(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureVM) { // not required
		return nil
	}

	if m.AzureVM != nil {
		if err := m.AzureVM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureVm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureVm")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) validateCloudFunction(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudFunction) { // not required
		return nil
	}

	if m.CloudFunction != nil {
		if err := m.CloudFunction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud_function")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloud_function")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) validateCrowdstrikeCloudSecurity(formats strfmt.Registry) error {
	if swag.IsZero(m.CrowdstrikeCloudSecurity) { // not required
		return nil
	}

	if m.CrowdstrikeCloudSecurity != nil {
		if err := m.CrowdstrikeCloudSecurity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("crowdstrike_cloud_security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("crowdstrike_cloud_security")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) validateEc2(formats strfmt.Registry) error {
	if swag.IsZero(m.Ec2) { // not required
		return nil
	}

	if m.Ec2 != nil {
		if err := m.Ec2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ec2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ec2")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) validateEcs(formats strfmt.Registry) error {
	if swag.IsZero(m.Ecs) { // not required
		return nil
	}

	if m.Ecs != nil {
		if err := m.Ecs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecs")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) validateGcp(formats strfmt.Registry) error {
	if swag.IsZero(m.Gcp) { // not required
		return nil
	}

	if m.Gcp != nil {
		if err := m.Gcp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcp")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) validateHost(formats strfmt.Registry) error {
	if swag.IsZero(m.Host) { // not required
		return nil
	}

	if m.Host != nil {
		if err := m.Host.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) validateK8s(formats strfmt.Registry) error {
	if swag.IsZero(m.K8s) { // not required
		return nil
	}

	if m.K8s != nil {
		if err := m.K8s.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("k8s")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("k8s")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) validateLambda(formats strfmt.Registry) error {
	if swag.IsZero(m.Lambda) { // not required
		return nil
	}

	if m.Lambda != nil {
		if err := m.Lambda.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lambda")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lambda")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) validateRemedy(formats strfmt.Registry) error {
	if swag.IsZero(m.Remedy) { // not required
		return nil
	}

	if m.Remedy != nil {
		if err := m.Remedy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remedy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remedy")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) validateSnyk(formats strfmt.Registry) error {
	if swag.IsZero(m.Snyk) { // not required
		return nil
	}

	if m.Snyk != nil {
		if err := m.Snyk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snyk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snyk")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) validateSonatype(formats strfmt.Registry) error {
	if swag.IsZero(m.Sonatype) { // not required
		return nil
	}

	if m.Sonatype != nil {
		if err := m.Sonatype.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sonatype")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sonatype")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this types action run event data based on the context it is used
func (m *TypesActionRunEventData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAws(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureSite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudFunction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCrowdstrikeCloudSecurity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEc2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEcs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateK8s(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLambda(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemedy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnyk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSonatype(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesActionRunEventData) contextValidateAws(ctx context.Context, formats strfmt.Registry) error {

	if m.Aws != nil {

		if swag.IsZero(m.Aws) { // not required
			return nil
		}

		if err := m.Aws.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) contextValidateAzureSite(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureSite != nil {

		if swag.IsZero(m.AzureSite) { // not required
			return nil
		}

		if err := m.AzureSite.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureSite")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureSite")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) contextValidateAzureVM(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureVM != nil {

		if swag.IsZero(m.AzureVM) { // not required
			return nil
		}

		if err := m.AzureVM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureVm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureVm")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) contextValidateCloudFunction(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudFunction != nil {

		if swag.IsZero(m.CloudFunction) { // not required
			return nil
		}

		if err := m.CloudFunction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud_function")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloud_function")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) contextValidateCrowdstrikeCloudSecurity(ctx context.Context, formats strfmt.Registry) error {

	if m.CrowdstrikeCloudSecurity != nil {

		if swag.IsZero(m.CrowdstrikeCloudSecurity) { // not required
			return nil
		}

		if err := m.CrowdstrikeCloudSecurity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("crowdstrike_cloud_security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("crowdstrike_cloud_security")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) contextValidateEc2(ctx context.Context, formats strfmt.Registry) error {

	if m.Ec2 != nil {

		if swag.IsZero(m.Ec2) { // not required
			return nil
		}

		if err := m.Ec2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ec2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ec2")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) contextValidateEcs(ctx context.Context, formats strfmt.Registry) error {

	if m.Ecs != nil {

		if swag.IsZero(m.Ecs) { // not required
			return nil
		}

		if err := m.Ecs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecs")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) contextValidateGcp(ctx context.Context, formats strfmt.Registry) error {

	if m.Gcp != nil {

		if swag.IsZero(m.Gcp) { // not required
			return nil
		}

		if err := m.Gcp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcp")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) contextValidateHost(ctx context.Context, formats strfmt.Registry) error {

	if m.Host != nil {

		if swag.IsZero(m.Host) { // not required
			return nil
		}

		if err := m.Host.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) contextValidateK8s(ctx context.Context, formats strfmt.Registry) error {

	if m.K8s != nil {

		if swag.IsZero(m.K8s) { // not required
			return nil
		}

		if err := m.K8s.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("k8s")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("k8s")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) contextValidateLambda(ctx context.Context, formats strfmt.Registry) error {

	if m.Lambda != nil {

		if swag.IsZero(m.Lambda) { // not required
			return nil
		}

		if err := m.Lambda.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lambda")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lambda")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) contextValidateRemedy(ctx context.Context, formats strfmt.Registry) error {

	if m.Remedy != nil {

		if swag.IsZero(m.Remedy) { // not required
			return nil
		}

		if err := m.Remedy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remedy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remedy")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) contextValidateSnyk(ctx context.Context, formats strfmt.Registry) error {

	if m.Snyk != nil {

		if swag.IsZero(m.Snyk) { // not required
			return nil
		}

		if err := m.Snyk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snyk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snyk")
			}
			return err
		}
	}

	return nil
}

func (m *TypesActionRunEventData) contextValidateSonatype(ctx context.Context, formats strfmt.Registry) error {

	if m.Sonatype != nil {

		if swag.IsZero(m.Sonatype) { // not required
			return nil
		}

		if err := m.Sonatype.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sonatype")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sonatype")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TypesActionRunEventData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesActionRunEventData) UnmarshalBinary(b []byte) error {
	var res TypesActionRunEventData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
