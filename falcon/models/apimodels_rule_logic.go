// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApimodelsRuleLogic apimodels rule logic
//
// swagger:model apimodels.RuleLogic
type ApimodelsRuleLogic struct {

	// logic
	Logic string `json:"logic,omitempty"`

	// platform
	// Required: true
	Platform *string `json:"platform"`

	// remediation info
	// Required: true
	RemediationInfo *string `json:"remediation_info"`

	// remediation url
	// Required: true
	RemediationURL *string `json:"remediation_url"`
}

// Validate validates this apimodels rule logic
func (m *ApimodelsRuleLogic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediationInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediationURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApimodelsRuleLogic) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsRuleLogic) validateRemediationInfo(formats strfmt.Registry) error {

	if err := validate.Required("remediation_info", "body", m.RemediationInfo); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsRuleLogic) validateRemediationURL(formats strfmt.Registry) error {

	if err := validate.Required("remediation_url", "body", m.RemediationURL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this apimodels rule logic based on context it is used
func (m *ApimodelsRuleLogic) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ApimodelsRuleLogic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApimodelsRuleLogic) UnmarshalBinary(b []byte) error {
	var res ApimodelsRuleLogic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
