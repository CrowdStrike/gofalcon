// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItautomationSearchStatus itautomation search status
//
// swagger:model itautomation.SearchStatus
type ItautomationSearchStatus struct {

	// Total number of events found. Example: 1000
	// Required: true
	EventCount *int64 `json:"event_count"`

	// Whether the search is still in progress. Example: false
	// Required: true
	IsPending *bool `json:"is_pending"`

	// Unique identifier for the search job. Example: eyJpZCI6IlA1LXdpTHl0dmE1bW00bDVrcmxKZGxhdktJYSJ9
	// Required: true
	JobID *string `json:"job_id"`

	// Percentage of search completion. Example: 100
	// Required: true
	PercentComplete *int32 `json:"percent_complete"`

	// Number of results after grouping. Example: 50
	// Required: true
	ResultCount *int32 `json:"result_count"`

	// Current status of the search job. Example: complete
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this itautomation search status
func (m *ItautomationSearchStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsPending(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePercentComplete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResultCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItautomationSearchStatus) validateEventCount(formats strfmt.Registry) error {

	if err := validate.Required("event_count", "body", m.EventCount); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationSearchStatus) validateIsPending(formats strfmt.Registry) error {

	if err := validate.Required("is_pending", "body", m.IsPending); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationSearchStatus) validateJobID(formats strfmt.Registry) error {

	if err := validate.Required("job_id", "body", m.JobID); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationSearchStatus) validatePercentComplete(formats strfmt.Registry) error {

	if err := validate.Required("percent_complete", "body", m.PercentComplete); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationSearchStatus) validateResultCount(formats strfmt.Registry) error {

	if err := validate.Required("result_count", "body", m.ResultCount); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationSearchStatus) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this itautomation search status based on context it is used
func (m *ItautomationSearchStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ItautomationSearchStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItautomationSearchStatus) UnmarshalBinary(b []byte) error {
	var res ItautomationSearchStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
