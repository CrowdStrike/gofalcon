// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsVulnerabilityType models vulnerability type
//
// swagger:model models.VulnerabilityType
type ModelsVulnerabilityType struct {

	// c v e ID
	// Required: true
	CVEID *string `json:"CVEID"`

	// content data hash
	// Required: true
	ContentDataHash *int64 `json:"ContentDataHash"`

	// details
	// Required: true
	Details *DomainCVE `json:"Details"`

	// exploit details
	ExploitDetails *VulncheckExploitDetails `json:"ExploitDetails,omitempty"`

	// fixed versions
	FixedVersions []string `json:"FixedVersions"`

	// product
	// Required: true
	Product *DomainProduct `json:"Product"`

	// remediation
	// Required: true
	Remediation []string `json:"Remediation"`
}

// Validate validates this models vulnerability type
func (m *ModelsVulnerabilityType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCVEID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentDataHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExploitDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsVulnerabilityType) validateCVEID(formats strfmt.Registry) error {

	if err := validate.Required("CVEID", "body", m.CVEID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsVulnerabilityType) validateContentDataHash(formats strfmt.Registry) error {

	if err := validate.Required("ContentDataHash", "body", m.ContentDataHash); err != nil {
		return err
	}

	return nil
}

func (m *ModelsVulnerabilityType) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("Details", "body", m.Details); err != nil {
		return err
	}

	if m.Details != nil {
		if err := m.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Details")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsVulnerabilityType) validateExploitDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.ExploitDetails) { // not required
		return nil
	}

	if m.ExploitDetails != nil {
		if err := m.ExploitDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ExploitDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ExploitDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsVulnerabilityType) validateProduct(formats strfmt.Registry) error {

	if err := validate.Required("Product", "body", m.Product); err != nil {
		return err
	}

	if m.Product != nil {
		if err := m.Product.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Product")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Product")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsVulnerabilityType) validateRemediation(formats strfmt.Registry) error {

	if err := validate.Required("Remediation", "body", m.Remediation); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this models vulnerability type based on the context it is used
func (m *ModelsVulnerabilityType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExploitDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProduct(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsVulnerabilityType) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.Details != nil {

		if err := m.Details.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Details")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsVulnerabilityType) contextValidateExploitDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.ExploitDetails != nil {

		if swag.IsZero(m.ExploitDetails) { // not required
			return nil
		}

		if err := m.ExploitDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ExploitDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ExploitDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsVulnerabilityType) contextValidateProduct(ctx context.Context, formats strfmt.Registry) error {

	if m.Product != nil {

		if err := m.Product.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Product")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Product")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsVulnerabilityType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsVulnerabilityType) UnmarshalBinary(b []byte) error {
	var res ModelsVulnerabilityType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
