// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItautomationTaskExecution itautomation task execution
//
// swagger:model itautomation.TaskExecution
type ItautomationTaskExecution struct {

	// Whether to discover new hosts for the scheduled task. Example: true
	DiscoverNewHosts bool `json:"discover_new_hosts,omitempty"`

	// Whether to discover offline hosts for the scheduled task. Example: true
	DiscoverOfflineHosts bool `json:"discover_offline_hosts,omitempty"`

	// Whether to distribute the scheduled task. Example: true
	Distribute bool `json:"distribute,omitempty"`

	// Key-value pairs of argument values to pass when executing the task. Example: {'api_key': 'abc123', 'region': 'us-east-1'}
	ExecutionArgs map[string]string `json:"execution_args,omitempty"`

	//  Duration for which the task stays active. Once expired, new and offline hosts won't be targeted. Example: 1m
	ExpirationInterval string `json:"expiration_interval,omitempty"`

	// Execution guardrails and limits
	Guardrails *FalconforitapiGuardrails `json:"guardrails,omitempty"`

	// Unique identifier for the task execution. Example: f64b95555ef54ea682619ce880d267cc
	// Required: true
	ID *string `json:"id"`

	// OSQuery to execute. Example: select * from users
	OsQuery string `json:"os_query,omitempty"`

	// List of supported platforms. Example: ['Windows', 'Linux', 'Mac']
	Platforms []string `json:"platforms"`

	// Script queries to run per platform
	Queries *ItautomationScripts `json:"queries,omitempty"`

	// Remediation scripts to run per platform
	Remediations *ItautomationScripts `json:"remediations,omitempty"`

	// Username/api client name of who initiated the execution. Example: john.smith@crowdstrike.com
	// Required: true
	RunBy *string `json:"run_by"`

	// Type of execution. Example: OnDemand
	// Required: true
	RunType *string `json:"run_type"`

	// Execution status broken down by stage
	StatusByStage *ItautomationTaskStageExecutionStatus `json:"status_by_stage,omitempty"`

	// Target filter in FQL format. Example: platform_name: 'Windows'
	// Required: true
	Target *string `json:"target"`

	// ID of the task execution. Example: b533b64eed8a49a8aad84a0b82983939
	TaskID string `json:"task_id,omitempty"`

	// Name of the task execution. Example: OSQuery Check
	TaskName string `json:"task_name,omitempty"`

	// Parameters for the task
	TaskParameters []*ItautomationTaskParameter `json:"task_parameters"`

	// Type of task execution.
	// Required: true
	// Enum: [query remediation]
	TaskType *string `json:"task_type"`

	// Conditions that trigger remediation scripts
	TriggerCondition []*FalconforitapiConditionGroup `json:"trigger_condition"`

	// Conditions that verify action tasks
	VerificationCondition []*FalconforitapiConditionGroup `json:"verification_condition"`
}

// Validate validates this itautomation task execution
func (m *ItautomationTaskExecution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGuardrails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusByStage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerificationCondition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItautomationTaskExecution) validateGuardrails(formats strfmt.Registry) error {
	if swag.IsZero(m.Guardrails) { // not required
		return nil
	}

	if m.Guardrails != nil {
		if err := m.Guardrails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guardrails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guardrails")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationTaskExecution) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskExecution) validateQueries(formats strfmt.Registry) error {
	if swag.IsZero(m.Queries) { // not required
		return nil
	}

	if m.Queries != nil {
		if err := m.Queries.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queries")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queries")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationTaskExecution) validateRemediations(formats strfmt.Registry) error {
	if swag.IsZero(m.Remediations) { // not required
		return nil
	}

	if m.Remediations != nil {
		if err := m.Remediations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remediations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remediations")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationTaskExecution) validateRunBy(formats strfmt.Registry) error {

	if err := validate.Required("run_by", "body", m.RunBy); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskExecution) validateRunType(formats strfmt.Registry) error {

	if err := validate.Required("run_type", "body", m.RunType); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskExecution) validateStatusByStage(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusByStage) { // not required
		return nil
	}

	if m.StatusByStage != nil {
		if err := m.StatusByStage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_by_stage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_by_stage")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationTaskExecution) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskExecution) validateTaskParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.TaskParameters) { // not required
		return nil
	}

	for i := 0; i < len(m.TaskParameters); i++ {
		if swag.IsZero(m.TaskParameters[i]) { // not required
			continue
		}

		if m.TaskParameters[i] != nil {
			if err := m.TaskParameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("task_parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("task_parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var itautomationTaskExecutionTypeTaskTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["query","remediation"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itautomationTaskExecutionTypeTaskTypePropEnum = append(itautomationTaskExecutionTypeTaskTypePropEnum, v)
	}
}

const (

	// ItautomationTaskExecutionTaskTypeQuery captures enum value "query"
	ItautomationTaskExecutionTaskTypeQuery string = "query"

	// ItautomationTaskExecutionTaskTypeRemediation captures enum value "remediation"
	ItautomationTaskExecutionTaskTypeRemediation string = "remediation"
)

// prop value enum
func (m *ItautomationTaskExecution) validateTaskTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, itautomationTaskExecutionTypeTaskTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ItautomationTaskExecution) validateTaskType(formats strfmt.Registry) error {

	if err := validate.Required("task_type", "body", m.TaskType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTaskTypeEnum("task_type", "body", *m.TaskType); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskExecution) validateTriggerCondition(formats strfmt.Registry) error {
	if swag.IsZero(m.TriggerCondition) { // not required
		return nil
	}

	for i := 0; i < len(m.TriggerCondition); i++ {
		if swag.IsZero(m.TriggerCondition[i]) { // not required
			continue
		}

		if m.TriggerCondition[i] != nil {
			if err := m.TriggerCondition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ItautomationTaskExecution) validateVerificationCondition(formats strfmt.Registry) error {
	if swag.IsZero(m.VerificationCondition) { // not required
		return nil
	}

	for i := 0; i < len(m.VerificationCondition); i++ {
		if swag.IsZero(m.VerificationCondition[i]) { // not required
			continue
		}

		if m.VerificationCondition[i] != nil {
			if err := m.VerificationCondition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this itautomation task execution based on the context it is used
func (m *ItautomationTaskExecution) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGuardrails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemediations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusByStage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaskParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTriggerCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVerificationCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItautomationTaskExecution) contextValidateGuardrails(ctx context.Context, formats strfmt.Registry) error {

	if m.Guardrails != nil {

		if swag.IsZero(m.Guardrails) { // not required
			return nil
		}

		if err := m.Guardrails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guardrails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guardrails")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationTaskExecution) contextValidateQueries(ctx context.Context, formats strfmt.Registry) error {

	if m.Queries != nil {

		if swag.IsZero(m.Queries) { // not required
			return nil
		}

		if err := m.Queries.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queries")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queries")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationTaskExecution) contextValidateRemediations(ctx context.Context, formats strfmt.Registry) error {

	if m.Remediations != nil {

		if swag.IsZero(m.Remediations) { // not required
			return nil
		}

		if err := m.Remediations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remediations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remediations")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationTaskExecution) contextValidateStatusByStage(ctx context.Context, formats strfmt.Registry) error {

	if m.StatusByStage != nil {

		if swag.IsZero(m.StatusByStage) { // not required
			return nil
		}

		if err := m.StatusByStage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_by_stage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_by_stage")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationTaskExecution) contextValidateTaskParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TaskParameters); i++ {

		if m.TaskParameters[i] != nil {

			if swag.IsZero(m.TaskParameters[i]) { // not required
				return nil
			}

			if err := m.TaskParameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("task_parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("task_parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ItautomationTaskExecution) contextValidateTriggerCondition(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TriggerCondition); i++ {

		if m.TriggerCondition[i] != nil {

			if swag.IsZero(m.TriggerCondition[i]) { // not required
				return nil
			}

			if err := m.TriggerCondition[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ItautomationTaskExecution) contextValidateVerificationCondition(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VerificationCondition); i++ {

		if m.VerificationCondition[i] != nil {

			if swag.IsZero(m.VerificationCondition[i]) { // not required
				return nil
			}

			if err := m.VerificationCondition[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ItautomationTaskExecution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItautomationTaskExecution) UnmarshalBinary(b []byte) error {
	var res ItautomationTaskExecution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
