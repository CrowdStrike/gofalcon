// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApimodelsRuleOverride apimodels rule override
//
// swagger:model apimodels.RuleOverride
type ApimodelsRuleOverride struct {

	// asset filter
	AssetFilter *ApimodelsAssetFilter `json:"asset_filter,omitempty"`

	// asset scope type
	AssetScopeType string `json:"asset_scope_type,omitempty"`

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// comment
	// Required: true
	Comment *string `json:"comment"`

	// created at
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// created by
	// Required: true
	CreatedBy *string `json:"created_by"`

	// crn
	// Required: true
	Crn *string `json:"crn"`

	// deleted at
	// Format: date-time
	DeletedAt strfmt.DateTime `json:"deleted_at,omitempty"`

	// deleted by
	DeletedBy string `json:"deleted_by,omitempty"`

	// expires at
	// Required: true
	// Format: date-time
	ExpiresAt *strfmt.DateTime `json:"expires_at"`

	// override details
	// Required: true
	OverrideDetails *string `json:"override_details"`

	// override type
	// Required: true
	OverrideType *string `json:"override_type"`

	// reason
	// Required: true
	Reason *string `json:"reason"`

	// rule id
	RuleID string `json:"rule_id,omitempty"`

	// target region
	// Required: true
	TargetRegion *string `json:"target_region"`

	// update reason
	UpdateReason string `json:"update_reason,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// updated by
	UpdatedBy string `json:"updated_by,omitempty"`

	// user id
	// Required: true
	UserID *string `json:"user_id"`

	// uuid
	// Required: true
	UUID *string `json:"uuid"`
}

// Validate validates this apimodels rule override
func (m *ApimodelsRuleOverride) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssetFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverrideDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverrideType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApimodelsRuleOverride) validateAssetFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.AssetFilter) { // not required
		return nil
	}

	if m.AssetFilter != nil {
		if err := m.AssetFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("asset_filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("asset_filter")
			}
			return err
		}
	}

	return nil
}

func (m *ApimodelsRuleOverride) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsRuleOverride) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("comment", "body", m.Comment); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsRuleOverride) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsRuleOverride) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("created_by", "body", m.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsRuleOverride) validateCrn(formats strfmt.Registry) error {

	if err := validate.Required("crn", "body", m.Crn); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsRuleOverride) validateDeletedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.DeletedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("deleted_at", "body", "date-time", m.DeletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsRuleOverride) validateExpiresAt(formats strfmt.Registry) error {

	if err := validate.Required("expires_at", "body", m.ExpiresAt); err != nil {
		return err
	}

	if err := validate.FormatOf("expires_at", "body", "date-time", m.ExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsRuleOverride) validateOverrideDetails(formats strfmt.Registry) error {

	if err := validate.Required("override_details", "body", m.OverrideDetails); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsRuleOverride) validateOverrideType(formats strfmt.Registry) error {

	if err := validate.Required("override_type", "body", m.OverrideType); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsRuleOverride) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("reason", "body", m.Reason); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsRuleOverride) validateTargetRegion(formats strfmt.Registry) error {

	if err := validate.Required("target_region", "body", m.TargetRegion); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsRuleOverride) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsRuleOverride) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

func (m *ApimodelsRuleOverride) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this apimodels rule override based on the context it is used
func (m *ApimodelsRuleOverride) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssetFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApimodelsRuleOverride) contextValidateAssetFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.AssetFilter != nil {

		if swag.IsZero(m.AssetFilter) { // not required
			return nil
		}

		if err := m.AssetFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("asset_filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("asset_filter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApimodelsRuleOverride) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApimodelsRuleOverride) UnmarshalBinary(b []byte) error {
	var res ApimodelsRuleOverride
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
