// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VulnerabilitymetadataapiRuleControl vulnerabilitymetadataapi rule control
//
// swagger:model vulnerabilitymetadataapi.RuleControl
type VulnerabilitymetadataapiRuleControl struct {

	// applicable profiles
	// Required: true
	ApplicableProfiles []string `json:"applicable_profiles"`

	// authority
	// Required: true
	Authority *string `json:"authority"`

	// code
	// Required: true
	Code *string `json:"code"`

	// description
	// Required: true
	Description *string `json:"description"`

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// requirement
	// Required: true
	Requirement *string `json:"requirement"`

	// section name
	// Required: true
	SectionName *string `json:"section_name"`

	// security framework info
	// Required: true
	SecurityFrameworkInfo []*VulnerabilitymetadataapiRuleControlSecurityFrameworkInfo `json:"security_framework_info"`

	// type
	// Required: true
	Type *string `json:"type"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this vulnerabilitymetadataapi rule control
func (m *VulnerabilitymetadataapiRuleControl) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicableProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequirement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSectionName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityFrameworkInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilitymetadataapiRuleControl) validateApplicableProfiles(formats strfmt.Registry) error {

	if err := validate.Required("applicable_profiles", "body", m.ApplicableProfiles); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRuleControl) validateAuthority(formats strfmt.Registry) error {

	if err := validate.Required("authority", "body", m.Authority); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRuleControl) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRuleControl) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRuleControl) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRuleControl) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRuleControl) validateRequirement(formats strfmt.Registry) error {

	if err := validate.Required("requirement", "body", m.Requirement); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRuleControl) validateSectionName(formats strfmt.Registry) error {

	if err := validate.Required("section_name", "body", m.SectionName); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRuleControl) validateSecurityFrameworkInfo(formats strfmt.Registry) error {

	if err := validate.Required("security_framework_info", "body", m.SecurityFrameworkInfo); err != nil {
		return err
	}

	for i := 0; i < len(m.SecurityFrameworkInfo); i++ {
		if swag.IsZero(m.SecurityFrameworkInfo[i]) { // not required
			continue
		}

		if m.SecurityFrameworkInfo[i] != nil {
			if err := m.SecurityFrameworkInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("security_framework_info" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("security_framework_info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VulnerabilitymetadataapiRuleControl) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiRuleControl) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this vulnerabilitymetadataapi rule control based on the context it is used
func (m *VulnerabilitymetadataapiRuleControl) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSecurityFrameworkInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilitymetadataapiRuleControl) contextValidateSecurityFrameworkInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SecurityFrameworkInfo); i++ {

		if m.SecurityFrameworkInfo[i] != nil {

			if swag.IsZero(m.SecurityFrameworkInfo[i]) { // not required
				return nil
			}

			if err := m.SecurityFrameworkInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("security_framework_info" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("security_framework_info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VulnerabilitymetadataapiRuleControl) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VulnerabilitymetadataapiRuleControl) UnmarshalBinary(b []byte) error {
	var res VulnerabilitymetadataapiRuleControl
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
