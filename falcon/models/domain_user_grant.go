// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainUserGrant domain user grant
//
// swagger:model domain.UserGrant
type DomainUserGrant struct {

	// cid
	Cid string `json:"cid,omitempty"`

	// cid group id
	CidGroupID string `json:"cid_group_id,omitempty"`

	// cid group name
	CidGroupName string `json:"cid_group_name,omitempty"`

	// expires at
	// Format: date-time
	ExpiresAt strfmt.DateTime `json:"expires_at,omitempty"`

	// grant type
	GrantType string `json:"grant_type,omitempty"`

	// parent cid
	ParentCid string `json:"parent_cid,omitempty"`

	// role id
	// Required: true
	RoleID *string `json:"role_id"`

	// role name
	RoleName string `json:"role_name,omitempty"`

	// user group id
	UserGroupID string `json:"user_group_id,omitempty"`

	// user group name
	UserGroupName string `json:"user_group_name,omitempty"`

	// uuid
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this domain user grant
func (m *DomainUserGrant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainUserGrant) validateExpiresAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpiresAt) { // not required
		return nil
	}

	if err := validate.FormatOf("expires_at", "body", "date-time", m.ExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainUserGrant) validateRoleID(formats strfmt.Registry) error {

	if err := validate.Required("role_id", "body", m.RoleID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain user grant based on context it is used
func (m *DomainUserGrant) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainUserGrant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainUserGrant) UnmarshalBinary(b []byte) error {
	var res DomainUserGrant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
