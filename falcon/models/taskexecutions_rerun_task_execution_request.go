// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskexecutionsRerunTaskExecutionRequest taskexecutions rerun task execution request
//
// swagger:model taskexecutions.RerunTaskExecutionRequest
type TaskexecutionsRerunTaskExecutionRequest struct {

	// Type of rerun.
	// Required: true
	RunType *string `json:"run_type"`

	// ID of the task execution to rerun. Example: f64b95555ef54ea682619ce880d267cc
	// Required: true
	TaskExecutionID *string `json:"task_execution_id"`
}

// Validate validates this taskexecutions rerun task execution request
func (m *TaskexecutionsRerunTaskExecutionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRunType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskExecutionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskexecutionsRerunTaskExecutionRequest) validateRunType(formats strfmt.Registry) error {

	if err := validate.Required("run_type", "body", m.RunType); err != nil {
		return err
	}

	return nil
}

func (m *TaskexecutionsRerunTaskExecutionRequest) validateTaskExecutionID(formats strfmt.Registry) error {

	if err := validate.Required("task_execution_id", "body", m.TaskExecutionID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this taskexecutions rerun task execution request based on context it is used
func (m *TaskexecutionsRerunTaskExecutionRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TaskexecutionsRerunTaskExecutionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskexecutionsRerunTaskExecutionRequest) UnmarshalBinary(b []byte) error {
	var res TaskexecutionsRerunTaskExecutionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
