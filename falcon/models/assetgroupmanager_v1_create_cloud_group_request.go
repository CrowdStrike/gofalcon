// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssetgroupmanagerV1CreateCloudGroupRequest assetgroupmanager v1 create cloud group request
//
// swagger:model assetgroupmanager.v1.CreateCloudGroupRequest
type AssetgroupmanagerV1CreateCloudGroupRequest struct {

	// Business Impact is one of the "business context" field of the group.
	// Enum: [high moderate low]
	BusinessImpact string `json:"business_impact,omitempty"`

	// Business Unit is one of the "business context" field of the group.
	// Max Length: 100
	BusinessUnit string `json:"business_unit,omitempty"`

	// description
	// Max Length: 1000
	Description string `json:"description,omitempty"`

	// Environment is one of the "business context" field of the group.
	// Enum: [dev test stage prod]
	Environment string `json:"environment,omitempty"`

	// Group name is unique and case insensitive.
	// Required: true
	// Max Length: 100
	Name *string `json:"name"`

	// The owners field contains a list of user emails.
	Owners []string `json:"owners"`

	// The Selectors for the cloud group.
	Selectors *AssetgroupmanagerV1WriteCloudGroupSelectors `json:"selectors,omitempty"`
}

// Validate validates this assetgroupmanager v1 create cloud group request
func (m *AssetgroupmanagerV1CreateCloudGroupRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBusinessImpact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var assetgroupmanagerV1CreateCloudGroupRequestTypeBusinessImpactPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["high","moderate","low"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assetgroupmanagerV1CreateCloudGroupRequestTypeBusinessImpactPropEnum = append(assetgroupmanagerV1CreateCloudGroupRequestTypeBusinessImpactPropEnum, v)
	}
}

const (

	// AssetgroupmanagerV1CreateCloudGroupRequestBusinessImpactHigh captures enum value "high"
	AssetgroupmanagerV1CreateCloudGroupRequestBusinessImpactHigh string = "high"

	// AssetgroupmanagerV1CreateCloudGroupRequestBusinessImpactModerate captures enum value "moderate"
	AssetgroupmanagerV1CreateCloudGroupRequestBusinessImpactModerate string = "moderate"

	// AssetgroupmanagerV1CreateCloudGroupRequestBusinessImpactLow captures enum value "low"
	AssetgroupmanagerV1CreateCloudGroupRequestBusinessImpactLow string = "low"
)

// prop value enum
func (m *AssetgroupmanagerV1CreateCloudGroupRequest) validateBusinessImpactEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, assetgroupmanagerV1CreateCloudGroupRequestTypeBusinessImpactPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AssetgroupmanagerV1CreateCloudGroupRequest) validateBusinessImpact(formats strfmt.Registry) error {
	if swag.IsZero(m.BusinessImpact) { // not required
		return nil
	}

	// value enum
	if err := m.validateBusinessImpactEnum("business_impact", "body", m.BusinessImpact); err != nil {
		return err
	}

	return nil
}

func (m *AssetgroupmanagerV1CreateCloudGroupRequest) validateBusinessUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.BusinessUnit) { // not required
		return nil
	}

	if err := validate.MaxLength("business_unit", "body", m.BusinessUnit, 100); err != nil {
		return err
	}

	return nil
}

func (m *AssetgroupmanagerV1CreateCloudGroupRequest) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 1000); err != nil {
		return err
	}

	return nil
}

var assetgroupmanagerV1CreateCloudGroupRequestTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dev","test","stage","prod"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assetgroupmanagerV1CreateCloudGroupRequestTypeEnvironmentPropEnum = append(assetgroupmanagerV1CreateCloudGroupRequestTypeEnvironmentPropEnum, v)
	}
}

const (

	// AssetgroupmanagerV1CreateCloudGroupRequestEnvironmentDev captures enum value "dev"
	AssetgroupmanagerV1CreateCloudGroupRequestEnvironmentDev string = "dev"

	// AssetgroupmanagerV1CreateCloudGroupRequestEnvironmentTest captures enum value "test"
	AssetgroupmanagerV1CreateCloudGroupRequestEnvironmentTest string = "test"

	// AssetgroupmanagerV1CreateCloudGroupRequestEnvironmentStage captures enum value "stage"
	AssetgroupmanagerV1CreateCloudGroupRequestEnvironmentStage string = "stage"

	// AssetgroupmanagerV1CreateCloudGroupRequestEnvironmentProd captures enum value "prod"
	AssetgroupmanagerV1CreateCloudGroupRequestEnvironmentProd string = "prod"
)

// prop value enum
func (m *AssetgroupmanagerV1CreateCloudGroupRequest) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, assetgroupmanagerV1CreateCloudGroupRequestTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AssetgroupmanagerV1CreateCloudGroupRequest) validateEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnvironmentEnum("environment", "body", m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *AssetgroupmanagerV1CreateCloudGroupRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 100); err != nil {
		return err
	}

	return nil
}

func (m *AssetgroupmanagerV1CreateCloudGroupRequest) validateSelectors(formats strfmt.Registry) error {
	if swag.IsZero(m.Selectors) { // not required
		return nil
	}

	if m.Selectors != nil {
		if err := m.Selectors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selectors")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("selectors")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this assetgroupmanager v1 create cloud group request based on the context it is used
func (m *AssetgroupmanagerV1CreateCloudGroupRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelectors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetgroupmanagerV1CreateCloudGroupRequest) contextValidateSelectors(ctx context.Context, formats strfmt.Registry) error {

	if m.Selectors != nil {

		if swag.IsZero(m.Selectors) { // not required
			return nil
		}

		if err := m.Selectors.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selectors")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("selectors")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetgroupmanagerV1CreateCloudGroupRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetgroupmanagerV1CreateCloudGroupRequest) UnmarshalBinary(b []byte) error {
	var res AssetgroupmanagerV1CreateCloudGroupRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
