// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsAPIVulnerabilityDetails models API vulnerability details
//
// swagger:model models.APIVulnerabilityDetails
type ModelsAPIVulnerabilityDetails struct {

	// cps current rating
	// Required: true
	CpsCurrentRating *string `json:"cps_current_rating"`

	// cve id
	// Required: true
	CveID *string `json:"cve_id"`

	// cvss score
	// Required: true
	CvssScore *string `json:"cvss_score"`

	// exploited status
	// Required: true
	ExploitedStatus *int32 `json:"exploited_status"`

	// layer command
	// Required: true
	LayerCommand *string `json:"layer_command"`

	// layer index
	// Required: true
	LayerIndex *int32 `json:"layer_index"`

	// package name version
	// Required: true
	PackageNameVersion *string `json:"package_name_version"`

	// package path
	// Required: true
	PackagePath *string `json:"package_path"`

	// remediation available
	// Required: true
	RemediationAvailable *bool `json:"remediation_available"`

	// severity
	// Required: true
	Severity *string `json:"severity"`
}

// Validate validates this models API vulnerability details
func (m *ModelsAPIVulnerabilityDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCpsCurrentRating(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCveID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCvssScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExploitedStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLayerCommand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLayerIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageNameVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackagePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediationAvailable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIVulnerabilityDetails) validateCpsCurrentRating(formats strfmt.Registry) error {

	if err := validate.Required("cps_current_rating", "body", m.CpsCurrentRating); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityDetails) validateCveID(formats strfmt.Registry) error {

	if err := validate.Required("cve_id", "body", m.CveID); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityDetails) validateCvssScore(formats strfmt.Registry) error {

	if err := validate.Required("cvss_score", "body", m.CvssScore); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityDetails) validateExploitedStatus(formats strfmt.Registry) error {

	if err := validate.Required("exploited_status", "body", m.ExploitedStatus); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityDetails) validateLayerCommand(formats strfmt.Registry) error {

	if err := validate.Required("layer_command", "body", m.LayerCommand); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityDetails) validateLayerIndex(formats strfmt.Registry) error {

	if err := validate.Required("layer_index", "body", m.LayerIndex); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityDetails) validatePackageNameVersion(formats strfmt.Registry) error {

	if err := validate.Required("package_name_version", "body", m.PackageNameVersion); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityDetails) validatePackagePath(formats strfmt.Registry) error {

	if err := validate.Required("package_path", "body", m.PackagePath); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityDetails) validateRemediationAvailable(formats strfmt.Registry) error {

	if err := validate.Required("remediation_available", "body", m.RemediationAvailable); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIVulnerabilityDetails) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models API vulnerability details based on context it is used
func (m *ModelsAPIVulnerabilityDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsAPIVulnerabilityDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsAPIVulnerabilityDetails) UnmarshalBinary(b []byte) error {
	var res ModelsAPIVulnerabilityDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
