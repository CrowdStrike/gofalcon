// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItautomationTaskExecutionHostStatus itautomation task execution host status
//
// swagger:model itautomation.TaskExecutionHostStatus
type ItautomationTaskExecutionHostStatus struct {

	// Timestamp when execution completed on this host. Example: 2025-01-23T18:49:26.785778Z
	// Required: true
	// Format: date-time
	EndTime *strfmt.DateTime `json:"end_time"`

	// Unique identifier of the target host. Example: fc0f24b0754c488fb2139334abe2c1a3
	// Required: true
	HostID *string `json:"host_id"`

	// Hostname of the target system. Example: I-93TM-PC2
	// Required: true
	Hostname *string `json:"hostname"`

	// Operating system platform of the host. Example: Windows
	// Required: true
	Platform *string `json:"platform"`

	// Reason for the current status. Example: In progress
	Reason string `json:"reason,omitempty"`

	// Current execution stage for this host. Example: query
	// Required: true
	Stage *string `json:"stage"`

	// Timestamp when execution started on this host. Example: 2025-01-23T18:11:20.148439Z
	// Required: true
	// Format: date-time
	StartTime *strfmt.DateTime `json:"start_time"`

	// Current status of the task execution on this host. Example: Running
	// Required: true
	Status *string `json:"status"`

	// Unique identifier for this task execution. Example: f64b95555ef54ea682619ce880d267cc
	// Required: true
	TaskExecutionID *string `json:"task_execution_id"`

	// Total number of results returned from this host
	TotalResults int64 `json:"total_results,omitempty"`
}

// Validate validates this itautomation task execution host status
func (m *ItautomationTaskExecutionHostStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskExecutionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItautomationTaskExecutionHostStatus) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("end_time", "body", m.EndTime); err != nil {
		return err
	}

	if err := validate.FormatOf("end_time", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskExecutionHostStatus) validateHostID(formats strfmt.Registry) error {

	if err := validate.Required("host_id", "body", m.HostID); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskExecutionHostStatus) validateHostname(formats strfmt.Registry) error {

	if err := validate.Required("hostname", "body", m.Hostname); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskExecutionHostStatus) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskExecutionHostStatus) validateStage(formats strfmt.Registry) error {

	if err := validate.Required("stage", "body", m.Stage); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskExecutionHostStatus) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("start_time", "body", m.StartTime); err != nil {
		return err
	}

	if err := validate.FormatOf("start_time", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskExecutionHostStatus) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationTaskExecutionHostStatus) validateTaskExecutionID(formats strfmt.Registry) error {

	if err := validate.Required("task_execution_id", "body", m.TaskExecutionID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this itautomation task execution host status based on context it is used
func (m *ItautomationTaskExecutionHostStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ItautomationTaskExecutionHostStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItautomationTaskExecutionHostStatus) UnmarshalBinary(b []byte) error {
	var res ItautomationTaskExecutionHostStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
