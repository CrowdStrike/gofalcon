// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TasksTask tasks task
//
// swagger:model tasks.Task
type TasksTask struct {

	// access type of the task, allowed values - Public,Shared
	AccessType string `json:"access_type,omitempty"`

	// assigned user ids to the task, when access_type is Shared
	AssignedUserIds []string `json:"assigned_user_ids"`

	// Username/api client name of who created the task. Example: john.smith@crowdstrike.com
	// Required: true
	CreatedBy *string `json:"created_by"`

	// Timestamp when task was created. Example: 2025-01-23T18:11:20.148439Z
	// Required: true
	// Format: date-time
	CreatedTime *strfmt.DateTime `json:"created_time"`

	// Detailed description of what the task does. Example: User Table Validation Check
	// Required: true
	Description *string `json:"description"`

	// True if the task has parameters
	HasTaskParameters bool `json:"has_task_parameters,omitempty"`

	// Unique identifier for the task. Example: f64b95555ef54ea682619ce880d267cc
	// Required: true
	ID *string `json:"id"`

	// Timestamp of last execution. Example: 2025-01-23T18:49:26.785778Z
	// Required: true
	// Format: date-time
	LastRunTime *strfmt.DateTime `json:"last_run_time"`

	// Username/api client name of who modified the task. Example: jane.doe@crowdstrike.com
	// Required: true
	ModifiedBy *string `json:"modified_by"`

	// Timestamp when task was last modified. Example: 2025-01-23T18:49:26.785778Z
	// Required: true
	// Format: date-time
	ModifiedTime *strfmt.DateTime `json:"modified_time"`

	// Name of the task. Example: OSQuery Check
	// Required: true
	Name *string `json:"name"`

	// Optional OSQuery to execute. Example: select * from users
	OsQuery string `json:"os_query,omitempty"`

	// Specifies the columns and delimiter used to parse script execution results.
	OutputParserConfig *PublicOutputParserConfig `json:"output_parser_config,omitempty"`

	// Parameters definitions for the task. Each usage of {{.some-key}} in osquery or script content must have a corresponding parameter definition.
	Parameters []*PublicTaskParameter `json:"parameters"`

	// Optional script queries to run per platform.
	Queries *PublicScripts `json:"queries,omitempty"`

	// Optional remediation scripts to run per platform.
	Remediations *PublicScripts `json:"remediations,omitempty"`

	// Number of times task has been executed. Example: 42
	// Required: true
	Runs *int32 `json:"runs"`

	// List of supported operating systems. Example: ['Windows', 'Linux', 'Mac']
	// Required: true
	SupportedOs []string `json:"supported_os"`

	// Target filter in FQL format. Example: platform_name: 'Windows'
	// Required: true
	Target *string `json:"target"`

	// Conditions that trigger remediation scripts.
	TriggerCondition []*PublicConditionGroup `json:"trigger_condition"`

	// The type of task. Example: query
	// Required: true
	Type *string `json:"type"`

	// Conditions that verify the outcome of the remediation scripts execution.
	VerificationCondition []*PublicConditionGroup `json:"verification_condition"`
}

// Validate validates this tasks task
func (m *TasksTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastRunTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputParserConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerificationCondition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TasksTask) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("created_by", "body", m.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (m *TasksTask) validateCreatedTime(formats strfmt.Registry) error {

	if err := validate.Required("created_time", "body", m.CreatedTime); err != nil {
		return err
	}

	if err := validate.FormatOf("created_time", "body", "date-time", m.CreatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TasksTask) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *TasksTask) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TasksTask) validateLastRunTime(formats strfmt.Registry) error {

	if err := validate.Required("last_run_time", "body", m.LastRunTime); err != nil {
		return err
	}

	if err := validate.FormatOf("last_run_time", "body", "date-time", m.LastRunTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TasksTask) validateModifiedBy(formats strfmt.Registry) error {

	if err := validate.Required("modified_by", "body", m.ModifiedBy); err != nil {
		return err
	}

	return nil
}

func (m *TasksTask) validateModifiedTime(formats strfmt.Registry) error {

	if err := validate.Required("modified_time", "body", m.ModifiedTime); err != nil {
		return err
	}

	if err := validate.FormatOf("modified_time", "body", "date-time", m.ModifiedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TasksTask) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TasksTask) validateOutputParserConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.OutputParserConfig) { // not required
		return nil
	}

	if m.OutputParserConfig != nil {
		if err := m.OutputParserConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output_parser_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output_parser_config")
			}
			return err
		}
	}

	return nil
}

func (m *TasksTask) validateParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TasksTask) validateQueries(formats strfmt.Registry) error {
	if swag.IsZero(m.Queries) { // not required
		return nil
	}

	if m.Queries != nil {
		if err := m.Queries.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queries")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queries")
			}
			return err
		}
	}

	return nil
}

func (m *TasksTask) validateRemediations(formats strfmt.Registry) error {
	if swag.IsZero(m.Remediations) { // not required
		return nil
	}

	if m.Remediations != nil {
		if err := m.Remediations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remediations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remediations")
			}
			return err
		}
	}

	return nil
}

func (m *TasksTask) validateRuns(formats strfmt.Registry) error {

	if err := validate.Required("runs", "body", m.Runs); err != nil {
		return err
	}

	return nil
}

func (m *TasksTask) validateSupportedOs(formats strfmt.Registry) error {

	if err := validate.Required("supported_os", "body", m.SupportedOs); err != nil {
		return err
	}

	return nil
}

func (m *TasksTask) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	return nil
}

func (m *TasksTask) validateTriggerCondition(formats strfmt.Registry) error {
	if swag.IsZero(m.TriggerCondition) { // not required
		return nil
	}

	for i := 0; i < len(m.TriggerCondition); i++ {
		if swag.IsZero(m.TriggerCondition[i]) { // not required
			continue
		}

		if m.TriggerCondition[i] != nil {
			if err := m.TriggerCondition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TasksTask) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *TasksTask) validateVerificationCondition(formats strfmt.Registry) error {
	if swag.IsZero(m.VerificationCondition) { // not required
		return nil
	}

	for i := 0; i < len(m.VerificationCondition); i++ {
		if swag.IsZero(m.VerificationCondition[i]) { // not required
			continue
		}

		if m.VerificationCondition[i] != nil {
			if err := m.VerificationCondition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this tasks task based on the context it is used
func (m *TasksTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOutputParserConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemediations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTriggerCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVerificationCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TasksTask) contextValidateOutputParserConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.OutputParserConfig != nil {

		if swag.IsZero(m.OutputParserConfig) { // not required
			return nil
		}

		if err := m.OutputParserConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output_parser_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output_parser_config")
			}
			return err
		}
	}

	return nil
}

func (m *TasksTask) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Parameters); i++ {

		if m.Parameters[i] != nil {

			if swag.IsZero(m.Parameters[i]) { // not required
				return nil
			}

			if err := m.Parameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TasksTask) contextValidateQueries(ctx context.Context, formats strfmt.Registry) error {

	if m.Queries != nil {

		if swag.IsZero(m.Queries) { // not required
			return nil
		}

		if err := m.Queries.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queries")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queries")
			}
			return err
		}
	}

	return nil
}

func (m *TasksTask) contextValidateRemediations(ctx context.Context, formats strfmt.Registry) error {

	if m.Remediations != nil {

		if swag.IsZero(m.Remediations) { // not required
			return nil
		}

		if err := m.Remediations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remediations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remediations")
			}
			return err
		}
	}

	return nil
}

func (m *TasksTask) contextValidateTriggerCondition(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TriggerCondition); i++ {

		if m.TriggerCondition[i] != nil {

			if swag.IsZero(m.TriggerCondition[i]) { // not required
				return nil
			}

			if err := m.TriggerCondition[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("trigger_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TasksTask) contextValidateVerificationCondition(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VerificationCondition); i++ {

		if m.VerificationCondition[i] != nil {

			if swag.IsZero(m.VerificationCondition[i]) { // not required
				return nil
			}

			if err := m.VerificationCondition[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TasksTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TasksTask) UnmarshalBinary(b []byte) error {
	var res TasksTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
