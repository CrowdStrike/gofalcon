// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SadomainTyposquattingSubdomain sadomain typosquatting subdomain
//
// swagger:model sadomain.TyposquattingSubdomain
type SadomainTyposquattingSubdomain struct {

	// first seen
	// Format: date-time
	FirstSeen strfmt.DateTime `json:"first_seen,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// is registered
	// Required: true
	IsRegistered *bool `json:"is_registered"`

	// last seen
	// Format: date-time
	LastSeen strfmt.DateTime `json:"last_seen,omitempty"`

	// punycode format
	// Required: true
	PunycodeFormat *string `json:"punycode_format"`

	// unicode format
	// Required: true
	UnicodeFormat *string `json:"unicode_format"`
}

// Validate validates this sadomain typosquatting subdomain
func (m *SadomainTyposquattingSubdomain) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirstSeen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsRegistered(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSeen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePunycodeFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnicodeFormat(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SadomainTyposquattingSubdomain) validateFirstSeen(formats strfmt.Registry) error {
	if swag.IsZero(m.FirstSeen) { // not required
		return nil
	}

	if err := validate.FormatOf("first_seen", "body", "date-time", m.FirstSeen.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SadomainTyposquattingSubdomain) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SadomainTyposquattingSubdomain) validateIsRegistered(formats strfmt.Registry) error {

	if err := validate.Required("is_registered", "body", m.IsRegistered); err != nil {
		return err
	}

	return nil
}

func (m *SadomainTyposquattingSubdomain) validateLastSeen(formats strfmt.Registry) error {
	if swag.IsZero(m.LastSeen) { // not required
		return nil
	}

	if err := validate.FormatOf("last_seen", "body", "date-time", m.LastSeen.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SadomainTyposquattingSubdomain) validatePunycodeFormat(formats strfmt.Registry) error {

	if err := validate.Required("punycode_format", "body", m.PunycodeFormat); err != nil {
		return err
	}

	return nil
}

func (m *SadomainTyposquattingSubdomain) validateUnicodeFormat(formats strfmt.Registry) error {

	if err := validate.Required("unicode_format", "body", m.UnicodeFormat); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sadomain typosquatting subdomain based on context it is used
func (m *SadomainTyposquattingSubdomain) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SadomainTyposquattingSubdomain) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SadomainTyposquattingSubdomain) UnmarshalBinary(b []byte) error {
	var res SadomainTyposquattingSubdomain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
