// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainAttachment domain attachment
//
// swagger:model domain.Attachment
type DomainAttachment struct {

	// date
	// Format: date-time
	Date strfmt.DateTime `json:"date,omitempty"`

	// file name
	FileName string `json:"file_name,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// link
	// Required: true
	Link *string `json:"link"`

	// mime type
	// Required: true
	MimeType *string `json:"mime_type"`

	// sha256
	Sha256 string `json:"sha256,omitempty"`

	// source url
	SourceURL string `json:"source_url,omitempty"`
}

// Validate validates this domain attachment
func (m *DomainAttachment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMimeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAttachment) validateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainAttachment) validateLink(formats strfmt.Registry) error {

	if err := validate.Required("link", "body", m.Link); err != nil {
		return err
	}

	return nil
}

func (m *DomainAttachment) validateMimeType(formats strfmt.Registry) error {

	if err := validate.Required("mime_type", "body", m.MimeType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain attachment based on context it is used
func (m *DomainAttachment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainAttachment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainAttachment) UnmarshalBinary(b []byte) error {
	var res DomainAttachment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
