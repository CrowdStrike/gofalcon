// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SuppressionrulesCreateSuppressionRuleRequest suppressionrules create suppression rule request
//
// swagger:model suppressionrules.CreateSuppressionRuleRequest
type SuppressionrulesCreateSuppressionRuleRequest struct {

	// description
	Description string `json:"description,omitempty"`

	// domain
	// Required: true
	Domain *string `json:"domain"`

	// name
	// Required: true
	Name *string `json:"name"`

	// rule selection filter
	RuleSelectionFilter *SuppressionrulesRuleSelectionFilter `json:"rule_selection_filter,omitempty"`

	// rule selection type
	// Required: true
	RuleSelectionType *string `json:"rule_selection_type"`

	// scope asset filter
	ScopeAssetFilter *SuppressionrulesScopeAssetFilter `json:"scope_asset_filter,omitempty"`

	// scope type
	// Required: true
	ScopeType *string `json:"scope_type"`

	// subdomain
	// Required: true
	Subdomain *string `json:"subdomain"`

	// suppression comment
	SuppressionComment string `json:"suppression_comment,omitempty"`

	// suppression expiration date
	SuppressionExpirationDate string `json:"suppression_expiration_date,omitempty"`

	// suppression reason
	// Required: true
	SuppressionReason *string `json:"suppression_reason"`
}

// Validate validates this suppressionrules create suppression rule request
func (m *SuppressionrulesCreateSuppressionRuleRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleSelectionFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleSelectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScopeAssetFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScopeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubdomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuppressionReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SuppressionrulesCreateSuppressionRuleRequest) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *SuppressionrulesCreateSuppressionRuleRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SuppressionrulesCreateSuppressionRuleRequest) validateRuleSelectionFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.RuleSelectionFilter) { // not required
		return nil
	}

	if m.RuleSelectionFilter != nil {
		if err := m.RuleSelectionFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule_selection_filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule_selection_filter")
			}
			return err
		}
	}

	return nil
}

func (m *SuppressionrulesCreateSuppressionRuleRequest) validateRuleSelectionType(formats strfmt.Registry) error {

	if err := validate.Required("rule_selection_type", "body", m.RuleSelectionType); err != nil {
		return err
	}

	return nil
}

func (m *SuppressionrulesCreateSuppressionRuleRequest) validateScopeAssetFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.ScopeAssetFilter) { // not required
		return nil
	}

	if m.ScopeAssetFilter != nil {
		if err := m.ScopeAssetFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope_asset_filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope_asset_filter")
			}
			return err
		}
	}

	return nil
}

func (m *SuppressionrulesCreateSuppressionRuleRequest) validateScopeType(formats strfmt.Registry) error {

	if err := validate.Required("scope_type", "body", m.ScopeType); err != nil {
		return err
	}

	return nil
}

func (m *SuppressionrulesCreateSuppressionRuleRequest) validateSubdomain(formats strfmt.Registry) error {

	if err := validate.Required("subdomain", "body", m.Subdomain); err != nil {
		return err
	}

	return nil
}

func (m *SuppressionrulesCreateSuppressionRuleRequest) validateSuppressionReason(formats strfmt.Registry) error {

	if err := validate.Required("suppression_reason", "body", m.SuppressionReason); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this suppressionrules create suppression rule request based on the context it is used
func (m *SuppressionrulesCreateSuppressionRuleRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRuleSelectionFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScopeAssetFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SuppressionrulesCreateSuppressionRuleRequest) contextValidateRuleSelectionFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.RuleSelectionFilter != nil {

		if swag.IsZero(m.RuleSelectionFilter) { // not required
			return nil
		}

		if err := m.RuleSelectionFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule_selection_filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule_selection_filter")
			}
			return err
		}
	}

	return nil
}

func (m *SuppressionrulesCreateSuppressionRuleRequest) contextValidateScopeAssetFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.ScopeAssetFilter != nil {

		if swag.IsZero(m.ScopeAssetFilter) { // not required
			return nil
		}

		if err := m.ScopeAssetFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope_asset_filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope_asset_filter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SuppressionrulesCreateSuppressionRuleRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SuppressionrulesCreateSuppressionRuleRequest) UnmarshalBinary(b []byte) error {
	var res SuppressionrulesCreateSuppressionRuleRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
