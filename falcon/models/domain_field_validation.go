// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainFieldValidation domain field validation
//
// swagger:model domain.FieldValidation
type DomainFieldValidation struct {

	// bytes
	// Required: true
	Bytes *string `json:"bytes"`

	// error
	Error string `json:"error,omitempty"`

	// matches test
	MatchesTest bool `json:"matches_test,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// test data
	TestData string `json:"test_data,omitempty"`

	// valid
	// Required: true
	Valid *bool `json:"valid"`

	// value
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this domain field validation
func (m *DomainFieldValidation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBytes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainFieldValidation) validateBytes(formats strfmt.Registry) error {

	if err := validate.Required("bytes", "body", m.Bytes); err != nil {
		return err
	}

	return nil
}

func (m *DomainFieldValidation) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DomainFieldValidation) validateValid(formats strfmt.Registry) error {

	if err := validate.Required("valid", "body", m.Valid); err != nil {
		return err
	}

	return nil
}

func (m *DomainFieldValidation) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain field validation based on context it is used
func (m *DomainFieldValidation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainFieldValidation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainFieldValidation) UnmarshalBinary(b []byte) error {
	var res DomainFieldValidation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
