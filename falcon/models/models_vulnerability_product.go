// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsVulnerabilityProduct models vulnerability product
//
// swagger:model models.VulnerabilityProduct
type ModelsVulnerabilityProduct struct {

	// major version
	// Required: true
	MajorVersion *string `json:"MajorVersion"`

	// package hash
	PackageHash string `json:"PackageHash,omitempty"`

	// package provider
	PackageProvider string `json:"PackageProvider,omitempty"`

	// package source
	// Required: true
	PackageSource *string `json:"PackageSource"`

	// package type
	PackageType string `json:"PackageType,omitempty"`

	// path
	Path string `json:"Path,omitempty"`

	// platform type
	PlatformType string `json:"PlatformType,omitempty"`

	// product
	// Required: true
	Product *string `json:"Product"`

	// product normalized
	ProductNormalized string `json:"ProductNormalized,omitempty"`

	// software architecture
	// Required: true
	SoftwareArchitecture *string `json:"SoftwareArchitecture"`

	// vendor
	Vendor string `json:"Vendor,omitempty"`
}

// Validate validates this models vulnerability product
func (m *ModelsVulnerabilityProduct) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMajorVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftwareArchitecture(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsVulnerabilityProduct) validateMajorVersion(formats strfmt.Registry) error {

	if err := validate.Required("MajorVersion", "body", m.MajorVersion); err != nil {
		return err
	}

	return nil
}

func (m *ModelsVulnerabilityProduct) validatePackageSource(formats strfmt.Registry) error {

	if err := validate.Required("PackageSource", "body", m.PackageSource); err != nil {
		return err
	}

	return nil
}

func (m *ModelsVulnerabilityProduct) validateProduct(formats strfmt.Registry) error {

	if err := validate.Required("Product", "body", m.Product); err != nil {
		return err
	}

	return nil
}

func (m *ModelsVulnerabilityProduct) validateSoftwareArchitecture(formats strfmt.Registry) error {

	if err := validate.Required("SoftwareArchitecture", "body", m.SoftwareArchitecture); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models vulnerability product based on context it is used
func (m *ModelsVulnerabilityProduct) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsVulnerabilityProduct) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsVulnerabilityProduct) UnmarshalBinary(b []byte) error {
	var res ModelsVulnerabilityProduct
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
