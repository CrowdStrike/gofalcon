// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainEvent domain event
//
// swagger:model domain.Event
type DomainEvent struct {

	// attributes
	// Required: true
	Attributes map[string]string `json:"Attributes"`

	// c ID
	// Required: true
	CID *string `json:"CID"`

	// data domain
	// Required: true
	DataDomain *string `json:"DataDomain"`

	// event ID
	// Required: true
	EventID *int32 `json:"EventID"`

	// event name
	// Required: true
	EventName *string `json:"EventName"`

	// internal metadata
	// Required: true
	InternalMetadata interface{} `json:"InternalMetadata"`

	// local ID
	// Required: true
	LocalID *string `json:"LocalID"`

	// metadata
	// Required: true
	Metadata *DomainEventMetadata `json:"Metadata"`

	// parent incident i ds
	// Required: true
	ParentIncidentIDs []string `json:"ParentIncidentIDs"`

	// parent indicator i ds
	// Required: true
	ParentIndicatorIDs []string `json:"ParentIndicatorIDs"`

	// product
	// Required: true
	Product *string `json:"Product"`

	// source
	// Required: true
	Source *string `json:"Source"`

	// source vertex ID
	// Required: true
	SourceVertexID *string `json:"SourceVertexID"`

	// timestamp
	// Required: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"Timestamp"`

	// vendor
	// Required: true
	Vendor *string `json:"Vendor"`

	// x d r detection ID
	// Required: true
	XDRDetectionID *string `json:"XDRDetectionID"`

	// x d r event ID
	// Required: true
	XDREventID *string `json:"XDREventID"`

	// x d r indicator ID
	// Required: true
	XDRIndicatorID *string `json:"XDRIndicatorID"`

	// source event
	// Required: true
	SourceEvent *DomainRawEvent `json:"sourceEvent"`
}

// Validate validates this domain event
func (m *DomainEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInternalMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentIncidentIDs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentIndicatorIDs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceVertexID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXDRDetectionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXDREventID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXDRIndicatorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceEvent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainEvent) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("Attributes", "body", m.Attributes); err != nil {
		return err
	}

	return nil
}

func (m *DomainEvent) validateCID(formats strfmt.Registry) error {

	if err := validate.Required("CID", "body", m.CID); err != nil {
		return err
	}

	return nil
}

func (m *DomainEvent) validateDataDomain(formats strfmt.Registry) error {

	if err := validate.Required("DataDomain", "body", m.DataDomain); err != nil {
		return err
	}

	return nil
}

func (m *DomainEvent) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("EventID", "body", m.EventID); err != nil {
		return err
	}

	return nil
}

func (m *DomainEvent) validateEventName(formats strfmt.Registry) error {

	if err := validate.Required("EventName", "body", m.EventName); err != nil {
		return err
	}

	return nil
}

func (m *DomainEvent) validateInternalMetadata(formats strfmt.Registry) error {

	if m.InternalMetadata == nil {
		return errors.Required("InternalMetadata", "body", nil)
	}

	return nil
}

func (m *DomainEvent) validateLocalID(formats strfmt.Registry) error {

	if err := validate.Required("LocalID", "body", m.LocalID); err != nil {
		return err
	}

	return nil
}

func (m *DomainEvent) validateMetadata(formats strfmt.Registry) error {

	if err := validate.Required("Metadata", "body", m.Metadata); err != nil {
		return err
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Metadata")
			}
			return err
		}
	}

	return nil
}

func (m *DomainEvent) validateParentIncidentIDs(formats strfmt.Registry) error {

	if err := validate.Required("ParentIncidentIDs", "body", m.ParentIncidentIDs); err != nil {
		return err
	}

	return nil
}

func (m *DomainEvent) validateParentIndicatorIDs(formats strfmt.Registry) error {

	if err := validate.Required("ParentIndicatorIDs", "body", m.ParentIndicatorIDs); err != nil {
		return err
	}

	return nil
}

func (m *DomainEvent) validateProduct(formats strfmt.Registry) error {

	if err := validate.Required("Product", "body", m.Product); err != nil {
		return err
	}

	return nil
}

func (m *DomainEvent) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("Source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

func (m *DomainEvent) validateSourceVertexID(formats strfmt.Registry) error {

	if err := validate.Required("SourceVertexID", "body", m.SourceVertexID); err != nil {
		return err
	}

	return nil
}

func (m *DomainEvent) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("Timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("Timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainEvent) validateVendor(formats strfmt.Registry) error {

	if err := validate.Required("Vendor", "body", m.Vendor); err != nil {
		return err
	}

	return nil
}

func (m *DomainEvent) validateXDRDetectionID(formats strfmt.Registry) error {

	if err := validate.Required("XDRDetectionID", "body", m.XDRDetectionID); err != nil {
		return err
	}

	return nil
}

func (m *DomainEvent) validateXDREventID(formats strfmt.Registry) error {

	if err := validate.Required("XDREventID", "body", m.XDREventID); err != nil {
		return err
	}

	return nil
}

func (m *DomainEvent) validateXDRIndicatorID(formats strfmt.Registry) error {

	if err := validate.Required("XDRIndicatorID", "body", m.XDRIndicatorID); err != nil {
		return err
	}

	return nil
}

func (m *DomainEvent) validateSourceEvent(formats strfmt.Registry) error {

	if err := validate.Required("sourceEvent", "body", m.SourceEvent); err != nil {
		return err
	}

	if m.SourceEvent != nil {
		if err := m.SourceEvent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceEvent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceEvent")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this domain event based on the context it is used
func (m *DomainEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceEvent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainEvent) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {

		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Metadata")
			}
			return err
		}
	}

	return nil
}

func (m *DomainEvent) contextValidateSourceEvent(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceEvent != nil {

		if err := m.SourceEvent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceEvent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceEvent")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainEvent) UnmarshalBinary(b []byte) error {
	var res DomainEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
