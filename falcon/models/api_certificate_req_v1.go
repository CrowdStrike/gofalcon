// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APICertificateReqV1 api certificate req v1
//
// swagger:model api.CertificateReqV1
type APICertificateReqV1 struct {

	// issuer
	// Required: true
	Issuer *string `json:"issuer"`

	// serial
	// Required: true
	Serial *string `json:"serial"`

	// subject
	// Required: true
	Subject *string `json:"subject"`

	// thumbprint
	// Required: true
	Thumbprint *string `json:"thumbprint"`

	// valid from
	// Required: true
	// Format: date-time
	ValidFrom *strfmt.DateTime `json:"valid_from"`

	// valid to
	// Required: true
	// Format: date-time
	ValidTo *strfmt.DateTime `json:"valid_to"`
}

// Validate validates this api certificate req v1
func (m *APICertificateReqV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSerial(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThumbprint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APICertificateReqV1) validateIssuer(formats strfmt.Registry) error {

	if err := validate.Required("issuer", "body", m.Issuer); err != nil {
		return err
	}

	return nil
}

func (m *APICertificateReqV1) validateSerial(formats strfmt.Registry) error {

	if err := validate.Required("serial", "body", m.Serial); err != nil {
		return err
	}

	return nil
}

func (m *APICertificateReqV1) validateSubject(formats strfmt.Registry) error {

	if err := validate.Required("subject", "body", m.Subject); err != nil {
		return err
	}

	return nil
}

func (m *APICertificateReqV1) validateThumbprint(formats strfmt.Registry) error {

	if err := validate.Required("thumbprint", "body", m.Thumbprint); err != nil {
		return err
	}

	return nil
}

func (m *APICertificateReqV1) validateValidFrom(formats strfmt.Registry) error {

	if err := validate.Required("valid_from", "body", m.ValidFrom); err != nil {
		return err
	}

	if err := validate.FormatOf("valid_from", "body", "date-time", m.ValidFrom.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APICertificateReqV1) validateValidTo(formats strfmt.Registry) error {

	if err := validate.Required("valid_to", "body", m.ValidTo); err != nil {
		return err
	}

	if err := validate.FormatOf("valid_to", "body", "date-time", m.ValidTo.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this api certificate req v1 based on context it is used
func (m *APICertificateReqV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *APICertificateReqV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APICertificateReqV1) UnmarshalBinary(b []byte) error {
	var res APICertificateReqV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
