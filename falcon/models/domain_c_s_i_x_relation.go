// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainCSIXRelation domain c s i x relation
//
// swagger:model domain.CSIXRelation
type DomainCSIXRelation struct {

	// created date
	// Required: true
	CreatedDate *int64 `json:"created_date"`

	// id
	ID string `json:"id,omitempty"`

	// indicator
	// Required: true
	Indicator *string `json:"indicator"`

	// last valid date
	// Required: true
	LastValidDate *int64 `json:"last_valid_date"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this domain c s i x relation
func (m *DomainCSIXRelation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastValidDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainCSIXRelation) validateCreatedDate(formats strfmt.Registry) error {

	if err := validate.Required("created_date", "body", m.CreatedDate); err != nil {
		return err
	}

	return nil
}

func (m *DomainCSIXRelation) validateIndicator(formats strfmt.Registry) error {

	if err := validate.Required("indicator", "body", m.Indicator); err != nil {
		return err
	}

	return nil
}

func (m *DomainCSIXRelation) validateLastValidDate(formats strfmt.Registry) error {

	if err := validate.Required("last_valid_date", "body", m.LastValidDate); err != nil {
		return err
	}

	return nil
}

func (m *DomainCSIXRelation) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain c s i x relation based on context it is used
func (m *DomainCSIXRelation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainCSIXRelation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainCSIXRelation) UnmarshalBinary(b []byte) error {
	var res DomainCSIXRelation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
