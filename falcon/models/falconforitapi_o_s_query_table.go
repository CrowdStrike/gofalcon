// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FalconforitapiOSQueryTable falconforitapi o s query table
//
// swagger:model falconforitapi.OSQueryTable
type FalconforitapiOSQueryTable struct {

	// columns
	// Required: true
	Columns []*FalconforitapiOSQueryTableColumn `json:"columns"`

	// description
	// Required: true
	Description *string `json:"description"`

	// examples
	// Required: true
	Examples []string `json:"examples"`

	// extended columns
	// Required: true
	ExtendedColumns map[string][]FalconforitapiOSQueryTableColumn `json:"extended_columns"`

	// name
	// Required: true
	Name *string `json:"name"`

	// platforms
	// Required: true
	Platforms []string `json:"platforms"`
}

// Validate validates this falconforitapi o s query table
func (m *FalconforitapiOSQueryTable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExamples(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtendedColumns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatforms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiOSQueryTable) validateColumns(formats strfmt.Registry) error {

	if err := validate.Required("columns", "body", m.Columns); err != nil {
		return err
	}

	for i := 0; i < len(m.Columns); i++ {
		if swag.IsZero(m.Columns[i]) { // not required
			continue
		}

		if m.Columns[i] != nil {
			if err := m.Columns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("columns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("columns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconforitapiOSQueryTable) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiOSQueryTable) validateExamples(formats strfmt.Registry) error {

	if err := validate.Required("examples", "body", m.Examples); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiOSQueryTable) validateExtendedColumns(formats strfmt.Registry) error {

	if err := validate.Required("extended_columns", "body", m.ExtendedColumns); err != nil {
		return err
	}

	for k := range m.ExtendedColumns {

		if err := validate.Required("extended_columns"+"."+k, "body", m.ExtendedColumns[k]); err != nil {
			return err
		}

		for i := 0; i < len(m.ExtendedColumns[k]); i++ {

			if err := m.ExtendedColumns[k][i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extended_columns" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extended_columns" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *FalconforitapiOSQueryTable) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiOSQueryTable) validatePlatforms(formats strfmt.Registry) error {

	if err := validate.Required("platforms", "body", m.Platforms); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this falconforitapi o s query table based on the context it is used
func (m *FalconforitapiOSQueryTable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateColumns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtendedColumns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiOSQueryTable) contextValidateColumns(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Columns); i++ {

		if m.Columns[i] != nil {

			if swag.IsZero(m.Columns[i]) { // not required
				return nil
			}

			if err := m.Columns[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("columns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("columns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconforitapiOSQueryTable) contextValidateExtendedColumns(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.Required("extended_columns", "body", m.ExtendedColumns); err != nil {
		return err
	}

	for k := range m.ExtendedColumns {

		for i := 0; i < len(m.ExtendedColumns[k]); i++ {

			if swag.IsZero(m.ExtendedColumns[k][i]) { // not required
				return nil
			}

			if err := m.ExtendedColumns[k][i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extended_columns" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extended_columns" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FalconforitapiOSQueryTable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FalconforitapiOSQueryTable) UnmarshalBinary(b []byte) error {
	var res FalconforitapiOSQueryTable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
