// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsAPIPolicyEvaluationDetails models API policy evaluation details
//
// swagger:model models.APIPolicyEvaluationDetails
type ModelsAPIPolicyEvaluationDetails struct {

	// excluded cve list
	// Required: true
	ExcludedCveList []string `json:"excluded_cve_list"`

	// excluded detection list
	// Required: true
	ExcludedDetectionList []string `json:"excluded_detection_list"`

	// excluded package list
	// Required: true
	ExcludedPackageList []string `json:"excluded_package_list"`

	// matched base os list
	// Required: true
	MatchedBaseOsList []string `json:"matched_base_os_list"`

	// matched cve list
	// Required: true
	MatchedCveList []string `json:"matched_cve_list"`

	// matched detection list
	// Required: true
	MatchedDetectionList []string `json:"matched_detection_list"`

	// matched package list
	// Required: true
	MatchedPackageList []string `json:"matched_package_list"`
}

// Validate validates this models API policy evaluation details
func (m *ModelsAPIPolicyEvaluationDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExcludedCveList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludedDetectionList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludedPackageList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchedBaseOsList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchedCveList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchedDetectionList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchedPackageList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIPolicyEvaluationDetails) validateExcludedCveList(formats strfmt.Registry) error {

	if err := validate.Required("excluded_cve_list", "body", m.ExcludedCveList); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPolicyEvaluationDetails) validateExcludedDetectionList(formats strfmt.Registry) error {

	if err := validate.Required("excluded_detection_list", "body", m.ExcludedDetectionList); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPolicyEvaluationDetails) validateExcludedPackageList(formats strfmt.Registry) error {

	if err := validate.Required("excluded_package_list", "body", m.ExcludedPackageList); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPolicyEvaluationDetails) validateMatchedBaseOsList(formats strfmt.Registry) error {

	if err := validate.Required("matched_base_os_list", "body", m.MatchedBaseOsList); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPolicyEvaluationDetails) validateMatchedCveList(formats strfmt.Registry) error {

	if err := validate.Required("matched_cve_list", "body", m.MatchedCveList); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPolicyEvaluationDetails) validateMatchedDetectionList(formats strfmt.Registry) error {

	if err := validate.Required("matched_detection_list", "body", m.MatchedDetectionList); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIPolicyEvaluationDetails) validateMatchedPackageList(formats strfmt.Registry) error {

	if err := validate.Required("matched_package_list", "body", m.MatchedPackageList); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models API policy evaluation details based on context it is used
func (m *ModelsAPIPolicyEvaluationDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsAPIPolicyEvaluationDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsAPIPolicyEvaluationDetails) UnmarshalBinary(b []byte) error {
	var res ModelsAPIPolicyEvaluationDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
