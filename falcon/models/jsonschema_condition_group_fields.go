// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// JsonschemaConditionGroupFields jsonschema condition group fields
//
// swagger:model jsonschema.ConditionGroupFields
type JsonschemaConditionGroupFields struct {

	// condition control
	ConditionControl bool `json:"condition_control,omitempty"`

	// control name
	ControlName string `json:"control_name,omitempty"`

	// controller
	Controller bool `json:"controller,omitempty"`

	// dependent control
	DependentControl string `json:"dependent_control,omitempty"`

	// requires meta
	RequiresMeta string `json:"requires_meta,omitempty"`

	// reset fields
	ResetFields *JsonschemaResetFields `json:"reset_fields,omitempty"`
}

// Validate validates this jsonschema condition group fields
func (m *JsonschemaConditionGroupFields) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResetFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JsonschemaConditionGroupFields) validateResetFields(formats strfmt.Registry) error {
	if swag.IsZero(m.ResetFields) { // not required
		return nil
	}

	if m.ResetFields != nil {
		if err := m.ResetFields.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reset_fields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reset_fields")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this jsonschema condition group fields based on the context it is used
func (m *JsonschemaConditionGroupFields) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResetFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JsonschemaConditionGroupFields) contextValidateResetFields(ctx context.Context, formats strfmt.Registry) error {

	if m.ResetFields != nil {

		if swag.IsZero(m.ResetFields) { // not required
			return nil
		}

		if err := m.ResetFields.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reset_fields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reset_fields")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JsonschemaConditionGroupFields) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JsonschemaConditionGroupFields) UnmarshalBinary(b []byte) error {
	var res JsonschemaConditionGroupFields
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
