// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonCreateComplianceControlRequest common create compliance control request
//
// swagger:model common.CreateComplianceControlRequest
type CommonCreateComplianceControlRequest struct {

	// description
	// Required: true
	Description *string `json:"description"`

	// framework id
	// Required: true
	FrameworkID *string `json:"framework_id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// section name
	// Required: true
	SectionName *string `json:"section_name"`
}

// Validate validates this common create compliance control request
func (m *CommonCreateComplianceControlRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrameworkID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSectionName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonCreateComplianceControlRequest) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateComplianceControlRequest) validateFrameworkID(formats strfmt.Registry) error {

	if err := validate.Required("framework_id", "body", m.FrameworkID); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateComplianceControlRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateComplianceControlRequest) validateSectionName(formats strfmt.Registry) error {

	if err := validate.Required("section_name", "body", m.SectionName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this common create compliance control request based on context it is used
func (m *CommonCreateComplianceControlRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CommonCreateComplianceControlRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonCreateComplianceControlRequest) UnmarshalBinary(b []byte) error {
	var res CommonCreateComplianceControlRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
