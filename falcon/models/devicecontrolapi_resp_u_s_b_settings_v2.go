// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DevicecontrolapiRespUSBSettingsV2 devicecontrolapi resp u s b settings v2
//
// swagger:model devicecontrolapi.RespUSBSettingsV2
type DevicecontrolapiRespUSBSettingsV2 struct {

	// Array of USB classes
	// Required: true
	Classes []*DevicecontrolapiRespUSBClassSettingsV2 `json:"classes"`

	// Object for the Custom end-user notifications
	CustomNotifications *DevicecontrolapiUSBCustomNotifications `json:"custom_notifications,omitempty"`

	// Indicates whether the end-user notification will appear (SILENT or NOTIFY_USER)
	// Required: true
	EndUserNotification *string `json:"end_user_notification"`

	// Enforcement mode for the USB policy
	// Required: true
	EnforcementMode *string `json:"enforcement_mode"`

	// Boolean value to enable file metadata
	// Required: true
	EnhancedFileMetadata *bool `json:"enhanced_file_metadata"`

	// Indicates whether the policy will include whitelist exceptions (ENABLE_ALWAYS, DISABLE_VIRTUAL)
	WhitelistMode string `json:"whitelist_mode,omitempty"`
}

// Validate validates this devicecontrolapi resp u s b settings v2
func (m *DevicecontrolapiRespUSBSettingsV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClasses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomNotifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndUserNotification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnforcementMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnhancedFileMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontrolapiRespUSBSettingsV2) validateClasses(formats strfmt.Registry) error {

	if err := validate.Required("classes", "body", m.Classes); err != nil {
		return err
	}

	for i := 0; i < len(m.Classes); i++ {
		if swag.IsZero(m.Classes[i]) { // not required
			continue
		}

		if m.Classes[i] != nil {
			if err := m.Classes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("classes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("classes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DevicecontrolapiRespUSBSettingsV2) validateCustomNotifications(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomNotifications) { // not required
		return nil
	}

	if m.CustomNotifications != nil {
		if err := m.CustomNotifications.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom_notifications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom_notifications")
			}
			return err
		}
	}

	return nil
}

func (m *DevicecontrolapiRespUSBSettingsV2) validateEndUserNotification(formats strfmt.Registry) error {

	if err := validate.Required("end_user_notification", "body", m.EndUserNotification); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiRespUSBSettingsV2) validateEnforcementMode(formats strfmt.Registry) error {

	if err := validate.Required("enforcement_mode", "body", m.EnforcementMode); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiRespUSBSettingsV2) validateEnhancedFileMetadata(formats strfmt.Registry) error {

	if err := validate.Required("enhanced_file_metadata", "body", m.EnhancedFileMetadata); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this devicecontrolapi resp u s b settings v2 based on the context it is used
func (m *DevicecontrolapiRespUSBSettingsV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClasses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomNotifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontrolapiRespUSBSettingsV2) contextValidateClasses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Classes); i++ {

		if m.Classes[i] != nil {

			if swag.IsZero(m.Classes[i]) { // not required
				return nil
			}

			if err := m.Classes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("classes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("classes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DevicecontrolapiRespUSBSettingsV2) contextValidateCustomNotifications(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomNotifications != nil {

		if swag.IsZero(m.CustomNotifications) { // not required
			return nil
		}

		if err := m.CustomNotifications.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom_notifications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom_notifications")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DevicecontrolapiRespUSBSettingsV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevicecontrolapiRespUSBSettingsV2) UnmarshalBinary(b []byte) error {
	var res DevicecontrolapiRespUSBSettingsV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
