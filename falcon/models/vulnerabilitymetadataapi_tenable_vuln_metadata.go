// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VulnerabilitymetadataapiTenableVulnMetadata vulnerabilitymetadataapi tenable vuln metadata
//
// swagger:model vulnerabilitymetadataapi.TenableVulnMetadata
type VulnerabilitymetadataapiTenableVulnMetadata struct {

	// cpe
	// Required: true
	Cpe []string `json:"cpe"`

	// exploit ease
	ExploitEase string `json:"exploit_ease,omitempty"`

	// family
	// Required: true
	Family *string `json:"family"`

	// plugin id
	// Required: true
	PluginID *string `json:"plugin_id"`

	// plugin name
	// Required: true
	PluginName *string `json:"plugin_name"`

	// port
	Port int32 `json:"port,omitempty"`

	// severity
	// Required: true
	Severity *string `json:"severity"`

	// solution
	Solution string `json:"solution,omitempty"`

	// synopsis
	Synopsis string `json:"synopsis,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// vpr
	// Required: true
	Vpr *float32 `json:"vpr"`

	// vpr severity
	// Required: true
	VprSeverity *string `json:"vpr_severity"`
}

// Validate validates this vulnerabilitymetadataapi tenable vuln metadata
func (m *VulnerabilitymetadataapiTenableVulnMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCpe(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFamily(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePluginID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePluginName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVprSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VulnerabilitymetadataapiTenableVulnMetadata) validateCpe(formats strfmt.Registry) error {

	if err := validate.Required("cpe", "body", m.Cpe); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiTenableVulnMetadata) validateFamily(formats strfmt.Registry) error {

	if err := validate.Required("family", "body", m.Family); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiTenableVulnMetadata) validatePluginID(formats strfmt.Registry) error {

	if err := validate.Required("plugin_id", "body", m.PluginID); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiTenableVulnMetadata) validatePluginName(formats strfmt.Registry) error {

	if err := validate.Required("plugin_name", "body", m.PluginName); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiTenableVulnMetadata) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiTenableVulnMetadata) validateVpr(formats strfmt.Registry) error {

	if err := validate.Required("vpr", "body", m.Vpr); err != nil {
		return err
	}

	return nil
}

func (m *VulnerabilitymetadataapiTenableVulnMetadata) validateVprSeverity(formats strfmt.Registry) error {

	if err := validate.Required("vpr_severity", "body", m.VprSeverity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vulnerabilitymetadataapi tenable vuln metadata based on context it is used
func (m *VulnerabilitymetadataapiTenableVulnMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VulnerabilitymetadataapiTenableVulnMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VulnerabilitymetadataapiTenableVulnMetadata) UnmarshalBinary(b []byte) error {
	var res VulnerabilitymetadataapiTenableVulnMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
