// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceGetDeviceInventory device get device inventory
//
// swagger:model Device_GetDeviceInventory
type DeviceGetDeviceInventory struct {

	// Account id
	// Required: true
	AccountID *string `json:"account_id"`

	// Apps count
	// Required: true
	AppsCount *int64 `json:"apps_count"`

	// Device name
	// Required: true
	// Min Length: 1
	DeviceName *string `json:"device_name"`

	// Globally compliant
	// Required: true
	// Min Length: 1
	GloballyCompliant *string `json:"globally_compliant"`

	// Globally managed
	// Required: true
	// Min Length: 1
	GloballyManaged *string `json:"globally_managed"`

	// Has user association
	// Required: true
	HasUserAssociation *bool `json:"has_user_association"`

	// Id
	// Required: true
	// Min Length: 1
	ID *string `json:"id"`

	// Last seen
	// Required: true
	// Min Length: 1
	LastSeen *string `json:"last_seen"`

	// mac address list
	// Required: true
	MacAddressList []*string `json:"mac_address_list"`

	// Os
	// Required: true
	// Min Length: 1
	Os *string `json:"os"`

	// Os version
	// Required: true
	// Min Length: 1
	OsVersion *string `json:"os_version"`

	// Platform
	// Required: true
	// Min Length: 1
	Platform *string `json:"platform"`

	// Privileged roles count
	// Required: true
	PrivilegedRolesCount *int64 `json:"privileged_roles_count"`

	// reported apps
	// Required: true
	ReportedApps []*string `json:"reported_apps"`

	// reporters
	// Required: true
	Reporters []*string `json:"reporters"`

	// User email
	// Required: true
	// Min Length: 1
	UserEmail *string `json:"user_email"`

	// User exists
	// Required: true
	UserExists *bool `json:"user_exists"`
}

// Validate validates this device get device inventory
func (m *DeviceGetDeviceInventory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppsCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGloballyCompliant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGloballyManaged(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasUserAssociation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSeen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMacAddressList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivilegedRolesCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportedApps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReporters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserExists(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceGetDeviceInventory) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("account_id", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *DeviceGetDeviceInventory) validateAppsCount(formats strfmt.Registry) error {

	if err := validate.Required("apps_count", "body", m.AppsCount); err != nil {
		return err
	}

	return nil
}

func (m *DeviceGetDeviceInventory) validateDeviceName(formats strfmt.Registry) error {

	if err := validate.Required("device_name", "body", m.DeviceName); err != nil {
		return err
	}

	if err := validate.MinLength("device_name", "body", *m.DeviceName, 1); err != nil {
		return err
	}

	return nil
}

func (m *DeviceGetDeviceInventory) validateGloballyCompliant(formats strfmt.Registry) error {

	if err := validate.Required("globally_compliant", "body", m.GloballyCompliant); err != nil {
		return err
	}

	if err := validate.MinLength("globally_compliant", "body", *m.GloballyCompliant, 1); err != nil {
		return err
	}

	return nil
}

func (m *DeviceGetDeviceInventory) validateGloballyManaged(formats strfmt.Registry) error {

	if err := validate.Required("globally_managed", "body", m.GloballyManaged); err != nil {
		return err
	}

	if err := validate.MinLength("globally_managed", "body", *m.GloballyManaged, 1); err != nil {
		return err
	}

	return nil
}

func (m *DeviceGetDeviceInventory) validateHasUserAssociation(formats strfmt.Registry) error {

	if err := validate.Required("has_user_association", "body", m.HasUserAssociation); err != nil {
		return err
	}

	return nil
}

func (m *DeviceGetDeviceInventory) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", *m.ID, 1); err != nil {
		return err
	}

	return nil
}

func (m *DeviceGetDeviceInventory) validateLastSeen(formats strfmt.Registry) error {

	if err := validate.Required("last_seen", "body", m.LastSeen); err != nil {
		return err
	}

	if err := validate.MinLength("last_seen", "body", *m.LastSeen, 1); err != nil {
		return err
	}

	return nil
}

func (m *DeviceGetDeviceInventory) validateMacAddressList(formats strfmt.Registry) error {

	if err := validate.Required("mac_address_list", "body", m.MacAddressList); err != nil {
		return err
	}

	return nil
}

func (m *DeviceGetDeviceInventory) validateOs(formats strfmt.Registry) error {

	if err := validate.Required("os", "body", m.Os); err != nil {
		return err
	}

	if err := validate.MinLength("os", "body", *m.Os, 1); err != nil {
		return err
	}

	return nil
}

func (m *DeviceGetDeviceInventory) validateOsVersion(formats strfmt.Registry) error {

	if err := validate.Required("os_version", "body", m.OsVersion); err != nil {
		return err
	}

	if err := validate.MinLength("os_version", "body", *m.OsVersion, 1); err != nil {
		return err
	}

	return nil
}

func (m *DeviceGetDeviceInventory) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	if err := validate.MinLength("platform", "body", *m.Platform, 1); err != nil {
		return err
	}

	return nil
}

func (m *DeviceGetDeviceInventory) validatePrivilegedRolesCount(formats strfmt.Registry) error {

	if err := validate.Required("privileged_roles_count", "body", m.PrivilegedRolesCount); err != nil {
		return err
	}

	return nil
}

func (m *DeviceGetDeviceInventory) validateReportedApps(formats strfmt.Registry) error {

	if err := validate.Required("reported_apps", "body", m.ReportedApps); err != nil {
		return err
	}

	return nil
}

func (m *DeviceGetDeviceInventory) validateReporters(formats strfmt.Registry) error {

	if err := validate.Required("reporters", "body", m.Reporters); err != nil {
		return err
	}

	return nil
}

func (m *DeviceGetDeviceInventory) validateUserEmail(formats strfmt.Registry) error {

	if err := validate.Required("user_email", "body", m.UserEmail); err != nil {
		return err
	}

	if err := validate.MinLength("user_email", "body", *m.UserEmail, 1); err != nil {
		return err
	}

	return nil
}

func (m *DeviceGetDeviceInventory) validateUserExists(formats strfmt.Registry) error {

	if err := validate.Required("user_exists", "body", m.UserExists); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this device get device inventory based on context it is used
func (m *DeviceGetDeviceInventory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceGetDeviceInventory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceGetDeviceInventory) UnmarshalBinary(b []byte) error {
	var res DeviceGetDeviceInventory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
