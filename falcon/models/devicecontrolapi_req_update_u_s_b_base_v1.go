// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DevicecontrolapiReqUpdateUSBBaseV1 devicecontrolapi req update u s b base v1
//
// swagger:model devicecontrolapi.ReqUpdateUSBBaseV1
type DevicecontrolapiReqUpdateUSBBaseV1 struct {

	// custom notifications
	CustomNotifications *DevicecontrolapiUSBCustomNotifications `json:"custom_notifications,omitempty"`

	// Determines if a notification will be shown to the end user (omit to keep current)
	// Enum: [NOTIFY_USER SILENT]
	EndUserNotification string `json:"end_user_notification,omitempty"`

	// Enforcement for the USB policy (omit to keep current)
	// Enum: [MONITOR_ONLY MONITOR_ENFORCE OFF]
	EnforcementMode string `json:"enforcement_mode,omitempty"`

	// enhanced file metadata
	EnhancedFileMetadata bool `json:"enhanced_file_metadata,omitempty"`

	// Determines if the policy will include whitelist exceptions
	// Enum: [ENABLE_ALWAYS DISABLE_VIRTUAL]
	WhitelistMode string `json:"whitelist_mode,omitempty"`
}

// Validate validates this devicecontrolapi req update u s b base v1
func (m *DevicecontrolapiReqUpdateUSBBaseV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomNotifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndUserNotification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnforcementMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhitelistMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontrolapiReqUpdateUSBBaseV1) validateCustomNotifications(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomNotifications) { // not required
		return nil
	}

	if m.CustomNotifications != nil {
		if err := m.CustomNotifications.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom_notifications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom_notifications")
			}
			return err
		}
	}

	return nil
}

var devicecontrolapiReqUpdateUSBBaseV1TypeEndUserNotificationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NOTIFY_USER","SILENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		devicecontrolapiReqUpdateUSBBaseV1TypeEndUserNotificationPropEnum = append(devicecontrolapiReqUpdateUSBBaseV1TypeEndUserNotificationPropEnum, v)
	}
}

const (

	// DevicecontrolapiReqUpdateUSBBaseV1EndUserNotificationNOTIFYUSER captures enum value "NOTIFY_USER"
	DevicecontrolapiReqUpdateUSBBaseV1EndUserNotificationNOTIFYUSER string = "NOTIFY_USER"

	// DevicecontrolapiReqUpdateUSBBaseV1EndUserNotificationSILENT captures enum value "SILENT"
	DevicecontrolapiReqUpdateUSBBaseV1EndUserNotificationSILENT string = "SILENT"
)

// prop value enum
func (m *DevicecontrolapiReqUpdateUSBBaseV1) validateEndUserNotificationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, devicecontrolapiReqUpdateUSBBaseV1TypeEndUserNotificationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DevicecontrolapiReqUpdateUSBBaseV1) validateEndUserNotification(formats strfmt.Registry) error {
	if swag.IsZero(m.EndUserNotification) { // not required
		return nil
	}

	// value enum
	if err := m.validateEndUserNotificationEnum("end_user_notification", "body", m.EndUserNotification); err != nil {
		return err
	}

	return nil
}

var devicecontrolapiReqUpdateUSBBaseV1TypeEnforcementModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MONITOR_ONLY","MONITOR_ENFORCE","OFF"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		devicecontrolapiReqUpdateUSBBaseV1TypeEnforcementModePropEnum = append(devicecontrolapiReqUpdateUSBBaseV1TypeEnforcementModePropEnum, v)
	}
}

const (

	// DevicecontrolapiReqUpdateUSBBaseV1EnforcementModeMONITORONLY captures enum value "MONITOR_ONLY"
	DevicecontrolapiReqUpdateUSBBaseV1EnforcementModeMONITORONLY string = "MONITOR_ONLY"

	// DevicecontrolapiReqUpdateUSBBaseV1EnforcementModeMONITORENFORCE captures enum value "MONITOR_ENFORCE"
	DevicecontrolapiReqUpdateUSBBaseV1EnforcementModeMONITORENFORCE string = "MONITOR_ENFORCE"

	// DevicecontrolapiReqUpdateUSBBaseV1EnforcementModeOFF captures enum value "OFF"
	DevicecontrolapiReqUpdateUSBBaseV1EnforcementModeOFF string = "OFF"
)

// prop value enum
func (m *DevicecontrolapiReqUpdateUSBBaseV1) validateEnforcementModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, devicecontrolapiReqUpdateUSBBaseV1TypeEnforcementModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DevicecontrolapiReqUpdateUSBBaseV1) validateEnforcementMode(formats strfmt.Registry) error {
	if swag.IsZero(m.EnforcementMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnforcementModeEnum("enforcement_mode", "body", m.EnforcementMode); err != nil {
		return err
	}

	return nil
}

var devicecontrolapiReqUpdateUSBBaseV1TypeWhitelistModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLE_ALWAYS","DISABLE_VIRTUAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		devicecontrolapiReqUpdateUSBBaseV1TypeWhitelistModePropEnum = append(devicecontrolapiReqUpdateUSBBaseV1TypeWhitelistModePropEnum, v)
	}
}

const (

	// DevicecontrolapiReqUpdateUSBBaseV1WhitelistModeENABLEALWAYS captures enum value "ENABLE_ALWAYS"
	DevicecontrolapiReqUpdateUSBBaseV1WhitelistModeENABLEALWAYS string = "ENABLE_ALWAYS"

	// DevicecontrolapiReqUpdateUSBBaseV1WhitelistModeDISABLEVIRTUAL captures enum value "DISABLE_VIRTUAL"
	DevicecontrolapiReqUpdateUSBBaseV1WhitelistModeDISABLEVIRTUAL string = "DISABLE_VIRTUAL"
)

// prop value enum
func (m *DevicecontrolapiReqUpdateUSBBaseV1) validateWhitelistModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, devicecontrolapiReqUpdateUSBBaseV1TypeWhitelistModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DevicecontrolapiReqUpdateUSBBaseV1) validateWhitelistMode(formats strfmt.Registry) error {
	if swag.IsZero(m.WhitelistMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateWhitelistModeEnum("whitelist_mode", "body", m.WhitelistMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this devicecontrolapi req update u s b base v1 based on the context it is used
func (m *DevicecontrolapiReqUpdateUSBBaseV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomNotifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontrolapiReqUpdateUSBBaseV1) contextValidateCustomNotifications(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomNotifications != nil {

		if swag.IsZero(m.CustomNotifications) { // not required
			return nil
		}

		if err := m.CustomNotifications.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom_notifications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom_notifications")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DevicecontrolapiReqUpdateUSBBaseV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevicecontrolapiReqUpdateUSBBaseV1) UnmarshalBinary(b []byte) error {
	var res DevicecontrolapiReqUpdateUSBBaseV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
