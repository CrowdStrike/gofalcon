// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicymanagerPolicyProperties policymanager policy properties
//
// swagger:model policymanager.PolicyProperties
type PolicymanagerPolicyProperties struct {

	// Allow notifications accepts values: 'default', 'custom'
	// Enum: [default custom]
	AllowNotifications string `json:"allow_notifications,omitempty"`

	// Length must be at most 2048 characters
	BeExcludeDomains string `json:"be_exclude_domains,omitempty"`

	// Must be a non-negative integer and max 65536
	BePasteClipboardMaxSize float64 `json:"be_paste_clipboard_max_size,omitempty"`

	// Accepts values: 'Bytes', 'KiB'
	// Enum: [Bytes KiB]
	BePasteClipboardMaxSizeUnit string `json:"be_paste_clipboard_max_size_unit,omitempty"`

	// Must be a non-negative integer and max 65536
	BePasteClipboardMinSize float64 `json:"be_paste_clipboard_min_size,omitempty"`

	// Accepts values: 'Bytes', 'KiB'
	// Enum: [Bytes KiB]
	BePasteClipboardMinSizeUnit string `json:"be_paste_clipboard_min_size_unit,omitempty"`

	// be paste clipboard over size behaviour block
	BePasteClipboardOverSizeBehaviourBlock bool `json:"be_paste_clipboard_over_size_behaviour_block,omitempty"`

	// Must be a non-negative integer, between 1 and 10000
	BePasteTimeoutDurationMilliseconds int32 `json:"be_paste_timeout_duration_milliseconds,omitempty"`

	// Accepts values: 'block', 'allow'
	// Enum: [block allow]
	BePasteTimeoutResponse string `json:"be_paste_timeout_response,omitempty"`

	// Length must be at most 256, must follow pattern '^([^
	// ]*
	// ){0,3}[^
	// ]*$'
	BeSplashCustomMessage string `json:"be_splash_custom_message,omitempty"`

	// be splash enabled
	BeSplashEnabled bool `json:"be_splash_enabled,omitempty"`

	// Accepts values: 'default', 'custom'
	// Enum: [default custom]
	BeSplashMessageSource string `json:"be_splash_message_source,omitempty"`

	// Must be a non-negative integer, must be between 1 and 300
	BeUploadTimeoutDurationSeconds int32 `json:"be_upload_timeout_duration_seconds,omitempty"`

	// Accepts values: 'block', 'allow'
	// Enum: [block allow]
	BeUploadTimeoutResponse string `json:"be_upload_timeout_response,omitempty"`

	// block all data access
	BlockAllDataAccess bool `json:"block_all_data_access,omitempty"`

	// Block notifications accepts values: 'default', 'custom'
	// Enum: [default custom]
	BlockNotifications string `json:"block_notifications,omitempty"`

	// Browsers without active extension accepts values: 'allow', 'block_policy'
	// Enum: [allow block_policy]
	BrowsersWithoutActiveExtension string `json:"browsers_without_active_extension,omitempty"`

	// classifications
	// Required: true
	Classifications *PolicymanagerObjectList `json:"classifications"`

	// Windows only. Length must be at least 2 and at max 256, must follow pattern '^([^
	// ]*
	// ){0,3}[^
	// ]*$'
	CustomAllowNotification string `json:"custom_allow_notification,omitempty"`

	// Windows only. Length must be at least 2 and at max 256, must follow pattern '^([^
	// ]*
	// ){0,3}[^
	// ]*$'
	CustomBlockNotification string `json:"custom_block_notification,omitempty"`

	// enable clipboard inspection
	EnableClipboardInspection bool `json:"enable_clipboard_inspection,omitempty"`

	// enable content inspection
	// Required: true
	EnableContentInspection *bool `json:"enable_content_inspection"`

	// enable context inspection
	EnableContextInspection bool `json:"enable_context_inspection,omitempty"`

	// Windows only.
	EnableEndUserNotificationsUnsupportedBrowser bool `json:"enable_end_user_notifications_unsupported_browser,omitempty"`

	// Windows only.
	EnableNetworkInspection bool `json:"enable_network_inspection,omitempty"`

	// Windows only. Length must be at least 0 and at max 150000, must be a valid png base64 image, which matches this regular expression '^data:image\/png(?:;charset=utf-8)?;base64,(?:[A-Za-z0-9]|[+\/])+={0,2}'
	EujDialogBoxLogo string `json:"euj_dialog_box_logo,omitempty"`

	// Windows only. Must be a positive integer
	EujDialogTimeout int32 `json:"euj_dialog_timeout,omitempty"`

	// Windows only. Must have at least 2 and at max 4 options. The first two options have to be 'Business purposes' and 'Personal use' in that order
	EujDropdownOptions *PolicymanagerEUJDropdownOptions `json:"euj_dropdown_options,omitempty"`

	// Windows only. Must have 2 options. The first option has to be 'The action you are trying to perform is blocked by your organization's data protection policy. Provide a justification to proceed'
	EujHeaderText *PolicymanagerEUJHeaderText `json:"euj_header_text,omitempty"`

	// Windows only.
	EujRequireAdditionalDetails bool `json:"euj_require_additional_details,omitempty"`

	// Windows only. Must be a non-negative integer
	EujResponseCacheTimeout int32 `json:"euj_response_cache_timeout,omitempty"`

	// Windows only.
	EvidenceDownloadEnabled bool `json:"evidence_download_enabled,omitempty"`

	// Windows only.
	EvidenceDuplicationEnabledDefault bool `json:"evidence_duplication_enabled_default,omitempty"`

	// Windows only.
	EvidenceEncryptedEnabled bool `json:"evidence_encrypted_enabled,omitempty"`

	// Windows only. Must be between 1 and 90
	EvidenceStorageFreeDiskPerc float64 `json:"evidence_storage_free_disk_perc,omitempty"`

	// Windows only. Must be between 1 and 100
	EvidenceStorageMaxSize float64 `json:"evidence_storage_max_size,omitempty"`

	// Inspection depth accepts values : 'balanced', 'high_performance', 'deep_scan'
	// Enum: [balanced high_performance deep_scan]
	InspectionDepth string `json:"inspection_depth,omitempty"`

	// Must be between 512 and 524288000 bytes
	MaxFileSizeToInspect float64 `json:"max_file_size_to_inspect,omitempty"`

	// Must be either 'Bytes, KB or MB'
	// Enum: [Bytes KB MB]
	MaxFileSizeToInspectUnit string `json:"max_file_size_to_inspect_unit,omitempty"`

	// Confidence level accepts values: 'low', 'medium', 'high'
	// Enum: [low medium high]
	MinConfidenceLevel string `json:"min_confidence_level,omitempty"`

	// Windows only. Network inspection files exceeding size limit accepts values: 'block', 'allow'
	// Enum: [block allow]
	NetworkInspectionFilesExceedingSizeLimit string `json:"network_inspection_files_exceeding_size_limit,omitempty"`

	// similarity detection
	SimilarityDetection bool `json:"similarity_detection,omitempty"`

	// Similarity threshold percentage values from 10 to 100
	// Enum: [10 20 30 40 50 60 70 80 90 100]
	SimilarityThreshold string `json:"similarity_threshold,omitempty"`

	// Windows only. Unsupported browsers action accepts values: 'allow', 'block_policy', 'block'
	// Enum: [allow block_policy block]
	UnsupportedBrowsersAction string `json:"unsupported_browsers_action,omitempty"`
}

// Validate validates this policymanager policy properties
func (m *PolicymanagerPolicyProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowNotifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBePasteClipboardMaxSizeUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBePasteClipboardMinSizeUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBePasteTimeoutResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBeSplashMessageSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBeUploadTimeoutResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockNotifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBrowsersWithoutActiveExtension(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClassifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableContentInspection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEujDropdownOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEujHeaderText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInspectionDepth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxFileSizeToInspectUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinConfidenceLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkInspectionFilesExceedingSizeLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSimilarityThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnsupportedBrowsersAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var policymanagerPolicyPropertiesTypeAllowNotificationsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["default","custom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policymanagerPolicyPropertiesTypeAllowNotificationsPropEnum = append(policymanagerPolicyPropertiesTypeAllowNotificationsPropEnum, v)
	}
}

const (

	// PolicymanagerPolicyPropertiesAllowNotificationsDefault captures enum value "default"
	PolicymanagerPolicyPropertiesAllowNotificationsDefault string = "default"

	// PolicymanagerPolicyPropertiesAllowNotificationsCustom captures enum value "custom"
	PolicymanagerPolicyPropertiesAllowNotificationsCustom string = "custom"
)

// prop value enum
func (m *PolicymanagerPolicyProperties) validateAllowNotificationsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policymanagerPolicyPropertiesTypeAllowNotificationsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicymanagerPolicyProperties) validateAllowNotifications(formats strfmt.Registry) error {
	if swag.IsZero(m.AllowNotifications) { // not required
		return nil
	}

	// value enum
	if err := m.validateAllowNotificationsEnum("allow_notifications", "body", m.AllowNotifications); err != nil {
		return err
	}

	return nil
}

var policymanagerPolicyPropertiesTypeBePasteClipboardMaxSizeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Bytes","KiB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policymanagerPolicyPropertiesTypeBePasteClipboardMaxSizeUnitPropEnum = append(policymanagerPolicyPropertiesTypeBePasteClipboardMaxSizeUnitPropEnum, v)
	}
}

const (

	// PolicymanagerPolicyPropertiesBePasteClipboardMaxSizeUnitBytes captures enum value "Bytes"
	PolicymanagerPolicyPropertiesBePasteClipboardMaxSizeUnitBytes string = "Bytes"

	// PolicymanagerPolicyPropertiesBePasteClipboardMaxSizeUnitKiB captures enum value "KiB"
	PolicymanagerPolicyPropertiesBePasteClipboardMaxSizeUnitKiB string = "KiB"
)

// prop value enum
func (m *PolicymanagerPolicyProperties) validateBePasteClipboardMaxSizeUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policymanagerPolicyPropertiesTypeBePasteClipboardMaxSizeUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicymanagerPolicyProperties) validateBePasteClipboardMaxSizeUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.BePasteClipboardMaxSizeUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateBePasteClipboardMaxSizeUnitEnum("be_paste_clipboard_max_size_unit", "body", m.BePasteClipboardMaxSizeUnit); err != nil {
		return err
	}

	return nil
}

var policymanagerPolicyPropertiesTypeBePasteClipboardMinSizeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Bytes","KiB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policymanagerPolicyPropertiesTypeBePasteClipboardMinSizeUnitPropEnum = append(policymanagerPolicyPropertiesTypeBePasteClipboardMinSizeUnitPropEnum, v)
	}
}

const (

	// PolicymanagerPolicyPropertiesBePasteClipboardMinSizeUnitBytes captures enum value "Bytes"
	PolicymanagerPolicyPropertiesBePasteClipboardMinSizeUnitBytes string = "Bytes"

	// PolicymanagerPolicyPropertiesBePasteClipboardMinSizeUnitKiB captures enum value "KiB"
	PolicymanagerPolicyPropertiesBePasteClipboardMinSizeUnitKiB string = "KiB"
)

// prop value enum
func (m *PolicymanagerPolicyProperties) validateBePasteClipboardMinSizeUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policymanagerPolicyPropertiesTypeBePasteClipboardMinSizeUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicymanagerPolicyProperties) validateBePasteClipboardMinSizeUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.BePasteClipboardMinSizeUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateBePasteClipboardMinSizeUnitEnum("be_paste_clipboard_min_size_unit", "body", m.BePasteClipboardMinSizeUnit); err != nil {
		return err
	}

	return nil
}

var policymanagerPolicyPropertiesTypeBePasteTimeoutResponsePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["block","allow"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policymanagerPolicyPropertiesTypeBePasteTimeoutResponsePropEnum = append(policymanagerPolicyPropertiesTypeBePasteTimeoutResponsePropEnum, v)
	}
}

const (

	// PolicymanagerPolicyPropertiesBePasteTimeoutResponseBlock captures enum value "block"
	PolicymanagerPolicyPropertiesBePasteTimeoutResponseBlock string = "block"

	// PolicymanagerPolicyPropertiesBePasteTimeoutResponseAllow captures enum value "allow"
	PolicymanagerPolicyPropertiesBePasteTimeoutResponseAllow string = "allow"
)

// prop value enum
func (m *PolicymanagerPolicyProperties) validateBePasteTimeoutResponseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policymanagerPolicyPropertiesTypeBePasteTimeoutResponsePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicymanagerPolicyProperties) validateBePasteTimeoutResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.BePasteTimeoutResponse) { // not required
		return nil
	}

	// value enum
	if err := m.validateBePasteTimeoutResponseEnum("be_paste_timeout_response", "body", m.BePasteTimeoutResponse); err != nil {
		return err
	}

	return nil
}

var policymanagerPolicyPropertiesTypeBeSplashMessageSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["default","custom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policymanagerPolicyPropertiesTypeBeSplashMessageSourcePropEnum = append(policymanagerPolicyPropertiesTypeBeSplashMessageSourcePropEnum, v)
	}
}

const (

	// PolicymanagerPolicyPropertiesBeSplashMessageSourceDefault captures enum value "default"
	PolicymanagerPolicyPropertiesBeSplashMessageSourceDefault string = "default"

	// PolicymanagerPolicyPropertiesBeSplashMessageSourceCustom captures enum value "custom"
	PolicymanagerPolicyPropertiesBeSplashMessageSourceCustom string = "custom"
)

// prop value enum
func (m *PolicymanagerPolicyProperties) validateBeSplashMessageSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policymanagerPolicyPropertiesTypeBeSplashMessageSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicymanagerPolicyProperties) validateBeSplashMessageSource(formats strfmt.Registry) error {
	if swag.IsZero(m.BeSplashMessageSource) { // not required
		return nil
	}

	// value enum
	if err := m.validateBeSplashMessageSourceEnum("be_splash_message_source", "body", m.BeSplashMessageSource); err != nil {
		return err
	}

	return nil
}

var policymanagerPolicyPropertiesTypeBeUploadTimeoutResponsePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["block","allow"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policymanagerPolicyPropertiesTypeBeUploadTimeoutResponsePropEnum = append(policymanagerPolicyPropertiesTypeBeUploadTimeoutResponsePropEnum, v)
	}
}

const (

	// PolicymanagerPolicyPropertiesBeUploadTimeoutResponseBlock captures enum value "block"
	PolicymanagerPolicyPropertiesBeUploadTimeoutResponseBlock string = "block"

	// PolicymanagerPolicyPropertiesBeUploadTimeoutResponseAllow captures enum value "allow"
	PolicymanagerPolicyPropertiesBeUploadTimeoutResponseAllow string = "allow"
)

// prop value enum
func (m *PolicymanagerPolicyProperties) validateBeUploadTimeoutResponseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policymanagerPolicyPropertiesTypeBeUploadTimeoutResponsePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicymanagerPolicyProperties) validateBeUploadTimeoutResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.BeUploadTimeoutResponse) { // not required
		return nil
	}

	// value enum
	if err := m.validateBeUploadTimeoutResponseEnum("be_upload_timeout_response", "body", m.BeUploadTimeoutResponse); err != nil {
		return err
	}

	return nil
}

var policymanagerPolicyPropertiesTypeBlockNotificationsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["default","custom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policymanagerPolicyPropertiesTypeBlockNotificationsPropEnum = append(policymanagerPolicyPropertiesTypeBlockNotificationsPropEnum, v)
	}
}

const (

	// PolicymanagerPolicyPropertiesBlockNotificationsDefault captures enum value "default"
	PolicymanagerPolicyPropertiesBlockNotificationsDefault string = "default"

	// PolicymanagerPolicyPropertiesBlockNotificationsCustom captures enum value "custom"
	PolicymanagerPolicyPropertiesBlockNotificationsCustom string = "custom"
)

// prop value enum
func (m *PolicymanagerPolicyProperties) validateBlockNotificationsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policymanagerPolicyPropertiesTypeBlockNotificationsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicymanagerPolicyProperties) validateBlockNotifications(formats strfmt.Registry) error {
	if swag.IsZero(m.BlockNotifications) { // not required
		return nil
	}

	// value enum
	if err := m.validateBlockNotificationsEnum("block_notifications", "body", m.BlockNotifications); err != nil {
		return err
	}

	return nil
}

var policymanagerPolicyPropertiesTypeBrowsersWithoutActiveExtensionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","block_policy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policymanagerPolicyPropertiesTypeBrowsersWithoutActiveExtensionPropEnum = append(policymanagerPolicyPropertiesTypeBrowsersWithoutActiveExtensionPropEnum, v)
	}
}

const (

	// PolicymanagerPolicyPropertiesBrowsersWithoutActiveExtensionAllow captures enum value "allow"
	PolicymanagerPolicyPropertiesBrowsersWithoutActiveExtensionAllow string = "allow"

	// PolicymanagerPolicyPropertiesBrowsersWithoutActiveExtensionBlockPolicy captures enum value "block_policy"
	PolicymanagerPolicyPropertiesBrowsersWithoutActiveExtensionBlockPolicy string = "block_policy"
)

// prop value enum
func (m *PolicymanagerPolicyProperties) validateBrowsersWithoutActiveExtensionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policymanagerPolicyPropertiesTypeBrowsersWithoutActiveExtensionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicymanagerPolicyProperties) validateBrowsersWithoutActiveExtension(formats strfmt.Registry) error {
	if swag.IsZero(m.BrowsersWithoutActiveExtension) { // not required
		return nil
	}

	// value enum
	if err := m.validateBrowsersWithoutActiveExtensionEnum("browsers_without_active_extension", "body", m.BrowsersWithoutActiveExtension); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerPolicyProperties) validateClassifications(formats strfmt.Registry) error {

	if err := validate.Required("classifications", "body", m.Classifications); err != nil {
		return err
	}

	if m.Classifications != nil {
		if err := m.Classifications.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classifications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("classifications")
			}
			return err
		}
	}

	return nil
}

func (m *PolicymanagerPolicyProperties) validateEnableContentInspection(formats strfmt.Registry) error {

	if err := validate.Required("enable_content_inspection", "body", m.EnableContentInspection); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerPolicyProperties) validateEujDropdownOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.EujDropdownOptions) { // not required
		return nil
	}

	if m.EujDropdownOptions != nil {
		if err := m.EujDropdownOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("euj_dropdown_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("euj_dropdown_options")
			}
			return err
		}
	}

	return nil
}

func (m *PolicymanagerPolicyProperties) validateEujHeaderText(formats strfmt.Registry) error {
	if swag.IsZero(m.EujHeaderText) { // not required
		return nil
	}

	if m.EujHeaderText != nil {
		if err := m.EujHeaderText.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("euj_header_text")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("euj_header_text")
			}
			return err
		}
	}

	return nil
}

var policymanagerPolicyPropertiesTypeInspectionDepthPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["balanced","high_performance","deep_scan"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policymanagerPolicyPropertiesTypeInspectionDepthPropEnum = append(policymanagerPolicyPropertiesTypeInspectionDepthPropEnum, v)
	}
}

const (

	// PolicymanagerPolicyPropertiesInspectionDepthBalanced captures enum value "balanced"
	PolicymanagerPolicyPropertiesInspectionDepthBalanced string = "balanced"

	// PolicymanagerPolicyPropertiesInspectionDepthHighPerformance captures enum value "high_performance"
	PolicymanagerPolicyPropertiesInspectionDepthHighPerformance string = "high_performance"

	// PolicymanagerPolicyPropertiesInspectionDepthDeepScan captures enum value "deep_scan"
	PolicymanagerPolicyPropertiesInspectionDepthDeepScan string = "deep_scan"
)

// prop value enum
func (m *PolicymanagerPolicyProperties) validateInspectionDepthEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policymanagerPolicyPropertiesTypeInspectionDepthPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicymanagerPolicyProperties) validateInspectionDepth(formats strfmt.Registry) error {
	if swag.IsZero(m.InspectionDepth) { // not required
		return nil
	}

	// value enum
	if err := m.validateInspectionDepthEnum("inspection_depth", "body", m.InspectionDepth); err != nil {
		return err
	}

	return nil
}

var policymanagerPolicyPropertiesTypeMaxFileSizeToInspectUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Bytes","KB","MB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policymanagerPolicyPropertiesTypeMaxFileSizeToInspectUnitPropEnum = append(policymanagerPolicyPropertiesTypeMaxFileSizeToInspectUnitPropEnum, v)
	}
}

const (

	// PolicymanagerPolicyPropertiesMaxFileSizeToInspectUnitBytes captures enum value "Bytes"
	PolicymanagerPolicyPropertiesMaxFileSizeToInspectUnitBytes string = "Bytes"

	// PolicymanagerPolicyPropertiesMaxFileSizeToInspectUnitKB captures enum value "KB"
	PolicymanagerPolicyPropertiesMaxFileSizeToInspectUnitKB string = "KB"

	// PolicymanagerPolicyPropertiesMaxFileSizeToInspectUnitMB captures enum value "MB"
	PolicymanagerPolicyPropertiesMaxFileSizeToInspectUnitMB string = "MB"
)

// prop value enum
func (m *PolicymanagerPolicyProperties) validateMaxFileSizeToInspectUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policymanagerPolicyPropertiesTypeMaxFileSizeToInspectUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicymanagerPolicyProperties) validateMaxFileSizeToInspectUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxFileSizeToInspectUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateMaxFileSizeToInspectUnitEnum("max_file_size_to_inspect_unit", "body", m.MaxFileSizeToInspectUnit); err != nil {
		return err
	}

	return nil
}

var policymanagerPolicyPropertiesTypeMinConfidenceLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["low","medium","high"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policymanagerPolicyPropertiesTypeMinConfidenceLevelPropEnum = append(policymanagerPolicyPropertiesTypeMinConfidenceLevelPropEnum, v)
	}
}

const (

	// PolicymanagerPolicyPropertiesMinConfidenceLevelLow captures enum value "low"
	PolicymanagerPolicyPropertiesMinConfidenceLevelLow string = "low"

	// PolicymanagerPolicyPropertiesMinConfidenceLevelMedium captures enum value "medium"
	PolicymanagerPolicyPropertiesMinConfidenceLevelMedium string = "medium"

	// PolicymanagerPolicyPropertiesMinConfidenceLevelHigh captures enum value "high"
	PolicymanagerPolicyPropertiesMinConfidenceLevelHigh string = "high"
)

// prop value enum
func (m *PolicymanagerPolicyProperties) validateMinConfidenceLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policymanagerPolicyPropertiesTypeMinConfidenceLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicymanagerPolicyProperties) validateMinConfidenceLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.MinConfidenceLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateMinConfidenceLevelEnum("min_confidence_level", "body", m.MinConfidenceLevel); err != nil {
		return err
	}

	return nil
}

var policymanagerPolicyPropertiesTypeNetworkInspectionFilesExceedingSizeLimitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["block","allow"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policymanagerPolicyPropertiesTypeNetworkInspectionFilesExceedingSizeLimitPropEnum = append(policymanagerPolicyPropertiesTypeNetworkInspectionFilesExceedingSizeLimitPropEnum, v)
	}
}

const (

	// PolicymanagerPolicyPropertiesNetworkInspectionFilesExceedingSizeLimitBlock captures enum value "block"
	PolicymanagerPolicyPropertiesNetworkInspectionFilesExceedingSizeLimitBlock string = "block"

	// PolicymanagerPolicyPropertiesNetworkInspectionFilesExceedingSizeLimitAllow captures enum value "allow"
	PolicymanagerPolicyPropertiesNetworkInspectionFilesExceedingSizeLimitAllow string = "allow"
)

// prop value enum
func (m *PolicymanagerPolicyProperties) validateNetworkInspectionFilesExceedingSizeLimitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policymanagerPolicyPropertiesTypeNetworkInspectionFilesExceedingSizeLimitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicymanagerPolicyProperties) validateNetworkInspectionFilesExceedingSizeLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkInspectionFilesExceedingSizeLimit) { // not required
		return nil
	}

	// value enum
	if err := m.validateNetworkInspectionFilesExceedingSizeLimitEnum("network_inspection_files_exceeding_size_limit", "body", m.NetworkInspectionFilesExceedingSizeLimit); err != nil {
		return err
	}

	return nil
}

var policymanagerPolicyPropertiesTypeSimilarityThresholdPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["10","20","30","40","50","60","70","80","90","100"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policymanagerPolicyPropertiesTypeSimilarityThresholdPropEnum = append(policymanagerPolicyPropertiesTypeSimilarityThresholdPropEnum, v)
	}
}

const (

	// PolicymanagerPolicyPropertiesSimilarityThresholdNr10 captures enum value "10"
	PolicymanagerPolicyPropertiesSimilarityThresholdNr10 string = "10"

	// PolicymanagerPolicyPropertiesSimilarityThresholdNr20 captures enum value "20"
	PolicymanagerPolicyPropertiesSimilarityThresholdNr20 string = "20"

	// PolicymanagerPolicyPropertiesSimilarityThresholdNr30 captures enum value "30"
	PolicymanagerPolicyPropertiesSimilarityThresholdNr30 string = "30"

	// PolicymanagerPolicyPropertiesSimilarityThresholdNr40 captures enum value "40"
	PolicymanagerPolicyPropertiesSimilarityThresholdNr40 string = "40"

	// PolicymanagerPolicyPropertiesSimilarityThresholdNr50 captures enum value "50"
	PolicymanagerPolicyPropertiesSimilarityThresholdNr50 string = "50"

	// PolicymanagerPolicyPropertiesSimilarityThresholdNr60 captures enum value "60"
	PolicymanagerPolicyPropertiesSimilarityThresholdNr60 string = "60"

	// PolicymanagerPolicyPropertiesSimilarityThresholdNr70 captures enum value "70"
	PolicymanagerPolicyPropertiesSimilarityThresholdNr70 string = "70"

	// PolicymanagerPolicyPropertiesSimilarityThresholdNr80 captures enum value "80"
	PolicymanagerPolicyPropertiesSimilarityThresholdNr80 string = "80"

	// PolicymanagerPolicyPropertiesSimilarityThresholdNr90 captures enum value "90"
	PolicymanagerPolicyPropertiesSimilarityThresholdNr90 string = "90"

	// PolicymanagerPolicyPropertiesSimilarityThresholdNr100 captures enum value "100"
	PolicymanagerPolicyPropertiesSimilarityThresholdNr100 string = "100"
)

// prop value enum
func (m *PolicymanagerPolicyProperties) validateSimilarityThresholdEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policymanagerPolicyPropertiesTypeSimilarityThresholdPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicymanagerPolicyProperties) validateSimilarityThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.SimilarityThreshold) { // not required
		return nil
	}

	// value enum
	if err := m.validateSimilarityThresholdEnum("similarity_threshold", "body", m.SimilarityThreshold); err != nil {
		return err
	}

	return nil
}

var policymanagerPolicyPropertiesTypeUnsupportedBrowsersActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","block_policy","block"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policymanagerPolicyPropertiesTypeUnsupportedBrowsersActionPropEnum = append(policymanagerPolicyPropertiesTypeUnsupportedBrowsersActionPropEnum, v)
	}
}

const (

	// PolicymanagerPolicyPropertiesUnsupportedBrowsersActionAllow captures enum value "allow"
	PolicymanagerPolicyPropertiesUnsupportedBrowsersActionAllow string = "allow"

	// PolicymanagerPolicyPropertiesUnsupportedBrowsersActionBlockPolicy captures enum value "block_policy"
	PolicymanagerPolicyPropertiesUnsupportedBrowsersActionBlockPolicy string = "block_policy"

	// PolicymanagerPolicyPropertiesUnsupportedBrowsersActionBlock captures enum value "block"
	PolicymanagerPolicyPropertiesUnsupportedBrowsersActionBlock string = "block"
)

// prop value enum
func (m *PolicymanagerPolicyProperties) validateUnsupportedBrowsersActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policymanagerPolicyPropertiesTypeUnsupportedBrowsersActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicymanagerPolicyProperties) validateUnsupportedBrowsersAction(formats strfmt.Registry) error {
	if swag.IsZero(m.UnsupportedBrowsersAction) { // not required
		return nil
	}

	// value enum
	if err := m.validateUnsupportedBrowsersActionEnum("unsupported_browsers_action", "body", m.UnsupportedBrowsersAction); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this policymanager policy properties based on the context it is used
func (m *PolicymanagerPolicyProperties) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClassifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEujDropdownOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEujHeaderText(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicymanagerPolicyProperties) contextValidateClassifications(ctx context.Context, formats strfmt.Registry) error {

	if m.Classifications != nil {

		if err := m.Classifications.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classifications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("classifications")
			}
			return err
		}
	}

	return nil
}

func (m *PolicymanagerPolicyProperties) contextValidateEujDropdownOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.EujDropdownOptions != nil {

		if swag.IsZero(m.EujDropdownOptions) { // not required
			return nil
		}

		if err := m.EujDropdownOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("euj_dropdown_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("euj_dropdown_options")
			}
			return err
		}
	}

	return nil
}

func (m *PolicymanagerPolicyProperties) contextValidateEujHeaderText(ctx context.Context, formats strfmt.Registry) error {

	if m.EujHeaderText != nil {

		if swag.IsZero(m.EujHeaderText) { // not required
			return nil
		}

		if err := m.EujHeaderText.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("euj_header_text")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("euj_header_text")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicymanagerPolicyProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicymanagerPolicyProperties) UnmarshalBinary(b []byte) error {
	var res PolicymanagerPolicyProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
