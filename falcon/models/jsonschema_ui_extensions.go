// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// JsonschemaUIExtensions jsonschema UI extensions
//
// swagger:model jsonschema.UIExtensions
type JsonschemaUIExtensions struct {

	// supported file extensions for file upload, eg. '.yaml', '.json'
	Accept []string `json:"accept"`

	// component
	Component string `json:"component,omitempty"`

	// custom group name
	CustomGroupName string `json:"customGroupName,omitempty"`

	// duration options
	DurationOptions []*JsonschemaDurationOption `json:"durationOptions"`

	// supported encoding for file upload, eg. 'base64'
	Encoding string `json:"encoding,omitempty"`

	// helper text
	HelperText string `json:"helperText,omitempty"`

	// generate a hidden card during mobiledoc generation
	Hide bool `json:"hide,omitempty"`

	// local reference to look up the dynamic json schema and mobiledoc card configuration returned in the top-level of api response
	SchemaReference string `json:"schema_reference,omitempty"`

	// skip generating a card during mobiledoc generation
	Skip bool `json:"skip,omitempty"`

	// decimal step to increment float values
	Step float64 `json:"step,omitempty"`
}

// Validate validates this jsonschema UI extensions
func (m *JsonschemaUIExtensions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDurationOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JsonschemaUIExtensions) validateDurationOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.DurationOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.DurationOptions); i++ {
		if swag.IsZero(m.DurationOptions[i]) { // not required
			continue
		}

		if m.DurationOptions[i] != nil {
			if err := m.DurationOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("durationOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("durationOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this jsonschema UI extensions based on the context it is used
func (m *JsonschemaUIExtensions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDurationOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JsonschemaUIExtensions) contextValidateDurationOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DurationOptions); i++ {

		if m.DurationOptions[i] != nil {

			if swag.IsZero(m.DurationOptions[i]) { // not required
				return nil
			}

			if err := m.DurationOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("durationOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("durationOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *JsonschemaUIExtensions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JsonschemaUIExtensions) UnmarshalBinary(b []byte) error {
	var res JsonschemaUIExtensions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
