// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FalconforitapiJobStatus falconforitapi job status
//
// swagger:model falconforitapi.JobStatus
type FalconforitapiJobStatus struct {

	// canceled host count
	// Required: true
	CanceledHostCount *int32 `json:"canceled_host_count"`

	// completion percentage
	// Required: true
	CompletionPercentage *float64 `json:"completion_percentage"`

	// distribution interval
	DistributionInterval string `json:"distribution_interval,omitempty"`

	// end time
	// Required: true
	// Format: date-time
	EndTime *strfmt.DateTime `json:"end_time"`

	// expired host count
	// Required: true
	ExpiredHostCount *int32 `json:"expired_host_count"`

	// failed host count
	// Required: true
	FailedHostCount *int32 `json:"failed_host_count"`

	// id
	// Required: true
	ID *string `json:"id"`

	// initiated host count
	// Required: true
	InitiatedHostCount *int32 `json:"initiated_host_count"`

	// offline host count
	// Required: true
	OfflineHostCount *int32 `json:"offline_host_count"`

	// queued host count
	// Required: true
	QueuedHostCount *int32 `json:"queued_host_count"`

	// running host count
	// Required: true
	RunningHostCount *int32 `json:"running_host_count"`

	// start time
	// Required: true
	// Format: date-time
	StartTime *strfmt.DateTime `json:"start_time"`

	// status
	// Required: true
	Status *string `json:"status"`

	// total host count
	// Required: true
	TotalHostCount *int32 `json:"total_host_count"`

	// total results
	TotalResults int64 `json:"total_results,omitempty"`

	// total success
	// Required: true
	TotalSuccess *int32 `json:"total_success"`

	// wait time
	WaitTime string `json:"wait_time,omitempty"`
}

// Validate validates this falconforitapi job status
func (m *FalconforitapiJobStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCanceledHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompletionPercentage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiredHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiatedHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfflineHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueuedHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalSuccess(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiJobStatus) validateCanceledHostCount(formats strfmt.Registry) error {

	if err := validate.Required("canceled_host_count", "body", m.CanceledHostCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJobStatus) validateCompletionPercentage(formats strfmt.Registry) error {

	if err := validate.Required("completion_percentage", "body", m.CompletionPercentage); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJobStatus) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("end_time", "body", m.EndTime); err != nil {
		return err
	}

	if err := validate.FormatOf("end_time", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJobStatus) validateExpiredHostCount(formats strfmt.Registry) error {

	if err := validate.Required("expired_host_count", "body", m.ExpiredHostCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJobStatus) validateFailedHostCount(formats strfmt.Registry) error {

	if err := validate.Required("failed_host_count", "body", m.FailedHostCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJobStatus) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJobStatus) validateInitiatedHostCount(formats strfmt.Registry) error {

	if err := validate.Required("initiated_host_count", "body", m.InitiatedHostCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJobStatus) validateOfflineHostCount(formats strfmt.Registry) error {

	if err := validate.Required("offline_host_count", "body", m.OfflineHostCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJobStatus) validateQueuedHostCount(formats strfmt.Registry) error {

	if err := validate.Required("queued_host_count", "body", m.QueuedHostCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJobStatus) validateRunningHostCount(formats strfmt.Registry) error {

	if err := validate.Required("running_host_count", "body", m.RunningHostCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJobStatus) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("start_time", "body", m.StartTime); err != nil {
		return err
	}

	if err := validate.FormatOf("start_time", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJobStatus) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJobStatus) validateTotalHostCount(formats strfmt.Registry) error {

	if err := validate.Required("total_host_count", "body", m.TotalHostCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJobStatus) validateTotalSuccess(formats strfmt.Registry) error {

	if err := validate.Required("total_success", "body", m.TotalSuccess); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this falconforitapi job status based on context it is used
func (m *FalconforitapiJobStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FalconforitapiJobStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FalconforitapiJobStatus) UnmarshalBinary(b []byte) error {
	var res FalconforitapiJobStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
