// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicymanagerExternalClassificationProperties policymanager external classification properties
//
// swagger:model policymanager.ExternalClassificationProperties
type PolicymanagerExternalClassificationProperties struct {

	// content patterns
	ContentPatterns []string `json:"content_patterns"`

	// evidence duplication enabled
	EvidenceDuplicationEnabled bool `json:"evidence_duplication_enabled,omitempty"`

	// file types
	FileTypes []string `json:"file_types"`

	// Protection mode accepts values: 'monitor', 'simulate', 'enforce'
	// Enum: [monitor simulate enforce]
	ProtectionMode string `json:"protection_mode,omitempty"`

	// rules
	Rules []*PolicymanagerExternalRule `json:"rules"`

	// sensitivity labels
	SensitivityLabels []string `json:"sensitivity_labels"`

	// web sources
	WebSources []string `json:"web_sources"`
}

// Validate validates this policymanager external classification properties
func (m *PolicymanagerExternalClassificationProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtectionMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var policymanagerExternalClassificationPropertiesTypeProtectionModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["monitor","simulate","enforce"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policymanagerExternalClassificationPropertiesTypeProtectionModePropEnum = append(policymanagerExternalClassificationPropertiesTypeProtectionModePropEnum, v)
	}
}

const (

	// PolicymanagerExternalClassificationPropertiesProtectionModeMonitor captures enum value "monitor"
	PolicymanagerExternalClassificationPropertiesProtectionModeMonitor string = "monitor"

	// PolicymanagerExternalClassificationPropertiesProtectionModeSimulate captures enum value "simulate"
	PolicymanagerExternalClassificationPropertiesProtectionModeSimulate string = "simulate"

	// PolicymanagerExternalClassificationPropertiesProtectionModeEnforce captures enum value "enforce"
	PolicymanagerExternalClassificationPropertiesProtectionModeEnforce string = "enforce"
)

// prop value enum
func (m *PolicymanagerExternalClassificationProperties) validateProtectionModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policymanagerExternalClassificationPropertiesTypeProtectionModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicymanagerExternalClassificationProperties) validateProtectionMode(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectionMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtectionModeEnum("protection_mode", "body", m.ProtectionMode); err != nil {
		return err
	}

	return nil
}

func (m *PolicymanagerExternalClassificationProperties) validateRules(formats strfmt.Registry) error {
	if swag.IsZero(m.Rules) { // not required
		return nil
	}

	for i := 0; i < len(m.Rules); i++ {
		if swag.IsZero(m.Rules[i]) { // not required
			continue
		}

		if m.Rules[i] != nil {
			if err := m.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this policymanager external classification properties based on the context it is used
func (m *PolicymanagerExternalClassificationProperties) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicymanagerExternalClassificationProperties) contextValidateRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rules); i++ {

		if m.Rules[i] != nil {

			if swag.IsZero(m.Rules[i]) { // not required
				return nil
			}

			if err := m.Rules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicymanagerExternalClassificationProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicymanagerExternalClassificationProperties) UnmarshalBinary(b []byte) error {
	var res PolicymanagerExternalClassificationProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
