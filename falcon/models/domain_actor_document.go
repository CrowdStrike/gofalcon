// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainActorDocument domain actor document
//
// swagger:model domain.ActorDocument
type DomainActorDocument struct {

	// active
	// Required: true
	Active *bool `json:"active"`

	// actor type
	ActorType string `json:"actor_type,omitempty"`

	// capability
	Capability *DomainEntity `json:"capability,omitempty"`

	// created date
	// Required: true
	CreatedDate *int64 `json:"created_date"`

	// description
	Description string `json:"description,omitempty"`

	// ecrime kill chain
	EcrimeKillChain *DomainECrimeKillChain `json:"ecrime_kill_chain,omitempty"`

	// entitlements
	Entitlements []*DomainEntity `json:"entitlements"`

	// first activity date
	// Required: true
	FirstActivityDate *int64 `json:"first_activity_date"`

	// group
	Group *DomainEntity `json:"group,omitempty"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// image
	Image *DomainImage `json:"image,omitempty"`

	// kill chain
	KillChain *DomainKillChain `json:"kill_chain,omitempty"`

	// known as
	// Required: true
	KnownAs *string `json:"known_as"`

	// last activity date
	// Required: true
	LastActivityDate *int64 `json:"last_activity_date"`

	// last modified date
	// Required: true
	LastModifiedDate *int64 `json:"last_modified_date"`

	// motivations
	// Required: true
	Motivations []*DomainEntity `json:"motivations"`

	// name
	// Required: true
	Name *string `json:"name"`

	// notify users
	// Required: true
	NotifyUsers *bool `json:"notify_users"`

	// origins
	// Required: true
	Origins []*DomainEntity `json:"origins"`

	// region
	Region *DomainEntity `json:"region,omitempty"`

	// rich text description
	RichTextDescription string `json:"rich_text_description,omitempty"`

	// short description
	// Required: true
	ShortDescription *string `json:"short_description"`

	// slug
	// Required: true
	Slug *string `json:"slug"`

	// target countries
	// Required: true
	TargetCountries []*DomainEntity `json:"target_countries"`

	// target industries
	// Required: true
	TargetIndustries []*DomainEntity `json:"target_industries"`

	// thumbnail
	Thumbnail *DomainImage `json:"thumbnail,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this domain actor document
func (m *DomainActorDocument) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEcrimeKillChain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntitlements(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstActivityDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKillChain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKnownAs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastActivityDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMotivations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotifyUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrigins(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShortDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetCountries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetIndustries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThumbnail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainActorDocument) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *DomainActorDocument) validateCapability(formats strfmt.Registry) error {
	if swag.IsZero(m.Capability) { // not required
		return nil
	}

	if m.Capability != nil {
		if err := m.Capability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capability")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("capability")
			}
			return err
		}
	}

	return nil
}

func (m *DomainActorDocument) validateCreatedDate(formats strfmt.Registry) error {

	if err := validate.Required("created_date", "body", m.CreatedDate); err != nil {
		return err
	}

	return nil
}

func (m *DomainActorDocument) validateEcrimeKillChain(formats strfmt.Registry) error {
	if swag.IsZero(m.EcrimeKillChain) { // not required
		return nil
	}

	if m.EcrimeKillChain != nil {
		if err := m.EcrimeKillChain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecrime_kill_chain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecrime_kill_chain")
			}
			return err
		}
	}

	return nil
}

func (m *DomainActorDocument) validateEntitlements(formats strfmt.Registry) error {
	if swag.IsZero(m.Entitlements) { // not required
		return nil
	}

	for i := 0; i < len(m.Entitlements); i++ {
		if swag.IsZero(m.Entitlements[i]) { // not required
			continue
		}

		if m.Entitlements[i] != nil {
			if err := m.Entitlements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entitlements" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("entitlements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainActorDocument) validateFirstActivityDate(formats strfmt.Registry) error {

	if err := validate.Required("first_activity_date", "body", m.FirstActivityDate); err != nil {
		return err
	}

	return nil
}

func (m *DomainActorDocument) validateGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.Group) { // not required
		return nil
	}

	if m.Group != nil {
		if err := m.Group.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("group")
			}
			return err
		}
	}

	return nil
}

func (m *DomainActorDocument) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DomainActorDocument) validateImage(formats strfmt.Registry) error {
	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if m.Image != nil {
		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *DomainActorDocument) validateKillChain(formats strfmt.Registry) error {
	if swag.IsZero(m.KillChain) { // not required
		return nil
	}

	if m.KillChain != nil {
		if err := m.KillChain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kill_chain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kill_chain")
			}
			return err
		}
	}

	return nil
}

func (m *DomainActorDocument) validateKnownAs(formats strfmt.Registry) error {

	if err := validate.Required("known_as", "body", m.KnownAs); err != nil {
		return err
	}

	return nil
}

func (m *DomainActorDocument) validateLastActivityDate(formats strfmt.Registry) error {

	if err := validate.Required("last_activity_date", "body", m.LastActivityDate); err != nil {
		return err
	}

	return nil
}

func (m *DomainActorDocument) validateLastModifiedDate(formats strfmt.Registry) error {

	if err := validate.Required("last_modified_date", "body", m.LastModifiedDate); err != nil {
		return err
	}

	return nil
}

func (m *DomainActorDocument) validateMotivations(formats strfmt.Registry) error {

	if err := validate.Required("motivations", "body", m.Motivations); err != nil {
		return err
	}

	for i := 0; i < len(m.Motivations); i++ {
		if swag.IsZero(m.Motivations[i]) { // not required
			continue
		}

		if m.Motivations[i] != nil {
			if err := m.Motivations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("motivations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("motivations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainActorDocument) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DomainActorDocument) validateNotifyUsers(formats strfmt.Registry) error {

	if err := validate.Required("notify_users", "body", m.NotifyUsers); err != nil {
		return err
	}

	return nil
}

func (m *DomainActorDocument) validateOrigins(formats strfmt.Registry) error {

	if err := validate.Required("origins", "body", m.Origins); err != nil {
		return err
	}

	for i := 0; i < len(m.Origins); i++ {
		if swag.IsZero(m.Origins[i]) { // not required
			continue
		}

		if m.Origins[i] != nil {
			if err := m.Origins[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("origins" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("origins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainActorDocument) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.Region) { // not required
		return nil
	}

	if m.Region != nil {
		if err := m.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *DomainActorDocument) validateShortDescription(formats strfmt.Registry) error {

	if err := validate.Required("short_description", "body", m.ShortDescription); err != nil {
		return err
	}

	return nil
}

func (m *DomainActorDocument) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("slug", "body", m.Slug); err != nil {
		return err
	}

	return nil
}

func (m *DomainActorDocument) validateTargetCountries(formats strfmt.Registry) error {

	if err := validate.Required("target_countries", "body", m.TargetCountries); err != nil {
		return err
	}

	for i := 0; i < len(m.TargetCountries); i++ {
		if swag.IsZero(m.TargetCountries[i]) { // not required
			continue
		}

		if m.TargetCountries[i] != nil {
			if err := m.TargetCountries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("target_countries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("target_countries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainActorDocument) validateTargetIndustries(formats strfmt.Registry) error {

	if err := validate.Required("target_industries", "body", m.TargetIndustries); err != nil {
		return err
	}

	for i := 0; i < len(m.TargetIndustries); i++ {
		if swag.IsZero(m.TargetIndustries[i]) { // not required
			continue
		}

		if m.TargetIndustries[i] != nil {
			if err := m.TargetIndustries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("target_industries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("target_industries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainActorDocument) validateThumbnail(formats strfmt.Registry) error {
	if swag.IsZero(m.Thumbnail) { // not required
		return nil
	}

	if m.Thumbnail != nil {
		if err := m.Thumbnail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("thumbnail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("thumbnail")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this domain actor document based on the context it is used
func (m *DomainActorDocument) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCapability(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEcrimeKillChain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntitlements(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKillChain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMotivations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrigins(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetCountries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetIndustries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThumbnail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainActorDocument) contextValidateCapability(ctx context.Context, formats strfmt.Registry) error {

	if m.Capability != nil {
		if err := m.Capability.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capability")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("capability")
			}
			return err
		}
	}

	return nil
}

func (m *DomainActorDocument) contextValidateEcrimeKillChain(ctx context.Context, formats strfmt.Registry) error {

	if m.EcrimeKillChain != nil {
		if err := m.EcrimeKillChain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecrime_kill_chain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecrime_kill_chain")
			}
			return err
		}
	}

	return nil
}

func (m *DomainActorDocument) contextValidateEntitlements(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Entitlements); i++ {

		if m.Entitlements[i] != nil {
			if err := m.Entitlements[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entitlements" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("entitlements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainActorDocument) contextValidateGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.Group != nil {
		if err := m.Group.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("group")
			}
			return err
		}
	}

	return nil
}

func (m *DomainActorDocument) contextValidateImage(ctx context.Context, formats strfmt.Registry) error {

	if m.Image != nil {
		if err := m.Image.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *DomainActorDocument) contextValidateKillChain(ctx context.Context, formats strfmt.Registry) error {

	if m.KillChain != nil {
		if err := m.KillChain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kill_chain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kill_chain")
			}
			return err
		}
	}

	return nil
}

func (m *DomainActorDocument) contextValidateMotivations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Motivations); i++ {

		if m.Motivations[i] != nil {
			if err := m.Motivations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("motivations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("motivations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainActorDocument) contextValidateOrigins(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Origins); i++ {

		if m.Origins[i] != nil {
			if err := m.Origins[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("origins" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("origins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainActorDocument) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if m.Region != nil {
		if err := m.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *DomainActorDocument) contextValidateTargetCountries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TargetCountries); i++ {

		if m.TargetCountries[i] != nil {
			if err := m.TargetCountries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("target_countries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("target_countries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainActorDocument) contextValidateTargetIndustries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TargetIndustries); i++ {

		if m.TargetIndustries[i] != nil {
			if err := m.TargetIndustries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("target_industries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("target_industries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DomainActorDocument) contextValidateThumbnail(ctx context.Context, formats strfmt.Registry) error {

	if m.Thumbnail != nil {
		if err := m.Thumbnail.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("thumbnail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("thumbnail")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainActorDocument) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainActorDocument) UnmarshalBinary(b []byte) error {
	var res DomainActorDocument
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
