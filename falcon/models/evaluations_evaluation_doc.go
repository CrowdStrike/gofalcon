// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EvaluationsEvaluationDoc evaluations evaluation doc
//
// swagger:model evaluations.EvaluationDoc
type EvaluationsEvaluationDoc struct {

	// attack types
	AttackTypes []string `json:"attack_types"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// crn
	Crn string `json:"crn,omitempty"`

	// extension
	Extension *EvaluationExtension `json:"extension,omitempty"`

	// findings
	Findings []*EvaluationFinding `json:"findings"`

	// first detected
	// Format: date-time
	FirstDetected strfmt.DateTime `json:"first_detected,omitempty"`

	// last detected
	// Format: date-time
	LastDetected strfmt.DateTime `json:"last_detected,omitempty"`

	// rule
	Rule *EvaluationsRule `json:"rule,omitempty"`

	// severity
	Severity string `json:"severity,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this evaluations evaluation doc
func (m *EvaluationsEvaluationDoc) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtension(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFindings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstDetected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastDetected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvaluationsEvaluationDoc) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationsEvaluationDoc) validateExtension(formats strfmt.Registry) error {
	if swag.IsZero(m.Extension) { // not required
		return nil
	}

	if m.Extension != nil {
		if err := m.Extension.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extension")
			}
			return err
		}
	}

	return nil
}

func (m *EvaluationsEvaluationDoc) validateFindings(formats strfmt.Registry) error {
	if swag.IsZero(m.Findings) { // not required
		return nil
	}

	for i := 0; i < len(m.Findings); i++ {
		if swag.IsZero(m.Findings[i]) { // not required
			continue
		}

		if m.Findings[i] != nil {
			if err := m.Findings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("findings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("findings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EvaluationsEvaluationDoc) validateFirstDetected(formats strfmt.Registry) error {
	if swag.IsZero(m.FirstDetected) { // not required
		return nil
	}

	if err := validate.FormatOf("first_detected", "body", "date-time", m.FirstDetected.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationsEvaluationDoc) validateLastDetected(formats strfmt.Registry) error {
	if swag.IsZero(m.LastDetected) { // not required
		return nil
	}

	if err := validate.FormatOf("last_detected", "body", "date-time", m.LastDetected.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationsEvaluationDoc) validateRule(formats strfmt.Registry) error {
	if swag.IsZero(m.Rule) { // not required
		return nil
	}

	if m.Rule != nil {
		if err := m.Rule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this evaluations evaluation doc based on the context it is used
func (m *EvaluationsEvaluationDoc) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExtension(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFindings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvaluationsEvaluationDoc) contextValidateExtension(ctx context.Context, formats strfmt.Registry) error {

	if m.Extension != nil {

		if swag.IsZero(m.Extension) { // not required
			return nil
		}

		if err := m.Extension.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extension")
			}
			return err
		}
	}

	return nil
}

func (m *EvaluationsEvaluationDoc) contextValidateFindings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Findings); i++ {

		if m.Findings[i] != nil {

			if swag.IsZero(m.Findings[i]) { // not required
				return nil
			}

			if err := m.Findings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("findings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("findings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EvaluationsEvaluationDoc) contextValidateRule(ctx context.Context, formats strfmt.Registry) error {

	if m.Rule != nil {

		if swag.IsZero(m.Rule) { // not required
			return nil
		}

		if err := m.Rule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EvaluationsEvaluationDoc) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EvaluationsEvaluationDoc) UnmarshalBinary(b []byte) error {
	var res EvaluationsEvaluationDoc
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
