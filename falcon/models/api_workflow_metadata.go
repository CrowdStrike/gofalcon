// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIWorkflowMetadata api workflow metadata
//
// swagger:model api.WorkflowMetadata
type APIWorkflowMetadata struct {

	// action permissions
	// Required: true
	ActionPermissions []string `json:"action_permissions"`

	// fusion action
	// Required: true
	FusionAction *bool `json:"fusion_action"`

	// is active
	// Required: true
	IsActive *bool `json:"is_active"`

	// system action
	// Required: true
	SystemAction *bool `json:"system_action"`

	// workflow activity tag, default to ['Custom Storage']
	TagIds []string `json:"tag_ids"`
}

// Validate validates this api workflow metadata
func (m *APIWorkflowMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionPermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFusionAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIWorkflowMetadata) validateActionPermissions(formats strfmt.Registry) error {

	if err := validate.Required("action_permissions", "body", m.ActionPermissions); err != nil {
		return err
	}

	return nil
}

func (m *APIWorkflowMetadata) validateFusionAction(formats strfmt.Registry) error {

	if err := validate.Required("fusion_action", "body", m.FusionAction); err != nil {
		return err
	}

	return nil
}

func (m *APIWorkflowMetadata) validateIsActive(formats strfmt.Registry) error {

	if err := validate.Required("is_active", "body", m.IsActive); err != nil {
		return err
	}

	return nil
}

func (m *APIWorkflowMetadata) validateSystemAction(formats strfmt.Registry) error {

	if err := validate.Required("system_action", "body", m.SystemAction); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this api workflow metadata based on context it is used
func (m *APIWorkflowMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *APIWorkflowMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIWorkflowMetadata) UnmarshalBinary(b []byte) error {
	var res APIWorkflowMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
