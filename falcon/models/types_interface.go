// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TypesInterface types interface
//
// swagger:model types.Interface
type TypesInterface struct {

	// properties
	// Required: true
	Properties map[string]string `json:"Properties"`

	// accessing methods
	AccessingMethods []string `json:"accessingMethods"`

	// bean class name
	BeanClassName string `json:"beanClassName,omitempty"`

	// bean name
	BeanName string `json:"beanName,omitempty"`

	// broker host
	BrokerHost string `json:"brokerHost,omitempty"`

	// broker port
	BrokerPort int64 `json:"brokerPort,omitempty"`

	// catalog
	Catalog string `json:"catalog,omitempty"`

	// columns
	Columns []string `json:"columns"`

	// consumes
	Consumes []string `json:"consumes"`

	// database
	Database string `json:"database,omitempty"`

	// direction
	Direction string `json:"direction,omitempty"`

	// driver
	Driver string `json:"driver,omitempty"`

	// durable subscription
	DurableSubscription string `json:"durableSubscription,omitempty"`

	// ejb version
	EjbVersion string `json:"ejbVersion,omitempty"`

	// framework
	Framework string `json:"framework,omitempty"`

	// has password
	HasPassword bool `json:"hasPassword,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// interface name
	InterfaceName string `json:"interfaceName,omitempty"`

	// method
	Method string `json:"method,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// port
	Port int64 `json:"port,omitempty"`

	// port type
	PortType string `json:"portType,omitempty"`

	// produces
	Produces []string `json:"produces"`

	// provider
	Provider string `json:"provider,omitempty"`

	// pu name
	PuName string `json:"puName,omitempty"`

	// schema
	Schema string `json:"schema,omitempty"`

	// services
	Services []*TypesInterfaceService `json:"services"`

	// session type
	SessionType string `json:"sessionType,omitempty"`

	// table
	Table string `json:"table,omitempty"`

	// technology
	Technology string `json:"technology,omitempty"`

	// topic
	Topic string `json:"topic,omitempty"`

	// topic type
	TopicType string `json:"topicType,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this types interface
func (m *TypesInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesInterface) validateProperties(formats strfmt.Registry) error {

	if err := validate.Required("Properties", "body", m.Properties); err != nil {
		return err
	}

	return nil
}

func (m *TypesInterface) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(m.Services) { // not required
		return nil
	}

	for i := 0; i < len(m.Services); i++ {
		if swag.IsZero(m.Services[i]) { // not required
			continue
		}

		if m.Services[i] != nil {
			if err := m.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this types interface based on the context it is used
func (m *TypesInterface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesInterface) contextValidateServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Services); i++ {

		if m.Services[i] != nil {

			if swag.IsZero(m.Services[i]) { // not required
				return nil
			}

			if err := m.Services[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TypesInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesInterface) UnmarshalBinary(b []byte) error {
	var res TypesInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
