// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegistrationExternalIOAEventResp registration external i o a event resp
//
// swagger:model registration.ExternalIOAEventResp
type RegistrationExternalIOAEventResp struct {

	// confidence
	// Required: true
	Confidence *string `json:"confidence"`

	// events
	// Required: true
	Events []*RegistrationIOAEvent `json:"events"`

	// max score
	// Required: true
	MaxScore *int32 `json:"max_score"`
}

// Validate validates this registration external i o a event resp
func (m *RegistrationExternalIOAEventResp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfidence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxScore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegistrationExternalIOAEventResp) validateConfidence(formats strfmt.Registry) error {

	if err := validate.Required("confidence", "body", m.Confidence); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationExternalIOAEventResp) validateEvents(formats strfmt.Registry) error {

	if err := validate.Required("events", "body", m.Events); err != nil {
		return err
	}

	for i := 0; i < len(m.Events); i++ {
		if swag.IsZero(m.Events[i]) { // not required
			continue
		}

		if m.Events[i] != nil {
			if err := m.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegistrationExternalIOAEventResp) validateMaxScore(formats strfmt.Registry) error {

	if err := validate.Required("max_score", "body", m.MaxScore); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this registration external i o a event resp based on the context it is used
func (m *RegistrationExternalIOAEventResp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegistrationExternalIOAEventResp) contextValidateEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Events); i++ {

		if m.Events[i] != nil {
			if err := m.Events[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegistrationExternalIOAEventResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegistrationExternalIOAEventResp) UnmarshalBinary(b []byte) error {
	var res RegistrationExternalIOAEventResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
