// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FalconxProcess falconx process
//
// swagger:model falconx.Process
type FalconxProcess struct {

	// amsi calls
	AmsiCalls []*FalconxAMSICall `json:"amsi_calls"`

	// command line
	CommandLine string `json:"command_line,omitempty"`

	// file accesses
	FileAccesses []*FalconxFileAccess `json:"file_accesses"`

	// handles
	Handles []*FalconxHandle `json:"handles"`

	// icon artifact id
	IconArtifactID string `json:"icon_artifact_id,omitempty"`

	// modules
	Modules []*FalconxModule `json:"modules"`

	// mutants
	Mutants []string `json:"mutants"`

	// name
	Name string `json:"name,omitempty"`

	// normalized path
	NormalizedPath string `json:"normalized_path,omitempty"`

	// parent uid
	ParentUID string `json:"parent_uid,omitempty"`

	// pid
	Pid int32 `json:"pid,omitempty"`

	// process flags
	ProcessFlags []*FalconxProcessFlag `json:"process_flags"`

	// registry
	Registry []*FalconxRegistry `json:"registry"`

	// script calls
	ScriptCalls []*FalconxScriptCall `json:"script_calls"`

	// sha256
	Sha256 string `json:"sha256,omitempty"`

	// streams
	Streams []*FalconxStream `json:"streams"`

	// uid
	UID string `json:"uid,omitempty"`
}

// Validate validates this falconx process
func (m *FalconxProcess) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmsiCalls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileAccesses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHandles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessFlags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScriptCalls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconxProcess) validateAmsiCalls(formats strfmt.Registry) error {
	if swag.IsZero(m.AmsiCalls) { // not required
		return nil
	}

	for i := 0; i < len(m.AmsiCalls); i++ {
		if swag.IsZero(m.AmsiCalls[i]) { // not required
			continue
		}

		if m.AmsiCalls[i] != nil {
			if err := m.AmsiCalls[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("amsi_calls" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("amsi_calls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconxProcess) validateFileAccesses(formats strfmt.Registry) error {
	if swag.IsZero(m.FileAccesses) { // not required
		return nil
	}

	for i := 0; i < len(m.FileAccesses); i++ {
		if swag.IsZero(m.FileAccesses[i]) { // not required
			continue
		}

		if m.FileAccesses[i] != nil {
			if err := m.FileAccesses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("file_accesses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("file_accesses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconxProcess) validateHandles(formats strfmt.Registry) error {
	if swag.IsZero(m.Handles) { // not required
		return nil
	}

	for i := 0; i < len(m.Handles); i++ {
		if swag.IsZero(m.Handles[i]) { // not required
			continue
		}

		if m.Handles[i] != nil {
			if err := m.Handles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("handles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("handles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconxProcess) validateModules(formats strfmt.Registry) error {
	if swag.IsZero(m.Modules) { // not required
		return nil
	}

	for i := 0; i < len(m.Modules); i++ {
		if swag.IsZero(m.Modules[i]) { // not required
			continue
		}

		if m.Modules[i] != nil {
			if err := m.Modules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("modules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconxProcess) validateProcessFlags(formats strfmt.Registry) error {
	if swag.IsZero(m.ProcessFlags) { // not required
		return nil
	}

	for i := 0; i < len(m.ProcessFlags); i++ {
		if swag.IsZero(m.ProcessFlags[i]) { // not required
			continue
		}

		if m.ProcessFlags[i] != nil {
			if err := m.ProcessFlags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("process_flags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("process_flags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconxProcess) validateRegistry(formats strfmt.Registry) error {
	if swag.IsZero(m.Registry) { // not required
		return nil
	}

	for i := 0; i < len(m.Registry); i++ {
		if swag.IsZero(m.Registry[i]) { // not required
			continue
		}

		if m.Registry[i] != nil {
			if err := m.Registry[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("registry" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("registry" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconxProcess) validateScriptCalls(formats strfmt.Registry) error {
	if swag.IsZero(m.ScriptCalls) { // not required
		return nil
	}

	for i := 0; i < len(m.ScriptCalls); i++ {
		if swag.IsZero(m.ScriptCalls[i]) { // not required
			continue
		}

		if m.ScriptCalls[i] != nil {
			if err := m.ScriptCalls[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("script_calls" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("script_calls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconxProcess) validateStreams(formats strfmt.Registry) error {
	if swag.IsZero(m.Streams) { // not required
		return nil
	}

	for i := 0; i < len(m.Streams); i++ {
		if swag.IsZero(m.Streams[i]) { // not required
			continue
		}

		if m.Streams[i] != nil {
			if err := m.Streams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("streams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("streams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this falconx process based on the context it is used
func (m *FalconxProcess) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmsiCalls(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFileAccesses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHandles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProcessFlags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegistry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScriptCalls(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStreams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconxProcess) contextValidateAmsiCalls(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AmsiCalls); i++ {

		if m.AmsiCalls[i] != nil {

			if swag.IsZero(m.AmsiCalls[i]) { // not required
				return nil
			}

			if err := m.AmsiCalls[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("amsi_calls" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("amsi_calls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconxProcess) contextValidateFileAccesses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FileAccesses); i++ {

		if m.FileAccesses[i] != nil {

			if swag.IsZero(m.FileAccesses[i]) { // not required
				return nil
			}

			if err := m.FileAccesses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("file_accesses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("file_accesses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconxProcess) contextValidateHandles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Handles); i++ {

		if m.Handles[i] != nil {

			if swag.IsZero(m.Handles[i]) { // not required
				return nil
			}

			if err := m.Handles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("handles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("handles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconxProcess) contextValidateModules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Modules); i++ {

		if m.Modules[i] != nil {

			if swag.IsZero(m.Modules[i]) { // not required
				return nil
			}

			if err := m.Modules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("modules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("modules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconxProcess) contextValidateProcessFlags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProcessFlags); i++ {

		if m.ProcessFlags[i] != nil {

			if swag.IsZero(m.ProcessFlags[i]) { // not required
				return nil
			}

			if err := m.ProcessFlags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("process_flags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("process_flags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconxProcess) contextValidateRegistry(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Registry); i++ {

		if m.Registry[i] != nil {

			if swag.IsZero(m.Registry[i]) { // not required
				return nil
			}

			if err := m.Registry[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("registry" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("registry" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconxProcess) contextValidateScriptCalls(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ScriptCalls); i++ {

		if m.ScriptCalls[i] != nil {

			if swag.IsZero(m.ScriptCalls[i]) { // not required
				return nil
			}

			if err := m.ScriptCalls[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("script_calls" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("script_calls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconxProcess) contextValidateStreams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Streams); i++ {

		if m.Streams[i] != nil {

			if swag.IsZero(m.Streams[i]) { // not required
				return nil
			}

			if err := m.Streams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("streams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("streams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FalconxProcess) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FalconxProcess) UnmarshalBinary(b []byte) error {
	var res FalconxProcess
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
