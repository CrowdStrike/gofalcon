// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppAppInventory app app inventory
//
// swagger:model App_AppInventory
type AppAppInventory struct {

	// Access level
	// Required: true
	// Min Length: 1
	AccessLevel *string `json:"access_level"`

	// Account id
	// Required: true
	AccountID *string `json:"account_id"`

	// App id
	// Required: true
	// Min Length: 1
	AppID *string `json:"app_id"`

	// App name
	// Required: true
	// Min Length: 1
	AppName *string `json:"app_name"`

	// App type
	// Required: true
	// Min Length: 1
	AppType *string `json:"app_type"`

	// Created
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created"`

	// Integration alias
	// Required: true
	// Min Length: 1
	IntegrationAlias *string `json:"integration_alias"`

	// Integration id
	// Required: true
	IntegrationID *string `json:"integration_id"`

	// Integration name
	// Required: true
	// Min Length: 1
	IntegrationName *string `json:"integration_name"`

	// Item id
	// Required: true
	// Min Length: 1
	ItemID *string `json:"item_id"`

	// Last activity
	// Required: true
	// Format: date-time
	LastActivity *strfmt.DateTime `json:"last_activity"`

	// scopes
	// Required: true
	Scopes []*string `json:"scopes"`

	// Status
	// Required: true
	// Min Length: 1
	Status *string `json:"status"`

	// Status expiration date
	// Required: true
	// Format: date-time
	StatusExpirationDate *strfmt.DateTime `json:"status_expiration_date"`

	// Status reason
	// Required: true
	// Min Length: 1
	StatusReason *string `json:"status_reason"`
}

// Validate validates this app app inventory
func (m *AppAppInventory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegrationAlias(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegrationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegrationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastActivity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScopes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppAppInventory) validateAccessLevel(formats strfmt.Registry) error {

	if err := validate.Required("access_level", "body", m.AccessLevel); err != nil {
		return err
	}

	if err := validate.MinLength("access_level", "body", *m.AccessLevel, 1); err != nil {
		return err
	}

	return nil
}

func (m *AppAppInventory) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("account_id", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *AppAppInventory) validateAppID(formats strfmt.Registry) error {

	if err := validate.Required("app_id", "body", m.AppID); err != nil {
		return err
	}

	if err := validate.MinLength("app_id", "body", *m.AppID, 1); err != nil {
		return err
	}

	return nil
}

func (m *AppAppInventory) validateAppName(formats strfmt.Registry) error {

	if err := validate.Required("app_name", "body", m.AppName); err != nil {
		return err
	}

	if err := validate.MinLength("app_name", "body", *m.AppName, 1); err != nil {
		return err
	}

	return nil
}

func (m *AppAppInventory) validateAppType(formats strfmt.Registry) error {

	if err := validate.Required("app_type", "body", m.AppType); err != nil {
		return err
	}

	if err := validate.MinLength("app_type", "body", *m.AppType, 1); err != nil {
		return err
	}

	return nil
}

func (m *AppAppInventory) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AppAppInventory) validateIntegrationAlias(formats strfmt.Registry) error {

	if err := validate.Required("integration_alias", "body", m.IntegrationAlias); err != nil {
		return err
	}

	if err := validate.MinLength("integration_alias", "body", *m.IntegrationAlias, 1); err != nil {
		return err
	}

	return nil
}

func (m *AppAppInventory) validateIntegrationID(formats strfmt.Registry) error {

	if err := validate.Required("integration_id", "body", m.IntegrationID); err != nil {
		return err
	}

	return nil
}

func (m *AppAppInventory) validateIntegrationName(formats strfmt.Registry) error {

	if err := validate.Required("integration_name", "body", m.IntegrationName); err != nil {
		return err
	}

	if err := validate.MinLength("integration_name", "body", *m.IntegrationName, 1); err != nil {
		return err
	}

	return nil
}

func (m *AppAppInventory) validateItemID(formats strfmt.Registry) error {

	if err := validate.Required("item_id", "body", m.ItemID); err != nil {
		return err
	}

	if err := validate.MinLength("item_id", "body", *m.ItemID, 1); err != nil {
		return err
	}

	return nil
}

func (m *AppAppInventory) validateLastActivity(formats strfmt.Registry) error {

	if err := validate.Required("last_activity", "body", m.LastActivity); err != nil {
		return err
	}

	if err := validate.FormatOf("last_activity", "body", "date-time", m.LastActivity.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AppAppInventory) validateScopes(formats strfmt.Registry) error {

	if err := validate.Required("scopes", "body", m.Scopes); err != nil {
		return err
	}

	return nil
}

func (m *AppAppInventory) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.MinLength("status", "body", *m.Status, 1); err != nil {
		return err
	}

	return nil
}

func (m *AppAppInventory) validateStatusExpirationDate(formats strfmt.Registry) error {

	if err := validate.Required("status_expiration_date", "body", m.StatusExpirationDate); err != nil {
		return err
	}

	if err := validate.FormatOf("status_expiration_date", "body", "date-time", m.StatusExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AppAppInventory) validateStatusReason(formats strfmt.Registry) error {

	if err := validate.Required("status_reason", "body", m.StatusReason); err != nil {
		return err
	}

	if err := validate.MinLength("status_reason", "body", *m.StatusReason, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this app app inventory based on context it is used
func (m *AppAppInventory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AppAppInventory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppAppInventory) UnmarshalBinary(b []byte) error {
	var res AppAppInventory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
