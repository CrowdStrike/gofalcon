// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainOCITenancyUpdateExtV1 domain o c i tenancy update ext v1
//
// swagger:model domain.OCITenancyUpdateExtV1
type DomainOCITenancyUpdateExtV1 struct {

	// group name
	GroupName string `json:"group_name,omitempty"`

	// home region
	HomeRegion string `json:"home_region,omitempty"`

	// policy name
	PolicyName string `json:"policy_name,omitempty"`

	// products
	// Required: true
	Products []*DomainCloudOCIProductFeature `json:"products"`

	// Stack OCID
	StackOcid string `json:"stack_ocid,omitempty"`

	// tenancy ocid
	TenancyOcid string `json:"tenancy_ocid,omitempty"`

	// user email
	UserEmail string `json:"user_email,omitempty"`

	// user name
	UserName string `json:"user_name,omitempty"`

	// User OCID
	UserOcid string `json:"user_ocid,omitempty"`
}

// Validate validates this domain o c i tenancy update ext v1
func (m *DomainOCITenancyUpdateExtV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainOCITenancyUpdateExtV1) validateProducts(formats strfmt.Registry) error {

	if err := validate.Required("products", "body", m.Products); err != nil {
		return err
	}

	for i := 0; i < len(m.Products); i++ {
		if swag.IsZero(m.Products[i]) { // not required
			continue
		}

		if m.Products[i] != nil {
			if err := m.Products[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this domain o c i tenancy update ext v1 based on the context it is used
func (m *DomainOCITenancyUpdateExtV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainOCITenancyUpdateExtV1) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Products); i++ {

		if m.Products[i] != nil {

			if swag.IsZero(m.Products[i]) { // not required
				return nil
			}

			if err := m.Products[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("products" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainOCITenancyUpdateExtV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainOCITenancyUpdateExtV1) UnmarshalBinary(b []byte) error {
	var res DomainOCITenancyUpdateExtV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
