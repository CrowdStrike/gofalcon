// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainMaliciousFile domain malicious file
//
// swagger:model domain.MaliciousFile
type DomainMaliciousFile struct {

	// cid
	Cid string `json:"cid,omitempty"`

	// filename
	Filename string `json:"filename,omitempty"`

	// filepath
	Filepath string `json:"filepath,omitempty"`

	// hash
	Hash string `json:"hash,omitempty"`

	// host id
	HostID string `json:"host_id,omitempty"`

	// host scan id
	HostScanID string `json:"host_scan_id,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// last updated
	// Format: date-time
	LastUpdated strfmt.DateTime `json:"last_updated,omitempty"`

	// pattern id
	PatternID int64 `json:"pattern_id,omitempty"`

	// quarantined
	Quarantined bool `json:"quarantined,omitempty"`

	// scan id
	ScanID string `json:"scan_id,omitempty"`

	// severity
	Severity int64 `json:"severity,omitempty"`
}

// Validate validates this domain malicious file
func (m *DomainMaliciousFile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainMaliciousFile) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DomainMaliciousFile) validateLastUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain malicious file based on context it is used
func (m *DomainMaliciousFile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainMaliciousFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainMaliciousFile) UnmarshalBinary(b []byte) error {
	var res DomainMaliciousFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
