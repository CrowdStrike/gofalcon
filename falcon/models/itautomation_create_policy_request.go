// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItautomationCreatePolicyRequest itautomation create policy request
//
// swagger:model itautomation.CreatePolicyRequest
type ItautomationCreatePolicyRequest struct {

	// Configuration settings for the policy
	Config *ItautomationPolicyConfig `json:"config,omitempty"`

	// Description of the policy
	// Required: true
	Description *string `json:"description"`

	// The name of the policy
	Name string `json:"name,omitempty"`

	// The platform for the policy
	// Required: true
	// Enum: ["Windows","Mac","Linux"]
	Platform *string `json:"platform"`
}

// Validate validates this itautomation create policy request
func (m *ItautomationCreatePolicyRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItautomationCreatePolicyRequest) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *ItautomationCreatePolicyRequest) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

var itautomationCreatePolicyRequestTypePlatformPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Windows","Mac","Linux"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itautomationCreatePolicyRequestTypePlatformPropEnum = append(itautomationCreatePolicyRequestTypePlatformPropEnum, v)
	}
}

const (

	// ItautomationCreatePolicyRequestPlatformWindows captures enum value "Windows"
	ItautomationCreatePolicyRequestPlatformWindows string = "Windows"

	// ItautomationCreatePolicyRequestPlatformMac captures enum value "Mac"
	ItautomationCreatePolicyRequestPlatformMac string = "Mac"

	// ItautomationCreatePolicyRequestPlatformLinux captures enum value "Linux"
	ItautomationCreatePolicyRequestPlatformLinux string = "Linux"
)

// prop value enum
func (m *ItautomationCreatePolicyRequest) validatePlatformEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, itautomationCreatePolicyRequestTypePlatformPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ItautomationCreatePolicyRequest) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	// value enum
	if err := m.validatePlatformEnum("platform", "body", *m.Platform); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this itautomation create policy request based on the context it is used
func (m *ItautomationCreatePolicyRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItautomationCreatePolicyRequest) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {

		if swag.IsZero(m.Config) { // not required
			return nil
		}

		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ItautomationCreatePolicyRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItautomationCreatePolicyRequest) UnmarshalBinary(b []byte) error {
	var res ItautomationCreatePolicyRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
