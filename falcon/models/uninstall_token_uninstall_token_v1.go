// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UninstallTokenUninstallTokenV1 An uninstall token for a device
//
// swagger:model uninstall_token.UninstallTokenV1
type UninstallTokenUninstallTokenV1 struct {

	// The device the token belongs to
	// Required: true
	DeviceID *string `json:"device_id"`

	// The seedID of the uninstall token
	// Required: true
	SeedID *int64 `json:"seed_id"`

	// The uninstall token
	// Required: true
	UninstallToken *string `json:"uninstall_token"`
}

// Validate validates this uninstall token uninstall token v1
func (m *UninstallTokenUninstallTokenV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeedID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUninstallToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UninstallTokenUninstallTokenV1) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("device_id", "body", m.DeviceID); err != nil {
		return err
	}

	return nil
}

func (m *UninstallTokenUninstallTokenV1) validateSeedID(formats strfmt.Registry) error {

	if err := validate.Required("seed_id", "body", m.SeedID); err != nil {
		return err
	}

	return nil
}

func (m *UninstallTokenUninstallTokenV1) validateUninstallToken(formats strfmt.Registry) error {

	if err := validate.Required("uninstall_token", "body", m.UninstallToken); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this uninstall token uninstall token v1 based on context it is used
func (m *UninstallTokenUninstallTokenV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UninstallTokenUninstallTokenV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UninstallTokenUninstallTokenV1) UnmarshalBinary(b []byte) error {
	var res UninstallTokenUninstallTokenV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
