// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItautomationResourceConfig itautomation resource config
//
// swagger:model itautomation.ResourceConfig
type ItautomationResourceConfig struct {

	// Sets priority to determine the order in which a query process will run on a host's CPU. Allowed values 'Low','Medium','High'
	CPUScheduling string `json:"cpu_scheduling,omitempty"`

	// CPU usage limit as a percentage. Example: 50.5
	// Maximum: 100
	// Minimum: 1
	CPUThrottle int32 `json:"cpu_throttle,omitempty"`

	// Amount of memory allocated. Example: 1000, when the unit is 'MB'
	MemoryAllocation int32 `json:"memory_allocation,omitempty"`

	// Unit for memory allocation
	// Enum: ["MB","GB"]
	MemoryAllocationUnit string `json:"memory_allocation_unit,omitempty"`

	// Sets memory pressure level to control system resource allocation during task execution. Allowed values 'Low','Medium','High'
	MemoryPressureLevel string `json:"memory_pressure_level,omitempty"`
}

// Validate validates this itautomation resource config
func (m *ItautomationResourceConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUThrottle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryAllocationUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItautomationResourceConfig) validateCPUThrottle(formats strfmt.Registry) error {
	if swag.IsZero(m.CPUThrottle) { // not required
		return nil
	}

	if err := validate.MinimumInt("cpu_throttle", "body", int64(m.CPUThrottle), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("cpu_throttle", "body", int64(m.CPUThrottle), 100, false); err != nil {
		return err
	}

	return nil
}

var itautomationResourceConfigTypeMemoryAllocationUnitPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MB","GB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itautomationResourceConfigTypeMemoryAllocationUnitPropEnum = append(itautomationResourceConfigTypeMemoryAllocationUnitPropEnum, v)
	}
}

const (

	// ItautomationResourceConfigMemoryAllocationUnitMB captures enum value "MB"
	ItautomationResourceConfigMemoryAllocationUnitMB string = "MB"

	// ItautomationResourceConfigMemoryAllocationUnitGB captures enum value "GB"
	ItautomationResourceConfigMemoryAllocationUnitGB string = "GB"
)

// prop value enum
func (m *ItautomationResourceConfig) validateMemoryAllocationUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, itautomationResourceConfigTypeMemoryAllocationUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ItautomationResourceConfig) validateMemoryAllocationUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.MemoryAllocationUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateMemoryAllocationUnitEnum("memory_allocation_unit", "body", m.MemoryAllocationUnit); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this itautomation resource config based on context it is used
func (m *ItautomationResourceConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ItautomationResourceConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItautomationResourceConfig) UnmarshalBinary(b []byte) error {
	var res ItautomationResourceConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
