// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TypesUserGroup types user group
//
// swagger:model types.UserGroup
type TypesUserGroup struct {

	// created by
	// Required: true
	CreatedBy *string `json:"createdBy"`

	// description
	// Required: true
	Description *string `json:"description"`

	// group Id
	// Required: true
	GroupID *int64 `json:"groupId"`

	// is default
	// Required: true
	IsDefault *bool `json:"isDefault"`

	// is internal
	// Required: true
	IsInternal *bool `json:"isInternal"`

	// is o o b
	// Required: true
	IsOOB *bool `json:"isOOB"`

	// name
	// Required: true
	Name *string `json:"name"`

	// parent
	// Required: true
	Parent *TypesUserGroup `json:"parent"`

	// scope
	// Required: true
	Scope *string `json:"scope"`
}

// Validate validates this types user group
func (m *TypesUserGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsDefault(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsInternal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsOOB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesUserGroup) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("createdBy", "body", m.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (m *TypesUserGroup) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *TypesUserGroup) validateGroupID(formats strfmt.Registry) error {

	if err := validate.Required("groupId", "body", m.GroupID); err != nil {
		return err
	}

	return nil
}

func (m *TypesUserGroup) validateIsDefault(formats strfmt.Registry) error {

	if err := validate.Required("isDefault", "body", m.IsDefault); err != nil {
		return err
	}

	return nil
}

func (m *TypesUserGroup) validateIsInternal(formats strfmt.Registry) error {

	if err := validate.Required("isInternal", "body", m.IsInternal); err != nil {
		return err
	}

	return nil
}

func (m *TypesUserGroup) validateIsOOB(formats strfmt.Registry) error {

	if err := validate.Required("isOOB", "body", m.IsOOB); err != nil {
		return err
	}

	return nil
}

func (m *TypesUserGroup) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TypesUserGroup) validateParent(formats strfmt.Registry) error {

	if err := validate.Required("parent", "body", m.Parent); err != nil {
		return err
	}

	if m.Parent != nil {
		if err := m.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parent")
			}
			return err
		}
	}

	return nil
}

func (m *TypesUserGroup) validateScope(formats strfmt.Registry) error {

	if err := validate.Required("scope", "body", m.Scope); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this types user group based on the context it is used
func (m *TypesUserGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesUserGroup) contextValidateParent(ctx context.Context, formats strfmt.Registry) error {

	if m.Parent != nil {

		if err := m.Parent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parent")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TypesUserGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesUserGroup) UnmarshalBinary(b []byte) error {
	var res TypesUserGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
