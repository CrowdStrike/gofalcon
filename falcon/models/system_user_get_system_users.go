// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SystemUserGetSystemUsers system user get system users
//
// swagger:model SystemUser_GetSystemUsers
type SystemUserGetSystemUsers struct {

	// Account id
	// Required: true
	AccountID *string `json:"account_id"`

	// Bypass sso
	// Required: true
	BypassSso *bool `json:"bypass_sso"`

	// Create date
	// Required: true
	// Format: date-time
	CreateDate *strfmt.DateTime `json:"create_date"`

	// Email
	// Required: true
	// Min Length: 1
	Email *string `json:"email"`

	// Enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// First name
	// Required: true
	// Min Length: 1
	FirstName *string `json:"first_name"`

	// Id
	// Required: true
	ID *string `json:"id"`

	// Last login
	// Required: true
	// Format: date-time
	LastLogin *strfmt.DateTime `json:"last_login"`

	// Last name
	// Required: true
	// Min Length: 1
	LastName *string `json:"last_name"`

	// Locked out
	// Required: true
	LockedOut *bool `json:"locked_out"`

	// Mfa enabled
	// Required: true
	MfaEnabled *bool `json:"mfa_enabled"`

	// Role
	// Required: true
	// Min Length: 1
	Role *string `json:"role"`

	// scoped integration ids
	// Required: true
	ScopedIntegrationIds []string `json:"scoped_integration_ids"`
}

// Validate validates this system user get system users
func (m *SystemUserGetSystemUsers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBypassSso(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLockedOut(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMfaEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScopedIntegrationIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemUserGetSystemUsers) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("account_id", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *SystemUserGetSystemUsers) validateBypassSso(formats strfmt.Registry) error {

	if err := validate.Required("bypass_sso", "body", m.BypassSso); err != nil {
		return err
	}

	return nil
}

func (m *SystemUserGetSystemUsers) validateCreateDate(formats strfmt.Registry) error {

	if err := validate.Required("create_date", "body", m.CreateDate); err != nil {
		return err
	}

	if err := validate.FormatOf("create_date", "body", "date-time", m.CreateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SystemUserGetSystemUsers) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.MinLength("email", "body", *m.Email, 1); err != nil {
		return err
	}

	return nil
}

func (m *SystemUserGetSystemUsers) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *SystemUserGetSystemUsers) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("first_name", "body", m.FirstName); err != nil {
		return err
	}

	if err := validate.MinLength("first_name", "body", *m.FirstName, 1); err != nil {
		return err
	}

	return nil
}

func (m *SystemUserGetSystemUsers) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SystemUserGetSystemUsers) validateLastLogin(formats strfmt.Registry) error {

	if err := validate.Required("last_login", "body", m.LastLogin); err != nil {
		return err
	}

	if err := validate.FormatOf("last_login", "body", "date-time", m.LastLogin.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SystemUserGetSystemUsers) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("last_name", "body", m.LastName); err != nil {
		return err
	}

	if err := validate.MinLength("last_name", "body", *m.LastName, 1); err != nil {
		return err
	}

	return nil
}

func (m *SystemUserGetSystemUsers) validateLockedOut(formats strfmt.Registry) error {

	if err := validate.Required("locked_out", "body", m.LockedOut); err != nil {
		return err
	}

	return nil
}

func (m *SystemUserGetSystemUsers) validateMfaEnabled(formats strfmt.Registry) error {

	if err := validate.Required("mfa_enabled", "body", m.MfaEnabled); err != nil {
		return err
	}

	return nil
}

func (m *SystemUserGetSystemUsers) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	if err := validate.MinLength("role", "body", *m.Role, 1); err != nil {
		return err
	}

	return nil
}

func (m *SystemUserGetSystemUsers) validateScopedIntegrationIds(formats strfmt.Registry) error {

	if err := validate.Required("scoped_integration_ids", "body", m.ScopedIntegrationIds); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this system user get system users based on context it is used
func (m *SystemUserGetSystemUsers) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SystemUserGetSystemUsers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemUserGetSystemUsers) UnmarshalBinary(b []byte) error {
	var res SystemUserGetSystemUsers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
