// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssetgroupmanagerV1CloudResourceSelector Select cloud resources based on cloud provider properties.
// The selector works by filtering assets from the specified account ids and filtering them based on the provided region and tags.
// A selector on account IDs: ['012345678901', '012345678902'] with filters region: ['us-west-1'] and tag ['environment=test'] produces a boolean expression (accountID && (region || tags))
//
// swagger:model assetgroupmanager.v1.CloudResourceSelector
type AssetgroupmanagerV1CloudResourceSelector struct {

	// A list of accounts IDs to select. Selector will find assets that belong to any of the account IDs specified here.
	// According to the cloud provider selected this can be a list of AWS Account IDs, Azure Subscription IDs or GCP Project IDs.
	// Maximum number of account IDs is 100 but can be overriden on demand on a per customer basis.
	AccountIds []string `json:"account_ids"`

	// cloud provider
	// Required: true
	// Enum: [aws azure gcp]
	CloudProvider *string `json:"cloud_provider"`

	// Filter to be used to select the cloud resource. Selector will find assets matching the filters.
	// Supported filters: region, tags.
	Filters *AssetgroupmanagerV1CloudResourceFilters `json:"filters,omitempty"`
}

// Validate validates this assetgroupmanager v1 cloud resource selector
func (m *AssetgroupmanagerV1CloudResourceSelector) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var assetgroupmanagerV1CloudResourceSelectorTypeCloudProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["aws","azure","gcp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assetgroupmanagerV1CloudResourceSelectorTypeCloudProviderPropEnum = append(assetgroupmanagerV1CloudResourceSelectorTypeCloudProviderPropEnum, v)
	}
}

const (

	// AssetgroupmanagerV1CloudResourceSelectorCloudProviderAws captures enum value "aws"
	AssetgroupmanagerV1CloudResourceSelectorCloudProviderAws string = "aws"

	// AssetgroupmanagerV1CloudResourceSelectorCloudProviderAzure captures enum value "azure"
	AssetgroupmanagerV1CloudResourceSelectorCloudProviderAzure string = "azure"

	// AssetgroupmanagerV1CloudResourceSelectorCloudProviderGcp captures enum value "gcp"
	AssetgroupmanagerV1CloudResourceSelectorCloudProviderGcp string = "gcp"
)

// prop value enum
func (m *AssetgroupmanagerV1CloudResourceSelector) validateCloudProviderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, assetgroupmanagerV1CloudResourceSelectorTypeCloudProviderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AssetgroupmanagerV1CloudResourceSelector) validateCloudProvider(formats strfmt.Registry) error {

	if err := validate.Required("cloud_provider", "body", m.CloudProvider); err != nil {
		return err
	}

	// value enum
	if err := m.validateCloudProviderEnum("cloud_provider", "body", *m.CloudProvider); err != nil {
		return err
	}

	return nil
}

func (m *AssetgroupmanagerV1CloudResourceSelector) validateFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.Filters) { // not required
		return nil
	}

	if m.Filters != nil {
		if err := m.Filters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filters")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this assetgroupmanager v1 cloud resource selector based on the context it is used
func (m *AssetgroupmanagerV1CloudResourceSelector) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetgroupmanagerV1CloudResourceSelector) contextValidateFilters(ctx context.Context, formats strfmt.Registry) error {

	if m.Filters != nil {

		if swag.IsZero(m.Filters) { // not required
			return nil
		}

		if err := m.Filters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetgroupmanagerV1CloudResourceSelector) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetgroupmanagerV1CloudResourceSelector) UnmarshalBinary(b []byte) error {
	var res AssetgroupmanagerV1CloudResourceSelector
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
