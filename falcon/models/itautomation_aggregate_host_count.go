// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItautomationAggregateHostCount itautomation aggregate host count
//
// swagger:model itautomation.AggregateHostCount
type ItautomationAggregateHostCount struct {

	// Number of hosts where execution was canceled
	// Required: true
	CanceledHostCount *int32 `json:"canceled_host_count"`

	// Number of hosts where execution expired
	// Required: true
	ExpiredHostCount *int32 `json:"expired_host_count"`

	// Number of hosts where execution failed
	// Required: true
	FailedHostCount *int32 `json:"failed_host_count"`

	// Number of hosts where execution was initiated
	// Required: true
	InitiatedHostCount *int32 `json:"initiated_host_count"`

	// Number of offline hosts that could not execute
	// Required: true
	OfflineHostCount *int32 `json:"offline_host_count"`

	// Number of hosts queued for execution
	// Required: true
	QueuedHostCount *int32 `json:"queued_host_count"`

	// Number of hosts currently executing
	// Required: true
	RunningHostCount *int32 `json:"running_host_count"`

	// Number of hosts that completed execution successfully
	// Required: true
	SuccessHostCount *int32 `json:"success_host_count"`
}

// Validate validates this itautomation aggregate host count
func (m *ItautomationAggregateHostCount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCanceledHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiredHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiatedHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfflineHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueuedHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuccessHostCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItautomationAggregateHostCount) validateCanceledHostCount(formats strfmt.Registry) error {

	if err := validate.Required("canceled_host_count", "body", m.CanceledHostCount); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationAggregateHostCount) validateExpiredHostCount(formats strfmt.Registry) error {

	if err := validate.Required("expired_host_count", "body", m.ExpiredHostCount); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationAggregateHostCount) validateFailedHostCount(formats strfmt.Registry) error {

	if err := validate.Required("failed_host_count", "body", m.FailedHostCount); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationAggregateHostCount) validateInitiatedHostCount(formats strfmt.Registry) error {

	if err := validate.Required("initiated_host_count", "body", m.InitiatedHostCount); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationAggregateHostCount) validateOfflineHostCount(formats strfmt.Registry) error {

	if err := validate.Required("offline_host_count", "body", m.OfflineHostCount); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationAggregateHostCount) validateQueuedHostCount(formats strfmt.Registry) error {

	if err := validate.Required("queued_host_count", "body", m.QueuedHostCount); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationAggregateHostCount) validateRunningHostCount(formats strfmt.Registry) error {

	if err := validate.Required("running_host_count", "body", m.RunningHostCount); err != nil {
		return err
	}

	return nil
}

func (m *ItautomationAggregateHostCount) validateSuccessHostCount(formats strfmt.Registry) error {

	if err := validate.Required("success_host_count", "body", m.SuccessHostCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this itautomation aggregate host count based on context it is used
func (m *ItautomationAggregateHostCount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ItautomationAggregateHostCount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItautomationAggregateHostCount) UnmarshalBinary(b []byte) error {
	var res ItautomationAggregateHostCount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
