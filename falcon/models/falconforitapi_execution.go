// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FalconforitapiExecution falconforitapi execution
//
// swagger:model falconforitapi.Execution
type FalconforitapiExecution struct {

	// end time
	// Required: true
	// Format: date-time
	EndTime *strfmt.DateTime `json:"end_time"`

	// event platform
	// Required: true
	EventPlatform *string `json:"event_platform"`

	// host id
	// Required: true
	HostID *string `json:"host_id"`

	// hostname
	// Required: true
	Hostname *string `json:"hostname"`

	// job id
	// Required: true
	JobID *string `json:"job_id"`

	// reason
	Reason string `json:"reason,omitempty"`

	// route
	Route string `json:"route,omitempty"`

	// stage
	// Required: true
	Stage *string `json:"stage"`

	// start time
	// Required: true
	// Format: date-time
	StartTime *strfmt.DateTime `json:"start_time"`

	// status
	// Required: true
	Status *string `json:"status"`

	// total results
	// Required: true
	TotalResults *int64 `json:"total_results"`
}

// Validate validates this falconforitapi execution
func (m *FalconforitapiExecution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventPlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiExecution) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("end_time", "body", m.EndTime); err != nil {
		return err
	}

	if err := validate.FormatOf("end_time", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiExecution) validateEventPlatform(formats strfmt.Registry) error {

	if err := validate.Required("event_platform", "body", m.EventPlatform); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiExecution) validateHostID(formats strfmt.Registry) error {

	if err := validate.Required("host_id", "body", m.HostID); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiExecution) validateHostname(formats strfmt.Registry) error {

	if err := validate.Required("hostname", "body", m.Hostname); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiExecution) validateJobID(formats strfmt.Registry) error {

	if err := validate.Required("job_id", "body", m.JobID); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiExecution) validateStage(formats strfmt.Registry) error {

	if err := validate.Required("stage", "body", m.Stage); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiExecution) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("start_time", "body", m.StartTime); err != nil {
		return err
	}

	if err := validate.FormatOf("start_time", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiExecution) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiExecution) validateTotalResults(formats strfmt.Registry) error {

	if err := validate.Required("total_results", "body", m.TotalResults); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this falconforitapi execution based on context it is used
func (m *FalconforitapiExecution) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FalconforitapiExecution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FalconforitapiExecution) UnmarshalBinary(b []byte) error {
	var res FalconforitapiExecution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
