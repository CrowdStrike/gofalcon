// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainAPIRuleMetadata domain API rule metadata
//
// swagger:model domain.APIRuleMetadata
type DomainAPIRuleMetadata struct {

	// assessment status
	// Required: true
	AssessmentStatus *string `json:"assessment_status"`

	// asset type
	// Required: true
	AssetType *string `json:"asset_type"`

	// audit procedure
	AuditProcedure string `json:"audit_procedure,omitempty"`

	// default value
	DefaultValue string `json:"default_value,omitempty"`

	// description
	// Required: true
	Description *string `json:"description"`

	// framework name
	FrameworkName string `json:"framework_name,omitempty"`

	// framework name version
	FrameworkNameVersion string `json:"framework_name_version,omitempty"`

	// framework version
	FrameworkVersion string `json:"framework_version,omitempty"`

	// impact
	// Required: true
	Impact *string `json:"impact"`

	// name
	// Required: true
	Name *string `json:"name"`

	// recommendation no
	// Required: true
	RecommendationNo *string `json:"recommendation_no"`

	// references
	References string `json:"references,omitempty"`

	// remediation
	// Required: true
	Remediation *string `json:"remediation"`

	// rule id
	// Required: true
	RuleID *string `json:"rule_id"`

	// severity
	// Required: true
	Severity *string `json:"severity"`
}

// Validate validates this domain API rule metadata
func (m *DomainAPIRuleMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssessmentStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImpact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecommendationNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainAPIRuleMetadata) validateAssessmentStatus(formats strfmt.Registry) error {

	if err := validate.Required("assessment_status", "body", m.AssessmentStatus); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIRuleMetadata) validateAssetType(formats strfmt.Registry) error {

	if err := validate.Required("asset_type", "body", m.AssetType); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIRuleMetadata) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIRuleMetadata) validateImpact(formats strfmt.Registry) error {

	if err := validate.Required("impact", "body", m.Impact); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIRuleMetadata) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIRuleMetadata) validateRecommendationNo(formats strfmt.Registry) error {

	if err := validate.Required("recommendation_no", "body", m.RecommendationNo); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIRuleMetadata) validateRemediation(formats strfmt.Registry) error {

	if err := validate.Required("remediation", "body", m.Remediation); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIRuleMetadata) validateRuleID(formats strfmt.Registry) error {

	if err := validate.Required("rule_id", "body", m.RuleID); err != nil {
		return err
	}

	return nil
}

func (m *DomainAPIRuleMetadata) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain API rule metadata based on context it is used
func (m *DomainAPIRuleMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainAPIRuleMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainAPIRuleMetadata) UnmarshalBinary(b []byte) error {
	var res DomainAPIRuleMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
