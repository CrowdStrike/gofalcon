// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourceCounts resource counts
//
// swagger:model .resource_counts
type ResourceCounts struct {

	// compliant
	// Required: true
	Compliant *int32 `json:"compliant"`

	// non compliant
	// Required: true
	NonCompliant *int32 `json:"non_compliant"`

	// non compliant by severity
	// Required: true
	NonCompliantBySeverity *NonCompliantBySeverity `json:"non_compliant_by_severity"`

	// total
	// Required: true
	Total *int32 `json:"total"`
}

// Validate validates this resource counts
func (m *ResourceCounts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompliant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonCompliant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonCompliantBySeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceCounts) validateCompliant(formats strfmt.Registry) error {

	if err := validate.Required("compliant", "body", m.Compliant); err != nil {
		return err
	}

	return nil
}

func (m *ResourceCounts) validateNonCompliant(formats strfmt.Registry) error {

	if err := validate.Required("non_compliant", "body", m.NonCompliant); err != nil {
		return err
	}

	return nil
}

func (m *ResourceCounts) validateNonCompliantBySeverity(formats strfmt.Registry) error {

	if err := validate.Required("non_compliant_by_severity", "body", m.NonCompliantBySeverity); err != nil {
		return err
	}

	if m.NonCompliantBySeverity != nil {
		if err := m.NonCompliantBySeverity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("non_compliant_by_severity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("non_compliant_by_severity")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceCounts) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("total", "body", m.Total); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this resource counts based on the context it is used
func (m *ResourceCounts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNonCompliantBySeverity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceCounts) contextValidateNonCompliantBySeverity(ctx context.Context, formats strfmt.Registry) error {

	if m.NonCompliantBySeverity != nil {

		if err := m.NonCompliantBySeverity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("non_compliant_by_severity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("non_compliant_by_severity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceCounts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceCounts) UnmarshalBinary(b []byte) error {
	var res ResourceCounts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
