// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComplianceSectionSummary compliance section summary
//
// swagger:model compliance.SectionSummary
type ComplianceSectionSummary struct {

	// name
	// Required: true
	Name *string `json:"name"`

	// posture
	// Required: true
	Posture *CompliancePosture `json:"posture"`

	// requirements
	// Required: true
	Requirements []*ComplianceRequirementSummary `json:"requirements"`
}

// Validate validates this compliance section summary
func (m *ComplianceSectionSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequirements(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComplianceSectionSummary) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ComplianceSectionSummary) validatePosture(formats strfmt.Registry) error {

	if err := validate.Required("posture", "body", m.Posture); err != nil {
		return err
	}

	if m.Posture != nil {
		if err := m.Posture.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("posture")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("posture")
			}
			return err
		}
	}

	return nil
}

func (m *ComplianceSectionSummary) validateRequirements(formats strfmt.Registry) error {

	if err := validate.Required("requirements", "body", m.Requirements); err != nil {
		return err
	}

	for i := 0; i < len(m.Requirements); i++ {
		if swag.IsZero(m.Requirements[i]) { // not required
			continue
		}

		if m.Requirements[i] != nil {
			if err := m.Requirements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requirements" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("requirements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this compliance section summary based on the context it is used
func (m *ComplianceSectionSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePosture(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequirements(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComplianceSectionSummary) contextValidatePosture(ctx context.Context, formats strfmt.Registry) error {

	if m.Posture != nil {

		if err := m.Posture.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("posture")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("posture")
			}
			return err
		}
	}

	return nil
}

func (m *ComplianceSectionSummary) contextValidateRequirements(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Requirements); i++ {

		if m.Requirements[i] != nil {

			if swag.IsZero(m.Requirements[i]) { // not required
				return nil
			}

			if err := m.Requirements[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requirements" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("requirements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComplianceSectionSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComplianceSectionSummary) UnmarshalBinary(b []byte) error {
	var res ComplianceSectionSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
