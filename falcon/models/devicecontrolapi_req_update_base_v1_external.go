// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DevicecontrolapiReqUpdateBaseV1External devicecontrolapi req update base v1 external
//
// swagger:model devicecontrolapi.ReqUpdateBaseV1External
type DevicecontrolapiReqUpdateBaseV1External struct {

	// Object for the Bluetooth settings (omit to keep current)
	BluetoothSettings *DevicecontrolapiReqUpdateBluetoothBaseV1 `json:"bluetooth_settings,omitempty"`

	// Description of the policy (omit to keep current)
	Description string `json:"description,omitempty"`

	// ID of the policy to update
	// Required: true
	ID *string `json:"id"`

	// Name of the policy (omit to keep current)
	Name string `json:"name,omitempty"`

	// For Flight Control enabled CIDs, indicates whether to propagate to child CIDs (omit to keep current)
	// Required: true
	Propagated *bool `json:"propagated"`

	// Object for the USB settings (omit to keep current)
	UsbSettings *DevicecontrolapiReqUpdateUSBBaseV1External `json:"usb_settings,omitempty"`
}

// Validate validates this devicecontrolapi req update base v1 external
func (m *DevicecontrolapiReqUpdateBaseV1External) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBluetoothSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePropagated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsbSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontrolapiReqUpdateBaseV1External) validateBluetoothSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.BluetoothSettings) { // not required
		return nil
	}

	if m.BluetoothSettings != nil {
		if err := m.BluetoothSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bluetooth_settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bluetooth_settings")
			}
			return err
		}
	}

	return nil
}

func (m *DevicecontrolapiReqUpdateBaseV1External) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiReqUpdateBaseV1External) validatePropagated(formats strfmt.Registry) error {

	if err := validate.Required("propagated", "body", m.Propagated); err != nil {
		return err
	}

	return nil
}

func (m *DevicecontrolapiReqUpdateBaseV1External) validateUsbSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.UsbSettings) { // not required
		return nil
	}

	if m.UsbSettings != nil {
		if err := m.UsbSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usb_settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usb_settings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this devicecontrolapi req update base v1 external based on the context it is used
func (m *DevicecontrolapiReqUpdateBaseV1External) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBluetoothSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsbSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicecontrolapiReqUpdateBaseV1External) contextValidateBluetoothSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.BluetoothSettings != nil {

		if swag.IsZero(m.BluetoothSettings) { // not required
			return nil
		}

		if err := m.BluetoothSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bluetooth_settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bluetooth_settings")
			}
			return err
		}
	}

	return nil
}

func (m *DevicecontrolapiReqUpdateBaseV1External) contextValidateUsbSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.UsbSettings != nil {

		if swag.IsZero(m.UsbSettings) { // not required
			return nil
		}

		if err := m.UsbSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usb_settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usb_settings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DevicecontrolapiReqUpdateBaseV1External) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevicecontrolapiReqUpdateBaseV1External) UnmarshalBinary(b []byte) error {
	var res DevicecontrolapiReqUpdateBaseV1External
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
