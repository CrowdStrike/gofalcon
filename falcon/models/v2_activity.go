// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V2Activity v2 activity
//
// swagger:model v2.Activity
type V2Activity struct {

	// class
	Class string `json:"class,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// inline configuration
	InlineConfiguration *V2InlineConfig `json:"inline_configuration,omitempty"`

	// next
	Next []string `json:"next"`

	// properties
	// Required: true
	Properties interface{} `json:"properties"`
}

// Validate validates this v2 activity
func (m *V2Activity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInlineConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2Activity) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *V2Activity) validateInlineConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.InlineConfiguration) { // not required
		return nil
	}

	if m.InlineConfiguration != nil {
		if err := m.InlineConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inline_configuration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inline_configuration")
			}
			return err
		}
	}

	return nil
}

func (m *V2Activity) validateProperties(formats strfmt.Registry) error {

	if m.Properties == nil {
		return errors.Required("properties", "body", nil)
	}

	return nil
}

// ContextValidate validate this v2 activity based on the context it is used
func (m *V2Activity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInlineConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2Activity) contextValidateInlineConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.InlineConfiguration != nil {

		if swag.IsZero(m.InlineConfiguration) { // not required
			return nil
		}

		if err := m.InlineConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inline_configuration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inline_configuration")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2Activity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2Activity) UnmarshalBinary(b []byte) error {
	var res V2Activity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
