// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsAPIImageIssuesSummary models API image issues summary
//
// swagger:model models.APIImageIssuesSummary
type ModelsAPIImageIssuesSummary struct {

	// image container info
	// Required: true
	ImageContainerInfo *ModelsIssuesSummaryContainerInfo `json:"image_container_info"`

	// image detections
	// Required: true
	ImageDetections []*ModelsAPIDetectionCountByType `json:"image_detections"`

	// is dca run
	// Required: true
	IsDcaRun *bool `json:"is_dca_run"`

	// known issues
	// Required: true
	KnownIssues *int64 `json:"known_issues"`

	// packages info
	// Required: true
	PackagesInfo *ModelsImageSummaryPackagesInfo `json:"packages_info"`

	// policies summary
	// Required: true
	PoliciesSummary []*ModelsAPIPolicyCountByAction `json:"policies_summary"`

	// runtime detections
	// Required: true
	RuntimeDetections []*ModelsAPIFilterLabel `json:"runtime_detections"`

	// vulnerabilities summary
	// Required: true
	VulnerabilitiesSummary []*ModelsAPIVulnCountBySeverity `json:"vulnerabilities_summary"`

	// zero day impacted
	// Required: true
	ZeroDayImpacted *bool `json:"zero_day_impacted"`
}

// Validate validates this models API image issues summary
func (m *ModelsAPIImageIssuesSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImageContainerInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageDetections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsDcaRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKnownIssues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackagesInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoliciesSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntimeDetections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVulnerabilitiesSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZeroDayImpacted(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIImageIssuesSummary) validateImageContainerInfo(formats strfmt.Registry) error {

	if err := validate.Required("image_container_info", "body", m.ImageContainerInfo); err != nil {
		return err
	}

	if m.ImageContainerInfo != nil {
		if err := m.ImageContainerInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image_container_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image_container_info")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsAPIImageIssuesSummary) validateImageDetections(formats strfmt.Registry) error {

	if err := validate.Required("image_detections", "body", m.ImageDetections); err != nil {
		return err
	}

	for i := 0; i < len(m.ImageDetections); i++ {
		if swag.IsZero(m.ImageDetections[i]) { // not required
			continue
		}

		if m.ImageDetections[i] != nil {
			if err := m.ImageDetections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("image_detections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("image_detections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsAPIImageIssuesSummary) validateIsDcaRun(formats strfmt.Registry) error {

	if err := validate.Required("is_dca_run", "body", m.IsDcaRun); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIImageIssuesSummary) validateKnownIssues(formats strfmt.Registry) error {

	if err := validate.Required("known_issues", "body", m.KnownIssues); err != nil {
		return err
	}

	return nil
}

func (m *ModelsAPIImageIssuesSummary) validatePackagesInfo(formats strfmt.Registry) error {

	if err := validate.Required("packages_info", "body", m.PackagesInfo); err != nil {
		return err
	}

	if m.PackagesInfo != nil {
		if err := m.PackagesInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packages_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packages_info")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsAPIImageIssuesSummary) validatePoliciesSummary(formats strfmt.Registry) error {

	if err := validate.Required("policies_summary", "body", m.PoliciesSummary); err != nil {
		return err
	}

	for i := 0; i < len(m.PoliciesSummary); i++ {
		if swag.IsZero(m.PoliciesSummary[i]) { // not required
			continue
		}

		if m.PoliciesSummary[i] != nil {
			if err := m.PoliciesSummary[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policies_summary" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policies_summary" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsAPIImageIssuesSummary) validateRuntimeDetections(formats strfmt.Registry) error {

	if err := validate.Required("runtime_detections", "body", m.RuntimeDetections); err != nil {
		return err
	}

	for i := 0; i < len(m.RuntimeDetections); i++ {
		if swag.IsZero(m.RuntimeDetections[i]) { // not required
			continue
		}

		if m.RuntimeDetections[i] != nil {
			if err := m.RuntimeDetections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("runtime_detections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("runtime_detections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsAPIImageIssuesSummary) validateVulnerabilitiesSummary(formats strfmt.Registry) error {

	if err := validate.Required("vulnerabilities_summary", "body", m.VulnerabilitiesSummary); err != nil {
		return err
	}

	for i := 0; i < len(m.VulnerabilitiesSummary); i++ {
		if swag.IsZero(m.VulnerabilitiesSummary[i]) { // not required
			continue
		}

		if m.VulnerabilitiesSummary[i] != nil {
			if err := m.VulnerabilitiesSummary[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vulnerabilities_summary" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vulnerabilities_summary" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsAPIImageIssuesSummary) validateZeroDayImpacted(formats strfmt.Registry) error {

	if err := validate.Required("zero_day_impacted", "body", m.ZeroDayImpacted); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this models API image issues summary based on the context it is used
func (m *ModelsAPIImageIssuesSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateImageContainerInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImageDetections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackagesInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePoliciesSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRuntimeDetections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVulnerabilitiesSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsAPIImageIssuesSummary) contextValidateImageContainerInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ImageContainerInfo != nil {

		if err := m.ImageContainerInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image_container_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image_container_info")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsAPIImageIssuesSummary) contextValidateImageDetections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ImageDetections); i++ {

		if m.ImageDetections[i] != nil {

			if swag.IsZero(m.ImageDetections[i]) { // not required
				return nil
			}

			if err := m.ImageDetections[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("image_detections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("image_detections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsAPIImageIssuesSummary) contextValidatePackagesInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.PackagesInfo != nil {

		if err := m.PackagesInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packages_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packages_info")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsAPIImageIssuesSummary) contextValidatePoliciesSummary(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PoliciesSummary); i++ {

		if m.PoliciesSummary[i] != nil {

			if swag.IsZero(m.PoliciesSummary[i]) { // not required
				return nil
			}

			if err := m.PoliciesSummary[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policies_summary" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policies_summary" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsAPIImageIssuesSummary) contextValidateRuntimeDetections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RuntimeDetections); i++ {

		if m.RuntimeDetections[i] != nil {

			if swag.IsZero(m.RuntimeDetections[i]) { // not required
				return nil
			}

			if err := m.RuntimeDetections[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("runtime_detections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("runtime_detections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsAPIImageIssuesSummary) contextValidateVulnerabilitiesSummary(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VulnerabilitiesSummary); i++ {

		if m.VulnerabilitiesSummary[i] != nil {

			if swag.IsZero(m.VulnerabilitiesSummary[i]) { // not required
				return nil
			}

			if err := m.VulnerabilitiesSummary[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vulnerabilities_summary" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vulnerabilities_summary" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsAPIImageIssuesSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsAPIImageIssuesSummary) UnmarshalBinary(b []byte) error {
	var res ModelsAPIImageIssuesSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
