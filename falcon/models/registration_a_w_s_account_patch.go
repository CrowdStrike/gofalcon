// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegistrationAWSAccountPatch registration a w s account patch
//
// swagger:model registration.AWSAccountPatch
type RegistrationAWSAccountPatch struct {

	// account id
	// Required: true
	AccountID *string `json:"account_id"`

	// cloudtrail region
	// Required: true
	CloudtrailRegion *string `json:"cloudtrail_region"`
}

// Validate validates this registration a w s account patch
func (m *RegistrationAWSAccountPatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudtrailRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegistrationAWSAccountPatch) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("account_id", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationAWSAccountPatch) validateCloudtrailRegion(formats strfmt.Registry) error {

	if err := validate.Required("cloudtrail_region", "body", m.CloudtrailRegion); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this registration a w s account patch based on context it is used
func (m *RegistrationAWSAccountPatch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RegistrationAWSAccountPatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegistrationAWSAccountPatch) UnmarshalBinary(b []byte) error {
	var res RegistrationAWSAccountPatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
