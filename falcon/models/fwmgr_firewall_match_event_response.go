// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FwmgrFirewallMatchEventResponse fwmgr firewall match event response
//
// swagger:model fwmgr.firewall.MatchEventResponse
type FwmgrFirewallMatchEventResponse struct {

	// aid
	// Required: true
	Aid *string `json:"aid"`

	// cid
	// Required: true
	Cid *string `json:"cid"`

	// command line
	// Required: true
	CommandLine *string `json:"command_line"`

	// connection direction
	// Required: true
	ConnectionDirection *string `json:"connection_direction"`

	// event type
	// Required: true
	EventType *string `json:"event_type"`

	// flags
	// Required: true
	Flags *FwmgrFirewallFlags `json:"flags"`

	// hidden
	// Required: true
	Hidden *bool `json:"hidden"`

	// host name
	// Required: true
	HostName *string `json:"host_name"`

	// icmp code
	// Required: true
	IcmpCode *string `json:"icmp_code"`

	// icmp type
	// Required: true
	IcmpType *string `json:"icmp_type"`

	// id
	// Required: true
	ID *string `json:"id"`

	// image file name
	// Required: true
	ImageFileName *string `json:"image_file_name"`

	// ipv
	// Required: true
	Ipv *string `json:"ipv"`

	// local address
	// Required: true
	LocalAddress *string `json:"local_address"`

	// local port
	// Required: true
	LocalPort *string `json:"local_port"`

	// match count
	// Required: true
	MatchCount *string `json:"match_count"`

	// match count since last event
	// Required: true
	MatchCountSinceLastEvent *string `json:"match_count_since_last_event"`

	// network profile
	// Required: true
	NetworkProfile *string `json:"network_profile"`

	// pid
	// Required: true
	Pid *string `json:"pid"`

	// platform
	// Required: true
	Platform *string `json:"platform"`

	// policy id
	// Required: true
	PolicyID *string `json:"policy_id"`

	// policy name
	// Required: true
	PolicyName *string `json:"policy_name"`

	// protocol
	// Required: true
	Protocol *string `json:"protocol"`

	// remote address
	// Required: true
	RemoteAddress *string `json:"remote_address"`

	// remote port
	// Required: true
	RemotePort *string `json:"remote_port"`

	// rule action
	// Required: true
	RuleAction *string `json:"rule_action"`

	// rule description
	// Required: true
	RuleDescription *string `json:"rule_description"`

	// rule family id
	// Required: true
	RuleFamilyID *string `json:"rule_family_id"`

	// rule group name
	// Required: true
	RuleGroupName *string `json:"rule_group_name"`

	// rule id
	// Required: true
	RuleID *string `json:"rule_id"`

	// rule name
	// Required: true
	RuleName *string `json:"rule_name"`

	// status
	// Required: true
	Status *string `json:"status"`

	// timestamp
	// Required: true
	Timestamp *string `json:"timestamp"`

	// tree id
	// Required: true
	TreeID *string `json:"tree_id"`
}

// Validate validates this fwmgr firewall match event response
func (m *FwmgrFirewallMatchEventResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommandLine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHidden(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIcmpCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIcmpType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageFileName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIpv(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchCountSinceLastEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemotePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleFamilyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleGroupName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTreeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateAid(formats strfmt.Registry) error {

	if err := validate.Required("aid", "body", m.Aid); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateCid(formats strfmt.Registry) error {

	if err := validate.Required("cid", "body", m.Cid); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateCommandLine(formats strfmt.Registry) error {

	if err := validate.Required("command_line", "body", m.CommandLine); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateConnectionDirection(formats strfmt.Registry) error {

	if err := validate.Required("connection_direction", "body", m.ConnectionDirection); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateEventType(formats strfmt.Registry) error {

	if err := validate.Required("event_type", "body", m.EventType); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateFlags(formats strfmt.Registry) error {

	if err := validate.Required("flags", "body", m.Flags); err != nil {
		return err
	}

	if m.Flags != nil {
		if err := m.Flags.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flags")
			}
			return err
		}
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateHidden(formats strfmt.Registry) error {

	if err := validate.Required("hidden", "body", m.Hidden); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateHostName(formats strfmt.Registry) error {

	if err := validate.Required("host_name", "body", m.HostName); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateIcmpCode(formats strfmt.Registry) error {

	if err := validate.Required("icmp_code", "body", m.IcmpCode); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateIcmpType(formats strfmt.Registry) error {

	if err := validate.Required("icmp_type", "body", m.IcmpType); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateImageFileName(formats strfmt.Registry) error {

	if err := validate.Required("image_file_name", "body", m.ImageFileName); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateIpv(formats strfmt.Registry) error {

	if err := validate.Required("ipv", "body", m.Ipv); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateLocalAddress(formats strfmt.Registry) error {

	if err := validate.Required("local_address", "body", m.LocalAddress); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateLocalPort(formats strfmt.Registry) error {

	if err := validate.Required("local_port", "body", m.LocalPort); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateMatchCount(formats strfmt.Registry) error {

	if err := validate.Required("match_count", "body", m.MatchCount); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateMatchCountSinceLastEvent(formats strfmt.Registry) error {

	if err := validate.Required("match_count_since_last_event", "body", m.MatchCountSinceLastEvent); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateNetworkProfile(formats strfmt.Registry) error {

	if err := validate.Required("network_profile", "body", m.NetworkProfile); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validatePid(formats strfmt.Registry) error {

	if err := validate.Required("pid", "body", m.Pid); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validatePolicyID(formats strfmt.Registry) error {

	if err := validate.Required("policy_id", "body", m.PolicyID); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validatePolicyName(formats strfmt.Registry) error {

	if err := validate.Required("policy_name", "body", m.PolicyName); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateRemoteAddress(formats strfmt.Registry) error {

	if err := validate.Required("remote_address", "body", m.RemoteAddress); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateRemotePort(formats strfmt.Registry) error {

	if err := validate.Required("remote_port", "body", m.RemotePort); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateRuleAction(formats strfmt.Registry) error {

	if err := validate.Required("rule_action", "body", m.RuleAction); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateRuleDescription(formats strfmt.Registry) error {

	if err := validate.Required("rule_description", "body", m.RuleDescription); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateRuleFamilyID(formats strfmt.Registry) error {

	if err := validate.Required("rule_family_id", "body", m.RuleFamilyID); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateRuleGroupName(formats strfmt.Registry) error {

	if err := validate.Required("rule_group_name", "body", m.RuleGroupName); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateRuleID(formats strfmt.Registry) error {

	if err := validate.Required("rule_id", "body", m.RuleID); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateRuleName(formats strfmt.Registry) error {

	if err := validate.Required("rule_name", "body", m.RuleName); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

func (m *FwmgrFirewallMatchEventResponse) validateTreeID(formats strfmt.Registry) error {

	if err := validate.Required("tree_id", "body", m.TreeID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this fwmgr firewall match event response based on the context it is used
func (m *FwmgrFirewallMatchEventResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFlags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FwmgrFirewallMatchEventResponse) contextValidateFlags(ctx context.Context, formats strfmt.Registry) error {

	if m.Flags != nil {
		if err := m.Flags.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flags")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FwmgrFirewallMatchEventResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FwmgrFirewallMatchEventResponse) UnmarshalBinary(b []byte) error {
	var res FwmgrFirewallMatchEventResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
