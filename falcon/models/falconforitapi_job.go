// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FalconforitapiJob falconforitapi job
//
// swagger:model falconforitapi.Job
type FalconforitapiJob struct {

	// arguments
	Arguments map[string]string `json:"arguments,omitempty"`

	// canceled host count
	// Required: true
	CanceledHostCount *int32 `json:"canceled_host_count"`

	// completion percentage
	// Required: true
	CompletionPercentage *float64 `json:"completion_percentage"`

	// composite query
	CompositeQuery *FalconforitapiCompositeQuery `json:"composite_query,omitempty"`

	// discover new hosts interval
	DiscoverNewHostsInterval string `json:"discover_new_hosts_interval,omitempty"`

	// distribution interval
	DistributionInterval string `json:"distribution_interval,omitempty"`

	// end time
	// Required: true
	// Format: date-time
	EndTime *strfmt.DateTime `json:"end_time"`

	// expired host count
	// Required: true
	ExpiredHostCount *int32 `json:"expired_host_count"`

	// failed host count
	// Required: true
	FailedHostCount *int32 `json:"failed_host_count"`

	// guardrails
	Guardrails *FalconforitapiGuardrails `json:"guardrails,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// initiated host count
	// Required: true
	InitiatedHostCount *int32 `json:"initiated_host_count"`

	// job executables
	JobExecutables []*FalconforitapiJobExecutable `json:"job_executables"`

	// job status by stage
	JobStatusByStage *FalconforitapiJobStatusByStage `json:"job_status_by_stage,omitempty"`

	// offline host count
	// Required: true
	OfflineHostCount *int32 `json:"offline_host_count"`

	// os query
	OsQuery string `json:"os_query,omitempty"`

	// platforms
	Platforms []string `json:"platforms"`

	// queries
	Queries *FalconforitapiScripts `json:"queries,omitempty"`

	// queued host count
	// Required: true
	QueuedHostCount *int32 `json:"queued_host_count"`

	// remediation trigger condition
	RemediationTriggerCondition []*FalconforitapiConditionGroup `json:"remediation_trigger_condition"`

	// remediations
	Remediations *FalconforitapiScripts `json:"remediations,omitempty"`

	// run by
	// Required: true
	RunBy *string `json:"run_by"`

	// run type
	// Required: true
	RunType *string `json:"run_type"`

	// running host count
	// Required: true
	RunningHostCount *int32 `json:"running_host_count"`

	// start time
	// Required: true
	// Format: date-time
	StartTime *strfmt.DateTime `json:"start_time"`

	// status
	// Required: true
	Status *string `json:"status"`

	// target
	// Required: true
	Target *string `json:"target"`

	// task id
	TaskID string `json:"task_id,omitempty"`

	// task name
	TaskName string `json:"task_name,omitempty"`

	// task parameters
	TaskParameters []*FalconforitapiTaskParameter `json:"task_parameters"`

	// task type
	// Required: true
	TaskType *string `json:"task_type"`

	// total host count
	// Required: true
	TotalHostCount *int32 `json:"total_host_count"`

	// total results
	TotalResults int64 `json:"total_results,omitempty"`

	// total success
	// Required: true
	TotalSuccess *int32 `json:"total_success"`

	// verification condition
	VerificationCondition []*FalconforitapiConditionGroup `json:"verification_condition"`

	// wait time
	WaitTime string `json:"wait_time,omitempty"`
}

// Validate validates this falconforitapi job
func (m *FalconforitapiJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCanceledHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompletionPercentage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompositeQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiredHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuardrails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiatedHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobExecutables(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobStatusByStage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfflineHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueuedHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediationTriggerCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemediations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalHostCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalSuccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerificationCondition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiJob) validateCanceledHostCount(formats strfmt.Registry) error {

	if err := validate.Required("canceled_host_count", "body", m.CanceledHostCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJob) validateCompletionPercentage(formats strfmt.Registry) error {

	if err := validate.Required("completion_percentage", "body", m.CompletionPercentage); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJob) validateCompositeQuery(formats strfmt.Registry) error {
	if swag.IsZero(m.CompositeQuery) { // not required
		return nil
	}

	if m.CompositeQuery != nil {
		if err := m.CompositeQuery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("composite_query")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("composite_query")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiJob) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("end_time", "body", m.EndTime); err != nil {
		return err
	}

	if err := validate.FormatOf("end_time", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJob) validateExpiredHostCount(formats strfmt.Registry) error {

	if err := validate.Required("expired_host_count", "body", m.ExpiredHostCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJob) validateFailedHostCount(formats strfmt.Registry) error {

	if err := validate.Required("failed_host_count", "body", m.FailedHostCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJob) validateGuardrails(formats strfmt.Registry) error {
	if swag.IsZero(m.Guardrails) { // not required
		return nil
	}

	if m.Guardrails != nil {
		if err := m.Guardrails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guardrails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guardrails")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiJob) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJob) validateInitiatedHostCount(formats strfmt.Registry) error {

	if err := validate.Required("initiated_host_count", "body", m.InitiatedHostCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJob) validateJobExecutables(formats strfmt.Registry) error {
	if swag.IsZero(m.JobExecutables) { // not required
		return nil
	}

	for i := 0; i < len(m.JobExecutables); i++ {
		if swag.IsZero(m.JobExecutables[i]) { // not required
			continue
		}

		if m.JobExecutables[i] != nil {
			if err := m.JobExecutables[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("job_executables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("job_executables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconforitapiJob) validateJobStatusByStage(formats strfmt.Registry) error {
	if swag.IsZero(m.JobStatusByStage) { // not required
		return nil
	}

	if m.JobStatusByStage != nil {
		if err := m.JobStatusByStage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job_status_by_stage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("job_status_by_stage")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiJob) validateOfflineHostCount(formats strfmt.Registry) error {

	if err := validate.Required("offline_host_count", "body", m.OfflineHostCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJob) validateQueries(formats strfmt.Registry) error {
	if swag.IsZero(m.Queries) { // not required
		return nil
	}

	if m.Queries != nil {
		if err := m.Queries.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queries")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queries")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiJob) validateQueuedHostCount(formats strfmt.Registry) error {

	if err := validate.Required("queued_host_count", "body", m.QueuedHostCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJob) validateRemediationTriggerCondition(formats strfmt.Registry) error {
	if swag.IsZero(m.RemediationTriggerCondition) { // not required
		return nil
	}

	for i := 0; i < len(m.RemediationTriggerCondition); i++ {
		if swag.IsZero(m.RemediationTriggerCondition[i]) { // not required
			continue
		}

		if m.RemediationTriggerCondition[i] != nil {
			if err := m.RemediationTriggerCondition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remediation_trigger_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remediation_trigger_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconforitapiJob) validateRemediations(formats strfmt.Registry) error {
	if swag.IsZero(m.Remediations) { // not required
		return nil
	}

	if m.Remediations != nil {
		if err := m.Remediations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remediations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remediations")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiJob) validateRunBy(formats strfmt.Registry) error {

	if err := validate.Required("run_by", "body", m.RunBy); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJob) validateRunType(formats strfmt.Registry) error {

	if err := validate.Required("run_type", "body", m.RunType); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJob) validateRunningHostCount(formats strfmt.Registry) error {

	if err := validate.Required("running_host_count", "body", m.RunningHostCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJob) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("start_time", "body", m.StartTime); err != nil {
		return err
	}

	if err := validate.FormatOf("start_time", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJob) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJob) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJob) validateTaskParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.TaskParameters) { // not required
		return nil
	}

	for i := 0; i < len(m.TaskParameters); i++ {
		if swag.IsZero(m.TaskParameters[i]) { // not required
			continue
		}

		if m.TaskParameters[i] != nil {
			if err := m.TaskParameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("task_parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("task_parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconforitapiJob) validateTaskType(formats strfmt.Registry) error {

	if err := validate.Required("task_type", "body", m.TaskType); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJob) validateTotalHostCount(formats strfmt.Registry) error {

	if err := validate.Required("total_host_count", "body", m.TotalHostCount); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJob) validateTotalSuccess(formats strfmt.Registry) error {

	if err := validate.Required("total_success", "body", m.TotalSuccess); err != nil {
		return err
	}

	return nil
}

func (m *FalconforitapiJob) validateVerificationCondition(formats strfmt.Registry) error {
	if swag.IsZero(m.VerificationCondition) { // not required
		return nil
	}

	for i := 0; i < len(m.VerificationCondition); i++ {
		if swag.IsZero(m.VerificationCondition[i]) { // not required
			continue
		}

		if m.VerificationCondition[i] != nil {
			if err := m.VerificationCondition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this falconforitapi job based on the context it is used
func (m *FalconforitapiJob) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCompositeQuery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGuardrails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJobExecutables(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJobStatusByStage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemediationTriggerCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemediations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaskParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVerificationCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FalconforitapiJob) contextValidateCompositeQuery(ctx context.Context, formats strfmt.Registry) error {

	if m.CompositeQuery != nil {

		if swag.IsZero(m.CompositeQuery) { // not required
			return nil
		}

		if err := m.CompositeQuery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("composite_query")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("composite_query")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiJob) contextValidateGuardrails(ctx context.Context, formats strfmt.Registry) error {

	if m.Guardrails != nil {

		if swag.IsZero(m.Guardrails) { // not required
			return nil
		}

		if err := m.Guardrails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guardrails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guardrails")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiJob) contextValidateJobExecutables(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.JobExecutables); i++ {

		if m.JobExecutables[i] != nil {

			if swag.IsZero(m.JobExecutables[i]) { // not required
				return nil
			}

			if err := m.JobExecutables[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("job_executables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("job_executables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconforitapiJob) contextValidateJobStatusByStage(ctx context.Context, formats strfmt.Registry) error {

	if m.JobStatusByStage != nil {

		if swag.IsZero(m.JobStatusByStage) { // not required
			return nil
		}

		if err := m.JobStatusByStage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job_status_by_stage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("job_status_by_stage")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiJob) contextValidateQueries(ctx context.Context, formats strfmt.Registry) error {

	if m.Queries != nil {

		if swag.IsZero(m.Queries) { // not required
			return nil
		}

		if err := m.Queries.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queries")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queries")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiJob) contextValidateRemediationTriggerCondition(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RemediationTriggerCondition); i++ {

		if m.RemediationTriggerCondition[i] != nil {

			if swag.IsZero(m.RemediationTriggerCondition[i]) { // not required
				return nil
			}

			if err := m.RemediationTriggerCondition[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remediation_trigger_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remediation_trigger_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconforitapiJob) contextValidateRemediations(ctx context.Context, formats strfmt.Registry) error {

	if m.Remediations != nil {

		if swag.IsZero(m.Remediations) { // not required
			return nil
		}

		if err := m.Remediations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remediations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remediations")
			}
			return err
		}
	}

	return nil
}

func (m *FalconforitapiJob) contextValidateTaskParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TaskParameters); i++ {

		if m.TaskParameters[i] != nil {

			if swag.IsZero(m.TaskParameters[i]) { // not required
				return nil
			}

			if err := m.TaskParameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("task_parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("task_parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FalconforitapiJob) contextValidateVerificationCondition(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VerificationCondition); i++ {

		if m.VerificationCondition[i] != nil {

			if swag.IsZero(m.VerificationCondition[i]) { // not required
				return nil
			}

			if err := m.VerificationCondition[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("verification_condition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FalconforitapiJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FalconforitapiJob) UnmarshalBinary(b []byte) error {
	var res FalconforitapiJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
