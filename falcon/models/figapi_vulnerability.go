// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FigapiVulnerability figapi vulnerability
//
// swagger:model figapi.Vulnerability
type FigapiVulnerability struct {

	// c p e edition
	CPEEdition string `json:"CPEEdition,omitempty"`

	// c p e language
	CPELanguage string `json:"CPELanguage,omitempty"`

	// c p e other
	CPEOther string `json:"CPEOther,omitempty"`

	// c p e part
	CPEPart string `json:"CPEPart,omitempty"`

	// c p e product
	CPEProduct string `json:"CPEProduct,omitempty"`

	// c p e software edition
	CPESoftwareEdition string `json:"CPESoftwareEdition,omitempty"`

	// c p e target hardware
	CPETargetHardware string `json:"CPETargetHardware,omitempty"`

	// c p e target software
	CPETargetSoftware string `json:"CPETargetSoftware,omitempty"`

	// c p e update
	CPEUpdate string `json:"CPEUpdate,omitempty"`

	// c p e vendor
	CPEVendor string `json:"CPEVendor,omitempty"`

	// c p e version
	CPEVersion string `json:"CPEVersion,omitempty"`

	// CVE(Common Vulnerabilities and Exposures) is a unique identifier assigned to publicly disclosed cyber security vulnerabilities
	CVE string `json:"CVE,omitempty"`

	// Description of the vulnerability.
	Description string `json:"Description,omitempty"`

	// This can be one of: `Unproven`, `Available`, `EasilyAccessible`, `ActivelyUsed`.
	ExploitStatus string `json:"ExploitStatus,omitempty"`

	// The date when the vulnerability was last updated
	LastUpdated string `json:"LastUpdated,omitempty"`

	// The date when the vulnerability was published
	PublishedDate string `json:"PublishedDate,omitempty"`
}

// Validate validates this figapi vulnerability
func (m *FigapiVulnerability) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this figapi vulnerability based on context it is used
func (m *FigapiVulnerability) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FigapiVulnerability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FigapiVulnerability) UnmarshalBinary(b []byte) error {
	var res FigapiVulnerability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
