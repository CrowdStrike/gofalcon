// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainCreateSubmissionV1ErrorResponse domain create submission v1 error response
//
// swagger:model domain.CreateSubmissionV1ErrorResponse
type DomainCreateSubmissionV1ErrorResponse struct {

	// analyzer
	// Required: true
	// Enum: [rapidscan]
	Analyzer *string `json:"analyzer"`

	// entity
	// Required: true
	Entity *string `json:"entity"`

	// type
	// Required: true
	// Enum: [file]
	Type *string `json:"type"`
}

// Validate validates this domain create submission v1 error response
func (m *DomainCreateSubmissionV1ErrorResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnalyzer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var domainCreateSubmissionV1ErrorResponseTypeAnalyzerPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["rapidscan"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainCreateSubmissionV1ErrorResponseTypeAnalyzerPropEnum = append(domainCreateSubmissionV1ErrorResponseTypeAnalyzerPropEnum, v)
	}
}

const (

	// DomainCreateSubmissionV1ErrorResponseAnalyzerRapidscan captures enum value "rapidscan"
	DomainCreateSubmissionV1ErrorResponseAnalyzerRapidscan string = "rapidscan"
)

// prop value enum
func (m *DomainCreateSubmissionV1ErrorResponse) validateAnalyzerEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, domainCreateSubmissionV1ErrorResponseTypeAnalyzerPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DomainCreateSubmissionV1ErrorResponse) validateAnalyzer(formats strfmt.Registry) error {

	if err := validate.Required("analyzer", "body", m.Analyzer); err != nil {
		return err
	}

	// value enum
	if err := m.validateAnalyzerEnum("analyzer", "body", *m.Analyzer); err != nil {
		return err
	}

	return nil
}

func (m *DomainCreateSubmissionV1ErrorResponse) validateEntity(formats strfmt.Registry) error {

	if err := validate.Required("entity", "body", m.Entity); err != nil {
		return err
	}

	return nil
}

var domainCreateSubmissionV1ErrorResponseTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["file"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainCreateSubmissionV1ErrorResponseTypeTypePropEnum = append(domainCreateSubmissionV1ErrorResponseTypeTypePropEnum, v)
	}
}

const (

	// DomainCreateSubmissionV1ErrorResponseTypeFile captures enum value "file"
	DomainCreateSubmissionV1ErrorResponseTypeFile string = "file"
)

// prop value enum
func (m *DomainCreateSubmissionV1ErrorResponse) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, domainCreateSubmissionV1ErrorResponseTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DomainCreateSubmissionV1ErrorResponse) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain create submission v1 error response based on context it is used
func (m *DomainCreateSubmissionV1ErrorResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainCreateSubmissionV1ErrorResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainCreateSubmissionV1ErrorResponse) UnmarshalBinary(b []byte) error {
	var res DomainCreateSubmissionV1ErrorResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
