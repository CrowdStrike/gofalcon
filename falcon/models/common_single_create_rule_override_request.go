// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonSingleCreateRuleOverrideRequest common single create rule override request
//
// swagger:model common.SingleCreateRuleOverrideRequest
type CommonSingleCreateRuleOverrideRequest struct {

	// comment
	// Required: true
	Comment *string `json:"comment"`

	// crn
	// Required: true
	Crn *string `json:"crn"`

	// expires at
	// Format: date-time
	ExpiresAt strfmt.DateTime `json:"expires_at,omitempty"`

	// override type
	// Required: true
	OverrideType *string `json:"override_type"`

	// overrides details
	// Required: true
	OverridesDetails *string `json:"overrides_details"`

	// reason
	// Required: true
	Reason *string `json:"reason"`

	// rule id
	// Required: true
	RuleID *string `json:"rule_id"`

	// target region
	// Required: true
	TargetRegion *string `json:"target_region"`
}

// Validate validates this common single create rule override request
func (m *CommonSingleCreateRuleOverrideRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverrideType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverridesDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonSingleCreateRuleOverrideRequest) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("comment", "body", m.Comment); err != nil {
		return err
	}

	return nil
}

func (m *CommonSingleCreateRuleOverrideRequest) validateCrn(formats strfmt.Registry) error {

	if err := validate.Required("crn", "body", m.Crn); err != nil {
		return err
	}

	return nil
}

func (m *CommonSingleCreateRuleOverrideRequest) validateExpiresAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpiresAt) { // not required
		return nil
	}

	if err := validate.FormatOf("expires_at", "body", "date-time", m.ExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CommonSingleCreateRuleOverrideRequest) validateOverrideType(formats strfmt.Registry) error {

	if err := validate.Required("override_type", "body", m.OverrideType); err != nil {
		return err
	}

	return nil
}

func (m *CommonSingleCreateRuleOverrideRequest) validateOverridesDetails(formats strfmt.Registry) error {

	if err := validate.Required("overrides_details", "body", m.OverridesDetails); err != nil {
		return err
	}

	return nil
}

func (m *CommonSingleCreateRuleOverrideRequest) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("reason", "body", m.Reason); err != nil {
		return err
	}

	return nil
}

func (m *CommonSingleCreateRuleOverrideRequest) validateRuleID(formats strfmt.Registry) error {

	if err := validate.Required("rule_id", "body", m.RuleID); err != nil {
		return err
	}

	return nil
}

func (m *CommonSingleCreateRuleOverrideRequest) validateTargetRegion(formats strfmt.Registry) error {

	if err := validate.Required("target_region", "body", m.TargetRegion); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this common single create rule override request based on context it is used
func (m *CommonSingleCreateRuleOverrideRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CommonSingleCreateRuleOverrideRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonSingleCreateRuleOverrideRequest) UnmarshalBinary(b []byte) error {
	var res CommonSingleCreateRuleOverrideRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
