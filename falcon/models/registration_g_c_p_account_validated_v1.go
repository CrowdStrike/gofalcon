// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegistrationGCPAccountValidatedV1 registration g c p account validated v1
//
// swagger:model registration.GCPAccountValidatedV1
type RegistrationGCPAccountValidatedV1 struct {

	// Account conditions
	Conditions []*DomainCondition `json:"conditions"`

	// Permissions status
	// Required: true
	GcpPermissionsStatus []*DomainPermission `json:"gcp_permissions_status"`

	// parent id
	// Required: true
	ParentID *string `json:"parent_id"`

	// service account conditions
	ServiceAccountConditions []*DomainCondition `json:"service_account_conditions"`

	// Service account ID
	ServiceAccountID int64 `json:"service_account_id,omitempty"`

	// Account registration status
	Status string `json:"status,omitempty"`
}

// Validate validates this registration g c p account validated v1
func (m *RegistrationGCPAccountValidatedV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpPermissionsStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceAccountConditions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegistrationGCPAccountValidatedV1) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegistrationGCPAccountValidatedV1) validateGcpPermissionsStatus(formats strfmt.Registry) error {

	if err := validate.Required("gcp_permissions_status", "body", m.GcpPermissionsStatus); err != nil {
		return err
	}

	for i := 0; i < len(m.GcpPermissionsStatus); i++ {
		if swag.IsZero(m.GcpPermissionsStatus[i]) { // not required
			continue
		}

		if m.GcpPermissionsStatus[i] != nil {
			if err := m.GcpPermissionsStatus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gcp_permissions_status" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("gcp_permissions_status" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegistrationGCPAccountValidatedV1) validateParentID(formats strfmt.Registry) error {

	if err := validate.Required("parent_id", "body", m.ParentID); err != nil {
		return err
	}

	return nil
}

func (m *RegistrationGCPAccountValidatedV1) validateServiceAccountConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceAccountConditions) { // not required
		return nil
	}

	for i := 0; i < len(m.ServiceAccountConditions); i++ {
		if swag.IsZero(m.ServiceAccountConditions[i]) { // not required
			continue
		}

		if m.ServiceAccountConditions[i] != nil {
			if err := m.ServiceAccountConditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("service_account_conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("service_account_conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this registration g c p account validated v1 based on the context it is used
func (m *RegistrationGCPAccountValidatedV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcpPermissionsStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceAccountConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegistrationGCPAccountValidatedV1) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {

			if swag.IsZero(m.Conditions[i]) { // not required
				return nil
			}

			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegistrationGCPAccountValidatedV1) contextValidateGcpPermissionsStatus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GcpPermissionsStatus); i++ {

		if m.GcpPermissionsStatus[i] != nil {

			if swag.IsZero(m.GcpPermissionsStatus[i]) { // not required
				return nil
			}

			if err := m.GcpPermissionsStatus[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gcp_permissions_status" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("gcp_permissions_status" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegistrationGCPAccountValidatedV1) contextValidateServiceAccountConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ServiceAccountConditions); i++ {

		if m.ServiceAccountConditions[i] != nil {

			if swag.IsZero(m.ServiceAccountConditions[i]) { // not required
				return nil
			}

			if err := m.ServiceAccountConditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("service_account_conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("service_account_conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegistrationGCPAccountValidatedV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegistrationGCPAccountValidatedV1) UnmarshalBinary(b []byte) error {
	var res RegistrationGCPAccountValidatedV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
