// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIPatchRuleOperationV1 api patch rule operation v1
//
// swagger:model api.PatchRuleOperationV1
type APIPatchRuleOperationV1 struct {

	// schedule
	Schedule *APIRuleScheduleV1Patch `json:"schedule,omitempty"`

	// start on
	// Format: date-time
	StartOn strfmt.DateTime `json:"start_on,omitempty"`

	// stop on
	// Required: true
	StopOn *string `json:"stop_on"`
}

// Validate validates this api patch rule operation v1
func (m *APIPatchRuleOperationV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIPatchRuleOperationV1) validateSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *APIPatchRuleOperationV1) validateStartOn(formats strfmt.Registry) error {
	if swag.IsZero(m.StartOn) { // not required
		return nil
	}

	if err := validate.FormatOf("start_on", "body", "date-time", m.StartOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APIPatchRuleOperationV1) validateStopOn(formats strfmt.Registry) error {

	if err := validate.Required("stop_on", "body", m.StopOn); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this api patch rule operation v1 based on the context it is used
func (m *APIPatchRuleOperationV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIPatchRuleOperationV1) contextValidateSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.Schedule != nil {

		if swag.IsZero(m.Schedule) { // not required
			return nil
		}

		if err := m.Schedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIPatchRuleOperationV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIPatchRuleOperationV1) UnmarshalBinary(b []byte) error {
	var res APIPatchRuleOperationV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
