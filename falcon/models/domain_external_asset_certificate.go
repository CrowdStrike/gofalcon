// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainExternalAssetCertificate domain external asset certificate
//
// swagger:model domain.ExternalAssetCertificate
type DomainExternalAssetCertificate struct {

	// ciphers
	Ciphers []String `json:"ciphers"`

	// fingerprint sha256
	FingerprintSha256 string `json:"fingerprint_sha256,omitempty"`

	// issuer
	Issuer *DomainExternalAssetCertificateEntityIdentifiers `json:"issuer,omitempty"`

	// pubkey bits
	PubkeyBits int64 `json:"pubkey_bits,omitempty"`

	// pubkey type
	PubkeyType string `json:"pubkey_type,omitempty"`

	// serial
	Serial string `json:"serial,omitempty"`

	// signature algorithm
	SignatureAlgorithm string `json:"signature_algorithm,omitempty"`

	// subject
	Subject *DomainExternalAssetCertificateEntityIdentifiers `json:"subject,omitempty"`

	// valid from
	// Format: date-time
	ValidFrom strfmt.DateTime `json:"valid_from,omitempty"`

	// valid to
	// Format: date-time
	ValidTo strfmt.DateTime `json:"valid_to,omitempty"`
}

// Validate validates this domain external asset certificate
func (m *DomainExternalAssetCertificate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainExternalAssetCertificate) validateIssuer(formats strfmt.Registry) error {
	if swag.IsZero(m.Issuer) { // not required
		return nil
	}

	if m.Issuer != nil {
		if err := m.Issuer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("issuer")
			}
			return err
		}
	}

	return nil
}

func (m *DomainExternalAssetCertificate) validateSubject(formats strfmt.Registry) error {
	if swag.IsZero(m.Subject) { // not required
		return nil
	}

	if m.Subject != nil {
		if err := m.Subject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject")
			}
			return err
		}
	}

	return nil
}

func (m *DomainExternalAssetCertificate) validateValidFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidFrom) { // not required
		return nil
	}

	if err := validate.FormatOf("valid_from", "body", "date-time", m.ValidFrom.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainExternalAssetCertificate) validateValidTo(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidTo) { // not required
		return nil
	}

	if err := validate.FormatOf("valid_to", "body", "date-time", m.ValidTo.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this domain external asset certificate based on the context it is used
func (m *DomainExternalAssetCertificate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIssuer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainExternalAssetCertificate) contextValidateIssuer(ctx context.Context, formats strfmt.Registry) error {

	if m.Issuer != nil {

		if swag.IsZero(m.Issuer) { // not required
			return nil
		}

		if err := m.Issuer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("issuer")
			}
			return err
		}
	}

	return nil
}

func (m *DomainExternalAssetCertificate) contextValidateSubject(ctx context.Context, formats strfmt.Registry) error {

	if m.Subject != nil {

		if swag.IsZero(m.Subject) { // not required
			return nil
		}

		if err := m.Subject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainExternalAssetCertificate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainExternalAssetCertificate) UnmarshalBinary(b []byte) error {
	var res DomainExternalAssetCertificate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
