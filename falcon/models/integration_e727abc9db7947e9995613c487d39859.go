// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntegrationE727abc9db7947e9995613c487d39859 integration e727abc9db7947e9995613c487d39859
//
// swagger:model Integration_e727abc9db7947e9995613c487d39859
type IntegrationE727abc9db7947e9995613c487d39859 struct {

	// Alias
	// Required: true
	// Min Length: 1
	Alias *string `json:"alias"`

	// Enable
	// Required: true
	Enable *bool `json:"enable"`

	// groups
	// Required: true
	Groups []*string `json:"groups"`

	// Id
	// Required: true
	ID *string `json:"id"`

	// privileged roles
	// Required: true
	PrivilegedRoles []*string `json:"privileged_roles"`

	// Saas id
	// Required: true
	SaasID *string `json:"saas_id"`

	// Saas name
	// Required: true
	// Min Length: 1
	SaasName *string `json:"saas_name"`
}

// Validate validates this integration e727abc9db7947e9995613c487d39859
func (m *IntegrationE727abc9db7947e9995613c487d39859) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlias(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivilegedRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSaasID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSaasName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntegrationE727abc9db7947e9995613c487d39859) validateAlias(formats strfmt.Registry) error {

	if err := validate.Required("alias", "body", m.Alias); err != nil {
		return err
	}

	if err := validate.MinLength("alias", "body", *m.Alias, 1); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationE727abc9db7947e9995613c487d39859) validateEnable(formats strfmt.Registry) error {

	if err := validate.Required("enable", "body", m.Enable); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationE727abc9db7947e9995613c487d39859) validateGroups(formats strfmt.Registry) error {

	if err := validate.Required("groups", "body", m.Groups); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationE727abc9db7947e9995613c487d39859) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationE727abc9db7947e9995613c487d39859) validatePrivilegedRoles(formats strfmt.Registry) error {

	if err := validate.Required("privileged_roles", "body", m.PrivilegedRoles); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationE727abc9db7947e9995613c487d39859) validateSaasID(formats strfmt.Registry) error {

	if err := validate.Required("saas_id", "body", m.SaasID); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationE727abc9db7947e9995613c487d39859) validateSaasName(formats strfmt.Registry) error {

	if err := validate.Required("saas_name", "body", m.SaasName); err != nil {
		return err
	}

	if err := validate.MinLength("saas_name", "body", *m.SaasName, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this integration e727abc9db7947e9995613c487d39859 based on context it is used
func (m *IntegrationE727abc9db7947e9995613c487d39859) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IntegrationE727abc9db7947e9995613c487d39859) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntegrationE727abc9db7947e9995613c487d39859) UnmarshalBinary(b []byte) error {
	var res IntegrationE727abc9db7947e9995613c487d39859
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
