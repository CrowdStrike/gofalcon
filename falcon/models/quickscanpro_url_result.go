// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuickscanproURLResult quickscanpro URL result
//
// swagger:model quickscanpro.URLResult
type QuickscanproURLResult struct {

	// url
	// Required: true
	URL *string `json:"url"`

	// verdict
	// Required: true
	// Enum: ["clean","likely_benign","suspicious","malicious","unknown"]
	Verdict *string `json:"verdict"`

	// verdict reason
	VerdictReason string `json:"verdict_reason,omitempty"`
}

// Validate validates this quickscanpro URL result
func (m *QuickscanproURLResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerdict(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuickscanproURLResult) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

var quickscanproUrlResultTypeVerdictPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["clean","likely_benign","suspicious","malicious","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		quickscanproUrlResultTypeVerdictPropEnum = append(quickscanproUrlResultTypeVerdictPropEnum, v)
	}
}

const (

	// QuickscanproURLResultVerdictClean captures enum value "clean"
	QuickscanproURLResultVerdictClean string = "clean"

	// QuickscanproURLResultVerdictLikelyBenign captures enum value "likely_benign"
	QuickscanproURLResultVerdictLikelyBenign string = "likely_benign"

	// QuickscanproURLResultVerdictSuspicious captures enum value "suspicious"
	QuickscanproURLResultVerdictSuspicious string = "suspicious"

	// QuickscanproURLResultVerdictMalicious captures enum value "malicious"
	QuickscanproURLResultVerdictMalicious string = "malicious"

	// QuickscanproURLResultVerdictUnknown captures enum value "unknown"
	QuickscanproURLResultVerdictUnknown string = "unknown"
)

// prop value enum
func (m *QuickscanproURLResult) validateVerdictEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, quickscanproUrlResultTypeVerdictPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QuickscanproURLResult) validateVerdict(formats strfmt.Registry) error {

	if err := validate.Required("verdict", "body", m.Verdict); err != nil {
		return err
	}

	// value enum
	if err := m.validateVerdictEnum("verdict", "body", *m.Verdict); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this quickscanpro URL result based on context it is used
func (m *QuickscanproURLResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *QuickscanproURLResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuickscanproURLResult) UnmarshalBinary(b []byte) error {
	var res QuickscanproURLResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
