// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIRuleV1 api rule v1
//
// swagger:model api.RuleV1
type APIRuleV1 struct {

	// api client id
	// Required: true
	APIClientID *string `json:"api_client_id"`

	// author
	Author string `json:"author,omitempty"`

	// comment
	Comment string `json:"comment,omitempty"`

	// created on
	// Required: true
	// Format: date-time
	CreatedOn *strfmt.DateTime `json:"created_on"`

	// customer id
	// Required: true
	CustomerID *string `json:"customer_id"`

	// description
	Description string `json:"description,omitempty"`

	// guardrail notifications
	GuardrailNotifications []*APIRuleNotificationsV1 `json:"guardrail_notifications"`

	// id
	// Required: true
	ID *string `json:"id"`

	// last execution
	LastExecution *APIRuleLastExecutionV1 `json:"last_execution,omitempty"`

	// last updated on
	// Required: true
	// Format: date-time
	LastUpdatedOn *strfmt.DateTime `json:"last_updated_on"`

	// mitre attack
	// Required: true
	MitreAttack []*ModelMitreAttackMapping `json:"mitre_attack"`

	// name
	// Required: true
	Name *string `json:"name"`

	// next execution on
	// Format: date-time
	NextExecutionOn strfmt.DateTime `json:"next_execution_on,omitempty"`

	// notifications
	Notifications []*APIRuleNotificationsV1 `json:"notifications"`

	// operation
	// Required: true
	Operation *APIRuleOperationV1 `json:"operation"`

	// rule id
	RuleID string `json:"rule_id,omitempty"`

	// search
	// Required: true
	Search *APIRuleSearchV1 `json:"search"`

	// severity
	// Required: true
	Severity *int32 `json:"severity"`

	// state
	State string `json:"state,omitempty"`

	// status
	// Required: true
	Status *string `json:"status"`

	// tactic
	// Required: true
	Tactic *string `json:"tactic"`

	// technique
	// Required: true
	Technique *string `json:"technique"`

	// template id
	// Required: true
	TemplateID *string `json:"template_id"`

	// type
	// Read Only: true
	Type string `json:"type,omitempty"`

	// updated by api client id
	// Required: true
	UpdatedByAPIClientID *string `json:"updated_by_api_client_id"`

	// updated by user id
	// Required: true
	UpdatedByUserID *string `json:"updated_by_user_id"`

	// updated by user uuid
	// Required: true
	UpdatedByUserUUID *string `json:"updated_by_user_uuid"`

	// user id
	// Required: true
	UserID *string `json:"user_id"`

	// user uuid
	// Required: true
	UserUUID *string `json:"user_uuid"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this api rule v1
func (m *APIRuleV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuardrailNotifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMitreAttack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextExecutionOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSearch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTactic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTechnique(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedByAPIClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedByUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedByUserUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIRuleV1) validateAPIClientID(formats strfmt.Registry) error {

	if err := validate.Required("api_client_id", "body", m.APIClientID); err != nil {
		return err
	}

	return nil
}

func (m *APIRuleV1) validateCreatedOn(formats strfmt.Registry) error {

	if err := validate.Required("created_on", "body", m.CreatedOn); err != nil {
		return err
	}

	if err := validate.FormatOf("created_on", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APIRuleV1) validateCustomerID(formats strfmt.Registry) error {

	if err := validate.Required("customer_id", "body", m.CustomerID); err != nil {
		return err
	}

	return nil
}

func (m *APIRuleV1) validateGuardrailNotifications(formats strfmt.Registry) error {
	if swag.IsZero(m.GuardrailNotifications) { // not required
		return nil
	}

	for i := 0; i < len(m.GuardrailNotifications); i++ {
		if swag.IsZero(m.GuardrailNotifications[i]) { // not required
			continue
		}

		if m.GuardrailNotifications[i] != nil {
			if err := m.GuardrailNotifications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("guardrail_notifications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("guardrail_notifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIRuleV1) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *APIRuleV1) validateLastExecution(formats strfmt.Registry) error {
	if swag.IsZero(m.LastExecution) { // not required
		return nil
	}

	if m.LastExecution != nil {
		if err := m.LastExecution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execution")
			}
			return err
		}
	}

	return nil
}

func (m *APIRuleV1) validateLastUpdatedOn(formats strfmt.Registry) error {

	if err := validate.Required("last_updated_on", "body", m.LastUpdatedOn); err != nil {
		return err
	}

	if err := validate.FormatOf("last_updated_on", "body", "date-time", m.LastUpdatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APIRuleV1) validateMitreAttack(formats strfmt.Registry) error {

	if err := validate.Required("mitre_attack", "body", m.MitreAttack); err != nil {
		return err
	}

	for i := 0; i < len(m.MitreAttack); i++ {
		if swag.IsZero(m.MitreAttack[i]) { // not required
			continue
		}

		if m.MitreAttack[i] != nil {
			if err := m.MitreAttack[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mitre_attack" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mitre_attack" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIRuleV1) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *APIRuleV1) validateNextExecutionOn(formats strfmt.Registry) error {
	if swag.IsZero(m.NextExecutionOn) { // not required
		return nil
	}

	if err := validate.FormatOf("next_execution_on", "body", "date-time", m.NextExecutionOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APIRuleV1) validateNotifications(formats strfmt.Registry) error {
	if swag.IsZero(m.Notifications) { // not required
		return nil
	}

	for i := 0; i < len(m.Notifications); i++ {
		if swag.IsZero(m.Notifications[i]) { // not required
			continue
		}

		if m.Notifications[i] != nil {
			if err := m.Notifications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("notifications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("notifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIRuleV1) validateOperation(formats strfmt.Registry) error {

	if err := validate.Required("operation", "body", m.Operation); err != nil {
		return err
	}

	if m.Operation != nil {
		if err := m.Operation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operation")
			}
			return err
		}
	}

	return nil
}

func (m *APIRuleV1) validateSearch(formats strfmt.Registry) error {

	if err := validate.Required("search", "body", m.Search); err != nil {
		return err
	}

	if m.Search != nil {
		if err := m.Search.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("search")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("search")
			}
			return err
		}
	}

	return nil
}

func (m *APIRuleV1) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *APIRuleV1) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *APIRuleV1) validateTactic(formats strfmt.Registry) error {

	if err := validate.Required("tactic", "body", m.Tactic); err != nil {
		return err
	}

	return nil
}

func (m *APIRuleV1) validateTechnique(formats strfmt.Registry) error {

	if err := validate.Required("technique", "body", m.Technique); err != nil {
		return err
	}

	return nil
}

func (m *APIRuleV1) validateTemplateID(formats strfmt.Registry) error {

	if err := validate.Required("template_id", "body", m.TemplateID); err != nil {
		return err
	}

	return nil
}

func (m *APIRuleV1) validateUpdatedByAPIClientID(formats strfmt.Registry) error {

	if err := validate.Required("updated_by_api_client_id", "body", m.UpdatedByAPIClientID); err != nil {
		return err
	}

	return nil
}

func (m *APIRuleV1) validateUpdatedByUserID(formats strfmt.Registry) error {

	if err := validate.Required("updated_by_user_id", "body", m.UpdatedByUserID); err != nil {
		return err
	}

	return nil
}

func (m *APIRuleV1) validateUpdatedByUserUUID(formats strfmt.Registry) error {

	if err := validate.Required("updated_by_user_uuid", "body", m.UpdatedByUserUUID); err != nil {
		return err
	}

	return nil
}

func (m *APIRuleV1) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

func (m *APIRuleV1) validateUserUUID(formats strfmt.Registry) error {

	if err := validate.Required("user_uuid", "body", m.UserUUID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this api rule v1 based on the context it is used
func (m *APIRuleV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGuardrailNotifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastExecution(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMitreAttack(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNotifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSearch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIRuleV1) contextValidateGuardrailNotifications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GuardrailNotifications); i++ {

		if m.GuardrailNotifications[i] != nil {

			if swag.IsZero(m.GuardrailNotifications[i]) { // not required
				return nil
			}

			if err := m.GuardrailNotifications[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("guardrail_notifications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("guardrail_notifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIRuleV1) contextValidateLastExecution(ctx context.Context, formats strfmt.Registry) error {

	if m.LastExecution != nil {

		if swag.IsZero(m.LastExecution) { // not required
			return nil
		}

		if err := m.LastExecution.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execution")
			}
			return err
		}
	}

	return nil
}

func (m *APIRuleV1) contextValidateMitreAttack(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MitreAttack); i++ {

		if m.MitreAttack[i] != nil {

			if swag.IsZero(m.MitreAttack[i]) { // not required
				return nil
			}

			if err := m.MitreAttack[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mitre_attack" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mitre_attack" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIRuleV1) contextValidateNotifications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Notifications); i++ {

		if m.Notifications[i] != nil {

			if swag.IsZero(m.Notifications[i]) { // not required
				return nil
			}

			if err := m.Notifications[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("notifications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("notifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIRuleV1) contextValidateOperation(ctx context.Context, formats strfmt.Registry) error {

	if m.Operation != nil {

		if err := m.Operation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operation")
			}
			return err
		}
	}

	return nil
}

func (m *APIRuleV1) contextValidateSearch(ctx context.Context, formats strfmt.Registry) error {

	if m.Search != nil {

		if err := m.Search.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("search")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("search")
			}
			return err
		}
	}

	return nil
}

func (m *APIRuleV1) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIRuleV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIRuleV1) UnmarshalBinary(b []byte) error {
	var res APIRuleV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
