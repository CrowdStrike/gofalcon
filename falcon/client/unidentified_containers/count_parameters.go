// Code generated by go-swagger; DO NOT EDIT.

package unidentified_containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCountParams creates a new CountParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCountParams() *CountParams {
	return &CountParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCountParamsWithTimeout creates a new CountParams object
// with the ability to set a timeout on a request.
func NewCountParamsWithTimeout(timeout time.Duration) *CountParams {
	return &CountParams{
		timeout: timeout,
	}
}

// NewCountParamsWithContext creates a new CountParams object
// with the ability to set a context for a request.
func NewCountParamsWithContext(ctx context.Context) *CountParams {
	return &CountParams{
		Context: ctx,
	}
}

// NewCountParamsWithHTTPClient creates a new CountParams object
// with the ability to set a custom HTTPClient for a request.
func NewCountParamsWithHTTPClient(client *http.Client) *CountParams {
	return &CountParams{
		HTTPClient: client,
	}
}

/*
CountParams contains all the parameters to send to the API endpoint

	for the count operation.

	Typically these are written to a http.Request.
*/
type CountParams struct {

	/* Filter.

	   Filter Unidentified Containers using a query in Falcon Query Language (FQL). Supported filters:  assessed_images_count,cid,cluster_name,containers_impacted_count,detections_count,image_assessment_detections_count,last_seen,namespace,node_name,severity,unassessed_images_count,visible_to_k8s
	*/
	Filter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the count params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CountParams) WithDefaults() *CountParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the count params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CountParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the count params
func (o *CountParams) WithTimeout(timeout time.Duration) *CountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the count params
func (o *CountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the count params
func (o *CountParams) WithContext(ctx context.Context) *CountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the count params
func (o *CountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the count params
func (o *CountParams) WithHTTPClient(client *http.Client) *CountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the count params
func (o *CountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the count params
func (o *CountParams) WithFilter(filter *string) *CountParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the count params
func (o *CountParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WriteToRequest writes these params to a swagger request
func (o *CountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
