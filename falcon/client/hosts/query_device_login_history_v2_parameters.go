// Code generated by go-swagger; DO NOT EDIT.

package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// NewQueryDeviceLoginHistoryV2Params creates a new QueryDeviceLoginHistoryV2Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewQueryDeviceLoginHistoryV2Params() *QueryDeviceLoginHistoryV2Params {
	return &QueryDeviceLoginHistoryV2Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewQueryDeviceLoginHistoryV2ParamsWithTimeout creates a new QueryDeviceLoginHistoryV2Params object
// with the ability to set a timeout on a request.
func NewQueryDeviceLoginHistoryV2ParamsWithTimeout(timeout time.Duration) *QueryDeviceLoginHistoryV2Params {
	return &QueryDeviceLoginHistoryV2Params{
		timeout: timeout,
	}
}

// NewQueryDeviceLoginHistoryV2ParamsWithContext creates a new QueryDeviceLoginHistoryV2Params object
// with the ability to set a context for a request.
func NewQueryDeviceLoginHistoryV2ParamsWithContext(ctx context.Context) *QueryDeviceLoginHistoryV2Params {
	return &QueryDeviceLoginHistoryV2Params{
		Context: ctx,
	}
}

// NewQueryDeviceLoginHistoryV2ParamsWithHTTPClient creates a new QueryDeviceLoginHistoryV2Params object
// with the ability to set a custom HTTPClient for a request.
func NewQueryDeviceLoginHistoryV2ParamsWithHTTPClient(client *http.Client) *QueryDeviceLoginHistoryV2Params {
	return &QueryDeviceLoginHistoryV2Params{
		HTTPClient: client,
	}
}

/*
QueryDeviceLoginHistoryV2Params contains all the parameters to send to the API endpoint

	for the query device login history v2 operation.

	Typically these are written to a http.Request.
*/
type QueryDeviceLoginHistoryV2Params struct {

	// Body.
	Body *models.MsaIdsRequest

	/* From.

	   The inclusive beginning of the time window to search.

	   Default: "now-7d"
	*/
	From *string

	/* Limit.

	   The maximum number of results to return [1-100].

	   Default: 10
	*/
	Limit *int64

	/* To.

	   The inclusive end of the time window to search.

	   Default: "now"
	*/
	To *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the query device login history v2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryDeviceLoginHistoryV2Params) WithDefaults() *QueryDeviceLoginHistoryV2Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the query device login history v2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryDeviceLoginHistoryV2Params) SetDefaults() {
	var (
		fromDefault = string("now-7d")

		limitDefault = int64(10)

		toDefault = string("now")
	)

	val := QueryDeviceLoginHistoryV2Params{
		From:  &fromDefault,
		Limit: &limitDefault,
		To:    &toDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the query device login history v2 params
func (o *QueryDeviceLoginHistoryV2Params) WithTimeout(timeout time.Duration) *QueryDeviceLoginHistoryV2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query device login history v2 params
func (o *QueryDeviceLoginHistoryV2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query device login history v2 params
func (o *QueryDeviceLoginHistoryV2Params) WithContext(ctx context.Context) *QueryDeviceLoginHistoryV2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query device login history v2 params
func (o *QueryDeviceLoginHistoryV2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query device login history v2 params
func (o *QueryDeviceLoginHistoryV2Params) WithHTTPClient(client *http.Client) *QueryDeviceLoginHistoryV2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query device login history v2 params
func (o *QueryDeviceLoginHistoryV2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the query device login history v2 params
func (o *QueryDeviceLoginHistoryV2Params) WithBody(body *models.MsaIdsRequest) *QueryDeviceLoginHistoryV2Params {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the query device login history v2 params
func (o *QueryDeviceLoginHistoryV2Params) SetBody(body *models.MsaIdsRequest) {
	o.Body = body
}

// WithFrom adds the from to the query device login history v2 params
func (o *QueryDeviceLoginHistoryV2Params) WithFrom(from *string) *QueryDeviceLoginHistoryV2Params {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the query device login history v2 params
func (o *QueryDeviceLoginHistoryV2Params) SetFrom(from *string) {
	o.From = from
}

// WithLimit adds the limit to the query device login history v2 params
func (o *QueryDeviceLoginHistoryV2Params) WithLimit(limit *int64) *QueryDeviceLoginHistoryV2Params {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the query device login history v2 params
func (o *QueryDeviceLoginHistoryV2Params) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithTo adds the to to the query device login history v2 params
func (o *QueryDeviceLoginHistoryV2Params) WithTo(to *string) *QueryDeviceLoginHistoryV2Params {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the query device login history v2 params
func (o *QueryDeviceLoginHistoryV2Params) SetTo(to *string) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *QueryDeviceLoginHistoryV2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.From != nil {

		// query param from
		var qrFrom string

		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom
		if qFrom != "" {

			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.To != nil {

		// query param to
		var qrTo string

		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo
		if qTo != "" {

			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
