// Code generated by go-swagger; DO NOT EDIT.

package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CombinedDevicesByFilterReader is a Reader for the CombinedDevicesByFilter structure.
type CombinedDevicesByFilterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CombinedDevicesByFilterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCombinedDevicesByFilterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewCombinedDevicesByFilterForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCombinedDevicesByFilterTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCombinedDevicesByFilterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /devices/combined/devices/v1] CombinedDevicesByFilter", response, response.Code())
	}
}

// NewCombinedDevicesByFilterOK creates a CombinedDevicesByFilterOK with default headers values
func NewCombinedDevicesByFilterOK() *CombinedDevicesByFilterOK {
	return &CombinedDevicesByFilterOK{}
}

/*
CombinedDevicesByFilterOK describes a response with status code 200, with default header values.

OK
*/
type CombinedDevicesByFilterOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DeviceapiDeviceCombinedResponseSwagger
}

// IsSuccess returns true when this combined devices by filter o k response has a 2xx status code
func (o *CombinedDevicesByFilterOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this combined devices by filter o k response has a 3xx status code
func (o *CombinedDevicesByFilterOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined devices by filter o k response has a 4xx status code
func (o *CombinedDevicesByFilterOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this combined devices by filter o k response has a 5xx status code
func (o *CombinedDevicesByFilterOK) IsServerError() bool {
	return false
}

// IsCode returns true when this combined devices by filter o k response a status code equal to that given
func (o *CombinedDevicesByFilterOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the combined devices by filter o k response
func (o *CombinedDevicesByFilterOK) Code() int {
	return 200
}

func (o *CombinedDevicesByFilterOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /devices/combined/devices/v1][%d] combinedDevicesByFilterOK %s", 200, payload)
}

func (o *CombinedDevicesByFilterOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /devices/combined/devices/v1][%d] combinedDevicesByFilterOK %s", 200, payload)
}

func (o *CombinedDevicesByFilterOK) GetPayload() *models.DeviceapiDeviceCombinedResponseSwagger {
	return o.Payload
}

func (o *CombinedDevicesByFilterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DeviceapiDeviceCombinedResponseSwagger)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedDevicesByFilterForbidden creates a CombinedDevicesByFilterForbidden with default headers values
func NewCombinedDevicesByFilterForbidden() *CombinedDevicesByFilterForbidden {
	return &CombinedDevicesByFilterForbidden{}
}

/*
CombinedDevicesByFilterForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CombinedDevicesByFilterForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this combined devices by filter forbidden response has a 2xx status code
func (o *CombinedDevicesByFilterForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined devices by filter forbidden response has a 3xx status code
func (o *CombinedDevicesByFilterForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined devices by filter forbidden response has a 4xx status code
func (o *CombinedDevicesByFilterForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this combined devices by filter forbidden response has a 5xx status code
func (o *CombinedDevicesByFilterForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this combined devices by filter forbidden response a status code equal to that given
func (o *CombinedDevicesByFilterForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the combined devices by filter forbidden response
func (o *CombinedDevicesByFilterForbidden) Code() int {
	return 403
}

func (o *CombinedDevicesByFilterForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /devices/combined/devices/v1][%d] combinedDevicesByFilterForbidden %s", 403, payload)
}

func (o *CombinedDevicesByFilterForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /devices/combined/devices/v1][%d] combinedDevicesByFilterForbidden %s", 403, payload)
}

func (o *CombinedDevicesByFilterForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CombinedDevicesByFilterForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedDevicesByFilterTooManyRequests creates a CombinedDevicesByFilterTooManyRequests with default headers values
func NewCombinedDevicesByFilterTooManyRequests() *CombinedDevicesByFilterTooManyRequests {
	return &CombinedDevicesByFilterTooManyRequests{}
}

/*
CombinedDevicesByFilterTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CombinedDevicesByFilterTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this combined devices by filter too many requests response has a 2xx status code
func (o *CombinedDevicesByFilterTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined devices by filter too many requests response has a 3xx status code
func (o *CombinedDevicesByFilterTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined devices by filter too many requests response has a 4xx status code
func (o *CombinedDevicesByFilterTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this combined devices by filter too many requests response has a 5xx status code
func (o *CombinedDevicesByFilterTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this combined devices by filter too many requests response a status code equal to that given
func (o *CombinedDevicesByFilterTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the combined devices by filter too many requests response
func (o *CombinedDevicesByFilterTooManyRequests) Code() int {
	return 429
}

func (o *CombinedDevicesByFilterTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /devices/combined/devices/v1][%d] combinedDevicesByFilterTooManyRequests %s", 429, payload)
}

func (o *CombinedDevicesByFilterTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /devices/combined/devices/v1][%d] combinedDevicesByFilterTooManyRequests %s", 429, payload)
}

func (o *CombinedDevicesByFilterTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CombinedDevicesByFilterTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedDevicesByFilterInternalServerError creates a CombinedDevicesByFilterInternalServerError with default headers values
func NewCombinedDevicesByFilterInternalServerError() *CombinedDevicesByFilterInternalServerError {
	return &CombinedDevicesByFilterInternalServerError{}
}

/*
CombinedDevicesByFilterInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type CombinedDevicesByFilterInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this combined devices by filter internal server error response has a 2xx status code
func (o *CombinedDevicesByFilterInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined devices by filter internal server error response has a 3xx status code
func (o *CombinedDevicesByFilterInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined devices by filter internal server error response has a 4xx status code
func (o *CombinedDevicesByFilterInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this combined devices by filter internal server error response has a 5xx status code
func (o *CombinedDevicesByFilterInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this combined devices by filter internal server error response a status code equal to that given
func (o *CombinedDevicesByFilterInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the combined devices by filter internal server error response
func (o *CombinedDevicesByFilterInternalServerError) Code() int {
	return 500
}

func (o *CombinedDevicesByFilterInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /devices/combined/devices/v1][%d] combinedDevicesByFilterInternalServerError %s", 500, payload)
}

func (o *CombinedDevicesByFilterInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /devices/combined/devices/v1][%d] combinedDevicesByFilterInternalServerError %s", 500, payload)
}

func (o *CombinedDevicesByFilterInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CombinedDevicesByFilterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
