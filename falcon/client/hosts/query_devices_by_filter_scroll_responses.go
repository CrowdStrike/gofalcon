// Code generated by go-swagger; DO NOT EDIT.

package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// QueryDevicesByFilterScrollReader is a Reader for the QueryDevicesByFilterScroll structure.
type QueryDevicesByFilterScrollReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryDevicesByFilterScrollReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryDevicesByFilterScrollOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewQueryDevicesByFilterScrollForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewQueryDevicesByFilterScrollTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewQueryDevicesByFilterScrollDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewQueryDevicesByFilterScrollOK creates a QueryDevicesByFilterScrollOK with default headers values
func NewQueryDevicesByFilterScrollOK() *QueryDevicesByFilterScrollOK {
	return &QueryDevicesByFilterScrollOK{}
}

/*QueryDevicesByFilterScrollOK handles this case with default header values.

OK
*/
type QueryDevicesByFilterScrollOK struct {
	/*Request limit per minute.
	 */
	XRateLimitLimit int64
	/*The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainDeviceResponse
}

func (o *QueryDevicesByFilterScrollOK) Error() string {
	return fmt.Sprintf("[GET /devices/queries/devices-scroll/v1][%d] queryDevicesByFilterScrollOK  %+v", 200, o.Payload)
}

func (o *QueryDevicesByFilterScrollOK) GetPayload() *models.DomainDeviceResponse {
	return o.Payload
}

func (o *QueryDevicesByFilterScrollOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-RateLimit-Limit
	xRateLimitLimit, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Limit"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Limit", "header", "int64", response.GetHeader("X-RateLimit-Limit"))
	}
	o.XRateLimitLimit = xRateLimitLimit

	// response header X-RateLimit-Remaining
	xRateLimitRemaining, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Remaining"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", response.GetHeader("X-RateLimit-Remaining"))
	}
	o.XRateLimitRemaining = xRateLimitRemaining

	o.Payload = new(models.DomainDeviceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryDevicesByFilterScrollForbidden creates a QueryDevicesByFilterScrollForbidden with default headers values
func NewQueryDevicesByFilterScrollForbidden() *QueryDevicesByFilterScrollForbidden {
	return &QueryDevicesByFilterScrollForbidden{}
}

/*QueryDevicesByFilterScrollForbidden handles this case with default header values.

Forbidden
*/
type QueryDevicesByFilterScrollForbidden struct {
	/*Request limit per minute.
	 */
	XRateLimitLimit int64
	/*The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

func (o *QueryDevicesByFilterScrollForbidden) Error() string {
	return fmt.Sprintf("[GET /devices/queries/devices-scroll/v1][%d] queryDevicesByFilterScrollForbidden  %+v", 403, o.Payload)
}

func (o *QueryDevicesByFilterScrollForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryDevicesByFilterScrollForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-RateLimit-Limit
	xRateLimitLimit, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Limit"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Limit", "header", "int64", response.GetHeader("X-RateLimit-Limit"))
	}
	o.XRateLimitLimit = xRateLimitLimit

	// response header X-RateLimit-Remaining
	xRateLimitRemaining, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Remaining"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", response.GetHeader("X-RateLimit-Remaining"))
	}
	o.XRateLimitRemaining = xRateLimitRemaining

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryDevicesByFilterScrollTooManyRequests creates a QueryDevicesByFilterScrollTooManyRequests with default headers values
func NewQueryDevicesByFilterScrollTooManyRequests() *QueryDevicesByFilterScrollTooManyRequests {
	return &QueryDevicesByFilterScrollTooManyRequests{}
}

/*QueryDevicesByFilterScrollTooManyRequests handles this case with default header values.

Too Many Requests
*/
type QueryDevicesByFilterScrollTooManyRequests struct {
	/*Request limit per minute.
	 */
	XRateLimitLimit int64
	/*The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
	/*Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

func (o *QueryDevicesByFilterScrollTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /devices/queries/devices-scroll/v1][%d] queryDevicesByFilterScrollTooManyRequests  %+v", 429, o.Payload)
}

func (o *QueryDevicesByFilterScrollTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryDevicesByFilterScrollTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-RateLimit-Limit
	xRateLimitLimit, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Limit"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Limit", "header", "int64", response.GetHeader("X-RateLimit-Limit"))
	}
	o.XRateLimitLimit = xRateLimitLimit

	// response header X-RateLimit-Remaining
	xRateLimitRemaining, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Remaining"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", response.GetHeader("X-RateLimit-Remaining"))
	}
	o.XRateLimitRemaining = xRateLimitRemaining

	// response header X-RateLimit-RetryAfter
	xRateLimitRetryAfter, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-RetryAfter"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", response.GetHeader("X-RateLimit-RetryAfter"))
	}
	o.XRateLimitRetryAfter = xRateLimitRetryAfter

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryDevicesByFilterScrollDefault creates a QueryDevicesByFilterScrollDefault with default headers values
func NewQueryDevicesByFilterScrollDefault(code int) *QueryDevicesByFilterScrollDefault {
	return &QueryDevicesByFilterScrollDefault{
		_statusCode: code,
	}
}

/*QueryDevicesByFilterScrollDefault handles this case with default header values.

OK
*/
type QueryDevicesByFilterScrollDefault struct {
	_statusCode int

	Payload *models.DomainDeviceResponse
}

// Code gets the status code for the query devices by filter scroll default response
func (o *QueryDevicesByFilterScrollDefault) Code() int {
	return o._statusCode
}

func (o *QueryDevicesByFilterScrollDefault) Error() string {
	return fmt.Sprintf("[GET /devices/queries/devices-scroll/v1][%d] QueryDevicesByFilterScroll default  %+v", o._statusCode, o.Payload)
}

func (o *QueryDevicesByFilterScrollDefault) GetPayload() *models.DomainDeviceResponse {
	return o.Payload
}

func (o *QueryDevicesByFilterScrollDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DomainDeviceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
