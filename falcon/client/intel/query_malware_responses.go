// Code generated by go-swagger; DO NOT EDIT.

package intel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// QueryMalwareReader is a Reader for the QueryMalware structure.
type QueryMalwareReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryMalwareReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryMalwareOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryMalwareBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewQueryMalwareForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewQueryMalwareTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewQueryMalwareInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /intel/queries/malware/v1] QueryMalware", response, response.Code())
	}
}

// NewQueryMalwareOK creates a QueryMalwareOK with default headers values
func NewQueryMalwareOK() *QueryMalwareOK {
	return &QueryMalwareOK{}
}

/*
QueryMalwareOK describes a response with status code 200, with default header values.

OK
*/
type QueryMalwareOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainQueryResponse
}

// IsSuccess returns true when this query malware o k response has a 2xx status code
func (o *QueryMalwareOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this query malware o k response has a 3xx status code
func (o *QueryMalwareOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query malware o k response has a 4xx status code
func (o *QueryMalwareOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this query malware o k response has a 5xx status code
func (o *QueryMalwareOK) IsServerError() bool {
	return false
}

// IsCode returns true when this query malware o k response a status code equal to that given
func (o *QueryMalwareOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the query malware o k response
func (o *QueryMalwareOK) Code() int {
	return 200
}

func (o *QueryMalwareOK) Error() string {
	return fmt.Sprintf("[GET /intel/queries/malware/v1][%d] queryMalwareOK  %+v", 200, o.Payload)
}

func (o *QueryMalwareOK) String() string {
	return fmt.Sprintf("[GET /intel/queries/malware/v1][%d] queryMalwareOK  %+v", 200, o.Payload)
}

func (o *QueryMalwareOK) GetPayload() *models.DomainQueryResponse {
	return o.Payload
}

func (o *QueryMalwareOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryMalwareBadRequest creates a QueryMalwareBadRequest with default headers values
func NewQueryMalwareBadRequest() *QueryMalwareBadRequest {
	return &QueryMalwareBadRequest{}
}

/*
QueryMalwareBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type QueryMalwareBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this query malware bad request response has a 2xx status code
func (o *QueryMalwareBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query malware bad request response has a 3xx status code
func (o *QueryMalwareBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query malware bad request response has a 4xx status code
func (o *QueryMalwareBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this query malware bad request response has a 5xx status code
func (o *QueryMalwareBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this query malware bad request response a status code equal to that given
func (o *QueryMalwareBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the query malware bad request response
func (o *QueryMalwareBadRequest) Code() int {
	return 400
}

func (o *QueryMalwareBadRequest) Error() string {
	return fmt.Sprintf("[GET /intel/queries/malware/v1][%d] queryMalwareBadRequest  %+v", 400, o.Payload)
}

func (o *QueryMalwareBadRequest) String() string {
	return fmt.Sprintf("[GET /intel/queries/malware/v1][%d] queryMalwareBadRequest  %+v", 400, o.Payload)
}

func (o *QueryMalwareBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *QueryMalwareBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryMalwareForbidden creates a QueryMalwareForbidden with default headers values
func NewQueryMalwareForbidden() *QueryMalwareForbidden {
	return &QueryMalwareForbidden{}
}

/*
QueryMalwareForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type QueryMalwareForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this query malware forbidden response has a 2xx status code
func (o *QueryMalwareForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query malware forbidden response has a 3xx status code
func (o *QueryMalwareForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query malware forbidden response has a 4xx status code
func (o *QueryMalwareForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this query malware forbidden response has a 5xx status code
func (o *QueryMalwareForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this query malware forbidden response a status code equal to that given
func (o *QueryMalwareForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the query malware forbidden response
func (o *QueryMalwareForbidden) Code() int {
	return 403
}

func (o *QueryMalwareForbidden) Error() string {
	return fmt.Sprintf("[GET /intel/queries/malware/v1][%d] queryMalwareForbidden  %+v", 403, o.Payload)
}

func (o *QueryMalwareForbidden) String() string {
	return fmt.Sprintf("[GET /intel/queries/malware/v1][%d] queryMalwareForbidden  %+v", 403, o.Payload)
}

func (o *QueryMalwareForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryMalwareForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryMalwareTooManyRequests creates a QueryMalwareTooManyRequests with default headers values
func NewQueryMalwareTooManyRequests() *QueryMalwareTooManyRequests {
	return &QueryMalwareTooManyRequests{}
}

/*
QueryMalwareTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type QueryMalwareTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this query malware too many requests response has a 2xx status code
func (o *QueryMalwareTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query malware too many requests response has a 3xx status code
func (o *QueryMalwareTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query malware too many requests response has a 4xx status code
func (o *QueryMalwareTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this query malware too many requests response has a 5xx status code
func (o *QueryMalwareTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this query malware too many requests response a status code equal to that given
func (o *QueryMalwareTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the query malware too many requests response
func (o *QueryMalwareTooManyRequests) Code() int {
	return 429
}

func (o *QueryMalwareTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /intel/queries/malware/v1][%d] queryMalwareTooManyRequests  %+v", 429, o.Payload)
}

func (o *QueryMalwareTooManyRequests) String() string {
	return fmt.Sprintf("[GET /intel/queries/malware/v1][%d] queryMalwareTooManyRequests  %+v", 429, o.Payload)
}

func (o *QueryMalwareTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryMalwareTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryMalwareInternalServerError creates a QueryMalwareInternalServerError with default headers values
func NewQueryMalwareInternalServerError() *QueryMalwareInternalServerError {
	return &QueryMalwareInternalServerError{}
}

/*
QueryMalwareInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type QueryMalwareInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this query malware internal server error response has a 2xx status code
func (o *QueryMalwareInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query malware internal server error response has a 3xx status code
func (o *QueryMalwareInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query malware internal server error response has a 4xx status code
func (o *QueryMalwareInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this query malware internal server error response has a 5xx status code
func (o *QueryMalwareInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this query malware internal server error response a status code equal to that given
func (o *QueryMalwareInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the query malware internal server error response
func (o *QueryMalwareInternalServerError) Code() int {
	return 500
}

func (o *QueryMalwareInternalServerError) Error() string {
	return fmt.Sprintf("[GET /intel/queries/malware/v1][%d] queryMalwareInternalServerError  %+v", 500, o.Payload)
}

func (o *QueryMalwareInternalServerError) String() string {
	return fmt.Sprintf("[GET /intel/queries/malware/v1][%d] queryMalwareInternalServerError  %+v", 500, o.Payload)
}

func (o *QueryMalwareInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *QueryMalwareInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
