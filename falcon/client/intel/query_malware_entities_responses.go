// Code generated by go-swagger; DO NOT EDIT.

package intel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// QueryMalwareEntitiesReader is a Reader for the QueryMalwareEntities structure.
type QueryMalwareEntitiesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryMalwareEntitiesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryMalwareEntitiesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryMalwareEntitiesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewQueryMalwareEntitiesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewQueryMalwareEntitiesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewQueryMalwareEntitiesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /intel/combined/malware/v1] QueryMalwareEntities", response, response.Code())
	}
}

// NewQueryMalwareEntitiesOK creates a QueryMalwareEntitiesOK with default headers values
func NewQueryMalwareEntitiesOK() *QueryMalwareEntitiesOK {
	return &QueryMalwareEntitiesOK{}
}

/*
QueryMalwareEntitiesOK describes a response with status code 200, with default header values.

OK
*/
type QueryMalwareEntitiesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainMalwareResponse
}

// IsSuccess returns true when this query malware entities o k response has a 2xx status code
func (o *QueryMalwareEntitiesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this query malware entities o k response has a 3xx status code
func (o *QueryMalwareEntitiesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query malware entities o k response has a 4xx status code
func (o *QueryMalwareEntitiesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this query malware entities o k response has a 5xx status code
func (o *QueryMalwareEntitiesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this query malware entities o k response a status code equal to that given
func (o *QueryMalwareEntitiesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the query malware entities o k response
func (o *QueryMalwareEntitiesOK) Code() int {
	return 200
}

func (o *QueryMalwareEntitiesOK) Error() string {
	return fmt.Sprintf("[GET /intel/combined/malware/v1][%d] queryMalwareEntitiesOK  %+v", 200, o.Payload)
}

func (o *QueryMalwareEntitiesOK) String() string {
	return fmt.Sprintf("[GET /intel/combined/malware/v1][%d] queryMalwareEntitiesOK  %+v", 200, o.Payload)
}

func (o *QueryMalwareEntitiesOK) GetPayload() *models.DomainMalwareResponse {
	return o.Payload
}

func (o *QueryMalwareEntitiesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainMalwareResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryMalwareEntitiesBadRequest creates a QueryMalwareEntitiesBadRequest with default headers values
func NewQueryMalwareEntitiesBadRequest() *QueryMalwareEntitiesBadRequest {
	return &QueryMalwareEntitiesBadRequest{}
}

/*
QueryMalwareEntitiesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type QueryMalwareEntitiesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this query malware entities bad request response has a 2xx status code
func (o *QueryMalwareEntitiesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query malware entities bad request response has a 3xx status code
func (o *QueryMalwareEntitiesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query malware entities bad request response has a 4xx status code
func (o *QueryMalwareEntitiesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this query malware entities bad request response has a 5xx status code
func (o *QueryMalwareEntitiesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this query malware entities bad request response a status code equal to that given
func (o *QueryMalwareEntitiesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the query malware entities bad request response
func (o *QueryMalwareEntitiesBadRequest) Code() int {
	return 400
}

func (o *QueryMalwareEntitiesBadRequest) Error() string {
	return fmt.Sprintf("[GET /intel/combined/malware/v1][%d] queryMalwareEntitiesBadRequest  %+v", 400, o.Payload)
}

func (o *QueryMalwareEntitiesBadRequest) String() string {
	return fmt.Sprintf("[GET /intel/combined/malware/v1][%d] queryMalwareEntitiesBadRequest  %+v", 400, o.Payload)
}

func (o *QueryMalwareEntitiesBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *QueryMalwareEntitiesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryMalwareEntitiesForbidden creates a QueryMalwareEntitiesForbidden with default headers values
func NewQueryMalwareEntitiesForbidden() *QueryMalwareEntitiesForbidden {
	return &QueryMalwareEntitiesForbidden{}
}

/*
QueryMalwareEntitiesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type QueryMalwareEntitiesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this query malware entities forbidden response has a 2xx status code
func (o *QueryMalwareEntitiesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query malware entities forbidden response has a 3xx status code
func (o *QueryMalwareEntitiesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query malware entities forbidden response has a 4xx status code
func (o *QueryMalwareEntitiesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this query malware entities forbidden response has a 5xx status code
func (o *QueryMalwareEntitiesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this query malware entities forbidden response a status code equal to that given
func (o *QueryMalwareEntitiesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the query malware entities forbidden response
func (o *QueryMalwareEntitiesForbidden) Code() int {
	return 403
}

func (o *QueryMalwareEntitiesForbidden) Error() string {
	return fmt.Sprintf("[GET /intel/combined/malware/v1][%d] queryMalwareEntitiesForbidden  %+v", 403, o.Payload)
}

func (o *QueryMalwareEntitiesForbidden) String() string {
	return fmt.Sprintf("[GET /intel/combined/malware/v1][%d] queryMalwareEntitiesForbidden  %+v", 403, o.Payload)
}

func (o *QueryMalwareEntitiesForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryMalwareEntitiesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryMalwareEntitiesTooManyRequests creates a QueryMalwareEntitiesTooManyRequests with default headers values
func NewQueryMalwareEntitiesTooManyRequests() *QueryMalwareEntitiesTooManyRequests {
	return &QueryMalwareEntitiesTooManyRequests{}
}

/*
QueryMalwareEntitiesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type QueryMalwareEntitiesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this query malware entities too many requests response has a 2xx status code
func (o *QueryMalwareEntitiesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query malware entities too many requests response has a 3xx status code
func (o *QueryMalwareEntitiesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query malware entities too many requests response has a 4xx status code
func (o *QueryMalwareEntitiesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this query malware entities too many requests response has a 5xx status code
func (o *QueryMalwareEntitiesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this query malware entities too many requests response a status code equal to that given
func (o *QueryMalwareEntitiesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the query malware entities too many requests response
func (o *QueryMalwareEntitiesTooManyRequests) Code() int {
	return 429
}

func (o *QueryMalwareEntitiesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /intel/combined/malware/v1][%d] queryMalwareEntitiesTooManyRequests  %+v", 429, o.Payload)
}

func (o *QueryMalwareEntitiesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /intel/combined/malware/v1][%d] queryMalwareEntitiesTooManyRequests  %+v", 429, o.Payload)
}

func (o *QueryMalwareEntitiesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryMalwareEntitiesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryMalwareEntitiesInternalServerError creates a QueryMalwareEntitiesInternalServerError with default headers values
func NewQueryMalwareEntitiesInternalServerError() *QueryMalwareEntitiesInternalServerError {
	return &QueryMalwareEntitiesInternalServerError{}
}

/*
QueryMalwareEntitiesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type QueryMalwareEntitiesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this query malware entities internal server error response has a 2xx status code
func (o *QueryMalwareEntitiesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query malware entities internal server error response has a 3xx status code
func (o *QueryMalwareEntitiesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query malware entities internal server error response has a 4xx status code
func (o *QueryMalwareEntitiesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this query malware entities internal server error response has a 5xx status code
func (o *QueryMalwareEntitiesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this query malware entities internal server error response a status code equal to that given
func (o *QueryMalwareEntitiesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the query malware entities internal server error response
func (o *QueryMalwareEntitiesInternalServerError) Code() int {
	return 500
}

func (o *QueryMalwareEntitiesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /intel/combined/malware/v1][%d] queryMalwareEntitiesInternalServerError  %+v", 500, o.Payload)
}

func (o *QueryMalwareEntitiesInternalServerError) String() string {
	return fmt.Sprintf("[GET /intel/combined/malware/v1][%d] queryMalwareEntitiesInternalServerError  %+v", 500, o.Payload)
}

func (o *QueryMalwareEntitiesInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *QueryMalwareEntitiesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
