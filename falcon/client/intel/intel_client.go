// Code generated by go-swagger; DO NOT EDIT.

package intel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new intel API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for intel API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetIntelActorEntities(params *GetIntelActorEntitiesParams, authInfo runtime.ClientAuthInfoWriter) (*GetIntelActorEntitiesOK, error)

	GetIntelIndicatorEntities(params *GetIntelIndicatorEntitiesParams, authInfo runtime.ClientAuthInfoWriter) (*GetIntelIndicatorEntitiesOK, error)

	GetIntelReportEntities(params *GetIntelReportEntitiesParams, authInfo runtime.ClientAuthInfoWriter) (*GetIntelReportEntitiesOK, error)

	GetIntelReportPDF(params *GetIntelReportPDFParams, authInfo runtime.ClientAuthInfoWriter) (*GetIntelReportPDFOK, error)

	GetIntelRuleEntities(params *GetIntelRuleEntitiesParams, authInfo runtime.ClientAuthInfoWriter) (*GetIntelRuleEntitiesOK, error)

	GetIntelRuleFile(params *GetIntelRuleFileParams, authInfo runtime.ClientAuthInfoWriter) (*GetIntelRuleFileOK, error)

	GetLatestIntelRuleFile(params *GetLatestIntelRuleFileParams, authInfo runtime.ClientAuthInfoWriter) (*GetLatestIntelRuleFileOK, error)

	QueryIntelActorEntities(params *QueryIntelActorEntitiesParams, authInfo runtime.ClientAuthInfoWriter) (*QueryIntelActorEntitiesOK, error)

	QueryIntelActorIds(params *QueryIntelActorIdsParams, authInfo runtime.ClientAuthInfoWriter) (*QueryIntelActorIdsOK, error)

	QueryIntelIndicatorEntities(params *QueryIntelIndicatorEntitiesParams, authInfo runtime.ClientAuthInfoWriter) (*QueryIntelIndicatorEntitiesOK, error)

	QueryIntelIndicatorIds(params *QueryIntelIndicatorIdsParams, authInfo runtime.ClientAuthInfoWriter) (*QueryIntelIndicatorIdsOK, error)

	QueryIntelReportEntities(params *QueryIntelReportEntitiesParams, authInfo runtime.ClientAuthInfoWriter) (*QueryIntelReportEntitiesOK, error)

	QueryIntelReportIds(params *QueryIntelReportIdsParams, authInfo runtime.ClientAuthInfoWriter) (*QueryIntelReportIdsOK, error)

	QueryIntelRuleIds(params *QueryIntelRuleIdsParams, authInfo runtime.ClientAuthInfoWriter) (*QueryIntelRuleIdsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetIntelActorEntities retrieves specific actors using their actor i ds
*/
func (a *Client) GetIntelActorEntities(params *GetIntelActorEntitiesParams, authInfo runtime.ClientAuthInfoWriter) (*GetIntelActorEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntelActorEntitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIntelActorEntities",
		Method:             "GET",
		PathPattern:        "/intel/entities/actors/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntelActorEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntelActorEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIntelActorEntitiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetIntelIndicatorEntities retrieves specific indicators using their indicator i ds
*/
func (a *Client) GetIntelIndicatorEntities(params *GetIntelIndicatorEntitiesParams, authInfo runtime.ClientAuthInfoWriter) (*GetIntelIndicatorEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntelIndicatorEntitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIntelIndicatorEntities",
		Method:             "POST",
		PathPattern:        "/intel/entities/indicators/GET/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntelIndicatorEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntelIndicatorEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIntelIndicatorEntitiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetIntelReportEntities retrieves specific reports using their report i ds
*/
func (a *Client) GetIntelReportEntities(params *GetIntelReportEntitiesParams, authInfo runtime.ClientAuthInfoWriter) (*GetIntelReportEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntelReportEntitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIntelReportEntities",
		Method:             "GET",
		PathPattern:        "/intel/entities/reports/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntelReportEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntelReportEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIntelReportEntitiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetIntelReportPDF returns a report p d f attachment
*/
func (a *Client) GetIntelReportPDF(params *GetIntelReportPDFParams, authInfo runtime.ClientAuthInfoWriter) (*GetIntelReportPDFOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntelReportPDFParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIntelReportPDF",
		Method:             "GET",
		PathPattern:        "/intel/entities/report-files/v1",
		ProducesMediaTypes: []string{"application/json", "application/octet-stream", "application/pdf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntelReportPDFReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntelReportPDFOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIntelReportPDFDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetIntelRuleEntities retrieves details for rule sets for the specified ids
*/
func (a *Client) GetIntelRuleEntities(params *GetIntelRuleEntitiesParams, authInfo runtime.ClientAuthInfoWriter) (*GetIntelRuleEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntelRuleEntitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIntelRuleEntities",
		Method:             "GET",
		PathPattern:        "/intel/entities/rules/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntelRuleEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntelRuleEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIntelRuleEntitiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetIntelRuleFile downloads earlier rule sets
*/
func (a *Client) GetIntelRuleFile(params *GetIntelRuleFileParams, authInfo runtime.ClientAuthInfoWriter) (*GetIntelRuleFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntelRuleFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIntelRuleFile",
		Method:             "GET",
		PathPattern:        "/intel/entities/rules-files/v1",
		ProducesMediaTypes: []string{"*/*", "application/gzip", "application/json", "application/octet-stream", "application/zip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntelRuleFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntelRuleFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIntelRuleFileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetLatestIntelRuleFile downloads the latest rule set
*/
func (a *Client) GetLatestIntelRuleFile(params *GetLatestIntelRuleFileParams, authInfo runtime.ClientAuthInfoWriter) (*GetLatestIntelRuleFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLatestIntelRuleFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLatestIntelRuleFile",
		Method:             "GET",
		PathPattern:        "/intel/entities/rules-latest-files/v1",
		ProducesMediaTypes: []string{"*/*", "application/gzip", "application/json", "application/octet-stream", "application/zip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLatestIntelRuleFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLatestIntelRuleFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLatestIntelRuleFileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  QueryIntelActorEntities gets info about actors that match provided f q l filters
*/
func (a *Client) QueryIntelActorEntities(params *QueryIntelActorEntitiesParams, authInfo runtime.ClientAuthInfoWriter) (*QueryIntelActorEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryIntelActorEntitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "QueryIntelActorEntities",
		Method:             "GET",
		PathPattern:        "/intel/combined/actors/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryIntelActorEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryIntelActorEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueryIntelActorEntitiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  QueryIntelActorIds gets actor i ds that match provided f q l filters
*/
func (a *Client) QueryIntelActorIds(params *QueryIntelActorIdsParams, authInfo runtime.ClientAuthInfoWriter) (*QueryIntelActorIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryIntelActorIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "QueryIntelActorIds",
		Method:             "GET",
		PathPattern:        "/intel/queries/actors/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryIntelActorIdsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryIntelActorIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueryIntelActorIdsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  QueryIntelIndicatorEntities gets info about indicators that match provided f q l filters
*/
func (a *Client) QueryIntelIndicatorEntities(params *QueryIntelIndicatorEntitiesParams, authInfo runtime.ClientAuthInfoWriter) (*QueryIntelIndicatorEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryIntelIndicatorEntitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "QueryIntelIndicatorEntities",
		Method:             "GET",
		PathPattern:        "/intel/combined/indicators/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryIntelIndicatorEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryIntelIndicatorEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueryIntelIndicatorEntitiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  QueryIntelIndicatorIds gets indicators i ds that match provided f q l filters
*/
func (a *Client) QueryIntelIndicatorIds(params *QueryIntelIndicatorIdsParams, authInfo runtime.ClientAuthInfoWriter) (*QueryIntelIndicatorIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryIntelIndicatorIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "QueryIntelIndicatorIds",
		Method:             "GET",
		PathPattern:        "/intel/queries/indicators/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryIntelIndicatorIdsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryIntelIndicatorIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueryIntelIndicatorIdsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  QueryIntelReportEntities gets info about reports that match provided f q l filters
*/
func (a *Client) QueryIntelReportEntities(params *QueryIntelReportEntitiesParams, authInfo runtime.ClientAuthInfoWriter) (*QueryIntelReportEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryIntelReportEntitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "QueryIntelReportEntities",
		Method:             "GET",
		PathPattern:        "/intel/combined/reports/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryIntelReportEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryIntelReportEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueryIntelReportEntitiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  QueryIntelReportIds gets report i ds that match provided f q l filters
*/
func (a *Client) QueryIntelReportIds(params *QueryIntelReportIdsParams, authInfo runtime.ClientAuthInfoWriter) (*QueryIntelReportIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryIntelReportIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "QueryIntelReportIds",
		Method:             "GET",
		PathPattern:        "/intel/queries/reports/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryIntelReportIdsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryIntelReportIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueryIntelReportIdsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  QueryIntelRuleIds searches for rule i ds that match provided filter criteria
*/
func (a *Client) QueryIntelRuleIds(params *QueryIntelRuleIdsParams, authInfo runtime.ClientAuthInfoWriter) (*QueryIntelRuleIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryIntelRuleIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "QueryIntelRuleIds",
		Method:             "GET",
		PathPattern:        "/intel/queries/rules/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryIntelRuleIdsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryIntelRuleIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueryIntelRuleIdsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
