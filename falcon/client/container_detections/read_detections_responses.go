// Code generated by go-swagger; DO NOT EDIT.

package container_detections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ReadDetectionsReader is a Reader for the ReadDetections structure.
type ReadDetectionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadDetectionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadDetectionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewReadDetectionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewReadDetectionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadDetectionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /container-security/entities/detections/v1] ReadDetections", response, response.Code())
	}
}

// NewReadDetectionsOK creates a ReadDetectionsOK with default headers values
func NewReadDetectionsOK() *ReadDetectionsOK {
	return &ReadDetectionsOK{}
}

/*
ReadDetectionsOK describes a response with status code 200, with default header values.

OK
*/
type ReadDetectionsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DetectionsAPIAssessmentDetections
}

// IsSuccess returns true when this read detections o k response has a 2xx status code
func (o *ReadDetectionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this read detections o k response has a 3xx status code
func (o *ReadDetectionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read detections o k response has a 4xx status code
func (o *ReadDetectionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this read detections o k response has a 5xx status code
func (o *ReadDetectionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this read detections o k response a status code equal to that given
func (o *ReadDetectionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the read detections o k response
func (o *ReadDetectionsOK) Code() int {
	return 200
}

func (o *ReadDetectionsOK) Error() string {
	return fmt.Sprintf("[GET /container-security/entities/detections/v1][%d] readDetectionsOK  %+v", 200, o.Payload)
}

func (o *ReadDetectionsOK) String() string {
	return fmt.Sprintf("[GET /container-security/entities/detections/v1][%d] readDetectionsOK  %+v", 200, o.Payload)
}

func (o *ReadDetectionsOK) GetPayload() *models.DetectionsAPIAssessmentDetections {
	return o.Payload
}

func (o *ReadDetectionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DetectionsAPIAssessmentDetections)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadDetectionsForbidden creates a ReadDetectionsForbidden with default headers values
func NewReadDetectionsForbidden() *ReadDetectionsForbidden {
	return &ReadDetectionsForbidden{}
}

/*
ReadDetectionsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ReadDetectionsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this read detections forbidden response has a 2xx status code
func (o *ReadDetectionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read detections forbidden response has a 3xx status code
func (o *ReadDetectionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read detections forbidden response has a 4xx status code
func (o *ReadDetectionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this read detections forbidden response has a 5xx status code
func (o *ReadDetectionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this read detections forbidden response a status code equal to that given
func (o *ReadDetectionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the read detections forbidden response
func (o *ReadDetectionsForbidden) Code() int {
	return 403
}

func (o *ReadDetectionsForbidden) Error() string {
	return fmt.Sprintf("[GET /container-security/entities/detections/v1][%d] readDetectionsForbidden  %+v", 403, o.Payload)
}

func (o *ReadDetectionsForbidden) String() string {
	return fmt.Sprintf("[GET /container-security/entities/detections/v1][%d] readDetectionsForbidden  %+v", 403, o.Payload)
}

func (o *ReadDetectionsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ReadDetectionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadDetectionsTooManyRequests creates a ReadDetectionsTooManyRequests with default headers values
func NewReadDetectionsTooManyRequests() *ReadDetectionsTooManyRequests {
	return &ReadDetectionsTooManyRequests{}
}

/*
ReadDetectionsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ReadDetectionsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this read detections too many requests response has a 2xx status code
func (o *ReadDetectionsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read detections too many requests response has a 3xx status code
func (o *ReadDetectionsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read detections too many requests response has a 4xx status code
func (o *ReadDetectionsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this read detections too many requests response has a 5xx status code
func (o *ReadDetectionsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this read detections too many requests response a status code equal to that given
func (o *ReadDetectionsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the read detections too many requests response
func (o *ReadDetectionsTooManyRequests) Code() int {
	return 429
}

func (o *ReadDetectionsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /container-security/entities/detections/v1][%d] readDetectionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ReadDetectionsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /container-security/entities/detections/v1][%d] readDetectionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ReadDetectionsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ReadDetectionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadDetectionsInternalServerError creates a ReadDetectionsInternalServerError with default headers values
func NewReadDetectionsInternalServerError() *ReadDetectionsInternalServerError {
	return &ReadDetectionsInternalServerError{}
}

/*
ReadDetectionsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ReadDetectionsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CoreEntitiesResponse
}

// IsSuccess returns true when this read detections internal server error response has a 2xx status code
func (o *ReadDetectionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read detections internal server error response has a 3xx status code
func (o *ReadDetectionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read detections internal server error response has a 4xx status code
func (o *ReadDetectionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this read detections internal server error response has a 5xx status code
func (o *ReadDetectionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this read detections internal server error response a status code equal to that given
func (o *ReadDetectionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the read detections internal server error response
func (o *ReadDetectionsInternalServerError) Code() int {
	return 500
}

func (o *ReadDetectionsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /container-security/entities/detections/v1][%d] readDetectionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadDetectionsInternalServerError) String() string {
	return fmt.Sprintf("[GET /container-security/entities/detections/v1][%d] readDetectionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadDetectionsInternalServerError) GetPayload() *models.CoreEntitiesResponse {
	return o.Payload
}

func (o *ReadDetectionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CoreEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
