// Code generated by go-swagger; DO NOT EDIT.

package container_detections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new container detections API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for container detections API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ReadCombinedDetections(params *ReadCombinedDetectionsParams, opts ...ClientOption) (*ReadCombinedDetectionsOK, error)

	ReadDetections(params *ReadDetectionsParams, opts ...ClientOption) (*ReadDetectionsOK, error)

	ReadDetectionsCount(params *ReadDetectionsCountParams, opts ...ClientOption) (*ReadDetectionsCountOK, error)

	ReadDetectionsCountBySeverity(params *ReadDetectionsCountBySeverityParams, opts ...ClientOption) (*ReadDetectionsCountBySeverityOK, error)

	ReadDetectionsCountByType(params *ReadDetectionsCountByTypeParams, opts ...ClientOption) (*ReadDetectionsCountByTypeOK, error)

	SearchDetections(params *SearchDetectionsParams, opts ...ClientOption) (*SearchDetectionsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ReadCombinedDetections retrieves image assessment detections identified by the provided filter criteria
*/
func (a *Client) ReadCombinedDetections(params *ReadCombinedDetectionsParams, opts ...ClientOption) (*ReadCombinedDetectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCombinedDetectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadCombinedDetections",
		Method:             "GET",
		PathPattern:        "/container-security/combined/detections/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadCombinedDetectionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCombinedDetectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadCombinedDetections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadDetections retrieves image assessment detection entities identified by the provided filter criteria
*/
func (a *Client) ReadDetections(params *ReadDetectionsParams, opts ...ClientOption) (*ReadDetectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadDetectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadDetections",
		Method:             "GET",
		PathPattern:        "/container-security/entities/detections/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadDetectionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadDetectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadDetections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadDetectionsCount aggregates count of detections
*/
func (a *Client) ReadDetectionsCount(params *ReadDetectionsCountParams, opts ...ClientOption) (*ReadDetectionsCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadDetectionsCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadDetectionsCount",
		Method:             "GET",
		PathPattern:        "/container-security/aggregates/detections/count/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadDetectionsCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadDetectionsCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadDetectionsCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadDetectionsCountBySeverity aggregates counts of detections by severity
*/
func (a *Client) ReadDetectionsCountBySeverity(params *ReadDetectionsCountBySeverityParams, opts ...ClientOption) (*ReadDetectionsCountBySeverityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadDetectionsCountBySeverityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadDetectionsCountBySeverity",
		Method:             "GET",
		PathPattern:        "/container-security/aggregates/detections/count-by-severity/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadDetectionsCountBySeverityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadDetectionsCountBySeverityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadDetectionsCountBySeverity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadDetectionsCountByType aggregates counts of detections by detection type
*/
func (a *Client) ReadDetectionsCountByType(params *ReadDetectionsCountByTypeParams, opts ...ClientOption) (*ReadDetectionsCountByTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadDetectionsCountByTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadDetectionsCountByType",
		Method:             "GET",
		PathPattern:        "/container-security/aggregates/detections/count-by-type/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadDetectionsCountByTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadDetectionsCountByTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadDetectionsCountByType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchDetections retrieves image assessment detection entities identified by the provided filter criteria
*/
func (a *Client) SearchDetections(params *SearchDetectionsParams, opts ...ClientOption) (*SearchDetectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchDetectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchDetections",
		Method:             "GET",
		PathPattern:        "/container-security/queries/detections/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchDetectionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchDetectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchDetections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
