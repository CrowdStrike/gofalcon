// Code generated by go-swagger; DO NOT EDIT.

package container_detections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewReadDetectionsParams creates a new ReadDetectionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewReadDetectionsParams() *ReadDetectionsParams {
	return &ReadDetectionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewReadDetectionsParamsWithTimeout creates a new ReadDetectionsParams object
// with the ability to set a timeout on a request.
func NewReadDetectionsParamsWithTimeout(timeout time.Duration) *ReadDetectionsParams {
	return &ReadDetectionsParams{
		timeout: timeout,
	}
}

// NewReadDetectionsParamsWithContext creates a new ReadDetectionsParams object
// with the ability to set a context for a request.
func NewReadDetectionsParamsWithContext(ctx context.Context) *ReadDetectionsParams {
	return &ReadDetectionsParams{
		Context: ctx,
	}
}

// NewReadDetectionsParamsWithHTTPClient creates a new ReadDetectionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewReadDetectionsParamsWithHTTPClient(client *http.Client) *ReadDetectionsParams {
	return &ReadDetectionsParams{
		HTTPClient: client,
	}
}

/*
ReadDetectionsParams contains all the parameters to send to the API endpoint

	for the read detections operation.

	Typically these are written to a http.Request.
*/
type ReadDetectionsParams struct {

	/* Filter.

	   Filter images using a query in Falcon Query Language (FQL). Supported filters:  cid,detection_type,image_registry,image_repository,image_tag
	*/
	Filter *string

	/* Limit.

	   The upper-bound on the number of records to retrieve.
	*/
	Limit *int64

	/* Offset.

	   The offset from where to begin.
	*/
	Offset *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the read detections params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReadDetectionsParams) WithDefaults() *ReadDetectionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the read detections params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReadDetectionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the read detections params
func (o *ReadDetectionsParams) WithTimeout(timeout time.Duration) *ReadDetectionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the read detections params
func (o *ReadDetectionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the read detections params
func (o *ReadDetectionsParams) WithContext(ctx context.Context) *ReadDetectionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the read detections params
func (o *ReadDetectionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the read detections params
func (o *ReadDetectionsParams) WithHTTPClient(client *http.Client) *ReadDetectionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the read detections params
func (o *ReadDetectionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the read detections params
func (o *ReadDetectionsParams) WithFilter(filter *string) *ReadDetectionsParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the read detections params
func (o *ReadDetectionsParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithLimit adds the limit to the read detections params
func (o *ReadDetectionsParams) WithLimit(limit *int64) *ReadDetectionsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the read detections params
func (o *ReadDetectionsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the read detections params
func (o *ReadDetectionsParams) WithOffset(offset *int64) *ReadDetectionsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the read detections params
func (o *ReadDetectionsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WriteToRequest writes these params to a swagger request
func (o *ReadDetectionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
