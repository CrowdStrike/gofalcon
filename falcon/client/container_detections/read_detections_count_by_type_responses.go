// Code generated by go-swagger; DO NOT EDIT.

package container_detections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ReadDetectionsCountByTypeReader is a Reader for the ReadDetectionsCountByType structure.
type ReadDetectionsCountByTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadDetectionsCountByTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadDetectionsCountByTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewReadDetectionsCountByTypeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewReadDetectionsCountByTypeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadDetectionsCountByTypeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /container-security/aggregates/detections/count-by-type/v1] ReadDetectionsCountByType", response, response.Code())
	}
}

// NewReadDetectionsCountByTypeOK creates a ReadDetectionsCountByTypeOK with default headers values
func NewReadDetectionsCountByTypeOK() *ReadDetectionsCountByTypeOK {
	return &ReadDetectionsCountByTypeOK{}
}

/*
ReadDetectionsCountByTypeOK describes a response with status code 200, with default header values.

OK
*/
type ReadDetectionsCountByTypeOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DetectionsAPIDetectionsByType
}

// IsSuccess returns true when this read detections count by type o k response has a 2xx status code
func (o *ReadDetectionsCountByTypeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this read detections count by type o k response has a 3xx status code
func (o *ReadDetectionsCountByTypeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read detections count by type o k response has a 4xx status code
func (o *ReadDetectionsCountByTypeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this read detections count by type o k response has a 5xx status code
func (o *ReadDetectionsCountByTypeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this read detections count by type o k response a status code equal to that given
func (o *ReadDetectionsCountByTypeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the read detections count by type o k response
func (o *ReadDetectionsCountByTypeOK) Code() int {
	return 200
}

func (o *ReadDetectionsCountByTypeOK) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/detections/count-by-type/v1][%d] readDetectionsCountByTypeOK  %+v", 200, o.Payload)
}

func (o *ReadDetectionsCountByTypeOK) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/detections/count-by-type/v1][%d] readDetectionsCountByTypeOK  %+v", 200, o.Payload)
}

func (o *ReadDetectionsCountByTypeOK) GetPayload() *models.DetectionsAPIDetectionsByType {
	return o.Payload
}

func (o *ReadDetectionsCountByTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DetectionsAPIDetectionsByType)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadDetectionsCountByTypeForbidden creates a ReadDetectionsCountByTypeForbidden with default headers values
func NewReadDetectionsCountByTypeForbidden() *ReadDetectionsCountByTypeForbidden {
	return &ReadDetectionsCountByTypeForbidden{}
}

/*
ReadDetectionsCountByTypeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ReadDetectionsCountByTypeForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this read detections count by type forbidden response has a 2xx status code
func (o *ReadDetectionsCountByTypeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read detections count by type forbidden response has a 3xx status code
func (o *ReadDetectionsCountByTypeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read detections count by type forbidden response has a 4xx status code
func (o *ReadDetectionsCountByTypeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this read detections count by type forbidden response has a 5xx status code
func (o *ReadDetectionsCountByTypeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this read detections count by type forbidden response a status code equal to that given
func (o *ReadDetectionsCountByTypeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the read detections count by type forbidden response
func (o *ReadDetectionsCountByTypeForbidden) Code() int {
	return 403
}

func (o *ReadDetectionsCountByTypeForbidden) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/detections/count-by-type/v1][%d] readDetectionsCountByTypeForbidden  %+v", 403, o.Payload)
}

func (o *ReadDetectionsCountByTypeForbidden) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/detections/count-by-type/v1][%d] readDetectionsCountByTypeForbidden  %+v", 403, o.Payload)
}

func (o *ReadDetectionsCountByTypeForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ReadDetectionsCountByTypeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadDetectionsCountByTypeTooManyRequests creates a ReadDetectionsCountByTypeTooManyRequests with default headers values
func NewReadDetectionsCountByTypeTooManyRequests() *ReadDetectionsCountByTypeTooManyRequests {
	return &ReadDetectionsCountByTypeTooManyRequests{}
}

/*
ReadDetectionsCountByTypeTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ReadDetectionsCountByTypeTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this read detections count by type too many requests response has a 2xx status code
func (o *ReadDetectionsCountByTypeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read detections count by type too many requests response has a 3xx status code
func (o *ReadDetectionsCountByTypeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read detections count by type too many requests response has a 4xx status code
func (o *ReadDetectionsCountByTypeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this read detections count by type too many requests response has a 5xx status code
func (o *ReadDetectionsCountByTypeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this read detections count by type too many requests response a status code equal to that given
func (o *ReadDetectionsCountByTypeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the read detections count by type too many requests response
func (o *ReadDetectionsCountByTypeTooManyRequests) Code() int {
	return 429
}

func (o *ReadDetectionsCountByTypeTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/detections/count-by-type/v1][%d] readDetectionsCountByTypeTooManyRequests  %+v", 429, o.Payload)
}

func (o *ReadDetectionsCountByTypeTooManyRequests) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/detections/count-by-type/v1][%d] readDetectionsCountByTypeTooManyRequests  %+v", 429, o.Payload)
}

func (o *ReadDetectionsCountByTypeTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ReadDetectionsCountByTypeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadDetectionsCountByTypeInternalServerError creates a ReadDetectionsCountByTypeInternalServerError with default headers values
func NewReadDetectionsCountByTypeInternalServerError() *ReadDetectionsCountByTypeInternalServerError {
	return &ReadDetectionsCountByTypeInternalServerError{}
}

/*
ReadDetectionsCountByTypeInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ReadDetectionsCountByTypeInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CoreEntitiesResponse
}

// IsSuccess returns true when this read detections count by type internal server error response has a 2xx status code
func (o *ReadDetectionsCountByTypeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read detections count by type internal server error response has a 3xx status code
func (o *ReadDetectionsCountByTypeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read detections count by type internal server error response has a 4xx status code
func (o *ReadDetectionsCountByTypeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this read detections count by type internal server error response has a 5xx status code
func (o *ReadDetectionsCountByTypeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this read detections count by type internal server error response a status code equal to that given
func (o *ReadDetectionsCountByTypeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the read detections count by type internal server error response
func (o *ReadDetectionsCountByTypeInternalServerError) Code() int {
	return 500
}

func (o *ReadDetectionsCountByTypeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/detections/count-by-type/v1][%d] readDetectionsCountByTypeInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadDetectionsCountByTypeInternalServerError) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/detections/count-by-type/v1][%d] readDetectionsCountByTypeInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadDetectionsCountByTypeInternalServerError) GetPayload() *models.CoreEntitiesResponse {
	return o.Payload
}

func (o *ReadDetectionsCountByTypeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CoreEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
