// Code generated by go-swagger; DO NOT EDIT.

package identity_protection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAPIPreemptProxyGetPolicyRulesQueryParams creates a new APIPreemptProxyGetPolicyRulesQueryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAPIPreemptProxyGetPolicyRulesQueryParams() *APIPreemptProxyGetPolicyRulesQueryParams {
	return &APIPreemptProxyGetPolicyRulesQueryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAPIPreemptProxyGetPolicyRulesQueryParamsWithTimeout creates a new APIPreemptProxyGetPolicyRulesQueryParams object
// with the ability to set a timeout on a request.
func NewAPIPreemptProxyGetPolicyRulesQueryParamsWithTimeout(timeout time.Duration) *APIPreemptProxyGetPolicyRulesQueryParams {
	return &APIPreemptProxyGetPolicyRulesQueryParams{
		timeout: timeout,
	}
}

// NewAPIPreemptProxyGetPolicyRulesQueryParamsWithContext creates a new APIPreemptProxyGetPolicyRulesQueryParams object
// with the ability to set a context for a request.
func NewAPIPreemptProxyGetPolicyRulesQueryParamsWithContext(ctx context.Context) *APIPreemptProxyGetPolicyRulesQueryParams {
	return &APIPreemptProxyGetPolicyRulesQueryParams{
		Context: ctx,
	}
}

// NewAPIPreemptProxyGetPolicyRulesQueryParamsWithHTTPClient creates a new APIPreemptProxyGetPolicyRulesQueryParams object
// with the ability to set a custom HTTPClient for a request.
func NewAPIPreemptProxyGetPolicyRulesQueryParamsWithHTTPClient(client *http.Client) *APIPreemptProxyGetPolicyRulesQueryParams {
	return &APIPreemptProxyGetPolicyRulesQueryParams{
		HTTPClient: client,
	}
}

/*
APIPreemptProxyGetPolicyRulesQueryParams contains all the parameters to send to the API endpoint

	for the api preempt proxy get policy rules query operation.

	Typically these are written to a http.Request.
*/
type APIPreemptProxyGetPolicyRulesQueryParams struct {

	/* Enabled.

	   Whether the rule is enabled
	*/
	Enabled *bool

	/* Name.

	   Rule name
	*/
	Name *string

	/* SimulationMode.

	   Whether the rule is in simulation mode
	*/
	SimulationMode *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the api preempt proxy get policy rules query params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *APIPreemptProxyGetPolicyRulesQueryParams) WithDefaults() *APIPreemptProxyGetPolicyRulesQueryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the api preempt proxy get policy rules query params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *APIPreemptProxyGetPolicyRulesQueryParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the api preempt proxy get policy rules query params
func (o *APIPreemptProxyGetPolicyRulesQueryParams) WithTimeout(timeout time.Duration) *APIPreemptProxyGetPolicyRulesQueryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the api preempt proxy get policy rules query params
func (o *APIPreemptProxyGetPolicyRulesQueryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the api preempt proxy get policy rules query params
func (o *APIPreemptProxyGetPolicyRulesQueryParams) WithContext(ctx context.Context) *APIPreemptProxyGetPolicyRulesQueryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the api preempt proxy get policy rules query params
func (o *APIPreemptProxyGetPolicyRulesQueryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the api preempt proxy get policy rules query params
func (o *APIPreemptProxyGetPolicyRulesQueryParams) WithHTTPClient(client *http.Client) *APIPreemptProxyGetPolicyRulesQueryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the api preempt proxy get policy rules query params
func (o *APIPreemptProxyGetPolicyRulesQueryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnabled adds the enabled to the api preempt proxy get policy rules query params
func (o *APIPreemptProxyGetPolicyRulesQueryParams) WithEnabled(enabled *bool) *APIPreemptProxyGetPolicyRulesQueryParams {
	o.SetEnabled(enabled)
	return o
}

// SetEnabled adds the enabled to the api preempt proxy get policy rules query params
func (o *APIPreemptProxyGetPolicyRulesQueryParams) SetEnabled(enabled *bool) {
	o.Enabled = enabled
}

// WithName adds the name to the api preempt proxy get policy rules query params
func (o *APIPreemptProxyGetPolicyRulesQueryParams) WithName(name *string) *APIPreemptProxyGetPolicyRulesQueryParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the api preempt proxy get policy rules query params
func (o *APIPreemptProxyGetPolicyRulesQueryParams) SetName(name *string) {
	o.Name = name
}

// WithSimulationMode adds the simulationMode to the api preempt proxy get policy rules query params
func (o *APIPreemptProxyGetPolicyRulesQueryParams) WithSimulationMode(simulationMode *bool) *APIPreemptProxyGetPolicyRulesQueryParams {
	o.SetSimulationMode(simulationMode)
	return o
}

// SetSimulationMode adds the simulationMode to the api preempt proxy get policy rules query params
func (o *APIPreemptProxyGetPolicyRulesQueryParams) SetSimulationMode(simulationMode *bool) {
	o.SimulationMode = simulationMode
}

// WriteToRequest writes these params to a swagger request
func (o *APIPreemptProxyGetPolicyRulesQueryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Enabled != nil {

		// query param enabled
		var qrEnabled bool

		if o.Enabled != nil {
			qrEnabled = *o.Enabled
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.SimulationMode != nil {

		// query param simulation_mode
		var qrSimulationMode bool

		if o.SimulationMode != nil {
			qrSimulationMode = *o.SimulationMode
		}
		qSimulationMode := swag.FormatBool(qrSimulationMode)
		if qSimulationMode != "" {

			if err := r.SetQueryParam("simulation_mode", qSimulationMode); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
