// Code generated by go-swagger; DO NOT EDIT.

package identity_protection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new identity protection API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new identity protection API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new identity protection API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for identity protection API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationJSONCharsetUTF8 sets the Accept header to "application/json; charset=utf-8".
func WithAcceptApplicationJSONCharsetUTF8(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json; charset=utf-8"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	APIPreemptProxyDeletePolicyRules(params *APIPreemptProxyDeletePolicyRulesParams, opts ...ClientOption) (*APIPreemptProxyDeletePolicyRulesOK, error)

	APIPreemptProxyGetPolicyRules(params *APIPreemptProxyGetPolicyRulesParams, opts ...ClientOption) (*APIPreemptProxyGetPolicyRulesOK, error)

	APIPreemptProxyGetPolicyRulesQuery(params *APIPreemptProxyGetPolicyRulesQueryParams, opts ...ClientOption) (*APIPreemptProxyGetPolicyRulesQueryOK, error)

	APIPreemptProxyPostGraphql(params *APIPreemptProxyPostGraphqlParams, opts ...ClientOption) (*APIPreemptProxyPostGraphqlOK, error)

	APIPreemptProxyPostPolicyRules(params *APIPreemptProxyPostPolicyRulesParams, opts ...ClientOption) (*APIPreemptProxyPostPolicyRulesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
APIPreemptProxyDeletePolicyRules deletes policy rules
*/
func (a *Client) APIPreemptProxyDeletePolicyRules(params *APIPreemptProxyDeletePolicyRulesParams, opts ...ClientOption) (*APIPreemptProxyDeletePolicyRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIPreemptProxyDeletePolicyRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api.preempt.proxy.delete.policy-rules",
		Method:             "DELETE",
		PathPattern:        "/identity-protection/entities/policy-rules/v1",
		ProducesMediaTypes: []string{"application/json", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APIPreemptProxyDeletePolicyRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIPreemptProxyDeletePolicyRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api.preempt.proxy.delete.policy-rules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
APIPreemptProxyGetPolicyRules gets policy rules
*/
func (a *Client) APIPreemptProxyGetPolicyRules(params *APIPreemptProxyGetPolicyRulesParams, opts ...ClientOption) (*APIPreemptProxyGetPolicyRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIPreemptProxyGetPolicyRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api.preempt.proxy.get.policy-rules",
		Method:             "GET",
		PathPattern:        "/identity-protection/entities/policy-rules/v1",
		ProducesMediaTypes: []string{"application/json", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APIPreemptProxyGetPolicyRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIPreemptProxyGetPolicyRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api.preempt.proxy.get.policy-rules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
APIPreemptProxyGetPolicyRulesQuery queries policy rule i ds
*/
func (a *Client) APIPreemptProxyGetPolicyRulesQuery(params *APIPreemptProxyGetPolicyRulesQueryParams, opts ...ClientOption) (*APIPreemptProxyGetPolicyRulesQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIPreemptProxyGetPolicyRulesQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api.preempt.proxy.get.policy-rules.query",
		Method:             "GET",
		PathPattern:        "/identity-protection/queries/policy-rules/v1",
		ProducesMediaTypes: []string{"application/json", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APIPreemptProxyGetPolicyRulesQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIPreemptProxyGetPolicyRulesQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api.preempt.proxy.get.policy-rules.query: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
APIPreemptProxyPostGraphql identities protection graph q l API allows to retrieve entities timeline activities identity based incidents and security assessment allows to perform actions on entities and identity based incidents
*/
func (a *Client) APIPreemptProxyPostGraphql(params *APIPreemptProxyPostGraphqlParams, opts ...ClientOption) (*APIPreemptProxyPostGraphqlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIPreemptProxyPostGraphqlParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api.preempt.proxy.post.graphql",
		Method:             "POST",
		PathPattern:        "/identity-protection/combined/graphql/v1",
		ProducesMediaTypes: []string{"application/json", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APIPreemptProxyPostGraphqlReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIPreemptProxyPostGraphqlOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api.preempt.proxy.post.graphql: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
APIPreemptProxyPostPolicyRules creates policy rule
*/
func (a *Client) APIPreemptProxyPostPolicyRules(params *APIPreemptProxyPostPolicyRulesParams, opts ...ClientOption) (*APIPreemptProxyPostPolicyRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIPreemptProxyPostPolicyRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api.preempt.proxy.post.policy-rules",
		Method:             "POST",
		PathPattern:        "/identity-protection/entities/policy-rules/v1",
		ProducesMediaTypes: []string{"application/json", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APIPreemptProxyPostPolicyRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIPreemptProxyPostPolicyRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api.preempt.proxy.post.policy-rules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
