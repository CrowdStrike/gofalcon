// Code generated by go-swagger; DO NOT EDIT.

package container_images

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewAggregateImageCountParams creates a new AggregateImageCountParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAggregateImageCountParams() *AggregateImageCountParams {
	return &AggregateImageCountParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAggregateImageCountParamsWithTimeout creates a new AggregateImageCountParams object
// with the ability to set a timeout on a request.
func NewAggregateImageCountParamsWithTimeout(timeout time.Duration) *AggregateImageCountParams {
	return &AggregateImageCountParams{
		timeout: timeout,
	}
}

// NewAggregateImageCountParamsWithContext creates a new AggregateImageCountParams object
// with the ability to set a context for a request.
func NewAggregateImageCountParamsWithContext(ctx context.Context) *AggregateImageCountParams {
	return &AggregateImageCountParams{
		Context: ctx,
	}
}

// NewAggregateImageCountParamsWithHTTPClient creates a new AggregateImageCountParams object
// with the ability to set a custom HTTPClient for a request.
func NewAggregateImageCountParamsWithHTTPClient(client *http.Client) *AggregateImageCountParams {
	return &AggregateImageCountParams{
		HTTPClient: client,
	}
}

/*
AggregateImageCountParams contains all the parameters to send to the API endpoint

	for the aggregate image count operation.

	Typically these are written to a http.Request.
*/
type AggregateImageCountParams struct {

	/* Filter.

	   Filter images using a query in Falcon Query Language (FQL). Supported filters:  arch,base_os,cid,container_id,container_running_status,cps_rating,crowdstrike_user,cve_id,detection_count,detection_name,detection_severity,first_seen,image_digest,image_id,layer_digest,package_name_version,registry,repository,tag,vulnerability_count,vulnerability_severity
	*/
	Filter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the aggregate image count params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AggregateImageCountParams) WithDefaults() *AggregateImageCountParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the aggregate image count params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AggregateImageCountParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the aggregate image count params
func (o *AggregateImageCountParams) WithTimeout(timeout time.Duration) *AggregateImageCountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the aggregate image count params
func (o *AggregateImageCountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the aggregate image count params
func (o *AggregateImageCountParams) WithContext(ctx context.Context) *AggregateImageCountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the aggregate image count params
func (o *AggregateImageCountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the aggregate image count params
func (o *AggregateImageCountParams) WithHTTPClient(client *http.Client) *AggregateImageCountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the aggregate image count params
func (o *AggregateImageCountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the aggregate image count params
func (o *AggregateImageCountParams) WithFilter(filter *string) *AggregateImageCountParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the aggregate image count params
func (o *AggregateImageCountParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WriteToRequest writes these params to a swagger request
func (o *AggregateImageCountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
