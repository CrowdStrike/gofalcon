// Code generated by go-swagger; DO NOT EDIT.

package container_images

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new container images API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for container images API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AggregateImageAssessmentHistory(params *AggregateImageAssessmentHistoryParams, opts ...ClientOption) (*AggregateImageAssessmentHistoryOK, error)

	AggregateImageCount(params *AggregateImageCountParams, opts ...ClientOption) (*AggregateImageCountOK, error)

	AggregateImageCountByBaseOS(params *AggregateImageCountByBaseOSParams, opts ...ClientOption) (*AggregateImageCountByBaseOSOK, error)

	AggregateImageCountByState(params *AggregateImageCountByStateParams, opts ...ClientOption) (*AggregateImageCountByStateOK, error)

	CombinedImageByVulnerabilityCount(params *CombinedImageByVulnerabilityCountParams, opts ...ClientOption) (*CombinedImageByVulnerabilityCountOK, error)

	CombinedImageDetail(params *CombinedImageDetailParams, opts ...ClientOption) (*CombinedImageDetailOK, error)

	CombinedImageIssuesSummary(params *CombinedImageIssuesSummaryParams, opts ...ClientOption) (*CombinedImageIssuesSummaryOK, error)

	CombinedImageVulnerabilitySummary(params *CombinedImageVulnerabilitySummaryParams, opts ...ClientOption) (*CombinedImageVulnerabilitySummaryOK, error)

	GetCombinedImages(params *GetCombinedImagesParams, opts ...ClientOption) (*GetCombinedImagesOK, error)

	ReadCombinedImagesExport(params *ReadCombinedImagesExportParams, opts ...ClientOption) (*ReadCombinedImagesExportOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AggregateImageAssessmentHistory images assessment history
*/
func (a *Client) AggregateImageAssessmentHistory(params *AggregateImageAssessmentHistoryParams, opts ...ClientOption) (*AggregateImageAssessmentHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAggregateImageAssessmentHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AggregateImageAssessmentHistory",
		Method:             "GET",
		PathPattern:        "/container-security/aggregates/images/assessment-history/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AggregateImageAssessmentHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AggregateImageAssessmentHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AggregateImageAssessmentHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AggregateImageCount aggregates count of images
*/
func (a *Client) AggregateImageCount(params *AggregateImageCountParams, opts ...ClientOption) (*AggregateImageCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAggregateImageCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AggregateImageCount",
		Method:             "GET",
		PathPattern:        "/container-security/aggregates/images/count/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AggregateImageCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AggregateImageCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AggregateImageCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AggregateImageCountByBaseOS aggregates count of images grouped by base o s distribution
*/
func (a *Client) AggregateImageCountByBaseOS(params *AggregateImageCountByBaseOSParams, opts ...ClientOption) (*AggregateImageCountByBaseOSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAggregateImageCountByBaseOSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AggregateImageCountByBaseOS",
		Method:             "GET",
		PathPattern:        "/container-security/aggregates/images/count-by-os-distribution/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AggregateImageCountByBaseOSReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AggregateImageCountByBaseOSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AggregateImageCountByBaseOS: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AggregateImageCountByState aggregates count of images grouped by state
*/
func (a *Client) AggregateImageCountByState(params *AggregateImageCountByStateParams, opts ...ClientOption) (*AggregateImageCountByStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAggregateImageCountByStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AggregateImageCountByState",
		Method:             "GET",
		PathPattern:        "/container-security/aggregates/images/count-by-state/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AggregateImageCountByStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AggregateImageCountByStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AggregateImageCountByState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CombinedImageByVulnerabilityCount retrieves top x images with the most vulnerabilities
*/
func (a *Client) CombinedImageByVulnerabilityCount(params *CombinedImageByVulnerabilityCountParams, opts ...ClientOption) (*CombinedImageByVulnerabilityCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCombinedImageByVulnerabilityCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CombinedImageByVulnerabilityCount",
		Method:             "GET",
		PathPattern:        "/container-security/combined/images/by-vulnerability-count/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CombinedImageByVulnerabilityCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CombinedImageByVulnerabilityCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CombinedImageByVulnerabilityCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CombinedImageDetail retrieves image entities identified by the provided filter criteria
*/
func (a *Client) CombinedImageDetail(params *CombinedImageDetailParams, opts ...ClientOption) (*CombinedImageDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCombinedImageDetailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CombinedImageDetail",
		Method:             "GET",
		PathPattern:        "/container-security/combined/images/detail/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CombinedImageDetailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CombinedImageDetailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CombinedImageDetail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CombinedImageIssuesSummary retrieves image issues summary such as image detections runtime detections policies vulnerabilities
*/
func (a *Client) CombinedImageIssuesSummary(params *CombinedImageIssuesSummaryParams, opts ...ClientOption) (*CombinedImageIssuesSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCombinedImageIssuesSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CombinedImageIssuesSummary",
		Method:             "GET",
		PathPattern:        "/container-security/combined/images/issues-summary/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CombinedImageIssuesSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CombinedImageIssuesSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CombinedImageIssuesSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CombinedImageVulnerabilitySummary aggregates information about vulnerabilities for an image
*/
func (a *Client) CombinedImageVulnerabilitySummary(params *CombinedImageVulnerabilitySummaryParams, opts ...ClientOption) (*CombinedImageVulnerabilitySummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCombinedImageVulnerabilitySummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CombinedImageVulnerabilitySummary",
		Method:             "GET",
		PathPattern:        "/container-security/combined/images/vulnerabilities-summary/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CombinedImageVulnerabilitySummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CombinedImageVulnerabilitySummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CombinedImageVulnerabilitySummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCombinedImages gets image assessment results by providing an f q l filter and paging details
*/
func (a *Client) GetCombinedImages(params *GetCombinedImagesParams, opts ...ClientOption) (*GetCombinedImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCombinedImagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCombinedImages",
		Method:             "GET",
		PathPattern:        "/container-security/combined/image-assessment/images/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCombinedImagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCombinedImagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCombinedImages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadCombinedImagesExport retrieves images with an option to expand aggregated vulnerabilities detections
*/
func (a *Client) ReadCombinedImagesExport(params *ReadCombinedImagesExportParams, opts ...ClientOption) (*ReadCombinedImagesExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCombinedImagesExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadCombinedImagesExport",
		Method:             "GET",
		PathPattern:        "/container-security/combined/images/export/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadCombinedImagesExportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCombinedImagesExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadCombinedImagesExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
