// Code generated by go-swagger; DO NOT EDIT.

package container_images

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// AggregateImageCountByBaseOSReader is a Reader for the AggregateImageCountByBaseOS structure.
type AggregateImageCountByBaseOSReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AggregateImageCountByBaseOSReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAggregateImageCountByBaseOSOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAggregateImageCountByBaseOSForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAggregateImageCountByBaseOSTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAggregateImageCountByBaseOSInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /container-security/aggregates/images/count-by-os-distribution/v1] AggregateImageCountByBaseOS", response, response.Code())
	}
}

// NewAggregateImageCountByBaseOSOK creates a AggregateImageCountByBaseOSOK with default headers values
func NewAggregateImageCountByBaseOSOK() *AggregateImageCountByBaseOSOK {
	return &AggregateImageCountByBaseOSOK{}
}

/*
AggregateImageCountByBaseOSOK describes a response with status code 200, with default header values.

OK
*/
type AggregateImageCountByBaseOSOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ImagesAPIImageCountByBaseOS
}

// IsSuccess returns true when this aggregate image count by base o s o k response has a 2xx status code
func (o *AggregateImageCountByBaseOSOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this aggregate image count by base o s o k response has a 3xx status code
func (o *AggregateImageCountByBaseOSOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate image count by base o s o k response has a 4xx status code
func (o *AggregateImageCountByBaseOSOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this aggregate image count by base o s o k response has a 5xx status code
func (o *AggregateImageCountByBaseOSOK) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate image count by base o s o k response a status code equal to that given
func (o *AggregateImageCountByBaseOSOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the aggregate image count by base o s o k response
func (o *AggregateImageCountByBaseOSOK) Code() int {
	return 200
}

func (o *AggregateImageCountByBaseOSOK) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/images/count-by-os-distribution/v1][%d] aggregateImageCountByBaseOSOK  %+v", 200, o.Payload)
}

func (o *AggregateImageCountByBaseOSOK) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/images/count-by-os-distribution/v1][%d] aggregateImageCountByBaseOSOK  %+v", 200, o.Payload)
}

func (o *AggregateImageCountByBaseOSOK) GetPayload() *models.ImagesAPIImageCountByBaseOS {
	return o.Payload
}

func (o *AggregateImageCountByBaseOSOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ImagesAPIImageCountByBaseOS)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateImageCountByBaseOSForbidden creates a AggregateImageCountByBaseOSForbidden with default headers values
func NewAggregateImageCountByBaseOSForbidden() *AggregateImageCountByBaseOSForbidden {
	return &AggregateImageCountByBaseOSForbidden{}
}

/*
AggregateImageCountByBaseOSForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AggregateImageCountByBaseOSForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this aggregate image count by base o s forbidden response has a 2xx status code
func (o *AggregateImageCountByBaseOSForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate image count by base o s forbidden response has a 3xx status code
func (o *AggregateImageCountByBaseOSForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate image count by base o s forbidden response has a 4xx status code
func (o *AggregateImageCountByBaseOSForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate image count by base o s forbidden response has a 5xx status code
func (o *AggregateImageCountByBaseOSForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate image count by base o s forbidden response a status code equal to that given
func (o *AggregateImageCountByBaseOSForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the aggregate image count by base o s forbidden response
func (o *AggregateImageCountByBaseOSForbidden) Code() int {
	return 403
}

func (o *AggregateImageCountByBaseOSForbidden) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/images/count-by-os-distribution/v1][%d] aggregateImageCountByBaseOSForbidden  %+v", 403, o.Payload)
}

func (o *AggregateImageCountByBaseOSForbidden) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/images/count-by-os-distribution/v1][%d] aggregateImageCountByBaseOSForbidden  %+v", 403, o.Payload)
}

func (o *AggregateImageCountByBaseOSForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *AggregateImageCountByBaseOSForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateImageCountByBaseOSTooManyRequests creates a AggregateImageCountByBaseOSTooManyRequests with default headers values
func NewAggregateImageCountByBaseOSTooManyRequests() *AggregateImageCountByBaseOSTooManyRequests {
	return &AggregateImageCountByBaseOSTooManyRequests{}
}

/*
AggregateImageCountByBaseOSTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type AggregateImageCountByBaseOSTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this aggregate image count by base o s too many requests response has a 2xx status code
func (o *AggregateImageCountByBaseOSTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate image count by base o s too many requests response has a 3xx status code
func (o *AggregateImageCountByBaseOSTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate image count by base o s too many requests response has a 4xx status code
func (o *AggregateImageCountByBaseOSTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate image count by base o s too many requests response has a 5xx status code
func (o *AggregateImageCountByBaseOSTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate image count by base o s too many requests response a status code equal to that given
func (o *AggregateImageCountByBaseOSTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the aggregate image count by base o s too many requests response
func (o *AggregateImageCountByBaseOSTooManyRequests) Code() int {
	return 429
}

func (o *AggregateImageCountByBaseOSTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/images/count-by-os-distribution/v1][%d] aggregateImageCountByBaseOSTooManyRequests  %+v", 429, o.Payload)
}

func (o *AggregateImageCountByBaseOSTooManyRequests) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/images/count-by-os-distribution/v1][%d] aggregateImageCountByBaseOSTooManyRequests  %+v", 429, o.Payload)
}

func (o *AggregateImageCountByBaseOSTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *AggregateImageCountByBaseOSTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateImageCountByBaseOSInternalServerError creates a AggregateImageCountByBaseOSInternalServerError with default headers values
func NewAggregateImageCountByBaseOSInternalServerError() *AggregateImageCountByBaseOSInternalServerError {
	return &AggregateImageCountByBaseOSInternalServerError{}
}

/*
AggregateImageCountByBaseOSInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AggregateImageCountByBaseOSInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CoreEntitiesResponse
}

// IsSuccess returns true when this aggregate image count by base o s internal server error response has a 2xx status code
func (o *AggregateImageCountByBaseOSInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate image count by base o s internal server error response has a 3xx status code
func (o *AggregateImageCountByBaseOSInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate image count by base o s internal server error response has a 4xx status code
func (o *AggregateImageCountByBaseOSInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this aggregate image count by base o s internal server error response has a 5xx status code
func (o *AggregateImageCountByBaseOSInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this aggregate image count by base o s internal server error response a status code equal to that given
func (o *AggregateImageCountByBaseOSInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the aggregate image count by base o s internal server error response
func (o *AggregateImageCountByBaseOSInternalServerError) Code() int {
	return 500
}

func (o *AggregateImageCountByBaseOSInternalServerError) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/images/count-by-os-distribution/v1][%d] aggregateImageCountByBaseOSInternalServerError  %+v", 500, o.Payload)
}

func (o *AggregateImageCountByBaseOSInternalServerError) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/images/count-by-os-distribution/v1][%d] aggregateImageCountByBaseOSInternalServerError  %+v", 500, o.Payload)
}

func (o *AggregateImageCountByBaseOSInternalServerError) GetPayload() *models.CoreEntitiesResponse {
	return o.Payload
}

func (o *AggregateImageCountByBaseOSInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CoreEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
