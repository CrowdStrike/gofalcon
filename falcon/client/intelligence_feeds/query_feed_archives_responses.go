// Code generated by go-swagger; DO NOT EDIT.

package intelligence_feeds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// QueryFeedArchivesReader is a Reader for the QueryFeedArchives structure.
type QueryFeedArchivesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryFeedArchivesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryFeedArchivesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryFeedArchivesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewQueryFeedArchivesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewQueryFeedArchivesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewQueryFeedArchivesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /indicator-feed/queries/feed/v1] QueryFeedArchives", response, response.Code())
	}
}

// NewQueryFeedArchivesOK creates a QueryFeedArchivesOK with default headers values
func NewQueryFeedArchivesOK() *QueryFeedArchivesOK {
	return &QueryFeedArchivesOK{}
}

/*
QueryFeedArchivesOK describes a response with status code 200, with default header values.

OK
*/
type QueryFeedArchivesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RestapiIndicatorFeedQueryResponse
}

// IsSuccess returns true when this query feed archives o k response has a 2xx status code
func (o *QueryFeedArchivesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this query feed archives o k response has a 3xx status code
func (o *QueryFeedArchivesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query feed archives o k response has a 4xx status code
func (o *QueryFeedArchivesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this query feed archives o k response has a 5xx status code
func (o *QueryFeedArchivesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this query feed archives o k response a status code equal to that given
func (o *QueryFeedArchivesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the query feed archives o k response
func (o *QueryFeedArchivesOK) Code() int {
	return 200
}

func (o *QueryFeedArchivesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /indicator-feed/queries/feed/v1][%d] queryFeedArchivesOK %s", 200, payload)
}

func (o *QueryFeedArchivesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /indicator-feed/queries/feed/v1][%d] queryFeedArchivesOK %s", 200, payload)
}

func (o *QueryFeedArchivesOK) GetPayload() *models.RestapiIndicatorFeedQueryResponse {
	return o.Payload
}

func (o *QueryFeedArchivesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RestapiIndicatorFeedQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryFeedArchivesBadRequest creates a QueryFeedArchivesBadRequest with default headers values
func NewQueryFeedArchivesBadRequest() *QueryFeedArchivesBadRequest {
	return &QueryFeedArchivesBadRequest{}
}

/*
QueryFeedArchivesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type QueryFeedArchivesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this query feed archives bad request response has a 2xx status code
func (o *QueryFeedArchivesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query feed archives bad request response has a 3xx status code
func (o *QueryFeedArchivesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query feed archives bad request response has a 4xx status code
func (o *QueryFeedArchivesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this query feed archives bad request response has a 5xx status code
func (o *QueryFeedArchivesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this query feed archives bad request response a status code equal to that given
func (o *QueryFeedArchivesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the query feed archives bad request response
func (o *QueryFeedArchivesBadRequest) Code() int {
	return 400
}

func (o *QueryFeedArchivesBadRequest) Error() string {
	return fmt.Sprintf("[GET /indicator-feed/queries/feed/v1][%d] queryFeedArchivesBadRequest", 400)
}

func (o *QueryFeedArchivesBadRequest) String() string {
	return fmt.Sprintf("[GET /indicator-feed/queries/feed/v1][%d] queryFeedArchivesBadRequest", 400)
}

func (o *QueryFeedArchivesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewQueryFeedArchivesForbidden creates a QueryFeedArchivesForbidden with default headers values
func NewQueryFeedArchivesForbidden() *QueryFeedArchivesForbidden {
	return &QueryFeedArchivesForbidden{}
}

/*
QueryFeedArchivesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type QueryFeedArchivesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this query feed archives forbidden response has a 2xx status code
func (o *QueryFeedArchivesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query feed archives forbidden response has a 3xx status code
func (o *QueryFeedArchivesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query feed archives forbidden response has a 4xx status code
func (o *QueryFeedArchivesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this query feed archives forbidden response has a 5xx status code
func (o *QueryFeedArchivesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this query feed archives forbidden response a status code equal to that given
func (o *QueryFeedArchivesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the query feed archives forbidden response
func (o *QueryFeedArchivesForbidden) Code() int {
	return 403
}

func (o *QueryFeedArchivesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /indicator-feed/queries/feed/v1][%d] queryFeedArchivesForbidden %s", 403, payload)
}

func (o *QueryFeedArchivesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /indicator-feed/queries/feed/v1][%d] queryFeedArchivesForbidden %s", 403, payload)
}

func (o *QueryFeedArchivesForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryFeedArchivesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryFeedArchivesTooManyRequests creates a QueryFeedArchivesTooManyRequests with default headers values
func NewQueryFeedArchivesTooManyRequests() *QueryFeedArchivesTooManyRequests {
	return &QueryFeedArchivesTooManyRequests{}
}

/*
QueryFeedArchivesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type QueryFeedArchivesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this query feed archives too many requests response has a 2xx status code
func (o *QueryFeedArchivesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query feed archives too many requests response has a 3xx status code
func (o *QueryFeedArchivesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query feed archives too many requests response has a 4xx status code
func (o *QueryFeedArchivesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this query feed archives too many requests response has a 5xx status code
func (o *QueryFeedArchivesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this query feed archives too many requests response a status code equal to that given
func (o *QueryFeedArchivesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the query feed archives too many requests response
func (o *QueryFeedArchivesTooManyRequests) Code() int {
	return 429
}

func (o *QueryFeedArchivesTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /indicator-feed/queries/feed/v1][%d] queryFeedArchivesTooManyRequests %s", 429, payload)
}

func (o *QueryFeedArchivesTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /indicator-feed/queries/feed/v1][%d] queryFeedArchivesTooManyRequests %s", 429, payload)
}

func (o *QueryFeedArchivesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryFeedArchivesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryFeedArchivesInternalServerError creates a QueryFeedArchivesInternalServerError with default headers values
func NewQueryFeedArchivesInternalServerError() *QueryFeedArchivesInternalServerError {
	return &QueryFeedArchivesInternalServerError{}
}

/*
QueryFeedArchivesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type QueryFeedArchivesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this query feed archives internal server error response has a 2xx status code
func (o *QueryFeedArchivesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query feed archives internal server error response has a 3xx status code
func (o *QueryFeedArchivesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query feed archives internal server error response has a 4xx status code
func (o *QueryFeedArchivesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this query feed archives internal server error response has a 5xx status code
func (o *QueryFeedArchivesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this query feed archives internal server error response a status code equal to that given
func (o *QueryFeedArchivesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the query feed archives internal server error response
func (o *QueryFeedArchivesInternalServerError) Code() int {
	return 500
}

func (o *QueryFeedArchivesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /indicator-feed/queries/feed/v1][%d] queryFeedArchivesInternalServerError", 500)
}

func (o *QueryFeedArchivesInternalServerError) String() string {
	return fmt.Sprintf("[GET /indicator-feed/queries/feed/v1][%d] queryFeedArchivesInternalServerError", 500)
}

func (o *QueryFeedArchivesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}
