// Code generated by go-swagger; DO NOT EDIT.

package intelligence_feeds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// DownloadFeedArchiveReader is a Reader for the DownloadFeedArchive structure.
type DownloadFeedArchiveReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DownloadFeedArchiveReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 308:
		result := NewDownloadFeedArchivePermanentRedirect()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 400:
		result := NewDownloadFeedArchiveBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDownloadFeedArchiveForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDownloadFeedArchiveTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDownloadFeedArchiveInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /indicator-feed/entities/feed-download/v1] DownloadFeedArchive", response, response.Code())
	}
}

// NewDownloadFeedArchivePermanentRedirect creates a DownloadFeedArchivePermanentRedirect with default headers values
func NewDownloadFeedArchivePermanentRedirect() *DownloadFeedArchivePermanentRedirect {
	return &DownloadFeedArchivePermanentRedirect{}
}

/*
DownloadFeedArchivePermanentRedirect describes a response with status code 308, with default header values.

Permanent Redirect
*/
type DownloadFeedArchivePermanentRedirect struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Provides the download URL of a feed item. Available only if the provided feed ID is present and you have access to it.
	 */
	Location string

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this download feed archive permanent redirect response has a 2xx status code
func (o *DownloadFeedArchivePermanentRedirect) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download feed archive permanent redirect response has a 3xx status code
func (o *DownloadFeedArchivePermanentRedirect) IsRedirect() bool {
	return true
}

// IsClientError returns true when this download feed archive permanent redirect response has a 4xx status code
func (o *DownloadFeedArchivePermanentRedirect) IsClientError() bool {
	return false
}

// IsServerError returns true when this download feed archive permanent redirect response has a 5xx status code
func (o *DownloadFeedArchivePermanentRedirect) IsServerError() bool {
	return false
}

// IsCode returns true when this download feed archive permanent redirect response a status code equal to that given
func (o *DownloadFeedArchivePermanentRedirect) IsCode(code int) bool {
	return code == 308
}

// Code gets the status code for the download feed archive permanent redirect response
func (o *DownloadFeedArchivePermanentRedirect) Code() int {
	return 308
}

func (o *DownloadFeedArchivePermanentRedirect) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /indicator-feed/entities/feed-download/v1][%d] downloadFeedArchivePermanentRedirect %s", 308, payload)
}

func (o *DownloadFeedArchivePermanentRedirect) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /indicator-feed/entities/feed-download/v1][%d] downloadFeedArchivePermanentRedirect %s", 308, payload)
}

func (o *DownloadFeedArchivePermanentRedirect) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DownloadFeedArchivePermanentRedirect) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header location
	hdrLocation := response.GetHeader("location")

	if hdrLocation != "" {
		o.Location = hdrLocation
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadFeedArchiveBadRequest creates a DownloadFeedArchiveBadRequest with default headers values
func NewDownloadFeedArchiveBadRequest() *DownloadFeedArchiveBadRequest {
	return &DownloadFeedArchiveBadRequest{}
}

/*
DownloadFeedArchiveBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DownloadFeedArchiveBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this download feed archive bad request response has a 2xx status code
func (o *DownloadFeedArchiveBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download feed archive bad request response has a 3xx status code
func (o *DownloadFeedArchiveBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download feed archive bad request response has a 4xx status code
func (o *DownloadFeedArchiveBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this download feed archive bad request response has a 5xx status code
func (o *DownloadFeedArchiveBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this download feed archive bad request response a status code equal to that given
func (o *DownloadFeedArchiveBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the download feed archive bad request response
func (o *DownloadFeedArchiveBadRequest) Code() int {
	return 400
}

func (o *DownloadFeedArchiveBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /indicator-feed/entities/feed-download/v1][%d] downloadFeedArchiveBadRequest %s", 400, payload)
}

func (o *DownloadFeedArchiveBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /indicator-feed/entities/feed-download/v1][%d] downloadFeedArchiveBadRequest %s", 400, payload)
}

func (o *DownloadFeedArchiveBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DownloadFeedArchiveBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadFeedArchiveForbidden creates a DownloadFeedArchiveForbidden with default headers values
func NewDownloadFeedArchiveForbidden() *DownloadFeedArchiveForbidden {
	return &DownloadFeedArchiveForbidden{}
}

/*
DownloadFeedArchiveForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DownloadFeedArchiveForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this download feed archive forbidden response has a 2xx status code
func (o *DownloadFeedArchiveForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download feed archive forbidden response has a 3xx status code
func (o *DownloadFeedArchiveForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download feed archive forbidden response has a 4xx status code
func (o *DownloadFeedArchiveForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this download feed archive forbidden response has a 5xx status code
func (o *DownloadFeedArchiveForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this download feed archive forbidden response a status code equal to that given
func (o *DownloadFeedArchiveForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the download feed archive forbidden response
func (o *DownloadFeedArchiveForbidden) Code() int {
	return 403
}

func (o *DownloadFeedArchiveForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /indicator-feed/entities/feed-download/v1][%d] downloadFeedArchiveForbidden %s", 403, payload)
}

func (o *DownloadFeedArchiveForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /indicator-feed/entities/feed-download/v1][%d] downloadFeedArchiveForbidden %s", 403, payload)
}

func (o *DownloadFeedArchiveForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DownloadFeedArchiveForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadFeedArchiveTooManyRequests creates a DownloadFeedArchiveTooManyRequests with default headers values
func NewDownloadFeedArchiveTooManyRequests() *DownloadFeedArchiveTooManyRequests {
	return &DownloadFeedArchiveTooManyRequests{}
}

/*
DownloadFeedArchiveTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type DownloadFeedArchiveTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this download feed archive too many requests response has a 2xx status code
func (o *DownloadFeedArchiveTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download feed archive too many requests response has a 3xx status code
func (o *DownloadFeedArchiveTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download feed archive too many requests response has a 4xx status code
func (o *DownloadFeedArchiveTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this download feed archive too many requests response has a 5xx status code
func (o *DownloadFeedArchiveTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this download feed archive too many requests response a status code equal to that given
func (o *DownloadFeedArchiveTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the download feed archive too many requests response
func (o *DownloadFeedArchiveTooManyRequests) Code() int {
	return 429
}

func (o *DownloadFeedArchiveTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /indicator-feed/entities/feed-download/v1][%d] downloadFeedArchiveTooManyRequests %s", 429, payload)
}

func (o *DownloadFeedArchiveTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /indicator-feed/entities/feed-download/v1][%d] downloadFeedArchiveTooManyRequests %s", 429, payload)
}

func (o *DownloadFeedArchiveTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DownloadFeedArchiveTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadFeedArchiveInternalServerError creates a DownloadFeedArchiveInternalServerError with default headers values
func NewDownloadFeedArchiveInternalServerError() *DownloadFeedArchiveInternalServerError {
	return &DownloadFeedArchiveInternalServerError{}
}

/*
DownloadFeedArchiveInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DownloadFeedArchiveInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this download feed archive internal server error response has a 2xx status code
func (o *DownloadFeedArchiveInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download feed archive internal server error response has a 3xx status code
func (o *DownloadFeedArchiveInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download feed archive internal server error response has a 4xx status code
func (o *DownloadFeedArchiveInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this download feed archive internal server error response has a 5xx status code
func (o *DownloadFeedArchiveInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this download feed archive internal server error response a status code equal to that given
func (o *DownloadFeedArchiveInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the download feed archive internal server error response
func (o *DownloadFeedArchiveInternalServerError) Code() int {
	return 500
}

func (o *DownloadFeedArchiveInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /indicator-feed/entities/feed-download/v1][%d] downloadFeedArchiveInternalServerError %s", 500, payload)
}

func (o *DownloadFeedArchiveInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /indicator-feed/entities/feed-download/v1][%d] downloadFeedArchiveInternalServerError %s", 500, payload)
}

func (o *DownloadFeedArchiveInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DownloadFeedArchiveInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
