// Code generated by go-swagger; DO NOT EDIT.

package intelligence_feeds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewQueryFeedArchivesParams creates a new QueryFeedArchivesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewQueryFeedArchivesParams() *QueryFeedArchivesParams {
	return &QueryFeedArchivesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewQueryFeedArchivesParamsWithTimeout creates a new QueryFeedArchivesParams object
// with the ability to set a timeout on a request.
func NewQueryFeedArchivesParamsWithTimeout(timeout time.Duration) *QueryFeedArchivesParams {
	return &QueryFeedArchivesParams{
		timeout: timeout,
	}
}

// NewQueryFeedArchivesParamsWithContext creates a new QueryFeedArchivesParams object
// with the ability to set a context for a request.
func NewQueryFeedArchivesParamsWithContext(ctx context.Context) *QueryFeedArchivesParams {
	return &QueryFeedArchivesParams{
		Context: ctx,
	}
}

// NewQueryFeedArchivesParamsWithHTTPClient creates a new QueryFeedArchivesParams object
// with the ability to set a custom HTTPClient for a request.
func NewQueryFeedArchivesParamsWithHTTPClient(client *http.Client) *QueryFeedArchivesParams {
	return &QueryFeedArchivesParams{
		HTTPClient: client,
	}
}

/*
QueryFeedArchivesParams contains all the parameters to send to the API endpoint

	for the query feed archives operation.

	Typically these are written to a http.Request.
*/
type QueryFeedArchivesParams struct {

	/* FeedInterval.

	   Feed interval must be one of: dump|daily|hourly|minutely
	*/
	FeedInterval string

	/* FeedName.

	   Feed Name
	*/
	FeedName *string

	/* Since.

	   Since is a valid timestamp in RFC3399 format. Restrictions: minutely: now()-2h, hourly: now()-2d, daily: now()-5d; dump: now()-7d
	*/
	Since *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the query feed archives params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryFeedArchivesParams) WithDefaults() *QueryFeedArchivesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the query feed archives params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryFeedArchivesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the query feed archives params
func (o *QueryFeedArchivesParams) WithTimeout(timeout time.Duration) *QueryFeedArchivesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query feed archives params
func (o *QueryFeedArchivesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query feed archives params
func (o *QueryFeedArchivesParams) WithContext(ctx context.Context) *QueryFeedArchivesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query feed archives params
func (o *QueryFeedArchivesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query feed archives params
func (o *QueryFeedArchivesParams) WithHTTPClient(client *http.Client) *QueryFeedArchivesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query feed archives params
func (o *QueryFeedArchivesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFeedInterval adds the feedInterval to the query feed archives params
func (o *QueryFeedArchivesParams) WithFeedInterval(feedInterval string) *QueryFeedArchivesParams {
	o.SetFeedInterval(feedInterval)
	return o
}

// SetFeedInterval adds the feedInterval to the query feed archives params
func (o *QueryFeedArchivesParams) SetFeedInterval(feedInterval string) {
	o.FeedInterval = feedInterval
}

// WithFeedName adds the feedName to the query feed archives params
func (o *QueryFeedArchivesParams) WithFeedName(feedName *string) *QueryFeedArchivesParams {
	o.SetFeedName(feedName)
	return o
}

// SetFeedName adds the feedName to the query feed archives params
func (o *QueryFeedArchivesParams) SetFeedName(feedName *string) {
	o.FeedName = feedName
}

// WithSince adds the since to the query feed archives params
func (o *QueryFeedArchivesParams) WithSince(since *string) *QueryFeedArchivesParams {
	o.SetSince(since)
	return o
}

// SetSince adds the since to the query feed archives params
func (o *QueryFeedArchivesParams) SetSince(since *string) {
	o.Since = since
}

// WriteToRequest writes these params to a swagger request
func (o *QueryFeedArchivesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param feed_interval
	qrFeedInterval := o.FeedInterval
	qFeedInterval := qrFeedInterval
	if qFeedInterval != "" {

		if err := r.SetQueryParam("feed_interval", qFeedInterval); err != nil {
			return err
		}
	}

	if o.FeedName != nil {

		// query param feed_name
		var qrFeedName string

		if o.FeedName != nil {
			qrFeedName = *o.FeedName
		}
		qFeedName := qrFeedName
		if qFeedName != "" {

			if err := r.SetQueryParam("feed_name", qFeedName); err != nil {
				return err
			}
		}
	}

	if o.Since != nil {

		// query param since
		var qrSince string

		if o.Since != nil {
			qrSince = *o.Since
		}
		qSince := qrSince
		if qSince != "" {

			if err := r.SetQueryParam("since", qSince); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
