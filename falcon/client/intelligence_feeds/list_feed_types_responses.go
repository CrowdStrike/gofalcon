// Code generated by go-swagger; DO NOT EDIT.

package intelligence_feeds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ListFeedTypesReader is a Reader for the ListFeedTypes structure.
type ListFeedTypesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListFeedTypesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListFeedTypesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListFeedTypesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListFeedTypesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListFeedTypesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListFeedTypesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /indicator-feed/entities/feed/v1] ListFeedTypes", response, response.Code())
	}
}

// NewListFeedTypesOK creates a ListFeedTypesOK with default headers values
func NewListFeedTypesOK() *ListFeedTypesOK {
	return &ListFeedTypesOK{}
}

/*
ListFeedTypesOK describes a response with status code 200, with default header values.

OK
*/
type ListFeedTypesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RestapiIndicatorGetFeedsResponse
}

// IsSuccess returns true when this list feed types o k response has a 2xx status code
func (o *ListFeedTypesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list feed types o k response has a 3xx status code
func (o *ListFeedTypesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list feed types o k response has a 4xx status code
func (o *ListFeedTypesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list feed types o k response has a 5xx status code
func (o *ListFeedTypesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list feed types o k response a status code equal to that given
func (o *ListFeedTypesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list feed types o k response
func (o *ListFeedTypesOK) Code() int {
	return 200
}

func (o *ListFeedTypesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /indicator-feed/entities/feed/v1][%d] listFeedTypesOK %s", 200, payload)
}

func (o *ListFeedTypesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /indicator-feed/entities/feed/v1][%d] listFeedTypesOK %s", 200, payload)
}

func (o *ListFeedTypesOK) GetPayload() *models.RestapiIndicatorGetFeedsResponse {
	return o.Payload
}

func (o *ListFeedTypesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RestapiIndicatorGetFeedsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFeedTypesBadRequest creates a ListFeedTypesBadRequest with default headers values
func NewListFeedTypesBadRequest() *ListFeedTypesBadRequest {
	return &ListFeedTypesBadRequest{}
}

/*
ListFeedTypesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ListFeedTypesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this list feed types bad request response has a 2xx status code
func (o *ListFeedTypesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list feed types bad request response has a 3xx status code
func (o *ListFeedTypesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list feed types bad request response has a 4xx status code
func (o *ListFeedTypesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list feed types bad request response has a 5xx status code
func (o *ListFeedTypesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list feed types bad request response a status code equal to that given
func (o *ListFeedTypesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list feed types bad request response
func (o *ListFeedTypesBadRequest) Code() int {
	return 400
}

func (o *ListFeedTypesBadRequest) Error() string {
	return fmt.Sprintf("[GET /indicator-feed/entities/feed/v1][%d] listFeedTypesBadRequest", 400)
}

func (o *ListFeedTypesBadRequest) String() string {
	return fmt.Sprintf("[GET /indicator-feed/entities/feed/v1][%d] listFeedTypesBadRequest", 400)
}

func (o *ListFeedTypesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewListFeedTypesForbidden creates a ListFeedTypesForbidden with default headers values
func NewListFeedTypesForbidden() *ListFeedTypesForbidden {
	return &ListFeedTypesForbidden{}
}

/*
ListFeedTypesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListFeedTypesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this list feed types forbidden response has a 2xx status code
func (o *ListFeedTypesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list feed types forbidden response has a 3xx status code
func (o *ListFeedTypesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list feed types forbidden response has a 4xx status code
func (o *ListFeedTypesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list feed types forbidden response has a 5xx status code
func (o *ListFeedTypesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list feed types forbidden response a status code equal to that given
func (o *ListFeedTypesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list feed types forbidden response
func (o *ListFeedTypesForbidden) Code() int {
	return 403
}

func (o *ListFeedTypesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /indicator-feed/entities/feed/v1][%d] listFeedTypesForbidden %s", 403, payload)
}

func (o *ListFeedTypesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /indicator-feed/entities/feed/v1][%d] listFeedTypesForbidden %s", 403, payload)
}

func (o *ListFeedTypesForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ListFeedTypesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFeedTypesTooManyRequests creates a ListFeedTypesTooManyRequests with default headers values
func NewListFeedTypesTooManyRequests() *ListFeedTypesTooManyRequests {
	return &ListFeedTypesTooManyRequests{}
}

/*
ListFeedTypesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ListFeedTypesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this list feed types too many requests response has a 2xx status code
func (o *ListFeedTypesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list feed types too many requests response has a 3xx status code
func (o *ListFeedTypesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list feed types too many requests response has a 4xx status code
func (o *ListFeedTypesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list feed types too many requests response has a 5xx status code
func (o *ListFeedTypesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list feed types too many requests response a status code equal to that given
func (o *ListFeedTypesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list feed types too many requests response
func (o *ListFeedTypesTooManyRequests) Code() int {
	return 429
}

func (o *ListFeedTypesTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /indicator-feed/entities/feed/v1][%d] listFeedTypesTooManyRequests %s", 429, payload)
}

func (o *ListFeedTypesTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /indicator-feed/entities/feed/v1][%d] listFeedTypesTooManyRequests %s", 429, payload)
}

func (o *ListFeedTypesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ListFeedTypesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFeedTypesInternalServerError creates a ListFeedTypesInternalServerError with default headers values
func NewListFeedTypesInternalServerError() *ListFeedTypesInternalServerError {
	return &ListFeedTypesInternalServerError{}
}

/*
ListFeedTypesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ListFeedTypesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this list feed types internal server error response has a 2xx status code
func (o *ListFeedTypesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list feed types internal server error response has a 3xx status code
func (o *ListFeedTypesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list feed types internal server error response has a 4xx status code
func (o *ListFeedTypesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list feed types internal server error response has a 5xx status code
func (o *ListFeedTypesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list feed types internal server error response a status code equal to that given
func (o *ListFeedTypesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list feed types internal server error response
func (o *ListFeedTypesInternalServerError) Code() int {
	return 500
}

func (o *ListFeedTypesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /indicator-feed/entities/feed/v1][%d] listFeedTypesInternalServerError", 500)
}

func (o *ListFeedTypesInternalServerError) String() string {
	return fmt.Sprintf("[GET /indicator-feed/entities/feed/v1][%d] listFeedTypesInternalServerError", 500)
}

func (o *ListFeedTypesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}
