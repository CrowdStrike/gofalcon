// Code generated by go-swagger; DO NOT EDIT.

package cloud_security_assets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CloudSecurityAssetsCombinedComplianceByAccountReader is a Reader for the CloudSecurityAssetsCombinedComplianceByAccount structure.
type CloudSecurityAssetsCombinedComplianceByAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CloudSecurityAssetsCombinedComplianceByAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCloudSecurityAssetsCombinedComplianceByAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCloudSecurityAssetsCombinedComplianceByAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCloudSecurityAssetsCombinedComplianceByAccountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCloudSecurityAssetsCombinedComplianceByAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewCloudSecurityAssetsCombinedComplianceByAccountRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCloudSecurityAssetsCombinedComplianceByAccountTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCloudSecurityAssetsCombinedComplianceByAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cloud-security-assets/combined/compliance-controls/by-account-region-and-resource-type/v1] cloud-security-assets-combined-compliance-by-account", response, response.Code())
	}
}

// NewCloudSecurityAssetsCombinedComplianceByAccountOK creates a CloudSecurityAssetsCombinedComplianceByAccountOK with default headers values
func NewCloudSecurityAssetsCombinedComplianceByAccountOK() *CloudSecurityAssetsCombinedComplianceByAccountOK {
	return &CloudSecurityAssetsCombinedComplianceByAccountOK{}
}

/*
CloudSecurityAssetsCombinedComplianceByAccountOK describes a response with status code 200, with default header values.

OK
*/
type CloudSecurityAssetsCombinedComplianceByAccountOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetsComplianceResponse
}

// IsSuccess returns true when this cloud security assets combined compliance by account o k response has a 2xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cloud security assets combined compliance by account o k response has a 3xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cloud security assets combined compliance by account o k response has a 4xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cloud security assets combined compliance by account o k response has a 5xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cloud security assets combined compliance by account o k response a status code equal to that given
func (o *CloudSecurityAssetsCombinedComplianceByAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the cloud security assets combined compliance by account o k response
func (o *CloudSecurityAssetsCombinedComplianceByAccountOK) Code() int {
	return 200
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/combined/compliance-controls/by-account-region-and-resource-type/v1][%d] cloudSecurityAssetsCombinedComplianceByAccountOK %s", 200, payload)
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/combined/compliance-controls/by-account-region-and-resource-type/v1][%d] cloudSecurityAssetsCombinedComplianceByAccountOK %s", 200, payload)
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountOK) GetPayload() *models.AssetsComplianceResponse {
	return o.Payload
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetsComplianceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloudSecurityAssetsCombinedComplianceByAccountBadRequest creates a CloudSecurityAssetsCombinedComplianceByAccountBadRequest with default headers values
func NewCloudSecurityAssetsCombinedComplianceByAccountBadRequest() *CloudSecurityAssetsCombinedComplianceByAccountBadRequest {
	return &CloudSecurityAssetsCombinedComplianceByAccountBadRequest{}
}

/*
CloudSecurityAssetsCombinedComplianceByAccountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CloudSecurityAssetsCombinedComplianceByAccountBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RestCursorResponseFields
}

// IsSuccess returns true when this cloud security assets combined compliance by account bad request response has a 2xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cloud security assets combined compliance by account bad request response has a 3xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cloud security assets combined compliance by account bad request response has a 4xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cloud security assets combined compliance by account bad request response has a 5xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cloud security assets combined compliance by account bad request response a status code equal to that given
func (o *CloudSecurityAssetsCombinedComplianceByAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the cloud security assets combined compliance by account bad request response
func (o *CloudSecurityAssetsCombinedComplianceByAccountBadRequest) Code() int {
	return 400
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/combined/compliance-controls/by-account-region-and-resource-type/v1][%d] cloudSecurityAssetsCombinedComplianceByAccountBadRequest %s", 400, payload)
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/combined/compliance-controls/by-account-region-and-resource-type/v1][%d] cloudSecurityAssetsCombinedComplianceByAccountBadRequest %s", 400, payload)
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountBadRequest) GetPayload() *models.RestCursorResponseFields {
	return o.Payload
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RestCursorResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloudSecurityAssetsCombinedComplianceByAccountForbidden creates a CloudSecurityAssetsCombinedComplianceByAccountForbidden with default headers values
func NewCloudSecurityAssetsCombinedComplianceByAccountForbidden() *CloudSecurityAssetsCombinedComplianceByAccountForbidden {
	return &CloudSecurityAssetsCombinedComplianceByAccountForbidden{}
}

/*
CloudSecurityAssetsCombinedComplianceByAccountForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CloudSecurityAssetsCombinedComplianceByAccountForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this cloud security assets combined compliance by account forbidden response has a 2xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cloud security assets combined compliance by account forbidden response has a 3xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cloud security assets combined compliance by account forbidden response has a 4xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cloud security assets combined compliance by account forbidden response has a 5xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cloud security assets combined compliance by account forbidden response a status code equal to that given
func (o *CloudSecurityAssetsCombinedComplianceByAccountForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the cloud security assets combined compliance by account forbidden response
func (o *CloudSecurityAssetsCombinedComplianceByAccountForbidden) Code() int {
	return 403
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/combined/compliance-controls/by-account-region-and-resource-type/v1][%d] cloudSecurityAssetsCombinedComplianceByAccountForbidden %s", 403, payload)
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/combined/compliance-controls/by-account-region-and-resource-type/v1][%d] cloudSecurityAssetsCombinedComplianceByAccountForbidden %s", 403, payload)
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloudSecurityAssetsCombinedComplianceByAccountNotFound creates a CloudSecurityAssetsCombinedComplianceByAccountNotFound with default headers values
func NewCloudSecurityAssetsCombinedComplianceByAccountNotFound() *CloudSecurityAssetsCombinedComplianceByAccountNotFound {
	return &CloudSecurityAssetsCombinedComplianceByAccountNotFound{}
}

/*
CloudSecurityAssetsCombinedComplianceByAccountNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CloudSecurityAssetsCombinedComplianceByAccountNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RestCursorResponseFields
}

// IsSuccess returns true when this cloud security assets combined compliance by account not found response has a 2xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cloud security assets combined compliance by account not found response has a 3xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cloud security assets combined compliance by account not found response has a 4xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this cloud security assets combined compliance by account not found response has a 5xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this cloud security assets combined compliance by account not found response a status code equal to that given
func (o *CloudSecurityAssetsCombinedComplianceByAccountNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the cloud security assets combined compliance by account not found response
func (o *CloudSecurityAssetsCombinedComplianceByAccountNotFound) Code() int {
	return 404
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/combined/compliance-controls/by-account-region-and-resource-type/v1][%d] cloudSecurityAssetsCombinedComplianceByAccountNotFound %s", 404, payload)
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/combined/compliance-controls/by-account-region-and-resource-type/v1][%d] cloudSecurityAssetsCombinedComplianceByAccountNotFound %s", 404, payload)
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountNotFound) GetPayload() *models.RestCursorResponseFields {
	return o.Payload
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RestCursorResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloudSecurityAssetsCombinedComplianceByAccountRequestTimeout creates a CloudSecurityAssetsCombinedComplianceByAccountRequestTimeout with default headers values
func NewCloudSecurityAssetsCombinedComplianceByAccountRequestTimeout() *CloudSecurityAssetsCombinedComplianceByAccountRequestTimeout {
	return &CloudSecurityAssetsCombinedComplianceByAccountRequestTimeout{}
}

/*
CloudSecurityAssetsCombinedComplianceByAccountRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type CloudSecurityAssetsCombinedComplianceByAccountRequestTimeout struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RestCursorResponseFields
}

// IsSuccess returns true when this cloud security assets combined compliance by account request timeout response has a 2xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cloud security assets combined compliance by account request timeout response has a 3xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cloud security assets combined compliance by account request timeout response has a 4xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this cloud security assets combined compliance by account request timeout response has a 5xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this cloud security assets combined compliance by account request timeout response a status code equal to that given
func (o *CloudSecurityAssetsCombinedComplianceByAccountRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the cloud security assets combined compliance by account request timeout response
func (o *CloudSecurityAssetsCombinedComplianceByAccountRequestTimeout) Code() int {
	return 408
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/combined/compliance-controls/by-account-region-and-resource-type/v1][%d] cloudSecurityAssetsCombinedComplianceByAccountRequestTimeout %s", 408, payload)
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/combined/compliance-controls/by-account-region-and-resource-type/v1][%d] cloudSecurityAssetsCombinedComplianceByAccountRequestTimeout %s", 408, payload)
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountRequestTimeout) GetPayload() *models.RestCursorResponseFields {
	return o.Payload
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RestCursorResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloudSecurityAssetsCombinedComplianceByAccountTooManyRequests creates a CloudSecurityAssetsCombinedComplianceByAccountTooManyRequests with default headers values
func NewCloudSecurityAssetsCombinedComplianceByAccountTooManyRequests() *CloudSecurityAssetsCombinedComplianceByAccountTooManyRequests {
	return &CloudSecurityAssetsCombinedComplianceByAccountTooManyRequests{}
}

/*
CloudSecurityAssetsCombinedComplianceByAccountTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CloudSecurityAssetsCombinedComplianceByAccountTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this cloud security assets combined compliance by account too many requests response has a 2xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cloud security assets combined compliance by account too many requests response has a 3xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cloud security assets combined compliance by account too many requests response has a 4xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this cloud security assets combined compliance by account too many requests response has a 5xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this cloud security assets combined compliance by account too many requests response a status code equal to that given
func (o *CloudSecurityAssetsCombinedComplianceByAccountTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the cloud security assets combined compliance by account too many requests response
func (o *CloudSecurityAssetsCombinedComplianceByAccountTooManyRequests) Code() int {
	return 429
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/combined/compliance-controls/by-account-region-and-resource-type/v1][%d] cloudSecurityAssetsCombinedComplianceByAccountTooManyRequests %s", 429, payload)
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/combined/compliance-controls/by-account-region-and-resource-type/v1][%d] cloudSecurityAssetsCombinedComplianceByAccountTooManyRequests %s", 429, payload)
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloudSecurityAssetsCombinedComplianceByAccountInternalServerError creates a CloudSecurityAssetsCombinedComplianceByAccountInternalServerError with default headers values
func NewCloudSecurityAssetsCombinedComplianceByAccountInternalServerError() *CloudSecurityAssetsCombinedComplianceByAccountInternalServerError {
	return &CloudSecurityAssetsCombinedComplianceByAccountInternalServerError{}
}

/*
CloudSecurityAssetsCombinedComplianceByAccountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CloudSecurityAssetsCombinedComplianceByAccountInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RestCursorResponseFields
}

// IsSuccess returns true when this cloud security assets combined compliance by account internal server error response has a 2xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cloud security assets combined compliance by account internal server error response has a 3xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cloud security assets combined compliance by account internal server error response has a 4xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cloud security assets combined compliance by account internal server error response has a 5xx status code
func (o *CloudSecurityAssetsCombinedComplianceByAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cloud security assets combined compliance by account internal server error response a status code equal to that given
func (o *CloudSecurityAssetsCombinedComplianceByAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the cloud security assets combined compliance by account internal server error response
func (o *CloudSecurityAssetsCombinedComplianceByAccountInternalServerError) Code() int {
	return 500
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/combined/compliance-controls/by-account-region-and-resource-type/v1][%d] cloudSecurityAssetsCombinedComplianceByAccountInternalServerError %s", 500, payload)
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/combined/compliance-controls/by-account-region-and-resource-type/v1][%d] cloudSecurityAssetsCombinedComplianceByAccountInternalServerError %s", 500, payload)
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountInternalServerError) GetPayload() *models.RestCursorResponseFields {
	return o.Payload
}

func (o *CloudSecurityAssetsCombinedComplianceByAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RestCursorResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
