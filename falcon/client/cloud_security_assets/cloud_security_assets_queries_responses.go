// Code generated by go-swagger; DO NOT EDIT.

package cloud_security_assets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CloudSecurityAssetsQueriesReader is a Reader for the CloudSecurityAssetsQueries structure.
type CloudSecurityAssetsQueriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CloudSecurityAssetsQueriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCloudSecurityAssetsQueriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCloudSecurityAssetsQueriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCloudSecurityAssetsQueriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewCloudSecurityAssetsQueriesRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCloudSecurityAssetsQueriesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCloudSecurityAssetsQueriesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cloud-security-assets/queries/resources/v1] cloud-security-assets-queries", response, response.Code())
	}
}

// NewCloudSecurityAssetsQueriesOK creates a CloudSecurityAssetsQueriesOK with default headers values
func NewCloudSecurityAssetsQueriesOK() *CloudSecurityAssetsQueriesOK {
	return &CloudSecurityAssetsQueriesOK{}
}

/*
CloudSecurityAssetsQueriesOK describes a response with status code 200, with default header values.

OK
*/
type CloudSecurityAssetsQueriesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetsGetResourceIDsResponse
}

// IsSuccess returns true when this cloud security assets queries o k response has a 2xx status code
func (o *CloudSecurityAssetsQueriesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cloud security assets queries o k response has a 3xx status code
func (o *CloudSecurityAssetsQueriesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cloud security assets queries o k response has a 4xx status code
func (o *CloudSecurityAssetsQueriesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cloud security assets queries o k response has a 5xx status code
func (o *CloudSecurityAssetsQueriesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cloud security assets queries o k response a status code equal to that given
func (o *CloudSecurityAssetsQueriesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the cloud security assets queries o k response
func (o *CloudSecurityAssetsQueriesOK) Code() int {
	return 200
}

func (o *CloudSecurityAssetsQueriesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/queries/resources/v1][%d] cloudSecurityAssetsQueriesOK %s", 200, payload)
}

func (o *CloudSecurityAssetsQueriesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/queries/resources/v1][%d] cloudSecurityAssetsQueriesOK %s", 200, payload)
}

func (o *CloudSecurityAssetsQueriesOK) GetPayload() *models.AssetsGetResourceIDsResponse {
	return o.Payload
}

func (o *CloudSecurityAssetsQueriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetsGetResourceIDsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloudSecurityAssetsQueriesBadRequest creates a CloudSecurityAssetsQueriesBadRequest with default headers values
func NewCloudSecurityAssetsQueriesBadRequest() *CloudSecurityAssetsQueriesBadRequest {
	return &CloudSecurityAssetsQueriesBadRequest{}
}

/*
CloudSecurityAssetsQueriesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CloudSecurityAssetsQueriesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RestCursorResponseFields
}

// IsSuccess returns true when this cloud security assets queries bad request response has a 2xx status code
func (o *CloudSecurityAssetsQueriesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cloud security assets queries bad request response has a 3xx status code
func (o *CloudSecurityAssetsQueriesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cloud security assets queries bad request response has a 4xx status code
func (o *CloudSecurityAssetsQueriesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cloud security assets queries bad request response has a 5xx status code
func (o *CloudSecurityAssetsQueriesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cloud security assets queries bad request response a status code equal to that given
func (o *CloudSecurityAssetsQueriesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the cloud security assets queries bad request response
func (o *CloudSecurityAssetsQueriesBadRequest) Code() int {
	return 400
}

func (o *CloudSecurityAssetsQueriesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/queries/resources/v1][%d] cloudSecurityAssetsQueriesBadRequest %s", 400, payload)
}

func (o *CloudSecurityAssetsQueriesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/queries/resources/v1][%d] cloudSecurityAssetsQueriesBadRequest %s", 400, payload)
}

func (o *CloudSecurityAssetsQueriesBadRequest) GetPayload() *models.RestCursorResponseFields {
	return o.Payload
}

func (o *CloudSecurityAssetsQueriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RestCursorResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloudSecurityAssetsQueriesForbidden creates a CloudSecurityAssetsQueriesForbidden with default headers values
func NewCloudSecurityAssetsQueriesForbidden() *CloudSecurityAssetsQueriesForbidden {
	return &CloudSecurityAssetsQueriesForbidden{}
}

/*
CloudSecurityAssetsQueriesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CloudSecurityAssetsQueriesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this cloud security assets queries forbidden response has a 2xx status code
func (o *CloudSecurityAssetsQueriesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cloud security assets queries forbidden response has a 3xx status code
func (o *CloudSecurityAssetsQueriesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cloud security assets queries forbidden response has a 4xx status code
func (o *CloudSecurityAssetsQueriesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cloud security assets queries forbidden response has a 5xx status code
func (o *CloudSecurityAssetsQueriesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cloud security assets queries forbidden response a status code equal to that given
func (o *CloudSecurityAssetsQueriesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the cloud security assets queries forbidden response
func (o *CloudSecurityAssetsQueriesForbidden) Code() int {
	return 403
}

func (o *CloudSecurityAssetsQueriesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/queries/resources/v1][%d] cloudSecurityAssetsQueriesForbidden %s", 403, payload)
}

func (o *CloudSecurityAssetsQueriesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/queries/resources/v1][%d] cloudSecurityAssetsQueriesForbidden %s", 403, payload)
}

func (o *CloudSecurityAssetsQueriesForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CloudSecurityAssetsQueriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloudSecurityAssetsQueriesRequestTimeout creates a CloudSecurityAssetsQueriesRequestTimeout with default headers values
func NewCloudSecurityAssetsQueriesRequestTimeout() *CloudSecurityAssetsQueriesRequestTimeout {
	return &CloudSecurityAssetsQueriesRequestTimeout{}
}

/*
CloudSecurityAssetsQueriesRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type CloudSecurityAssetsQueriesRequestTimeout struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RestCursorResponseFields
}

// IsSuccess returns true when this cloud security assets queries request timeout response has a 2xx status code
func (o *CloudSecurityAssetsQueriesRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cloud security assets queries request timeout response has a 3xx status code
func (o *CloudSecurityAssetsQueriesRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cloud security assets queries request timeout response has a 4xx status code
func (o *CloudSecurityAssetsQueriesRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this cloud security assets queries request timeout response has a 5xx status code
func (o *CloudSecurityAssetsQueriesRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this cloud security assets queries request timeout response a status code equal to that given
func (o *CloudSecurityAssetsQueriesRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the cloud security assets queries request timeout response
func (o *CloudSecurityAssetsQueriesRequestTimeout) Code() int {
	return 408
}

func (o *CloudSecurityAssetsQueriesRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/queries/resources/v1][%d] cloudSecurityAssetsQueriesRequestTimeout %s", 408, payload)
}

func (o *CloudSecurityAssetsQueriesRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/queries/resources/v1][%d] cloudSecurityAssetsQueriesRequestTimeout %s", 408, payload)
}

func (o *CloudSecurityAssetsQueriesRequestTimeout) GetPayload() *models.RestCursorResponseFields {
	return o.Payload
}

func (o *CloudSecurityAssetsQueriesRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RestCursorResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloudSecurityAssetsQueriesTooManyRequests creates a CloudSecurityAssetsQueriesTooManyRequests with default headers values
func NewCloudSecurityAssetsQueriesTooManyRequests() *CloudSecurityAssetsQueriesTooManyRequests {
	return &CloudSecurityAssetsQueriesTooManyRequests{}
}

/*
CloudSecurityAssetsQueriesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CloudSecurityAssetsQueriesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this cloud security assets queries too many requests response has a 2xx status code
func (o *CloudSecurityAssetsQueriesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cloud security assets queries too many requests response has a 3xx status code
func (o *CloudSecurityAssetsQueriesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cloud security assets queries too many requests response has a 4xx status code
func (o *CloudSecurityAssetsQueriesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this cloud security assets queries too many requests response has a 5xx status code
func (o *CloudSecurityAssetsQueriesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this cloud security assets queries too many requests response a status code equal to that given
func (o *CloudSecurityAssetsQueriesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the cloud security assets queries too many requests response
func (o *CloudSecurityAssetsQueriesTooManyRequests) Code() int {
	return 429
}

func (o *CloudSecurityAssetsQueriesTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/queries/resources/v1][%d] cloudSecurityAssetsQueriesTooManyRequests %s", 429, payload)
}

func (o *CloudSecurityAssetsQueriesTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/queries/resources/v1][%d] cloudSecurityAssetsQueriesTooManyRequests %s", 429, payload)
}

func (o *CloudSecurityAssetsQueriesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CloudSecurityAssetsQueriesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloudSecurityAssetsQueriesInternalServerError creates a CloudSecurityAssetsQueriesInternalServerError with default headers values
func NewCloudSecurityAssetsQueriesInternalServerError() *CloudSecurityAssetsQueriesInternalServerError {
	return &CloudSecurityAssetsQueriesInternalServerError{}
}

/*
CloudSecurityAssetsQueriesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CloudSecurityAssetsQueriesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RestCursorResponseFields
}

// IsSuccess returns true when this cloud security assets queries internal server error response has a 2xx status code
func (o *CloudSecurityAssetsQueriesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cloud security assets queries internal server error response has a 3xx status code
func (o *CloudSecurityAssetsQueriesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cloud security assets queries internal server error response has a 4xx status code
func (o *CloudSecurityAssetsQueriesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cloud security assets queries internal server error response has a 5xx status code
func (o *CloudSecurityAssetsQueriesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cloud security assets queries internal server error response a status code equal to that given
func (o *CloudSecurityAssetsQueriesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the cloud security assets queries internal server error response
func (o *CloudSecurityAssetsQueriesInternalServerError) Code() int {
	return 500
}

func (o *CloudSecurityAssetsQueriesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/queries/resources/v1][%d] cloudSecurityAssetsQueriesInternalServerError %s", 500, payload)
}

func (o *CloudSecurityAssetsQueriesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-assets/queries/resources/v1][%d] cloudSecurityAssetsQueriesInternalServerError %s", 500, payload)
}

func (o *CloudSecurityAssetsQueriesInternalServerError) GetPayload() *models.RestCursorResponseFields {
	return o.Payload
}

func (o *CloudSecurityAssetsQueriesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RestCursorResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
