// Code generated by go-swagger; DO NOT EDIT.

package datascanner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new datascanner API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for datascanner API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetDataScannerTasks(params *GetDataScannerTasksParams, opts ...ClientOption) (*GetDataScannerTasksOK, error)

	GetImageRegistryCredentials(params *GetImageRegistryCredentialsParams, opts ...ClientOption) (*GetImageRegistryCredentialsOK, error)

	UpdateDataScannerTasks(params *UpdateDataScannerTasksParams, opts ...ClientOption) (*UpdateDataScannerTasksOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetDataScannerTasks - GetDataScannerTasks is a route for the data scanner to fetch pending tasks
*/
func (a *Client) GetDataScannerTasks(params *GetDataScannerTasksParams, opts ...ClientOption) (*GetDataScannerTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataScannerTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-data-scanner-tasks",
		Method:             "GET",
		PathPattern:        "/data-security-dspm/entities/scanner-tasks/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataScannerTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataScannerTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-data-scanner-tasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetImageRegistryCredentials - GetImageRegistryCredentials is a route that gets credentials in order to fetch the data scanner image.
*/
func (a *Client) GetImageRegistryCredentials(params *GetImageRegistryCredentialsParams, opts ...ClientOption) (*GetImageRegistryCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageRegistryCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-image-registry-credentials",
		Method:             "GET",
		PathPattern:        "/data-security-dspm/entities/image-registry-credentials/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetImageRegistryCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImageRegistryCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-image-registry-credentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDataScannerTasks - PatchDataScannerTasks is a route for the data scanner to report back on tasks statuses
*/
func (a *Client) UpdateDataScannerTasks(params *UpdateDataScannerTasksParams, opts ...ClientOption) (*UpdateDataScannerTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDataScannerTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update-data-scanner-tasks",
		Method:             "PATCH",
		PathPattern:        "/data-security-dspm/entities/scanner-tasks/v1",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDataScannerTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDataScannerTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-data-scanner-tasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
