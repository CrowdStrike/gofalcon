// Code generated by go-swagger; DO NOT EDIT.

package delivery_settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// PostDeliverySettingsReader is a Reader for the PostDeliverySettings structure.
type PostDeliverySettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostDeliverySettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostDeliverySettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostDeliverySettingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostDeliverySettingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostDeliverySettingsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostDeliverySettingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /delivery-settings/entities/delivery-settings/v1] PostDeliverySettings", response, response.Code())
	}
}

// NewPostDeliverySettingsOK creates a PostDeliverySettingsOK with default headers values
func NewPostDeliverySettingsOK() *PostDeliverySettingsOK {
	return &PostDeliverySettingsOK{}
}

/*
PostDeliverySettingsOK describes a response with status code 200, with default header values.

OK
*/
type PostDeliverySettingsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ModelsDeliverySettingsEntityResponse
}

// IsSuccess returns true when this post delivery settings o k response has a 2xx status code
func (o *PostDeliverySettingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post delivery settings o k response has a 3xx status code
func (o *PostDeliverySettingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post delivery settings o k response has a 4xx status code
func (o *PostDeliverySettingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post delivery settings o k response has a 5xx status code
func (o *PostDeliverySettingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post delivery settings o k response a status code equal to that given
func (o *PostDeliverySettingsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post delivery settings o k response
func (o *PostDeliverySettingsOK) Code() int {
	return 200
}

func (o *PostDeliverySettingsOK) Error() string {
	return fmt.Sprintf("[POST /delivery-settings/entities/delivery-settings/v1][%d] postDeliverySettingsOK  %+v", 200, o.Payload)
}

func (o *PostDeliverySettingsOK) String() string {
	return fmt.Sprintf("[POST /delivery-settings/entities/delivery-settings/v1][%d] postDeliverySettingsOK  %+v", 200, o.Payload)
}

func (o *PostDeliverySettingsOK) GetPayload() *models.ModelsDeliverySettingsEntityResponse {
	return o.Payload
}

func (o *PostDeliverySettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ModelsDeliverySettingsEntityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDeliverySettingsBadRequest creates a PostDeliverySettingsBadRequest with default headers values
func NewPostDeliverySettingsBadRequest() *PostDeliverySettingsBadRequest {
	return &PostDeliverySettingsBadRequest{}
}

/*
PostDeliverySettingsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostDeliverySettingsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this post delivery settings bad request response has a 2xx status code
func (o *PostDeliverySettingsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post delivery settings bad request response has a 3xx status code
func (o *PostDeliverySettingsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post delivery settings bad request response has a 4xx status code
func (o *PostDeliverySettingsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post delivery settings bad request response has a 5xx status code
func (o *PostDeliverySettingsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post delivery settings bad request response a status code equal to that given
func (o *PostDeliverySettingsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post delivery settings bad request response
func (o *PostDeliverySettingsBadRequest) Code() int {
	return 400
}

func (o *PostDeliverySettingsBadRequest) Error() string {
	return fmt.Sprintf("[POST /delivery-settings/entities/delivery-settings/v1][%d] postDeliverySettingsBadRequest  %+v", 400, o.Payload)
}

func (o *PostDeliverySettingsBadRequest) String() string {
	return fmt.Sprintf("[POST /delivery-settings/entities/delivery-settings/v1][%d] postDeliverySettingsBadRequest  %+v", 400, o.Payload)
}

func (o *PostDeliverySettingsBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *PostDeliverySettingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDeliverySettingsForbidden creates a PostDeliverySettingsForbidden with default headers values
func NewPostDeliverySettingsForbidden() *PostDeliverySettingsForbidden {
	return &PostDeliverySettingsForbidden{}
}

/*
PostDeliverySettingsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostDeliverySettingsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this post delivery settings forbidden response has a 2xx status code
func (o *PostDeliverySettingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post delivery settings forbidden response has a 3xx status code
func (o *PostDeliverySettingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post delivery settings forbidden response has a 4xx status code
func (o *PostDeliverySettingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post delivery settings forbidden response has a 5xx status code
func (o *PostDeliverySettingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post delivery settings forbidden response a status code equal to that given
func (o *PostDeliverySettingsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post delivery settings forbidden response
func (o *PostDeliverySettingsForbidden) Code() int {
	return 403
}

func (o *PostDeliverySettingsForbidden) Error() string {
	return fmt.Sprintf("[POST /delivery-settings/entities/delivery-settings/v1][%d] postDeliverySettingsForbidden  %+v", 403, o.Payload)
}

func (o *PostDeliverySettingsForbidden) String() string {
	return fmt.Sprintf("[POST /delivery-settings/entities/delivery-settings/v1][%d] postDeliverySettingsForbidden  %+v", 403, o.Payload)
}

func (o *PostDeliverySettingsForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *PostDeliverySettingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDeliverySettingsTooManyRequests creates a PostDeliverySettingsTooManyRequests with default headers values
func NewPostDeliverySettingsTooManyRequests() *PostDeliverySettingsTooManyRequests {
	return &PostDeliverySettingsTooManyRequests{}
}

/*
PostDeliverySettingsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type PostDeliverySettingsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this post delivery settings too many requests response has a 2xx status code
func (o *PostDeliverySettingsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post delivery settings too many requests response has a 3xx status code
func (o *PostDeliverySettingsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post delivery settings too many requests response has a 4xx status code
func (o *PostDeliverySettingsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post delivery settings too many requests response has a 5xx status code
func (o *PostDeliverySettingsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post delivery settings too many requests response a status code equal to that given
func (o *PostDeliverySettingsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the post delivery settings too many requests response
func (o *PostDeliverySettingsTooManyRequests) Code() int {
	return 429
}

func (o *PostDeliverySettingsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /delivery-settings/entities/delivery-settings/v1][%d] postDeliverySettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostDeliverySettingsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /delivery-settings/entities/delivery-settings/v1][%d] postDeliverySettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostDeliverySettingsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *PostDeliverySettingsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDeliverySettingsInternalServerError creates a PostDeliverySettingsInternalServerError with default headers values
func NewPostDeliverySettingsInternalServerError() *PostDeliverySettingsInternalServerError {
	return &PostDeliverySettingsInternalServerError{}
}

/*
PostDeliverySettingsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostDeliverySettingsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this post delivery settings internal server error response has a 2xx status code
func (o *PostDeliverySettingsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post delivery settings internal server error response has a 3xx status code
func (o *PostDeliverySettingsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post delivery settings internal server error response has a 4xx status code
func (o *PostDeliverySettingsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post delivery settings internal server error response has a 5xx status code
func (o *PostDeliverySettingsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post delivery settings internal server error response a status code equal to that given
func (o *PostDeliverySettingsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post delivery settings internal server error response
func (o *PostDeliverySettingsInternalServerError) Code() int {
	return 500
}

func (o *PostDeliverySettingsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /delivery-settings/entities/delivery-settings/v1][%d] postDeliverySettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostDeliverySettingsInternalServerError) String() string {
	return fmt.Sprintf("[POST /delivery-settings/entities/delivery-settings/v1][%d] postDeliverySettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostDeliverySettingsInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *PostDeliverySettingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
