// Code generated by go-swagger; DO NOT EDIT.

package delivery_settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetDeliverySettingsReader is a Reader for the GetDeliverySettings structure.
type GetDeliverySettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeliverySettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeliverySettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDeliverySettingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDeliverySettingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetDeliverySettingsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDeliverySettingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /delivery-settings/entities/delivery-settings/v1] GetDeliverySettings", response, response.Code())
	}
}

// NewGetDeliverySettingsOK creates a GetDeliverySettingsOK with default headers values
func NewGetDeliverySettingsOK() *GetDeliverySettingsOK {
	return &GetDeliverySettingsOK{}
}

/*
GetDeliverySettingsOK describes a response with status code 200, with default header values.

OK
*/
type GetDeliverySettingsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ModelsDeliverySettingsEntityResponse
}

// IsSuccess returns true when this get delivery settings o k response has a 2xx status code
func (o *GetDeliverySettingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get delivery settings o k response has a 3xx status code
func (o *GetDeliverySettingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get delivery settings o k response has a 4xx status code
func (o *GetDeliverySettingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get delivery settings o k response has a 5xx status code
func (o *GetDeliverySettingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get delivery settings o k response a status code equal to that given
func (o *GetDeliverySettingsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get delivery settings o k response
func (o *GetDeliverySettingsOK) Code() int {
	return 200
}

func (o *GetDeliverySettingsOK) Error() string {
	return fmt.Sprintf("[GET /delivery-settings/entities/delivery-settings/v1][%d] getDeliverySettingsOK  %+v", 200, o.Payload)
}

func (o *GetDeliverySettingsOK) String() string {
	return fmt.Sprintf("[GET /delivery-settings/entities/delivery-settings/v1][%d] getDeliverySettingsOK  %+v", 200, o.Payload)
}

func (o *GetDeliverySettingsOK) GetPayload() *models.ModelsDeliverySettingsEntityResponse {
	return o.Payload
}

func (o *GetDeliverySettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ModelsDeliverySettingsEntityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeliverySettingsBadRequest creates a GetDeliverySettingsBadRequest with default headers values
func NewGetDeliverySettingsBadRequest() *GetDeliverySettingsBadRequest {
	return &GetDeliverySettingsBadRequest{}
}

/*
GetDeliverySettingsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetDeliverySettingsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get delivery settings bad request response has a 2xx status code
func (o *GetDeliverySettingsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get delivery settings bad request response has a 3xx status code
func (o *GetDeliverySettingsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get delivery settings bad request response has a 4xx status code
func (o *GetDeliverySettingsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get delivery settings bad request response has a 5xx status code
func (o *GetDeliverySettingsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get delivery settings bad request response a status code equal to that given
func (o *GetDeliverySettingsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get delivery settings bad request response
func (o *GetDeliverySettingsBadRequest) Code() int {
	return 400
}

func (o *GetDeliverySettingsBadRequest) Error() string {
	return fmt.Sprintf("[GET /delivery-settings/entities/delivery-settings/v1][%d] getDeliverySettingsBadRequest  %+v", 400, o.Payload)
}

func (o *GetDeliverySettingsBadRequest) String() string {
	return fmt.Sprintf("[GET /delivery-settings/entities/delivery-settings/v1][%d] getDeliverySettingsBadRequest  %+v", 400, o.Payload)
}

func (o *GetDeliverySettingsBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetDeliverySettingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeliverySettingsForbidden creates a GetDeliverySettingsForbidden with default headers values
func NewGetDeliverySettingsForbidden() *GetDeliverySettingsForbidden {
	return &GetDeliverySettingsForbidden{}
}

/*
GetDeliverySettingsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetDeliverySettingsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get delivery settings forbidden response has a 2xx status code
func (o *GetDeliverySettingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get delivery settings forbidden response has a 3xx status code
func (o *GetDeliverySettingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get delivery settings forbidden response has a 4xx status code
func (o *GetDeliverySettingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get delivery settings forbidden response has a 5xx status code
func (o *GetDeliverySettingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get delivery settings forbidden response a status code equal to that given
func (o *GetDeliverySettingsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get delivery settings forbidden response
func (o *GetDeliverySettingsForbidden) Code() int {
	return 403
}

func (o *GetDeliverySettingsForbidden) Error() string {
	return fmt.Sprintf("[GET /delivery-settings/entities/delivery-settings/v1][%d] getDeliverySettingsForbidden  %+v", 403, o.Payload)
}

func (o *GetDeliverySettingsForbidden) String() string {
	return fmt.Sprintf("[GET /delivery-settings/entities/delivery-settings/v1][%d] getDeliverySettingsForbidden  %+v", 403, o.Payload)
}

func (o *GetDeliverySettingsForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetDeliverySettingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeliverySettingsTooManyRequests creates a GetDeliverySettingsTooManyRequests with default headers values
func NewGetDeliverySettingsTooManyRequests() *GetDeliverySettingsTooManyRequests {
	return &GetDeliverySettingsTooManyRequests{}
}

/*
GetDeliverySettingsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetDeliverySettingsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get delivery settings too many requests response has a 2xx status code
func (o *GetDeliverySettingsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get delivery settings too many requests response has a 3xx status code
func (o *GetDeliverySettingsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get delivery settings too many requests response has a 4xx status code
func (o *GetDeliverySettingsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get delivery settings too many requests response has a 5xx status code
func (o *GetDeliverySettingsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get delivery settings too many requests response a status code equal to that given
func (o *GetDeliverySettingsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get delivery settings too many requests response
func (o *GetDeliverySettingsTooManyRequests) Code() int {
	return 429
}

func (o *GetDeliverySettingsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /delivery-settings/entities/delivery-settings/v1][%d] getDeliverySettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetDeliverySettingsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /delivery-settings/entities/delivery-settings/v1][%d] getDeliverySettingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetDeliverySettingsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetDeliverySettingsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeliverySettingsInternalServerError creates a GetDeliverySettingsInternalServerError with default headers values
func NewGetDeliverySettingsInternalServerError() *GetDeliverySettingsInternalServerError {
	return &GetDeliverySettingsInternalServerError{}
}

/*
GetDeliverySettingsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetDeliverySettingsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get delivery settings internal server error response has a 2xx status code
func (o *GetDeliverySettingsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get delivery settings internal server error response has a 3xx status code
func (o *GetDeliverySettingsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get delivery settings internal server error response has a 4xx status code
func (o *GetDeliverySettingsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get delivery settings internal server error response has a 5xx status code
func (o *GetDeliverySettingsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get delivery settings internal server error response a status code equal to that given
func (o *GetDeliverySettingsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get delivery settings internal server error response
func (o *GetDeliverySettingsInternalServerError) Code() int {
	return 500
}

func (o *GetDeliverySettingsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /delivery-settings/entities/delivery-settings/v1][%d] getDeliverySettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDeliverySettingsInternalServerError) String() string {
	return fmt.Sprintf("[GET /delivery-settings/entities/delivery-settings/v1][%d] getDeliverySettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDeliverySettingsInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetDeliverySettingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
