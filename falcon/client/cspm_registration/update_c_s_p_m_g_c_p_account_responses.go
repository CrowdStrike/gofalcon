// Code generated by go-swagger; DO NOT EDIT.

package cspm_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// UpdateCSPMGCPAccountReader is a Reader for the UpdateCSPMGCPAccount structure.
type UpdateCSPMGCPAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCSPMGCPAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCSPMGCPAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 207:
		result := NewUpdateCSPMGCPAccountMultiStatus()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCSPMGCPAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateCSPMGCPAccountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateCSPMGCPAccountTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateCSPMGCPAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /cloud-connect-cspm-gcp/entities/account/v1] UpdateCSPMGCPAccount", response, response.Code())
	}
}

// NewUpdateCSPMGCPAccountOK creates a UpdateCSPMGCPAccountOK with default headers values
func NewUpdateCSPMGCPAccountOK() *UpdateCSPMGCPAccountOK {
	return &UpdateCSPMGCPAccountOK{}
}

/*
UpdateCSPMGCPAccountOK describes a response with status code 200, with default header values.

OK
*/
type UpdateCSPMGCPAccountOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationGCPAccountResponseV1
}

// IsSuccess returns true when this update c s p m g c p account o k response has a 2xx status code
func (o *UpdateCSPMGCPAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update c s p m g c p account o k response has a 3xx status code
func (o *UpdateCSPMGCPAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update c s p m g c p account o k response has a 4xx status code
func (o *UpdateCSPMGCPAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update c s p m g c p account o k response has a 5xx status code
func (o *UpdateCSPMGCPAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update c s p m g c p account o k response a status code equal to that given
func (o *UpdateCSPMGCPAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update c s p m g c p account o k response
func (o *UpdateCSPMGCPAccountOK) Code() int {
	return 200
}

func (o *UpdateCSPMGCPAccountOK) Error() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-gcp/entities/account/v1][%d] updateCSPMGCPAccountOK  %+v", 200, o.Payload)
}

func (o *UpdateCSPMGCPAccountOK) String() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-gcp/entities/account/v1][%d] updateCSPMGCPAccountOK  %+v", 200, o.Payload)
}

func (o *UpdateCSPMGCPAccountOK) GetPayload() *models.RegistrationGCPAccountResponseV1 {
	return o.Payload
}

func (o *UpdateCSPMGCPAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationGCPAccountResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCSPMGCPAccountMultiStatus creates a UpdateCSPMGCPAccountMultiStatus with default headers values
func NewUpdateCSPMGCPAccountMultiStatus() *UpdateCSPMGCPAccountMultiStatus {
	return &UpdateCSPMGCPAccountMultiStatus{}
}

/*
UpdateCSPMGCPAccountMultiStatus describes a response with status code 207, with default header values.

Multi-Status
*/
type UpdateCSPMGCPAccountMultiStatus struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationGCPAccountResponseV1
}

// IsSuccess returns true when this update c s p m g c p account multi status response has a 2xx status code
func (o *UpdateCSPMGCPAccountMultiStatus) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update c s p m g c p account multi status response has a 3xx status code
func (o *UpdateCSPMGCPAccountMultiStatus) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update c s p m g c p account multi status response has a 4xx status code
func (o *UpdateCSPMGCPAccountMultiStatus) IsClientError() bool {
	return false
}

// IsServerError returns true when this update c s p m g c p account multi status response has a 5xx status code
func (o *UpdateCSPMGCPAccountMultiStatus) IsServerError() bool {
	return false
}

// IsCode returns true when this update c s p m g c p account multi status response a status code equal to that given
func (o *UpdateCSPMGCPAccountMultiStatus) IsCode(code int) bool {
	return code == 207
}

// Code gets the status code for the update c s p m g c p account multi status response
func (o *UpdateCSPMGCPAccountMultiStatus) Code() int {
	return 207
}

func (o *UpdateCSPMGCPAccountMultiStatus) Error() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-gcp/entities/account/v1][%d] updateCSPMGCPAccountMultiStatus  %+v", 207, o.Payload)
}

func (o *UpdateCSPMGCPAccountMultiStatus) String() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-gcp/entities/account/v1][%d] updateCSPMGCPAccountMultiStatus  %+v", 207, o.Payload)
}

func (o *UpdateCSPMGCPAccountMultiStatus) GetPayload() *models.RegistrationGCPAccountResponseV1 {
	return o.Payload
}

func (o *UpdateCSPMGCPAccountMultiStatus) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationGCPAccountResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCSPMGCPAccountBadRequest creates a UpdateCSPMGCPAccountBadRequest with default headers values
func NewUpdateCSPMGCPAccountBadRequest() *UpdateCSPMGCPAccountBadRequest {
	return &UpdateCSPMGCPAccountBadRequest{}
}

/*
UpdateCSPMGCPAccountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateCSPMGCPAccountBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationGCPAccountResponseV1
}

// IsSuccess returns true when this update c s p m g c p account bad request response has a 2xx status code
func (o *UpdateCSPMGCPAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update c s p m g c p account bad request response has a 3xx status code
func (o *UpdateCSPMGCPAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update c s p m g c p account bad request response has a 4xx status code
func (o *UpdateCSPMGCPAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update c s p m g c p account bad request response has a 5xx status code
func (o *UpdateCSPMGCPAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update c s p m g c p account bad request response a status code equal to that given
func (o *UpdateCSPMGCPAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update c s p m g c p account bad request response
func (o *UpdateCSPMGCPAccountBadRequest) Code() int {
	return 400
}

func (o *UpdateCSPMGCPAccountBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-gcp/entities/account/v1][%d] updateCSPMGCPAccountBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCSPMGCPAccountBadRequest) String() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-gcp/entities/account/v1][%d] updateCSPMGCPAccountBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCSPMGCPAccountBadRequest) GetPayload() *models.RegistrationGCPAccountResponseV1 {
	return o.Payload
}

func (o *UpdateCSPMGCPAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationGCPAccountResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCSPMGCPAccountForbidden creates a UpdateCSPMGCPAccountForbidden with default headers values
func NewUpdateCSPMGCPAccountForbidden() *UpdateCSPMGCPAccountForbidden {
	return &UpdateCSPMGCPAccountForbidden{}
}

/*
UpdateCSPMGCPAccountForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateCSPMGCPAccountForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this update c s p m g c p account forbidden response has a 2xx status code
func (o *UpdateCSPMGCPAccountForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update c s p m g c p account forbidden response has a 3xx status code
func (o *UpdateCSPMGCPAccountForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update c s p m g c p account forbidden response has a 4xx status code
func (o *UpdateCSPMGCPAccountForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update c s p m g c p account forbidden response has a 5xx status code
func (o *UpdateCSPMGCPAccountForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update c s p m g c p account forbidden response a status code equal to that given
func (o *UpdateCSPMGCPAccountForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update c s p m g c p account forbidden response
func (o *UpdateCSPMGCPAccountForbidden) Code() int {
	return 403
}

func (o *UpdateCSPMGCPAccountForbidden) Error() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-gcp/entities/account/v1][%d] updateCSPMGCPAccountForbidden  %+v", 403, o.Payload)
}

func (o *UpdateCSPMGCPAccountForbidden) String() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-gcp/entities/account/v1][%d] updateCSPMGCPAccountForbidden  %+v", 403, o.Payload)
}

func (o *UpdateCSPMGCPAccountForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpdateCSPMGCPAccountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCSPMGCPAccountTooManyRequests creates a UpdateCSPMGCPAccountTooManyRequests with default headers values
func NewUpdateCSPMGCPAccountTooManyRequests() *UpdateCSPMGCPAccountTooManyRequests {
	return &UpdateCSPMGCPAccountTooManyRequests{}
}

/*
UpdateCSPMGCPAccountTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type UpdateCSPMGCPAccountTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this update c s p m g c p account too many requests response has a 2xx status code
func (o *UpdateCSPMGCPAccountTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update c s p m g c p account too many requests response has a 3xx status code
func (o *UpdateCSPMGCPAccountTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update c s p m g c p account too many requests response has a 4xx status code
func (o *UpdateCSPMGCPAccountTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update c s p m g c p account too many requests response has a 5xx status code
func (o *UpdateCSPMGCPAccountTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update c s p m g c p account too many requests response a status code equal to that given
func (o *UpdateCSPMGCPAccountTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update c s p m g c p account too many requests response
func (o *UpdateCSPMGCPAccountTooManyRequests) Code() int {
	return 429
}

func (o *UpdateCSPMGCPAccountTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-gcp/entities/account/v1][%d] updateCSPMGCPAccountTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateCSPMGCPAccountTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-gcp/entities/account/v1][%d] updateCSPMGCPAccountTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateCSPMGCPAccountTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpdateCSPMGCPAccountTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCSPMGCPAccountInternalServerError creates a UpdateCSPMGCPAccountInternalServerError with default headers values
func NewUpdateCSPMGCPAccountInternalServerError() *UpdateCSPMGCPAccountInternalServerError {
	return &UpdateCSPMGCPAccountInternalServerError{}
}

/*
UpdateCSPMGCPAccountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateCSPMGCPAccountInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationGCPAccountResponseV1
}

// IsSuccess returns true when this update c s p m g c p account internal server error response has a 2xx status code
func (o *UpdateCSPMGCPAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update c s p m g c p account internal server error response has a 3xx status code
func (o *UpdateCSPMGCPAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update c s p m g c p account internal server error response has a 4xx status code
func (o *UpdateCSPMGCPAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update c s p m g c p account internal server error response has a 5xx status code
func (o *UpdateCSPMGCPAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update c s p m g c p account internal server error response a status code equal to that given
func (o *UpdateCSPMGCPAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update c s p m g c p account internal server error response
func (o *UpdateCSPMGCPAccountInternalServerError) Code() int {
	return 500
}

func (o *UpdateCSPMGCPAccountInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-gcp/entities/account/v1][%d] updateCSPMGCPAccountInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateCSPMGCPAccountInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-gcp/entities/account/v1][%d] updateCSPMGCPAccountInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateCSPMGCPAccountInternalServerError) GetPayload() *models.RegistrationGCPAccountResponseV1 {
	return o.Payload
}

func (o *UpdateCSPMGCPAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationGCPAccountResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
