// Code generated by go-swagger; DO NOT EDIT.

package cspm_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetIOAEventsReader is a Reader for the GetIOAEvents structure.
type GetIOAEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIOAEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIOAEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetIOAEventsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetIOAEventsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetIOAEventsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetIOAEventsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetIOAEventsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetIOAEventsOK creates a GetIOAEventsOK with default headers values
func NewGetIOAEventsOK() *GetIOAEventsOK {
	return &GetIOAEventsOK{}
}

/*
GetIOAEventsOK describes a response with status code 200, with default header values.

OK
*/
type GetIOAEventsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationExternalIOAEventResponse
}

// IsSuccess returns true when this get i o a events o k response has a 2xx status code
func (o *GetIOAEventsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get i o a events o k response has a 3xx status code
func (o *GetIOAEventsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get i o a events o k response has a 4xx status code
func (o *GetIOAEventsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get i o a events o k response has a 5xx status code
func (o *GetIOAEventsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get i o a events o k response a status code equal to that given
func (o *GetIOAEventsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get i o a events o k response
func (o *GetIOAEventsOK) Code() int {
	return 200
}

func (o *GetIOAEventsOK) Error() string {
	return fmt.Sprintf("[GET /ioa/entities/events/v1][%d] getIOAEventsOK  %+v", 200, o.Payload)
}

func (o *GetIOAEventsOK) String() string {
	return fmt.Sprintf("[GET /ioa/entities/events/v1][%d] getIOAEventsOK  %+v", 200, o.Payload)
}

func (o *GetIOAEventsOK) GetPayload() *models.RegistrationExternalIOAEventResponse {
	return o.Payload
}

func (o *GetIOAEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationExternalIOAEventResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIOAEventsBadRequest creates a GetIOAEventsBadRequest with default headers values
func NewGetIOAEventsBadRequest() *GetIOAEventsBadRequest {
	return &GetIOAEventsBadRequest{}
}

/*
GetIOAEventsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetIOAEventsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationExternalIOAEventResponse
}

// IsSuccess returns true when this get i o a events bad request response has a 2xx status code
func (o *GetIOAEventsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get i o a events bad request response has a 3xx status code
func (o *GetIOAEventsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get i o a events bad request response has a 4xx status code
func (o *GetIOAEventsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get i o a events bad request response has a 5xx status code
func (o *GetIOAEventsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get i o a events bad request response a status code equal to that given
func (o *GetIOAEventsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get i o a events bad request response
func (o *GetIOAEventsBadRequest) Code() int {
	return 400
}

func (o *GetIOAEventsBadRequest) Error() string {
	return fmt.Sprintf("[GET /ioa/entities/events/v1][%d] getIOAEventsBadRequest  %+v", 400, o.Payload)
}

func (o *GetIOAEventsBadRequest) String() string {
	return fmt.Sprintf("[GET /ioa/entities/events/v1][%d] getIOAEventsBadRequest  %+v", 400, o.Payload)
}

func (o *GetIOAEventsBadRequest) GetPayload() *models.RegistrationExternalIOAEventResponse {
	return o.Payload
}

func (o *GetIOAEventsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationExternalIOAEventResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIOAEventsForbidden creates a GetIOAEventsForbidden with default headers values
func NewGetIOAEventsForbidden() *GetIOAEventsForbidden {
	return &GetIOAEventsForbidden{}
}

/*
GetIOAEventsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetIOAEventsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get i o a events forbidden response has a 2xx status code
func (o *GetIOAEventsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get i o a events forbidden response has a 3xx status code
func (o *GetIOAEventsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get i o a events forbidden response has a 4xx status code
func (o *GetIOAEventsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get i o a events forbidden response has a 5xx status code
func (o *GetIOAEventsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get i o a events forbidden response a status code equal to that given
func (o *GetIOAEventsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get i o a events forbidden response
func (o *GetIOAEventsForbidden) Code() int {
	return 403
}

func (o *GetIOAEventsForbidden) Error() string {
	return fmt.Sprintf("[GET /ioa/entities/events/v1][%d] getIOAEventsForbidden  %+v", 403, o.Payload)
}

func (o *GetIOAEventsForbidden) String() string {
	return fmt.Sprintf("[GET /ioa/entities/events/v1][%d] getIOAEventsForbidden  %+v", 403, o.Payload)
}

func (o *GetIOAEventsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetIOAEventsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIOAEventsTooManyRequests creates a GetIOAEventsTooManyRequests with default headers values
func NewGetIOAEventsTooManyRequests() *GetIOAEventsTooManyRequests {
	return &GetIOAEventsTooManyRequests{}
}

/*
GetIOAEventsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetIOAEventsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get i o a events too many requests response has a 2xx status code
func (o *GetIOAEventsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get i o a events too many requests response has a 3xx status code
func (o *GetIOAEventsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get i o a events too many requests response has a 4xx status code
func (o *GetIOAEventsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get i o a events too many requests response has a 5xx status code
func (o *GetIOAEventsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get i o a events too many requests response a status code equal to that given
func (o *GetIOAEventsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get i o a events too many requests response
func (o *GetIOAEventsTooManyRequests) Code() int {
	return 429
}

func (o *GetIOAEventsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /ioa/entities/events/v1][%d] getIOAEventsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetIOAEventsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /ioa/entities/events/v1][%d] getIOAEventsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetIOAEventsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetIOAEventsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIOAEventsInternalServerError creates a GetIOAEventsInternalServerError with default headers values
func NewGetIOAEventsInternalServerError() *GetIOAEventsInternalServerError {
	return &GetIOAEventsInternalServerError{}
}

/*
GetIOAEventsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetIOAEventsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationExternalIOAEventResponse
}

// IsSuccess returns true when this get i o a events internal server error response has a 2xx status code
func (o *GetIOAEventsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get i o a events internal server error response has a 3xx status code
func (o *GetIOAEventsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get i o a events internal server error response has a 4xx status code
func (o *GetIOAEventsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get i o a events internal server error response has a 5xx status code
func (o *GetIOAEventsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get i o a events internal server error response a status code equal to that given
func (o *GetIOAEventsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get i o a events internal server error response
func (o *GetIOAEventsInternalServerError) Code() int {
	return 500
}

func (o *GetIOAEventsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /ioa/entities/events/v1][%d] getIOAEventsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetIOAEventsInternalServerError) String() string {
	return fmt.Sprintf("[GET /ioa/entities/events/v1][%d] getIOAEventsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetIOAEventsInternalServerError) GetPayload() *models.RegistrationExternalIOAEventResponse {
	return o.Payload
}

func (o *GetIOAEventsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationExternalIOAEventResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIOAEventsDefault creates a GetIOAEventsDefault with default headers values
func NewGetIOAEventsDefault(code int) *GetIOAEventsDefault {
	return &GetIOAEventsDefault{
		_statusCode: code,
	}
}

/*
GetIOAEventsDefault describes a response with status code -1, with default header values.

OK
*/
type GetIOAEventsDefault struct {
	_statusCode int

	Payload *models.RegistrationExternalIOAEventResponse
}

// IsSuccess returns true when this get i o a events default response has a 2xx status code
func (o *GetIOAEventsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get i o a events default response has a 3xx status code
func (o *GetIOAEventsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get i o a events default response has a 4xx status code
func (o *GetIOAEventsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get i o a events default response has a 5xx status code
func (o *GetIOAEventsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get i o a events default response a status code equal to that given
func (o *GetIOAEventsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get i o a events default response
func (o *GetIOAEventsDefault) Code() int {
	return o._statusCode
}

func (o *GetIOAEventsDefault) Error() string {
	return fmt.Sprintf("[GET /ioa/entities/events/v1][%d] GetIOAEvents default  %+v", o._statusCode, o.Payload)
}

func (o *GetIOAEventsDefault) String() string {
	return fmt.Sprintf("[GET /ioa/entities/events/v1][%d] GetIOAEvents default  %+v", o._statusCode, o.Payload)
}

func (o *GetIOAEventsDefault) GetPayload() *models.RegistrationExternalIOAEventResponse {
	return o.Payload
}

func (o *GetIOAEventsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RegistrationExternalIOAEventResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
