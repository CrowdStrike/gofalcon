// Code generated by go-swagger; DO NOT EDIT.

package cspm_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetIOAUsersReader is a Reader for the GetIOAUsers structure.
type GetIOAUsersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIOAUsersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIOAUsersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetIOAUsersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetIOAUsersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetIOAUsersTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetIOAUsersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetIOAUsersDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetIOAUsersOK creates a GetIOAUsersOK with default headers values
func NewGetIOAUsersOK() *GetIOAUsersOK {
	return &GetIOAUsersOK{}
}

/*
GetIOAUsersOK describes a response with status code 200, with default header values.

OK
*/
type GetIOAUsersOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationIOAUserResponse
}

// IsSuccess returns true when this get i o a users o k response has a 2xx status code
func (o *GetIOAUsersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get i o a users o k response has a 3xx status code
func (o *GetIOAUsersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get i o a users o k response has a 4xx status code
func (o *GetIOAUsersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get i o a users o k response has a 5xx status code
func (o *GetIOAUsersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get i o a users o k response a status code equal to that given
func (o *GetIOAUsersOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get i o a users o k response
func (o *GetIOAUsersOK) Code() int {
	return 200
}

func (o *GetIOAUsersOK) Error() string {
	return fmt.Sprintf("[GET /ioa/entities/users/v1][%d] getIOAUsersOK  %+v", 200, o.Payload)
}

func (o *GetIOAUsersOK) String() string {
	return fmt.Sprintf("[GET /ioa/entities/users/v1][%d] getIOAUsersOK  %+v", 200, o.Payload)
}

func (o *GetIOAUsersOK) GetPayload() *models.RegistrationIOAUserResponse {
	return o.Payload
}

func (o *GetIOAUsersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationIOAUserResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIOAUsersBadRequest creates a GetIOAUsersBadRequest with default headers values
func NewGetIOAUsersBadRequest() *GetIOAUsersBadRequest {
	return &GetIOAUsersBadRequest{}
}

/*
GetIOAUsersBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetIOAUsersBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationIOAUserResponse
}

// IsSuccess returns true when this get i o a users bad request response has a 2xx status code
func (o *GetIOAUsersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get i o a users bad request response has a 3xx status code
func (o *GetIOAUsersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get i o a users bad request response has a 4xx status code
func (o *GetIOAUsersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get i o a users bad request response has a 5xx status code
func (o *GetIOAUsersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get i o a users bad request response a status code equal to that given
func (o *GetIOAUsersBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get i o a users bad request response
func (o *GetIOAUsersBadRequest) Code() int {
	return 400
}

func (o *GetIOAUsersBadRequest) Error() string {
	return fmt.Sprintf("[GET /ioa/entities/users/v1][%d] getIOAUsersBadRequest  %+v", 400, o.Payload)
}

func (o *GetIOAUsersBadRequest) String() string {
	return fmt.Sprintf("[GET /ioa/entities/users/v1][%d] getIOAUsersBadRequest  %+v", 400, o.Payload)
}

func (o *GetIOAUsersBadRequest) GetPayload() *models.RegistrationIOAUserResponse {
	return o.Payload
}

func (o *GetIOAUsersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationIOAUserResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIOAUsersForbidden creates a GetIOAUsersForbidden with default headers values
func NewGetIOAUsersForbidden() *GetIOAUsersForbidden {
	return &GetIOAUsersForbidden{}
}

/*
GetIOAUsersForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetIOAUsersForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get i o a users forbidden response has a 2xx status code
func (o *GetIOAUsersForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get i o a users forbidden response has a 3xx status code
func (o *GetIOAUsersForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get i o a users forbidden response has a 4xx status code
func (o *GetIOAUsersForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get i o a users forbidden response has a 5xx status code
func (o *GetIOAUsersForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get i o a users forbidden response a status code equal to that given
func (o *GetIOAUsersForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get i o a users forbidden response
func (o *GetIOAUsersForbidden) Code() int {
	return 403
}

func (o *GetIOAUsersForbidden) Error() string {
	return fmt.Sprintf("[GET /ioa/entities/users/v1][%d] getIOAUsersForbidden  %+v", 403, o.Payload)
}

func (o *GetIOAUsersForbidden) String() string {
	return fmt.Sprintf("[GET /ioa/entities/users/v1][%d] getIOAUsersForbidden  %+v", 403, o.Payload)
}

func (o *GetIOAUsersForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetIOAUsersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIOAUsersTooManyRequests creates a GetIOAUsersTooManyRequests with default headers values
func NewGetIOAUsersTooManyRequests() *GetIOAUsersTooManyRequests {
	return &GetIOAUsersTooManyRequests{}
}

/*
GetIOAUsersTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetIOAUsersTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get i o a users too many requests response has a 2xx status code
func (o *GetIOAUsersTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get i o a users too many requests response has a 3xx status code
func (o *GetIOAUsersTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get i o a users too many requests response has a 4xx status code
func (o *GetIOAUsersTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get i o a users too many requests response has a 5xx status code
func (o *GetIOAUsersTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get i o a users too many requests response a status code equal to that given
func (o *GetIOAUsersTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get i o a users too many requests response
func (o *GetIOAUsersTooManyRequests) Code() int {
	return 429
}

func (o *GetIOAUsersTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /ioa/entities/users/v1][%d] getIOAUsersTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetIOAUsersTooManyRequests) String() string {
	return fmt.Sprintf("[GET /ioa/entities/users/v1][%d] getIOAUsersTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetIOAUsersTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetIOAUsersTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIOAUsersInternalServerError creates a GetIOAUsersInternalServerError with default headers values
func NewGetIOAUsersInternalServerError() *GetIOAUsersInternalServerError {
	return &GetIOAUsersInternalServerError{}
}

/*
GetIOAUsersInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetIOAUsersInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationIOAUserResponse
}

// IsSuccess returns true when this get i o a users internal server error response has a 2xx status code
func (o *GetIOAUsersInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get i o a users internal server error response has a 3xx status code
func (o *GetIOAUsersInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get i o a users internal server error response has a 4xx status code
func (o *GetIOAUsersInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get i o a users internal server error response has a 5xx status code
func (o *GetIOAUsersInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get i o a users internal server error response a status code equal to that given
func (o *GetIOAUsersInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get i o a users internal server error response
func (o *GetIOAUsersInternalServerError) Code() int {
	return 500
}

func (o *GetIOAUsersInternalServerError) Error() string {
	return fmt.Sprintf("[GET /ioa/entities/users/v1][%d] getIOAUsersInternalServerError  %+v", 500, o.Payload)
}

func (o *GetIOAUsersInternalServerError) String() string {
	return fmt.Sprintf("[GET /ioa/entities/users/v1][%d] getIOAUsersInternalServerError  %+v", 500, o.Payload)
}

func (o *GetIOAUsersInternalServerError) GetPayload() *models.RegistrationIOAUserResponse {
	return o.Payload
}

func (o *GetIOAUsersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationIOAUserResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIOAUsersDefault creates a GetIOAUsersDefault with default headers values
func NewGetIOAUsersDefault(code int) *GetIOAUsersDefault {
	return &GetIOAUsersDefault{
		_statusCode: code,
	}
}

/*
GetIOAUsersDefault describes a response with status code -1, with default header values.

OK
*/
type GetIOAUsersDefault struct {
	_statusCode int

	Payload *models.RegistrationIOAUserResponse
}

// IsSuccess returns true when this get i o a users default response has a 2xx status code
func (o *GetIOAUsersDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get i o a users default response has a 3xx status code
func (o *GetIOAUsersDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get i o a users default response has a 4xx status code
func (o *GetIOAUsersDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get i o a users default response has a 5xx status code
func (o *GetIOAUsersDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get i o a users default response a status code equal to that given
func (o *GetIOAUsersDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get i o a users default response
func (o *GetIOAUsersDefault) Code() int {
	return o._statusCode
}

func (o *GetIOAUsersDefault) Error() string {
	return fmt.Sprintf("[GET /ioa/entities/users/v1][%d] GetIOAUsers default  %+v", o._statusCode, o.Payload)
}

func (o *GetIOAUsersDefault) String() string {
	return fmt.Sprintf("[GET /ioa/entities/users/v1][%d] GetIOAUsers default  %+v", o._statusCode, o.Payload)
}

func (o *GetIOAUsersDefault) GetPayload() *models.RegistrationIOAUserResponse {
	return o.Payload
}

func (o *GetIOAUsersDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RegistrationIOAUserResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
