// Code generated by go-swagger; DO NOT EDIT.

package cspm_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// AzureRefreshCertificateReader is a Reader for the AzureRefreshCertificate structure.
type AzureRefreshCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AzureRefreshCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAzureRefreshCertificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAzureRefreshCertificateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAzureRefreshCertificateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAzureRefreshCertificateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAzureRefreshCertificateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cloud-connect-cspm-azure/entities/refresh-certificate/v1] AzureRefreshCertificate", response, response.Code())
	}
}

// NewAzureRefreshCertificateOK creates a AzureRefreshCertificateOK with default headers values
func NewAzureRefreshCertificateOK() *AzureRefreshCertificateOK {
	return &AzureRefreshCertificateOK{}
}

/*
AzureRefreshCertificateOK describes a response with status code 200, with default header values.

OK
*/
type AzureRefreshCertificateOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAzureDownloadCertificateResponseV1
}

// IsSuccess returns true when this azure refresh certificate o k response has a 2xx status code
func (o *AzureRefreshCertificateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this azure refresh certificate o k response has a 3xx status code
func (o *AzureRefreshCertificateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this azure refresh certificate o k response has a 4xx status code
func (o *AzureRefreshCertificateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this azure refresh certificate o k response has a 5xx status code
func (o *AzureRefreshCertificateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this azure refresh certificate o k response a status code equal to that given
func (o *AzureRefreshCertificateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the azure refresh certificate o k response
func (o *AzureRefreshCertificateOK) Code() int {
	return 200
}

func (o *AzureRefreshCertificateOK) Error() string {
	return fmt.Sprintf("[POST /cloud-connect-cspm-azure/entities/refresh-certificate/v1][%d] azureRefreshCertificateOK  %+v", 200, o.Payload)
}

func (o *AzureRefreshCertificateOK) String() string {
	return fmt.Sprintf("[POST /cloud-connect-cspm-azure/entities/refresh-certificate/v1][%d] azureRefreshCertificateOK  %+v", 200, o.Payload)
}

func (o *AzureRefreshCertificateOK) GetPayload() *models.RegistrationAzureDownloadCertificateResponseV1 {
	return o.Payload
}

func (o *AzureRefreshCertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAzureDownloadCertificateResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAzureRefreshCertificateBadRequest creates a AzureRefreshCertificateBadRequest with default headers values
func NewAzureRefreshCertificateBadRequest() *AzureRefreshCertificateBadRequest {
	return &AzureRefreshCertificateBadRequest{}
}

/*
AzureRefreshCertificateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AzureRefreshCertificateBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAzureDownloadCertificateResponseV1
}

// IsSuccess returns true when this azure refresh certificate bad request response has a 2xx status code
func (o *AzureRefreshCertificateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this azure refresh certificate bad request response has a 3xx status code
func (o *AzureRefreshCertificateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this azure refresh certificate bad request response has a 4xx status code
func (o *AzureRefreshCertificateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this azure refresh certificate bad request response has a 5xx status code
func (o *AzureRefreshCertificateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this azure refresh certificate bad request response a status code equal to that given
func (o *AzureRefreshCertificateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the azure refresh certificate bad request response
func (o *AzureRefreshCertificateBadRequest) Code() int {
	return 400
}

func (o *AzureRefreshCertificateBadRequest) Error() string {
	return fmt.Sprintf("[POST /cloud-connect-cspm-azure/entities/refresh-certificate/v1][%d] azureRefreshCertificateBadRequest  %+v", 400, o.Payload)
}

func (o *AzureRefreshCertificateBadRequest) String() string {
	return fmt.Sprintf("[POST /cloud-connect-cspm-azure/entities/refresh-certificate/v1][%d] azureRefreshCertificateBadRequest  %+v", 400, o.Payload)
}

func (o *AzureRefreshCertificateBadRequest) GetPayload() *models.RegistrationAzureDownloadCertificateResponseV1 {
	return o.Payload
}

func (o *AzureRefreshCertificateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAzureDownloadCertificateResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAzureRefreshCertificateForbidden creates a AzureRefreshCertificateForbidden with default headers values
func NewAzureRefreshCertificateForbidden() *AzureRefreshCertificateForbidden {
	return &AzureRefreshCertificateForbidden{}
}

/*
AzureRefreshCertificateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AzureRefreshCertificateForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this azure refresh certificate forbidden response has a 2xx status code
func (o *AzureRefreshCertificateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this azure refresh certificate forbidden response has a 3xx status code
func (o *AzureRefreshCertificateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this azure refresh certificate forbidden response has a 4xx status code
func (o *AzureRefreshCertificateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this azure refresh certificate forbidden response has a 5xx status code
func (o *AzureRefreshCertificateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this azure refresh certificate forbidden response a status code equal to that given
func (o *AzureRefreshCertificateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the azure refresh certificate forbidden response
func (o *AzureRefreshCertificateForbidden) Code() int {
	return 403
}

func (o *AzureRefreshCertificateForbidden) Error() string {
	return fmt.Sprintf("[POST /cloud-connect-cspm-azure/entities/refresh-certificate/v1][%d] azureRefreshCertificateForbidden  %+v", 403, o.Payload)
}

func (o *AzureRefreshCertificateForbidden) String() string {
	return fmt.Sprintf("[POST /cloud-connect-cspm-azure/entities/refresh-certificate/v1][%d] azureRefreshCertificateForbidden  %+v", 403, o.Payload)
}

func (o *AzureRefreshCertificateForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *AzureRefreshCertificateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAzureRefreshCertificateTooManyRequests creates a AzureRefreshCertificateTooManyRequests with default headers values
func NewAzureRefreshCertificateTooManyRequests() *AzureRefreshCertificateTooManyRequests {
	return &AzureRefreshCertificateTooManyRequests{}
}

/*
AzureRefreshCertificateTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type AzureRefreshCertificateTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this azure refresh certificate too many requests response has a 2xx status code
func (o *AzureRefreshCertificateTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this azure refresh certificate too many requests response has a 3xx status code
func (o *AzureRefreshCertificateTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this azure refresh certificate too many requests response has a 4xx status code
func (o *AzureRefreshCertificateTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this azure refresh certificate too many requests response has a 5xx status code
func (o *AzureRefreshCertificateTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this azure refresh certificate too many requests response a status code equal to that given
func (o *AzureRefreshCertificateTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the azure refresh certificate too many requests response
func (o *AzureRefreshCertificateTooManyRequests) Code() int {
	return 429
}

func (o *AzureRefreshCertificateTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /cloud-connect-cspm-azure/entities/refresh-certificate/v1][%d] azureRefreshCertificateTooManyRequests  %+v", 429, o.Payload)
}

func (o *AzureRefreshCertificateTooManyRequests) String() string {
	return fmt.Sprintf("[POST /cloud-connect-cspm-azure/entities/refresh-certificate/v1][%d] azureRefreshCertificateTooManyRequests  %+v", 429, o.Payload)
}

func (o *AzureRefreshCertificateTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *AzureRefreshCertificateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAzureRefreshCertificateInternalServerError creates a AzureRefreshCertificateInternalServerError with default headers values
func NewAzureRefreshCertificateInternalServerError() *AzureRefreshCertificateInternalServerError {
	return &AzureRefreshCertificateInternalServerError{}
}

/*
AzureRefreshCertificateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AzureRefreshCertificateInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAzureDownloadCertificateResponseV1
}

// IsSuccess returns true when this azure refresh certificate internal server error response has a 2xx status code
func (o *AzureRefreshCertificateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this azure refresh certificate internal server error response has a 3xx status code
func (o *AzureRefreshCertificateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this azure refresh certificate internal server error response has a 4xx status code
func (o *AzureRefreshCertificateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this azure refresh certificate internal server error response has a 5xx status code
func (o *AzureRefreshCertificateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this azure refresh certificate internal server error response a status code equal to that given
func (o *AzureRefreshCertificateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the azure refresh certificate internal server error response
func (o *AzureRefreshCertificateInternalServerError) Code() int {
	return 500
}

func (o *AzureRefreshCertificateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /cloud-connect-cspm-azure/entities/refresh-certificate/v1][%d] azureRefreshCertificateInternalServerError  %+v", 500, o.Payload)
}

func (o *AzureRefreshCertificateInternalServerError) String() string {
	return fmt.Sprintf("[POST /cloud-connect-cspm-azure/entities/refresh-certificate/v1][%d] azureRefreshCertificateInternalServerError  %+v", 500, o.Payload)
}

func (o *AzureRefreshCertificateInternalServerError) GetPayload() *models.RegistrationAzureDownloadCertificateResponseV1 {
	return o.Payload
}

func (o *AzureRefreshCertificateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAzureDownloadCertificateResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
