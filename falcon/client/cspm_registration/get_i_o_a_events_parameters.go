// Code generated by go-swagger; DO NOT EDIT.

package cspm_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetIOAEventsParams creates a new GetIOAEventsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetIOAEventsParams() *GetIOAEventsParams {
	return &GetIOAEventsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetIOAEventsParamsWithTimeout creates a new GetIOAEventsParams object
// with the ability to set a timeout on a request.
func NewGetIOAEventsParamsWithTimeout(timeout time.Duration) *GetIOAEventsParams {
	return &GetIOAEventsParams{
		timeout: timeout,
	}
}

// NewGetIOAEventsParamsWithContext creates a new GetIOAEventsParams object
// with the ability to set a context for a request.
func NewGetIOAEventsParamsWithContext(ctx context.Context) *GetIOAEventsParams {
	return &GetIOAEventsParams{
		Context: ctx,
	}
}

// NewGetIOAEventsParamsWithHTTPClient creates a new GetIOAEventsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetIOAEventsParamsWithHTTPClient(client *http.Client) *GetIOAEventsParams {
	return &GetIOAEventsParams{
		HTTPClient: client,
	}
}

/*
GetIOAEventsParams contains all the parameters to send to the API endpoint

	for the get i o a events operation.

	Typically these are written to a http.Request.
*/
type GetIOAEventsParams struct {

	/* AccountID.

	   Cloud account ID (e.g.: AWS accountID, Azure subscriptionID)
	*/
	AccountID *string

	/* AwsAccountID.

	   AWS accountID
	*/
	AwsAccountID *string

	/* AzureSubscriptionID.

	   Azure subscription ID
	*/
	AzureSubscriptionID *string

	/* AzureTenantID.

	   Azure tenant ID
	*/
	AzureTenantID *string

	/* CloudProvider.

	   Cloud Provider (e.g.: aws|azure|gcp)
	*/
	CloudProvider string

	/* Limit.

	   The maximum records to return. [1-500]
	*/
	Limit *int64

	/* Offset.

	   Starting index of overall result set from which to return events.
	*/
	Offset *int64

	/* PolicyID.

	   Policy ID
	*/
	PolicyID string

	/* State.

	   state
	*/
	State *string

	/* UserIds.

	   user IDs
	*/
	UserIds []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get i o a events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetIOAEventsParams) WithDefaults() *GetIOAEventsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get i o a events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetIOAEventsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get i o a events params
func (o *GetIOAEventsParams) WithTimeout(timeout time.Duration) *GetIOAEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get i o a events params
func (o *GetIOAEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get i o a events params
func (o *GetIOAEventsParams) WithContext(ctx context.Context) *GetIOAEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get i o a events params
func (o *GetIOAEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get i o a events params
func (o *GetIOAEventsParams) WithHTTPClient(client *http.Client) *GetIOAEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get i o a events params
func (o *GetIOAEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the get i o a events params
func (o *GetIOAEventsParams) WithAccountID(accountID *string) *GetIOAEventsParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the get i o a events params
func (o *GetIOAEventsParams) SetAccountID(accountID *string) {
	o.AccountID = accountID
}

// WithAwsAccountID adds the awsAccountID to the get i o a events params
func (o *GetIOAEventsParams) WithAwsAccountID(awsAccountID *string) *GetIOAEventsParams {
	o.SetAwsAccountID(awsAccountID)
	return o
}

// SetAwsAccountID adds the awsAccountId to the get i o a events params
func (o *GetIOAEventsParams) SetAwsAccountID(awsAccountID *string) {
	o.AwsAccountID = awsAccountID
}

// WithAzureSubscriptionID adds the azureSubscriptionID to the get i o a events params
func (o *GetIOAEventsParams) WithAzureSubscriptionID(azureSubscriptionID *string) *GetIOAEventsParams {
	o.SetAzureSubscriptionID(azureSubscriptionID)
	return o
}

// SetAzureSubscriptionID adds the azureSubscriptionId to the get i o a events params
func (o *GetIOAEventsParams) SetAzureSubscriptionID(azureSubscriptionID *string) {
	o.AzureSubscriptionID = azureSubscriptionID
}

// WithAzureTenantID adds the azureTenantID to the get i o a events params
func (o *GetIOAEventsParams) WithAzureTenantID(azureTenantID *string) *GetIOAEventsParams {
	o.SetAzureTenantID(azureTenantID)
	return o
}

// SetAzureTenantID adds the azureTenantId to the get i o a events params
func (o *GetIOAEventsParams) SetAzureTenantID(azureTenantID *string) {
	o.AzureTenantID = azureTenantID
}

// WithCloudProvider adds the cloudProvider to the get i o a events params
func (o *GetIOAEventsParams) WithCloudProvider(cloudProvider string) *GetIOAEventsParams {
	o.SetCloudProvider(cloudProvider)
	return o
}

// SetCloudProvider adds the cloudProvider to the get i o a events params
func (o *GetIOAEventsParams) SetCloudProvider(cloudProvider string) {
	o.CloudProvider = cloudProvider
}

// WithLimit adds the limit to the get i o a events params
func (o *GetIOAEventsParams) WithLimit(limit *int64) *GetIOAEventsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get i o a events params
func (o *GetIOAEventsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get i o a events params
func (o *GetIOAEventsParams) WithOffset(offset *int64) *GetIOAEventsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get i o a events params
func (o *GetIOAEventsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithPolicyID adds the policyID to the get i o a events params
func (o *GetIOAEventsParams) WithPolicyID(policyID string) *GetIOAEventsParams {
	o.SetPolicyID(policyID)
	return o
}

// SetPolicyID adds the policyId to the get i o a events params
func (o *GetIOAEventsParams) SetPolicyID(policyID string) {
	o.PolicyID = policyID
}

// WithState adds the state to the get i o a events params
func (o *GetIOAEventsParams) WithState(state *string) *GetIOAEventsParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get i o a events params
func (o *GetIOAEventsParams) SetState(state *string) {
	o.State = state
}

// WithUserIds adds the userIds to the get i o a events params
func (o *GetIOAEventsParams) WithUserIds(userIds []string) *GetIOAEventsParams {
	o.SetUserIds(userIds)
	return o
}

// SetUserIds adds the userIds to the get i o a events params
func (o *GetIOAEventsParams) SetUserIds(userIds []string) {
	o.UserIds = userIds
}

// WriteToRequest writes these params to a swagger request
func (o *GetIOAEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountID != nil {

		// query param account_id
		var qrAccountID string

		if o.AccountID != nil {
			qrAccountID = *o.AccountID
		}
		qAccountID := qrAccountID
		if qAccountID != "" {

			if err := r.SetQueryParam("account_id", qAccountID); err != nil {
				return err
			}
		}
	}

	if o.AwsAccountID != nil {

		// query param aws_account_id
		var qrAwsAccountID string

		if o.AwsAccountID != nil {
			qrAwsAccountID = *o.AwsAccountID
		}
		qAwsAccountID := qrAwsAccountID
		if qAwsAccountID != "" {

			if err := r.SetQueryParam("aws_account_id", qAwsAccountID); err != nil {
				return err
			}
		}
	}

	if o.AzureSubscriptionID != nil {

		// query param azure_subscription_id
		var qrAzureSubscriptionID string

		if o.AzureSubscriptionID != nil {
			qrAzureSubscriptionID = *o.AzureSubscriptionID
		}
		qAzureSubscriptionID := qrAzureSubscriptionID
		if qAzureSubscriptionID != "" {

			if err := r.SetQueryParam("azure_subscription_id", qAzureSubscriptionID); err != nil {
				return err
			}
		}
	}

	if o.AzureTenantID != nil {

		// query param azure_tenant_id
		var qrAzureTenantID string

		if o.AzureTenantID != nil {
			qrAzureTenantID = *o.AzureTenantID
		}
		qAzureTenantID := qrAzureTenantID
		if qAzureTenantID != "" {

			if err := r.SetQueryParam("azure_tenant_id", qAzureTenantID); err != nil {
				return err
			}
		}
	}

	// query param cloud_provider
	qrCloudProvider := o.CloudProvider
	qCloudProvider := qrCloudProvider
	if qCloudProvider != "" {

		if err := r.SetQueryParam("cloud_provider", qCloudProvider); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	// query param policy_id
	qrPolicyID := o.PolicyID
	qPolicyID := qrPolicyID
	if qPolicyID != "" {

		if err := r.SetQueryParam("policy_id", qPolicyID); err != nil {
			return err
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.UserIds != nil {

		// binding items for user_ids
		joinedUserIds := o.bindParamUserIds(reg)

		// query array param user_ids
		if err := r.SetQueryParam("user_ids", joinedUserIds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetIOAEvents binds the parameter user_ids
func (o *GetIOAEventsParams) bindParamUserIds(formats strfmt.Registry) []string {
	userIdsIR := o.UserIds

	var userIdsIC []string
	for _, userIdsIIR := range userIdsIR { // explode []string

		userIdsIIV := userIdsIIR // string as string
		userIdsIC = append(userIdsIC, userIdsIIV)
	}

	// items.CollectionFormat: "multi"
	userIdsIS := swag.JoinByFormat(userIdsIC, "multi")

	return userIdsIS
}
