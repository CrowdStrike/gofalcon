// Code generated by go-swagger; DO NOT EDIT.

package cspm_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAzureRefreshCertificateParams creates a new AzureRefreshCertificateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAzureRefreshCertificateParams() *AzureRefreshCertificateParams {
	return &AzureRefreshCertificateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAzureRefreshCertificateParamsWithTimeout creates a new AzureRefreshCertificateParams object
// with the ability to set a timeout on a request.
func NewAzureRefreshCertificateParamsWithTimeout(timeout time.Duration) *AzureRefreshCertificateParams {
	return &AzureRefreshCertificateParams{
		timeout: timeout,
	}
}

// NewAzureRefreshCertificateParamsWithContext creates a new AzureRefreshCertificateParams object
// with the ability to set a context for a request.
func NewAzureRefreshCertificateParamsWithContext(ctx context.Context) *AzureRefreshCertificateParams {
	return &AzureRefreshCertificateParams{
		Context: ctx,
	}
}

// NewAzureRefreshCertificateParamsWithHTTPClient creates a new AzureRefreshCertificateParams object
// with the ability to set a custom HTTPClient for a request.
func NewAzureRefreshCertificateParamsWithHTTPClient(client *http.Client) *AzureRefreshCertificateParams {
	return &AzureRefreshCertificateParams{
		HTTPClient: client,
	}
}

/*
AzureRefreshCertificateParams contains all the parameters to send to the API endpoint

	for the azure refresh certificate operation.

	Typically these are written to a http.Request.
*/
type AzureRefreshCertificateParams struct {

	/* TenantID.

	   Azure Tenant ID
	*/
	TenantID []string

	/* YearsValid.

	   Years the certificate should be valid. Max 2

	   Default: "1"
	*/
	YearsValid *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the azure refresh certificate params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AzureRefreshCertificateParams) WithDefaults() *AzureRefreshCertificateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the azure refresh certificate params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AzureRefreshCertificateParams) SetDefaults() {
	var (
		yearsValidDefault = string("1")
	)

	val := AzureRefreshCertificateParams{
		YearsValid: &yearsValidDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the azure refresh certificate params
func (o *AzureRefreshCertificateParams) WithTimeout(timeout time.Duration) *AzureRefreshCertificateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the azure refresh certificate params
func (o *AzureRefreshCertificateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the azure refresh certificate params
func (o *AzureRefreshCertificateParams) WithContext(ctx context.Context) *AzureRefreshCertificateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the azure refresh certificate params
func (o *AzureRefreshCertificateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the azure refresh certificate params
func (o *AzureRefreshCertificateParams) WithHTTPClient(client *http.Client) *AzureRefreshCertificateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the azure refresh certificate params
func (o *AzureRefreshCertificateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTenantID adds the tenantID to the azure refresh certificate params
func (o *AzureRefreshCertificateParams) WithTenantID(tenantID []string) *AzureRefreshCertificateParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the azure refresh certificate params
func (o *AzureRefreshCertificateParams) SetTenantID(tenantID []string) {
	o.TenantID = tenantID
}

// WithYearsValid adds the yearsValid to the azure refresh certificate params
func (o *AzureRefreshCertificateParams) WithYearsValid(yearsValid *string) *AzureRefreshCertificateParams {
	o.SetYearsValid(yearsValid)
	return o
}

// SetYearsValid adds the yearsValid to the azure refresh certificate params
func (o *AzureRefreshCertificateParams) SetYearsValid(yearsValid *string) {
	o.YearsValid = yearsValid
}

// WriteToRequest writes these params to a swagger request
func (o *AzureRefreshCertificateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.TenantID != nil {

		// binding items for tenant_id
		joinedTenantID := o.bindParamTenantID(reg)

		// query array param tenant_id
		if err := r.SetQueryParam("tenant_id", joinedTenantID...); err != nil {
			return err
		}
	}

	if o.YearsValid != nil {

		// query param years_valid
		var qrYearsValid string

		if o.YearsValid != nil {
			qrYearsValid = *o.YearsValid
		}
		qYearsValid := qrYearsValid
		if qYearsValid != "" {

			if err := r.SetQueryParam("years_valid", qYearsValid); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamAzureRefreshCertificate binds the parameter tenant_id
func (o *AzureRefreshCertificateParams) bindParamTenantID(formats strfmt.Registry) []string {
	tenantIDIR := o.TenantID

	var tenantIDIC []string
	for _, tenantIDIIR := range tenantIDIR { // explode []string

		tenantIDIIV := tenantIDIIR // string as string
		tenantIDIC = append(tenantIDIC, tenantIDIIV)
	}

	// items.CollectionFormat: "multi"
	tenantIDIS := swag.JoinByFormat(tenantIDIC, "multi")

	return tenantIDIS
}
