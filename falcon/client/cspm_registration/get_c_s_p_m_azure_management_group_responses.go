// Code generated by go-swagger; DO NOT EDIT.

package cspm_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetCSPMAzureManagementGroupReader is a Reader for the GetCSPMAzureManagementGroup structure.
type GetCSPMAzureManagementGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCSPMAzureManagementGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCSPMAzureManagementGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 207:
		result := NewGetCSPMAzureManagementGroupMultiStatus()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCSPMAzureManagementGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCSPMAzureManagementGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetCSPMAzureManagementGroupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCSPMAzureManagementGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cloud-connect-cspm-azure/entities/management-group/v1] GetCSPMAzureManagementGroup", response, response.Code())
	}
}

// NewGetCSPMAzureManagementGroupOK creates a GetCSPMAzureManagementGroupOK with default headers values
func NewGetCSPMAzureManagementGroupOK() *GetCSPMAzureManagementGroupOK {
	return &GetCSPMAzureManagementGroupOK{}
}

/*
GetCSPMAzureManagementGroupOK describes a response with status code 200, with default header values.

OK
*/
type GetCSPMAzureManagementGroupOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAzureManagementGroupResponseV1
}

// IsSuccess returns true when this get c s p m azure management group o k response has a 2xx status code
func (o *GetCSPMAzureManagementGroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get c s p m azure management group o k response has a 3xx status code
func (o *GetCSPMAzureManagementGroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m azure management group o k response has a 4xx status code
func (o *GetCSPMAzureManagementGroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get c s p m azure management group o k response has a 5xx status code
func (o *GetCSPMAzureManagementGroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get c s p m azure management group o k response a status code equal to that given
func (o *GetCSPMAzureManagementGroupOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get c s p m azure management group o k response
func (o *GetCSPMAzureManagementGroupOK) Code() int {
	return 200
}

func (o *GetCSPMAzureManagementGroupOK) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-azure/entities/management-group/v1][%d] getCSPMAzureManagementGroupOK  %+v", 200, o.Payload)
}

func (o *GetCSPMAzureManagementGroupOK) String() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-azure/entities/management-group/v1][%d] getCSPMAzureManagementGroupOK  %+v", 200, o.Payload)
}

func (o *GetCSPMAzureManagementGroupOK) GetPayload() *models.RegistrationAzureManagementGroupResponseV1 {
	return o.Payload
}

func (o *GetCSPMAzureManagementGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAzureManagementGroupResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMAzureManagementGroupMultiStatus creates a GetCSPMAzureManagementGroupMultiStatus with default headers values
func NewGetCSPMAzureManagementGroupMultiStatus() *GetCSPMAzureManagementGroupMultiStatus {
	return &GetCSPMAzureManagementGroupMultiStatus{}
}

/*
GetCSPMAzureManagementGroupMultiStatus describes a response with status code 207, with default header values.

Multi-Status
*/
type GetCSPMAzureManagementGroupMultiStatus struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAzureManagementGroupResponseV1
}

// IsSuccess returns true when this get c s p m azure management group multi status response has a 2xx status code
func (o *GetCSPMAzureManagementGroupMultiStatus) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get c s p m azure management group multi status response has a 3xx status code
func (o *GetCSPMAzureManagementGroupMultiStatus) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m azure management group multi status response has a 4xx status code
func (o *GetCSPMAzureManagementGroupMultiStatus) IsClientError() bool {
	return false
}

// IsServerError returns true when this get c s p m azure management group multi status response has a 5xx status code
func (o *GetCSPMAzureManagementGroupMultiStatus) IsServerError() bool {
	return false
}

// IsCode returns true when this get c s p m azure management group multi status response a status code equal to that given
func (o *GetCSPMAzureManagementGroupMultiStatus) IsCode(code int) bool {
	return code == 207
}

// Code gets the status code for the get c s p m azure management group multi status response
func (o *GetCSPMAzureManagementGroupMultiStatus) Code() int {
	return 207
}

func (o *GetCSPMAzureManagementGroupMultiStatus) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-azure/entities/management-group/v1][%d] getCSPMAzureManagementGroupMultiStatus  %+v", 207, o.Payload)
}

func (o *GetCSPMAzureManagementGroupMultiStatus) String() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-azure/entities/management-group/v1][%d] getCSPMAzureManagementGroupMultiStatus  %+v", 207, o.Payload)
}

func (o *GetCSPMAzureManagementGroupMultiStatus) GetPayload() *models.RegistrationAzureManagementGroupResponseV1 {
	return o.Payload
}

func (o *GetCSPMAzureManagementGroupMultiStatus) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAzureManagementGroupResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMAzureManagementGroupBadRequest creates a GetCSPMAzureManagementGroupBadRequest with default headers values
func NewGetCSPMAzureManagementGroupBadRequest() *GetCSPMAzureManagementGroupBadRequest {
	return &GetCSPMAzureManagementGroupBadRequest{}
}

/*
GetCSPMAzureManagementGroupBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetCSPMAzureManagementGroupBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAzureManagementGroupResponseV1
}

// IsSuccess returns true when this get c s p m azure management group bad request response has a 2xx status code
func (o *GetCSPMAzureManagementGroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get c s p m azure management group bad request response has a 3xx status code
func (o *GetCSPMAzureManagementGroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m azure management group bad request response has a 4xx status code
func (o *GetCSPMAzureManagementGroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get c s p m azure management group bad request response has a 5xx status code
func (o *GetCSPMAzureManagementGroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get c s p m azure management group bad request response a status code equal to that given
func (o *GetCSPMAzureManagementGroupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get c s p m azure management group bad request response
func (o *GetCSPMAzureManagementGroupBadRequest) Code() int {
	return 400
}

func (o *GetCSPMAzureManagementGroupBadRequest) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-azure/entities/management-group/v1][%d] getCSPMAzureManagementGroupBadRequest  %+v", 400, o.Payload)
}

func (o *GetCSPMAzureManagementGroupBadRequest) String() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-azure/entities/management-group/v1][%d] getCSPMAzureManagementGroupBadRequest  %+v", 400, o.Payload)
}

func (o *GetCSPMAzureManagementGroupBadRequest) GetPayload() *models.RegistrationAzureManagementGroupResponseV1 {
	return o.Payload
}

func (o *GetCSPMAzureManagementGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAzureManagementGroupResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMAzureManagementGroupForbidden creates a GetCSPMAzureManagementGroupForbidden with default headers values
func NewGetCSPMAzureManagementGroupForbidden() *GetCSPMAzureManagementGroupForbidden {
	return &GetCSPMAzureManagementGroupForbidden{}
}

/*
GetCSPMAzureManagementGroupForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetCSPMAzureManagementGroupForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get c s p m azure management group forbidden response has a 2xx status code
func (o *GetCSPMAzureManagementGroupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get c s p m azure management group forbidden response has a 3xx status code
func (o *GetCSPMAzureManagementGroupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m azure management group forbidden response has a 4xx status code
func (o *GetCSPMAzureManagementGroupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get c s p m azure management group forbidden response has a 5xx status code
func (o *GetCSPMAzureManagementGroupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get c s p m azure management group forbidden response a status code equal to that given
func (o *GetCSPMAzureManagementGroupForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get c s p m azure management group forbidden response
func (o *GetCSPMAzureManagementGroupForbidden) Code() int {
	return 403
}

func (o *GetCSPMAzureManagementGroupForbidden) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-azure/entities/management-group/v1][%d] getCSPMAzureManagementGroupForbidden  %+v", 403, o.Payload)
}

func (o *GetCSPMAzureManagementGroupForbidden) String() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-azure/entities/management-group/v1][%d] getCSPMAzureManagementGroupForbidden  %+v", 403, o.Payload)
}

func (o *GetCSPMAzureManagementGroupForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetCSPMAzureManagementGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMAzureManagementGroupTooManyRequests creates a GetCSPMAzureManagementGroupTooManyRequests with default headers values
func NewGetCSPMAzureManagementGroupTooManyRequests() *GetCSPMAzureManagementGroupTooManyRequests {
	return &GetCSPMAzureManagementGroupTooManyRequests{}
}

/*
GetCSPMAzureManagementGroupTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetCSPMAzureManagementGroupTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get c s p m azure management group too many requests response has a 2xx status code
func (o *GetCSPMAzureManagementGroupTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get c s p m azure management group too many requests response has a 3xx status code
func (o *GetCSPMAzureManagementGroupTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m azure management group too many requests response has a 4xx status code
func (o *GetCSPMAzureManagementGroupTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get c s p m azure management group too many requests response has a 5xx status code
func (o *GetCSPMAzureManagementGroupTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get c s p m azure management group too many requests response a status code equal to that given
func (o *GetCSPMAzureManagementGroupTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get c s p m azure management group too many requests response
func (o *GetCSPMAzureManagementGroupTooManyRequests) Code() int {
	return 429
}

func (o *GetCSPMAzureManagementGroupTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-azure/entities/management-group/v1][%d] getCSPMAzureManagementGroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCSPMAzureManagementGroupTooManyRequests) String() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-azure/entities/management-group/v1][%d] getCSPMAzureManagementGroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCSPMAzureManagementGroupTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetCSPMAzureManagementGroupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMAzureManagementGroupInternalServerError creates a GetCSPMAzureManagementGroupInternalServerError with default headers values
func NewGetCSPMAzureManagementGroupInternalServerError() *GetCSPMAzureManagementGroupInternalServerError {
	return &GetCSPMAzureManagementGroupInternalServerError{}
}

/*
GetCSPMAzureManagementGroupInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetCSPMAzureManagementGroupInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAzureManagementGroupResponseV1
}

// IsSuccess returns true when this get c s p m azure management group internal server error response has a 2xx status code
func (o *GetCSPMAzureManagementGroupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get c s p m azure management group internal server error response has a 3xx status code
func (o *GetCSPMAzureManagementGroupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m azure management group internal server error response has a 4xx status code
func (o *GetCSPMAzureManagementGroupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get c s p m azure management group internal server error response has a 5xx status code
func (o *GetCSPMAzureManagementGroupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get c s p m azure management group internal server error response a status code equal to that given
func (o *GetCSPMAzureManagementGroupInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get c s p m azure management group internal server error response
func (o *GetCSPMAzureManagementGroupInternalServerError) Code() int {
	return 500
}

func (o *GetCSPMAzureManagementGroupInternalServerError) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-azure/entities/management-group/v1][%d] getCSPMAzureManagementGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCSPMAzureManagementGroupInternalServerError) String() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-azure/entities/management-group/v1][%d] getCSPMAzureManagementGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCSPMAzureManagementGroupInternalServerError) GetPayload() *models.RegistrationAzureManagementGroupResponseV1 {
	return o.Payload
}

func (o *GetCSPMAzureManagementGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAzureManagementGroupResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
