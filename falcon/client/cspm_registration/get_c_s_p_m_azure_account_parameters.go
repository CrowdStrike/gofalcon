// Code generated by go-swagger; DO NOT EDIT.

package cspm_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetCSPMAzureAccountParams creates a new GetCSPMAzureAccountParams object
// with the default values initialized.
func NewGetCSPMAzureAccountParams() *GetCSPMAzureAccountParams {
	var (
		limitDefault = int64(100)
	)
	return &GetCSPMAzureAccountParams{
		Limit: &limitDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCSPMAzureAccountParamsWithTimeout creates a new GetCSPMAzureAccountParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCSPMAzureAccountParamsWithTimeout(timeout time.Duration) *GetCSPMAzureAccountParams {
	var (
		limitDefault = int64(100)
	)
	return &GetCSPMAzureAccountParams{
		Limit: &limitDefault,

		timeout: timeout,
	}
}

// NewGetCSPMAzureAccountParamsWithContext creates a new GetCSPMAzureAccountParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCSPMAzureAccountParamsWithContext(ctx context.Context) *GetCSPMAzureAccountParams {
	var (
		limitDefault = int64(100)
	)
	return &GetCSPMAzureAccountParams{
		Limit: &limitDefault,

		Context: ctx,
	}
}

// NewGetCSPMAzureAccountParamsWithHTTPClient creates a new GetCSPMAzureAccountParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCSPMAzureAccountParamsWithHTTPClient(client *http.Client) *GetCSPMAzureAccountParams {
	var (
		limitDefault = int64(100)
	)
	return &GetCSPMAzureAccountParams{
		Limit:      &limitDefault,
		HTTPClient: client,
	}
}

/*GetCSPMAzureAccountParams contains all the parameters to send to the API endpoint
for the get c s p m azure account operation typically these are written to a http.Request
*/
type GetCSPMAzureAccountParams struct {

	/*Ids
	  SubscriptionIDs of accounts to select for this status operation. If this is empty then all accounts are returned.

	*/
	Ids []string
	/*Limit
	  The maximum records to return. Defaults to 100.

	*/
	Limit *int64
	/*Offset
	  The offset to start retrieving records from

	*/
	Offset *int64
	/*ScanType
	  Type of scan, dry or full, to perform on selected accounts

	*/
	ScanType *string
	/*Status
	  Account status to filter results by.

	*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get c s p m azure account params
func (o *GetCSPMAzureAccountParams) WithTimeout(timeout time.Duration) *GetCSPMAzureAccountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get c s p m azure account params
func (o *GetCSPMAzureAccountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get c s p m azure account params
func (o *GetCSPMAzureAccountParams) WithContext(ctx context.Context) *GetCSPMAzureAccountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get c s p m azure account params
func (o *GetCSPMAzureAccountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get c s p m azure account params
func (o *GetCSPMAzureAccountParams) WithHTTPClient(client *http.Client) *GetCSPMAzureAccountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get c s p m azure account params
func (o *GetCSPMAzureAccountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIds adds the ids to the get c s p m azure account params
func (o *GetCSPMAzureAccountParams) WithIds(ids []string) *GetCSPMAzureAccountParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get c s p m azure account params
func (o *GetCSPMAzureAccountParams) SetIds(ids []string) {
	o.Ids = ids
}

// WithLimit adds the limit to the get c s p m azure account params
func (o *GetCSPMAzureAccountParams) WithLimit(limit *int64) *GetCSPMAzureAccountParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get c s p m azure account params
func (o *GetCSPMAzureAccountParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get c s p m azure account params
func (o *GetCSPMAzureAccountParams) WithOffset(offset *int64) *GetCSPMAzureAccountParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get c s p m azure account params
func (o *GetCSPMAzureAccountParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithScanType adds the scanType to the get c s p m azure account params
func (o *GetCSPMAzureAccountParams) WithScanType(scanType *string) *GetCSPMAzureAccountParams {
	o.SetScanType(scanType)
	return o
}

// SetScanType adds the scanType to the get c s p m azure account params
func (o *GetCSPMAzureAccountParams) SetScanType(scanType *string) {
	o.ScanType = scanType
}

// WithStatus adds the status to the get c s p m azure account params
func (o *GetCSPMAzureAccountParams) WithStatus(status *string) *GetCSPMAzureAccountParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get c s p m azure account params
func (o *GetCSPMAzureAccountParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *GetCSPMAzureAccountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesIds := o.Ids

	joinedIds := swag.JoinByFormat(valuesIds, "multi")
	// query array param ids
	if err := r.SetQueryParam("ids", joinedIds...); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.ScanType != nil {

		// query param scan-type
		var qrScanType string
		if o.ScanType != nil {
			qrScanType = *o.ScanType
		}
		qScanType := qrScanType
		if qScanType != "" {
			if err := r.SetQueryParam("scan-type", qScanType); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
