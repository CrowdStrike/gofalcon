// Code generated by go-swagger; DO NOT EDIT.

package cspm_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetCloudEventIDsReader is a Reader for the GetCloudEventIDs structure.
type GetCloudEventIDsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCloudEventIDsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCloudEventIDsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 207:
		result := NewGetCloudEventIDsMultiStatus()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCloudEventIDsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCloudEventIDsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetCloudEventIDsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCloudEventIDsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /detects/queries/cloud-events/v1] getCloudEventIDs", response, response.Code())
	}
}

// NewGetCloudEventIDsOK creates a GetCloudEventIDsOK with default headers values
func NewGetCloudEventIDsOK() *GetCloudEventIDsOK {
	return &GetCloudEventIDsOK{}
}

/*
GetCloudEventIDsOK describes a response with status code 200, with default header values.

OK
*/
type GetCloudEventIDsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CdrioamanagerGetCloudEventIDsResponse
}

// IsSuccess returns true when this get cloud event i ds o k response has a 2xx status code
func (o *GetCloudEventIDsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get cloud event i ds o k response has a 3xx status code
func (o *GetCloudEventIDsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cloud event i ds o k response has a 4xx status code
func (o *GetCloudEventIDsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get cloud event i ds o k response has a 5xx status code
func (o *GetCloudEventIDsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get cloud event i ds o k response a status code equal to that given
func (o *GetCloudEventIDsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get cloud event i ds o k response
func (o *GetCloudEventIDsOK) Code() int {
	return 200
}

func (o *GetCloudEventIDsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /detects/queries/cloud-events/v1][%d] getCloudEventIDsOK %s", 200, payload)
}

func (o *GetCloudEventIDsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /detects/queries/cloud-events/v1][%d] getCloudEventIDsOK %s", 200, payload)
}

func (o *GetCloudEventIDsOK) GetPayload() *models.CdrioamanagerGetCloudEventIDsResponse {
	return o.Payload
}

func (o *GetCloudEventIDsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CdrioamanagerGetCloudEventIDsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCloudEventIDsMultiStatus creates a GetCloudEventIDsMultiStatus with default headers values
func NewGetCloudEventIDsMultiStatus() *GetCloudEventIDsMultiStatus {
	return &GetCloudEventIDsMultiStatus{}
}

/*
GetCloudEventIDsMultiStatus describes a response with status code 207, with default header values.

Multi-Status
*/
type GetCloudEventIDsMultiStatus struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get cloud event i ds multi status response has a 2xx status code
func (o *GetCloudEventIDsMultiStatus) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get cloud event i ds multi status response has a 3xx status code
func (o *GetCloudEventIDsMultiStatus) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cloud event i ds multi status response has a 4xx status code
func (o *GetCloudEventIDsMultiStatus) IsClientError() bool {
	return false
}

// IsServerError returns true when this get cloud event i ds multi status response has a 5xx status code
func (o *GetCloudEventIDsMultiStatus) IsServerError() bool {
	return false
}

// IsCode returns true when this get cloud event i ds multi status response a status code equal to that given
func (o *GetCloudEventIDsMultiStatus) IsCode(code int) bool {
	return code == 207
}

// Code gets the status code for the get cloud event i ds multi status response
func (o *GetCloudEventIDsMultiStatus) Code() int {
	return 207
}

func (o *GetCloudEventIDsMultiStatus) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /detects/queries/cloud-events/v1][%d] getCloudEventIDsMultiStatus %s", 207, payload)
}

func (o *GetCloudEventIDsMultiStatus) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /detects/queries/cloud-events/v1][%d] getCloudEventIDsMultiStatus %s", 207, payload)
}

func (o *GetCloudEventIDsMultiStatus) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetCloudEventIDsMultiStatus) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCloudEventIDsBadRequest creates a GetCloudEventIDsBadRequest with default headers values
func NewGetCloudEventIDsBadRequest() *GetCloudEventIDsBadRequest {
	return &GetCloudEventIDsBadRequest{}
}

/*
GetCloudEventIDsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetCloudEventIDsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get cloud event i ds bad request response has a 2xx status code
func (o *GetCloudEventIDsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get cloud event i ds bad request response has a 3xx status code
func (o *GetCloudEventIDsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cloud event i ds bad request response has a 4xx status code
func (o *GetCloudEventIDsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get cloud event i ds bad request response has a 5xx status code
func (o *GetCloudEventIDsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get cloud event i ds bad request response a status code equal to that given
func (o *GetCloudEventIDsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get cloud event i ds bad request response
func (o *GetCloudEventIDsBadRequest) Code() int {
	return 400
}

func (o *GetCloudEventIDsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /detects/queries/cloud-events/v1][%d] getCloudEventIDsBadRequest %s", 400, payload)
}

func (o *GetCloudEventIDsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /detects/queries/cloud-events/v1][%d] getCloudEventIDsBadRequest %s", 400, payload)
}

func (o *GetCloudEventIDsBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetCloudEventIDsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCloudEventIDsForbidden creates a GetCloudEventIDsForbidden with default headers values
func NewGetCloudEventIDsForbidden() *GetCloudEventIDsForbidden {
	return &GetCloudEventIDsForbidden{}
}

/*
GetCloudEventIDsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetCloudEventIDsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get cloud event i ds forbidden response has a 2xx status code
func (o *GetCloudEventIDsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get cloud event i ds forbidden response has a 3xx status code
func (o *GetCloudEventIDsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cloud event i ds forbidden response has a 4xx status code
func (o *GetCloudEventIDsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get cloud event i ds forbidden response has a 5xx status code
func (o *GetCloudEventIDsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get cloud event i ds forbidden response a status code equal to that given
func (o *GetCloudEventIDsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get cloud event i ds forbidden response
func (o *GetCloudEventIDsForbidden) Code() int {
	return 403
}

func (o *GetCloudEventIDsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /detects/queries/cloud-events/v1][%d] getCloudEventIDsForbidden %s", 403, payload)
}

func (o *GetCloudEventIDsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /detects/queries/cloud-events/v1][%d] getCloudEventIDsForbidden %s", 403, payload)
}

func (o *GetCloudEventIDsForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetCloudEventIDsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCloudEventIDsTooManyRequests creates a GetCloudEventIDsTooManyRequests with default headers values
func NewGetCloudEventIDsTooManyRequests() *GetCloudEventIDsTooManyRequests {
	return &GetCloudEventIDsTooManyRequests{}
}

/*
GetCloudEventIDsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetCloudEventIDsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get cloud event i ds too many requests response has a 2xx status code
func (o *GetCloudEventIDsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get cloud event i ds too many requests response has a 3xx status code
func (o *GetCloudEventIDsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cloud event i ds too many requests response has a 4xx status code
func (o *GetCloudEventIDsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get cloud event i ds too many requests response has a 5xx status code
func (o *GetCloudEventIDsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get cloud event i ds too many requests response a status code equal to that given
func (o *GetCloudEventIDsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get cloud event i ds too many requests response
func (o *GetCloudEventIDsTooManyRequests) Code() int {
	return 429
}

func (o *GetCloudEventIDsTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /detects/queries/cloud-events/v1][%d] getCloudEventIDsTooManyRequests %s", 429, payload)
}

func (o *GetCloudEventIDsTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /detects/queries/cloud-events/v1][%d] getCloudEventIDsTooManyRequests %s", 429, payload)
}

func (o *GetCloudEventIDsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetCloudEventIDsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCloudEventIDsInternalServerError creates a GetCloudEventIDsInternalServerError with default headers values
func NewGetCloudEventIDsInternalServerError() *GetCloudEventIDsInternalServerError {
	return &GetCloudEventIDsInternalServerError{}
}

/*
GetCloudEventIDsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetCloudEventIDsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get cloud event i ds internal server error response has a 2xx status code
func (o *GetCloudEventIDsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get cloud event i ds internal server error response has a 3xx status code
func (o *GetCloudEventIDsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cloud event i ds internal server error response has a 4xx status code
func (o *GetCloudEventIDsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get cloud event i ds internal server error response has a 5xx status code
func (o *GetCloudEventIDsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get cloud event i ds internal server error response a status code equal to that given
func (o *GetCloudEventIDsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get cloud event i ds internal server error response
func (o *GetCloudEventIDsInternalServerError) Code() int {
	return 500
}

func (o *GetCloudEventIDsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /detects/queries/cloud-events/v1][%d] getCloudEventIDsInternalServerError %s", 500, payload)
}

func (o *GetCloudEventIDsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /detects/queries/cloud-events/v1][%d] getCloudEventIDsInternalServerError %s", 500, payload)
}

func (o *GetCloudEventIDsInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetCloudEventIDsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
