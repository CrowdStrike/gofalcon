// Code generated by go-swagger; DO NOT EDIT.

package cloud_azure_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cloud azure registration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cloud azure registration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CloudRegistrationAzureAzurePurgeRotatedCertificates(params *CloudRegistrationAzureAzurePurgeRotatedCertificatesParams, opts ...ClientOption) (*CloudRegistrationAzureAzurePurgeRotatedCertificatesCreated, error)

	CloudRegistrationAzureAzureRotateCertificates(params *CloudRegistrationAzureAzureRotateCertificatesParams, opts ...ClientOption) (*CloudRegistrationAzureAzureRotateCertificatesCreated, error)

	CloudRegistrationAzureAzureSupportedRegions(params *CloudRegistrationAzureAzureSupportedRegionsParams, opts ...ClientOption) (*CloudRegistrationAzureAzureSupportedRegionsOK, error)

	CloudRegistrationAzureCreateClientID(params *CloudRegistrationAzureCreateClientIDParams, opts ...ClientOption) (*CloudRegistrationAzureCreateClientIDCreated, error)

	CloudRegistrationAzureCreatePartialRegistration(params *CloudRegistrationAzureCreatePartialRegistrationParams, opts ...ClientOption) (*CloudRegistrationAzureCreatePartialRegistrationCreated, error)

	CloudRegistrationAzureCreateRegistration(params *CloudRegistrationAzureCreateRegistrationParams, opts ...ClientOption) (*CloudRegistrationAzureCreateRegistrationCreated, error)

	CloudRegistrationAzureDeleteManagementGroup(params *CloudRegistrationAzureDeleteManagementGroupParams, opts ...ClientOption) (*CloudRegistrationAzureDeleteManagementGroupOK, error)

	CloudRegistrationAzureDeletePartialRegistration(params *CloudRegistrationAzureDeletePartialRegistrationParams, opts ...ClientOption) (*CloudRegistrationAzureDeletePartialRegistrationOK, error)

	CloudRegistrationAzureDeleteRegistration(params *CloudRegistrationAzureDeleteRegistrationParams, opts ...ClientOption) (*CloudRegistrationAzureDeleteRegistrationOK, error)

	CloudRegistrationAzureDeleteSubscription(params *CloudRegistrationAzureDeleteSubscriptionParams, opts ...ClientOption) (*CloudRegistrationAzureDeleteSubscriptionOK, error)

	CloudRegistrationAzureDeleteTenants(params *CloudRegistrationAzureDeleteTenantsParams, opts ...ClientOption) (*CloudRegistrationAzureDeleteTenantsOK, error)

	CloudRegistrationAzureDownloadScript(params *CloudRegistrationAzureDownloadScriptParams, opts ...ClientOption) (*CloudRegistrationAzureDownloadScriptOK, error)

	CloudRegistrationAzureGetManagementGroup(params *CloudRegistrationAzureGetManagementGroupParams, opts ...ClientOption) (*CloudRegistrationAzureGetManagementGroupOK, error)

	CloudRegistrationAzureGetPartialRegistration(params *CloudRegistrationAzureGetPartialRegistrationParams, opts ...ClientOption) (*CloudRegistrationAzureGetPartialRegistrationOK, error)

	CloudRegistrationAzureGetRegistration(params *CloudRegistrationAzureGetRegistrationParams, opts ...ClientOption) (*CloudRegistrationAzureGetRegistrationOK, error)

	CloudRegistrationAzureGetRegistrationVersion(params *CloudRegistrationAzureGetRegistrationVersionParams, opts ...ClientOption) (*CloudRegistrationAzureGetRegistrationVersionOK, error)

	CloudRegistrationAzureGetSubscription(params *CloudRegistrationAzureGetSubscriptionParams, opts ...ClientOption) (*CloudRegistrationAzureGetSubscriptionOK, error)

	CloudRegistrationAzureGetSubscriptionCombined(params *CloudRegistrationAzureGetSubscriptionCombinedParams, opts ...ClientOption) (*CloudRegistrationAzureGetSubscriptionCombinedOK, *CloudRegistrationAzureGetSubscriptionCombinedNoContent, error)

	CloudRegistrationAzureGetTenantConfiguration(params *CloudRegistrationAzureGetTenantConfigurationParams, opts ...ClientOption) (*CloudRegistrationAzureGetTenantConfigurationOK, error)

	CloudRegistrationAzureGetTenantIds(params *CloudRegistrationAzureGetTenantIdsParams, opts ...ClientOption) (*CloudRegistrationAzureGetTenantIdsOK, error)

	CloudRegistrationAzureGetToken(params *CloudRegistrationAzureGetTokenParams, opts ...ClientOption) (*CloudRegistrationAzureGetTokenOK, error)

	CloudRegistrationAzureUpdatePartialRegistration(params *CloudRegistrationAzureUpdatePartialRegistrationParams, opts ...ClientOption) (*CloudRegistrationAzureUpdatePartialRegistrationOK, error)

	CloudRegistrationAzureUpdateRegistration(params *CloudRegistrationAzureUpdateRegistrationParams, opts ...ClientOption) (*CloudRegistrationAzureUpdateRegistrationOK, error)

	CloudRegistrationAzureValidateManagementGroup(params *CloudRegistrationAzureValidateManagementGroupParams, opts ...ClientOption) (*CloudRegistrationAzureValidateManagementGroupCreated, error)

	CloudRegistrationAzureValidateRegistration(params *CloudRegistrationAzureValidateRegistrationParams, opts ...ClientOption) (*CloudRegistrationAzureValidateRegistrationOK, error)

	CloudRegistrationAzureValidateSubscription(params *CloudRegistrationAzureValidateSubscriptionParams, opts ...ClientOption) (*CloudRegistrationAzureValidateSubscriptionCreated, error)

	CloudRegistrationAzureVerifyAdminConsent(params *CloudRegistrationAzureVerifyAdminConsentParams, opts ...ClientOption) (*CloudRegistrationAzureVerifyAdminConsentOK, error)

	DownloadAzureScript(params *DownloadAzureScriptParams, opts ...ClientOption) (*DownloadAzureScriptOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CloudRegistrationAzureAzurePurgeRotatedCertificates purges certificates that have been rotated
*/
func (a *Client) CloudRegistrationAzureAzurePurgeRotatedCertificates(params *CloudRegistrationAzureAzurePurgeRotatedCertificatesParams, opts ...ClientOption) (*CloudRegistrationAzureAzurePurgeRotatedCertificatesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureAzurePurgeRotatedCertificatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-azure-purge-rotated-certificates",
		Method:             "POST",
		PathPattern:        "/cloud-security-registration-azure/entities/certificates-purge-rotated/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureAzurePurgeRotatedCertificatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureAzurePurgeRotatedCertificatesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-azure-purge-rotated-certificates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureAzureRotateCertificates rotates certificates that will expire within a certain number of days
*/
func (a *Client) CloudRegistrationAzureAzureRotateCertificates(params *CloudRegistrationAzureAzureRotateCertificatesParams, opts ...ClientOption) (*CloudRegistrationAzureAzureRotateCertificatesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureAzureRotateCertificatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-azure-rotate-certificates",
		Method:             "POST",
		PathPattern:        "/cloud-security-registration-azure/entities/certificates-rotate-expiring/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureAzureRotateCertificatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureAzureRotateCertificatesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-azure-rotate-certificates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureAzureSupportedRegions returns information about supported azure regions
*/
func (a *Client) CloudRegistrationAzureAzureSupportedRegions(params *CloudRegistrationAzureAzureSupportedRegionsParams, opts ...ClientOption) (*CloudRegistrationAzureAzureSupportedRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureAzureSupportedRegionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-azure-supported-regions",
		Method:             "GET",
		PathPattern:        "/cloud-security-registration-azure/entities/regions/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureAzureSupportedRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureAzureSupportedRegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-azure-supported-regions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureCreateClientID creates an app registration for a specific tenant account
*/
func (a *Client) CloudRegistrationAzureCreateClientID(params *CloudRegistrationAzureCreateClientIDParams, opts ...ClientOption) (*CloudRegistrationAzureCreateClientIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureCreateClientIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-create-client-id",
		Method:             "POST",
		PathPattern:        "/cloud-security-registration-azure/entities/client-id/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureCreateClientIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureCreateClientIDCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-create-client-id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureCreatePartialRegistration creates a partial azure registration
*/
func (a *Client) CloudRegistrationAzureCreatePartialRegistration(params *CloudRegistrationAzureCreatePartialRegistrationParams, opts ...ClientOption) (*CloudRegistrationAzureCreatePartialRegistrationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureCreatePartialRegistrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-create-partial-registration",
		Method:             "POST",
		PathPattern:        "/cloud-security-registration-azure/entities/registrations/partial/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureCreatePartialRegistrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureCreatePartialRegistrationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-create-partial-registration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureCreateRegistration creates an azure registration for a tenant
*/
func (a *Client) CloudRegistrationAzureCreateRegistration(params *CloudRegistrationAzureCreateRegistrationParams, opts ...ClientOption) (*CloudRegistrationAzureCreateRegistrationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureCreateRegistrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-create-registration",
		Method:             "POST",
		PathPattern:        "/cloud-security-registration-azure/entities/registrations/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureCreateRegistrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureCreateRegistrationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-create-registration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureDeleteManagementGroup disables existing azure management groups
*/
func (a *Client) CloudRegistrationAzureDeleteManagementGroup(params *CloudRegistrationAzureDeleteManagementGroupParams, opts ...ClientOption) (*CloudRegistrationAzureDeleteManagementGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureDeleteManagementGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-delete-management-group",
		Method:             "DELETE",
		PathPattern:        "/cloud-security-registration-azure/entities/management-groups/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureDeleteManagementGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureDeleteManagementGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-delete-management-group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureDeletePartialRegistration deletes existing partial azure registrations
*/
func (a *Client) CloudRegistrationAzureDeletePartialRegistration(params *CloudRegistrationAzureDeletePartialRegistrationParams, opts ...ClientOption) (*CloudRegistrationAzureDeletePartialRegistrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureDeletePartialRegistrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-delete-partial-registration",
		Method:             "DELETE",
		PathPattern:        "/cloud-security-registration-azure/entities/registrations/partial/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureDeletePartialRegistrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureDeletePartialRegistrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-delete-partial-registration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureDeleteRegistration deletes existing azure registrations
*/
func (a *Client) CloudRegistrationAzureDeleteRegistration(params *CloudRegistrationAzureDeleteRegistrationParams, opts ...ClientOption) (*CloudRegistrationAzureDeleteRegistrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureDeleteRegistrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-delete-registration",
		Method:             "DELETE",
		PathPattern:        "/cloud-security-registration-azure/entities/registrations/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureDeleteRegistrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureDeleteRegistrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-delete-registration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureDeleteSubscription disables existing azure subscriptions
*/
func (a *Client) CloudRegistrationAzureDeleteSubscription(params *CloudRegistrationAzureDeleteSubscriptionParams, opts ...ClientOption) (*CloudRegistrationAzureDeleteSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureDeleteSubscriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-delete-subscription",
		Method:             "DELETE",
		PathPattern:        "/cloud-security-registration-azure/entities/accounts/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureDeleteSubscriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureDeleteSubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-delete-subscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureDeleteTenants removes registration for specified tenants this will completely remove all tenant registrations
*/
func (a *Client) CloudRegistrationAzureDeleteTenants(params *CloudRegistrationAzureDeleteTenantsParams, opts ...ClientOption) (*CloudRegistrationAzureDeleteTenantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureDeleteTenantsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-delete-tenants",
		Method:             "DELETE",
		PathPattern:        "/cloud-security-registration-azure/entities/tenants/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureDeleteTenantsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureDeleteTenantsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-delete-tenants: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureDownloadScript retrieves script to create resources
*/
func (a *Client) CloudRegistrationAzureDownloadScript(params *CloudRegistrationAzureDownloadScriptParams, opts ...ClientOption) (*CloudRegistrationAzureDownloadScriptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureDownloadScriptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-download-script",
		Method:             "POST",
		PathPattern:        "/cloud-security-registration-azure/entities/scripts/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureDownloadScriptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureDownloadScriptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-download-script: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureGetManagementGroup retrieves existing azure management groups
*/
func (a *Client) CloudRegistrationAzureGetManagementGroup(params *CloudRegistrationAzureGetManagementGroupParams, opts ...ClientOption) (*CloudRegistrationAzureGetManagementGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureGetManagementGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-get-management-group",
		Method:             "GET",
		PathPattern:        "/cloud-security-registration-azure/entities/management-groups/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureGetManagementGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureGetManagementGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-get-management-group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureGetPartialRegistration retrieves existing partial azure registrations
*/
func (a *Client) CloudRegistrationAzureGetPartialRegistration(params *CloudRegistrationAzureGetPartialRegistrationParams, opts ...ClientOption) (*CloudRegistrationAzureGetPartialRegistrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureGetPartialRegistrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-get-partial-registration",
		Method:             "GET",
		PathPattern:        "/cloud-security-registration-azure/entities/registrations/partial/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureGetPartialRegistrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureGetPartialRegistrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-get-partial-registration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureGetRegistration retrieves existing azure registration for a tenant
*/
func (a *Client) CloudRegistrationAzureGetRegistration(params *CloudRegistrationAzureGetRegistrationParams, opts ...ClientOption) (*CloudRegistrationAzureGetRegistrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureGetRegistrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-get-registration",
		Method:             "GET",
		PathPattern:        "/cloud-security-registration-azure/entities/registrations/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureGetRegistrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureGetRegistrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-get-registration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureGetRegistrationVersion returns the registration version of the customer legacy new
*/
func (a *Client) CloudRegistrationAzureGetRegistrationVersion(params *CloudRegistrationAzureGetRegistrationVersionParams, opts ...ClientOption) (*CloudRegistrationAzureGetRegistrationVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureGetRegistrationVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-get-registration-version",
		Method:             "GET",
		PathPattern:        "/cloud-security-registration-azure/entities/registration-version/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureGetRegistrationVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureGetRegistrationVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-get-registration-version: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureGetSubscription retrieves existing azure subscriptions
*/
func (a *Client) CloudRegistrationAzureGetSubscription(params *CloudRegistrationAzureGetSubscriptionParams, opts ...ClientOption) (*CloudRegistrationAzureGetSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureGetSubscriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-get-subscription",
		Method:             "GET",
		PathPattern:        "/cloud-security-registration-azure/entities/accounts/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureGetSubscriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureGetSubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-get-subscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureGetSubscriptionCombined retrieves a list of azure subscriptions with support for f q l filtering sorting and pagination this will return also any partial registrations to be populated in the UI registration landing page
*/
func (a *Client) CloudRegistrationAzureGetSubscriptionCombined(params *CloudRegistrationAzureGetSubscriptionCombinedParams, opts ...ClientOption) (*CloudRegistrationAzureGetSubscriptionCombinedOK, *CloudRegistrationAzureGetSubscriptionCombinedNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureGetSubscriptionCombinedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-get-subscription-combined",
		Method:             "GET",
		PathPattern:        "/cloud-security-registration-azure/combined/accounts/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureGetSubscriptionCombinedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CloudRegistrationAzureGetSubscriptionCombinedOK:
		return value, nil, nil
	case *CloudRegistrationAzureGetSubscriptionCombinedNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud_azure_registration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureGetTenantConfiguration retrieves existing azure tenant configuration for a customer
*/
func (a *Client) CloudRegistrationAzureGetTenantConfiguration(params *CloudRegistrationAzureGetTenantConfigurationParams, opts ...ClientOption) (*CloudRegistrationAzureGetTenantConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureGetTenantConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-get-tenant-configuration",
		Method:             "GET",
		PathPattern:        "/cloud-security-registration-azure/entities/tenant-configuration/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureGetTenantConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureGetTenantConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-get-tenant-configuration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureGetTenantIds gets a list of registered tenant i ds
*/
func (a *Client) CloudRegistrationAzureGetTenantIds(params *CloudRegistrationAzureGetTenantIdsParams, opts ...ClientOption) (*CloudRegistrationAzureGetTenantIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureGetTenantIdsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-get-tenant-ids",
		Method:             "GET",
		PathPattern:        "/cloud-security-registration-azure/entities/tenants/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureGetTenantIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureGetTenantIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-get-tenant-ids: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureGetToken retrieves an azure token for the specified tenant
*/
func (a *Client) CloudRegistrationAzureGetToken(params *CloudRegistrationAzureGetTokenParams, opts ...ClientOption) (*CloudRegistrationAzureGetTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureGetTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-get-token",
		Method:             "GET",
		PathPattern:        "/cloud-security-registration-azure/entities/token/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureGetTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureGetTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-get-token: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureUpdatePartialRegistration updates an existing partial azure registration
*/
func (a *Client) CloudRegistrationAzureUpdatePartialRegistration(params *CloudRegistrationAzureUpdatePartialRegistrationParams, opts ...ClientOption) (*CloudRegistrationAzureUpdatePartialRegistrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureUpdatePartialRegistrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-update-partial-registration",
		Method:             "PATCH",
		PathPattern:        "/cloud-security-registration-azure/entities/registrations/partial/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureUpdatePartialRegistrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureUpdatePartialRegistrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-update-partial-registration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureUpdateRegistration updates an existing azure registration for a tenant
*/
func (a *Client) CloudRegistrationAzureUpdateRegistration(params *CloudRegistrationAzureUpdateRegistrationParams, opts ...ClientOption) (*CloudRegistrationAzureUpdateRegistrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureUpdateRegistrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-update-registration",
		Method:             "PATCH",
		PathPattern:        "/cloud-security-registration-azure/entities/registrations/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureUpdateRegistrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureUpdateRegistrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-update-registration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureValidateManagementGroup validates an azure management group
*/
func (a *Client) CloudRegistrationAzureValidateManagementGroup(params *CloudRegistrationAzureValidateManagementGroupParams, opts ...ClientOption) (*CloudRegistrationAzureValidateManagementGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureValidateManagementGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-validate-management-group",
		Method:             "POST",
		PathPattern:        "/cloud-security-registration-azure/entities/management-groups/validate/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureValidateManagementGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureValidateManagementGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-validate-management-group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureValidateRegistration validates an azure registration by checking service principal deployment stack and role assignments
*/
func (a *Client) CloudRegistrationAzureValidateRegistration(params *CloudRegistrationAzureValidateRegistrationParams, opts ...ClientOption) (*CloudRegistrationAzureValidateRegistrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureValidateRegistrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-validate-registration",
		Method:             "POST",
		PathPattern:        "/cloud-security-registration-azure/entities/registrations/validate/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureValidateRegistrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureValidateRegistrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-validate-registration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureValidateSubscription validates an azure subscription
*/
func (a *Client) CloudRegistrationAzureValidateSubscription(params *CloudRegistrationAzureValidateSubscriptionParams, opts ...ClientOption) (*CloudRegistrationAzureValidateSubscriptionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureValidateSubscriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-validate-subscription",
		Method:             "POST",
		PathPattern:        "/cloud-security-registration-azure/entities/accounts/validate/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureValidateSubscriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureValidateSubscriptionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-validate-subscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloudRegistrationAzureVerifyAdminConsent verifies admin consent by retrieving a token using service principal credentials and storing the object ID
*/
func (a *Client) CloudRegistrationAzureVerifyAdminConsent(params *CloudRegistrationAzureVerifyAdminConsentParams, opts ...ClientOption) (*CloudRegistrationAzureVerifyAdminConsentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudRegistrationAzureVerifyAdminConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloud-registration-azure-verify-admin-consent",
		Method:             "POST",
		PathPattern:        "/cloud-security-registration-azure/entities/registrations/verify-admin-consent/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudRegistrationAzureVerifyAdminConsentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudRegistrationAzureVerifyAdminConsentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud-registration-azure-verify-admin-consent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DownloadAzureScript downloads azure deployment script terraform or bicep
*/
func (a *Client) DownloadAzureScript(params *DownloadAzureScriptParams, opts ...ClientOption) (*DownloadAzureScriptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadAzureScriptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "download_azure_script",
		Method:             "GET",
		PathPattern:        "/cloud-security-registration-azure/entities/scripts/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DownloadAzureScriptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownloadAzureScriptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for download_azure_script: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
