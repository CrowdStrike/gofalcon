// Code generated by go-swagger; DO NOT EDIT.

package cloud_azure_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CloudRegistrationAzureUpdateRegistrationReader is a Reader for the CloudRegistrationAzureUpdateRegistration structure.
type CloudRegistrationAzureUpdateRegistrationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CloudRegistrationAzureUpdateRegistrationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCloudRegistrationAzureUpdateRegistrationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCloudRegistrationAzureUpdateRegistrationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCloudRegistrationAzureUpdateRegistrationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCloudRegistrationAzureUpdateRegistrationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCloudRegistrationAzureUpdateRegistrationConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCloudRegistrationAzureUpdateRegistrationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCloudRegistrationAzureUpdateRegistrationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /cloud-security-registration-azure/entities/registrations/v1] cloud-registration-azure-update-registration", response, response.Code())
	}
}

// NewCloudRegistrationAzureUpdateRegistrationOK creates a CloudRegistrationAzureUpdateRegistrationOK with default headers values
func NewCloudRegistrationAzureUpdateRegistrationOK() *CloudRegistrationAzureUpdateRegistrationOK {
	return &CloudRegistrationAzureUpdateRegistrationOK{}
}

/*
CloudRegistrationAzureUpdateRegistrationOK describes a response with status code 200, with default header values.

OK
*/
type CloudRegistrationAzureUpdateRegistrationOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AzureAzureRegistrationResponseExtV1
}

// IsSuccess returns true when this cloud registration azure update registration o k response has a 2xx status code
func (o *CloudRegistrationAzureUpdateRegistrationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cloud registration azure update registration o k response has a 3xx status code
func (o *CloudRegistrationAzureUpdateRegistrationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cloud registration azure update registration o k response has a 4xx status code
func (o *CloudRegistrationAzureUpdateRegistrationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cloud registration azure update registration o k response has a 5xx status code
func (o *CloudRegistrationAzureUpdateRegistrationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cloud registration azure update registration o k response a status code equal to that given
func (o *CloudRegistrationAzureUpdateRegistrationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the cloud registration azure update registration o k response
func (o *CloudRegistrationAzureUpdateRegistrationOK) Code() int {
	return 200
}

func (o *CloudRegistrationAzureUpdateRegistrationOK) Error() string {
	return fmt.Sprintf("[PATCH /cloud-security-registration-azure/entities/registrations/v1][%d] cloudRegistrationAzureUpdateRegistrationOK  %+v", 200, o.Payload)
}

func (o *CloudRegistrationAzureUpdateRegistrationOK) String() string {
	return fmt.Sprintf("[PATCH /cloud-security-registration-azure/entities/registrations/v1][%d] cloudRegistrationAzureUpdateRegistrationOK  %+v", 200, o.Payload)
}

func (o *CloudRegistrationAzureUpdateRegistrationOK) GetPayload() *models.AzureAzureRegistrationResponseExtV1 {
	return o.Payload
}

func (o *CloudRegistrationAzureUpdateRegistrationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AzureAzureRegistrationResponseExtV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloudRegistrationAzureUpdateRegistrationBadRequest creates a CloudRegistrationAzureUpdateRegistrationBadRequest with default headers values
func NewCloudRegistrationAzureUpdateRegistrationBadRequest() *CloudRegistrationAzureUpdateRegistrationBadRequest {
	return &CloudRegistrationAzureUpdateRegistrationBadRequest{}
}

/*
CloudRegistrationAzureUpdateRegistrationBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CloudRegistrationAzureUpdateRegistrationBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this cloud registration azure update registration bad request response has a 2xx status code
func (o *CloudRegistrationAzureUpdateRegistrationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cloud registration azure update registration bad request response has a 3xx status code
func (o *CloudRegistrationAzureUpdateRegistrationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cloud registration azure update registration bad request response has a 4xx status code
func (o *CloudRegistrationAzureUpdateRegistrationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cloud registration azure update registration bad request response has a 5xx status code
func (o *CloudRegistrationAzureUpdateRegistrationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cloud registration azure update registration bad request response a status code equal to that given
func (o *CloudRegistrationAzureUpdateRegistrationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the cloud registration azure update registration bad request response
func (o *CloudRegistrationAzureUpdateRegistrationBadRequest) Code() int {
	return 400
}

func (o *CloudRegistrationAzureUpdateRegistrationBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /cloud-security-registration-azure/entities/registrations/v1][%d] cloudRegistrationAzureUpdateRegistrationBadRequest  %+v", 400, o.Payload)
}

func (o *CloudRegistrationAzureUpdateRegistrationBadRequest) String() string {
	return fmt.Sprintf("[PATCH /cloud-security-registration-azure/entities/registrations/v1][%d] cloudRegistrationAzureUpdateRegistrationBadRequest  %+v", 400, o.Payload)
}

func (o *CloudRegistrationAzureUpdateRegistrationBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CloudRegistrationAzureUpdateRegistrationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloudRegistrationAzureUpdateRegistrationForbidden creates a CloudRegistrationAzureUpdateRegistrationForbidden with default headers values
func NewCloudRegistrationAzureUpdateRegistrationForbidden() *CloudRegistrationAzureUpdateRegistrationForbidden {
	return &CloudRegistrationAzureUpdateRegistrationForbidden{}
}

/*
CloudRegistrationAzureUpdateRegistrationForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CloudRegistrationAzureUpdateRegistrationForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this cloud registration azure update registration forbidden response has a 2xx status code
func (o *CloudRegistrationAzureUpdateRegistrationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cloud registration azure update registration forbidden response has a 3xx status code
func (o *CloudRegistrationAzureUpdateRegistrationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cloud registration azure update registration forbidden response has a 4xx status code
func (o *CloudRegistrationAzureUpdateRegistrationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cloud registration azure update registration forbidden response has a 5xx status code
func (o *CloudRegistrationAzureUpdateRegistrationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cloud registration azure update registration forbidden response a status code equal to that given
func (o *CloudRegistrationAzureUpdateRegistrationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the cloud registration azure update registration forbidden response
func (o *CloudRegistrationAzureUpdateRegistrationForbidden) Code() int {
	return 403
}

func (o *CloudRegistrationAzureUpdateRegistrationForbidden) Error() string {
	return fmt.Sprintf("[PATCH /cloud-security-registration-azure/entities/registrations/v1][%d] cloudRegistrationAzureUpdateRegistrationForbidden  %+v", 403, o.Payload)
}

func (o *CloudRegistrationAzureUpdateRegistrationForbidden) String() string {
	return fmt.Sprintf("[PATCH /cloud-security-registration-azure/entities/registrations/v1][%d] cloudRegistrationAzureUpdateRegistrationForbidden  %+v", 403, o.Payload)
}

func (o *CloudRegistrationAzureUpdateRegistrationForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CloudRegistrationAzureUpdateRegistrationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloudRegistrationAzureUpdateRegistrationNotFound creates a CloudRegistrationAzureUpdateRegistrationNotFound with default headers values
func NewCloudRegistrationAzureUpdateRegistrationNotFound() *CloudRegistrationAzureUpdateRegistrationNotFound {
	return &CloudRegistrationAzureUpdateRegistrationNotFound{}
}

/*
CloudRegistrationAzureUpdateRegistrationNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CloudRegistrationAzureUpdateRegistrationNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this cloud registration azure update registration not found response has a 2xx status code
func (o *CloudRegistrationAzureUpdateRegistrationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cloud registration azure update registration not found response has a 3xx status code
func (o *CloudRegistrationAzureUpdateRegistrationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cloud registration azure update registration not found response has a 4xx status code
func (o *CloudRegistrationAzureUpdateRegistrationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this cloud registration azure update registration not found response has a 5xx status code
func (o *CloudRegistrationAzureUpdateRegistrationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this cloud registration azure update registration not found response a status code equal to that given
func (o *CloudRegistrationAzureUpdateRegistrationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the cloud registration azure update registration not found response
func (o *CloudRegistrationAzureUpdateRegistrationNotFound) Code() int {
	return 404
}

func (o *CloudRegistrationAzureUpdateRegistrationNotFound) Error() string {
	return fmt.Sprintf("[PATCH /cloud-security-registration-azure/entities/registrations/v1][%d] cloudRegistrationAzureUpdateRegistrationNotFound  %+v", 404, o.Payload)
}

func (o *CloudRegistrationAzureUpdateRegistrationNotFound) String() string {
	return fmt.Sprintf("[PATCH /cloud-security-registration-azure/entities/registrations/v1][%d] cloudRegistrationAzureUpdateRegistrationNotFound  %+v", 404, o.Payload)
}

func (o *CloudRegistrationAzureUpdateRegistrationNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CloudRegistrationAzureUpdateRegistrationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloudRegistrationAzureUpdateRegistrationConflict creates a CloudRegistrationAzureUpdateRegistrationConflict with default headers values
func NewCloudRegistrationAzureUpdateRegistrationConflict() *CloudRegistrationAzureUpdateRegistrationConflict {
	return &CloudRegistrationAzureUpdateRegistrationConflict{}
}

/*
CloudRegistrationAzureUpdateRegistrationConflict describes a response with status code 409, with default header values.

Conflict
*/
type CloudRegistrationAzureUpdateRegistrationConflict struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this cloud registration azure update registration conflict response has a 2xx status code
func (o *CloudRegistrationAzureUpdateRegistrationConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cloud registration azure update registration conflict response has a 3xx status code
func (o *CloudRegistrationAzureUpdateRegistrationConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cloud registration azure update registration conflict response has a 4xx status code
func (o *CloudRegistrationAzureUpdateRegistrationConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this cloud registration azure update registration conflict response has a 5xx status code
func (o *CloudRegistrationAzureUpdateRegistrationConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this cloud registration azure update registration conflict response a status code equal to that given
func (o *CloudRegistrationAzureUpdateRegistrationConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the cloud registration azure update registration conflict response
func (o *CloudRegistrationAzureUpdateRegistrationConflict) Code() int {
	return 409
}

func (o *CloudRegistrationAzureUpdateRegistrationConflict) Error() string {
	return fmt.Sprintf("[PATCH /cloud-security-registration-azure/entities/registrations/v1][%d] cloudRegistrationAzureUpdateRegistrationConflict  %+v", 409, o.Payload)
}

func (o *CloudRegistrationAzureUpdateRegistrationConflict) String() string {
	return fmt.Sprintf("[PATCH /cloud-security-registration-azure/entities/registrations/v1][%d] cloudRegistrationAzureUpdateRegistrationConflict  %+v", 409, o.Payload)
}

func (o *CloudRegistrationAzureUpdateRegistrationConflict) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CloudRegistrationAzureUpdateRegistrationConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloudRegistrationAzureUpdateRegistrationTooManyRequests creates a CloudRegistrationAzureUpdateRegistrationTooManyRequests with default headers values
func NewCloudRegistrationAzureUpdateRegistrationTooManyRequests() *CloudRegistrationAzureUpdateRegistrationTooManyRequests {
	return &CloudRegistrationAzureUpdateRegistrationTooManyRequests{}
}

/*
CloudRegistrationAzureUpdateRegistrationTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CloudRegistrationAzureUpdateRegistrationTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this cloud registration azure update registration too many requests response has a 2xx status code
func (o *CloudRegistrationAzureUpdateRegistrationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cloud registration azure update registration too many requests response has a 3xx status code
func (o *CloudRegistrationAzureUpdateRegistrationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cloud registration azure update registration too many requests response has a 4xx status code
func (o *CloudRegistrationAzureUpdateRegistrationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this cloud registration azure update registration too many requests response has a 5xx status code
func (o *CloudRegistrationAzureUpdateRegistrationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this cloud registration azure update registration too many requests response a status code equal to that given
func (o *CloudRegistrationAzureUpdateRegistrationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the cloud registration azure update registration too many requests response
func (o *CloudRegistrationAzureUpdateRegistrationTooManyRequests) Code() int {
	return 429
}

func (o *CloudRegistrationAzureUpdateRegistrationTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /cloud-security-registration-azure/entities/registrations/v1][%d] cloudRegistrationAzureUpdateRegistrationTooManyRequests  %+v", 429, o.Payload)
}

func (o *CloudRegistrationAzureUpdateRegistrationTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /cloud-security-registration-azure/entities/registrations/v1][%d] cloudRegistrationAzureUpdateRegistrationTooManyRequests  %+v", 429, o.Payload)
}

func (o *CloudRegistrationAzureUpdateRegistrationTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CloudRegistrationAzureUpdateRegistrationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCloudRegistrationAzureUpdateRegistrationInternalServerError creates a CloudRegistrationAzureUpdateRegistrationInternalServerError with default headers values
func NewCloudRegistrationAzureUpdateRegistrationInternalServerError() *CloudRegistrationAzureUpdateRegistrationInternalServerError {
	return &CloudRegistrationAzureUpdateRegistrationInternalServerError{}
}

/*
CloudRegistrationAzureUpdateRegistrationInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CloudRegistrationAzureUpdateRegistrationInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this cloud registration azure update registration internal server error response has a 2xx status code
func (o *CloudRegistrationAzureUpdateRegistrationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cloud registration azure update registration internal server error response has a 3xx status code
func (o *CloudRegistrationAzureUpdateRegistrationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cloud registration azure update registration internal server error response has a 4xx status code
func (o *CloudRegistrationAzureUpdateRegistrationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cloud registration azure update registration internal server error response has a 5xx status code
func (o *CloudRegistrationAzureUpdateRegistrationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cloud registration azure update registration internal server error response a status code equal to that given
func (o *CloudRegistrationAzureUpdateRegistrationInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the cloud registration azure update registration internal server error response
func (o *CloudRegistrationAzureUpdateRegistrationInternalServerError) Code() int {
	return 500
}

func (o *CloudRegistrationAzureUpdateRegistrationInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /cloud-security-registration-azure/entities/registrations/v1][%d] cloudRegistrationAzureUpdateRegistrationInternalServerError  %+v", 500, o.Payload)
}

func (o *CloudRegistrationAzureUpdateRegistrationInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /cloud-security-registration-azure/entities/registrations/v1][%d] cloudRegistrationAzureUpdateRegistrationInternalServerError  %+v", 500, o.Payload)
}

func (o *CloudRegistrationAzureUpdateRegistrationInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CloudRegistrationAzureUpdateRegistrationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
