// Code generated by go-swagger; DO NOT EDIT.

package cloud_azure_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCloudRegistrationAzureGetSubscriptionCombinedParams creates a new CloudRegistrationAzureGetSubscriptionCombinedParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCloudRegistrationAzureGetSubscriptionCombinedParams() *CloudRegistrationAzureGetSubscriptionCombinedParams {
	return &CloudRegistrationAzureGetSubscriptionCombinedParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCloudRegistrationAzureGetSubscriptionCombinedParamsWithTimeout creates a new CloudRegistrationAzureGetSubscriptionCombinedParams object
// with the ability to set a timeout on a request.
func NewCloudRegistrationAzureGetSubscriptionCombinedParamsWithTimeout(timeout time.Duration) *CloudRegistrationAzureGetSubscriptionCombinedParams {
	return &CloudRegistrationAzureGetSubscriptionCombinedParams{
		timeout: timeout,
	}
}

// NewCloudRegistrationAzureGetSubscriptionCombinedParamsWithContext creates a new CloudRegistrationAzureGetSubscriptionCombinedParams object
// with the ability to set a context for a request.
func NewCloudRegistrationAzureGetSubscriptionCombinedParamsWithContext(ctx context.Context) *CloudRegistrationAzureGetSubscriptionCombinedParams {
	return &CloudRegistrationAzureGetSubscriptionCombinedParams{
		Context: ctx,
	}
}

// NewCloudRegistrationAzureGetSubscriptionCombinedParamsWithHTTPClient creates a new CloudRegistrationAzureGetSubscriptionCombinedParams object
// with the ability to set a custom HTTPClient for a request.
func NewCloudRegistrationAzureGetSubscriptionCombinedParamsWithHTTPClient(client *http.Client) *CloudRegistrationAzureGetSubscriptionCombinedParams {
	return &CloudRegistrationAzureGetSubscriptionCombinedParams{
		HTTPClient: client,
	}
}

/*
CloudRegistrationAzureGetSubscriptionCombinedParams contains all the parameters to send to the API endpoint

	for the cloud registration azure get subscription combined operation.

	Typically these are written to a http.Request.
*/
type CloudRegistrationAzureGetSubscriptionCombinedParams struct {

	/* XCSCUSTID.

	   Customer ID
	*/
	XCSCUSTID string

	/* Filter.

	   FQL (Falcon Query Language) string for filtering results. Allowed filters are Set{management_group_id, management_group_name, account_type, created_at, updated_at, subscription_id, subscription_name, status, csp_events}
	*/
	Filter *string

	/* Limit.

	   Maximum number of records to return (default: 100, max: 1000)

	   Default: 100
	*/
	Limit *int64

	/* NextToken.

	   Token for cursor-based pagination. Currently unsupported.
	*/
	NextToken *string

	/* Offset.

	   Starting index of result
	*/
	Offset *int64

	/* Sort.

	   Field and direction for sorting results - allowed sort fields are Set{updated_at, subscription_id, subscription_name, status, csp_events, management_group_id, management_group_name, account_type, created_at}
	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cloud registration azure get subscription combined params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CloudRegistrationAzureGetSubscriptionCombinedParams) WithDefaults() *CloudRegistrationAzureGetSubscriptionCombinedParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cloud registration azure get subscription combined params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CloudRegistrationAzureGetSubscriptionCombinedParams) SetDefaults() {
	var (
		limitDefault = int64(100)

		offsetDefault = int64(0)
	)

	val := CloudRegistrationAzureGetSubscriptionCombinedParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the cloud registration azure get subscription combined params
func (o *CloudRegistrationAzureGetSubscriptionCombinedParams) WithTimeout(timeout time.Duration) *CloudRegistrationAzureGetSubscriptionCombinedParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cloud registration azure get subscription combined params
func (o *CloudRegistrationAzureGetSubscriptionCombinedParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cloud registration azure get subscription combined params
func (o *CloudRegistrationAzureGetSubscriptionCombinedParams) WithContext(ctx context.Context) *CloudRegistrationAzureGetSubscriptionCombinedParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cloud registration azure get subscription combined params
func (o *CloudRegistrationAzureGetSubscriptionCombinedParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cloud registration azure get subscription combined params
func (o *CloudRegistrationAzureGetSubscriptionCombinedParams) WithHTTPClient(client *http.Client) *CloudRegistrationAzureGetSubscriptionCombinedParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cloud registration azure get subscription combined params
func (o *CloudRegistrationAzureGetSubscriptionCombinedParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXCSCUSTID adds the xCSCUSTID to the cloud registration azure get subscription combined params
func (o *CloudRegistrationAzureGetSubscriptionCombinedParams) WithXCSCUSTID(xCSCUSTID string) *CloudRegistrationAzureGetSubscriptionCombinedParams {
	o.SetXCSCUSTID(xCSCUSTID)
	return o
}

// SetXCSCUSTID adds the xCSCUSTId to the cloud registration azure get subscription combined params
func (o *CloudRegistrationAzureGetSubscriptionCombinedParams) SetXCSCUSTID(xCSCUSTID string) {
	o.XCSCUSTID = xCSCUSTID
}

// WithFilter adds the filter to the cloud registration azure get subscription combined params
func (o *CloudRegistrationAzureGetSubscriptionCombinedParams) WithFilter(filter *string) *CloudRegistrationAzureGetSubscriptionCombinedParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the cloud registration azure get subscription combined params
func (o *CloudRegistrationAzureGetSubscriptionCombinedParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithLimit adds the limit to the cloud registration azure get subscription combined params
func (o *CloudRegistrationAzureGetSubscriptionCombinedParams) WithLimit(limit *int64) *CloudRegistrationAzureGetSubscriptionCombinedParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the cloud registration azure get subscription combined params
func (o *CloudRegistrationAzureGetSubscriptionCombinedParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithNextToken adds the nextToken to the cloud registration azure get subscription combined params
func (o *CloudRegistrationAzureGetSubscriptionCombinedParams) WithNextToken(nextToken *string) *CloudRegistrationAzureGetSubscriptionCombinedParams {
	o.SetNextToken(nextToken)
	return o
}

// SetNextToken adds the nextToken to the cloud registration azure get subscription combined params
func (o *CloudRegistrationAzureGetSubscriptionCombinedParams) SetNextToken(nextToken *string) {
	o.NextToken = nextToken
}

// WithOffset adds the offset to the cloud registration azure get subscription combined params
func (o *CloudRegistrationAzureGetSubscriptionCombinedParams) WithOffset(offset *int64) *CloudRegistrationAzureGetSubscriptionCombinedParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the cloud registration azure get subscription combined params
func (o *CloudRegistrationAzureGetSubscriptionCombinedParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithSort adds the sort to the cloud registration azure get subscription combined params
func (o *CloudRegistrationAzureGetSubscriptionCombinedParams) WithSort(sort *string) *CloudRegistrationAzureGetSubscriptionCombinedParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the cloud registration azure get subscription combined params
func (o *CloudRegistrationAzureGetSubscriptionCombinedParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *CloudRegistrationAzureGetSubscriptionCombinedParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-CS-CUSTID
	if err := r.SetHeaderParam("X-CS-CUSTID", o.XCSCUSTID); err != nil {
		return err
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.NextToken != nil {

		// query param next_token
		var qrNextToken string

		if o.NextToken != nil {
			qrNextToken = *o.NextToken
		}
		qNextToken := qrNextToken
		if qNextToken != "" {

			if err := r.SetQueryParam("next_token", qNextToken); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
