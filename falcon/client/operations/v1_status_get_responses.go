// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// V1StatusGetReader is a Reader for the V1StatusGet structure.
type V1StatusGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1StatusGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1StatusGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1StatusGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1StatusGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewV1StatusGetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1StatusGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewV1StatusGetBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewV1StatusGetGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /pluginsonprem/entities/host-configs/v1] v1.status.get", response, response.Code())
	}
}

// NewV1StatusGetOK creates a V1StatusGetOK with default headers values
func NewV1StatusGetOK() *V1StatusGetOK {
	return &V1StatusGetOK{}
}

/*
V1StatusGetOK describes a response with status code 200, with default header values.

OK
*/
type V1StatusGetOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.PluginsonpremapiOnPremGetHostConfigsResponse
}

// IsSuccess returns true when this v1 status get o k response has a 2xx status code
func (o *V1StatusGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 status get o k response has a 3xx status code
func (o *V1StatusGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 status get o k response has a 4xx status code
func (o *V1StatusGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 status get o k response has a 5xx status code
func (o *V1StatusGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 status get o k response a status code equal to that given
func (o *V1StatusGetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 status get o k response
func (o *V1StatusGetOK) Code() int {
	return 200
}

func (o *V1StatusGetOK) Error() string {
	return fmt.Sprintf("[GET /pluginsonprem/entities/host-configs/v1][%d] v1StatusGetOK  %+v", 200, o.Payload)
}

func (o *V1StatusGetOK) String() string {
	return fmt.Sprintf("[GET /pluginsonprem/entities/host-configs/v1][%d] v1StatusGetOK  %+v", 200, o.Payload)
}

func (o *V1StatusGetOK) GetPayload() *models.PluginsonpremapiOnPremGetHostConfigsResponse {
	return o.Payload
}

func (o *V1StatusGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.PluginsonpremapiOnPremGetHostConfigsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1StatusGetBadRequest creates a V1StatusGetBadRequest with default headers values
func NewV1StatusGetBadRequest() *V1StatusGetBadRequest {
	return &V1StatusGetBadRequest{}
}

/*
V1StatusGetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1StatusGetBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.PluginsonpremapiOnPremGetHostConfigsResponse
}

// IsSuccess returns true when this v1 status get bad request response has a 2xx status code
func (o *V1StatusGetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 status get bad request response has a 3xx status code
func (o *V1StatusGetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 status get bad request response has a 4xx status code
func (o *V1StatusGetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 status get bad request response has a 5xx status code
func (o *V1StatusGetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 status get bad request response a status code equal to that given
func (o *V1StatusGetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 status get bad request response
func (o *V1StatusGetBadRequest) Code() int {
	return 400
}

func (o *V1StatusGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /pluginsonprem/entities/host-configs/v1][%d] v1StatusGetBadRequest  %+v", 400, o.Payload)
}

func (o *V1StatusGetBadRequest) String() string {
	return fmt.Sprintf("[GET /pluginsonprem/entities/host-configs/v1][%d] v1StatusGetBadRequest  %+v", 400, o.Payload)
}

func (o *V1StatusGetBadRequest) GetPayload() *models.PluginsonpremapiOnPremGetHostConfigsResponse {
	return o.Payload
}

func (o *V1StatusGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.PluginsonpremapiOnPremGetHostConfigsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1StatusGetForbidden creates a V1StatusGetForbidden with default headers values
func NewV1StatusGetForbidden() *V1StatusGetForbidden {
	return &V1StatusGetForbidden{}
}

/*
V1StatusGetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1StatusGetForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this v1 status get forbidden response has a 2xx status code
func (o *V1StatusGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 status get forbidden response has a 3xx status code
func (o *V1StatusGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 status get forbidden response has a 4xx status code
func (o *V1StatusGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 status get forbidden response has a 5xx status code
func (o *V1StatusGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 status get forbidden response a status code equal to that given
func (o *V1StatusGetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 status get forbidden response
func (o *V1StatusGetForbidden) Code() int {
	return 403
}

func (o *V1StatusGetForbidden) Error() string {
	return fmt.Sprintf("[GET /pluginsonprem/entities/host-configs/v1][%d] v1StatusGetForbidden  %+v", 403, o.Payload)
}

func (o *V1StatusGetForbidden) String() string {
	return fmt.Sprintf("[GET /pluginsonprem/entities/host-configs/v1][%d] v1StatusGetForbidden  %+v", 403, o.Payload)
}

func (o *V1StatusGetForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *V1StatusGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1StatusGetTooManyRequests creates a V1StatusGetTooManyRequests with default headers values
func NewV1StatusGetTooManyRequests() *V1StatusGetTooManyRequests {
	return &V1StatusGetTooManyRequests{}
}

/*
V1StatusGetTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type V1StatusGetTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.PluginsonpremapiOnPremGetHostConfigsResponse
}

// IsSuccess returns true when this v1 status get too many requests response has a 2xx status code
func (o *V1StatusGetTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 status get too many requests response has a 3xx status code
func (o *V1StatusGetTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 status get too many requests response has a 4xx status code
func (o *V1StatusGetTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 status get too many requests response has a 5xx status code
func (o *V1StatusGetTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 status get too many requests response a status code equal to that given
func (o *V1StatusGetTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the v1 status get too many requests response
func (o *V1StatusGetTooManyRequests) Code() int {
	return 429
}

func (o *V1StatusGetTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /pluginsonprem/entities/host-configs/v1][%d] v1StatusGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *V1StatusGetTooManyRequests) String() string {
	return fmt.Sprintf("[GET /pluginsonprem/entities/host-configs/v1][%d] v1StatusGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *V1StatusGetTooManyRequests) GetPayload() *models.PluginsonpremapiOnPremGetHostConfigsResponse {
	return o.Payload
}

func (o *V1StatusGetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.PluginsonpremapiOnPremGetHostConfigsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1StatusGetInternalServerError creates a V1StatusGetInternalServerError with default headers values
func NewV1StatusGetInternalServerError() *V1StatusGetInternalServerError {
	return &V1StatusGetInternalServerError{}
}

/*
V1StatusGetInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1StatusGetInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.PluginsonpremapiOnPremGetHostConfigsResponse
}

// IsSuccess returns true when this v1 status get internal server error response has a 2xx status code
func (o *V1StatusGetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 status get internal server error response has a 3xx status code
func (o *V1StatusGetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 status get internal server error response has a 4xx status code
func (o *V1StatusGetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 status get internal server error response has a 5xx status code
func (o *V1StatusGetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 status get internal server error response a status code equal to that given
func (o *V1StatusGetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 status get internal server error response
func (o *V1StatusGetInternalServerError) Code() int {
	return 500
}

func (o *V1StatusGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /pluginsonprem/entities/host-configs/v1][%d] v1StatusGetInternalServerError  %+v", 500, o.Payload)
}

func (o *V1StatusGetInternalServerError) String() string {
	return fmt.Sprintf("[GET /pluginsonprem/entities/host-configs/v1][%d] v1StatusGetInternalServerError  %+v", 500, o.Payload)
}

func (o *V1StatusGetInternalServerError) GetPayload() *models.PluginsonpremapiOnPremGetHostConfigsResponse {
	return o.Payload
}

func (o *V1StatusGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.PluginsonpremapiOnPremGetHostConfigsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1StatusGetBadGateway creates a V1StatusGetBadGateway with default headers values
func NewV1StatusGetBadGateway() *V1StatusGetBadGateway {
	return &V1StatusGetBadGateway{}
}

/*
V1StatusGetBadGateway describes a response with status code 502, with default header values.

Bad Gateway
*/
type V1StatusGetBadGateway struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.PluginsonpremapiOnPremGetHostConfigsResponse
}

// IsSuccess returns true when this v1 status get bad gateway response has a 2xx status code
func (o *V1StatusGetBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 status get bad gateway response has a 3xx status code
func (o *V1StatusGetBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 status get bad gateway response has a 4xx status code
func (o *V1StatusGetBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 status get bad gateway response has a 5xx status code
func (o *V1StatusGetBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 status get bad gateway response a status code equal to that given
func (o *V1StatusGetBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the v1 status get bad gateway response
func (o *V1StatusGetBadGateway) Code() int {
	return 502
}

func (o *V1StatusGetBadGateway) Error() string {
	return fmt.Sprintf("[GET /pluginsonprem/entities/host-configs/v1][%d] v1StatusGetBadGateway  %+v", 502, o.Payload)
}

func (o *V1StatusGetBadGateway) String() string {
	return fmt.Sprintf("[GET /pluginsonprem/entities/host-configs/v1][%d] v1StatusGetBadGateway  %+v", 502, o.Payload)
}

func (o *V1StatusGetBadGateway) GetPayload() *models.PluginsonpremapiOnPremGetHostConfigsResponse {
	return o.Payload
}

func (o *V1StatusGetBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.PluginsonpremapiOnPremGetHostConfigsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1StatusGetGatewayTimeout creates a V1StatusGetGatewayTimeout with default headers values
func NewV1StatusGetGatewayTimeout() *V1StatusGetGatewayTimeout {
	return &V1StatusGetGatewayTimeout{}
}

/*
V1StatusGetGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout
*/
type V1StatusGetGatewayTimeout struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.PluginsonpremapiOnPremGetHostConfigsResponse
}

// IsSuccess returns true when this v1 status get gateway timeout response has a 2xx status code
func (o *V1StatusGetGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 status get gateway timeout response has a 3xx status code
func (o *V1StatusGetGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 status get gateway timeout response has a 4xx status code
func (o *V1StatusGetGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 status get gateway timeout response has a 5xx status code
func (o *V1StatusGetGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 status get gateway timeout response a status code equal to that given
func (o *V1StatusGetGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the v1 status get gateway timeout response
func (o *V1StatusGetGatewayTimeout) Code() int {
	return 504
}

func (o *V1StatusGetGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /pluginsonprem/entities/host-configs/v1][%d] v1StatusGetGatewayTimeout  %+v", 504, o.Payload)
}

func (o *V1StatusGetGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /pluginsonprem/entities/host-configs/v1][%d] v1StatusGetGatewayTimeout  %+v", 504, o.Payload)
}

func (o *V1StatusGetGatewayTimeout) GetPayload() *models.PluginsonpremapiOnPremGetHostConfigsResponse {
	return o.Payload
}

func (o *V1StatusGetGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.PluginsonpremapiOnPremGetHostConfigsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
