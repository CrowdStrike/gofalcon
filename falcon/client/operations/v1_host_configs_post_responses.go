// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// V1HostConfigsPostReader is a Reader for the V1HostConfigsPost structure.
type V1HostConfigsPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1HostConfigsPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1HostConfigsPostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewV1HostConfigsPostAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1HostConfigsPostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1HostConfigsPostForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewV1HostConfigsPostTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1HostConfigsPostInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /pluginsonprem/entities/host-configs/v1] v1.host-configs.post", response, response.Code())
	}
}

// NewV1HostConfigsPostOK creates a V1HostConfigsPostOK with default headers values
func NewV1HostConfigsPostOK() *V1HostConfigsPostOK {
	return &V1HostConfigsPostOK{}
}

/*
V1HostConfigsPostOK describes a response with status code 200, with default header values.

OK
*/
type V1HostConfigsPostOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.PluginsonpremapiOnPremConfigureResponse
}

// IsSuccess returns true when this v1 host configs post o k response has a 2xx status code
func (o *V1HostConfigsPostOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 host configs post o k response has a 3xx status code
func (o *V1HostConfigsPostOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 host configs post o k response has a 4xx status code
func (o *V1HostConfigsPostOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 host configs post o k response has a 5xx status code
func (o *V1HostConfigsPostOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 host configs post o k response a status code equal to that given
func (o *V1HostConfigsPostOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 host configs post o k response
func (o *V1HostConfigsPostOK) Code() int {
	return 200
}

func (o *V1HostConfigsPostOK) Error() string {
	return fmt.Sprintf("[POST /pluginsonprem/entities/host-configs/v1][%d] v1HostConfigsPostOK  %+v", 200, o.Payload)
}

func (o *V1HostConfigsPostOK) String() string {
	return fmt.Sprintf("[POST /pluginsonprem/entities/host-configs/v1][%d] v1HostConfigsPostOK  %+v", 200, o.Payload)
}

func (o *V1HostConfigsPostOK) GetPayload() *models.PluginsonpremapiOnPremConfigureResponse {
	return o.Payload
}

func (o *V1HostConfigsPostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.PluginsonpremapiOnPremConfigureResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostConfigsPostAccepted creates a V1HostConfigsPostAccepted with default headers values
func NewV1HostConfigsPostAccepted() *V1HostConfigsPostAccepted {
	return &V1HostConfigsPostAccepted{}
}

/*
V1HostConfigsPostAccepted describes a response with status code 202, with default header values.

Accepted
*/
type V1HostConfigsPostAccepted struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.PluginsonpremapiOnPremConfigureResponse
}

// IsSuccess returns true when this v1 host configs post accepted response has a 2xx status code
func (o *V1HostConfigsPostAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 host configs post accepted response has a 3xx status code
func (o *V1HostConfigsPostAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 host configs post accepted response has a 4xx status code
func (o *V1HostConfigsPostAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 host configs post accepted response has a 5xx status code
func (o *V1HostConfigsPostAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 host configs post accepted response a status code equal to that given
func (o *V1HostConfigsPostAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the v1 host configs post accepted response
func (o *V1HostConfigsPostAccepted) Code() int {
	return 202
}

func (o *V1HostConfigsPostAccepted) Error() string {
	return fmt.Sprintf("[POST /pluginsonprem/entities/host-configs/v1][%d] v1HostConfigsPostAccepted  %+v", 202, o.Payload)
}

func (o *V1HostConfigsPostAccepted) String() string {
	return fmt.Sprintf("[POST /pluginsonprem/entities/host-configs/v1][%d] v1HostConfigsPostAccepted  %+v", 202, o.Payload)
}

func (o *V1HostConfigsPostAccepted) GetPayload() *models.PluginsonpremapiOnPremConfigureResponse {
	return o.Payload
}

func (o *V1HostConfigsPostAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.PluginsonpremapiOnPremConfigureResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostConfigsPostBadRequest creates a V1HostConfigsPostBadRequest with default headers values
func NewV1HostConfigsPostBadRequest() *V1HostConfigsPostBadRequest {
	return &V1HostConfigsPostBadRequest{}
}

/*
V1HostConfigsPostBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1HostConfigsPostBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.PluginsonpremapiOnPremConfigureResponse
}

// IsSuccess returns true when this v1 host configs post bad request response has a 2xx status code
func (o *V1HostConfigsPostBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 host configs post bad request response has a 3xx status code
func (o *V1HostConfigsPostBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 host configs post bad request response has a 4xx status code
func (o *V1HostConfigsPostBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 host configs post bad request response has a 5xx status code
func (o *V1HostConfigsPostBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 host configs post bad request response a status code equal to that given
func (o *V1HostConfigsPostBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 host configs post bad request response
func (o *V1HostConfigsPostBadRequest) Code() int {
	return 400
}

func (o *V1HostConfigsPostBadRequest) Error() string {
	return fmt.Sprintf("[POST /pluginsonprem/entities/host-configs/v1][%d] v1HostConfigsPostBadRequest  %+v", 400, o.Payload)
}

func (o *V1HostConfigsPostBadRequest) String() string {
	return fmt.Sprintf("[POST /pluginsonprem/entities/host-configs/v1][%d] v1HostConfigsPostBadRequest  %+v", 400, o.Payload)
}

func (o *V1HostConfigsPostBadRequest) GetPayload() *models.PluginsonpremapiOnPremConfigureResponse {
	return o.Payload
}

func (o *V1HostConfigsPostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.PluginsonpremapiOnPremConfigureResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostConfigsPostForbidden creates a V1HostConfigsPostForbidden with default headers values
func NewV1HostConfigsPostForbidden() *V1HostConfigsPostForbidden {
	return &V1HostConfigsPostForbidden{}
}

/*
V1HostConfigsPostForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1HostConfigsPostForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this v1 host configs post forbidden response has a 2xx status code
func (o *V1HostConfigsPostForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 host configs post forbidden response has a 3xx status code
func (o *V1HostConfigsPostForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 host configs post forbidden response has a 4xx status code
func (o *V1HostConfigsPostForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 host configs post forbidden response has a 5xx status code
func (o *V1HostConfigsPostForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 host configs post forbidden response a status code equal to that given
func (o *V1HostConfigsPostForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 host configs post forbidden response
func (o *V1HostConfigsPostForbidden) Code() int {
	return 403
}

func (o *V1HostConfigsPostForbidden) Error() string {
	return fmt.Sprintf("[POST /pluginsonprem/entities/host-configs/v1][%d] v1HostConfigsPostForbidden  %+v", 403, o.Payload)
}

func (o *V1HostConfigsPostForbidden) String() string {
	return fmt.Sprintf("[POST /pluginsonprem/entities/host-configs/v1][%d] v1HostConfigsPostForbidden  %+v", 403, o.Payload)
}

func (o *V1HostConfigsPostForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *V1HostConfigsPostForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostConfigsPostTooManyRequests creates a V1HostConfigsPostTooManyRequests with default headers values
func NewV1HostConfigsPostTooManyRequests() *V1HostConfigsPostTooManyRequests {
	return &V1HostConfigsPostTooManyRequests{}
}

/*
V1HostConfigsPostTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type V1HostConfigsPostTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this v1 host configs post too many requests response has a 2xx status code
func (o *V1HostConfigsPostTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 host configs post too many requests response has a 3xx status code
func (o *V1HostConfigsPostTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 host configs post too many requests response has a 4xx status code
func (o *V1HostConfigsPostTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 host configs post too many requests response has a 5xx status code
func (o *V1HostConfigsPostTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 host configs post too many requests response a status code equal to that given
func (o *V1HostConfigsPostTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the v1 host configs post too many requests response
func (o *V1HostConfigsPostTooManyRequests) Code() int {
	return 429
}

func (o *V1HostConfigsPostTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /pluginsonprem/entities/host-configs/v1][%d] v1HostConfigsPostTooManyRequests  %+v", 429, o.Payload)
}

func (o *V1HostConfigsPostTooManyRequests) String() string {
	return fmt.Sprintf("[POST /pluginsonprem/entities/host-configs/v1][%d] v1HostConfigsPostTooManyRequests  %+v", 429, o.Payload)
}

func (o *V1HostConfigsPostTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *V1HostConfigsPostTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostConfigsPostInternalServerError creates a V1HostConfigsPostInternalServerError with default headers values
func NewV1HostConfigsPostInternalServerError() *V1HostConfigsPostInternalServerError {
	return &V1HostConfigsPostInternalServerError{}
}

/*
V1HostConfigsPostInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1HostConfigsPostInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.PluginsonpremapiOnPremConfigureResponse
}

// IsSuccess returns true when this v1 host configs post internal server error response has a 2xx status code
func (o *V1HostConfigsPostInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 host configs post internal server error response has a 3xx status code
func (o *V1HostConfigsPostInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 host configs post internal server error response has a 4xx status code
func (o *V1HostConfigsPostInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 host configs post internal server error response has a 5xx status code
func (o *V1HostConfigsPostInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 host configs post internal server error response a status code equal to that given
func (o *V1HostConfigsPostInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 host configs post internal server error response
func (o *V1HostConfigsPostInternalServerError) Code() int {
	return 500
}

func (o *V1HostConfigsPostInternalServerError) Error() string {
	return fmt.Sprintf("[POST /pluginsonprem/entities/host-configs/v1][%d] v1HostConfigsPostInternalServerError  %+v", 500, o.Payload)
}

func (o *V1HostConfigsPostInternalServerError) String() string {
	return fmt.Sprintf("[POST /pluginsonprem/entities/host-configs/v1][%d] v1HostConfigsPostInternalServerError  %+v", 500, o.Payload)
}

func (o *V1HostConfigsPostInternalServerError) GetPayload() *models.PluginsonpremapiOnPremConfigureResponse {
	return o.Payload
}

func (o *V1HostConfigsPostInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.PluginsonpremapiOnPremConfigureResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
