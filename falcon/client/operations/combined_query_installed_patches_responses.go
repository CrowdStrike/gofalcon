// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CombinedQueryInstalledPatchesReader is a Reader for the CombinedQueryInstalledPatches structure.
type CombinedQueryInstalledPatchesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CombinedQueryInstalledPatchesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCombinedQueryInstalledPatchesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCombinedQueryInstalledPatchesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCombinedQueryInstalledPatchesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCombinedQueryInstalledPatchesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCombinedQueryInstalledPatchesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCombinedQueryInstalledPatchesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /spotlight/combined/installed-patches/v1] combinedQueryInstalledPatches", response, response.Code())
	}
}

// NewCombinedQueryInstalledPatchesOK creates a CombinedQueryInstalledPatchesOK with default headers values
func NewCombinedQueryInstalledPatchesOK() *CombinedQueryInstalledPatchesOK {
	return &CombinedQueryInstalledPatchesOK{}
}

/*
CombinedQueryInstalledPatchesOK describes a response with status code 200, with default header values.

OK
*/
type CombinedQueryInstalledPatchesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainSPAPICombinedInstalledPatchesResponse
}

// IsSuccess returns true when this combined query installed patches o k response has a 2xx status code
func (o *CombinedQueryInstalledPatchesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this combined query installed patches o k response has a 3xx status code
func (o *CombinedQueryInstalledPatchesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined query installed patches o k response has a 4xx status code
func (o *CombinedQueryInstalledPatchesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this combined query installed patches o k response has a 5xx status code
func (o *CombinedQueryInstalledPatchesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this combined query installed patches o k response a status code equal to that given
func (o *CombinedQueryInstalledPatchesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the combined query installed patches o k response
func (o *CombinedQueryInstalledPatchesOK) Code() int {
	return 200
}

func (o *CombinedQueryInstalledPatchesOK) Error() string {
	return fmt.Sprintf("[GET /spotlight/combined/installed-patches/v1][%d] combinedQueryInstalledPatchesOK  %+v", 200, o.Payload)
}

func (o *CombinedQueryInstalledPatchesOK) String() string {
	return fmt.Sprintf("[GET /spotlight/combined/installed-patches/v1][%d] combinedQueryInstalledPatchesOK  %+v", 200, o.Payload)
}

func (o *CombinedQueryInstalledPatchesOK) GetPayload() *models.DomainSPAPICombinedInstalledPatchesResponse {
	return o.Payload
}

func (o *CombinedQueryInstalledPatchesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainSPAPICombinedInstalledPatchesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedQueryInstalledPatchesBadRequest creates a CombinedQueryInstalledPatchesBadRequest with default headers values
func NewCombinedQueryInstalledPatchesBadRequest() *CombinedQueryInstalledPatchesBadRequest {
	return &CombinedQueryInstalledPatchesBadRequest{}
}

/*
CombinedQueryInstalledPatchesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CombinedQueryInstalledPatchesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this combined query installed patches bad request response has a 2xx status code
func (o *CombinedQueryInstalledPatchesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined query installed patches bad request response has a 3xx status code
func (o *CombinedQueryInstalledPatchesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined query installed patches bad request response has a 4xx status code
func (o *CombinedQueryInstalledPatchesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this combined query installed patches bad request response has a 5xx status code
func (o *CombinedQueryInstalledPatchesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this combined query installed patches bad request response a status code equal to that given
func (o *CombinedQueryInstalledPatchesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the combined query installed patches bad request response
func (o *CombinedQueryInstalledPatchesBadRequest) Code() int {
	return 400
}

func (o *CombinedQueryInstalledPatchesBadRequest) Error() string {
	return fmt.Sprintf("[GET /spotlight/combined/installed-patches/v1][%d] combinedQueryInstalledPatchesBadRequest  %+v", 400, o.Payload)
}

func (o *CombinedQueryInstalledPatchesBadRequest) String() string {
	return fmt.Sprintf("[GET /spotlight/combined/installed-patches/v1][%d] combinedQueryInstalledPatchesBadRequest  %+v", 400, o.Payload)
}

func (o *CombinedQueryInstalledPatchesBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CombinedQueryInstalledPatchesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedQueryInstalledPatchesForbidden creates a CombinedQueryInstalledPatchesForbidden with default headers values
func NewCombinedQueryInstalledPatchesForbidden() *CombinedQueryInstalledPatchesForbidden {
	return &CombinedQueryInstalledPatchesForbidden{}
}

/*
CombinedQueryInstalledPatchesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CombinedQueryInstalledPatchesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this combined query installed patches forbidden response has a 2xx status code
func (o *CombinedQueryInstalledPatchesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined query installed patches forbidden response has a 3xx status code
func (o *CombinedQueryInstalledPatchesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined query installed patches forbidden response has a 4xx status code
func (o *CombinedQueryInstalledPatchesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this combined query installed patches forbidden response has a 5xx status code
func (o *CombinedQueryInstalledPatchesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this combined query installed patches forbidden response a status code equal to that given
func (o *CombinedQueryInstalledPatchesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the combined query installed patches forbidden response
func (o *CombinedQueryInstalledPatchesForbidden) Code() int {
	return 403
}

func (o *CombinedQueryInstalledPatchesForbidden) Error() string {
	return fmt.Sprintf("[GET /spotlight/combined/installed-patches/v1][%d] combinedQueryInstalledPatchesForbidden  %+v", 403, o.Payload)
}

func (o *CombinedQueryInstalledPatchesForbidden) String() string {
	return fmt.Sprintf("[GET /spotlight/combined/installed-patches/v1][%d] combinedQueryInstalledPatchesForbidden  %+v", 403, o.Payload)
}

func (o *CombinedQueryInstalledPatchesForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CombinedQueryInstalledPatchesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedQueryInstalledPatchesTooManyRequests creates a CombinedQueryInstalledPatchesTooManyRequests with default headers values
func NewCombinedQueryInstalledPatchesTooManyRequests() *CombinedQueryInstalledPatchesTooManyRequests {
	return &CombinedQueryInstalledPatchesTooManyRequests{}
}

/*
CombinedQueryInstalledPatchesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CombinedQueryInstalledPatchesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this combined query installed patches too many requests response has a 2xx status code
func (o *CombinedQueryInstalledPatchesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined query installed patches too many requests response has a 3xx status code
func (o *CombinedQueryInstalledPatchesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined query installed patches too many requests response has a 4xx status code
func (o *CombinedQueryInstalledPatchesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this combined query installed patches too many requests response has a 5xx status code
func (o *CombinedQueryInstalledPatchesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this combined query installed patches too many requests response a status code equal to that given
func (o *CombinedQueryInstalledPatchesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the combined query installed patches too many requests response
func (o *CombinedQueryInstalledPatchesTooManyRequests) Code() int {
	return 429
}

func (o *CombinedQueryInstalledPatchesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /spotlight/combined/installed-patches/v1][%d] combinedQueryInstalledPatchesTooManyRequests  %+v", 429, o.Payload)
}

func (o *CombinedQueryInstalledPatchesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /spotlight/combined/installed-patches/v1][%d] combinedQueryInstalledPatchesTooManyRequests  %+v", 429, o.Payload)
}

func (o *CombinedQueryInstalledPatchesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CombinedQueryInstalledPatchesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedQueryInstalledPatchesInternalServerError creates a CombinedQueryInstalledPatchesInternalServerError with default headers values
func NewCombinedQueryInstalledPatchesInternalServerError() *CombinedQueryInstalledPatchesInternalServerError {
	return &CombinedQueryInstalledPatchesInternalServerError{}
}

/*
CombinedQueryInstalledPatchesInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type CombinedQueryInstalledPatchesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this combined query installed patches internal server error response has a 2xx status code
func (o *CombinedQueryInstalledPatchesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined query installed patches internal server error response has a 3xx status code
func (o *CombinedQueryInstalledPatchesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined query installed patches internal server error response has a 4xx status code
func (o *CombinedQueryInstalledPatchesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this combined query installed patches internal server error response has a 5xx status code
func (o *CombinedQueryInstalledPatchesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this combined query installed patches internal server error response a status code equal to that given
func (o *CombinedQueryInstalledPatchesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the combined query installed patches internal server error response
func (o *CombinedQueryInstalledPatchesInternalServerError) Code() int {
	return 500
}

func (o *CombinedQueryInstalledPatchesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /spotlight/combined/installed-patches/v1][%d] combinedQueryInstalledPatchesInternalServerError  %+v", 500, o.Payload)
}

func (o *CombinedQueryInstalledPatchesInternalServerError) String() string {
	return fmt.Sprintf("[GET /spotlight/combined/installed-patches/v1][%d] combinedQueryInstalledPatchesInternalServerError  %+v", 500, o.Payload)
}

func (o *CombinedQueryInstalledPatchesInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CombinedQueryInstalledPatchesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedQueryInstalledPatchesServiceUnavailable creates a CombinedQueryInstalledPatchesServiceUnavailable with default headers values
func NewCombinedQueryInstalledPatchesServiceUnavailable() *CombinedQueryInstalledPatchesServiceUnavailable {
	return &CombinedQueryInstalledPatchesServiceUnavailable{}
}

/*
CombinedQueryInstalledPatchesServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable
*/
type CombinedQueryInstalledPatchesServiceUnavailable struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainSPAPICombinedInstalledPatchesResponse
}

// IsSuccess returns true when this combined query installed patches service unavailable response has a 2xx status code
func (o *CombinedQueryInstalledPatchesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined query installed patches service unavailable response has a 3xx status code
func (o *CombinedQueryInstalledPatchesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined query installed patches service unavailable response has a 4xx status code
func (o *CombinedQueryInstalledPatchesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this combined query installed patches service unavailable response has a 5xx status code
func (o *CombinedQueryInstalledPatchesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this combined query installed patches service unavailable response a status code equal to that given
func (o *CombinedQueryInstalledPatchesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the combined query installed patches service unavailable response
func (o *CombinedQueryInstalledPatchesServiceUnavailable) Code() int {
	return 503
}

func (o *CombinedQueryInstalledPatchesServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /spotlight/combined/installed-patches/v1][%d] combinedQueryInstalledPatchesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CombinedQueryInstalledPatchesServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /spotlight/combined/installed-patches/v1][%d] combinedQueryInstalledPatchesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CombinedQueryInstalledPatchesServiceUnavailable) GetPayload() *models.DomainSPAPICombinedInstalledPatchesResponse {
	return o.Payload
}

func (o *CombinedQueryInstalledPatchesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainSPAPICombinedInstalledPatchesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
