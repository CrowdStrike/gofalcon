// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetAggregateAppsReader is a Reader for the GetAggregateApps structure.
type GetAggregateAppsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAggregateAppsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAggregateAppsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAggregateAppsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAggregateAppsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAggregateAppsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAggregateAppsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetAggregateAppsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetAggregateAppsOK creates a GetAggregateAppsOK with default headers values
func NewGetAggregateAppsOK() *GetAggregateAppsOK {
	return &GetAggregateAppsOK{}
}

/*
GetAggregateAppsOK describes a response with status code 200, with default header values.

OK
*/
type GetAggregateAppsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.StoreMsaAggregatesResponse
}

// IsSuccess returns true when this get aggregate apps o k response has a 2xx status code
func (o *GetAggregateAppsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get aggregate apps o k response has a 3xx status code
func (o *GetAggregateAppsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get aggregate apps o k response has a 4xx status code
func (o *GetAggregateAppsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get aggregate apps o k response has a 5xx status code
func (o *GetAggregateAppsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get aggregate apps o k response a status code equal to that given
func (o *GetAggregateAppsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetAggregateAppsOK) Error() string {
	return fmt.Sprintf("[POST /store/aggregates/apps/GET/v1][%d] getAggregateAppsOK  %+v", 200, o.Payload)
}

func (o *GetAggregateAppsOK) String() string {
	return fmt.Sprintf("[POST /store/aggregates/apps/GET/v1][%d] getAggregateAppsOK  %+v", 200, o.Payload)
}

func (o *GetAggregateAppsOK) GetPayload() *models.StoreMsaAggregatesResponse {
	return o.Payload
}

func (o *GetAggregateAppsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.StoreMsaAggregatesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAggregateAppsBadRequest creates a GetAggregateAppsBadRequest with default headers values
func NewGetAggregateAppsBadRequest() *GetAggregateAppsBadRequest {
	return &GetAggregateAppsBadRequest{}
}

/*
GetAggregateAppsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAggregateAppsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.StoreMsaAggregatesResponse
}

// IsSuccess returns true when this get aggregate apps bad request response has a 2xx status code
func (o *GetAggregateAppsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get aggregate apps bad request response has a 3xx status code
func (o *GetAggregateAppsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get aggregate apps bad request response has a 4xx status code
func (o *GetAggregateAppsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get aggregate apps bad request response has a 5xx status code
func (o *GetAggregateAppsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get aggregate apps bad request response a status code equal to that given
func (o *GetAggregateAppsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetAggregateAppsBadRequest) Error() string {
	return fmt.Sprintf("[POST /store/aggregates/apps/GET/v1][%d] getAggregateAppsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAggregateAppsBadRequest) String() string {
	return fmt.Sprintf("[POST /store/aggregates/apps/GET/v1][%d] getAggregateAppsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAggregateAppsBadRequest) GetPayload() *models.StoreMsaAggregatesResponse {
	return o.Payload
}

func (o *GetAggregateAppsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.StoreMsaAggregatesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAggregateAppsForbidden creates a GetAggregateAppsForbidden with default headers values
func NewGetAggregateAppsForbidden() *GetAggregateAppsForbidden {
	return &GetAggregateAppsForbidden{}
}

/*
GetAggregateAppsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAggregateAppsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get aggregate apps forbidden response has a 2xx status code
func (o *GetAggregateAppsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get aggregate apps forbidden response has a 3xx status code
func (o *GetAggregateAppsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get aggregate apps forbidden response has a 4xx status code
func (o *GetAggregateAppsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get aggregate apps forbidden response has a 5xx status code
func (o *GetAggregateAppsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get aggregate apps forbidden response a status code equal to that given
func (o *GetAggregateAppsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetAggregateAppsForbidden) Error() string {
	return fmt.Sprintf("[POST /store/aggregates/apps/GET/v1][%d] getAggregateAppsForbidden  %+v", 403, o.Payload)
}

func (o *GetAggregateAppsForbidden) String() string {
	return fmt.Sprintf("[POST /store/aggregates/apps/GET/v1][%d] getAggregateAppsForbidden  %+v", 403, o.Payload)
}

func (o *GetAggregateAppsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetAggregateAppsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAggregateAppsTooManyRequests creates a GetAggregateAppsTooManyRequests with default headers values
func NewGetAggregateAppsTooManyRequests() *GetAggregateAppsTooManyRequests {
	return &GetAggregateAppsTooManyRequests{}
}

/*
GetAggregateAppsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetAggregateAppsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get aggregate apps too many requests response has a 2xx status code
func (o *GetAggregateAppsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get aggregate apps too many requests response has a 3xx status code
func (o *GetAggregateAppsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get aggregate apps too many requests response has a 4xx status code
func (o *GetAggregateAppsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get aggregate apps too many requests response has a 5xx status code
func (o *GetAggregateAppsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get aggregate apps too many requests response a status code equal to that given
func (o *GetAggregateAppsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetAggregateAppsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /store/aggregates/apps/GET/v1][%d] getAggregateAppsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAggregateAppsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /store/aggregates/apps/GET/v1][%d] getAggregateAppsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAggregateAppsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetAggregateAppsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAggregateAppsInternalServerError creates a GetAggregateAppsInternalServerError with default headers values
func NewGetAggregateAppsInternalServerError() *GetAggregateAppsInternalServerError {
	return &GetAggregateAppsInternalServerError{}
}

/*
GetAggregateAppsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAggregateAppsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.StoreMsaAggregatesResponse
}

// IsSuccess returns true when this get aggregate apps internal server error response has a 2xx status code
func (o *GetAggregateAppsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get aggregate apps internal server error response has a 3xx status code
func (o *GetAggregateAppsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get aggregate apps internal server error response has a 4xx status code
func (o *GetAggregateAppsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get aggregate apps internal server error response has a 5xx status code
func (o *GetAggregateAppsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get aggregate apps internal server error response a status code equal to that given
func (o *GetAggregateAppsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetAggregateAppsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /store/aggregates/apps/GET/v1][%d] getAggregateAppsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAggregateAppsInternalServerError) String() string {
	return fmt.Sprintf("[POST /store/aggregates/apps/GET/v1][%d] getAggregateAppsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAggregateAppsInternalServerError) GetPayload() *models.StoreMsaAggregatesResponse {
	return o.Payload
}

func (o *GetAggregateAppsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.StoreMsaAggregatesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAggregateAppsDefault creates a GetAggregateAppsDefault with default headers values
func NewGetAggregateAppsDefault(code int) *GetAggregateAppsDefault {
	return &GetAggregateAppsDefault{
		_statusCode: code,
	}
}

/*
GetAggregateAppsDefault describes a response with status code -1, with default header values.

OK
*/
type GetAggregateAppsDefault struct {
	_statusCode int

	Payload *models.StoreMsaAggregatesResponse
}

// Code gets the status code for the get aggregate apps default response
func (o *GetAggregateAppsDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this get aggregate apps default response has a 2xx status code
func (o *GetAggregateAppsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get aggregate apps default response has a 3xx status code
func (o *GetAggregateAppsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get aggregate apps default response has a 4xx status code
func (o *GetAggregateAppsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get aggregate apps default response has a 5xx status code
func (o *GetAggregateAppsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get aggregate apps default response a status code equal to that given
func (o *GetAggregateAppsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *GetAggregateAppsDefault) Error() string {
	return fmt.Sprintf("[POST /store/aggregates/apps/GET/v1][%d] GetAggregateApps default  %+v", o._statusCode, o.Payload)
}

func (o *GetAggregateAppsDefault) String() string {
	return fmt.Sprintf("[POST /store/aggregates/apps/GET/v1][%d] GetAggregateApps default  %+v", o._statusCode, o.Payload)
}

func (o *GetAggregateAppsDefault) GetPayload() *models.StoreMsaAggregatesResponse {
	return o.Payload
}

func (o *GetAggregateAppsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StoreMsaAggregatesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
