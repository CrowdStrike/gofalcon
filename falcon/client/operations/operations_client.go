// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CombinedQueryInstalledPatches(params *CombinedQueryInstalledPatchesParams, opts ...ClientOption) (*CombinedQueryInstalledPatchesOK, error)

	PostGraphqlQueryMixin0(params *PostGraphqlQueryMixin0Params, opts ...ClientOption) (*PostGraphqlQueryMixin0OK, error)

	V1HostConfigsPost(params *V1HostConfigsPostParams, opts ...ClientOption) (*V1HostConfigsPostOK, *V1HostConfigsPostAccepted, error)

	V1StatusGet(params *V1StatusGetParams, opts ...ClientOption) (*V1StatusGetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CombinedQueryInstalledPatches gets installed patches information for hosts
*/
func (a *Client) CombinedQueryInstalledPatches(params *CombinedQueryInstalledPatchesParams, opts ...ClientOption) (*CombinedQueryInstalledPatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCombinedQueryInstalledPatchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "combinedQueryInstalledPatches",
		Method:             "GET",
		PathPattern:        "/spotlight/combined/installed-patches/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CombinedQueryInstalledPatchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CombinedQueryInstalledPatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for combinedQueryInstalledPatches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostGraphqlQueryMixin0 - request graphql query
*/
func (a *Client) PostGraphqlQueryMixin0(params *PostGraphqlQueryMixin0Params, opts ...ClientOption) (*PostGraphqlQueryMixin0OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGraphqlQueryMixin0Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "post-graphql-queryMixin0",
		Method:             "POST",
		PathPattern:        "/cloud-data-protection/entities/schedules/graphql/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGraphqlQueryMixin0Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGraphqlQueryMixin0OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post-graphql-queryMixin0: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1HostConfigsPost configures all hosts in the provided host group to be ready to accept an execute API call
*/
func (a *Client) V1HostConfigsPost(params *V1HostConfigsPostParams, opts ...ClientOption) (*V1HostConfigsPostOK, *V1HostConfigsPostAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1HostConfigsPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1.host-configs.post",
		Method:             "POST",
		PathPattern:        "/pluginsonprem/entities/host-configs/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1HostConfigsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *V1HostConfigsPostOK:
		return value, nil, nil
	case *V1HostConfigsPostAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for operations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1StatusGet fetches the host configs within the provided host group
*/
func (a *Client) V1StatusGet(params *V1StatusGetParams, opts ...ClientOption) (*V1StatusGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1StatusGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1.status.get",
		Method:             "GET",
		PathPattern:        "/pluginsonprem/entities/host-configs/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1StatusGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1StatusGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1.status.get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
