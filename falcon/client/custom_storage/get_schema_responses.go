// Code generated by go-swagger; DO NOT EDIT.

package custom_storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetSchemaReader is a Reader for the GetSchema structure.
type GetSchemaReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *GetSchemaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSchemaOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetSchemaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSchemaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSchemaInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /customobjects/v1/collections/{collection_name}/schemas/{schema_version}] GetSchema", response, response.Code())
	}
}

// NewGetSchemaOK creates a GetSchemaOK with default headers values
func NewGetSchemaOK(writer io.Writer) *GetSchemaOK {
	return &GetSchemaOK{

		Payload: writer,
	}
}

/*
GetSchemaOK describes a response with status code 200, with default header values.

OK
*/
type GetSchemaOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload io.Writer
}

// IsSuccess returns true when this get schema o k response has a 2xx status code
func (o *GetSchemaOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get schema o k response has a 3xx status code
func (o *GetSchemaOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get schema o k response has a 4xx status code
func (o *GetSchemaOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get schema o k response has a 5xx status code
func (o *GetSchemaOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get schema o k response a status code equal to that given
func (o *GetSchemaOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get schema o k response
func (o *GetSchemaOK) Code() int {
	return 200
}

func (o *GetSchemaOK) Error() string {
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/schemas/{schema_version}][%d] getSchemaOK", 200)
}

func (o *GetSchemaOK) String() string {
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/schemas/{schema_version}][%d] getSchemaOK", 200)
}

func (o *GetSchemaOK) GetPayload() io.Writer {
	return o.Payload
}

func (o *GetSchemaOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSchemaForbidden creates a GetSchemaForbidden with default headers values
func NewGetSchemaForbidden() *GetSchemaForbidden {
	return &GetSchemaForbidden{}
}

/*
GetSchemaForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetSchemaForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get schema forbidden response has a 2xx status code
func (o *GetSchemaForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get schema forbidden response has a 3xx status code
func (o *GetSchemaForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get schema forbidden response has a 4xx status code
func (o *GetSchemaForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get schema forbidden response has a 5xx status code
func (o *GetSchemaForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get schema forbidden response a status code equal to that given
func (o *GetSchemaForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get schema forbidden response
func (o *GetSchemaForbidden) Code() int {
	return 403
}

func (o *GetSchemaForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/schemas/{schema_version}][%d] getSchemaForbidden %s", 403, payload)
}

func (o *GetSchemaForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/schemas/{schema_version}][%d] getSchemaForbidden %s", 403, payload)
}

func (o *GetSchemaForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetSchemaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSchemaTooManyRequests creates a GetSchemaTooManyRequests with default headers values
func NewGetSchemaTooManyRequests() *GetSchemaTooManyRequests {
	return &GetSchemaTooManyRequests{}
}

/*
GetSchemaTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetSchemaTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get schema too many requests response has a 2xx status code
func (o *GetSchemaTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get schema too many requests response has a 3xx status code
func (o *GetSchemaTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get schema too many requests response has a 4xx status code
func (o *GetSchemaTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get schema too many requests response has a 5xx status code
func (o *GetSchemaTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get schema too many requests response a status code equal to that given
func (o *GetSchemaTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get schema too many requests response
func (o *GetSchemaTooManyRequests) Code() int {
	return 429
}

func (o *GetSchemaTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/schemas/{schema_version}][%d] getSchemaTooManyRequests %s", 429, payload)
}

func (o *GetSchemaTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/schemas/{schema_version}][%d] getSchemaTooManyRequests %s", 429, payload)
}

func (o *GetSchemaTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetSchemaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSchemaInternalServerError creates a GetSchemaInternalServerError with default headers values
func NewGetSchemaInternalServerError() *GetSchemaInternalServerError {
	return &GetSchemaInternalServerError{}
}

/*
GetSchemaInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type GetSchemaInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get schema internal server error response has a 2xx status code
func (o *GetSchemaInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get schema internal server error response has a 3xx status code
func (o *GetSchemaInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get schema internal server error response has a 4xx status code
func (o *GetSchemaInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get schema internal server error response has a 5xx status code
func (o *GetSchemaInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get schema internal server error response a status code equal to that given
func (o *GetSchemaInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get schema internal server error response
func (o *GetSchemaInternalServerError) Code() int {
	return 500
}

func (o *GetSchemaInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/schemas/{schema_version}][%d] getSchemaInternalServerError %s", 500, payload)
}

func (o *GetSchemaInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/schemas/{schema_version}][%d] getSchemaInternalServerError %s", 500, payload)
}

func (o *GetSchemaInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetSchemaInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
