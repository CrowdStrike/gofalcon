// Code generated by go-swagger; DO NOT EDIT.

package custom_storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetVersionedObjectReader is a Reader for the GetVersionedObject structure.
type GetVersionedObjectReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *GetVersionedObjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVersionedObjectOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetVersionedObjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetVersionedObjectTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetVersionedObjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /customobjects/v1/collections/{collection_name}/{collection_version}/objects/{object_key}] GetVersionedObject", response, response.Code())
	}
}

// NewGetVersionedObjectOK creates a GetVersionedObjectOK with default headers values
func NewGetVersionedObjectOK(writer io.Writer) *GetVersionedObjectOK {
	return &GetVersionedObjectOK{

		Payload: writer,
	}
}

/*
GetVersionedObjectOK describes a response with status code 200, with default header values.

OK
*/
type GetVersionedObjectOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload io.Writer
}

// IsSuccess returns true when this get versioned object o k response has a 2xx status code
func (o *GetVersionedObjectOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get versioned object o k response has a 3xx status code
func (o *GetVersionedObjectOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get versioned object o k response has a 4xx status code
func (o *GetVersionedObjectOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get versioned object o k response has a 5xx status code
func (o *GetVersionedObjectOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get versioned object o k response a status code equal to that given
func (o *GetVersionedObjectOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get versioned object o k response
func (o *GetVersionedObjectOK) Code() int {
	return 200
}

func (o *GetVersionedObjectOK) Error() string {
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/{collection_version}/objects/{object_key}][%d] getVersionedObjectOK  %+v", 200, o.Payload)
}

func (o *GetVersionedObjectOK) String() string {
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/{collection_version}/objects/{object_key}][%d] getVersionedObjectOK  %+v", 200, o.Payload)
}

func (o *GetVersionedObjectOK) GetPayload() io.Writer {
	return o.Payload
}

func (o *GetVersionedObjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionedObjectForbidden creates a GetVersionedObjectForbidden with default headers values
func NewGetVersionedObjectForbidden() *GetVersionedObjectForbidden {
	return &GetVersionedObjectForbidden{}
}

/*
GetVersionedObjectForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetVersionedObjectForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get versioned object forbidden response has a 2xx status code
func (o *GetVersionedObjectForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get versioned object forbidden response has a 3xx status code
func (o *GetVersionedObjectForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get versioned object forbidden response has a 4xx status code
func (o *GetVersionedObjectForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get versioned object forbidden response has a 5xx status code
func (o *GetVersionedObjectForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get versioned object forbidden response a status code equal to that given
func (o *GetVersionedObjectForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get versioned object forbidden response
func (o *GetVersionedObjectForbidden) Code() int {
	return 403
}

func (o *GetVersionedObjectForbidden) Error() string {
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/{collection_version}/objects/{object_key}][%d] getVersionedObjectForbidden  %+v", 403, o.Payload)
}

func (o *GetVersionedObjectForbidden) String() string {
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/{collection_version}/objects/{object_key}][%d] getVersionedObjectForbidden  %+v", 403, o.Payload)
}

func (o *GetVersionedObjectForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetVersionedObjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionedObjectTooManyRequests creates a GetVersionedObjectTooManyRequests with default headers values
func NewGetVersionedObjectTooManyRequests() *GetVersionedObjectTooManyRequests {
	return &GetVersionedObjectTooManyRequests{}
}

/*
GetVersionedObjectTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetVersionedObjectTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get versioned object too many requests response has a 2xx status code
func (o *GetVersionedObjectTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get versioned object too many requests response has a 3xx status code
func (o *GetVersionedObjectTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get versioned object too many requests response has a 4xx status code
func (o *GetVersionedObjectTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get versioned object too many requests response has a 5xx status code
func (o *GetVersionedObjectTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get versioned object too many requests response a status code equal to that given
func (o *GetVersionedObjectTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get versioned object too many requests response
func (o *GetVersionedObjectTooManyRequests) Code() int {
	return 429
}

func (o *GetVersionedObjectTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/{collection_version}/objects/{object_key}][%d] getVersionedObjectTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetVersionedObjectTooManyRequests) String() string {
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/{collection_version}/objects/{object_key}][%d] getVersionedObjectTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetVersionedObjectTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetVersionedObjectTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionedObjectInternalServerError creates a GetVersionedObjectInternalServerError with default headers values
func NewGetVersionedObjectInternalServerError() *GetVersionedObjectInternalServerError {
	return &GetVersionedObjectInternalServerError{}
}

/*
GetVersionedObjectInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type GetVersionedObjectInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get versioned object internal server error response has a 2xx status code
func (o *GetVersionedObjectInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get versioned object internal server error response has a 3xx status code
func (o *GetVersionedObjectInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get versioned object internal server error response has a 4xx status code
func (o *GetVersionedObjectInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get versioned object internal server error response has a 5xx status code
func (o *GetVersionedObjectInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get versioned object internal server error response a status code equal to that given
func (o *GetVersionedObjectInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get versioned object internal server error response
func (o *GetVersionedObjectInternalServerError) Code() int {
	return 500
}

func (o *GetVersionedObjectInternalServerError) Error() string {
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/{collection_version}/objects/{object_key}][%d] getVersionedObjectInternalServerError  %+v", 500, o.Payload)
}

func (o *GetVersionedObjectInternalServerError) String() string {
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/{collection_version}/objects/{object_key}][%d] getVersionedObjectInternalServerError  %+v", 500, o.Payload)
}

func (o *GetVersionedObjectInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetVersionedObjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
