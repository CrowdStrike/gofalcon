// Code generated by go-swagger; DO NOT EDIT.

package custom_storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// PutObjectByVersionReader is a Reader for the PutObjectByVersion structure.
type PutObjectByVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutObjectByVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutObjectByVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPutObjectByVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutObjectByVersionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutObjectByVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /customobjects/v1/collections/{collection_name}/{collection_version}/objects/{object_key}] PutObjectByVersion", response, response.Code())
	}
}

// NewPutObjectByVersionOK creates a PutObjectByVersionOK with default headers values
func NewPutObjectByVersionOK() *PutObjectByVersionOK {
	return &PutObjectByVersionOK{}
}

/*
PutObjectByVersionOK describes a response with status code 200, with default header values.

OK
*/
type PutObjectByVersionOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CustomStorageResponse
}

// IsSuccess returns true when this put object by version o k response has a 2xx status code
func (o *PutObjectByVersionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put object by version o k response has a 3xx status code
func (o *PutObjectByVersionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put object by version o k response has a 4xx status code
func (o *PutObjectByVersionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put object by version o k response has a 5xx status code
func (o *PutObjectByVersionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put object by version o k response a status code equal to that given
func (o *PutObjectByVersionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put object by version o k response
func (o *PutObjectByVersionOK) Code() int {
	return 200
}

func (o *PutObjectByVersionOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /customobjects/v1/collections/{collection_name}/{collection_version}/objects/{object_key}][%d] putObjectByVersionOK %s", 200, payload)
}

func (o *PutObjectByVersionOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /customobjects/v1/collections/{collection_name}/{collection_version}/objects/{object_key}][%d] putObjectByVersionOK %s", 200, payload)
}

func (o *PutObjectByVersionOK) GetPayload() *models.CustomStorageResponse {
	return o.Payload
}

func (o *PutObjectByVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CustomStorageResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutObjectByVersionForbidden creates a PutObjectByVersionForbidden with default headers values
func NewPutObjectByVersionForbidden() *PutObjectByVersionForbidden {
	return &PutObjectByVersionForbidden{}
}

/*
PutObjectByVersionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PutObjectByVersionForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this put object by version forbidden response has a 2xx status code
func (o *PutObjectByVersionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put object by version forbidden response has a 3xx status code
func (o *PutObjectByVersionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put object by version forbidden response has a 4xx status code
func (o *PutObjectByVersionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put object by version forbidden response has a 5xx status code
func (o *PutObjectByVersionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put object by version forbidden response a status code equal to that given
func (o *PutObjectByVersionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put object by version forbidden response
func (o *PutObjectByVersionForbidden) Code() int {
	return 403
}

func (o *PutObjectByVersionForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /customobjects/v1/collections/{collection_name}/{collection_version}/objects/{object_key}][%d] putObjectByVersionForbidden %s", 403, payload)
}

func (o *PutObjectByVersionForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /customobjects/v1/collections/{collection_name}/{collection_version}/objects/{object_key}][%d] putObjectByVersionForbidden %s", 403, payload)
}

func (o *PutObjectByVersionForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *PutObjectByVersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutObjectByVersionTooManyRequests creates a PutObjectByVersionTooManyRequests with default headers values
func NewPutObjectByVersionTooManyRequests() *PutObjectByVersionTooManyRequests {
	return &PutObjectByVersionTooManyRequests{}
}

/*
PutObjectByVersionTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type PutObjectByVersionTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this put object by version too many requests response has a 2xx status code
func (o *PutObjectByVersionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put object by version too many requests response has a 3xx status code
func (o *PutObjectByVersionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put object by version too many requests response has a 4xx status code
func (o *PutObjectByVersionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this put object by version too many requests response has a 5xx status code
func (o *PutObjectByVersionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this put object by version too many requests response a status code equal to that given
func (o *PutObjectByVersionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the put object by version too many requests response
func (o *PutObjectByVersionTooManyRequests) Code() int {
	return 429
}

func (o *PutObjectByVersionTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /customobjects/v1/collections/{collection_name}/{collection_version}/objects/{object_key}][%d] putObjectByVersionTooManyRequests %s", 429, payload)
}

func (o *PutObjectByVersionTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /customobjects/v1/collections/{collection_name}/{collection_version}/objects/{object_key}][%d] putObjectByVersionTooManyRequests %s", 429, payload)
}

func (o *PutObjectByVersionTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *PutObjectByVersionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutObjectByVersionInternalServerError creates a PutObjectByVersionInternalServerError with default headers values
func NewPutObjectByVersionInternalServerError() *PutObjectByVersionInternalServerError {
	return &PutObjectByVersionInternalServerError{}
}

/*
PutObjectByVersionInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type PutObjectByVersionInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this put object by version internal server error response has a 2xx status code
func (o *PutObjectByVersionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put object by version internal server error response has a 3xx status code
func (o *PutObjectByVersionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put object by version internal server error response has a 4xx status code
func (o *PutObjectByVersionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put object by version internal server error response has a 5xx status code
func (o *PutObjectByVersionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put object by version internal server error response a status code equal to that given
func (o *PutObjectByVersionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the put object by version internal server error response
func (o *PutObjectByVersionInternalServerError) Code() int {
	return 500
}

func (o *PutObjectByVersionInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /customobjects/v1/collections/{collection_name}/{collection_version}/objects/{object_key}][%d] putObjectByVersionInternalServerError %s", 500, payload)
}

func (o *PutObjectByVersionInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /customobjects/v1/collections/{collection_name}/{collection_version}/objects/{object_key}][%d] putObjectByVersionInternalServerError %s", 500, payload)
}

func (o *PutObjectByVersionInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *PutObjectByVersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
