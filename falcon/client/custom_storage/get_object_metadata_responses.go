// Code generated by go-swagger; DO NOT EDIT.

package custom_storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetObjectMetadataReader is a Reader for the GetObjectMetadata structure.
type GetObjectMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetObjectMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetObjectMetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetObjectMetadataForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetObjectMetadataTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetObjectMetadataInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /customobjects/v1/collections/{collection_name}/objects/{object_key}/metadata] GetObjectMetadata", response, response.Code())
	}
}

// NewGetObjectMetadataOK creates a GetObjectMetadataOK with default headers values
func NewGetObjectMetadataOK() *GetObjectMetadataOK {
	return &GetObjectMetadataOK{}
}

/*
GetObjectMetadataOK describes a response with status code 200, with default header values.

OK
*/
type GetObjectMetadataOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CustomStorageResponse
}

// IsSuccess returns true when this get object metadata o k response has a 2xx status code
func (o *GetObjectMetadataOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get object metadata o k response has a 3xx status code
func (o *GetObjectMetadataOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get object metadata o k response has a 4xx status code
func (o *GetObjectMetadataOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get object metadata o k response has a 5xx status code
func (o *GetObjectMetadataOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get object metadata o k response a status code equal to that given
func (o *GetObjectMetadataOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get object metadata o k response
func (o *GetObjectMetadataOK) Code() int {
	return 200
}

func (o *GetObjectMetadataOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/objects/{object_key}/metadata][%d] getObjectMetadataOK %s", 200, payload)
}

func (o *GetObjectMetadataOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/objects/{object_key}/metadata][%d] getObjectMetadataOK %s", 200, payload)
}

func (o *GetObjectMetadataOK) GetPayload() *models.CustomStorageResponse {
	return o.Payload
}

func (o *GetObjectMetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CustomStorageResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetObjectMetadataForbidden creates a GetObjectMetadataForbidden with default headers values
func NewGetObjectMetadataForbidden() *GetObjectMetadataForbidden {
	return &GetObjectMetadataForbidden{}
}

/*
GetObjectMetadataForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetObjectMetadataForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get object metadata forbidden response has a 2xx status code
func (o *GetObjectMetadataForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get object metadata forbidden response has a 3xx status code
func (o *GetObjectMetadataForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get object metadata forbidden response has a 4xx status code
func (o *GetObjectMetadataForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get object metadata forbidden response has a 5xx status code
func (o *GetObjectMetadataForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get object metadata forbidden response a status code equal to that given
func (o *GetObjectMetadataForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get object metadata forbidden response
func (o *GetObjectMetadataForbidden) Code() int {
	return 403
}

func (o *GetObjectMetadataForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/objects/{object_key}/metadata][%d] getObjectMetadataForbidden %s", 403, payload)
}

func (o *GetObjectMetadataForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/objects/{object_key}/metadata][%d] getObjectMetadataForbidden %s", 403, payload)
}

func (o *GetObjectMetadataForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetObjectMetadataForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetObjectMetadataTooManyRequests creates a GetObjectMetadataTooManyRequests with default headers values
func NewGetObjectMetadataTooManyRequests() *GetObjectMetadataTooManyRequests {
	return &GetObjectMetadataTooManyRequests{}
}

/*
GetObjectMetadataTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetObjectMetadataTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get object metadata too many requests response has a 2xx status code
func (o *GetObjectMetadataTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get object metadata too many requests response has a 3xx status code
func (o *GetObjectMetadataTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get object metadata too many requests response has a 4xx status code
func (o *GetObjectMetadataTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get object metadata too many requests response has a 5xx status code
func (o *GetObjectMetadataTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get object metadata too many requests response a status code equal to that given
func (o *GetObjectMetadataTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get object metadata too many requests response
func (o *GetObjectMetadataTooManyRequests) Code() int {
	return 429
}

func (o *GetObjectMetadataTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/objects/{object_key}/metadata][%d] getObjectMetadataTooManyRequests %s", 429, payload)
}

func (o *GetObjectMetadataTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/objects/{object_key}/metadata][%d] getObjectMetadataTooManyRequests %s", 429, payload)
}

func (o *GetObjectMetadataTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetObjectMetadataTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetObjectMetadataInternalServerError creates a GetObjectMetadataInternalServerError with default headers values
func NewGetObjectMetadataInternalServerError() *GetObjectMetadataInternalServerError {
	return &GetObjectMetadataInternalServerError{}
}

/*
GetObjectMetadataInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type GetObjectMetadataInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get object metadata internal server error response has a 2xx status code
func (o *GetObjectMetadataInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get object metadata internal server error response has a 3xx status code
func (o *GetObjectMetadataInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get object metadata internal server error response has a 4xx status code
func (o *GetObjectMetadataInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get object metadata internal server error response has a 5xx status code
func (o *GetObjectMetadataInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get object metadata internal server error response a status code equal to that given
func (o *GetObjectMetadataInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get object metadata internal server error response
func (o *GetObjectMetadataInternalServerError) Code() int {
	return 500
}

func (o *GetObjectMetadataInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/objects/{object_key}/metadata][%d] getObjectMetadataInternalServerError %s", 500, payload)
}

func (o *GetObjectMetadataInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/objects/{object_key}/metadata][%d] getObjectMetadataInternalServerError %s", 500, payload)
}

func (o *GetObjectMetadataInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetObjectMetadataInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
