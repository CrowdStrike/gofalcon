// Code generated by go-swagger; DO NOT EDIT.

package custom_storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPutObjectParams creates a new PutObjectParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPutObjectParams() *PutObjectParams {
	return &PutObjectParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPutObjectParamsWithTimeout creates a new PutObjectParams object
// with the ability to set a timeout on a request.
func NewPutObjectParamsWithTimeout(timeout time.Duration) *PutObjectParams {
	return &PutObjectParams{
		timeout: timeout,
	}
}

// NewPutObjectParamsWithContext creates a new PutObjectParams object
// with the ability to set a context for a request.
func NewPutObjectParamsWithContext(ctx context.Context) *PutObjectParams {
	return &PutObjectParams{
		Context: ctx,
	}
}

// NewPutObjectParamsWithHTTPClient creates a new PutObjectParams object
// with the ability to set a custom HTTPClient for a request.
func NewPutObjectParamsWithHTTPClient(client *http.Client) *PutObjectParams {
	return &PutObjectParams{
		HTTPClient: client,
	}
}

/*
PutObjectParams contains all the parameters to send to the API endpoint

	for the put object operation.

	Typically these are written to a http.Request.
*/
type PutObjectParams struct {

	/* XCSADBNAMESPACE.

	   The name of the namespace the collection belongs to
	*/
	XCSADBNAMESPACE string

	/* XCSAPPID.

	   The id of the app the collection belongs to. This will map to the namespace of the collection
	*/
	XCSAPPID *string

	// Body.
	Body []int64

	/* CollectionName.

	   The name of the collection
	*/
	CollectionName string

	/* ObjectKey.

	   The object key
	*/
	ObjectKey string

	/* SchemaVersion.

	   The version of the collection schema
	*/
	SchemaVersion string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the put object params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PutObjectParams) WithDefaults() *PutObjectParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the put object params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PutObjectParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the put object params
func (o *PutObjectParams) WithTimeout(timeout time.Duration) *PutObjectParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put object params
func (o *PutObjectParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put object params
func (o *PutObjectParams) WithContext(ctx context.Context) *PutObjectParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put object params
func (o *PutObjectParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put object params
func (o *PutObjectParams) WithHTTPClient(client *http.Client) *PutObjectParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put object params
func (o *PutObjectParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXCSADBNAMESPACE adds the xCSADBNAMESPACE to the put object params
func (o *PutObjectParams) WithXCSADBNAMESPACE(xCSADBNAMESPACE string) *PutObjectParams {
	o.SetXCSADBNAMESPACE(xCSADBNAMESPACE)
	return o
}

// SetXCSADBNAMESPACE adds the xCSADBNAMESPACE to the put object params
func (o *PutObjectParams) SetXCSADBNAMESPACE(xCSADBNAMESPACE string) {
	o.XCSADBNAMESPACE = xCSADBNAMESPACE
}

// WithXCSAPPID adds the xCSAPPID to the put object params
func (o *PutObjectParams) WithXCSAPPID(xCSAPPID *string) *PutObjectParams {
	o.SetXCSAPPID(xCSAPPID)
	return o
}

// SetXCSAPPID adds the xCSAPPId to the put object params
func (o *PutObjectParams) SetXCSAPPID(xCSAPPID *string) {
	o.XCSAPPID = xCSAPPID
}

// WithBody adds the body to the put object params
func (o *PutObjectParams) WithBody(body []int64) *PutObjectParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the put object params
func (o *PutObjectParams) SetBody(body []int64) {
	o.Body = body
}

// WithCollectionName adds the collectionName to the put object params
func (o *PutObjectParams) WithCollectionName(collectionName string) *PutObjectParams {
	o.SetCollectionName(collectionName)
	return o
}

// SetCollectionName adds the collectionName to the put object params
func (o *PutObjectParams) SetCollectionName(collectionName string) {
	o.CollectionName = collectionName
}

// WithObjectKey adds the objectKey to the put object params
func (o *PutObjectParams) WithObjectKey(objectKey string) *PutObjectParams {
	o.SetObjectKey(objectKey)
	return o
}

// SetObjectKey adds the objectKey to the put object params
func (o *PutObjectParams) SetObjectKey(objectKey string) {
	o.ObjectKey = objectKey
}

// WithSchemaVersion adds the schemaVersion to the put object params
func (o *PutObjectParams) WithSchemaVersion(schemaVersion string) *PutObjectParams {
	o.SetSchemaVersion(schemaVersion)
	return o
}

// SetSchemaVersion adds the schemaVersion to the put object params
func (o *PutObjectParams) SetSchemaVersion(schemaVersion string) {
	o.SchemaVersion = schemaVersion
}

// WriteToRequest writes these params to a swagger request
func (o *PutObjectParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-CS-ADB-NAMESPACE
	if err := r.SetHeaderParam("X-CS-ADB-NAMESPACE", o.XCSADBNAMESPACE); err != nil {
		return err
	}

	if o.XCSAPPID != nil {

		// header param X-CS-APP-ID
		if err := r.SetHeaderParam("X-CS-APP-ID", *o.XCSAPPID); err != nil {
			return err
		}
	}
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param collection_name
	if err := r.SetPathParam("collection_name", o.CollectionName); err != nil {
		return err
	}

	// path param object_key
	if err := r.SetPathParam("object_key", o.ObjectKey); err != nil {
		return err
	}

	// query param schema_version
	qrSchemaVersion := o.SchemaVersion
	qSchemaVersion := qrSchemaVersion
	if qSchemaVersion != "" {

		if err := r.SetQueryParam("schema_version", qSchemaVersion); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
