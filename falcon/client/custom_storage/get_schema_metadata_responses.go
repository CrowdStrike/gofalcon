// Code generated by go-swagger; DO NOT EDIT.

package custom_storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetSchemaMetadataReader is a Reader for the GetSchemaMetadata structure.
type GetSchemaMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSchemaMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSchemaMetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetSchemaMetadataForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSchemaMetadataTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSchemaMetadataInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /customobjects/v1/collections/{collection_name}/schemas/{schema_version}/metadata] GetSchemaMetadata", response, response.Code())
	}
}

// NewGetSchemaMetadataOK creates a GetSchemaMetadataOK with default headers values
func NewGetSchemaMetadataOK() *GetSchemaMetadataOK {
	return &GetSchemaMetadataOK{}
}

/*
GetSchemaMetadataOK describes a response with status code 200, with default header values.

OK
*/
type GetSchemaMetadataOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CustomType4161059146
}

// IsSuccess returns true when this get schema metadata o k response has a 2xx status code
func (o *GetSchemaMetadataOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get schema metadata o k response has a 3xx status code
func (o *GetSchemaMetadataOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get schema metadata o k response has a 4xx status code
func (o *GetSchemaMetadataOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get schema metadata o k response has a 5xx status code
func (o *GetSchemaMetadataOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get schema metadata o k response a status code equal to that given
func (o *GetSchemaMetadataOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get schema metadata o k response
func (o *GetSchemaMetadataOK) Code() int {
	return 200
}

func (o *GetSchemaMetadataOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/schemas/{schema_version}/metadata][%d] getSchemaMetadataOK %s", 200, payload)
}

func (o *GetSchemaMetadataOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/schemas/{schema_version}/metadata][%d] getSchemaMetadataOK %s", 200, payload)
}

func (o *GetSchemaMetadataOK) GetPayload() *models.CustomType4161059146 {
	return o.Payload
}

func (o *GetSchemaMetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CustomType4161059146)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSchemaMetadataForbidden creates a GetSchemaMetadataForbidden with default headers values
func NewGetSchemaMetadataForbidden() *GetSchemaMetadataForbidden {
	return &GetSchemaMetadataForbidden{}
}

/*
GetSchemaMetadataForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetSchemaMetadataForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get schema metadata forbidden response has a 2xx status code
func (o *GetSchemaMetadataForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get schema metadata forbidden response has a 3xx status code
func (o *GetSchemaMetadataForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get schema metadata forbidden response has a 4xx status code
func (o *GetSchemaMetadataForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get schema metadata forbidden response has a 5xx status code
func (o *GetSchemaMetadataForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get schema metadata forbidden response a status code equal to that given
func (o *GetSchemaMetadataForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get schema metadata forbidden response
func (o *GetSchemaMetadataForbidden) Code() int {
	return 403
}

func (o *GetSchemaMetadataForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/schemas/{schema_version}/metadata][%d] getSchemaMetadataForbidden %s", 403, payload)
}

func (o *GetSchemaMetadataForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/schemas/{schema_version}/metadata][%d] getSchemaMetadataForbidden %s", 403, payload)
}

func (o *GetSchemaMetadataForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetSchemaMetadataForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSchemaMetadataTooManyRequests creates a GetSchemaMetadataTooManyRequests with default headers values
func NewGetSchemaMetadataTooManyRequests() *GetSchemaMetadataTooManyRequests {
	return &GetSchemaMetadataTooManyRequests{}
}

/*
GetSchemaMetadataTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetSchemaMetadataTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get schema metadata too many requests response has a 2xx status code
func (o *GetSchemaMetadataTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get schema metadata too many requests response has a 3xx status code
func (o *GetSchemaMetadataTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get schema metadata too many requests response has a 4xx status code
func (o *GetSchemaMetadataTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get schema metadata too many requests response has a 5xx status code
func (o *GetSchemaMetadataTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get schema metadata too many requests response a status code equal to that given
func (o *GetSchemaMetadataTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get schema metadata too many requests response
func (o *GetSchemaMetadataTooManyRequests) Code() int {
	return 429
}

func (o *GetSchemaMetadataTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/schemas/{schema_version}/metadata][%d] getSchemaMetadataTooManyRequests %s", 429, payload)
}

func (o *GetSchemaMetadataTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/schemas/{schema_version}/metadata][%d] getSchemaMetadataTooManyRequests %s", 429, payload)
}

func (o *GetSchemaMetadataTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetSchemaMetadataTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSchemaMetadataInternalServerError creates a GetSchemaMetadataInternalServerError with default headers values
func NewGetSchemaMetadataInternalServerError() *GetSchemaMetadataInternalServerError {
	return &GetSchemaMetadataInternalServerError{}
}

/*
GetSchemaMetadataInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type GetSchemaMetadataInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get schema metadata internal server error response has a 2xx status code
func (o *GetSchemaMetadataInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get schema metadata internal server error response has a 3xx status code
func (o *GetSchemaMetadataInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get schema metadata internal server error response has a 4xx status code
func (o *GetSchemaMetadataInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get schema metadata internal server error response has a 5xx status code
func (o *GetSchemaMetadataInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get schema metadata internal server error response a status code equal to that given
func (o *GetSchemaMetadataInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get schema metadata internal server error response
func (o *GetSchemaMetadataInternalServerError) Code() int {
	return 500
}

func (o *GetSchemaMetadataInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/schemas/{schema_version}/metadata][%d] getSchemaMetadataInternalServerError %s", 500, payload)
}

func (o *GetSchemaMetadataInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /customobjects/v1/collections/{collection_name}/schemas/{schema_version}/metadata][%d] getSchemaMetadataInternalServerError %s", 500, payload)
}

func (o *GetSchemaMetadataInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetSchemaMetadataInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
