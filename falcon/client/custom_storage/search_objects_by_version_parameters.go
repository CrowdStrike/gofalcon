// Code generated by go-swagger; DO NOT EDIT.

package custom_storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchObjectsByVersionParams creates a new SearchObjectsByVersionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchObjectsByVersionParams() *SearchObjectsByVersionParams {
	return &SearchObjectsByVersionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchObjectsByVersionParamsWithTimeout creates a new SearchObjectsByVersionParams object
// with the ability to set a timeout on a request.
func NewSearchObjectsByVersionParamsWithTimeout(timeout time.Duration) *SearchObjectsByVersionParams {
	return &SearchObjectsByVersionParams{
		timeout: timeout,
	}
}

// NewSearchObjectsByVersionParamsWithContext creates a new SearchObjectsByVersionParams object
// with the ability to set a context for a request.
func NewSearchObjectsByVersionParamsWithContext(ctx context.Context) *SearchObjectsByVersionParams {
	return &SearchObjectsByVersionParams{
		Context: ctx,
	}
}

// NewSearchObjectsByVersionParamsWithHTTPClient creates a new SearchObjectsByVersionParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchObjectsByVersionParamsWithHTTPClient(client *http.Client) *SearchObjectsByVersionParams {
	return &SearchObjectsByVersionParams{
		HTTPClient: client,
	}
}

/*
SearchObjectsByVersionParams contains all the parameters to send to the API endpoint

	for the search objects by version operation.

	Typically these are written to a http.Request.
*/
type SearchObjectsByVersionParams struct {

	/* CollectionName.

	   The name of the collection
	*/
	CollectionName string

	/* CollectionVersion.

	   The version of the collection
	*/
	CollectionVersion string

	/* Filter.

	   The filter to limit the returned results.
	*/
	Filter string

	/* Limit.

	   The limit of results to return
	*/
	Limit int64

	/* Offset.

	   The offset of results to return
	*/
	Offset int64

	/* Sort.

	   The sort order for the returned results.
	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search objects by version params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchObjectsByVersionParams) WithDefaults() *SearchObjectsByVersionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search objects by version params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchObjectsByVersionParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search objects by version params
func (o *SearchObjectsByVersionParams) WithTimeout(timeout time.Duration) *SearchObjectsByVersionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search objects by version params
func (o *SearchObjectsByVersionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search objects by version params
func (o *SearchObjectsByVersionParams) WithContext(ctx context.Context) *SearchObjectsByVersionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search objects by version params
func (o *SearchObjectsByVersionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search objects by version params
func (o *SearchObjectsByVersionParams) WithHTTPClient(client *http.Client) *SearchObjectsByVersionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search objects by version params
func (o *SearchObjectsByVersionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCollectionName adds the collectionName to the search objects by version params
func (o *SearchObjectsByVersionParams) WithCollectionName(collectionName string) *SearchObjectsByVersionParams {
	o.SetCollectionName(collectionName)
	return o
}

// SetCollectionName adds the collectionName to the search objects by version params
func (o *SearchObjectsByVersionParams) SetCollectionName(collectionName string) {
	o.CollectionName = collectionName
}

// WithCollectionVersion adds the collectionVersion to the search objects by version params
func (o *SearchObjectsByVersionParams) WithCollectionVersion(collectionVersion string) *SearchObjectsByVersionParams {
	o.SetCollectionVersion(collectionVersion)
	return o
}

// SetCollectionVersion adds the collectionVersion to the search objects by version params
func (o *SearchObjectsByVersionParams) SetCollectionVersion(collectionVersion string) {
	o.CollectionVersion = collectionVersion
}

// WithFilter adds the filter to the search objects by version params
func (o *SearchObjectsByVersionParams) WithFilter(filter string) *SearchObjectsByVersionParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the search objects by version params
func (o *SearchObjectsByVersionParams) SetFilter(filter string) {
	o.Filter = filter
}

// WithLimit adds the limit to the search objects by version params
func (o *SearchObjectsByVersionParams) WithLimit(limit int64) *SearchObjectsByVersionParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the search objects by version params
func (o *SearchObjectsByVersionParams) SetLimit(limit int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the search objects by version params
func (o *SearchObjectsByVersionParams) WithOffset(offset int64) *SearchObjectsByVersionParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the search objects by version params
func (o *SearchObjectsByVersionParams) SetOffset(offset int64) {
	o.Offset = offset
}

// WithSort adds the sort to the search objects by version params
func (o *SearchObjectsByVersionParams) WithSort(sort *string) *SearchObjectsByVersionParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the search objects by version params
func (o *SearchObjectsByVersionParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *SearchObjectsByVersionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param collection_name
	if err := r.SetPathParam("collection_name", o.CollectionName); err != nil {
		return err
	}

	// path param collection_version
	if err := r.SetPathParam("collection_version", o.CollectionVersion); err != nil {
		return err
	}

	// query param filter
	qrFilter := o.Filter
	qFilter := qrFilter
	if qFilter != "" {

		if err := r.SetQueryParam("filter", qFilter); err != nil {
			return err
		}
	}

	// query param limit
	qrLimit := o.Limit
	qLimit := swag.FormatInt64(qrLimit)

	if err := r.SetQueryParam("limit", qLimit); err != nil {
		return err
	}

	// query param offset
	qrOffset := o.Offset
	qOffset := swag.FormatInt64(qrOffset)

	if err := r.SetQueryParam("offset", qOffset); err != nil {
		return err
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
