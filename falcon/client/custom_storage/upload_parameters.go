// Code generated by go-swagger; DO NOT EDIT.

package custom_storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"io"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUploadParams creates a new UploadParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUploadParams() *UploadParams {
	return &UploadParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUploadParamsWithTimeout creates a new UploadParams object
// with the ability to set a timeout on a request.
func NewUploadParamsWithTimeout(timeout time.Duration) *UploadParams {
	return &UploadParams{
		timeout: timeout,
	}
}

// NewUploadParamsWithContext creates a new UploadParams object
// with the ability to set a context for a request.
func NewUploadParamsWithContext(ctx context.Context) *UploadParams {
	return &UploadParams{
		Context: ctx,
	}
}

// NewUploadParamsWithHTTPClient creates a new UploadParams object
// with the ability to set a custom HTTPClient for a request.
func NewUploadParamsWithHTTPClient(client *http.Client) *UploadParams {
	return &UploadParams{
		HTTPClient: client,
	}
}

/*
UploadParams contains all the parameters to send to the API endpoint

	for the upload operation.

	Typically these are written to a http.Request.
*/
type UploadParams struct {

	// Body.
	//
	// Format: binary
	Body io.ReadCloser

	/* CollectionName.

	   The name of the collection
	*/
	CollectionName string

	/* DryRun.

	   If false, run the operation as normal.  If true, validate that the request *would* succeed, but don't execute it.
	*/
	DryRun bool

	/* ObjectKey.

	   The object key
	*/
	ObjectKey string

	/* SchemaVersion.

	   The version of the collection schema
	*/
	SchemaVersion *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the upload params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadParams) WithDefaults() *UploadParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the upload params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the upload params
func (o *UploadParams) WithTimeout(timeout time.Duration) *UploadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload params
func (o *UploadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload params
func (o *UploadParams) WithContext(ctx context.Context) *UploadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload params
func (o *UploadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload params
func (o *UploadParams) WithHTTPClient(client *http.Client) *UploadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload params
func (o *UploadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the upload params
func (o *UploadParams) WithBody(body io.ReadCloser) *UploadParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the upload params
func (o *UploadParams) SetBody(body io.ReadCloser) {
	o.Body = body
}

// WithCollectionName adds the collectionName to the upload params
func (o *UploadParams) WithCollectionName(collectionName string) *UploadParams {
	o.SetCollectionName(collectionName)
	return o
}

// SetCollectionName adds the collectionName to the upload params
func (o *UploadParams) SetCollectionName(collectionName string) {
	o.CollectionName = collectionName
}

// WithDryRun adds the dryRun to the upload params
func (o *UploadParams) WithDryRun(dryRun bool) *UploadParams {
	o.SetDryRun(dryRun)
	return o
}

// SetDryRun adds the dryRun to the upload params
func (o *UploadParams) SetDryRun(dryRun bool) {
	o.DryRun = dryRun
}

// WithObjectKey adds the objectKey to the upload params
func (o *UploadParams) WithObjectKey(objectKey string) *UploadParams {
	o.SetObjectKey(objectKey)
	return o
}

// SetObjectKey adds the objectKey to the upload params
func (o *UploadParams) SetObjectKey(objectKey string) {
	o.ObjectKey = objectKey
}

// WithSchemaVersion adds the schemaVersion to the upload params
func (o *UploadParams) WithSchemaVersion(schemaVersion *string) *UploadParams {
	o.SetSchemaVersion(schemaVersion)
	return o
}

// SetSchemaVersion adds the schemaVersion to the upload params
func (o *UploadParams) SetSchemaVersion(schemaVersion *string) {
	o.SchemaVersion = schemaVersion
}

// WriteToRequest writes these params to a swagger request
func (o *UploadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param collection_name
	if err := r.SetPathParam("collection_name", o.CollectionName); err != nil {
		return err
	}

	// query param dry_run
	qrDryRun := o.DryRun
	qDryRun := swag.FormatBool(qrDryRun)

	if err := r.SetQueryParam("dry_run", qDryRun); err != nil {
		return err
	}

	// path param object_key
	if err := r.SetPathParam("object_key", o.ObjectKey); err != nil {
		return err
	}

	if o.SchemaVersion != nil {

		// query param schema_version
		var qrSchemaVersion string

		if o.SchemaVersion != nil {
			qrSchemaVersion = *o.SchemaVersion
		}
		qSchemaVersion := qrSchemaVersion
		if qSchemaVersion != "" {

			if err := r.SetQueryParam("schema_version", qSchemaVersion); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
