// Code generated by go-swagger; DO NOT EDIT.

package custom_storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// DeleteReader is a Reader for the Delete structure.
type DeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /customobjects/v1/collections/{collection_name}/objects/{object_key}] delete", response, response.Code())
	}
}

// NewDeleteOK creates a DeleteOK with default headers values
func NewDeleteOK() *DeleteOK {
	return &DeleteOK{}
}

/*
DeleteOK describes a response with status code 200, with default header values.

OK
*/
type DeleteOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CustomStorageResponse
}

// IsSuccess returns true when this delete o k response has a 2xx status code
func (o *DeleteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete o k response has a 3xx status code
func (o *DeleteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete o k response has a 4xx status code
func (o *DeleteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete o k response has a 5xx status code
func (o *DeleteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete o k response a status code equal to that given
func (o *DeleteOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete o k response
func (o *DeleteOK) Code() int {
	return 200
}

func (o *DeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /customobjects/v1/collections/{collection_name}/objects/{object_key}][%d] deleteOK  %+v", 200, o.Payload)
}

func (o *DeleteOK) String() string {
	return fmt.Sprintf("[DELETE /customobjects/v1/collections/{collection_name}/objects/{object_key}][%d] deleteOK  %+v", 200, o.Payload)
}

func (o *DeleteOK) GetPayload() *models.CustomStorageResponse {
	return o.Payload
}

func (o *DeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CustomStorageResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteForbidden creates a DeleteForbidden with default headers values
func NewDeleteForbidden() *DeleteForbidden {
	return &DeleteForbidden{}
}

/*
DeleteForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete forbidden response has a 2xx status code
func (o *DeleteForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete forbidden response has a 3xx status code
func (o *DeleteForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete forbidden response has a 4xx status code
func (o *DeleteForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete forbidden response has a 5xx status code
func (o *DeleteForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete forbidden response a status code equal to that given
func (o *DeleteForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete forbidden response
func (o *DeleteForbidden) Code() int {
	return 403
}

func (o *DeleteForbidden) Error() string {
	return fmt.Sprintf("[DELETE /customobjects/v1/collections/{collection_name}/objects/{object_key}][%d] deleteForbidden  %+v", 403, o.Payload)
}

func (o *DeleteForbidden) String() string {
	return fmt.Sprintf("[DELETE /customobjects/v1/collections/{collection_name}/objects/{object_key}][%d] deleteForbidden  %+v", 403, o.Payload)
}

func (o *DeleteForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeleteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTooManyRequests creates a DeleteTooManyRequests with default headers values
func NewDeleteTooManyRequests() *DeleteTooManyRequests {
	return &DeleteTooManyRequests{}
}

/*
DeleteTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type DeleteTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete too many requests response has a 2xx status code
func (o *DeleteTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete too many requests response has a 3xx status code
func (o *DeleteTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete too many requests response has a 4xx status code
func (o *DeleteTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete too many requests response has a 5xx status code
func (o *DeleteTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete too many requests response a status code equal to that given
func (o *DeleteTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete too many requests response
func (o *DeleteTooManyRequests) Code() int {
	return 429
}

func (o *DeleteTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /customobjects/v1/collections/{collection_name}/objects/{object_key}][%d] deleteTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /customobjects/v1/collections/{collection_name}/objects/{object_key}][%d] deleteTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeleteTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
