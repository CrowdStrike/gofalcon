// Code generated by go-swagger; DO NOT EDIT.

package downloads_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewFetchFilesDownloadInfoParams creates a new FetchFilesDownloadInfoParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFetchFilesDownloadInfoParams() *FetchFilesDownloadInfoParams {
	return &FetchFilesDownloadInfoParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFetchFilesDownloadInfoParamsWithTimeout creates a new FetchFilesDownloadInfoParams object
// with the ability to set a timeout on a request.
func NewFetchFilesDownloadInfoParamsWithTimeout(timeout time.Duration) *FetchFilesDownloadInfoParams {
	return &FetchFilesDownloadInfoParams{
		timeout: timeout,
	}
}

// NewFetchFilesDownloadInfoParamsWithContext creates a new FetchFilesDownloadInfoParams object
// with the ability to set a context for a request.
func NewFetchFilesDownloadInfoParamsWithContext(ctx context.Context) *FetchFilesDownloadInfoParams {
	return &FetchFilesDownloadInfoParams{
		Context: ctx,
	}
}

// NewFetchFilesDownloadInfoParamsWithHTTPClient creates a new FetchFilesDownloadInfoParams object
// with the ability to set a custom HTTPClient for a request.
func NewFetchFilesDownloadInfoParamsWithHTTPClient(client *http.Client) *FetchFilesDownloadInfoParams {
	return &FetchFilesDownloadInfoParams{
		HTTPClient: client,
	}
}

/*
FetchFilesDownloadInfoParams contains all the parameters to send to the API endpoint

	for the fetch files download info operation.

	Typically these are written to a http.Request.
*/
type FetchFilesDownloadInfoParams struct {

	/* Filter.

	   Search files using various filters using query in Falcon Query Language (FQL). Supported filters: arch,category,file_name,file_version,os
	*/
	Filter *string

	/* Sort.

	     The fields to sort records on. Supported columns:
	- `arch`
	- `category`
	- `file_name`
	- `file_version`
	- `os`
	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the fetch files download info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FetchFilesDownloadInfoParams) WithDefaults() *FetchFilesDownloadInfoParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the fetch files download info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FetchFilesDownloadInfoParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the fetch files download info params
func (o *FetchFilesDownloadInfoParams) WithTimeout(timeout time.Duration) *FetchFilesDownloadInfoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the fetch files download info params
func (o *FetchFilesDownloadInfoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the fetch files download info params
func (o *FetchFilesDownloadInfoParams) WithContext(ctx context.Context) *FetchFilesDownloadInfoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the fetch files download info params
func (o *FetchFilesDownloadInfoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the fetch files download info params
func (o *FetchFilesDownloadInfoParams) WithHTTPClient(client *http.Client) *FetchFilesDownloadInfoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the fetch files download info params
func (o *FetchFilesDownloadInfoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the fetch files download info params
func (o *FetchFilesDownloadInfoParams) WithFilter(filter *string) *FetchFilesDownloadInfoParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the fetch files download info params
func (o *FetchFilesDownloadInfoParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithSort adds the sort to the fetch files download info params
func (o *FetchFilesDownloadInfoParams) WithSort(sort *string) *FetchFilesDownloadInfoParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the fetch files download info params
func (o *FetchFilesDownloadInfoParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *FetchFilesDownloadInfoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
