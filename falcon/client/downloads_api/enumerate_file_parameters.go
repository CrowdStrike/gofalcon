// Code generated by go-swagger; DO NOT EDIT.

package downloads_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewEnumerateFileParams creates a new EnumerateFileParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewEnumerateFileParams() *EnumerateFileParams {
	return &EnumerateFileParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewEnumerateFileParamsWithTimeout creates a new EnumerateFileParams object
// with the ability to set a timeout on a request.
func NewEnumerateFileParamsWithTimeout(timeout time.Duration) *EnumerateFileParams {
	return &EnumerateFileParams{
		timeout: timeout,
	}
}

// NewEnumerateFileParamsWithContext creates a new EnumerateFileParams object
// with the ability to set a context for a request.
func NewEnumerateFileParamsWithContext(ctx context.Context) *EnumerateFileParams {
	return &EnumerateFileParams{
		Context: ctx,
	}
}

// NewEnumerateFileParamsWithHTTPClient creates a new EnumerateFileParams object
// with the ability to set a custom HTTPClient for a request.
func NewEnumerateFileParamsWithHTTPClient(client *http.Client) *EnumerateFileParams {
	return &EnumerateFileParams{
		HTTPClient: client,
	}
}

/*
EnumerateFileParams contains all the parameters to send to the API endpoint

	for the enumerate file operation.

	Typically these are written to a http.Request.
*/
type EnumerateFileParams struct {

	/* Arch.

	   Apply filtering on architecture
	*/
	Arch *string

	/* Category.

	   Apply filtering on file category
	*/
	Category *string

	/* FileName.

	   Apply filtering on file name
	*/
	FileName *string

	/* FileVersion.

	   Apply filtering on file version
	*/
	FileVersion *string

	/* Os.

	   Apply filtering on operating system
	*/
	Os *string

	/* Platform.

	   Apply filtering on file platform
	*/
	Platform *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the enumerate file params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EnumerateFileParams) WithDefaults() *EnumerateFileParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the enumerate file params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EnumerateFileParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the enumerate file params
func (o *EnumerateFileParams) WithTimeout(timeout time.Duration) *EnumerateFileParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the enumerate file params
func (o *EnumerateFileParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the enumerate file params
func (o *EnumerateFileParams) WithContext(ctx context.Context) *EnumerateFileParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the enumerate file params
func (o *EnumerateFileParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the enumerate file params
func (o *EnumerateFileParams) WithHTTPClient(client *http.Client) *EnumerateFileParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the enumerate file params
func (o *EnumerateFileParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArch adds the arch to the enumerate file params
func (o *EnumerateFileParams) WithArch(arch *string) *EnumerateFileParams {
	o.SetArch(arch)
	return o
}

// SetArch adds the arch to the enumerate file params
func (o *EnumerateFileParams) SetArch(arch *string) {
	o.Arch = arch
}

// WithCategory adds the category to the enumerate file params
func (o *EnumerateFileParams) WithCategory(category *string) *EnumerateFileParams {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the enumerate file params
func (o *EnumerateFileParams) SetCategory(category *string) {
	o.Category = category
}

// WithFileName adds the fileName to the enumerate file params
func (o *EnumerateFileParams) WithFileName(fileName *string) *EnumerateFileParams {
	o.SetFileName(fileName)
	return o
}

// SetFileName adds the fileName to the enumerate file params
func (o *EnumerateFileParams) SetFileName(fileName *string) {
	o.FileName = fileName
}

// WithFileVersion adds the fileVersion to the enumerate file params
func (o *EnumerateFileParams) WithFileVersion(fileVersion *string) *EnumerateFileParams {
	o.SetFileVersion(fileVersion)
	return o
}

// SetFileVersion adds the fileVersion to the enumerate file params
func (o *EnumerateFileParams) SetFileVersion(fileVersion *string) {
	o.FileVersion = fileVersion
}

// WithOs adds the os to the enumerate file params
func (o *EnumerateFileParams) WithOs(os *string) *EnumerateFileParams {
	o.SetOs(os)
	return o
}

// SetOs adds the os to the enumerate file params
func (o *EnumerateFileParams) SetOs(os *string) {
	o.Os = os
}

// WithPlatform adds the platform to the enumerate file params
func (o *EnumerateFileParams) WithPlatform(platform *string) *EnumerateFileParams {
	o.SetPlatform(platform)
	return o
}

// SetPlatform adds the platform to the enumerate file params
func (o *EnumerateFileParams) SetPlatform(platform *string) {
	o.Platform = platform
}

// WriteToRequest writes these params to a swagger request
func (o *EnumerateFileParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Arch != nil {

		// query param arch
		var qrArch string

		if o.Arch != nil {
			qrArch = *o.Arch
		}
		qArch := qrArch
		if qArch != "" {

			if err := r.SetQueryParam("arch", qArch); err != nil {
				return err
			}
		}
	}

	if o.Category != nil {

		// query param category
		var qrCategory string

		if o.Category != nil {
			qrCategory = *o.Category
		}
		qCategory := qrCategory
		if qCategory != "" {

			if err := r.SetQueryParam("category", qCategory); err != nil {
				return err
			}
		}
	}

	if o.FileName != nil {

		// query param file_name
		var qrFileName string

		if o.FileName != nil {
			qrFileName = *o.FileName
		}
		qFileName := qrFileName
		if qFileName != "" {

			if err := r.SetQueryParam("file_name", qFileName); err != nil {
				return err
			}
		}
	}

	if o.FileVersion != nil {

		// query param file_version
		var qrFileVersion string

		if o.FileVersion != nil {
			qrFileVersion = *o.FileVersion
		}
		qFileVersion := qrFileVersion
		if qFileVersion != "" {

			if err := r.SetQueryParam("file_version", qFileVersion); err != nil {
				return err
			}
		}
	}

	if o.Os != nil {

		// query param os
		var qrOs string

		if o.Os != nil {
			qrOs = *o.Os
		}
		qOs := qrOs
		if qOs != "" {

			if err := r.SetQueryParam("os", qOs); err != nil {
				return err
			}
		}
	}

	if o.Platform != nil {

		// query param platform
		var qrPlatform string

		if o.Platform != nil {
			qrPlatform = *o.Platform
		}
		qPlatform := qrPlatform
		if qPlatform != "" {

			if err := r.SetQueryParam("platform", qPlatform); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
