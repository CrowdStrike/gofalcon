// Code generated by go-swagger; DO NOT EDIT.

package downloads_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// EnumerateFileReader is a Reader for the EnumerateFile structure.
type EnumerateFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnumerateFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEnumerateFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEnumerateFileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEnumerateFileUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEnumerateFileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewEnumerateFileTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEnumerateFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /csdownloads/entities/files/enumerate/v1] EnumerateFile", response, response.Code())
	}
}

// NewEnumerateFileOK creates a EnumerateFileOK with default headers values
func NewEnumerateFileOK() *EnumerateFileOK {
	return &EnumerateFileOK{}
}

/*
EnumerateFileOK describes a response with status code 200, with default header values.

OK
*/
type EnumerateFileOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this enumerate file o k response has a 2xx status code
func (o *EnumerateFileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this enumerate file o k response has a 3xx status code
func (o *EnumerateFileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enumerate file o k response has a 4xx status code
func (o *EnumerateFileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this enumerate file o k response has a 5xx status code
func (o *EnumerateFileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this enumerate file o k response a status code equal to that given
func (o *EnumerateFileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the enumerate file o k response
func (o *EnumerateFileOK) Code() int {
	return 200
}

func (o *EnumerateFileOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /csdownloads/entities/files/enumerate/v1][%d] enumerateFileOK %s", 200, payload)
}

func (o *EnumerateFileOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /csdownloads/entities/files/enumerate/v1][%d] enumerateFileOK %s", 200, payload)
}

func (o *EnumerateFileOK) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *EnumerateFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnumerateFileBadRequest creates a EnumerateFileBadRequest with default headers values
func NewEnumerateFileBadRequest() *EnumerateFileBadRequest {
	return &EnumerateFileBadRequest{}
}

/*
EnumerateFileBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type EnumerateFileBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this enumerate file bad request response has a 2xx status code
func (o *EnumerateFileBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enumerate file bad request response has a 3xx status code
func (o *EnumerateFileBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enumerate file bad request response has a 4xx status code
func (o *EnumerateFileBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this enumerate file bad request response has a 5xx status code
func (o *EnumerateFileBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this enumerate file bad request response a status code equal to that given
func (o *EnumerateFileBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the enumerate file bad request response
func (o *EnumerateFileBadRequest) Code() int {
	return 400
}

func (o *EnumerateFileBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /csdownloads/entities/files/enumerate/v1][%d] enumerateFileBadRequest %s", 400, payload)
}

func (o *EnumerateFileBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /csdownloads/entities/files/enumerate/v1][%d] enumerateFileBadRequest %s", 400, payload)
}

func (o *EnumerateFileBadRequest) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *EnumerateFileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnumerateFileUnauthorized creates a EnumerateFileUnauthorized with default headers values
func NewEnumerateFileUnauthorized() *EnumerateFileUnauthorized {
	return &EnumerateFileUnauthorized{}
}

/*
EnumerateFileUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type EnumerateFileUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this enumerate file unauthorized response has a 2xx status code
func (o *EnumerateFileUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enumerate file unauthorized response has a 3xx status code
func (o *EnumerateFileUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enumerate file unauthorized response has a 4xx status code
func (o *EnumerateFileUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this enumerate file unauthorized response has a 5xx status code
func (o *EnumerateFileUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this enumerate file unauthorized response a status code equal to that given
func (o *EnumerateFileUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the enumerate file unauthorized response
func (o *EnumerateFileUnauthorized) Code() int {
	return 401
}

func (o *EnumerateFileUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /csdownloads/entities/files/enumerate/v1][%d] enumerateFileUnauthorized %s", 401, payload)
}

func (o *EnumerateFileUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /csdownloads/entities/files/enumerate/v1][%d] enumerateFileUnauthorized %s", 401, payload)
}

func (o *EnumerateFileUnauthorized) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *EnumerateFileUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnumerateFileForbidden creates a EnumerateFileForbidden with default headers values
func NewEnumerateFileForbidden() *EnumerateFileForbidden {
	return &EnumerateFileForbidden{}
}

/*
EnumerateFileForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type EnumerateFileForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this enumerate file forbidden response has a 2xx status code
func (o *EnumerateFileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enumerate file forbidden response has a 3xx status code
func (o *EnumerateFileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enumerate file forbidden response has a 4xx status code
func (o *EnumerateFileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this enumerate file forbidden response has a 5xx status code
func (o *EnumerateFileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this enumerate file forbidden response a status code equal to that given
func (o *EnumerateFileForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the enumerate file forbidden response
func (o *EnumerateFileForbidden) Code() int {
	return 403
}

func (o *EnumerateFileForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /csdownloads/entities/files/enumerate/v1][%d] enumerateFileForbidden %s", 403, payload)
}

func (o *EnumerateFileForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /csdownloads/entities/files/enumerate/v1][%d] enumerateFileForbidden %s", 403, payload)
}

func (o *EnumerateFileForbidden) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *EnumerateFileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnumerateFileTooManyRequests creates a EnumerateFileTooManyRequests with default headers values
func NewEnumerateFileTooManyRequests() *EnumerateFileTooManyRequests {
	return &EnumerateFileTooManyRequests{}
}

/*
EnumerateFileTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type EnumerateFileTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this enumerate file too many requests response has a 2xx status code
func (o *EnumerateFileTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enumerate file too many requests response has a 3xx status code
func (o *EnumerateFileTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enumerate file too many requests response has a 4xx status code
func (o *EnumerateFileTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this enumerate file too many requests response has a 5xx status code
func (o *EnumerateFileTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this enumerate file too many requests response a status code equal to that given
func (o *EnumerateFileTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the enumerate file too many requests response
func (o *EnumerateFileTooManyRequests) Code() int {
	return 429
}

func (o *EnumerateFileTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /csdownloads/entities/files/enumerate/v1][%d] enumerateFileTooManyRequests %s", 429, payload)
}

func (o *EnumerateFileTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /csdownloads/entities/files/enumerate/v1][%d] enumerateFileTooManyRequests %s", 429, payload)
}

func (o *EnumerateFileTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *EnumerateFileTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnumerateFileInternalServerError creates a EnumerateFileInternalServerError with default headers values
func NewEnumerateFileInternalServerError() *EnumerateFileInternalServerError {
	return &EnumerateFileInternalServerError{}
}

/*
EnumerateFileInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type EnumerateFileInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this enumerate file internal server error response has a 2xx status code
func (o *EnumerateFileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enumerate file internal server error response has a 3xx status code
func (o *EnumerateFileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enumerate file internal server error response has a 4xx status code
func (o *EnumerateFileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this enumerate file internal server error response has a 5xx status code
func (o *EnumerateFileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this enumerate file internal server error response a status code equal to that given
func (o *EnumerateFileInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the enumerate file internal server error response
func (o *EnumerateFileInternalServerError) Code() int {
	return 500
}

func (o *EnumerateFileInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /csdownloads/entities/files/enumerate/v1][%d] enumerateFileInternalServerError %s", 500, payload)
}

func (o *EnumerateFileInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /csdownloads/entities/files/enumerate/v1][%d] enumerateFileInternalServerError %s", 500, payload)
}

func (o *EnumerateFileInternalServerError) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *EnumerateFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
