// Code generated by go-swagger; DO NOT EDIT.

package downloads_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// FetchFilesDownloadInfoReader is a Reader for the FetchFilesDownloadInfo structure.
type FetchFilesDownloadInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FetchFilesDownloadInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFetchFilesDownloadInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFetchFilesDownloadInfoBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewFetchFilesDownloadInfoUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFetchFilesDownloadInfoForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewFetchFilesDownloadInfoTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewFetchFilesDownloadInfoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /csdownloads/combined/files-download/v1] FetchFilesDownloadInfo", response, response.Code())
	}
}

// NewFetchFilesDownloadInfoOK creates a FetchFilesDownloadInfoOK with default headers values
func NewFetchFilesDownloadInfoOK() *FetchFilesDownloadInfoOK {
	return &FetchFilesDownloadInfoOK{}
}

/*
FetchFilesDownloadInfoOK describes a response with status code 200, with default header values.

OK
*/
type FetchFilesDownloadInfoOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this fetch files download info o k response has a 2xx status code
func (o *FetchFilesDownloadInfoOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this fetch files download info o k response has a 3xx status code
func (o *FetchFilesDownloadInfoOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this fetch files download info o k response has a 4xx status code
func (o *FetchFilesDownloadInfoOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this fetch files download info o k response has a 5xx status code
func (o *FetchFilesDownloadInfoOK) IsServerError() bool {
	return false
}

// IsCode returns true when this fetch files download info o k response a status code equal to that given
func (o *FetchFilesDownloadInfoOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the fetch files download info o k response
func (o *FetchFilesDownloadInfoOK) Code() int {
	return 200
}

func (o *FetchFilesDownloadInfoOK) Error() string {
	return fmt.Sprintf("[GET /csdownloads/combined/files-download/v1][%d] fetchFilesDownloadInfoOK  %+v", 200, o.Payload)
}

func (o *FetchFilesDownloadInfoOK) String() string {
	return fmt.Sprintf("[GET /csdownloads/combined/files-download/v1][%d] fetchFilesDownloadInfoOK  %+v", 200, o.Payload)
}

func (o *FetchFilesDownloadInfoOK) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *FetchFilesDownloadInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFetchFilesDownloadInfoBadRequest creates a FetchFilesDownloadInfoBadRequest with default headers values
func NewFetchFilesDownloadInfoBadRequest() *FetchFilesDownloadInfoBadRequest {
	return &FetchFilesDownloadInfoBadRequest{}
}

/*
FetchFilesDownloadInfoBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type FetchFilesDownloadInfoBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this fetch files download info bad request response has a 2xx status code
func (o *FetchFilesDownloadInfoBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this fetch files download info bad request response has a 3xx status code
func (o *FetchFilesDownloadInfoBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this fetch files download info bad request response has a 4xx status code
func (o *FetchFilesDownloadInfoBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this fetch files download info bad request response has a 5xx status code
func (o *FetchFilesDownloadInfoBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this fetch files download info bad request response a status code equal to that given
func (o *FetchFilesDownloadInfoBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the fetch files download info bad request response
func (o *FetchFilesDownloadInfoBadRequest) Code() int {
	return 400
}

func (o *FetchFilesDownloadInfoBadRequest) Error() string {
	return fmt.Sprintf("[GET /csdownloads/combined/files-download/v1][%d] fetchFilesDownloadInfoBadRequest  %+v", 400, o.Payload)
}

func (o *FetchFilesDownloadInfoBadRequest) String() string {
	return fmt.Sprintf("[GET /csdownloads/combined/files-download/v1][%d] fetchFilesDownloadInfoBadRequest  %+v", 400, o.Payload)
}

func (o *FetchFilesDownloadInfoBadRequest) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *FetchFilesDownloadInfoBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFetchFilesDownloadInfoUnauthorized creates a FetchFilesDownloadInfoUnauthorized with default headers values
func NewFetchFilesDownloadInfoUnauthorized() *FetchFilesDownloadInfoUnauthorized {
	return &FetchFilesDownloadInfoUnauthorized{}
}

/*
FetchFilesDownloadInfoUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type FetchFilesDownloadInfoUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this fetch files download info unauthorized response has a 2xx status code
func (o *FetchFilesDownloadInfoUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this fetch files download info unauthorized response has a 3xx status code
func (o *FetchFilesDownloadInfoUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this fetch files download info unauthorized response has a 4xx status code
func (o *FetchFilesDownloadInfoUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this fetch files download info unauthorized response has a 5xx status code
func (o *FetchFilesDownloadInfoUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this fetch files download info unauthorized response a status code equal to that given
func (o *FetchFilesDownloadInfoUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the fetch files download info unauthorized response
func (o *FetchFilesDownloadInfoUnauthorized) Code() int {
	return 401
}

func (o *FetchFilesDownloadInfoUnauthorized) Error() string {
	return fmt.Sprintf("[GET /csdownloads/combined/files-download/v1][%d] fetchFilesDownloadInfoUnauthorized  %+v", 401, o.Payload)
}

func (o *FetchFilesDownloadInfoUnauthorized) String() string {
	return fmt.Sprintf("[GET /csdownloads/combined/files-download/v1][%d] fetchFilesDownloadInfoUnauthorized  %+v", 401, o.Payload)
}

func (o *FetchFilesDownloadInfoUnauthorized) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *FetchFilesDownloadInfoUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFetchFilesDownloadInfoForbidden creates a FetchFilesDownloadInfoForbidden with default headers values
func NewFetchFilesDownloadInfoForbidden() *FetchFilesDownloadInfoForbidden {
	return &FetchFilesDownloadInfoForbidden{}
}

/*
FetchFilesDownloadInfoForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type FetchFilesDownloadInfoForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this fetch files download info forbidden response has a 2xx status code
func (o *FetchFilesDownloadInfoForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this fetch files download info forbidden response has a 3xx status code
func (o *FetchFilesDownloadInfoForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this fetch files download info forbidden response has a 4xx status code
func (o *FetchFilesDownloadInfoForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this fetch files download info forbidden response has a 5xx status code
func (o *FetchFilesDownloadInfoForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this fetch files download info forbidden response a status code equal to that given
func (o *FetchFilesDownloadInfoForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the fetch files download info forbidden response
func (o *FetchFilesDownloadInfoForbidden) Code() int {
	return 403
}

func (o *FetchFilesDownloadInfoForbidden) Error() string {
	return fmt.Sprintf("[GET /csdownloads/combined/files-download/v1][%d] fetchFilesDownloadInfoForbidden  %+v", 403, o.Payload)
}

func (o *FetchFilesDownloadInfoForbidden) String() string {
	return fmt.Sprintf("[GET /csdownloads/combined/files-download/v1][%d] fetchFilesDownloadInfoForbidden  %+v", 403, o.Payload)
}

func (o *FetchFilesDownloadInfoForbidden) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *FetchFilesDownloadInfoForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFetchFilesDownloadInfoTooManyRequests creates a FetchFilesDownloadInfoTooManyRequests with default headers values
func NewFetchFilesDownloadInfoTooManyRequests() *FetchFilesDownloadInfoTooManyRequests {
	return &FetchFilesDownloadInfoTooManyRequests{}
}

/*
FetchFilesDownloadInfoTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type FetchFilesDownloadInfoTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this fetch files download info too many requests response has a 2xx status code
func (o *FetchFilesDownloadInfoTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this fetch files download info too many requests response has a 3xx status code
func (o *FetchFilesDownloadInfoTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this fetch files download info too many requests response has a 4xx status code
func (o *FetchFilesDownloadInfoTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this fetch files download info too many requests response has a 5xx status code
func (o *FetchFilesDownloadInfoTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this fetch files download info too many requests response a status code equal to that given
func (o *FetchFilesDownloadInfoTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the fetch files download info too many requests response
func (o *FetchFilesDownloadInfoTooManyRequests) Code() int {
	return 429
}

func (o *FetchFilesDownloadInfoTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /csdownloads/combined/files-download/v1][%d] fetchFilesDownloadInfoTooManyRequests  %+v", 429, o.Payload)
}

func (o *FetchFilesDownloadInfoTooManyRequests) String() string {
	return fmt.Sprintf("[GET /csdownloads/combined/files-download/v1][%d] fetchFilesDownloadInfoTooManyRequests  %+v", 429, o.Payload)
}

func (o *FetchFilesDownloadInfoTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *FetchFilesDownloadInfoTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFetchFilesDownloadInfoInternalServerError creates a FetchFilesDownloadInfoInternalServerError with default headers values
func NewFetchFilesDownloadInfoInternalServerError() *FetchFilesDownloadInfoInternalServerError {
	return &FetchFilesDownloadInfoInternalServerError{}
}

/*
FetchFilesDownloadInfoInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type FetchFilesDownloadInfoInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this fetch files download info internal server error response has a 2xx status code
func (o *FetchFilesDownloadInfoInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this fetch files download info internal server error response has a 3xx status code
func (o *FetchFilesDownloadInfoInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this fetch files download info internal server error response has a 4xx status code
func (o *FetchFilesDownloadInfoInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this fetch files download info internal server error response has a 5xx status code
func (o *FetchFilesDownloadInfoInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this fetch files download info internal server error response a status code equal to that given
func (o *FetchFilesDownloadInfoInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the fetch files download info internal server error response
func (o *FetchFilesDownloadInfoInternalServerError) Code() int {
	return 500
}

func (o *FetchFilesDownloadInfoInternalServerError) Error() string {
	return fmt.Sprintf("[GET /csdownloads/combined/files-download/v1][%d] fetchFilesDownloadInfoInternalServerError  %+v", 500, o.Payload)
}

func (o *FetchFilesDownloadInfoInternalServerError) String() string {
	return fmt.Sprintf("[GET /csdownloads/combined/files-download/v1][%d] fetchFilesDownloadInfoInternalServerError  %+v", 500, o.Payload)
}

func (o *FetchFilesDownloadInfoInternalServerError) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *FetchFilesDownloadInfoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
