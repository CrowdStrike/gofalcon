// Code generated by go-swagger; DO NOT EDIT.

package kubernetes_container_compliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CombinedNodesFindingsReader is a Reader for the CombinedNodesFindings structure.
type CombinedNodesFindingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CombinedNodesFindingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCombinedNodesFindingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCombinedNodesFindingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCombinedNodesFindingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCombinedNodesFindingsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCombinedNodesFindingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /container-compliance/combined/findings-by-nodes/v2] CombinedNodesFindings", response, response.Code())
	}
}

// NewCombinedNodesFindingsOK creates a CombinedNodesFindingsOK with default headers values
func NewCombinedNodesFindingsOK() *CombinedNodesFindingsOK {
	return &CombinedNodesFindingsOK{}
}

/*
CombinedNodesFindingsOK describes a response with status code 200, with default header values.

OK
*/
type CombinedNodesFindingsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAPIResponseNodesFindingsV1
}

// IsSuccess returns true when this combined nodes findings o k response has a 2xx status code
func (o *CombinedNodesFindingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this combined nodes findings o k response has a 3xx status code
func (o *CombinedNodesFindingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined nodes findings o k response has a 4xx status code
func (o *CombinedNodesFindingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this combined nodes findings o k response has a 5xx status code
func (o *CombinedNodesFindingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this combined nodes findings o k response a status code equal to that given
func (o *CombinedNodesFindingsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the combined nodes findings o k response
func (o *CombinedNodesFindingsOK) Code() int {
	return 200
}

func (o *CombinedNodesFindingsOK) Error() string {
	return fmt.Sprintf("[GET /container-compliance/combined/findings-by-nodes/v2][%d] combinedNodesFindingsOK  %+v", 200, o.Payload)
}

func (o *CombinedNodesFindingsOK) String() string {
	return fmt.Sprintf("[GET /container-compliance/combined/findings-by-nodes/v2][%d] combinedNodesFindingsOK  %+v", 200, o.Payload)
}

func (o *CombinedNodesFindingsOK) GetPayload() *models.DomainAPIResponseNodesFindingsV1 {
	return o.Payload
}

func (o *CombinedNodesFindingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAPIResponseNodesFindingsV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedNodesFindingsBadRequest creates a CombinedNodesFindingsBadRequest with default headers values
func NewCombinedNodesFindingsBadRequest() *CombinedNodesFindingsBadRequest {
	return &CombinedNodesFindingsBadRequest{}
}

/*
CombinedNodesFindingsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CombinedNodesFindingsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAPIResponseNodesFindingsV1
}

// IsSuccess returns true when this combined nodes findings bad request response has a 2xx status code
func (o *CombinedNodesFindingsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined nodes findings bad request response has a 3xx status code
func (o *CombinedNodesFindingsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined nodes findings bad request response has a 4xx status code
func (o *CombinedNodesFindingsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this combined nodes findings bad request response has a 5xx status code
func (o *CombinedNodesFindingsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this combined nodes findings bad request response a status code equal to that given
func (o *CombinedNodesFindingsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the combined nodes findings bad request response
func (o *CombinedNodesFindingsBadRequest) Code() int {
	return 400
}

func (o *CombinedNodesFindingsBadRequest) Error() string {
	return fmt.Sprintf("[GET /container-compliance/combined/findings-by-nodes/v2][%d] combinedNodesFindingsBadRequest  %+v", 400, o.Payload)
}

func (o *CombinedNodesFindingsBadRequest) String() string {
	return fmt.Sprintf("[GET /container-compliance/combined/findings-by-nodes/v2][%d] combinedNodesFindingsBadRequest  %+v", 400, o.Payload)
}

func (o *CombinedNodesFindingsBadRequest) GetPayload() *models.DomainAPIResponseNodesFindingsV1 {
	return o.Payload
}

func (o *CombinedNodesFindingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAPIResponseNodesFindingsV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedNodesFindingsForbidden creates a CombinedNodesFindingsForbidden with default headers values
func NewCombinedNodesFindingsForbidden() *CombinedNodesFindingsForbidden {
	return &CombinedNodesFindingsForbidden{}
}

/*
CombinedNodesFindingsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CombinedNodesFindingsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this combined nodes findings forbidden response has a 2xx status code
func (o *CombinedNodesFindingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined nodes findings forbidden response has a 3xx status code
func (o *CombinedNodesFindingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined nodes findings forbidden response has a 4xx status code
func (o *CombinedNodesFindingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this combined nodes findings forbidden response has a 5xx status code
func (o *CombinedNodesFindingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this combined nodes findings forbidden response a status code equal to that given
func (o *CombinedNodesFindingsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the combined nodes findings forbidden response
func (o *CombinedNodesFindingsForbidden) Code() int {
	return 403
}

func (o *CombinedNodesFindingsForbidden) Error() string {
	return fmt.Sprintf("[GET /container-compliance/combined/findings-by-nodes/v2][%d] combinedNodesFindingsForbidden  %+v", 403, o.Payload)
}

func (o *CombinedNodesFindingsForbidden) String() string {
	return fmt.Sprintf("[GET /container-compliance/combined/findings-by-nodes/v2][%d] combinedNodesFindingsForbidden  %+v", 403, o.Payload)
}

func (o *CombinedNodesFindingsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CombinedNodesFindingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedNodesFindingsTooManyRequests creates a CombinedNodesFindingsTooManyRequests with default headers values
func NewCombinedNodesFindingsTooManyRequests() *CombinedNodesFindingsTooManyRequests {
	return &CombinedNodesFindingsTooManyRequests{}
}

/*
CombinedNodesFindingsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CombinedNodesFindingsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this combined nodes findings too many requests response has a 2xx status code
func (o *CombinedNodesFindingsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined nodes findings too many requests response has a 3xx status code
func (o *CombinedNodesFindingsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined nodes findings too many requests response has a 4xx status code
func (o *CombinedNodesFindingsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this combined nodes findings too many requests response has a 5xx status code
func (o *CombinedNodesFindingsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this combined nodes findings too many requests response a status code equal to that given
func (o *CombinedNodesFindingsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the combined nodes findings too many requests response
func (o *CombinedNodesFindingsTooManyRequests) Code() int {
	return 429
}

func (o *CombinedNodesFindingsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /container-compliance/combined/findings-by-nodes/v2][%d] combinedNodesFindingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *CombinedNodesFindingsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /container-compliance/combined/findings-by-nodes/v2][%d] combinedNodesFindingsTooManyRequests  %+v", 429, o.Payload)
}

func (o *CombinedNodesFindingsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CombinedNodesFindingsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedNodesFindingsInternalServerError creates a CombinedNodesFindingsInternalServerError with default headers values
func NewCombinedNodesFindingsInternalServerError() *CombinedNodesFindingsInternalServerError {
	return &CombinedNodesFindingsInternalServerError{}
}

/*
CombinedNodesFindingsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CombinedNodesFindingsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAPIResponseNodesFindingsV1
}

// IsSuccess returns true when this combined nodes findings internal server error response has a 2xx status code
func (o *CombinedNodesFindingsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined nodes findings internal server error response has a 3xx status code
func (o *CombinedNodesFindingsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined nodes findings internal server error response has a 4xx status code
func (o *CombinedNodesFindingsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this combined nodes findings internal server error response has a 5xx status code
func (o *CombinedNodesFindingsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this combined nodes findings internal server error response a status code equal to that given
func (o *CombinedNodesFindingsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the combined nodes findings internal server error response
func (o *CombinedNodesFindingsInternalServerError) Code() int {
	return 500
}

func (o *CombinedNodesFindingsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /container-compliance/combined/findings-by-nodes/v2][%d] combinedNodesFindingsInternalServerError  %+v", 500, o.Payload)
}

func (o *CombinedNodesFindingsInternalServerError) String() string {
	return fmt.Sprintf("[GET /container-compliance/combined/findings-by-nodes/v2][%d] combinedNodesFindingsInternalServerError  %+v", 500, o.Payload)
}

func (o *CombinedNodesFindingsInternalServerError) GetPayload() *models.DomainAPIResponseNodesFindingsV1 {
	return o.Payload
}

func (o *CombinedNodesFindingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAPIResponseNodesFindingsV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
