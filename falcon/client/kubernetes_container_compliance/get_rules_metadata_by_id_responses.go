// Code generated by go-swagger; DO NOT EDIT.

package kubernetes_container_compliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetRulesMetadataByIDReader is a Reader for the GetRulesMetadataByID structure.
type GetRulesMetadataByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRulesMetadataByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRulesMetadataByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRulesMetadataByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRulesMetadataByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRulesMetadataByIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRulesMetadataByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /container-compliance/combined/rule-details-by-rule-ids/v1] getRulesMetadataByID", response, response.Code())
	}
}

// NewGetRulesMetadataByIDOK creates a GetRulesMetadataByIDOK with default headers values
func NewGetRulesMetadataByIDOK() *GetRulesMetadataByIDOK {
	return &GetRulesMetadataByIDOK{}
}

/*
GetRulesMetadataByIDOK describes a response with status code 200, with default header values.

OK
*/
type GetRulesMetadataByIDOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainRuleMetadataResponse
}

// IsSuccess returns true when this get rules metadata by Id o k response has a 2xx status code
func (o *GetRulesMetadataByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get rules metadata by Id o k response has a 3xx status code
func (o *GetRulesMetadataByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rules metadata by Id o k response has a 4xx status code
func (o *GetRulesMetadataByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get rules metadata by Id o k response has a 5xx status code
func (o *GetRulesMetadataByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get rules metadata by Id o k response a status code equal to that given
func (o *GetRulesMetadataByIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get rules metadata by Id o k response
func (o *GetRulesMetadataByIDOK) Code() int {
	return 200
}

func (o *GetRulesMetadataByIDOK) Error() string {
	return fmt.Sprintf("[GET /container-compliance/combined/rule-details-by-rule-ids/v1][%d] getRulesMetadataByIdOK  %+v", 200, o.Payload)
}

func (o *GetRulesMetadataByIDOK) String() string {
	return fmt.Sprintf("[GET /container-compliance/combined/rule-details-by-rule-ids/v1][%d] getRulesMetadataByIdOK  %+v", 200, o.Payload)
}

func (o *GetRulesMetadataByIDOK) GetPayload() *models.DomainRuleMetadataResponse {
	return o.Payload
}

func (o *GetRulesMetadataByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainRuleMetadataResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRulesMetadataByIDBadRequest creates a GetRulesMetadataByIDBadRequest with default headers values
func NewGetRulesMetadataByIDBadRequest() *GetRulesMetadataByIDBadRequest {
	return &GetRulesMetadataByIDBadRequest{}
}

/*
GetRulesMetadataByIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetRulesMetadataByIDBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainRuleMetadataResponse
}

// IsSuccess returns true when this get rules metadata by Id bad request response has a 2xx status code
func (o *GetRulesMetadataByIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rules metadata by Id bad request response has a 3xx status code
func (o *GetRulesMetadataByIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rules metadata by Id bad request response has a 4xx status code
func (o *GetRulesMetadataByIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rules metadata by Id bad request response has a 5xx status code
func (o *GetRulesMetadataByIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get rules metadata by Id bad request response a status code equal to that given
func (o *GetRulesMetadataByIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get rules metadata by Id bad request response
func (o *GetRulesMetadataByIDBadRequest) Code() int {
	return 400
}

func (o *GetRulesMetadataByIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /container-compliance/combined/rule-details-by-rule-ids/v1][%d] getRulesMetadataByIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetRulesMetadataByIDBadRequest) String() string {
	return fmt.Sprintf("[GET /container-compliance/combined/rule-details-by-rule-ids/v1][%d] getRulesMetadataByIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetRulesMetadataByIDBadRequest) GetPayload() *models.DomainRuleMetadataResponse {
	return o.Payload
}

func (o *GetRulesMetadataByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainRuleMetadataResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRulesMetadataByIDForbidden creates a GetRulesMetadataByIDForbidden with default headers values
func NewGetRulesMetadataByIDForbidden() *GetRulesMetadataByIDForbidden {
	return &GetRulesMetadataByIDForbidden{}
}

/*
GetRulesMetadataByIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetRulesMetadataByIDForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get rules metadata by Id forbidden response has a 2xx status code
func (o *GetRulesMetadataByIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rules metadata by Id forbidden response has a 3xx status code
func (o *GetRulesMetadataByIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rules metadata by Id forbidden response has a 4xx status code
func (o *GetRulesMetadataByIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rules metadata by Id forbidden response has a 5xx status code
func (o *GetRulesMetadataByIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get rules metadata by Id forbidden response a status code equal to that given
func (o *GetRulesMetadataByIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get rules metadata by Id forbidden response
func (o *GetRulesMetadataByIDForbidden) Code() int {
	return 403
}

func (o *GetRulesMetadataByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /container-compliance/combined/rule-details-by-rule-ids/v1][%d] getRulesMetadataByIdForbidden  %+v", 403, o.Payload)
}

func (o *GetRulesMetadataByIDForbidden) String() string {
	return fmt.Sprintf("[GET /container-compliance/combined/rule-details-by-rule-ids/v1][%d] getRulesMetadataByIdForbidden  %+v", 403, o.Payload)
}

func (o *GetRulesMetadataByIDForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetRulesMetadataByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRulesMetadataByIDTooManyRequests creates a GetRulesMetadataByIDTooManyRequests with default headers values
func NewGetRulesMetadataByIDTooManyRequests() *GetRulesMetadataByIDTooManyRequests {
	return &GetRulesMetadataByIDTooManyRequests{}
}

/*
GetRulesMetadataByIDTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetRulesMetadataByIDTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get rules metadata by Id too many requests response has a 2xx status code
func (o *GetRulesMetadataByIDTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rules metadata by Id too many requests response has a 3xx status code
func (o *GetRulesMetadataByIDTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rules metadata by Id too many requests response has a 4xx status code
func (o *GetRulesMetadataByIDTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rules metadata by Id too many requests response has a 5xx status code
func (o *GetRulesMetadataByIDTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get rules metadata by Id too many requests response a status code equal to that given
func (o *GetRulesMetadataByIDTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get rules metadata by Id too many requests response
func (o *GetRulesMetadataByIDTooManyRequests) Code() int {
	return 429
}

func (o *GetRulesMetadataByIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /container-compliance/combined/rule-details-by-rule-ids/v1][%d] getRulesMetadataByIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRulesMetadataByIDTooManyRequests) String() string {
	return fmt.Sprintf("[GET /container-compliance/combined/rule-details-by-rule-ids/v1][%d] getRulesMetadataByIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRulesMetadataByIDTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetRulesMetadataByIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRulesMetadataByIDInternalServerError creates a GetRulesMetadataByIDInternalServerError with default headers values
func NewGetRulesMetadataByIDInternalServerError() *GetRulesMetadataByIDInternalServerError {
	return &GetRulesMetadataByIDInternalServerError{}
}

/*
GetRulesMetadataByIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetRulesMetadataByIDInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainRuleMetadataResponse
}

// IsSuccess returns true when this get rules metadata by Id internal server error response has a 2xx status code
func (o *GetRulesMetadataByIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rules metadata by Id internal server error response has a 3xx status code
func (o *GetRulesMetadataByIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rules metadata by Id internal server error response has a 4xx status code
func (o *GetRulesMetadataByIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get rules metadata by Id internal server error response has a 5xx status code
func (o *GetRulesMetadataByIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get rules metadata by Id internal server error response a status code equal to that given
func (o *GetRulesMetadataByIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get rules metadata by Id internal server error response
func (o *GetRulesMetadataByIDInternalServerError) Code() int {
	return 500
}

func (o *GetRulesMetadataByIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /container-compliance/combined/rule-details-by-rule-ids/v1][%d] getRulesMetadataByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRulesMetadataByIDInternalServerError) String() string {
	return fmt.Sprintf("[GET /container-compliance/combined/rule-details-by-rule-ids/v1][%d] getRulesMetadataByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRulesMetadataByIDInternalServerError) GetPayload() *models.DomainRuleMetadataResponse {
	return o.Payload
}

func (o *GetRulesMetadataByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainRuleMetadataResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
