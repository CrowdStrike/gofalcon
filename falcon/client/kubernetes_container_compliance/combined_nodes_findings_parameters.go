// Code generated by go-swagger; DO NOT EDIT.

package kubernetes_container_compliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCombinedNodesFindingsParams creates a new CombinedNodesFindingsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCombinedNodesFindingsParams() *CombinedNodesFindingsParams {
	return &CombinedNodesFindingsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCombinedNodesFindingsParamsWithTimeout creates a new CombinedNodesFindingsParams object
// with the ability to set a timeout on a request.
func NewCombinedNodesFindingsParamsWithTimeout(timeout time.Duration) *CombinedNodesFindingsParams {
	return &CombinedNodesFindingsParams{
		timeout: timeout,
	}
}

// NewCombinedNodesFindingsParamsWithContext creates a new CombinedNodesFindingsParams object
// with the ability to set a context for a request.
func NewCombinedNodesFindingsParamsWithContext(ctx context.Context) *CombinedNodesFindingsParams {
	return &CombinedNodesFindingsParams{
		Context: ctx,
	}
}

// NewCombinedNodesFindingsParamsWithHTTPClient creates a new CombinedNodesFindingsParams object
// with the ability to set a custom HTTPClient for a request.
func NewCombinedNodesFindingsParamsWithHTTPClient(client *http.Client) *CombinedNodesFindingsParams {
	return &CombinedNodesFindingsParams{
		HTTPClient: client,
	}
}

/*
CombinedNodesFindingsParams contains all the parameters to send to the API endpoint

	for the combined nodes findings operation.

	Typically these are written to a http.Request.
*/
type CombinedNodesFindingsParams struct {

	/* After.

	   A pagination token used with the `limit` parameter to manage pagination of results. On your first request, don't provide an `after` token. On subsequent requests, provide the `after` token from the previous response to continue from that place in the results.
	*/
	After *string

	/* Filter.

	   FQL filter expression used to limit the results. Filter fields include: cid, cloud_info.cloud_account_id, cloud_info.cloud_provider, cloud_info.cloud_region, cloud_info.cluster_id, cloud_info.cluster_name, cloud_info.cluster_type, compliance_finding.asset_type, compliance_finding.asset_uid, compliance_finding.framework_name, compliance_finding.framework_name_version, compliance_finding.framework_version, compliance_finding.id, compliance_finding.severity, compliance_finding.status, aid, node_id, node_name, node_type
	*/
	Filter *string

	/* Limit.

	   The maximum number of nodes for which assessments are to be returned: 1-100. Default is 100. Use with the after parameter to manage pagination of results.
	*/
	Limit *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the combined nodes findings params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CombinedNodesFindingsParams) WithDefaults() *CombinedNodesFindingsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the combined nodes findings params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CombinedNodesFindingsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the combined nodes findings params
func (o *CombinedNodesFindingsParams) WithTimeout(timeout time.Duration) *CombinedNodesFindingsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the combined nodes findings params
func (o *CombinedNodesFindingsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the combined nodes findings params
func (o *CombinedNodesFindingsParams) WithContext(ctx context.Context) *CombinedNodesFindingsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the combined nodes findings params
func (o *CombinedNodesFindingsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the combined nodes findings params
func (o *CombinedNodesFindingsParams) WithHTTPClient(client *http.Client) *CombinedNodesFindingsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the combined nodes findings params
func (o *CombinedNodesFindingsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the combined nodes findings params
func (o *CombinedNodesFindingsParams) WithAfter(after *string) *CombinedNodesFindingsParams {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the combined nodes findings params
func (o *CombinedNodesFindingsParams) SetAfter(after *string) {
	o.After = after
}

// WithFilter adds the filter to the combined nodes findings params
func (o *CombinedNodesFindingsParams) WithFilter(filter *string) *CombinedNodesFindingsParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the combined nodes findings params
func (o *CombinedNodesFindingsParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithLimit adds the limit to the combined nodes findings params
func (o *CombinedNodesFindingsParams) WithLimit(limit *int64) *CombinedNodesFindingsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the combined nodes findings params
func (o *CombinedNodesFindingsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WriteToRequest writes these params to a swagger request
func (o *CombinedNodesFindingsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter string

		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := qrAfter
		if qAfter != "" {

			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
