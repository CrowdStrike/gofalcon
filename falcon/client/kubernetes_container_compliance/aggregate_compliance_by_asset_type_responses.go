// Code generated by go-swagger; DO NOT EDIT.

package kubernetes_container_compliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// AggregateComplianceByAssetTypeReader is a Reader for the AggregateComplianceByAssetType structure.
type AggregateComplianceByAssetTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AggregateComplianceByAssetTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAggregateComplianceByAssetTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAggregateComplianceByAssetTypeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAggregateComplianceByAssetTypeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAggregateComplianceByAssetTypeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAggregateComplianceByAssetTypeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /container-compliance/aggregates/compliance-by-asset-type/v2] AggregateComplianceByAssetType", response, response.Code())
	}
}

// NewAggregateComplianceByAssetTypeOK creates a AggregateComplianceByAssetTypeOK with default headers values
func NewAggregateComplianceByAssetTypeOK() *AggregateComplianceByAssetTypeOK {
	return &AggregateComplianceByAssetTypeOK{}
}

/*
AggregateComplianceByAssetTypeOK describes a response with status code 200, with default header values.

OK
*/
type AggregateComplianceByAssetTypeOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAPIAggregateResponseComplianceByAssetTypeV1
}

// IsSuccess returns true when this aggregate compliance by asset type o k response has a 2xx status code
func (o *AggregateComplianceByAssetTypeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this aggregate compliance by asset type o k response has a 3xx status code
func (o *AggregateComplianceByAssetTypeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate compliance by asset type o k response has a 4xx status code
func (o *AggregateComplianceByAssetTypeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this aggregate compliance by asset type o k response has a 5xx status code
func (o *AggregateComplianceByAssetTypeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate compliance by asset type o k response a status code equal to that given
func (o *AggregateComplianceByAssetTypeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the aggregate compliance by asset type o k response
func (o *AggregateComplianceByAssetTypeOK) Code() int {
	return 200
}

func (o *AggregateComplianceByAssetTypeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-asset-type/v2][%d] aggregateComplianceByAssetTypeOK %s", 200, payload)
}

func (o *AggregateComplianceByAssetTypeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-asset-type/v2][%d] aggregateComplianceByAssetTypeOK %s", 200, payload)
}

func (o *AggregateComplianceByAssetTypeOK) GetPayload() *models.DomainAPIAggregateResponseComplianceByAssetTypeV1 {
	return o.Payload
}

func (o *AggregateComplianceByAssetTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAPIAggregateResponseComplianceByAssetTypeV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateComplianceByAssetTypeBadRequest creates a AggregateComplianceByAssetTypeBadRequest with default headers values
func NewAggregateComplianceByAssetTypeBadRequest() *AggregateComplianceByAssetTypeBadRequest {
	return &AggregateComplianceByAssetTypeBadRequest{}
}

/*
AggregateComplianceByAssetTypeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AggregateComplianceByAssetTypeBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAPIAggregateResponseComplianceByAssetTypeV1
}

// IsSuccess returns true when this aggregate compliance by asset type bad request response has a 2xx status code
func (o *AggregateComplianceByAssetTypeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate compliance by asset type bad request response has a 3xx status code
func (o *AggregateComplianceByAssetTypeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate compliance by asset type bad request response has a 4xx status code
func (o *AggregateComplianceByAssetTypeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate compliance by asset type bad request response has a 5xx status code
func (o *AggregateComplianceByAssetTypeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate compliance by asset type bad request response a status code equal to that given
func (o *AggregateComplianceByAssetTypeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the aggregate compliance by asset type bad request response
func (o *AggregateComplianceByAssetTypeBadRequest) Code() int {
	return 400
}

func (o *AggregateComplianceByAssetTypeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-asset-type/v2][%d] aggregateComplianceByAssetTypeBadRequest %s", 400, payload)
}

func (o *AggregateComplianceByAssetTypeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-asset-type/v2][%d] aggregateComplianceByAssetTypeBadRequest %s", 400, payload)
}

func (o *AggregateComplianceByAssetTypeBadRequest) GetPayload() *models.DomainAPIAggregateResponseComplianceByAssetTypeV1 {
	return o.Payload
}

func (o *AggregateComplianceByAssetTypeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAPIAggregateResponseComplianceByAssetTypeV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateComplianceByAssetTypeForbidden creates a AggregateComplianceByAssetTypeForbidden with default headers values
func NewAggregateComplianceByAssetTypeForbidden() *AggregateComplianceByAssetTypeForbidden {
	return &AggregateComplianceByAssetTypeForbidden{}
}

/*
AggregateComplianceByAssetTypeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AggregateComplianceByAssetTypeForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this aggregate compliance by asset type forbidden response has a 2xx status code
func (o *AggregateComplianceByAssetTypeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate compliance by asset type forbidden response has a 3xx status code
func (o *AggregateComplianceByAssetTypeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate compliance by asset type forbidden response has a 4xx status code
func (o *AggregateComplianceByAssetTypeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate compliance by asset type forbidden response has a 5xx status code
func (o *AggregateComplianceByAssetTypeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate compliance by asset type forbidden response a status code equal to that given
func (o *AggregateComplianceByAssetTypeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the aggregate compliance by asset type forbidden response
func (o *AggregateComplianceByAssetTypeForbidden) Code() int {
	return 403
}

func (o *AggregateComplianceByAssetTypeForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-asset-type/v2][%d] aggregateComplianceByAssetTypeForbidden %s", 403, payload)
}

func (o *AggregateComplianceByAssetTypeForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-asset-type/v2][%d] aggregateComplianceByAssetTypeForbidden %s", 403, payload)
}

func (o *AggregateComplianceByAssetTypeForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *AggregateComplianceByAssetTypeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateComplianceByAssetTypeTooManyRequests creates a AggregateComplianceByAssetTypeTooManyRequests with default headers values
func NewAggregateComplianceByAssetTypeTooManyRequests() *AggregateComplianceByAssetTypeTooManyRequests {
	return &AggregateComplianceByAssetTypeTooManyRequests{}
}

/*
AggregateComplianceByAssetTypeTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type AggregateComplianceByAssetTypeTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this aggregate compliance by asset type too many requests response has a 2xx status code
func (o *AggregateComplianceByAssetTypeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate compliance by asset type too many requests response has a 3xx status code
func (o *AggregateComplianceByAssetTypeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate compliance by asset type too many requests response has a 4xx status code
func (o *AggregateComplianceByAssetTypeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate compliance by asset type too many requests response has a 5xx status code
func (o *AggregateComplianceByAssetTypeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate compliance by asset type too many requests response a status code equal to that given
func (o *AggregateComplianceByAssetTypeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the aggregate compliance by asset type too many requests response
func (o *AggregateComplianceByAssetTypeTooManyRequests) Code() int {
	return 429
}

func (o *AggregateComplianceByAssetTypeTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-asset-type/v2][%d] aggregateComplianceByAssetTypeTooManyRequests %s", 429, payload)
}

func (o *AggregateComplianceByAssetTypeTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-asset-type/v2][%d] aggregateComplianceByAssetTypeTooManyRequests %s", 429, payload)
}

func (o *AggregateComplianceByAssetTypeTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *AggregateComplianceByAssetTypeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateComplianceByAssetTypeInternalServerError creates a AggregateComplianceByAssetTypeInternalServerError with default headers values
func NewAggregateComplianceByAssetTypeInternalServerError() *AggregateComplianceByAssetTypeInternalServerError {
	return &AggregateComplianceByAssetTypeInternalServerError{}
}

/*
AggregateComplianceByAssetTypeInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AggregateComplianceByAssetTypeInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAPIAggregateResponseComplianceByAssetTypeV1
}

// IsSuccess returns true when this aggregate compliance by asset type internal server error response has a 2xx status code
func (o *AggregateComplianceByAssetTypeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate compliance by asset type internal server error response has a 3xx status code
func (o *AggregateComplianceByAssetTypeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate compliance by asset type internal server error response has a 4xx status code
func (o *AggregateComplianceByAssetTypeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this aggregate compliance by asset type internal server error response has a 5xx status code
func (o *AggregateComplianceByAssetTypeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this aggregate compliance by asset type internal server error response a status code equal to that given
func (o *AggregateComplianceByAssetTypeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the aggregate compliance by asset type internal server error response
func (o *AggregateComplianceByAssetTypeInternalServerError) Code() int {
	return 500
}

func (o *AggregateComplianceByAssetTypeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-asset-type/v2][%d] aggregateComplianceByAssetTypeInternalServerError %s", 500, payload)
}

func (o *AggregateComplianceByAssetTypeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-asset-type/v2][%d] aggregateComplianceByAssetTypeInternalServerError %s", 500, payload)
}

func (o *AggregateComplianceByAssetTypeInternalServerError) GetPayload() *models.DomainAPIAggregateResponseComplianceByAssetTypeV1 {
	return o.Payload
}

func (o *AggregateComplianceByAssetTypeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAPIAggregateResponseComplianceByAssetTypeV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
