// Code generated by go-swagger; DO NOT EDIT.

package kubernetes_container_compliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CombinedImagesFindingsReader is a Reader for the CombinedImagesFindings structure.
type CombinedImagesFindingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CombinedImagesFindingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCombinedImagesFindingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCombinedImagesFindingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCombinedImagesFindingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCombinedImagesFindingsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCombinedImagesFindingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /container-compliance/combined/findings-by-images/v2] CombinedImagesFindings", response, response.Code())
	}
}

// NewCombinedImagesFindingsOK creates a CombinedImagesFindingsOK with default headers values
func NewCombinedImagesFindingsOK() *CombinedImagesFindingsOK {
	return &CombinedImagesFindingsOK{}
}

/*
CombinedImagesFindingsOK describes a response with status code 200, with default header values.

OK
*/
type CombinedImagesFindingsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAPIResponseImagesFindingsV1
}

// IsSuccess returns true when this combined images findings o k response has a 2xx status code
func (o *CombinedImagesFindingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this combined images findings o k response has a 3xx status code
func (o *CombinedImagesFindingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined images findings o k response has a 4xx status code
func (o *CombinedImagesFindingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this combined images findings o k response has a 5xx status code
func (o *CombinedImagesFindingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this combined images findings o k response a status code equal to that given
func (o *CombinedImagesFindingsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the combined images findings o k response
func (o *CombinedImagesFindingsOK) Code() int {
	return 200
}

func (o *CombinedImagesFindingsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/combined/findings-by-images/v2][%d] combinedImagesFindingsOK %s", 200, payload)
}

func (o *CombinedImagesFindingsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/combined/findings-by-images/v2][%d] combinedImagesFindingsOK %s", 200, payload)
}

func (o *CombinedImagesFindingsOK) GetPayload() *models.DomainAPIResponseImagesFindingsV1 {
	return o.Payload
}

func (o *CombinedImagesFindingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAPIResponseImagesFindingsV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedImagesFindingsBadRequest creates a CombinedImagesFindingsBadRequest with default headers values
func NewCombinedImagesFindingsBadRequest() *CombinedImagesFindingsBadRequest {
	return &CombinedImagesFindingsBadRequest{}
}

/*
CombinedImagesFindingsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CombinedImagesFindingsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAPIResponseImagesFindingsV1
}

// IsSuccess returns true when this combined images findings bad request response has a 2xx status code
func (o *CombinedImagesFindingsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined images findings bad request response has a 3xx status code
func (o *CombinedImagesFindingsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined images findings bad request response has a 4xx status code
func (o *CombinedImagesFindingsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this combined images findings bad request response has a 5xx status code
func (o *CombinedImagesFindingsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this combined images findings bad request response a status code equal to that given
func (o *CombinedImagesFindingsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the combined images findings bad request response
func (o *CombinedImagesFindingsBadRequest) Code() int {
	return 400
}

func (o *CombinedImagesFindingsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/combined/findings-by-images/v2][%d] combinedImagesFindingsBadRequest %s", 400, payload)
}

func (o *CombinedImagesFindingsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/combined/findings-by-images/v2][%d] combinedImagesFindingsBadRequest %s", 400, payload)
}

func (o *CombinedImagesFindingsBadRequest) GetPayload() *models.DomainAPIResponseImagesFindingsV1 {
	return o.Payload
}

func (o *CombinedImagesFindingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAPIResponseImagesFindingsV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedImagesFindingsForbidden creates a CombinedImagesFindingsForbidden with default headers values
func NewCombinedImagesFindingsForbidden() *CombinedImagesFindingsForbidden {
	return &CombinedImagesFindingsForbidden{}
}

/*
CombinedImagesFindingsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CombinedImagesFindingsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this combined images findings forbidden response has a 2xx status code
func (o *CombinedImagesFindingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined images findings forbidden response has a 3xx status code
func (o *CombinedImagesFindingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined images findings forbidden response has a 4xx status code
func (o *CombinedImagesFindingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this combined images findings forbidden response has a 5xx status code
func (o *CombinedImagesFindingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this combined images findings forbidden response a status code equal to that given
func (o *CombinedImagesFindingsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the combined images findings forbidden response
func (o *CombinedImagesFindingsForbidden) Code() int {
	return 403
}

func (o *CombinedImagesFindingsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/combined/findings-by-images/v2][%d] combinedImagesFindingsForbidden %s", 403, payload)
}

func (o *CombinedImagesFindingsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/combined/findings-by-images/v2][%d] combinedImagesFindingsForbidden %s", 403, payload)
}

func (o *CombinedImagesFindingsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CombinedImagesFindingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedImagesFindingsTooManyRequests creates a CombinedImagesFindingsTooManyRequests with default headers values
func NewCombinedImagesFindingsTooManyRequests() *CombinedImagesFindingsTooManyRequests {
	return &CombinedImagesFindingsTooManyRequests{}
}

/*
CombinedImagesFindingsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CombinedImagesFindingsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this combined images findings too many requests response has a 2xx status code
func (o *CombinedImagesFindingsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined images findings too many requests response has a 3xx status code
func (o *CombinedImagesFindingsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined images findings too many requests response has a 4xx status code
func (o *CombinedImagesFindingsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this combined images findings too many requests response has a 5xx status code
func (o *CombinedImagesFindingsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this combined images findings too many requests response a status code equal to that given
func (o *CombinedImagesFindingsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the combined images findings too many requests response
func (o *CombinedImagesFindingsTooManyRequests) Code() int {
	return 429
}

func (o *CombinedImagesFindingsTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/combined/findings-by-images/v2][%d] combinedImagesFindingsTooManyRequests %s", 429, payload)
}

func (o *CombinedImagesFindingsTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/combined/findings-by-images/v2][%d] combinedImagesFindingsTooManyRequests %s", 429, payload)
}

func (o *CombinedImagesFindingsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CombinedImagesFindingsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedImagesFindingsInternalServerError creates a CombinedImagesFindingsInternalServerError with default headers values
func NewCombinedImagesFindingsInternalServerError() *CombinedImagesFindingsInternalServerError {
	return &CombinedImagesFindingsInternalServerError{}
}

/*
CombinedImagesFindingsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CombinedImagesFindingsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAPIResponseImagesFindingsV1
}

// IsSuccess returns true when this combined images findings internal server error response has a 2xx status code
func (o *CombinedImagesFindingsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined images findings internal server error response has a 3xx status code
func (o *CombinedImagesFindingsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined images findings internal server error response has a 4xx status code
func (o *CombinedImagesFindingsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this combined images findings internal server error response has a 5xx status code
func (o *CombinedImagesFindingsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this combined images findings internal server error response a status code equal to that given
func (o *CombinedImagesFindingsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the combined images findings internal server error response
func (o *CombinedImagesFindingsInternalServerError) Code() int {
	return 500
}

func (o *CombinedImagesFindingsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/combined/findings-by-images/v2][%d] combinedImagesFindingsInternalServerError %s", 500, payload)
}

func (o *CombinedImagesFindingsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/combined/findings-by-images/v2][%d] combinedImagesFindingsInternalServerError %s", 500, payload)
}

func (o *CombinedImagesFindingsInternalServerError) GetPayload() *models.DomainAPIResponseImagesFindingsV1 {
	return o.Payload
}

func (o *CombinedImagesFindingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAPIResponseImagesFindingsV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
