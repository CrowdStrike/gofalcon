// Code generated by go-swagger; DO NOT EDIT.

package kubernetes_container_compliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// AggregateComplianceByFrameworkReader is a Reader for the AggregateComplianceByFramework structure.
type AggregateComplianceByFrameworkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AggregateComplianceByFrameworkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAggregateComplianceByFrameworkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAggregateComplianceByFrameworkBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAggregateComplianceByFrameworkForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAggregateComplianceByFrameworkTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAggregateComplianceByFrameworkInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /container-compliance/aggregates/compliance-by-framework/v2] AggregateComplianceByFramework", response, response.Code())
	}
}

// NewAggregateComplianceByFrameworkOK creates a AggregateComplianceByFrameworkOK with default headers values
func NewAggregateComplianceByFrameworkOK() *AggregateComplianceByFrameworkOK {
	return &AggregateComplianceByFrameworkOK{}
}

/*
AggregateComplianceByFrameworkOK describes a response with status code 200, with default header values.

OK
*/
type AggregateComplianceByFrameworkOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAPIAggregateResponseComplianceByFrameworkV1
}

// IsSuccess returns true when this aggregate compliance by framework o k response has a 2xx status code
func (o *AggregateComplianceByFrameworkOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this aggregate compliance by framework o k response has a 3xx status code
func (o *AggregateComplianceByFrameworkOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate compliance by framework o k response has a 4xx status code
func (o *AggregateComplianceByFrameworkOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this aggregate compliance by framework o k response has a 5xx status code
func (o *AggregateComplianceByFrameworkOK) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate compliance by framework o k response a status code equal to that given
func (o *AggregateComplianceByFrameworkOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the aggregate compliance by framework o k response
func (o *AggregateComplianceByFrameworkOK) Code() int {
	return 200
}

func (o *AggregateComplianceByFrameworkOK) Error() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-framework/v2][%d] aggregateComplianceByFrameworkOK  %+v", 200, o.Payload)
}

func (o *AggregateComplianceByFrameworkOK) String() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-framework/v2][%d] aggregateComplianceByFrameworkOK  %+v", 200, o.Payload)
}

func (o *AggregateComplianceByFrameworkOK) GetPayload() *models.DomainAPIAggregateResponseComplianceByFrameworkV1 {
	return o.Payload
}

func (o *AggregateComplianceByFrameworkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAPIAggregateResponseComplianceByFrameworkV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateComplianceByFrameworkBadRequest creates a AggregateComplianceByFrameworkBadRequest with default headers values
func NewAggregateComplianceByFrameworkBadRequest() *AggregateComplianceByFrameworkBadRequest {
	return &AggregateComplianceByFrameworkBadRequest{}
}

/*
AggregateComplianceByFrameworkBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AggregateComplianceByFrameworkBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAPIAggregateResponseComplianceByFrameworkV1
}

// IsSuccess returns true when this aggregate compliance by framework bad request response has a 2xx status code
func (o *AggregateComplianceByFrameworkBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate compliance by framework bad request response has a 3xx status code
func (o *AggregateComplianceByFrameworkBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate compliance by framework bad request response has a 4xx status code
func (o *AggregateComplianceByFrameworkBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate compliance by framework bad request response has a 5xx status code
func (o *AggregateComplianceByFrameworkBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate compliance by framework bad request response a status code equal to that given
func (o *AggregateComplianceByFrameworkBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the aggregate compliance by framework bad request response
func (o *AggregateComplianceByFrameworkBadRequest) Code() int {
	return 400
}

func (o *AggregateComplianceByFrameworkBadRequest) Error() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-framework/v2][%d] aggregateComplianceByFrameworkBadRequest  %+v", 400, o.Payload)
}

func (o *AggregateComplianceByFrameworkBadRequest) String() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-framework/v2][%d] aggregateComplianceByFrameworkBadRequest  %+v", 400, o.Payload)
}

func (o *AggregateComplianceByFrameworkBadRequest) GetPayload() *models.DomainAPIAggregateResponseComplianceByFrameworkV1 {
	return o.Payload
}

func (o *AggregateComplianceByFrameworkBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAPIAggregateResponseComplianceByFrameworkV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateComplianceByFrameworkForbidden creates a AggregateComplianceByFrameworkForbidden with default headers values
func NewAggregateComplianceByFrameworkForbidden() *AggregateComplianceByFrameworkForbidden {
	return &AggregateComplianceByFrameworkForbidden{}
}

/*
AggregateComplianceByFrameworkForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AggregateComplianceByFrameworkForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this aggregate compliance by framework forbidden response has a 2xx status code
func (o *AggregateComplianceByFrameworkForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate compliance by framework forbidden response has a 3xx status code
func (o *AggregateComplianceByFrameworkForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate compliance by framework forbidden response has a 4xx status code
func (o *AggregateComplianceByFrameworkForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate compliance by framework forbidden response has a 5xx status code
func (o *AggregateComplianceByFrameworkForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate compliance by framework forbidden response a status code equal to that given
func (o *AggregateComplianceByFrameworkForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the aggregate compliance by framework forbidden response
func (o *AggregateComplianceByFrameworkForbidden) Code() int {
	return 403
}

func (o *AggregateComplianceByFrameworkForbidden) Error() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-framework/v2][%d] aggregateComplianceByFrameworkForbidden  %+v", 403, o.Payload)
}

func (o *AggregateComplianceByFrameworkForbidden) String() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-framework/v2][%d] aggregateComplianceByFrameworkForbidden  %+v", 403, o.Payload)
}

func (o *AggregateComplianceByFrameworkForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *AggregateComplianceByFrameworkForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateComplianceByFrameworkTooManyRequests creates a AggregateComplianceByFrameworkTooManyRequests with default headers values
func NewAggregateComplianceByFrameworkTooManyRequests() *AggregateComplianceByFrameworkTooManyRequests {
	return &AggregateComplianceByFrameworkTooManyRequests{}
}

/*
AggregateComplianceByFrameworkTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type AggregateComplianceByFrameworkTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this aggregate compliance by framework too many requests response has a 2xx status code
func (o *AggregateComplianceByFrameworkTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate compliance by framework too many requests response has a 3xx status code
func (o *AggregateComplianceByFrameworkTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate compliance by framework too many requests response has a 4xx status code
func (o *AggregateComplianceByFrameworkTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate compliance by framework too many requests response has a 5xx status code
func (o *AggregateComplianceByFrameworkTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate compliance by framework too many requests response a status code equal to that given
func (o *AggregateComplianceByFrameworkTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the aggregate compliance by framework too many requests response
func (o *AggregateComplianceByFrameworkTooManyRequests) Code() int {
	return 429
}

func (o *AggregateComplianceByFrameworkTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-framework/v2][%d] aggregateComplianceByFrameworkTooManyRequests  %+v", 429, o.Payload)
}

func (o *AggregateComplianceByFrameworkTooManyRequests) String() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-framework/v2][%d] aggregateComplianceByFrameworkTooManyRequests  %+v", 429, o.Payload)
}

func (o *AggregateComplianceByFrameworkTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *AggregateComplianceByFrameworkTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateComplianceByFrameworkInternalServerError creates a AggregateComplianceByFrameworkInternalServerError with default headers values
func NewAggregateComplianceByFrameworkInternalServerError() *AggregateComplianceByFrameworkInternalServerError {
	return &AggregateComplianceByFrameworkInternalServerError{}
}

/*
AggregateComplianceByFrameworkInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AggregateComplianceByFrameworkInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAPIAggregateResponseComplianceByFrameworkV1
}

// IsSuccess returns true when this aggregate compliance by framework internal server error response has a 2xx status code
func (o *AggregateComplianceByFrameworkInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate compliance by framework internal server error response has a 3xx status code
func (o *AggregateComplianceByFrameworkInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate compliance by framework internal server error response has a 4xx status code
func (o *AggregateComplianceByFrameworkInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this aggregate compliance by framework internal server error response has a 5xx status code
func (o *AggregateComplianceByFrameworkInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this aggregate compliance by framework internal server error response a status code equal to that given
func (o *AggregateComplianceByFrameworkInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the aggregate compliance by framework internal server error response
func (o *AggregateComplianceByFrameworkInternalServerError) Code() int {
	return 500
}

func (o *AggregateComplianceByFrameworkInternalServerError) Error() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-framework/v2][%d] aggregateComplianceByFrameworkInternalServerError  %+v", 500, o.Payload)
}

func (o *AggregateComplianceByFrameworkInternalServerError) String() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-framework/v2][%d] aggregateComplianceByFrameworkInternalServerError  %+v", 500, o.Payload)
}

func (o *AggregateComplianceByFrameworkInternalServerError) GetPayload() *models.DomainAPIAggregateResponseComplianceByFrameworkV1 {
	return o.Payload
}

func (o *AggregateComplianceByFrameworkInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAPIAggregateResponseComplianceByFrameworkV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
