// Code generated by go-swagger; DO NOT EDIT.

package kubernetes_container_compliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// AggregateComplianceByClusterTypeReader is a Reader for the AggregateComplianceByClusterType structure.
type AggregateComplianceByClusterTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AggregateComplianceByClusterTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAggregateComplianceByClusterTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAggregateComplianceByClusterTypeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAggregateComplianceByClusterTypeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAggregateComplianceByClusterTypeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAggregateComplianceByClusterTypeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /container-compliance/aggregates/compliance-by-cluster-type/v2] AggregateComplianceByClusterType", response, response.Code())
	}
}

// NewAggregateComplianceByClusterTypeOK creates a AggregateComplianceByClusterTypeOK with default headers values
func NewAggregateComplianceByClusterTypeOK() *AggregateComplianceByClusterTypeOK {
	return &AggregateComplianceByClusterTypeOK{}
}

/*
AggregateComplianceByClusterTypeOK describes a response with status code 200, with default header values.

OK
*/
type AggregateComplianceByClusterTypeOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAPIAggregateResponseComplianceByClusterTypeV1
}

// IsSuccess returns true when this aggregate compliance by cluster type o k response has a 2xx status code
func (o *AggregateComplianceByClusterTypeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this aggregate compliance by cluster type o k response has a 3xx status code
func (o *AggregateComplianceByClusterTypeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate compliance by cluster type o k response has a 4xx status code
func (o *AggregateComplianceByClusterTypeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this aggregate compliance by cluster type o k response has a 5xx status code
func (o *AggregateComplianceByClusterTypeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate compliance by cluster type o k response a status code equal to that given
func (o *AggregateComplianceByClusterTypeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the aggregate compliance by cluster type o k response
func (o *AggregateComplianceByClusterTypeOK) Code() int {
	return 200
}

func (o *AggregateComplianceByClusterTypeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-cluster-type/v2][%d] aggregateComplianceByClusterTypeOK %s", 200, payload)
}

func (o *AggregateComplianceByClusterTypeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-cluster-type/v2][%d] aggregateComplianceByClusterTypeOK %s", 200, payload)
}

func (o *AggregateComplianceByClusterTypeOK) GetPayload() *models.DomainAPIAggregateResponseComplianceByClusterTypeV1 {
	return o.Payload
}

func (o *AggregateComplianceByClusterTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAPIAggregateResponseComplianceByClusterTypeV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateComplianceByClusterTypeBadRequest creates a AggregateComplianceByClusterTypeBadRequest with default headers values
func NewAggregateComplianceByClusterTypeBadRequest() *AggregateComplianceByClusterTypeBadRequest {
	return &AggregateComplianceByClusterTypeBadRequest{}
}

/*
AggregateComplianceByClusterTypeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AggregateComplianceByClusterTypeBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAPIAggregateResponseComplianceByClusterTypeV1
}

// IsSuccess returns true when this aggregate compliance by cluster type bad request response has a 2xx status code
func (o *AggregateComplianceByClusterTypeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate compliance by cluster type bad request response has a 3xx status code
func (o *AggregateComplianceByClusterTypeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate compliance by cluster type bad request response has a 4xx status code
func (o *AggregateComplianceByClusterTypeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate compliance by cluster type bad request response has a 5xx status code
func (o *AggregateComplianceByClusterTypeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate compliance by cluster type bad request response a status code equal to that given
func (o *AggregateComplianceByClusterTypeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the aggregate compliance by cluster type bad request response
func (o *AggregateComplianceByClusterTypeBadRequest) Code() int {
	return 400
}

func (o *AggregateComplianceByClusterTypeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-cluster-type/v2][%d] aggregateComplianceByClusterTypeBadRequest %s", 400, payload)
}

func (o *AggregateComplianceByClusterTypeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-cluster-type/v2][%d] aggregateComplianceByClusterTypeBadRequest %s", 400, payload)
}

func (o *AggregateComplianceByClusterTypeBadRequest) GetPayload() *models.DomainAPIAggregateResponseComplianceByClusterTypeV1 {
	return o.Payload
}

func (o *AggregateComplianceByClusterTypeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAPIAggregateResponseComplianceByClusterTypeV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateComplianceByClusterTypeForbidden creates a AggregateComplianceByClusterTypeForbidden with default headers values
func NewAggregateComplianceByClusterTypeForbidden() *AggregateComplianceByClusterTypeForbidden {
	return &AggregateComplianceByClusterTypeForbidden{}
}

/*
AggregateComplianceByClusterTypeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AggregateComplianceByClusterTypeForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this aggregate compliance by cluster type forbidden response has a 2xx status code
func (o *AggregateComplianceByClusterTypeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate compliance by cluster type forbidden response has a 3xx status code
func (o *AggregateComplianceByClusterTypeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate compliance by cluster type forbidden response has a 4xx status code
func (o *AggregateComplianceByClusterTypeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate compliance by cluster type forbidden response has a 5xx status code
func (o *AggregateComplianceByClusterTypeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate compliance by cluster type forbidden response a status code equal to that given
func (o *AggregateComplianceByClusterTypeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the aggregate compliance by cluster type forbidden response
func (o *AggregateComplianceByClusterTypeForbidden) Code() int {
	return 403
}

func (o *AggregateComplianceByClusterTypeForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-cluster-type/v2][%d] aggregateComplianceByClusterTypeForbidden %s", 403, payload)
}

func (o *AggregateComplianceByClusterTypeForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-cluster-type/v2][%d] aggregateComplianceByClusterTypeForbidden %s", 403, payload)
}

func (o *AggregateComplianceByClusterTypeForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *AggregateComplianceByClusterTypeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateComplianceByClusterTypeTooManyRequests creates a AggregateComplianceByClusterTypeTooManyRequests with default headers values
func NewAggregateComplianceByClusterTypeTooManyRequests() *AggregateComplianceByClusterTypeTooManyRequests {
	return &AggregateComplianceByClusterTypeTooManyRequests{}
}

/*
AggregateComplianceByClusterTypeTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type AggregateComplianceByClusterTypeTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this aggregate compliance by cluster type too many requests response has a 2xx status code
func (o *AggregateComplianceByClusterTypeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate compliance by cluster type too many requests response has a 3xx status code
func (o *AggregateComplianceByClusterTypeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate compliance by cluster type too many requests response has a 4xx status code
func (o *AggregateComplianceByClusterTypeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate compliance by cluster type too many requests response has a 5xx status code
func (o *AggregateComplianceByClusterTypeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate compliance by cluster type too many requests response a status code equal to that given
func (o *AggregateComplianceByClusterTypeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the aggregate compliance by cluster type too many requests response
func (o *AggregateComplianceByClusterTypeTooManyRequests) Code() int {
	return 429
}

func (o *AggregateComplianceByClusterTypeTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-cluster-type/v2][%d] aggregateComplianceByClusterTypeTooManyRequests %s", 429, payload)
}

func (o *AggregateComplianceByClusterTypeTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-cluster-type/v2][%d] aggregateComplianceByClusterTypeTooManyRequests %s", 429, payload)
}

func (o *AggregateComplianceByClusterTypeTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *AggregateComplianceByClusterTypeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateComplianceByClusterTypeInternalServerError creates a AggregateComplianceByClusterTypeInternalServerError with default headers values
func NewAggregateComplianceByClusterTypeInternalServerError() *AggregateComplianceByClusterTypeInternalServerError {
	return &AggregateComplianceByClusterTypeInternalServerError{}
}

/*
AggregateComplianceByClusterTypeInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AggregateComplianceByClusterTypeInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAPIAggregateResponseComplianceByClusterTypeV1
}

// IsSuccess returns true when this aggregate compliance by cluster type internal server error response has a 2xx status code
func (o *AggregateComplianceByClusterTypeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate compliance by cluster type internal server error response has a 3xx status code
func (o *AggregateComplianceByClusterTypeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate compliance by cluster type internal server error response has a 4xx status code
func (o *AggregateComplianceByClusterTypeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this aggregate compliance by cluster type internal server error response has a 5xx status code
func (o *AggregateComplianceByClusterTypeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this aggregate compliance by cluster type internal server error response a status code equal to that given
func (o *AggregateComplianceByClusterTypeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the aggregate compliance by cluster type internal server error response
func (o *AggregateComplianceByClusterTypeInternalServerError) Code() int {
	return 500
}

func (o *AggregateComplianceByClusterTypeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-cluster-type/v2][%d] aggregateComplianceByClusterTypeInternalServerError %s", 500, payload)
}

func (o *AggregateComplianceByClusterTypeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-cluster-type/v2][%d] aggregateComplianceByClusterTypeInternalServerError %s", 500, payload)
}

func (o *AggregateComplianceByClusterTypeInternalServerError) GetPayload() *models.DomainAPIAggregateResponseComplianceByClusterTypeV1 {
	return o.Payload
}

func (o *AggregateComplianceByClusterTypeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAPIAggregateResponseComplianceByClusterTypeV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
