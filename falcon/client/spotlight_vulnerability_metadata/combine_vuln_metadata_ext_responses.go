// Code generated by go-swagger; DO NOT EDIT.

package spotlight_vulnerability_metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CombineVulnMetadataExtReader is a Reader for the CombineVulnMetadataExt structure.
type CombineVulnMetadataExtReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CombineVulnMetadataExtReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCombineVulnMetadataExtOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewCombineVulnMetadataExtForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCombineVulnMetadataExtTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCombineVulnMetadataExtInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCombineVulnMetadataExtServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /spotlight/combined/vulnerability-metadata-external/v1] combineVulnMetadataExt", response, response.Code())
	}
}

// NewCombineVulnMetadataExtOK creates a CombineVulnMetadataExtOK with default headers values
func NewCombineVulnMetadataExtOK() *CombineVulnMetadataExtOK {
	return &CombineVulnMetadataExtOK{}
}

/*
CombineVulnMetadataExtOK describes a response with status code 200, with default header values.

OK
*/
type CombineVulnMetadataExtOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainVulnMetadataAPICombineResponseV1
}

// IsSuccess returns true when this combine vuln metadata ext o k response has a 2xx status code
func (o *CombineVulnMetadataExtOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this combine vuln metadata ext o k response has a 3xx status code
func (o *CombineVulnMetadataExtOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combine vuln metadata ext o k response has a 4xx status code
func (o *CombineVulnMetadataExtOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this combine vuln metadata ext o k response has a 5xx status code
func (o *CombineVulnMetadataExtOK) IsServerError() bool {
	return false
}

// IsCode returns true when this combine vuln metadata ext o k response a status code equal to that given
func (o *CombineVulnMetadataExtOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the combine vuln metadata ext o k response
func (o *CombineVulnMetadataExtOK) Code() int {
	return 200
}

func (o *CombineVulnMetadataExtOK) Error() string {
	return fmt.Sprintf("[GET /spotlight/combined/vulnerability-metadata-external/v1][%d] combineVulnMetadataExtOK  %+v", 200, o.Payload)
}

func (o *CombineVulnMetadataExtOK) String() string {
	return fmt.Sprintf("[GET /spotlight/combined/vulnerability-metadata-external/v1][%d] combineVulnMetadataExtOK  %+v", 200, o.Payload)
}

func (o *CombineVulnMetadataExtOK) GetPayload() *models.DomainVulnMetadataAPICombineResponseV1 {
	return o.Payload
}

func (o *CombineVulnMetadataExtOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainVulnMetadataAPICombineResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombineVulnMetadataExtForbidden creates a CombineVulnMetadataExtForbidden with default headers values
func NewCombineVulnMetadataExtForbidden() *CombineVulnMetadataExtForbidden {
	return &CombineVulnMetadataExtForbidden{}
}

/*
CombineVulnMetadataExtForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CombineVulnMetadataExtForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this combine vuln metadata ext forbidden response has a 2xx status code
func (o *CombineVulnMetadataExtForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combine vuln metadata ext forbidden response has a 3xx status code
func (o *CombineVulnMetadataExtForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combine vuln metadata ext forbidden response has a 4xx status code
func (o *CombineVulnMetadataExtForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this combine vuln metadata ext forbidden response has a 5xx status code
func (o *CombineVulnMetadataExtForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this combine vuln metadata ext forbidden response a status code equal to that given
func (o *CombineVulnMetadataExtForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the combine vuln metadata ext forbidden response
func (o *CombineVulnMetadataExtForbidden) Code() int {
	return 403
}

func (o *CombineVulnMetadataExtForbidden) Error() string {
	return fmt.Sprintf("[GET /spotlight/combined/vulnerability-metadata-external/v1][%d] combineVulnMetadataExtForbidden  %+v", 403, o.Payload)
}

func (o *CombineVulnMetadataExtForbidden) String() string {
	return fmt.Sprintf("[GET /spotlight/combined/vulnerability-metadata-external/v1][%d] combineVulnMetadataExtForbidden  %+v", 403, o.Payload)
}

func (o *CombineVulnMetadataExtForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CombineVulnMetadataExtForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombineVulnMetadataExtTooManyRequests creates a CombineVulnMetadataExtTooManyRequests with default headers values
func NewCombineVulnMetadataExtTooManyRequests() *CombineVulnMetadataExtTooManyRequests {
	return &CombineVulnMetadataExtTooManyRequests{}
}

/*
CombineVulnMetadataExtTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CombineVulnMetadataExtTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this combine vuln metadata ext too many requests response has a 2xx status code
func (o *CombineVulnMetadataExtTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combine vuln metadata ext too many requests response has a 3xx status code
func (o *CombineVulnMetadataExtTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combine vuln metadata ext too many requests response has a 4xx status code
func (o *CombineVulnMetadataExtTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this combine vuln metadata ext too many requests response has a 5xx status code
func (o *CombineVulnMetadataExtTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this combine vuln metadata ext too many requests response a status code equal to that given
func (o *CombineVulnMetadataExtTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the combine vuln metadata ext too many requests response
func (o *CombineVulnMetadataExtTooManyRequests) Code() int {
	return 429
}

func (o *CombineVulnMetadataExtTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /spotlight/combined/vulnerability-metadata-external/v1][%d] combineVulnMetadataExtTooManyRequests  %+v", 429, o.Payload)
}

func (o *CombineVulnMetadataExtTooManyRequests) String() string {
	return fmt.Sprintf("[GET /spotlight/combined/vulnerability-metadata-external/v1][%d] combineVulnMetadataExtTooManyRequests  %+v", 429, o.Payload)
}

func (o *CombineVulnMetadataExtTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CombineVulnMetadataExtTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombineVulnMetadataExtInternalServerError creates a CombineVulnMetadataExtInternalServerError with default headers values
func NewCombineVulnMetadataExtInternalServerError() *CombineVulnMetadataExtInternalServerError {
	return &CombineVulnMetadataExtInternalServerError{}
}

/*
CombineVulnMetadataExtInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type CombineVulnMetadataExtInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this combine vuln metadata ext internal server error response has a 2xx status code
func (o *CombineVulnMetadataExtInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combine vuln metadata ext internal server error response has a 3xx status code
func (o *CombineVulnMetadataExtInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combine vuln metadata ext internal server error response has a 4xx status code
func (o *CombineVulnMetadataExtInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this combine vuln metadata ext internal server error response has a 5xx status code
func (o *CombineVulnMetadataExtInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this combine vuln metadata ext internal server error response a status code equal to that given
func (o *CombineVulnMetadataExtInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the combine vuln metadata ext internal server error response
func (o *CombineVulnMetadataExtInternalServerError) Code() int {
	return 500
}

func (o *CombineVulnMetadataExtInternalServerError) Error() string {
	return fmt.Sprintf("[GET /spotlight/combined/vulnerability-metadata-external/v1][%d] combineVulnMetadataExtInternalServerError  %+v", 500, o.Payload)
}

func (o *CombineVulnMetadataExtInternalServerError) String() string {
	return fmt.Sprintf("[GET /spotlight/combined/vulnerability-metadata-external/v1][%d] combineVulnMetadataExtInternalServerError  %+v", 500, o.Payload)
}

func (o *CombineVulnMetadataExtInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CombineVulnMetadataExtInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombineVulnMetadataExtServiceUnavailable creates a CombineVulnMetadataExtServiceUnavailable with default headers values
func NewCombineVulnMetadataExtServiceUnavailable() *CombineVulnMetadataExtServiceUnavailable {
	return &CombineVulnMetadataExtServiceUnavailable{}
}

/*
CombineVulnMetadataExtServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable
*/
type CombineVulnMetadataExtServiceUnavailable struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainVulnMetadataAPICombineResponseV1
}

// IsSuccess returns true when this combine vuln metadata ext service unavailable response has a 2xx status code
func (o *CombineVulnMetadataExtServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combine vuln metadata ext service unavailable response has a 3xx status code
func (o *CombineVulnMetadataExtServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combine vuln metadata ext service unavailable response has a 4xx status code
func (o *CombineVulnMetadataExtServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this combine vuln metadata ext service unavailable response has a 5xx status code
func (o *CombineVulnMetadataExtServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this combine vuln metadata ext service unavailable response a status code equal to that given
func (o *CombineVulnMetadataExtServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the combine vuln metadata ext service unavailable response
func (o *CombineVulnMetadataExtServiceUnavailable) Code() int {
	return 503
}

func (o *CombineVulnMetadataExtServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /spotlight/combined/vulnerability-metadata-external/v1][%d] combineVulnMetadataExtServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CombineVulnMetadataExtServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /spotlight/combined/vulnerability-metadata-external/v1][%d] combineVulnMetadataExtServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CombineVulnMetadataExtServiceUnavailable) GetPayload() *models.DomainVulnMetadataAPICombineResponseV1 {
	return o.Payload
}

func (o *CombineVulnMetadataExtServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainVulnMetadataAPICombineResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
