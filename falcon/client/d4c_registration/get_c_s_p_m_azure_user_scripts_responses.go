// Code generated by go-swagger; DO NOT EDIT.

package d4c_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetCSPMAzureUserScriptsReader is a Reader for the GetCSPMAzureUserScripts structure.
type GetCSPMAzureUserScriptsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCSPMAzureUserScriptsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCSPMAzureUserScriptsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 207:
		result := NewGetCSPMAzureUserScriptsMultiStatus()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCSPMAzureUserScriptsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCSPMAzureUserScriptsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetCSPMAzureUserScriptsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCSPMAzureUserScriptsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetCSPMAzureUserScriptsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetCSPMAzureUserScriptsOK creates a GetCSPMAzureUserScriptsOK with default headers values
func NewGetCSPMAzureUserScriptsOK() *GetCSPMAzureUserScriptsOK {
	return &GetCSPMAzureUserScriptsOK{}
}

/*
GetCSPMAzureUserScriptsOK describes a response with status code 200, with default header values.

OK
*/
type GetCSPMAzureUserScriptsOK struct {

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAzureProvisionGetUserScriptResponseV1
}

// IsSuccess returns true when this get c s p m azure user scripts o k response has a 2xx status code
func (o *GetCSPMAzureUserScriptsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get c s p m azure user scripts o k response has a 3xx status code
func (o *GetCSPMAzureUserScriptsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m azure user scripts o k response has a 4xx status code
func (o *GetCSPMAzureUserScriptsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get c s p m azure user scripts o k response has a 5xx status code
func (o *GetCSPMAzureUserScriptsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get c s p m azure user scripts o k response a status code equal to that given
func (o *GetCSPMAzureUserScriptsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get c s p m azure user scripts o k response
func (o *GetCSPMAzureUserScriptsOK) Code() int {
	return 200
}

func (o *GetCSPMAzureUserScriptsOK) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-azure/entities/user-scripts/v1][%d] getCSPMAzureUserScriptsOK  %+v", 200, o.Payload)
}

func (o *GetCSPMAzureUserScriptsOK) String() string {
	return fmt.Sprintf("[GET /cloud-connect-azure/entities/user-scripts/v1][%d] getCSPMAzureUserScriptsOK  %+v", 200, o.Payload)
}

func (o *GetCSPMAzureUserScriptsOK) GetPayload() *models.RegistrationAzureProvisionGetUserScriptResponseV1 {
	return o.Payload
}

func (o *GetCSPMAzureUserScriptsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAzureProvisionGetUserScriptResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMAzureUserScriptsMultiStatus creates a GetCSPMAzureUserScriptsMultiStatus with default headers values
func NewGetCSPMAzureUserScriptsMultiStatus() *GetCSPMAzureUserScriptsMultiStatus {
	return &GetCSPMAzureUserScriptsMultiStatus{}
}

/*
GetCSPMAzureUserScriptsMultiStatus describes a response with status code 207, with default header values.

Multi-Status
*/
type GetCSPMAzureUserScriptsMultiStatus struct {

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAzureProvisionGetUserScriptResponseV1
}

// IsSuccess returns true when this get c s p m azure user scripts multi status response has a 2xx status code
func (o *GetCSPMAzureUserScriptsMultiStatus) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get c s p m azure user scripts multi status response has a 3xx status code
func (o *GetCSPMAzureUserScriptsMultiStatus) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m azure user scripts multi status response has a 4xx status code
func (o *GetCSPMAzureUserScriptsMultiStatus) IsClientError() bool {
	return false
}

// IsServerError returns true when this get c s p m azure user scripts multi status response has a 5xx status code
func (o *GetCSPMAzureUserScriptsMultiStatus) IsServerError() bool {
	return false
}

// IsCode returns true when this get c s p m azure user scripts multi status response a status code equal to that given
func (o *GetCSPMAzureUserScriptsMultiStatus) IsCode(code int) bool {
	return code == 207
}

// Code gets the status code for the get c s p m azure user scripts multi status response
func (o *GetCSPMAzureUserScriptsMultiStatus) Code() int {
	return 207
}

func (o *GetCSPMAzureUserScriptsMultiStatus) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-azure/entities/user-scripts/v1][%d] getCSPMAzureUserScriptsMultiStatus  %+v", 207, o.Payload)
}

func (o *GetCSPMAzureUserScriptsMultiStatus) String() string {
	return fmt.Sprintf("[GET /cloud-connect-azure/entities/user-scripts/v1][%d] getCSPMAzureUserScriptsMultiStatus  %+v", 207, o.Payload)
}

func (o *GetCSPMAzureUserScriptsMultiStatus) GetPayload() *models.RegistrationAzureProvisionGetUserScriptResponseV1 {
	return o.Payload
}

func (o *GetCSPMAzureUserScriptsMultiStatus) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAzureProvisionGetUserScriptResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMAzureUserScriptsBadRequest creates a GetCSPMAzureUserScriptsBadRequest with default headers values
func NewGetCSPMAzureUserScriptsBadRequest() *GetCSPMAzureUserScriptsBadRequest {
	return &GetCSPMAzureUserScriptsBadRequest{}
}

/*
GetCSPMAzureUserScriptsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetCSPMAzureUserScriptsBadRequest struct {

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAzureProvisionGetUserScriptResponseV1
}

// IsSuccess returns true when this get c s p m azure user scripts bad request response has a 2xx status code
func (o *GetCSPMAzureUserScriptsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get c s p m azure user scripts bad request response has a 3xx status code
func (o *GetCSPMAzureUserScriptsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m azure user scripts bad request response has a 4xx status code
func (o *GetCSPMAzureUserScriptsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get c s p m azure user scripts bad request response has a 5xx status code
func (o *GetCSPMAzureUserScriptsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get c s p m azure user scripts bad request response a status code equal to that given
func (o *GetCSPMAzureUserScriptsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get c s p m azure user scripts bad request response
func (o *GetCSPMAzureUserScriptsBadRequest) Code() int {
	return 400
}

func (o *GetCSPMAzureUserScriptsBadRequest) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-azure/entities/user-scripts/v1][%d] getCSPMAzureUserScriptsBadRequest  %+v", 400, o.Payload)
}

func (o *GetCSPMAzureUserScriptsBadRequest) String() string {
	return fmt.Sprintf("[GET /cloud-connect-azure/entities/user-scripts/v1][%d] getCSPMAzureUserScriptsBadRequest  %+v", 400, o.Payload)
}

func (o *GetCSPMAzureUserScriptsBadRequest) GetPayload() *models.RegistrationAzureProvisionGetUserScriptResponseV1 {
	return o.Payload
}

func (o *GetCSPMAzureUserScriptsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAzureProvisionGetUserScriptResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMAzureUserScriptsForbidden creates a GetCSPMAzureUserScriptsForbidden with default headers values
func NewGetCSPMAzureUserScriptsForbidden() *GetCSPMAzureUserScriptsForbidden {
	return &GetCSPMAzureUserScriptsForbidden{}
}

/*
GetCSPMAzureUserScriptsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetCSPMAzureUserScriptsForbidden struct {

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get c s p m azure user scripts forbidden response has a 2xx status code
func (o *GetCSPMAzureUserScriptsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get c s p m azure user scripts forbidden response has a 3xx status code
func (o *GetCSPMAzureUserScriptsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m azure user scripts forbidden response has a 4xx status code
func (o *GetCSPMAzureUserScriptsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get c s p m azure user scripts forbidden response has a 5xx status code
func (o *GetCSPMAzureUserScriptsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get c s p m azure user scripts forbidden response a status code equal to that given
func (o *GetCSPMAzureUserScriptsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get c s p m azure user scripts forbidden response
func (o *GetCSPMAzureUserScriptsForbidden) Code() int {
	return 403
}

func (o *GetCSPMAzureUserScriptsForbidden) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-azure/entities/user-scripts/v1][%d] getCSPMAzureUserScriptsForbidden  %+v", 403, o.Payload)
}

func (o *GetCSPMAzureUserScriptsForbidden) String() string {
	return fmt.Sprintf("[GET /cloud-connect-azure/entities/user-scripts/v1][%d] getCSPMAzureUserScriptsForbidden  %+v", 403, o.Payload)
}

func (o *GetCSPMAzureUserScriptsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetCSPMAzureUserScriptsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMAzureUserScriptsTooManyRequests creates a GetCSPMAzureUserScriptsTooManyRequests with default headers values
func NewGetCSPMAzureUserScriptsTooManyRequests() *GetCSPMAzureUserScriptsTooManyRequests {
	return &GetCSPMAzureUserScriptsTooManyRequests{}
}

/*
GetCSPMAzureUserScriptsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetCSPMAzureUserScriptsTooManyRequests struct {

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get c s p m azure user scripts too many requests response has a 2xx status code
func (o *GetCSPMAzureUserScriptsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get c s p m azure user scripts too many requests response has a 3xx status code
func (o *GetCSPMAzureUserScriptsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m azure user scripts too many requests response has a 4xx status code
func (o *GetCSPMAzureUserScriptsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get c s p m azure user scripts too many requests response has a 5xx status code
func (o *GetCSPMAzureUserScriptsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get c s p m azure user scripts too many requests response a status code equal to that given
func (o *GetCSPMAzureUserScriptsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get c s p m azure user scripts too many requests response
func (o *GetCSPMAzureUserScriptsTooManyRequests) Code() int {
	return 429
}

func (o *GetCSPMAzureUserScriptsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-azure/entities/user-scripts/v1][%d] getCSPMAzureUserScriptsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCSPMAzureUserScriptsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /cloud-connect-azure/entities/user-scripts/v1][%d] getCSPMAzureUserScriptsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCSPMAzureUserScriptsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetCSPMAzureUserScriptsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMAzureUserScriptsInternalServerError creates a GetCSPMAzureUserScriptsInternalServerError with default headers values
func NewGetCSPMAzureUserScriptsInternalServerError() *GetCSPMAzureUserScriptsInternalServerError {
	return &GetCSPMAzureUserScriptsInternalServerError{}
}

/*
GetCSPMAzureUserScriptsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetCSPMAzureUserScriptsInternalServerError struct {

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAzureProvisionGetUserScriptResponseV1
}

// IsSuccess returns true when this get c s p m azure user scripts internal server error response has a 2xx status code
func (o *GetCSPMAzureUserScriptsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get c s p m azure user scripts internal server error response has a 3xx status code
func (o *GetCSPMAzureUserScriptsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m azure user scripts internal server error response has a 4xx status code
func (o *GetCSPMAzureUserScriptsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get c s p m azure user scripts internal server error response has a 5xx status code
func (o *GetCSPMAzureUserScriptsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get c s p m azure user scripts internal server error response a status code equal to that given
func (o *GetCSPMAzureUserScriptsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get c s p m azure user scripts internal server error response
func (o *GetCSPMAzureUserScriptsInternalServerError) Code() int {
	return 500
}

func (o *GetCSPMAzureUserScriptsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-azure/entities/user-scripts/v1][%d] getCSPMAzureUserScriptsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCSPMAzureUserScriptsInternalServerError) String() string {
	return fmt.Sprintf("[GET /cloud-connect-azure/entities/user-scripts/v1][%d] getCSPMAzureUserScriptsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCSPMAzureUserScriptsInternalServerError) GetPayload() *models.RegistrationAzureProvisionGetUserScriptResponseV1 {
	return o.Payload
}

func (o *GetCSPMAzureUserScriptsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAzureProvisionGetUserScriptResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMAzureUserScriptsDefault creates a GetCSPMAzureUserScriptsDefault with default headers values
func NewGetCSPMAzureUserScriptsDefault(code int) *GetCSPMAzureUserScriptsDefault {
	return &GetCSPMAzureUserScriptsDefault{
		_statusCode: code,
	}
}

/*
GetCSPMAzureUserScriptsDefault describes a response with status code -1, with default header values.

OK
*/
type GetCSPMAzureUserScriptsDefault struct {
	_statusCode int

	Payload *models.RegistrationAzureProvisionGetUserScriptResponseV1
}

// IsSuccess returns true when this get c s p m azure user scripts default response has a 2xx status code
func (o *GetCSPMAzureUserScriptsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get c s p m azure user scripts default response has a 3xx status code
func (o *GetCSPMAzureUserScriptsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get c s p m azure user scripts default response has a 4xx status code
func (o *GetCSPMAzureUserScriptsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get c s p m azure user scripts default response has a 5xx status code
func (o *GetCSPMAzureUserScriptsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get c s p m azure user scripts default response a status code equal to that given
func (o *GetCSPMAzureUserScriptsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get c s p m azure user scripts default response
func (o *GetCSPMAzureUserScriptsDefault) Code() int {
	return o._statusCode
}

func (o *GetCSPMAzureUserScriptsDefault) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-azure/entities/user-scripts/v1][%d] GetCSPMAzureUserScripts default  %+v", o._statusCode, o.Payload)
}

func (o *GetCSPMAzureUserScriptsDefault) String() string {
	return fmt.Sprintf("[GET /cloud-connect-azure/entities/user-scripts/v1][%d] GetCSPMAzureUserScripts default  %+v", o._statusCode, o.Payload)
}

func (o *GetCSPMAzureUserScriptsDefault) GetPayload() *models.RegistrationAzureProvisionGetUserScriptResponseV1 {
	return o.Payload
}

func (o *GetCSPMAzureUserScriptsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RegistrationAzureProvisionGetUserScriptResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
