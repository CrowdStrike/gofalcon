// Code generated by go-swagger; DO NOT EDIT.

package d4c_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetCSPMGCPUserScriptsReader is a Reader for the GetCSPMGCPUserScripts structure.
type GetCSPMGCPUserScriptsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCSPMGCPUserScriptsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCSPMGCPUserScriptsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 207:
		result := NewGetCSPMGCPUserScriptsMultiStatus()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCSPMGCPUserScriptsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCSPMGCPUserScriptsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetCSPMGCPUserScriptsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCSPMGCPUserScriptsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetCSPMGCPUserScriptsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetCSPMGCPUserScriptsOK creates a GetCSPMGCPUserScriptsOK with default headers values
func NewGetCSPMGCPUserScriptsOK() *GetCSPMGCPUserScriptsOK {
	return &GetCSPMGCPUserScriptsOK{}
}

/*
GetCSPMGCPUserScriptsOK describes a response with status code 200, with default header values.

OK
*/
type GetCSPMGCPUserScriptsOK struct {

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationGCPProvisionGetUserScriptResponseV1
}

// IsSuccess returns true when this get c s p m g c p user scripts o k response has a 2xx status code
func (o *GetCSPMGCPUserScriptsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get c s p m g c p user scripts o k response has a 3xx status code
func (o *GetCSPMGCPUserScriptsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m g c p user scripts o k response has a 4xx status code
func (o *GetCSPMGCPUserScriptsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get c s p m g c p user scripts o k response has a 5xx status code
func (o *GetCSPMGCPUserScriptsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get c s p m g c p user scripts o k response a status code equal to that given
func (o *GetCSPMGCPUserScriptsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get c s p m g c p user scripts o k response
func (o *GetCSPMGCPUserScriptsOK) Code() int {
	return 200
}

func (o *GetCSPMGCPUserScriptsOK) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getCSPMGCPUserScriptsOK  %+v", 200, o.Payload)
}

func (o *GetCSPMGCPUserScriptsOK) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getCSPMGCPUserScriptsOK  %+v", 200, o.Payload)
}

func (o *GetCSPMGCPUserScriptsOK) GetPayload() *models.RegistrationGCPProvisionGetUserScriptResponseV1 {
	return o.Payload
}

func (o *GetCSPMGCPUserScriptsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationGCPProvisionGetUserScriptResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMGCPUserScriptsMultiStatus creates a GetCSPMGCPUserScriptsMultiStatus with default headers values
func NewGetCSPMGCPUserScriptsMultiStatus() *GetCSPMGCPUserScriptsMultiStatus {
	return &GetCSPMGCPUserScriptsMultiStatus{}
}

/*
GetCSPMGCPUserScriptsMultiStatus describes a response with status code 207, with default header values.

Multi-Status
*/
type GetCSPMGCPUserScriptsMultiStatus struct {

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationGCPProvisionGetUserScriptResponseV1
}

// IsSuccess returns true when this get c s p m g c p user scripts multi status response has a 2xx status code
func (o *GetCSPMGCPUserScriptsMultiStatus) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get c s p m g c p user scripts multi status response has a 3xx status code
func (o *GetCSPMGCPUserScriptsMultiStatus) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m g c p user scripts multi status response has a 4xx status code
func (o *GetCSPMGCPUserScriptsMultiStatus) IsClientError() bool {
	return false
}

// IsServerError returns true when this get c s p m g c p user scripts multi status response has a 5xx status code
func (o *GetCSPMGCPUserScriptsMultiStatus) IsServerError() bool {
	return false
}

// IsCode returns true when this get c s p m g c p user scripts multi status response a status code equal to that given
func (o *GetCSPMGCPUserScriptsMultiStatus) IsCode(code int) bool {
	return code == 207
}

// Code gets the status code for the get c s p m g c p user scripts multi status response
func (o *GetCSPMGCPUserScriptsMultiStatus) Code() int {
	return 207
}

func (o *GetCSPMGCPUserScriptsMultiStatus) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getCSPMGCPUserScriptsMultiStatus  %+v", 207, o.Payload)
}

func (o *GetCSPMGCPUserScriptsMultiStatus) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getCSPMGCPUserScriptsMultiStatus  %+v", 207, o.Payload)
}

func (o *GetCSPMGCPUserScriptsMultiStatus) GetPayload() *models.RegistrationGCPProvisionGetUserScriptResponseV1 {
	return o.Payload
}

func (o *GetCSPMGCPUserScriptsMultiStatus) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationGCPProvisionGetUserScriptResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMGCPUserScriptsBadRequest creates a GetCSPMGCPUserScriptsBadRequest with default headers values
func NewGetCSPMGCPUserScriptsBadRequest() *GetCSPMGCPUserScriptsBadRequest {
	return &GetCSPMGCPUserScriptsBadRequest{}
}

/*
GetCSPMGCPUserScriptsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetCSPMGCPUserScriptsBadRequest struct {

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationGCPProvisionGetUserScriptResponseV1
}

// IsSuccess returns true when this get c s p m g c p user scripts bad request response has a 2xx status code
func (o *GetCSPMGCPUserScriptsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get c s p m g c p user scripts bad request response has a 3xx status code
func (o *GetCSPMGCPUserScriptsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m g c p user scripts bad request response has a 4xx status code
func (o *GetCSPMGCPUserScriptsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get c s p m g c p user scripts bad request response has a 5xx status code
func (o *GetCSPMGCPUserScriptsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get c s p m g c p user scripts bad request response a status code equal to that given
func (o *GetCSPMGCPUserScriptsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get c s p m g c p user scripts bad request response
func (o *GetCSPMGCPUserScriptsBadRequest) Code() int {
	return 400
}

func (o *GetCSPMGCPUserScriptsBadRequest) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getCSPMGCPUserScriptsBadRequest  %+v", 400, o.Payload)
}

func (o *GetCSPMGCPUserScriptsBadRequest) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getCSPMGCPUserScriptsBadRequest  %+v", 400, o.Payload)
}

func (o *GetCSPMGCPUserScriptsBadRequest) GetPayload() *models.RegistrationGCPProvisionGetUserScriptResponseV1 {
	return o.Payload
}

func (o *GetCSPMGCPUserScriptsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationGCPProvisionGetUserScriptResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMGCPUserScriptsForbidden creates a GetCSPMGCPUserScriptsForbidden with default headers values
func NewGetCSPMGCPUserScriptsForbidden() *GetCSPMGCPUserScriptsForbidden {
	return &GetCSPMGCPUserScriptsForbidden{}
}

/*
GetCSPMGCPUserScriptsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetCSPMGCPUserScriptsForbidden struct {

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get c s p m g c p user scripts forbidden response has a 2xx status code
func (o *GetCSPMGCPUserScriptsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get c s p m g c p user scripts forbidden response has a 3xx status code
func (o *GetCSPMGCPUserScriptsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m g c p user scripts forbidden response has a 4xx status code
func (o *GetCSPMGCPUserScriptsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get c s p m g c p user scripts forbidden response has a 5xx status code
func (o *GetCSPMGCPUserScriptsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get c s p m g c p user scripts forbidden response a status code equal to that given
func (o *GetCSPMGCPUserScriptsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get c s p m g c p user scripts forbidden response
func (o *GetCSPMGCPUserScriptsForbidden) Code() int {
	return 403
}

func (o *GetCSPMGCPUserScriptsForbidden) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getCSPMGCPUserScriptsForbidden  %+v", 403, o.Payload)
}

func (o *GetCSPMGCPUserScriptsForbidden) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getCSPMGCPUserScriptsForbidden  %+v", 403, o.Payload)
}

func (o *GetCSPMGCPUserScriptsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetCSPMGCPUserScriptsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMGCPUserScriptsTooManyRequests creates a GetCSPMGCPUserScriptsTooManyRequests with default headers values
func NewGetCSPMGCPUserScriptsTooManyRequests() *GetCSPMGCPUserScriptsTooManyRequests {
	return &GetCSPMGCPUserScriptsTooManyRequests{}
}

/*
GetCSPMGCPUserScriptsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetCSPMGCPUserScriptsTooManyRequests struct {

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get c s p m g c p user scripts too many requests response has a 2xx status code
func (o *GetCSPMGCPUserScriptsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get c s p m g c p user scripts too many requests response has a 3xx status code
func (o *GetCSPMGCPUserScriptsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m g c p user scripts too many requests response has a 4xx status code
func (o *GetCSPMGCPUserScriptsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get c s p m g c p user scripts too many requests response has a 5xx status code
func (o *GetCSPMGCPUserScriptsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get c s p m g c p user scripts too many requests response a status code equal to that given
func (o *GetCSPMGCPUserScriptsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get c s p m g c p user scripts too many requests response
func (o *GetCSPMGCPUserScriptsTooManyRequests) Code() int {
	return 429
}

func (o *GetCSPMGCPUserScriptsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getCSPMGCPUserScriptsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCSPMGCPUserScriptsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getCSPMGCPUserScriptsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCSPMGCPUserScriptsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetCSPMGCPUserScriptsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMGCPUserScriptsInternalServerError creates a GetCSPMGCPUserScriptsInternalServerError with default headers values
func NewGetCSPMGCPUserScriptsInternalServerError() *GetCSPMGCPUserScriptsInternalServerError {
	return &GetCSPMGCPUserScriptsInternalServerError{}
}

/*
GetCSPMGCPUserScriptsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetCSPMGCPUserScriptsInternalServerError struct {

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationGCPProvisionGetUserScriptResponseV1
}

// IsSuccess returns true when this get c s p m g c p user scripts internal server error response has a 2xx status code
func (o *GetCSPMGCPUserScriptsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get c s p m g c p user scripts internal server error response has a 3xx status code
func (o *GetCSPMGCPUserScriptsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m g c p user scripts internal server error response has a 4xx status code
func (o *GetCSPMGCPUserScriptsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get c s p m g c p user scripts internal server error response has a 5xx status code
func (o *GetCSPMGCPUserScriptsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get c s p m g c p user scripts internal server error response a status code equal to that given
func (o *GetCSPMGCPUserScriptsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get c s p m g c p user scripts internal server error response
func (o *GetCSPMGCPUserScriptsInternalServerError) Code() int {
	return 500
}

func (o *GetCSPMGCPUserScriptsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getCSPMGCPUserScriptsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCSPMGCPUserScriptsInternalServerError) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getCSPMGCPUserScriptsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCSPMGCPUserScriptsInternalServerError) GetPayload() *models.RegistrationGCPProvisionGetUserScriptResponseV1 {
	return o.Payload
}

func (o *GetCSPMGCPUserScriptsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationGCPProvisionGetUserScriptResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMGCPUserScriptsDefault creates a GetCSPMGCPUserScriptsDefault with default headers values
func NewGetCSPMGCPUserScriptsDefault(code int) *GetCSPMGCPUserScriptsDefault {
	return &GetCSPMGCPUserScriptsDefault{
		_statusCode: code,
	}
}

/*
GetCSPMGCPUserScriptsDefault describes a response with status code -1, with default header values.

OK
*/
type GetCSPMGCPUserScriptsDefault struct {
	_statusCode int

	Payload *models.RegistrationGCPProvisionGetUserScriptResponseV1
}

// IsSuccess returns true when this get c s p m g c p user scripts default response has a 2xx status code
func (o *GetCSPMGCPUserScriptsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get c s p m g c p user scripts default response has a 3xx status code
func (o *GetCSPMGCPUserScriptsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get c s p m g c p user scripts default response has a 4xx status code
func (o *GetCSPMGCPUserScriptsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get c s p m g c p user scripts default response has a 5xx status code
func (o *GetCSPMGCPUserScriptsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get c s p m g c p user scripts default response a status code equal to that given
func (o *GetCSPMGCPUserScriptsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get c s p m g c p user scripts default response
func (o *GetCSPMGCPUserScriptsDefault) Code() int {
	return o._statusCode
}

func (o *GetCSPMGCPUserScriptsDefault) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] GetCSPMGCPUserScripts default  %+v", o._statusCode, o.Payload)
}

func (o *GetCSPMGCPUserScriptsDefault) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] GetCSPMGCPUserScripts default  %+v", o._statusCode, o.Payload)
}

func (o *GetCSPMGCPUserScriptsDefault) GetPayload() *models.RegistrationGCPProvisionGetUserScriptResponseV1 {
	return o.Payload
}

func (o *GetCSPMGCPUserScriptsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RegistrationGCPProvisionGetUserScriptResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
