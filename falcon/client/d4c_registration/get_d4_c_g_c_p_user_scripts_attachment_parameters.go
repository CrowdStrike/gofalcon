// Code generated by go-swagger; DO NOT EDIT.

package d4c_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetD4CGCPUserScriptsAttachmentParams creates a new GetD4CGCPUserScriptsAttachmentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetD4CGCPUserScriptsAttachmentParams() *GetD4CGCPUserScriptsAttachmentParams {
	return &GetD4CGCPUserScriptsAttachmentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetD4CGCPUserScriptsAttachmentParamsWithTimeout creates a new GetD4CGCPUserScriptsAttachmentParams object
// with the ability to set a timeout on a request.
func NewGetD4CGCPUserScriptsAttachmentParamsWithTimeout(timeout time.Duration) *GetD4CGCPUserScriptsAttachmentParams {
	return &GetD4CGCPUserScriptsAttachmentParams{
		timeout: timeout,
	}
}

// NewGetD4CGCPUserScriptsAttachmentParamsWithContext creates a new GetD4CGCPUserScriptsAttachmentParams object
// with the ability to set a context for a request.
func NewGetD4CGCPUserScriptsAttachmentParamsWithContext(ctx context.Context) *GetD4CGCPUserScriptsAttachmentParams {
	return &GetD4CGCPUserScriptsAttachmentParams{
		Context: ctx,
	}
}

// NewGetD4CGCPUserScriptsAttachmentParamsWithHTTPClient creates a new GetD4CGCPUserScriptsAttachmentParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetD4CGCPUserScriptsAttachmentParamsWithHTTPClient(client *http.Client) *GetD4CGCPUserScriptsAttachmentParams {
	return &GetD4CGCPUserScriptsAttachmentParams{
		HTTPClient: client,
	}
}

/*
GetD4CGCPUserScriptsAttachmentParams contains all the parameters to send to the API endpoint

	for the get d4 c g c p user scripts attachment operation.

	Typically these are written to a http.Request.
*/
type GetD4CGCPUserScriptsAttachmentParams struct {

	/* Ids.

	   Hierarchical Resource IDs of accounts
	*/
	Ids []string

	/* ParentType.

	   GCP Hierarchy Parent Type, organization/folder/project
	*/
	ParentType *string

	/* Status.

	   Account status to filter results by.
	*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get d4 c g c p user scripts attachment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetD4CGCPUserScriptsAttachmentParams) WithDefaults() *GetD4CGCPUserScriptsAttachmentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get d4 c g c p user scripts attachment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetD4CGCPUserScriptsAttachmentParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get d4 c g c p user scripts attachment params
func (o *GetD4CGCPUserScriptsAttachmentParams) WithTimeout(timeout time.Duration) *GetD4CGCPUserScriptsAttachmentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get d4 c g c p user scripts attachment params
func (o *GetD4CGCPUserScriptsAttachmentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get d4 c g c p user scripts attachment params
func (o *GetD4CGCPUserScriptsAttachmentParams) WithContext(ctx context.Context) *GetD4CGCPUserScriptsAttachmentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get d4 c g c p user scripts attachment params
func (o *GetD4CGCPUserScriptsAttachmentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get d4 c g c p user scripts attachment params
func (o *GetD4CGCPUserScriptsAttachmentParams) WithHTTPClient(client *http.Client) *GetD4CGCPUserScriptsAttachmentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get d4 c g c p user scripts attachment params
func (o *GetD4CGCPUserScriptsAttachmentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIds adds the ids to the get d4 c g c p user scripts attachment params
func (o *GetD4CGCPUserScriptsAttachmentParams) WithIds(ids []string) *GetD4CGCPUserScriptsAttachmentParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get d4 c g c p user scripts attachment params
func (o *GetD4CGCPUserScriptsAttachmentParams) SetIds(ids []string) {
	o.Ids = ids
}

// WithParentType adds the parentType to the get d4 c g c p user scripts attachment params
func (o *GetD4CGCPUserScriptsAttachmentParams) WithParentType(parentType *string) *GetD4CGCPUserScriptsAttachmentParams {
	o.SetParentType(parentType)
	return o
}

// SetParentType adds the parentType to the get d4 c g c p user scripts attachment params
func (o *GetD4CGCPUserScriptsAttachmentParams) SetParentType(parentType *string) {
	o.ParentType = parentType
}

// WithStatus adds the status to the get d4 c g c p user scripts attachment params
func (o *GetD4CGCPUserScriptsAttachmentParams) WithStatus(status *string) *GetD4CGCPUserScriptsAttachmentParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get d4 c g c p user scripts attachment params
func (o *GetD4CGCPUserScriptsAttachmentParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *GetD4CGCPUserScriptsAttachmentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.ParentType != nil {

		// query param parent_type
		var qrParentType string

		if o.ParentType != nil {
			qrParentType = *o.ParentType
		}
		qParentType := qrParentType
		if qParentType != "" {

			if err := r.SetQueryParam("parent_type", qParentType); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetD4CGCPUserScriptsAttachment binds the parameter ids
func (o *GetD4CGCPUserScriptsAttachmentParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []string

		idsIIV := idsIIR // string as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: "multi"
	idsIS := swag.JoinByFormat(idsIC, "multi")

	return idsIS
}
