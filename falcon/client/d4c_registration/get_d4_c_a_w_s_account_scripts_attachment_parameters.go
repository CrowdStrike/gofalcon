// Code generated by go-swagger; DO NOT EDIT.

package d4c_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetD4CAWSAccountScriptsAttachmentParams creates a new GetD4CAWSAccountScriptsAttachmentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetD4CAWSAccountScriptsAttachmentParams() *GetD4CAWSAccountScriptsAttachmentParams {
	return &GetD4CAWSAccountScriptsAttachmentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetD4CAWSAccountScriptsAttachmentParamsWithTimeout creates a new GetD4CAWSAccountScriptsAttachmentParams object
// with the ability to set a timeout on a request.
func NewGetD4CAWSAccountScriptsAttachmentParamsWithTimeout(timeout time.Duration) *GetD4CAWSAccountScriptsAttachmentParams {
	return &GetD4CAWSAccountScriptsAttachmentParams{
		timeout: timeout,
	}
}

// NewGetD4CAWSAccountScriptsAttachmentParamsWithContext creates a new GetD4CAWSAccountScriptsAttachmentParams object
// with the ability to set a context for a request.
func NewGetD4CAWSAccountScriptsAttachmentParamsWithContext(ctx context.Context) *GetD4CAWSAccountScriptsAttachmentParams {
	return &GetD4CAWSAccountScriptsAttachmentParams{
		Context: ctx,
	}
}

// NewGetD4CAWSAccountScriptsAttachmentParamsWithHTTPClient creates a new GetD4CAWSAccountScriptsAttachmentParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetD4CAWSAccountScriptsAttachmentParamsWithHTTPClient(client *http.Client) *GetD4CAWSAccountScriptsAttachmentParams {
	return &GetD4CAWSAccountScriptsAttachmentParams{
		HTTPClient: client,
	}
}

/*
GetD4CAWSAccountScriptsAttachmentParams contains all the parameters to send to the API endpoint

	for the get d4 c a w s account scripts attachment operation.

	Typically these are written to a http.Request.
*/
type GetD4CAWSAccountScriptsAttachmentParams struct {

	/* Accounts.

	   The list of accounts to register
	*/
	Accounts []string

	/* AwsProfile.

	   The AWS profile to be used during registration
	*/
	AwsProfile *string

	/* AwsRegion.

	   The AWS region to be used during registration
	*/
	AwsRegion *string

	// BehaviorAssessmentEnabled.
	BehaviorAssessmentEnabled *string

	// DspmEnabled.
	DspmEnabled *string

	// DspmHostAccountID.
	DspmHostAccountID *string

	// DspmHostIntegrationRoleName.
	DspmHostIntegrationRoleName *string

	// DspmHostScannerRoleName.
	DspmHostScannerRoleName *string

	// DspmRegions.
	DspmRegions []string

	// DspmRole.
	DspmRole *string

	/* FalconClientID.

	   The Falcon client ID used during registration
	*/
	FalconClientID *string

	/* IamRoleArn.

	   The custom IAM role to be used during registration
	*/
	IamRoleArn *string

	/* IdpEnabled.

	   Set to true to enable Identity Protection feature
	*/
	IdpEnabled *string

	/* Ids.

	   AWS account IDs
	*/
	Ids []string

	/* OrganizationID.

	   The AWS organization ID to be registered
	*/
	OrganizationID *string

	/* OrganizationalUnitIds.

	   The AWS Organizational Unit IDs to be registered
	*/
	OrganizationalUnitIds []string

	// SensorManagementEnabled.
	SensorManagementEnabled *string

	/* Tags.

	   Base64 encoded JSON string to be used as AWS tags
	*/
	Tags *string

	/* Template.

	   Template to be rendered

	   Default: "aws-bash"
	*/
	Template *string

	// UseExistingCloudtrail.
	UseExistingCloudtrail *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get d4 c a w s account scripts attachment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithDefaults() *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get d4 c a w s account scripts attachment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetDefaults() {
	var (
		templateDefault = string("aws-bash")
	)

	val := GetD4CAWSAccountScriptsAttachmentParams{
		Template: &templateDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithTimeout(timeout time.Duration) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithContext(ctx context.Context) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithHTTPClient(client *http.Client) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccounts adds the accounts to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithAccounts(accounts []string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetAccounts(accounts)
	return o
}

// SetAccounts adds the accounts to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetAccounts(accounts []string) {
	o.Accounts = accounts
}

// WithAwsProfile adds the awsProfile to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithAwsProfile(awsProfile *string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetAwsProfile(awsProfile)
	return o
}

// SetAwsProfile adds the awsProfile to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetAwsProfile(awsProfile *string) {
	o.AwsProfile = awsProfile
}

// WithAwsRegion adds the awsRegion to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithAwsRegion(awsRegion *string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetAwsRegion(awsRegion)
	return o
}

// SetAwsRegion adds the awsRegion to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetAwsRegion(awsRegion *string) {
	o.AwsRegion = awsRegion
}

// WithBehaviorAssessmentEnabled adds the behaviorAssessmentEnabled to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithBehaviorAssessmentEnabled(behaviorAssessmentEnabled *string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetBehaviorAssessmentEnabled(behaviorAssessmentEnabled)
	return o
}

// SetBehaviorAssessmentEnabled adds the behaviorAssessmentEnabled to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetBehaviorAssessmentEnabled(behaviorAssessmentEnabled *string) {
	o.BehaviorAssessmentEnabled = behaviorAssessmentEnabled
}

// WithDspmEnabled adds the dspmEnabled to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithDspmEnabled(dspmEnabled *string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetDspmEnabled(dspmEnabled)
	return o
}

// SetDspmEnabled adds the dspmEnabled to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetDspmEnabled(dspmEnabled *string) {
	o.DspmEnabled = dspmEnabled
}

// WithDspmHostAccountID adds the dspmHostAccountID to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithDspmHostAccountID(dspmHostAccountID *string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetDspmHostAccountID(dspmHostAccountID)
	return o
}

// SetDspmHostAccountID adds the dspmHostAccountId to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetDspmHostAccountID(dspmHostAccountID *string) {
	o.DspmHostAccountID = dspmHostAccountID
}

// WithDspmHostIntegrationRoleName adds the dspmHostIntegrationRoleName to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithDspmHostIntegrationRoleName(dspmHostIntegrationRoleName *string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetDspmHostIntegrationRoleName(dspmHostIntegrationRoleName)
	return o
}

// SetDspmHostIntegrationRoleName adds the dspmHostIntegrationRoleName to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetDspmHostIntegrationRoleName(dspmHostIntegrationRoleName *string) {
	o.DspmHostIntegrationRoleName = dspmHostIntegrationRoleName
}

// WithDspmHostScannerRoleName adds the dspmHostScannerRoleName to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithDspmHostScannerRoleName(dspmHostScannerRoleName *string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetDspmHostScannerRoleName(dspmHostScannerRoleName)
	return o
}

// SetDspmHostScannerRoleName adds the dspmHostScannerRoleName to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetDspmHostScannerRoleName(dspmHostScannerRoleName *string) {
	o.DspmHostScannerRoleName = dspmHostScannerRoleName
}

// WithDspmRegions adds the dspmRegions to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithDspmRegions(dspmRegions []string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetDspmRegions(dspmRegions)
	return o
}

// SetDspmRegions adds the dspmRegions to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetDspmRegions(dspmRegions []string) {
	o.DspmRegions = dspmRegions
}

// WithDspmRole adds the dspmRole to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithDspmRole(dspmRole *string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetDspmRole(dspmRole)
	return o
}

// SetDspmRole adds the dspmRole to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetDspmRole(dspmRole *string) {
	o.DspmRole = dspmRole
}

// WithFalconClientID adds the falconClientID to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithFalconClientID(falconClientID *string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetFalconClientID(falconClientID)
	return o
}

// SetFalconClientID adds the falconClientId to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetFalconClientID(falconClientID *string) {
	o.FalconClientID = falconClientID
}

// WithIamRoleArn adds the iamRoleArn to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithIamRoleArn(iamRoleArn *string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetIamRoleArn(iamRoleArn)
	return o
}

// SetIamRoleArn adds the iamRoleArn to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetIamRoleArn(iamRoleArn *string) {
	o.IamRoleArn = iamRoleArn
}

// WithIdpEnabled adds the idpEnabled to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithIdpEnabled(idpEnabled *string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetIdpEnabled(idpEnabled)
	return o
}

// SetIdpEnabled adds the idpEnabled to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetIdpEnabled(idpEnabled *string) {
	o.IdpEnabled = idpEnabled
}

// WithIds adds the ids to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithIds(ids []string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetIds(ids []string) {
	o.Ids = ids
}

// WithOrganizationID adds the organizationID to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithOrganizationID(organizationID *string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetOrganizationID(organizationID *string) {
	o.OrganizationID = organizationID
}

// WithOrganizationalUnitIds adds the organizationalUnitIds to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithOrganizationalUnitIds(organizationalUnitIds []string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetOrganizationalUnitIds(organizationalUnitIds)
	return o
}

// SetOrganizationalUnitIds adds the organizationalUnitIds to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetOrganizationalUnitIds(organizationalUnitIds []string) {
	o.OrganizationalUnitIds = organizationalUnitIds
}

// WithSensorManagementEnabled adds the sensorManagementEnabled to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithSensorManagementEnabled(sensorManagementEnabled *string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetSensorManagementEnabled(sensorManagementEnabled)
	return o
}

// SetSensorManagementEnabled adds the sensorManagementEnabled to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetSensorManagementEnabled(sensorManagementEnabled *string) {
	o.SensorManagementEnabled = sensorManagementEnabled
}

// WithTags adds the tags to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithTags(tags *string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetTags(tags *string) {
	o.Tags = tags
}

// WithTemplate adds the template to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithTemplate(template *string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetTemplate(template)
	return o
}

// SetTemplate adds the template to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetTemplate(template *string) {
	o.Template = template
}

// WithUseExistingCloudtrail adds the useExistingCloudtrail to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithUseExistingCloudtrail(useExistingCloudtrail *string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetUseExistingCloudtrail(useExistingCloudtrail)
	return o
}

// SetUseExistingCloudtrail adds the useExistingCloudtrail to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetUseExistingCloudtrail(useExistingCloudtrail *string) {
	o.UseExistingCloudtrail = useExistingCloudtrail
}

// WriteToRequest writes these params to a swagger request
func (o *GetD4CAWSAccountScriptsAttachmentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Accounts != nil {

		// binding items for accounts
		joinedAccounts := o.bindParamAccounts(reg)

		// query array param accounts
		if err := r.SetQueryParam("accounts", joinedAccounts...); err != nil {
			return err
		}
	}

	if o.AwsProfile != nil {

		// query param aws_profile
		var qrAwsProfile string

		if o.AwsProfile != nil {
			qrAwsProfile = *o.AwsProfile
		}
		qAwsProfile := qrAwsProfile
		if qAwsProfile != "" {

			if err := r.SetQueryParam("aws_profile", qAwsProfile); err != nil {
				return err
			}
		}
	}

	if o.AwsRegion != nil {

		// query param aws_region
		var qrAwsRegion string

		if o.AwsRegion != nil {
			qrAwsRegion = *o.AwsRegion
		}
		qAwsRegion := qrAwsRegion
		if qAwsRegion != "" {

			if err := r.SetQueryParam("aws_region", qAwsRegion); err != nil {
				return err
			}
		}
	}

	if o.BehaviorAssessmentEnabled != nil {

		// query param behavior_assessment_enabled
		var qrBehaviorAssessmentEnabled string

		if o.BehaviorAssessmentEnabled != nil {
			qrBehaviorAssessmentEnabled = *o.BehaviorAssessmentEnabled
		}
		qBehaviorAssessmentEnabled := qrBehaviorAssessmentEnabled
		if qBehaviorAssessmentEnabled != "" {

			if err := r.SetQueryParam("behavior_assessment_enabled", qBehaviorAssessmentEnabled); err != nil {
				return err
			}
		}
	}

	if o.DspmEnabled != nil {

		// query param dspm_enabled
		var qrDspmEnabled string

		if o.DspmEnabled != nil {
			qrDspmEnabled = *o.DspmEnabled
		}
		qDspmEnabled := qrDspmEnabled
		if qDspmEnabled != "" {

			if err := r.SetQueryParam("dspm_enabled", qDspmEnabled); err != nil {
				return err
			}
		}
	}

	if o.DspmHostAccountID != nil {

		// query param dspm_host_account_id
		var qrDspmHostAccountID string

		if o.DspmHostAccountID != nil {
			qrDspmHostAccountID = *o.DspmHostAccountID
		}
		qDspmHostAccountID := qrDspmHostAccountID
		if qDspmHostAccountID != "" {

			if err := r.SetQueryParam("dspm_host_account_id", qDspmHostAccountID); err != nil {
				return err
			}
		}
	}

	if o.DspmHostIntegrationRoleName != nil {

		// query param dspm_host_integration_role_name
		var qrDspmHostIntegrationRoleName string

		if o.DspmHostIntegrationRoleName != nil {
			qrDspmHostIntegrationRoleName = *o.DspmHostIntegrationRoleName
		}
		qDspmHostIntegrationRoleName := qrDspmHostIntegrationRoleName
		if qDspmHostIntegrationRoleName != "" {

			if err := r.SetQueryParam("dspm_host_integration_role_name", qDspmHostIntegrationRoleName); err != nil {
				return err
			}
		}
	}

	if o.DspmHostScannerRoleName != nil {

		// query param dspm_host_scanner_role_name
		var qrDspmHostScannerRoleName string

		if o.DspmHostScannerRoleName != nil {
			qrDspmHostScannerRoleName = *o.DspmHostScannerRoleName
		}
		qDspmHostScannerRoleName := qrDspmHostScannerRoleName
		if qDspmHostScannerRoleName != "" {

			if err := r.SetQueryParam("dspm_host_scanner_role_name", qDspmHostScannerRoleName); err != nil {
				return err
			}
		}
	}

	if o.DspmRegions != nil {

		// binding items for dspm_regions
		joinedDspmRegions := o.bindParamDspmRegions(reg)

		// query array param dspm_regions
		if err := r.SetQueryParam("dspm_regions", joinedDspmRegions...); err != nil {
			return err
		}
	}

	if o.DspmRole != nil {

		// query param dspm_role
		var qrDspmRole string

		if o.DspmRole != nil {
			qrDspmRole = *o.DspmRole
		}
		qDspmRole := qrDspmRole
		if qDspmRole != "" {

			if err := r.SetQueryParam("dspm_role", qDspmRole); err != nil {
				return err
			}
		}
	}

	if o.FalconClientID != nil {

		// query param falcon_client_id
		var qrFalconClientID string

		if o.FalconClientID != nil {
			qrFalconClientID = *o.FalconClientID
		}
		qFalconClientID := qrFalconClientID
		if qFalconClientID != "" {

			if err := r.SetQueryParam("falcon_client_id", qFalconClientID); err != nil {
				return err
			}
		}
	}

	if o.IamRoleArn != nil {

		// query param iam_role_arn
		var qrIamRoleArn string

		if o.IamRoleArn != nil {
			qrIamRoleArn = *o.IamRoleArn
		}
		qIamRoleArn := qrIamRoleArn
		if qIamRoleArn != "" {

			if err := r.SetQueryParam("iam_role_arn", qIamRoleArn); err != nil {
				return err
			}
		}
	}

	if o.IdpEnabled != nil {

		// query param idp_enabled
		var qrIdpEnabled string

		if o.IdpEnabled != nil {
			qrIdpEnabled = *o.IdpEnabled
		}
		qIdpEnabled := qrIdpEnabled
		if qIdpEnabled != "" {

			if err := r.SetQueryParam("idp_enabled", qIdpEnabled); err != nil {
				return err
			}
		}
	}

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.OrganizationID != nil {

		// query param organization_id
		var qrOrganizationID string

		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := qrOrganizationID
		if qOrganizationID != "" {

			if err := r.SetQueryParam("organization_id", qOrganizationID); err != nil {
				return err
			}
		}
	}

	if o.OrganizationalUnitIds != nil {

		// binding items for organizational_unit_ids
		joinedOrganizationalUnitIds := o.bindParamOrganizationalUnitIds(reg)

		// query array param organizational_unit_ids
		if err := r.SetQueryParam("organizational_unit_ids", joinedOrganizationalUnitIds...); err != nil {
			return err
		}
	}

	if o.SensorManagementEnabled != nil {

		// query param sensor_management_enabled
		var qrSensorManagementEnabled string

		if o.SensorManagementEnabled != nil {
			qrSensorManagementEnabled = *o.SensorManagementEnabled
		}
		qSensorManagementEnabled := qrSensorManagementEnabled
		if qSensorManagementEnabled != "" {

			if err := r.SetQueryParam("sensor_management_enabled", qSensorManagementEnabled); err != nil {
				return err
			}
		}
	}

	if o.Tags != nil {

		// query param tags
		var qrTags string

		if o.Tags != nil {
			qrTags = *o.Tags
		}
		qTags := qrTags
		if qTags != "" {

			if err := r.SetQueryParam("tags", qTags); err != nil {
				return err
			}
		}
	}

	if o.Template != nil {

		// query param template
		var qrTemplate string

		if o.Template != nil {
			qrTemplate = *o.Template
		}
		qTemplate := qrTemplate
		if qTemplate != "" {

			if err := r.SetQueryParam("template", qTemplate); err != nil {
				return err
			}
		}
	}

	if o.UseExistingCloudtrail != nil {

		// query param use_existing_cloudtrail
		var qrUseExistingCloudtrail string

		if o.UseExistingCloudtrail != nil {
			qrUseExistingCloudtrail = *o.UseExistingCloudtrail
		}
		qUseExistingCloudtrail := qrUseExistingCloudtrail
		if qUseExistingCloudtrail != "" {

			if err := r.SetQueryParam("use_existing_cloudtrail", qUseExistingCloudtrail); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetD4CAWSAccountScriptsAttachment binds the parameter accounts
func (o *GetD4CAWSAccountScriptsAttachmentParams) bindParamAccounts(formats strfmt.Registry) []string {
	accountsIR := o.Accounts

	var accountsIC []string
	for _, accountsIIR := range accountsIR { // explode []string

		accountsIIV := accountsIIR // string as string
		accountsIC = append(accountsIC, accountsIIV)
	}

	// items.CollectionFormat: "multi"
	accountsIS := swag.JoinByFormat(accountsIC, "multi")

	return accountsIS
}

// bindParamGetD4CAWSAccountScriptsAttachment binds the parameter dspm_regions
func (o *GetD4CAWSAccountScriptsAttachmentParams) bindParamDspmRegions(formats strfmt.Registry) []string {
	dspmRegionsIR := o.DspmRegions

	var dspmRegionsIC []string
	for _, dspmRegionsIIR := range dspmRegionsIR { // explode []string

		dspmRegionsIIV := dspmRegionsIIR // string as string
		dspmRegionsIC = append(dspmRegionsIC, dspmRegionsIIV)
	}

	// items.CollectionFormat: "csv"
	dspmRegionsIS := swag.JoinByFormat(dspmRegionsIC, "csv")

	return dspmRegionsIS
}

// bindParamGetD4CAWSAccountScriptsAttachment binds the parameter ids
func (o *GetD4CAWSAccountScriptsAttachmentParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []string

		idsIIV := idsIIR // string as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: "multi"
	idsIS := swag.JoinByFormat(idsIC, "multi")

	return idsIS
}

// bindParamGetD4CAWSAccountScriptsAttachment binds the parameter organizational_unit_ids
func (o *GetD4CAWSAccountScriptsAttachmentParams) bindParamOrganizationalUnitIds(formats strfmt.Registry) []string {
	organizationalUnitIdsIR := o.OrganizationalUnitIds

	var organizationalUnitIdsIC []string
	for _, organizationalUnitIdsIIR := range organizationalUnitIdsIR { // explode []string

		organizationalUnitIdsIIV := organizationalUnitIdsIIR // string as string
		organizationalUnitIdsIC = append(organizationalUnitIdsIC, organizationalUnitIdsIIV)
	}

	// items.CollectionFormat: "csv"
	organizationalUnitIdsIS := swag.JoinByFormat(organizationalUnitIdsIC, "csv")

	return organizationalUnitIdsIS
}
