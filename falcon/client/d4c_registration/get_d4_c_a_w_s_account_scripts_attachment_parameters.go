// Code generated by go-swagger; DO NOT EDIT.

package d4c_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetD4CAWSAccountScriptsAttachmentParams creates a new GetD4CAWSAccountScriptsAttachmentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetD4CAWSAccountScriptsAttachmentParams() *GetD4CAWSAccountScriptsAttachmentParams {
	return &GetD4CAWSAccountScriptsAttachmentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetD4CAWSAccountScriptsAttachmentParamsWithTimeout creates a new GetD4CAWSAccountScriptsAttachmentParams object
// with the ability to set a timeout on a request.
func NewGetD4CAWSAccountScriptsAttachmentParamsWithTimeout(timeout time.Duration) *GetD4CAWSAccountScriptsAttachmentParams {
	return &GetD4CAWSAccountScriptsAttachmentParams{
		timeout: timeout,
	}
}

// NewGetD4CAWSAccountScriptsAttachmentParamsWithContext creates a new GetD4CAWSAccountScriptsAttachmentParams object
// with the ability to set a context for a request.
func NewGetD4CAWSAccountScriptsAttachmentParamsWithContext(ctx context.Context) *GetD4CAWSAccountScriptsAttachmentParams {
	return &GetD4CAWSAccountScriptsAttachmentParams{
		Context: ctx,
	}
}

// NewGetD4CAWSAccountScriptsAttachmentParamsWithHTTPClient creates a new GetD4CAWSAccountScriptsAttachmentParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetD4CAWSAccountScriptsAttachmentParamsWithHTTPClient(client *http.Client) *GetD4CAWSAccountScriptsAttachmentParams {
	return &GetD4CAWSAccountScriptsAttachmentParams{
		HTTPClient: client,
	}
}

/*
GetD4CAWSAccountScriptsAttachmentParams contains all the parameters to send to the API endpoint

	for the get d4 c a w s account scripts attachment operation.

	Typically these are written to a http.Request.
*/
type GetD4CAWSAccountScriptsAttachmentParams struct {

	/* Accounts.

	   The list of accounts to register
	*/
	Accounts []string

	/* AwsProfile.

	   The AWS profile to be used during registration
	*/
	AwsProfile *string

	// BehaviorAssessmentEnabled.
	BehaviorAssessmentEnabled *string

	/* CustomRoleName.

	   The custom IAM role to be used during registration
	*/
	CustomRoleName *string

	/* Ids.

	   AWS account IDs
	*/
	Ids []string

	/* OrganizationID.

	   The AWS organization ID to be registered
	*/
	OrganizationID *string

	// SensorManagementEnabled.
	SensorManagementEnabled *string

	/* Template.

	   Template to be rendered
	*/
	Template *string

	// UseExistingCloudtrail.
	UseExistingCloudtrail *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get d4 c a w s account scripts attachment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithDefaults() *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get d4 c a w s account scripts attachment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithTimeout(timeout time.Duration) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithContext(ctx context.Context) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithHTTPClient(client *http.Client) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccounts adds the accounts to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithAccounts(accounts []string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetAccounts(accounts)
	return o
}

// SetAccounts adds the accounts to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetAccounts(accounts []string) {
	o.Accounts = accounts
}

// WithAwsProfile adds the awsProfile to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithAwsProfile(awsProfile *string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetAwsProfile(awsProfile)
	return o
}

// SetAwsProfile adds the awsProfile to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetAwsProfile(awsProfile *string) {
	o.AwsProfile = awsProfile
}

// WithBehaviorAssessmentEnabled adds the behaviorAssessmentEnabled to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithBehaviorAssessmentEnabled(behaviorAssessmentEnabled *string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetBehaviorAssessmentEnabled(behaviorAssessmentEnabled)
	return o
}

// SetBehaviorAssessmentEnabled adds the behaviorAssessmentEnabled to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetBehaviorAssessmentEnabled(behaviorAssessmentEnabled *string) {
	o.BehaviorAssessmentEnabled = behaviorAssessmentEnabled
}

// WithCustomRoleName adds the customRoleName to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithCustomRoleName(customRoleName *string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetCustomRoleName(customRoleName)
	return o
}

// SetCustomRoleName adds the customRoleName to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetCustomRoleName(customRoleName *string) {
	o.CustomRoleName = customRoleName
}

// WithIds adds the ids to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithIds(ids []string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetIds(ids []string) {
	o.Ids = ids
}

// WithOrganizationID adds the organizationID to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithOrganizationID(organizationID *string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetOrganizationID(organizationID *string) {
	o.OrganizationID = organizationID
}

// WithSensorManagementEnabled adds the sensorManagementEnabled to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithSensorManagementEnabled(sensorManagementEnabled *string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetSensorManagementEnabled(sensorManagementEnabled)
	return o
}

// SetSensorManagementEnabled adds the sensorManagementEnabled to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetSensorManagementEnabled(sensorManagementEnabled *string) {
	o.SensorManagementEnabled = sensorManagementEnabled
}

// WithTemplate adds the template to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithTemplate(template *string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetTemplate(template)
	return o
}

// SetTemplate adds the template to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetTemplate(template *string) {
	o.Template = template
}

// WithUseExistingCloudtrail adds the useExistingCloudtrail to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) WithUseExistingCloudtrail(useExistingCloudtrail *string) *GetD4CAWSAccountScriptsAttachmentParams {
	o.SetUseExistingCloudtrail(useExistingCloudtrail)
	return o
}

// SetUseExistingCloudtrail adds the useExistingCloudtrail to the get d4 c a w s account scripts attachment params
func (o *GetD4CAWSAccountScriptsAttachmentParams) SetUseExistingCloudtrail(useExistingCloudtrail *string) {
	o.UseExistingCloudtrail = useExistingCloudtrail
}

// WriteToRequest writes these params to a swagger request
func (o *GetD4CAWSAccountScriptsAttachmentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Accounts != nil {

		// binding items for accounts
		joinedAccounts := o.bindParamAccounts(reg)

		// query array param accounts
		if err := r.SetQueryParam("accounts", joinedAccounts...); err != nil {
			return err
		}
	}

	if o.AwsProfile != nil {

		// query param aws_profile
		var qrAwsProfile string

		if o.AwsProfile != nil {
			qrAwsProfile = *o.AwsProfile
		}
		qAwsProfile := qrAwsProfile
		if qAwsProfile != "" {

			if err := r.SetQueryParam("aws_profile", qAwsProfile); err != nil {
				return err
			}
		}
	}

	if o.BehaviorAssessmentEnabled != nil {

		// query param behavior_assessment_enabled
		var qrBehaviorAssessmentEnabled string

		if o.BehaviorAssessmentEnabled != nil {
			qrBehaviorAssessmentEnabled = *o.BehaviorAssessmentEnabled
		}
		qBehaviorAssessmentEnabled := qrBehaviorAssessmentEnabled
		if qBehaviorAssessmentEnabled != "" {

			if err := r.SetQueryParam("behavior_assessment_enabled", qBehaviorAssessmentEnabled); err != nil {
				return err
			}
		}
	}

	if o.CustomRoleName != nil {

		// query param custom_role_name
		var qrCustomRoleName string

		if o.CustomRoleName != nil {
			qrCustomRoleName = *o.CustomRoleName
		}
		qCustomRoleName := qrCustomRoleName
		if qCustomRoleName != "" {

			if err := r.SetQueryParam("custom_role_name", qCustomRoleName); err != nil {
				return err
			}
		}
	}

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.OrganizationID != nil {

		// query param organization_id
		var qrOrganizationID string

		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := qrOrganizationID
		if qOrganizationID != "" {

			if err := r.SetQueryParam("organization_id", qOrganizationID); err != nil {
				return err
			}
		}
	}

	if o.SensorManagementEnabled != nil {

		// query param sensor_management_enabled
		var qrSensorManagementEnabled string

		if o.SensorManagementEnabled != nil {
			qrSensorManagementEnabled = *o.SensorManagementEnabled
		}
		qSensorManagementEnabled := qrSensorManagementEnabled
		if qSensorManagementEnabled != "" {

			if err := r.SetQueryParam("sensor_management_enabled", qSensorManagementEnabled); err != nil {
				return err
			}
		}
	}

	if o.Template != nil {

		// query param template
		var qrTemplate string

		if o.Template != nil {
			qrTemplate = *o.Template
		}
		qTemplate := qrTemplate
		if qTemplate != "" {

			if err := r.SetQueryParam("template", qTemplate); err != nil {
				return err
			}
		}
	}

	if o.UseExistingCloudtrail != nil {

		// query param use_existing_cloudtrail
		var qrUseExistingCloudtrail string

		if o.UseExistingCloudtrail != nil {
			qrUseExistingCloudtrail = *o.UseExistingCloudtrail
		}
		qUseExistingCloudtrail := qrUseExistingCloudtrail
		if qUseExistingCloudtrail != "" {

			if err := r.SetQueryParam("use_existing_cloudtrail", qUseExistingCloudtrail); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetD4CAWSAccountScriptsAttachment binds the parameter accounts
func (o *GetD4CAWSAccountScriptsAttachmentParams) bindParamAccounts(formats strfmt.Registry) []string {
	accountsIR := o.Accounts

	var accountsIC []string
	for _, accountsIIR := range accountsIR { // explode []string

		accountsIIV := accountsIIR // string as string
		accountsIC = append(accountsIC, accountsIIV)
	}

	// items.CollectionFormat: "multi"
	accountsIS := swag.JoinByFormat(accountsIC, "multi")

	return accountsIS
}

// bindParamGetD4CAWSAccountScriptsAttachment binds the parameter ids
func (o *GetD4CAWSAccountScriptsAttachmentParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []string

		idsIIV := idsIIR // string as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: "multi"
	idsIS := swag.JoinByFormat(idsIC, "multi")

	return idsIS
}
