// Code generated by go-swagger; DO NOT EDIT.

package d4c_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetD4CGCPUserScriptsAttachmentReader is a Reader for the GetD4CGCPUserScriptsAttachment structure.
type GetD4CGCPUserScriptsAttachmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetD4CGCPUserScriptsAttachmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetD4CGCPUserScriptsAttachmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetD4CGCPUserScriptsAttachmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetD4CGCPUserScriptsAttachmentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetD4CGCPUserScriptsAttachmentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetD4CGCPUserScriptsAttachmentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cloud-connect-gcp/entities/user-scripts-download/v1] GetD4CGCPUserScriptsAttachment", response, response.Code())
	}
}

// NewGetD4CGCPUserScriptsAttachmentOK creates a GetD4CGCPUserScriptsAttachmentOK with default headers values
func NewGetD4CGCPUserScriptsAttachmentOK() *GetD4CGCPUserScriptsAttachmentOK {
	return &GetD4CGCPUserScriptsAttachmentOK{}
}

/*
GetD4CGCPUserScriptsAttachmentOK describes a response with status code 200, with default header values.

OK
*/
type GetD4CGCPUserScriptsAttachmentOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationGCPProvisionGetUserScriptResponseV1
}

// IsSuccess returns true when this get d4 c g c p user scripts attachment o k response has a 2xx status code
func (o *GetD4CGCPUserScriptsAttachmentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get d4 c g c p user scripts attachment o k response has a 3xx status code
func (o *GetD4CGCPUserScriptsAttachmentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get d4 c g c p user scripts attachment o k response has a 4xx status code
func (o *GetD4CGCPUserScriptsAttachmentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get d4 c g c p user scripts attachment o k response has a 5xx status code
func (o *GetD4CGCPUserScriptsAttachmentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get d4 c g c p user scripts attachment o k response a status code equal to that given
func (o *GetD4CGCPUserScriptsAttachmentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get d4 c g c p user scripts attachment o k response
func (o *GetD4CGCPUserScriptsAttachmentOK) Code() int {
	return 200
}

func (o *GetD4CGCPUserScriptsAttachmentOK) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts-download/v1][%d] getD4CGCPUserScriptsAttachmentOK  %+v", 200, o.Payload)
}

func (o *GetD4CGCPUserScriptsAttachmentOK) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts-download/v1][%d] getD4CGCPUserScriptsAttachmentOK  %+v", 200, o.Payload)
}

func (o *GetD4CGCPUserScriptsAttachmentOK) GetPayload() *models.RegistrationGCPProvisionGetUserScriptResponseV1 {
	return o.Payload
}

func (o *GetD4CGCPUserScriptsAttachmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationGCPProvisionGetUserScriptResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetD4CGCPUserScriptsAttachmentBadRequest creates a GetD4CGCPUserScriptsAttachmentBadRequest with default headers values
func NewGetD4CGCPUserScriptsAttachmentBadRequest() *GetD4CGCPUserScriptsAttachmentBadRequest {
	return &GetD4CGCPUserScriptsAttachmentBadRequest{}
}

/*
GetD4CGCPUserScriptsAttachmentBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetD4CGCPUserScriptsAttachmentBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationGCPProvisionGetUserScriptResponseV1
}

// IsSuccess returns true when this get d4 c g c p user scripts attachment bad request response has a 2xx status code
func (o *GetD4CGCPUserScriptsAttachmentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get d4 c g c p user scripts attachment bad request response has a 3xx status code
func (o *GetD4CGCPUserScriptsAttachmentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get d4 c g c p user scripts attachment bad request response has a 4xx status code
func (o *GetD4CGCPUserScriptsAttachmentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get d4 c g c p user scripts attachment bad request response has a 5xx status code
func (o *GetD4CGCPUserScriptsAttachmentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get d4 c g c p user scripts attachment bad request response a status code equal to that given
func (o *GetD4CGCPUserScriptsAttachmentBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get d4 c g c p user scripts attachment bad request response
func (o *GetD4CGCPUserScriptsAttachmentBadRequest) Code() int {
	return 400
}

func (o *GetD4CGCPUserScriptsAttachmentBadRequest) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts-download/v1][%d] getD4CGCPUserScriptsAttachmentBadRequest  %+v", 400, o.Payload)
}

func (o *GetD4CGCPUserScriptsAttachmentBadRequest) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts-download/v1][%d] getD4CGCPUserScriptsAttachmentBadRequest  %+v", 400, o.Payload)
}

func (o *GetD4CGCPUserScriptsAttachmentBadRequest) GetPayload() *models.RegistrationGCPProvisionGetUserScriptResponseV1 {
	return o.Payload
}

func (o *GetD4CGCPUserScriptsAttachmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationGCPProvisionGetUserScriptResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetD4CGCPUserScriptsAttachmentForbidden creates a GetD4CGCPUserScriptsAttachmentForbidden with default headers values
func NewGetD4CGCPUserScriptsAttachmentForbidden() *GetD4CGCPUserScriptsAttachmentForbidden {
	return &GetD4CGCPUserScriptsAttachmentForbidden{}
}

/*
GetD4CGCPUserScriptsAttachmentForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetD4CGCPUserScriptsAttachmentForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get d4 c g c p user scripts attachment forbidden response has a 2xx status code
func (o *GetD4CGCPUserScriptsAttachmentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get d4 c g c p user scripts attachment forbidden response has a 3xx status code
func (o *GetD4CGCPUserScriptsAttachmentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get d4 c g c p user scripts attachment forbidden response has a 4xx status code
func (o *GetD4CGCPUserScriptsAttachmentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get d4 c g c p user scripts attachment forbidden response has a 5xx status code
func (o *GetD4CGCPUserScriptsAttachmentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get d4 c g c p user scripts attachment forbidden response a status code equal to that given
func (o *GetD4CGCPUserScriptsAttachmentForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get d4 c g c p user scripts attachment forbidden response
func (o *GetD4CGCPUserScriptsAttachmentForbidden) Code() int {
	return 403
}

func (o *GetD4CGCPUserScriptsAttachmentForbidden) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts-download/v1][%d] getD4CGCPUserScriptsAttachmentForbidden  %+v", 403, o.Payload)
}

func (o *GetD4CGCPUserScriptsAttachmentForbidden) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts-download/v1][%d] getD4CGCPUserScriptsAttachmentForbidden  %+v", 403, o.Payload)
}

func (o *GetD4CGCPUserScriptsAttachmentForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetD4CGCPUserScriptsAttachmentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetD4CGCPUserScriptsAttachmentTooManyRequests creates a GetD4CGCPUserScriptsAttachmentTooManyRequests with default headers values
func NewGetD4CGCPUserScriptsAttachmentTooManyRequests() *GetD4CGCPUserScriptsAttachmentTooManyRequests {
	return &GetD4CGCPUserScriptsAttachmentTooManyRequests{}
}

/*
GetD4CGCPUserScriptsAttachmentTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetD4CGCPUserScriptsAttachmentTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get d4 c g c p user scripts attachment too many requests response has a 2xx status code
func (o *GetD4CGCPUserScriptsAttachmentTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get d4 c g c p user scripts attachment too many requests response has a 3xx status code
func (o *GetD4CGCPUserScriptsAttachmentTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get d4 c g c p user scripts attachment too many requests response has a 4xx status code
func (o *GetD4CGCPUserScriptsAttachmentTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get d4 c g c p user scripts attachment too many requests response has a 5xx status code
func (o *GetD4CGCPUserScriptsAttachmentTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get d4 c g c p user scripts attachment too many requests response a status code equal to that given
func (o *GetD4CGCPUserScriptsAttachmentTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get d4 c g c p user scripts attachment too many requests response
func (o *GetD4CGCPUserScriptsAttachmentTooManyRequests) Code() int {
	return 429
}

func (o *GetD4CGCPUserScriptsAttachmentTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts-download/v1][%d] getD4CGCPUserScriptsAttachmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetD4CGCPUserScriptsAttachmentTooManyRequests) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts-download/v1][%d] getD4CGCPUserScriptsAttachmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetD4CGCPUserScriptsAttachmentTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetD4CGCPUserScriptsAttachmentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetD4CGCPUserScriptsAttachmentInternalServerError creates a GetD4CGCPUserScriptsAttachmentInternalServerError with default headers values
func NewGetD4CGCPUserScriptsAttachmentInternalServerError() *GetD4CGCPUserScriptsAttachmentInternalServerError {
	return &GetD4CGCPUserScriptsAttachmentInternalServerError{}
}

/*
GetD4CGCPUserScriptsAttachmentInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetD4CGCPUserScriptsAttachmentInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationGCPProvisionGetUserScriptResponseV1
}

// IsSuccess returns true when this get d4 c g c p user scripts attachment internal server error response has a 2xx status code
func (o *GetD4CGCPUserScriptsAttachmentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get d4 c g c p user scripts attachment internal server error response has a 3xx status code
func (o *GetD4CGCPUserScriptsAttachmentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get d4 c g c p user scripts attachment internal server error response has a 4xx status code
func (o *GetD4CGCPUserScriptsAttachmentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get d4 c g c p user scripts attachment internal server error response has a 5xx status code
func (o *GetD4CGCPUserScriptsAttachmentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get d4 c g c p user scripts attachment internal server error response a status code equal to that given
func (o *GetD4CGCPUserScriptsAttachmentInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get d4 c g c p user scripts attachment internal server error response
func (o *GetD4CGCPUserScriptsAttachmentInternalServerError) Code() int {
	return 500
}

func (o *GetD4CGCPUserScriptsAttachmentInternalServerError) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts-download/v1][%d] getD4CGCPUserScriptsAttachmentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetD4CGCPUserScriptsAttachmentInternalServerError) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts-download/v1][%d] getD4CGCPUserScriptsAttachmentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetD4CGCPUserScriptsAttachmentInternalServerError) GetPayload() *models.RegistrationGCPProvisionGetUserScriptResponseV1 {
	return o.Payload
}

func (o *GetD4CGCPUserScriptsAttachmentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationGCPProvisionGetUserScriptResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
