// Code generated by go-swagger; DO NOT EDIT.

package sample_uploads

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteSampleV3Params creates a new DeleteSampleV3Params object
// with the default values initialized.
func NewDeleteSampleV3Params() *DeleteSampleV3Params {
	var ()
	return &DeleteSampleV3Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteSampleV3ParamsWithTimeout creates a new DeleteSampleV3Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteSampleV3ParamsWithTimeout(timeout time.Duration) *DeleteSampleV3Params {
	var ()
	return &DeleteSampleV3Params{

		timeout: timeout,
	}
}

// NewDeleteSampleV3ParamsWithContext creates a new DeleteSampleV3Params object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteSampleV3ParamsWithContext(ctx context.Context) *DeleteSampleV3Params {
	var ()
	return &DeleteSampleV3Params{

		Context: ctx,
	}
}

// NewDeleteSampleV3ParamsWithHTTPClient creates a new DeleteSampleV3Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteSampleV3ParamsWithHTTPClient(client *http.Client) *DeleteSampleV3Params {
	var ()
	return &DeleteSampleV3Params{
		HTTPClient: client,
	}
}

/*DeleteSampleV3Params contains all the parameters to send to the API endpoint
for the delete sample v3 operation typically these are written to a http.Request
*/
type DeleteSampleV3Params struct {

	/*XCSUSERUUID
	  User UUID

	*/
	XCSUSERUUID *string
	/*Ids
	  The file SHA256.

	*/
	Ids string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete sample v3 params
func (o *DeleteSampleV3Params) WithTimeout(timeout time.Duration) *DeleteSampleV3Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete sample v3 params
func (o *DeleteSampleV3Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete sample v3 params
func (o *DeleteSampleV3Params) WithContext(ctx context.Context) *DeleteSampleV3Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete sample v3 params
func (o *DeleteSampleV3Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete sample v3 params
func (o *DeleteSampleV3Params) WithHTTPClient(client *http.Client) *DeleteSampleV3Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete sample v3 params
func (o *DeleteSampleV3Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXCSUSERUUID adds the xCSUSERUUID to the delete sample v3 params
func (o *DeleteSampleV3Params) WithXCSUSERUUID(xCSUSERUUID *string) *DeleteSampleV3Params {
	o.SetXCSUSERUUID(xCSUSERUUID)
	return o
}

// SetXCSUSERUUID adds the xCSUSERUuid to the delete sample v3 params
func (o *DeleteSampleV3Params) SetXCSUSERUUID(xCSUSERUUID *string) {
	o.XCSUSERUUID = xCSUSERUUID
}

// WithIds adds the ids to the delete sample v3 params
func (o *DeleteSampleV3Params) WithIds(ids string) *DeleteSampleV3Params {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the delete sample v3 params
func (o *DeleteSampleV3Params) SetIds(ids string) {
	o.Ids = ids
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteSampleV3Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XCSUSERUUID != nil {

		// header param X-CS-USERUUID
		if err := r.SetHeaderParam("X-CS-USERUUID", *o.XCSUSERUUID); err != nil {
			return err
		}

	}

	// query param ids
	qrIds := o.Ids
	qIds := qrIds
	if qIds != "" {
		if err := r.SetQueryParam("ids", qIds); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
