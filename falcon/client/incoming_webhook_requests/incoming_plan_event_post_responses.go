// Code generated by go-swagger; DO NOT EDIT.

package incoming_webhook_requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// IncomingPlanEventPostReader is a Reader for the IncomingPlanEventPost structure.
type IncomingPlanEventPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IncomingPlanEventPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIncomingPlanEventPostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewIncomingPlanEventPostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewIncomingPlanEventPostForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewIncomingPlanEventPostInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewIncomingPlanEventPostBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewIncomingPlanEventPostDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewIncomingPlanEventPostOK creates a IncomingPlanEventPostOK with default headers values
func NewIncomingPlanEventPostOK() *IncomingPlanEventPostOK {
	return &IncomingPlanEventPostOK{}
}

/*
IncomingPlanEventPostOK describes a response with status code 200, with default header values.

Status OK
*/
type IncomingPlanEventPostOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload models.MapStringString
}

// IsSuccess returns true when this incoming plan event post o k response has a 2xx status code
func (o *IncomingPlanEventPostOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this incoming plan event post o k response has a 3xx status code
func (o *IncomingPlanEventPostOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this incoming plan event post o k response has a 4xx status code
func (o *IncomingPlanEventPostOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this incoming plan event post o k response has a 5xx status code
func (o *IncomingPlanEventPostOK) IsServerError() bool {
	return false
}

// IsCode returns true when this incoming plan event post o k response a status code equal to that given
func (o *IncomingPlanEventPostOK) IsCode(code int) bool {
	return code == 200
}

func (o *IncomingPlanEventPostOK) Error() string {
	return fmt.Sprintf("[POST /webhooks/{plan_id}/v1][%d] incomingPlanEventPostOK  %+v", 200, o.Payload)
}

func (o *IncomingPlanEventPostOK) String() string {
	return fmt.Sprintf("[POST /webhooks/{plan_id}/v1][%d] incomingPlanEventPostOK  %+v", 200, o.Payload)
}

func (o *IncomingPlanEventPostOK) GetPayload() models.MapStringString {
	return o.Payload
}

func (o *IncomingPlanEventPostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIncomingPlanEventPostBadRequest creates a IncomingPlanEventPostBadRequest with default headers values
func NewIncomingPlanEventPostBadRequest() *IncomingPlanEventPostBadRequest {
	return &IncomingPlanEventPostBadRequest{}
}

/*
IncomingPlanEventPostBadRequest describes a response with status code 400, with default header values.

Status Bad Request
*/
type IncomingPlanEventPostBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this incoming plan event post bad request response has a 2xx status code
func (o *IncomingPlanEventPostBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this incoming plan event post bad request response has a 3xx status code
func (o *IncomingPlanEventPostBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this incoming plan event post bad request response has a 4xx status code
func (o *IncomingPlanEventPostBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this incoming plan event post bad request response has a 5xx status code
func (o *IncomingPlanEventPostBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this incoming plan event post bad request response a status code equal to that given
func (o *IncomingPlanEventPostBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *IncomingPlanEventPostBadRequest) Error() string {
	return fmt.Sprintf("[POST /webhooks/{plan_id}/v1][%d] incomingPlanEventPostBadRequest  %+v", 400, o.Payload)
}

func (o *IncomingPlanEventPostBadRequest) String() string {
	return fmt.Sprintf("[POST /webhooks/{plan_id}/v1][%d] incomingPlanEventPostBadRequest  %+v", 400, o.Payload)
}

func (o *IncomingPlanEventPostBadRequest) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *IncomingPlanEventPostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIncomingPlanEventPostForbidden creates a IncomingPlanEventPostForbidden with default headers values
func NewIncomingPlanEventPostForbidden() *IncomingPlanEventPostForbidden {
	return &IncomingPlanEventPostForbidden{}
}

/*
IncomingPlanEventPostForbidden describes a response with status code 403, with default header values.

Status Forbidden
*/
type IncomingPlanEventPostForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this incoming plan event post forbidden response has a 2xx status code
func (o *IncomingPlanEventPostForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this incoming plan event post forbidden response has a 3xx status code
func (o *IncomingPlanEventPostForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this incoming plan event post forbidden response has a 4xx status code
func (o *IncomingPlanEventPostForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this incoming plan event post forbidden response has a 5xx status code
func (o *IncomingPlanEventPostForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this incoming plan event post forbidden response a status code equal to that given
func (o *IncomingPlanEventPostForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *IncomingPlanEventPostForbidden) Error() string {
	return fmt.Sprintf("[POST /webhooks/{plan_id}/v1][%d] incomingPlanEventPostForbidden  %+v", 403, o.Payload)
}

func (o *IncomingPlanEventPostForbidden) String() string {
	return fmt.Sprintf("[POST /webhooks/{plan_id}/v1][%d] incomingPlanEventPostForbidden  %+v", 403, o.Payload)
}

func (o *IncomingPlanEventPostForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *IncomingPlanEventPostForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIncomingPlanEventPostInternalServerError creates a IncomingPlanEventPostInternalServerError with default headers values
func NewIncomingPlanEventPostInternalServerError() *IncomingPlanEventPostInternalServerError {
	return &IncomingPlanEventPostInternalServerError{}
}

/*
IncomingPlanEventPostInternalServerError describes a response with status code 500, with default header values.

Status Internal Server Error
*/
type IncomingPlanEventPostInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this incoming plan event post internal server error response has a 2xx status code
func (o *IncomingPlanEventPostInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this incoming plan event post internal server error response has a 3xx status code
func (o *IncomingPlanEventPostInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this incoming plan event post internal server error response has a 4xx status code
func (o *IncomingPlanEventPostInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this incoming plan event post internal server error response has a 5xx status code
func (o *IncomingPlanEventPostInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this incoming plan event post internal server error response a status code equal to that given
func (o *IncomingPlanEventPostInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *IncomingPlanEventPostInternalServerError) Error() string {
	return fmt.Sprintf("[POST /webhooks/{plan_id}/v1][%d] incomingPlanEventPostInternalServerError  %+v", 500, o.Payload)
}

func (o *IncomingPlanEventPostInternalServerError) String() string {
	return fmt.Sprintf("[POST /webhooks/{plan_id}/v1][%d] incomingPlanEventPostInternalServerError  %+v", 500, o.Payload)
}

func (o *IncomingPlanEventPostInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *IncomingPlanEventPostInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIncomingPlanEventPostBadGateway creates a IncomingPlanEventPostBadGateway with default headers values
func NewIncomingPlanEventPostBadGateway() *IncomingPlanEventPostBadGateway {
	return &IncomingPlanEventPostBadGateway{}
}

/*
IncomingPlanEventPostBadGateway describes a response with status code 502, with default header values.

Status Bad Gateway
*/
type IncomingPlanEventPostBadGateway struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this incoming plan event post bad gateway response has a 2xx status code
func (o *IncomingPlanEventPostBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this incoming plan event post bad gateway response has a 3xx status code
func (o *IncomingPlanEventPostBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this incoming plan event post bad gateway response has a 4xx status code
func (o *IncomingPlanEventPostBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this incoming plan event post bad gateway response has a 5xx status code
func (o *IncomingPlanEventPostBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this incoming plan event post bad gateway response a status code equal to that given
func (o *IncomingPlanEventPostBadGateway) IsCode(code int) bool {
	return code == 502
}

func (o *IncomingPlanEventPostBadGateway) Error() string {
	return fmt.Sprintf("[POST /webhooks/{plan_id}/v1][%d] incomingPlanEventPostBadGateway  %+v", 502, o.Payload)
}

func (o *IncomingPlanEventPostBadGateway) String() string {
	return fmt.Sprintf("[POST /webhooks/{plan_id}/v1][%d] incomingPlanEventPostBadGateway  %+v", 502, o.Payload)
}

func (o *IncomingPlanEventPostBadGateway) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *IncomingPlanEventPostBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIncomingPlanEventPostDefault creates a IncomingPlanEventPostDefault with default headers values
func NewIncomingPlanEventPostDefault(code int) *IncomingPlanEventPostDefault {
	return &IncomingPlanEventPostDefault{
		_statusCode: code,
	}
}

/*
IncomingPlanEventPostDefault describes a response with status code -1, with default header values.

Status OK
*/
type IncomingPlanEventPostDefault struct {
	_statusCode int

	Payload models.MapStringString
}

// Code gets the status code for the incoming plan event post default response
func (o *IncomingPlanEventPostDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this incoming plan event post default response has a 2xx status code
func (o *IncomingPlanEventPostDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this incoming plan event post default response has a 3xx status code
func (o *IncomingPlanEventPostDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this incoming plan event post default response has a 4xx status code
func (o *IncomingPlanEventPostDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this incoming plan event post default response has a 5xx status code
func (o *IncomingPlanEventPostDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this incoming plan event post default response a status code equal to that given
func (o *IncomingPlanEventPostDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *IncomingPlanEventPostDefault) Error() string {
	return fmt.Sprintf("[POST /webhooks/{plan_id}/v1][%d] IncomingPlanEventPost default  %+v", o._statusCode, o.Payload)
}

func (o *IncomingPlanEventPostDefault) String() string {
	return fmt.Sprintf("[POST /webhooks/{plan_id}/v1][%d] IncomingPlanEventPost default  %+v", o._statusCode, o.Payload)
}

func (o *IncomingPlanEventPostDefault) GetPayload() models.MapStringString {
	return o.Payload
}

func (o *IncomingPlanEventPostDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
