// Code generated by go-swagger; DO NOT EDIT.

package incoming_webhook_requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// IncomingEndpointEventGetReader is a Reader for the IncomingEndpointEventGet structure.
type IncomingEndpointEventGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IncomingEndpointEventGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIncomingEndpointEventGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewIncomingEndpointEventGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewIncomingEndpointEventGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewIncomingEndpointEventGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewIncomingEndpointEventGetBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewIncomingEndpointEventGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewIncomingEndpointEventGetOK creates a IncomingEndpointEventGetOK with default headers values
func NewIncomingEndpointEventGetOK() *IncomingEndpointEventGetOK {
	return &IncomingEndpointEventGetOK{}
}

/*
IncomingEndpointEventGetOK describes a response with status code 200, with default header values.

Status OK
*/
type IncomingEndpointEventGetOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload models.MapStringString
}

// IsSuccess returns true when this incoming endpoint event get o k response has a 2xx status code
func (o *IncomingEndpointEventGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this incoming endpoint event get o k response has a 3xx status code
func (o *IncomingEndpointEventGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this incoming endpoint event get o k response has a 4xx status code
func (o *IncomingEndpointEventGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this incoming endpoint event get o k response has a 5xx status code
func (o *IncomingEndpointEventGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this incoming endpoint event get o k response a status code equal to that given
func (o *IncomingEndpointEventGetOK) IsCode(code int) bool {
	return code == 200
}

func (o *IncomingEndpointEventGetOK) Error() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/{endpoint_id}/v1][%d] incomingEndpointEventGetOK  %+v", 200, o.Payload)
}

func (o *IncomingEndpointEventGetOK) String() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/{endpoint_id}/v1][%d] incomingEndpointEventGetOK  %+v", 200, o.Payload)
}

func (o *IncomingEndpointEventGetOK) GetPayload() models.MapStringString {
	return o.Payload
}

func (o *IncomingEndpointEventGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIncomingEndpointEventGetBadRequest creates a IncomingEndpointEventGetBadRequest with default headers values
func NewIncomingEndpointEventGetBadRequest() *IncomingEndpointEventGetBadRequest {
	return &IncomingEndpointEventGetBadRequest{}
}

/*
IncomingEndpointEventGetBadRequest describes a response with status code 400, with default header values.

Status Bad Request
*/
type IncomingEndpointEventGetBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this incoming endpoint event get bad request response has a 2xx status code
func (o *IncomingEndpointEventGetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this incoming endpoint event get bad request response has a 3xx status code
func (o *IncomingEndpointEventGetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this incoming endpoint event get bad request response has a 4xx status code
func (o *IncomingEndpointEventGetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this incoming endpoint event get bad request response has a 5xx status code
func (o *IncomingEndpointEventGetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this incoming endpoint event get bad request response a status code equal to that given
func (o *IncomingEndpointEventGetBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *IncomingEndpointEventGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/{endpoint_id}/v1][%d] incomingEndpointEventGetBadRequest  %+v", 400, o.Payload)
}

func (o *IncomingEndpointEventGetBadRequest) String() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/{endpoint_id}/v1][%d] incomingEndpointEventGetBadRequest  %+v", 400, o.Payload)
}

func (o *IncomingEndpointEventGetBadRequest) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *IncomingEndpointEventGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIncomingEndpointEventGetForbidden creates a IncomingEndpointEventGetForbidden with default headers values
func NewIncomingEndpointEventGetForbidden() *IncomingEndpointEventGetForbidden {
	return &IncomingEndpointEventGetForbidden{}
}

/*
IncomingEndpointEventGetForbidden describes a response with status code 403, with default header values.

Status Forbidden
*/
type IncomingEndpointEventGetForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this incoming endpoint event get forbidden response has a 2xx status code
func (o *IncomingEndpointEventGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this incoming endpoint event get forbidden response has a 3xx status code
func (o *IncomingEndpointEventGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this incoming endpoint event get forbidden response has a 4xx status code
func (o *IncomingEndpointEventGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this incoming endpoint event get forbidden response has a 5xx status code
func (o *IncomingEndpointEventGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this incoming endpoint event get forbidden response a status code equal to that given
func (o *IncomingEndpointEventGetForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *IncomingEndpointEventGetForbidden) Error() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/{endpoint_id}/v1][%d] incomingEndpointEventGetForbidden  %+v", 403, o.Payload)
}

func (o *IncomingEndpointEventGetForbidden) String() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/{endpoint_id}/v1][%d] incomingEndpointEventGetForbidden  %+v", 403, o.Payload)
}

func (o *IncomingEndpointEventGetForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *IncomingEndpointEventGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIncomingEndpointEventGetInternalServerError creates a IncomingEndpointEventGetInternalServerError with default headers values
func NewIncomingEndpointEventGetInternalServerError() *IncomingEndpointEventGetInternalServerError {
	return &IncomingEndpointEventGetInternalServerError{}
}

/*
IncomingEndpointEventGetInternalServerError describes a response with status code 500, with default header values.

Status Internal Server Error
*/
type IncomingEndpointEventGetInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this incoming endpoint event get internal server error response has a 2xx status code
func (o *IncomingEndpointEventGetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this incoming endpoint event get internal server error response has a 3xx status code
func (o *IncomingEndpointEventGetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this incoming endpoint event get internal server error response has a 4xx status code
func (o *IncomingEndpointEventGetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this incoming endpoint event get internal server error response has a 5xx status code
func (o *IncomingEndpointEventGetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this incoming endpoint event get internal server error response a status code equal to that given
func (o *IncomingEndpointEventGetInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *IncomingEndpointEventGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/{endpoint_id}/v1][%d] incomingEndpointEventGetInternalServerError  %+v", 500, o.Payload)
}

func (o *IncomingEndpointEventGetInternalServerError) String() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/{endpoint_id}/v1][%d] incomingEndpointEventGetInternalServerError  %+v", 500, o.Payload)
}

func (o *IncomingEndpointEventGetInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *IncomingEndpointEventGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIncomingEndpointEventGetBadGateway creates a IncomingEndpointEventGetBadGateway with default headers values
func NewIncomingEndpointEventGetBadGateway() *IncomingEndpointEventGetBadGateway {
	return &IncomingEndpointEventGetBadGateway{}
}

/*
IncomingEndpointEventGetBadGateway describes a response with status code 502, with default header values.

Status Bad Gateway
*/
type IncomingEndpointEventGetBadGateway struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this incoming endpoint event get bad gateway response has a 2xx status code
func (o *IncomingEndpointEventGetBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this incoming endpoint event get bad gateway response has a 3xx status code
func (o *IncomingEndpointEventGetBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this incoming endpoint event get bad gateway response has a 4xx status code
func (o *IncomingEndpointEventGetBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this incoming endpoint event get bad gateway response has a 5xx status code
func (o *IncomingEndpointEventGetBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this incoming endpoint event get bad gateway response a status code equal to that given
func (o *IncomingEndpointEventGetBadGateway) IsCode(code int) bool {
	return code == 502
}

func (o *IncomingEndpointEventGetBadGateway) Error() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/{endpoint_id}/v1][%d] incomingEndpointEventGetBadGateway  %+v", 502, o.Payload)
}

func (o *IncomingEndpointEventGetBadGateway) String() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/{endpoint_id}/v1][%d] incomingEndpointEventGetBadGateway  %+v", 502, o.Payload)
}

func (o *IncomingEndpointEventGetBadGateway) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *IncomingEndpointEventGetBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIncomingEndpointEventGetDefault creates a IncomingEndpointEventGetDefault with default headers values
func NewIncomingEndpointEventGetDefault(code int) *IncomingEndpointEventGetDefault {
	return &IncomingEndpointEventGetDefault{
		_statusCode: code,
	}
}

/*
IncomingEndpointEventGetDefault describes a response with status code -1, with default header values.

Status OK
*/
type IncomingEndpointEventGetDefault struct {
	_statusCode int

	Payload models.MapStringString
}

// Code gets the status code for the incoming endpoint event get default response
func (o *IncomingEndpointEventGetDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this incoming endpoint event get default response has a 2xx status code
func (o *IncomingEndpointEventGetDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this incoming endpoint event get default response has a 3xx status code
func (o *IncomingEndpointEventGetDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this incoming endpoint event get default response has a 4xx status code
func (o *IncomingEndpointEventGetDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this incoming endpoint event get default response has a 5xx status code
func (o *IncomingEndpointEventGetDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this incoming endpoint event get default response a status code equal to that given
func (o *IncomingEndpointEventGetDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *IncomingEndpointEventGetDefault) Error() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/{endpoint_id}/v1][%d] IncomingEndpointEventGet default  %+v", o._statusCode, o.Payload)
}

func (o *IncomingEndpointEventGetDefault) String() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/{endpoint_id}/v1][%d] IncomingEndpointEventGet default  %+v", o._statusCode, o.Payload)
}

func (o *IncomingEndpointEventGetDefault) GetPayload() models.MapStringString {
	return o.Payload
}

func (o *IncomingEndpointEventGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
