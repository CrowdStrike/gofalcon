// Code generated by go-swagger; DO NOT EDIT.

package incoming_webhook_requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// IncomingPlanEventGetReader is a Reader for the IncomingPlanEventGet structure.
type IncomingPlanEventGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IncomingPlanEventGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIncomingPlanEventGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewIncomingPlanEventGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewIncomingPlanEventGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewIncomingPlanEventGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewIncomingPlanEventGetBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewIncomingPlanEventGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewIncomingPlanEventGetOK creates a IncomingPlanEventGetOK with default headers values
func NewIncomingPlanEventGetOK() *IncomingPlanEventGetOK {
	return &IncomingPlanEventGetOK{}
}

/*
IncomingPlanEventGetOK describes a response with status code 200, with default header values.

Status OK
*/
type IncomingPlanEventGetOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload models.MapStringString
}

// IsSuccess returns true when this incoming plan event get o k response has a 2xx status code
func (o *IncomingPlanEventGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this incoming plan event get o k response has a 3xx status code
func (o *IncomingPlanEventGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this incoming plan event get o k response has a 4xx status code
func (o *IncomingPlanEventGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this incoming plan event get o k response has a 5xx status code
func (o *IncomingPlanEventGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this incoming plan event get o k response a status code equal to that given
func (o *IncomingPlanEventGetOK) IsCode(code int) bool {
	return code == 200
}

func (o *IncomingPlanEventGetOK) Error() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/v1][%d] incomingPlanEventGetOK  %+v", 200, o.Payload)
}

func (o *IncomingPlanEventGetOK) String() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/v1][%d] incomingPlanEventGetOK  %+v", 200, o.Payload)
}

func (o *IncomingPlanEventGetOK) GetPayload() models.MapStringString {
	return o.Payload
}

func (o *IncomingPlanEventGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIncomingPlanEventGetBadRequest creates a IncomingPlanEventGetBadRequest with default headers values
func NewIncomingPlanEventGetBadRequest() *IncomingPlanEventGetBadRequest {
	return &IncomingPlanEventGetBadRequest{}
}

/*
IncomingPlanEventGetBadRequest describes a response with status code 400, with default header values.

Status Bad Request
*/
type IncomingPlanEventGetBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this incoming plan event get bad request response has a 2xx status code
func (o *IncomingPlanEventGetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this incoming plan event get bad request response has a 3xx status code
func (o *IncomingPlanEventGetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this incoming plan event get bad request response has a 4xx status code
func (o *IncomingPlanEventGetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this incoming plan event get bad request response has a 5xx status code
func (o *IncomingPlanEventGetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this incoming plan event get bad request response a status code equal to that given
func (o *IncomingPlanEventGetBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *IncomingPlanEventGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/v1][%d] incomingPlanEventGetBadRequest  %+v", 400, o.Payload)
}

func (o *IncomingPlanEventGetBadRequest) String() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/v1][%d] incomingPlanEventGetBadRequest  %+v", 400, o.Payload)
}

func (o *IncomingPlanEventGetBadRequest) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *IncomingPlanEventGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIncomingPlanEventGetForbidden creates a IncomingPlanEventGetForbidden with default headers values
func NewIncomingPlanEventGetForbidden() *IncomingPlanEventGetForbidden {
	return &IncomingPlanEventGetForbidden{}
}

/*
IncomingPlanEventGetForbidden describes a response with status code 403, with default header values.

Status Forbidden
*/
type IncomingPlanEventGetForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this incoming plan event get forbidden response has a 2xx status code
func (o *IncomingPlanEventGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this incoming plan event get forbidden response has a 3xx status code
func (o *IncomingPlanEventGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this incoming plan event get forbidden response has a 4xx status code
func (o *IncomingPlanEventGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this incoming plan event get forbidden response has a 5xx status code
func (o *IncomingPlanEventGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this incoming plan event get forbidden response a status code equal to that given
func (o *IncomingPlanEventGetForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *IncomingPlanEventGetForbidden) Error() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/v1][%d] incomingPlanEventGetForbidden  %+v", 403, o.Payload)
}

func (o *IncomingPlanEventGetForbidden) String() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/v1][%d] incomingPlanEventGetForbidden  %+v", 403, o.Payload)
}

func (o *IncomingPlanEventGetForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *IncomingPlanEventGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIncomingPlanEventGetInternalServerError creates a IncomingPlanEventGetInternalServerError with default headers values
func NewIncomingPlanEventGetInternalServerError() *IncomingPlanEventGetInternalServerError {
	return &IncomingPlanEventGetInternalServerError{}
}

/*
IncomingPlanEventGetInternalServerError describes a response with status code 500, with default header values.

Status Internal Server Error
*/
type IncomingPlanEventGetInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this incoming plan event get internal server error response has a 2xx status code
func (o *IncomingPlanEventGetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this incoming plan event get internal server error response has a 3xx status code
func (o *IncomingPlanEventGetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this incoming plan event get internal server error response has a 4xx status code
func (o *IncomingPlanEventGetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this incoming plan event get internal server error response has a 5xx status code
func (o *IncomingPlanEventGetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this incoming plan event get internal server error response a status code equal to that given
func (o *IncomingPlanEventGetInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *IncomingPlanEventGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/v1][%d] incomingPlanEventGetInternalServerError  %+v", 500, o.Payload)
}

func (o *IncomingPlanEventGetInternalServerError) String() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/v1][%d] incomingPlanEventGetInternalServerError  %+v", 500, o.Payload)
}

func (o *IncomingPlanEventGetInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *IncomingPlanEventGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIncomingPlanEventGetBadGateway creates a IncomingPlanEventGetBadGateway with default headers values
func NewIncomingPlanEventGetBadGateway() *IncomingPlanEventGetBadGateway {
	return &IncomingPlanEventGetBadGateway{}
}

/*
IncomingPlanEventGetBadGateway describes a response with status code 502, with default header values.

Status Bad Gateway
*/
type IncomingPlanEventGetBadGateway struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this incoming plan event get bad gateway response has a 2xx status code
func (o *IncomingPlanEventGetBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this incoming plan event get bad gateway response has a 3xx status code
func (o *IncomingPlanEventGetBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this incoming plan event get bad gateway response has a 4xx status code
func (o *IncomingPlanEventGetBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this incoming plan event get bad gateway response has a 5xx status code
func (o *IncomingPlanEventGetBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this incoming plan event get bad gateway response a status code equal to that given
func (o *IncomingPlanEventGetBadGateway) IsCode(code int) bool {
	return code == 502
}

func (o *IncomingPlanEventGetBadGateway) Error() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/v1][%d] incomingPlanEventGetBadGateway  %+v", 502, o.Payload)
}

func (o *IncomingPlanEventGetBadGateway) String() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/v1][%d] incomingPlanEventGetBadGateway  %+v", 502, o.Payload)
}

func (o *IncomingPlanEventGetBadGateway) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *IncomingPlanEventGetBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIncomingPlanEventGetDefault creates a IncomingPlanEventGetDefault with default headers values
func NewIncomingPlanEventGetDefault(code int) *IncomingPlanEventGetDefault {
	return &IncomingPlanEventGetDefault{
		_statusCode: code,
	}
}

/*
IncomingPlanEventGetDefault describes a response with status code -1, with default header values.

Status OK
*/
type IncomingPlanEventGetDefault struct {
	_statusCode int

	Payload models.MapStringString
}

// Code gets the status code for the incoming plan event get default response
func (o *IncomingPlanEventGetDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this incoming plan event get default response has a 2xx status code
func (o *IncomingPlanEventGetDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this incoming plan event get default response has a 3xx status code
func (o *IncomingPlanEventGetDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this incoming plan event get default response has a 4xx status code
func (o *IncomingPlanEventGetDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this incoming plan event get default response has a 5xx status code
func (o *IncomingPlanEventGetDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this incoming plan event get default response a status code equal to that given
func (o *IncomingPlanEventGetDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *IncomingPlanEventGetDefault) Error() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/v1][%d] IncomingPlanEventGet default  %+v", o._statusCode, o.Payload)
}

func (o *IncomingPlanEventGetDefault) String() string {
	return fmt.Sprintf("[GET /webhooks/{plan_id}/v1][%d] IncomingPlanEventGet default  %+v", o._statusCode, o.Payload)
}

func (o *IncomingPlanEventGetDefault) GetPayload() models.MapStringString {
	return o.Payload
}

func (o *IncomingPlanEventGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
