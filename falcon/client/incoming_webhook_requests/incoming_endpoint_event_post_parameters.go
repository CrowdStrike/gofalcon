// Code generated by go-swagger; DO NOT EDIT.

package incoming_webhook_requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// NewIncomingEndpointEventPostParams creates a new IncomingEndpointEventPostParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewIncomingEndpointEventPostParams() *IncomingEndpointEventPostParams {
	return &IncomingEndpointEventPostParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewIncomingEndpointEventPostParamsWithTimeout creates a new IncomingEndpointEventPostParams object
// with the ability to set a timeout on a request.
func NewIncomingEndpointEventPostParamsWithTimeout(timeout time.Duration) *IncomingEndpointEventPostParams {
	return &IncomingEndpointEventPostParams{
		timeout: timeout,
	}
}

// NewIncomingEndpointEventPostParamsWithContext creates a new IncomingEndpointEventPostParams object
// with the ability to set a context for a request.
func NewIncomingEndpointEventPostParamsWithContext(ctx context.Context) *IncomingEndpointEventPostParams {
	return &IncomingEndpointEventPostParams{
		Context: ctx,
	}
}

// NewIncomingEndpointEventPostParamsWithHTTPClient creates a new IncomingEndpointEventPostParams object
// with the ability to set a custom HTTPClient for a request.
func NewIncomingEndpointEventPostParamsWithHTTPClient(client *http.Client) *IncomingEndpointEventPostParams {
	return &IncomingEndpointEventPostParams{
		HTTPClient: client,
	}
}

/*
IncomingEndpointEventPostParams contains all the parameters to send to the API endpoint

	for the incoming endpoint event post operation.

	Typically these are written to a http.Request.
*/
type IncomingEndpointEventPostParams struct {

	// Body.
	Body models.InternalAnyPayload

	/* EndpointID.

	   id of endpoint
	*/
	EndpointID string

	/* PlanID.

	   id of plan
	*/
	PlanID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the incoming endpoint event post params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IncomingEndpointEventPostParams) WithDefaults() *IncomingEndpointEventPostParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the incoming endpoint event post params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IncomingEndpointEventPostParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the incoming endpoint event post params
func (o *IncomingEndpointEventPostParams) WithTimeout(timeout time.Duration) *IncomingEndpointEventPostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the incoming endpoint event post params
func (o *IncomingEndpointEventPostParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the incoming endpoint event post params
func (o *IncomingEndpointEventPostParams) WithContext(ctx context.Context) *IncomingEndpointEventPostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the incoming endpoint event post params
func (o *IncomingEndpointEventPostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the incoming endpoint event post params
func (o *IncomingEndpointEventPostParams) WithHTTPClient(client *http.Client) *IncomingEndpointEventPostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the incoming endpoint event post params
func (o *IncomingEndpointEventPostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the incoming endpoint event post params
func (o *IncomingEndpointEventPostParams) WithBody(body models.InternalAnyPayload) *IncomingEndpointEventPostParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the incoming endpoint event post params
func (o *IncomingEndpointEventPostParams) SetBody(body models.InternalAnyPayload) {
	o.Body = body
}

// WithEndpointID adds the endpointID to the incoming endpoint event post params
func (o *IncomingEndpointEventPostParams) WithEndpointID(endpointID string) *IncomingEndpointEventPostParams {
	o.SetEndpointID(endpointID)
	return o
}

// SetEndpointID adds the endpointId to the incoming endpoint event post params
func (o *IncomingEndpointEventPostParams) SetEndpointID(endpointID string) {
	o.EndpointID = endpointID
}

// WithPlanID adds the planID to the incoming endpoint event post params
func (o *IncomingEndpointEventPostParams) WithPlanID(planID string) *IncomingEndpointEventPostParams {
	o.SetPlanID(planID)
	return o
}

// SetPlanID adds the planId to the incoming endpoint event post params
func (o *IncomingEndpointEventPostParams) SetPlanID(planID string) {
	o.PlanID = planID
}

// WriteToRequest writes these params to a swagger request
func (o *IncomingEndpointEventPostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param endpoint_id
	if err := r.SetPathParam("endpoint_id", o.EndpointID); err != nil {
		return err
	}

	// path param plan_id
	if err := r.SetPathParam("plan_id", o.PlanID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
