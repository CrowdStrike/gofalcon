// Code generated by go-swagger; DO NOT EDIT.

package kubernetes_ioms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new kubernetes ioms API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for kubernetes ioms API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetKubernetesIomValuesByField(params *GetKubernetesIomValuesByFieldParams, opts ...ClientOption) (*GetKubernetesIomValuesByFieldOK, error)

	ReadKubernetesIomCount(params *ReadKubernetesIomCountParams, opts ...ClientOption) (*ReadKubernetesIomCountOK, error)

	ReadKubernetesIomEntities(params *ReadKubernetesIomEntitiesParams, opts ...ClientOption) (*ReadKubernetesIomEntitiesOK, error)

	SearchAndReadKubernetesIomEntities(params *SearchAndReadKubernetesIomEntitiesParams, opts ...ClientOption) (*SearchAndReadKubernetesIomEntitiesOK, error)

	SearchKubernetesIoms(params *SearchKubernetesIomsParams, opts ...ClientOption) (*SearchKubernetesIomsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetKubernetesIomValuesByField returns the available values from a k8s i o m field
*/
func (a *Client) GetKubernetesIomValuesByField(params *GetKubernetesIomValuesByFieldParams, opts ...ClientOption) (*GetKubernetesIomValuesByFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesIomValuesByFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKubernetesIomValuesByField",
		Method:             "GET",
		PathPattern:        "/container-security/aggregates/kubernetes-ioms/values-by-field/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKubernetesIomValuesByFieldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesIomValuesByFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesIomValuesByField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadKubernetesIomCount returns the total count of kubernetes i o ms over the past seven days
*/
func (a *Client) ReadKubernetesIomCount(params *ReadKubernetesIomCountParams, opts ...ClientOption) (*ReadKubernetesIomCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadKubernetesIomCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadKubernetesIomCount",
		Method:             "GET",
		PathPattern:        "/container-security/aggregates/kubernetes-ioms/count/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadKubernetesIomCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadKubernetesIomCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadKubernetesIomCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadKubernetesIomEntities retrieves kubernetes i o m entities identified by the provided i ds
*/
func (a *Client) ReadKubernetesIomEntities(params *ReadKubernetesIomEntitiesParams, opts ...ClientOption) (*ReadKubernetesIomEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadKubernetesIomEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadKubernetesIomEntities",
		Method:             "GET",
		PathPattern:        "/container-security/entities/kubernetes-ioms/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadKubernetesIomEntitiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadKubernetesIomEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadKubernetesIomEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchAndReadKubernetesIomEntities searches kubernetes i o m by the provided search criteria
*/
func (a *Client) SearchAndReadKubernetesIomEntities(params *SearchAndReadKubernetesIomEntitiesParams, opts ...ClientOption) (*SearchAndReadKubernetesIomEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAndReadKubernetesIomEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchAndReadKubernetesIomEntities",
		Method:             "GET",
		PathPattern:        "/container-security/combined/kubernetes-ioms/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchAndReadKubernetesIomEntitiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAndReadKubernetesIomEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchAndReadKubernetesIomEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchKubernetesIoms searches kubernetes i o ms by the provided search criteria this endpoint returns a list of kubernetes i o m u UI ds matching the query
*/
func (a *Client) SearchKubernetesIoms(params *SearchKubernetesIomsParams, opts ...ClientOption) (*SearchKubernetesIomsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchKubernetesIomsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchKubernetesIoms",
		Method:             "GET",
		PathPattern:        "/container-security/queries/kubernetes-ioms/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchKubernetesIomsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchKubernetesIomsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchKubernetesIoms: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
