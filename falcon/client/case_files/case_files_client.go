// Code generated by go-swagger; DO NOT EDIT.

package case_files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new case files API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for case files API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AggregatesFileDetailsPostV1(params *AggregatesFileDetailsPostV1Params, opts ...ClientOption) (*AggregatesFileDetailsPostV1OK, error)

	CombinedFileDetailsGetV1(params *CombinedFileDetailsGetV1Params, opts ...ClientOption) (*CombinedFileDetailsGetV1OK, error)

	EntitiesFileDetailsGetV1(params *EntitiesFileDetailsGetV1Params, opts ...ClientOption) (*EntitiesFileDetailsGetV1OK, error)

	EntitiesFileDetailsPatchV1(params *EntitiesFileDetailsPatchV1Params, opts ...ClientOption) (*EntitiesFileDetailsPatchV1OK, error)

	EntitiesFilesDeleteV1(params *EntitiesFilesDeleteV1Params, opts ...ClientOption) (*EntitiesFilesDeleteV1OK, error)

	EntitiesFilesBulkDownloadPostV1(params *EntitiesFilesBulkDownloadPostV1Params, opts ...ClientOption) (*EntitiesFilesBulkDownloadPostV1OK, error)

	EntitiesFilesDownloadGetV1(params *EntitiesFilesDownloadGetV1Params, opts ...ClientOption) (*EntitiesFilesDownloadGetV1OK, error)

	EntitiesFilesDownloadPostV1(params *EntitiesFilesDownloadPostV1Params, opts ...ClientOption) (*EntitiesFilesDownloadPostV1OK, error)

	EntitiesFilesUploadPostV1(params *EntitiesFilesUploadPostV1Params, opts ...ClientOption) (*EntitiesFilesUploadPostV1OK, error)

	QueriesFileDetailsGetV1(params *QueriesFileDetailsGetV1Params, opts ...ClientOption) (*QueriesFileDetailsGetV1OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AggregatesFileDetailsPostV1 gets file details aggregates as specified via json in the request body
*/
func (a *Client) AggregatesFileDetailsPostV1(params *AggregatesFileDetailsPostV1Params, opts ...ClientOption) (*AggregatesFileDetailsPostV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAggregatesFileDetailsPostV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "aggregates.file-details.post.v1",
		Method:             "POST",
		PathPattern:        "/case-files/aggregates/file-details/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AggregatesFileDetailsPostV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AggregatesFileDetailsPostV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for aggregates.file-details.post.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CombinedFileDetailsGetV1 queries file details
*/
func (a *Client) CombinedFileDetailsGetV1(params *CombinedFileDetailsGetV1Params, opts ...ClientOption) (*CombinedFileDetailsGetV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCombinedFileDetailsGetV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "combined.file-details.get.v1",
		Method:             "GET",
		PathPattern:        "/case-files/combined/file-details/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CombinedFileDetailsGetV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CombinedFileDetailsGetV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for combined.file-details.get.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesFileDetailsGetV1 gets file details by id
*/
func (a *Client) EntitiesFileDetailsGetV1(params *EntitiesFileDetailsGetV1Params, opts ...ClientOption) (*EntitiesFileDetailsGetV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesFileDetailsGetV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.file-details.get.v1",
		Method:             "GET",
		PathPattern:        "/case-files/entities/file-details/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesFileDetailsGetV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesFileDetailsGetV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.file-details.get.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesFileDetailsPatchV1 updates file details
*/
func (a *Client) EntitiesFileDetailsPatchV1(params *EntitiesFileDetailsPatchV1Params, opts ...ClientOption) (*EntitiesFileDetailsPatchV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesFileDetailsPatchV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.file-details.patch.v1",
		Method:             "PATCH",
		PathPattern:        "/case-files/entities/file-details/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesFileDetailsPatchV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesFileDetailsPatchV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.file-details.patch.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesFilesDeleteV1 deletes file details by id
*/
func (a *Client) EntitiesFilesDeleteV1(params *EntitiesFilesDeleteV1Params, opts ...ClientOption) (*EntitiesFilesDeleteV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesFilesDeleteV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.files.delete.v1",
		Method:             "DELETE",
		PathPattern:        "/case-files/entities/files/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesFilesDeleteV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesFilesDeleteV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.files.delete.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesFilesBulkDownloadPostV1 downloads multiple existing file from case as a z IP
*/
func (a *Client) EntitiesFilesBulkDownloadPostV1(params *EntitiesFilesBulkDownloadPostV1Params, opts ...ClientOption) (*EntitiesFilesBulkDownloadPostV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesFilesBulkDownloadPostV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.files_bulk-download.post.v1",
		Method:             "POST",
		PathPattern:        "/case-files/entities/files/bulk-download/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesFilesBulkDownloadPostV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesFilesBulkDownloadPostV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.files_bulk-download.post.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesFilesDownloadGetV1 downloads existing file from case
*/
func (a *Client) EntitiesFilesDownloadGetV1(params *EntitiesFilesDownloadGetV1Params, opts ...ClientOption) (*EntitiesFilesDownloadGetV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesFilesDownloadGetV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.files_download.get.v1",
		Method:             "GET",
		PathPattern:        "/case-files/entities/files/download/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesFilesDownloadGetV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesFilesDownloadGetV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.files_download.get.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesFilesDownloadPostV1 downloads existing files from case
*/
func (a *Client) EntitiesFilesDownloadPostV1(params *EntitiesFilesDownloadPostV1Params, opts ...ClientOption) (*EntitiesFilesDownloadPostV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesFilesDownloadPostV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.files_download.post.v1",
		Method:             "POST",
		PathPattern:        "/case-files/entities/files/download/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesFilesDownloadPostV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesFilesDownloadPostV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.files_download.post.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesFilesUploadPostV1 uploads file for case
*/
func (a *Client) EntitiesFilesUploadPostV1(params *EntitiesFilesUploadPostV1Params, opts ...ClientOption) (*EntitiesFilesUploadPostV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesFilesUploadPostV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.files_upload.post.v1",
		Method:             "POST",
		PathPattern:        "/case-files/entities/files/upload/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesFilesUploadPostV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesFilesUploadPostV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.files_upload.post.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueriesFileDetailsGetV1 queries for ids of file details
*/
func (a *Client) QueriesFileDetailsGetV1(params *QueriesFileDetailsGetV1Params, opts ...ClientOption) (*QueriesFileDetailsGetV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueriesFileDetailsGetV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "queries.file-details.get.v1",
		Method:             "GET",
		PathPattern:        "/case-files/queries/file-details/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueriesFileDetailsGetV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueriesFileDetailsGetV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queries.file-details.get.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
