// Code generated by go-swagger; DO NOT EDIT.

package vulnerabilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetCombinedVulnerabilitiesSARIFReader is a Reader for the GetCombinedVulnerabilitiesSARIF structure.
type GetCombinedVulnerabilitiesSARIFReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCombinedVulnerabilitiesSARIFReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCombinedVulnerabilitiesSARIFOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCombinedVulnerabilitiesSARIFBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCombinedVulnerabilitiesSARIFForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetCombinedVulnerabilitiesSARIFTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCombinedVulnerabilitiesSARIFInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /lambdas/combined/vulnerabilities/sarif/v1] GetCombinedVulnerabilitiesSARIF", response, response.Code())
	}
}

// NewGetCombinedVulnerabilitiesSARIFOK creates a GetCombinedVulnerabilitiesSARIFOK with default headers values
func NewGetCombinedVulnerabilitiesSARIFOK() *GetCombinedVulnerabilitiesSARIFOK {
	return &GetCombinedVulnerabilitiesSARIFOK{}
}

/*
GetCombinedVulnerabilitiesSARIFOK describes a response with status code 200, with default header values.

OK
*/
type GetCombinedVulnerabilitiesSARIFOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.VulnerabilitiesVulnerabilityEntitySARIFResponse
}

// IsSuccess returns true when this get combined vulnerabilities s a r i f o k response has a 2xx status code
func (o *GetCombinedVulnerabilitiesSARIFOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get combined vulnerabilities s a r i f o k response has a 3xx status code
func (o *GetCombinedVulnerabilitiesSARIFOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get combined vulnerabilities s a r i f o k response has a 4xx status code
func (o *GetCombinedVulnerabilitiesSARIFOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get combined vulnerabilities s a r i f o k response has a 5xx status code
func (o *GetCombinedVulnerabilitiesSARIFOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get combined vulnerabilities s a r i f o k response a status code equal to that given
func (o *GetCombinedVulnerabilitiesSARIFOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get combined vulnerabilities s a r i f o k response
func (o *GetCombinedVulnerabilitiesSARIFOK) Code() int {
	return 200
}

func (o *GetCombinedVulnerabilitiesSARIFOK) Error() string {
	return fmt.Sprintf("[GET /lambdas/combined/vulnerabilities/sarif/v1][%d] getCombinedVulnerabilitiesSARIFOK  %+v", 200, o.Payload)
}

func (o *GetCombinedVulnerabilitiesSARIFOK) String() string {
	return fmt.Sprintf("[GET /lambdas/combined/vulnerabilities/sarif/v1][%d] getCombinedVulnerabilitiesSARIFOK  %+v", 200, o.Payload)
}

func (o *GetCombinedVulnerabilitiesSARIFOK) GetPayload() *models.VulnerabilitiesVulnerabilityEntitySARIFResponse {
	return o.Payload
}

func (o *GetCombinedVulnerabilitiesSARIFOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.VulnerabilitiesVulnerabilityEntitySARIFResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCombinedVulnerabilitiesSARIFBadRequest creates a GetCombinedVulnerabilitiesSARIFBadRequest with default headers values
func NewGetCombinedVulnerabilitiesSARIFBadRequest() *GetCombinedVulnerabilitiesSARIFBadRequest {
	return &GetCombinedVulnerabilitiesSARIFBadRequest{}
}

/*
GetCombinedVulnerabilitiesSARIFBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetCombinedVulnerabilitiesSARIFBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get combined vulnerabilities s a r i f bad request response has a 2xx status code
func (o *GetCombinedVulnerabilitiesSARIFBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get combined vulnerabilities s a r i f bad request response has a 3xx status code
func (o *GetCombinedVulnerabilitiesSARIFBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get combined vulnerabilities s a r i f bad request response has a 4xx status code
func (o *GetCombinedVulnerabilitiesSARIFBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get combined vulnerabilities s a r i f bad request response has a 5xx status code
func (o *GetCombinedVulnerabilitiesSARIFBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get combined vulnerabilities s a r i f bad request response a status code equal to that given
func (o *GetCombinedVulnerabilitiesSARIFBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get combined vulnerabilities s a r i f bad request response
func (o *GetCombinedVulnerabilitiesSARIFBadRequest) Code() int {
	return 400
}

func (o *GetCombinedVulnerabilitiesSARIFBadRequest) Error() string {
	return fmt.Sprintf("[GET /lambdas/combined/vulnerabilities/sarif/v1][%d] getCombinedVulnerabilitiesSARIFBadRequest  %+v", 400, o.Payload)
}

func (o *GetCombinedVulnerabilitiesSARIFBadRequest) String() string {
	return fmt.Sprintf("[GET /lambdas/combined/vulnerabilities/sarif/v1][%d] getCombinedVulnerabilitiesSARIFBadRequest  %+v", 400, o.Payload)
}

func (o *GetCombinedVulnerabilitiesSARIFBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetCombinedVulnerabilitiesSARIFBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCombinedVulnerabilitiesSARIFForbidden creates a GetCombinedVulnerabilitiesSARIFForbidden with default headers values
func NewGetCombinedVulnerabilitiesSARIFForbidden() *GetCombinedVulnerabilitiesSARIFForbidden {
	return &GetCombinedVulnerabilitiesSARIFForbidden{}
}

/*
GetCombinedVulnerabilitiesSARIFForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetCombinedVulnerabilitiesSARIFForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get combined vulnerabilities s a r i f forbidden response has a 2xx status code
func (o *GetCombinedVulnerabilitiesSARIFForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get combined vulnerabilities s a r i f forbidden response has a 3xx status code
func (o *GetCombinedVulnerabilitiesSARIFForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get combined vulnerabilities s a r i f forbidden response has a 4xx status code
func (o *GetCombinedVulnerabilitiesSARIFForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get combined vulnerabilities s a r i f forbidden response has a 5xx status code
func (o *GetCombinedVulnerabilitiesSARIFForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get combined vulnerabilities s a r i f forbidden response a status code equal to that given
func (o *GetCombinedVulnerabilitiesSARIFForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get combined vulnerabilities s a r i f forbidden response
func (o *GetCombinedVulnerabilitiesSARIFForbidden) Code() int {
	return 403
}

func (o *GetCombinedVulnerabilitiesSARIFForbidden) Error() string {
	return fmt.Sprintf("[GET /lambdas/combined/vulnerabilities/sarif/v1][%d] getCombinedVulnerabilitiesSARIFForbidden  %+v", 403, o.Payload)
}

func (o *GetCombinedVulnerabilitiesSARIFForbidden) String() string {
	return fmt.Sprintf("[GET /lambdas/combined/vulnerabilities/sarif/v1][%d] getCombinedVulnerabilitiesSARIFForbidden  %+v", 403, o.Payload)
}

func (o *GetCombinedVulnerabilitiesSARIFForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetCombinedVulnerabilitiesSARIFForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCombinedVulnerabilitiesSARIFTooManyRequests creates a GetCombinedVulnerabilitiesSARIFTooManyRequests with default headers values
func NewGetCombinedVulnerabilitiesSARIFTooManyRequests() *GetCombinedVulnerabilitiesSARIFTooManyRequests {
	return &GetCombinedVulnerabilitiesSARIFTooManyRequests{}
}

/*
GetCombinedVulnerabilitiesSARIFTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetCombinedVulnerabilitiesSARIFTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get combined vulnerabilities s a r i f too many requests response has a 2xx status code
func (o *GetCombinedVulnerabilitiesSARIFTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get combined vulnerabilities s a r i f too many requests response has a 3xx status code
func (o *GetCombinedVulnerabilitiesSARIFTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get combined vulnerabilities s a r i f too many requests response has a 4xx status code
func (o *GetCombinedVulnerabilitiesSARIFTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get combined vulnerabilities s a r i f too many requests response has a 5xx status code
func (o *GetCombinedVulnerabilitiesSARIFTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get combined vulnerabilities s a r i f too many requests response a status code equal to that given
func (o *GetCombinedVulnerabilitiesSARIFTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get combined vulnerabilities s a r i f too many requests response
func (o *GetCombinedVulnerabilitiesSARIFTooManyRequests) Code() int {
	return 429
}

func (o *GetCombinedVulnerabilitiesSARIFTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /lambdas/combined/vulnerabilities/sarif/v1][%d] getCombinedVulnerabilitiesSARIFTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCombinedVulnerabilitiesSARIFTooManyRequests) String() string {
	return fmt.Sprintf("[GET /lambdas/combined/vulnerabilities/sarif/v1][%d] getCombinedVulnerabilitiesSARIFTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCombinedVulnerabilitiesSARIFTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetCombinedVulnerabilitiesSARIFTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCombinedVulnerabilitiesSARIFInternalServerError creates a GetCombinedVulnerabilitiesSARIFInternalServerError with default headers values
func NewGetCombinedVulnerabilitiesSARIFInternalServerError() *GetCombinedVulnerabilitiesSARIFInternalServerError {
	return &GetCombinedVulnerabilitiesSARIFInternalServerError{}
}

/*
GetCombinedVulnerabilitiesSARIFInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetCombinedVulnerabilitiesSARIFInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get combined vulnerabilities s a r i f internal server error response has a 2xx status code
func (o *GetCombinedVulnerabilitiesSARIFInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get combined vulnerabilities s a r i f internal server error response has a 3xx status code
func (o *GetCombinedVulnerabilitiesSARIFInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get combined vulnerabilities s a r i f internal server error response has a 4xx status code
func (o *GetCombinedVulnerabilitiesSARIFInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get combined vulnerabilities s a r i f internal server error response has a 5xx status code
func (o *GetCombinedVulnerabilitiesSARIFInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get combined vulnerabilities s a r i f internal server error response a status code equal to that given
func (o *GetCombinedVulnerabilitiesSARIFInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get combined vulnerabilities s a r i f internal server error response
func (o *GetCombinedVulnerabilitiesSARIFInternalServerError) Code() int {
	return 500
}

func (o *GetCombinedVulnerabilitiesSARIFInternalServerError) Error() string {
	return fmt.Sprintf("[GET /lambdas/combined/vulnerabilities/sarif/v1][%d] getCombinedVulnerabilitiesSARIFInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCombinedVulnerabilitiesSARIFInternalServerError) String() string {
	return fmt.Sprintf("[GET /lambdas/combined/vulnerabilities/sarif/v1][%d] getCombinedVulnerabilitiesSARIFInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCombinedVulnerabilitiesSARIFInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetCombinedVulnerabilitiesSARIFInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
