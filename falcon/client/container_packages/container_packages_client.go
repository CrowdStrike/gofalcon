// Code generated by go-swagger; DO NOT EDIT.

package container_packages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new container packages API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for container packages API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ReadPackagesByFixableVulnCount(params *ReadPackagesByFixableVulnCountParams, opts ...ClientOption) (*ReadPackagesByFixableVulnCountOK, error)

	ReadPackagesByVulnCount(params *ReadPackagesByVulnCountParams, opts ...ClientOption) (*ReadPackagesByVulnCountOK, error)

	ReadPackagesCombined(params *ReadPackagesCombinedParams, opts ...ClientOption) (*ReadPackagesCombinedOK, error)

	ReadPackagesCombinedExport(params *ReadPackagesCombinedExportParams, opts ...ClientOption) (*ReadPackagesCombinedExportOK, error)

	ReadPackagesCountByZeroDay(params *ReadPackagesCountByZeroDayParams, opts ...ClientOption) (*ReadPackagesCountByZeroDayOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ReadPackagesByFixableVulnCount retrieves top x app packages with the most fixable vulnerabilities
*/
func (a *Client) ReadPackagesByFixableVulnCount(params *ReadPackagesByFixableVulnCountParams, opts ...ClientOption) (*ReadPackagesByFixableVulnCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadPackagesByFixableVulnCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadPackagesByFixableVulnCount",
		Method:             "GET",
		PathPattern:        "/container-security/combined/packages/app-by-fixable-vulnerability-count/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadPackagesByFixableVulnCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadPackagesByFixableVulnCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadPackagesByFixableVulnCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadPackagesByVulnCount retrieves top x packages with the most vulnerabilities
*/
func (a *Client) ReadPackagesByVulnCount(params *ReadPackagesByVulnCountParams, opts ...ClientOption) (*ReadPackagesByVulnCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadPackagesByVulnCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadPackagesByVulnCount",
		Method:             "GET",
		PathPattern:        "/container-security/combined/packages/by-vulnerability-count/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadPackagesByVulnCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadPackagesByVulnCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadPackagesByVulnCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadPackagesCombined retrieves packages identified by the provided filter criteria
*/
func (a *Client) ReadPackagesCombined(params *ReadPackagesCombinedParams, opts ...ClientOption) (*ReadPackagesCombinedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadPackagesCombinedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadPackagesCombined",
		Method:             "GET",
		PathPattern:        "/container-security/combined/packages/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadPackagesCombinedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadPackagesCombinedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadPackagesCombined: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadPackagesCombinedExport retrieves packages identified by the provided filter criteria for the purpose of export
*/
func (a *Client) ReadPackagesCombinedExport(params *ReadPackagesCombinedExportParams, opts ...ClientOption) (*ReadPackagesCombinedExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadPackagesCombinedExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadPackagesCombinedExport",
		Method:             "GET",
		PathPattern:        "/container-security/combined/packages/export/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadPackagesCombinedExportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadPackagesCombinedExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadPackagesCombinedExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadPackagesCountByZeroDay retrieves packages count affected by zero day vulnerabilities
*/
func (a *Client) ReadPackagesCountByZeroDay(params *ReadPackagesCountByZeroDayParams, opts ...ClientOption) (*ReadPackagesCountByZeroDayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadPackagesCountByZeroDayParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadPackagesCountByZeroDay",
		Method:             "GET",
		PathPattern:        "/container-security/aggregates/packages/count-by-zero-day/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadPackagesCountByZeroDayReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadPackagesCountByZeroDayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadPackagesCountByZeroDay: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
