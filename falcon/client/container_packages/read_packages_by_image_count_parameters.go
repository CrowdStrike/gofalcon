// Code generated by go-swagger; DO NOT EDIT.

package container_packages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewReadPackagesByImageCountParams creates a new ReadPackagesByImageCountParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewReadPackagesByImageCountParams() *ReadPackagesByImageCountParams {
	return &ReadPackagesByImageCountParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewReadPackagesByImageCountParamsWithTimeout creates a new ReadPackagesByImageCountParams object
// with the ability to set a timeout on a request.
func NewReadPackagesByImageCountParamsWithTimeout(timeout time.Duration) *ReadPackagesByImageCountParams {
	return &ReadPackagesByImageCountParams{
		timeout: timeout,
	}
}

// NewReadPackagesByImageCountParamsWithContext creates a new ReadPackagesByImageCountParams object
// with the ability to set a context for a request.
func NewReadPackagesByImageCountParamsWithContext(ctx context.Context) *ReadPackagesByImageCountParams {
	return &ReadPackagesByImageCountParams{
		Context: ctx,
	}
}

// NewReadPackagesByImageCountParamsWithHTTPClient creates a new ReadPackagesByImageCountParams object
// with the ability to set a custom HTTPClient for a request.
func NewReadPackagesByImageCountParamsWithHTTPClient(client *http.Client) *ReadPackagesByImageCountParams {
	return &ReadPackagesByImageCountParams{
		HTTPClient: client,
	}
}

/*
ReadPackagesByImageCountParams contains all the parameters to send to the API endpoint

	for the read packages by image count operation.

	Typically these are written to a http.Request.
*/
type ReadPackagesByImageCountParams struct {

	/* Filter.

	     Filter packages using a query in Falcon Query Language (FQL). Supported filter fields:
	- `ai_related`
	- `cveid`
	- `running_images`
	- `severity`
	- `type`
	- `vulnerability_count`
	*/
	Filter *string

	/* Limit.

	   Maximum number of package results to return

	   Default: 5
	*/
	Limit *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the read packages by image count params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReadPackagesByImageCountParams) WithDefaults() *ReadPackagesByImageCountParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the read packages by image count params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReadPackagesByImageCountParams) SetDefaults() {
	var (
		limitDefault = int64(5)
	)

	val := ReadPackagesByImageCountParams{
		Limit: &limitDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the read packages by image count params
func (o *ReadPackagesByImageCountParams) WithTimeout(timeout time.Duration) *ReadPackagesByImageCountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the read packages by image count params
func (o *ReadPackagesByImageCountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the read packages by image count params
func (o *ReadPackagesByImageCountParams) WithContext(ctx context.Context) *ReadPackagesByImageCountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the read packages by image count params
func (o *ReadPackagesByImageCountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the read packages by image count params
func (o *ReadPackagesByImageCountParams) WithHTTPClient(client *http.Client) *ReadPackagesByImageCountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the read packages by image count params
func (o *ReadPackagesByImageCountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the read packages by image count params
func (o *ReadPackagesByImageCountParams) WithFilter(filter *string) *ReadPackagesByImageCountParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the read packages by image count params
func (o *ReadPackagesByImageCountParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithLimit adds the limit to the read packages by image count params
func (o *ReadPackagesByImageCountParams) WithLimit(limit *int64) *ReadPackagesByImageCountParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the read packages by image count params
func (o *ReadPackagesByImageCountParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WriteToRequest writes these params to a swagger request
func (o *ReadPackagesByImageCountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
