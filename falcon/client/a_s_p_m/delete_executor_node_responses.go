// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// DeleteExecutorNodeReader is a Reader for the DeleteExecutorNode structure.
type DeleteExecutorNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteExecutorNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteExecutorNodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteExecutorNodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteExecutorNodeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteExecutorNodeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteExecutorNodeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteExecutorNodeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /aspm-api-gateway/api/v1/executor_nodes/{ID}] DeleteExecutorNode", response, response.Code())
	}
}

// NewDeleteExecutorNodeOK creates a DeleteExecutorNodeOK with default headers values
func NewDeleteExecutorNodeOK() *DeleteExecutorNodeOK {
	return &DeleteExecutorNodeOK{}
}

/*
DeleteExecutorNodeOK describes a response with status code 200, with default header values.

OK
*/
type DeleteExecutorNodeOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this delete executor node o k response has a 2xx status code
func (o *DeleteExecutorNodeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete executor node o k response has a 3xx status code
func (o *DeleteExecutorNodeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete executor node o k response has a 4xx status code
func (o *DeleteExecutorNodeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete executor node o k response has a 5xx status code
func (o *DeleteExecutorNodeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete executor node o k response a status code equal to that given
func (o *DeleteExecutorNodeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete executor node o k response
func (o *DeleteExecutorNodeOK) Code() int {
	return 200
}

func (o *DeleteExecutorNodeOK) Error() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/executor_nodes/{ID}][%d] deleteExecutorNodeOK ", 200)
}

func (o *DeleteExecutorNodeOK) String() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/executor_nodes/{ID}][%d] deleteExecutorNodeOK ", 200)
}

func (o *DeleteExecutorNodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewDeleteExecutorNodeBadRequest creates a DeleteExecutorNodeBadRequest with default headers values
func NewDeleteExecutorNodeBadRequest() *DeleteExecutorNodeBadRequest {
	return &DeleteExecutorNodeBadRequest{}
}

/*
DeleteExecutorNodeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteExecutorNodeBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this delete executor node bad request response has a 2xx status code
func (o *DeleteExecutorNodeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete executor node bad request response has a 3xx status code
func (o *DeleteExecutorNodeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete executor node bad request response has a 4xx status code
func (o *DeleteExecutorNodeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete executor node bad request response has a 5xx status code
func (o *DeleteExecutorNodeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete executor node bad request response a status code equal to that given
func (o *DeleteExecutorNodeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete executor node bad request response
func (o *DeleteExecutorNodeBadRequest) Code() int {
	return 400
}

func (o *DeleteExecutorNodeBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/executor_nodes/{ID}][%d] deleteExecutorNodeBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteExecutorNodeBadRequest) String() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/executor_nodes/{ID}][%d] deleteExecutorNodeBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteExecutorNodeBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *DeleteExecutorNodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteExecutorNodeUnauthorized creates a DeleteExecutorNodeUnauthorized with default headers values
func NewDeleteExecutorNodeUnauthorized() *DeleteExecutorNodeUnauthorized {
	return &DeleteExecutorNodeUnauthorized{}
}

/*
DeleteExecutorNodeUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteExecutorNodeUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this delete executor node unauthorized response has a 2xx status code
func (o *DeleteExecutorNodeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete executor node unauthorized response has a 3xx status code
func (o *DeleteExecutorNodeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete executor node unauthorized response has a 4xx status code
func (o *DeleteExecutorNodeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete executor node unauthorized response has a 5xx status code
func (o *DeleteExecutorNodeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete executor node unauthorized response a status code equal to that given
func (o *DeleteExecutorNodeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete executor node unauthorized response
func (o *DeleteExecutorNodeUnauthorized) Code() int {
	return 401
}

func (o *DeleteExecutorNodeUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/executor_nodes/{ID}][%d] deleteExecutorNodeUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteExecutorNodeUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/executor_nodes/{ID}][%d] deleteExecutorNodeUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteExecutorNodeUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *DeleteExecutorNodeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteExecutorNodeForbidden creates a DeleteExecutorNodeForbidden with default headers values
func NewDeleteExecutorNodeForbidden() *DeleteExecutorNodeForbidden {
	return &DeleteExecutorNodeForbidden{}
}

/*
DeleteExecutorNodeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteExecutorNodeForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this delete executor node forbidden response has a 2xx status code
func (o *DeleteExecutorNodeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete executor node forbidden response has a 3xx status code
func (o *DeleteExecutorNodeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete executor node forbidden response has a 4xx status code
func (o *DeleteExecutorNodeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete executor node forbidden response has a 5xx status code
func (o *DeleteExecutorNodeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete executor node forbidden response a status code equal to that given
func (o *DeleteExecutorNodeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete executor node forbidden response
func (o *DeleteExecutorNodeForbidden) Code() int {
	return 403
}

func (o *DeleteExecutorNodeForbidden) Error() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/executor_nodes/{ID}][%d] deleteExecutorNodeForbidden  %+v", 403, o.Payload)
}

func (o *DeleteExecutorNodeForbidden) String() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/executor_nodes/{ID}][%d] deleteExecutorNodeForbidden  %+v", 403, o.Payload)
}

func (o *DeleteExecutorNodeForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *DeleteExecutorNodeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteExecutorNodeTooManyRequests creates a DeleteExecutorNodeTooManyRequests with default headers values
func NewDeleteExecutorNodeTooManyRequests() *DeleteExecutorNodeTooManyRequests {
	return &DeleteExecutorNodeTooManyRequests{}
}

/*
DeleteExecutorNodeTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type DeleteExecutorNodeTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete executor node too many requests response has a 2xx status code
func (o *DeleteExecutorNodeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete executor node too many requests response has a 3xx status code
func (o *DeleteExecutorNodeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete executor node too many requests response has a 4xx status code
func (o *DeleteExecutorNodeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete executor node too many requests response has a 5xx status code
func (o *DeleteExecutorNodeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete executor node too many requests response a status code equal to that given
func (o *DeleteExecutorNodeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete executor node too many requests response
func (o *DeleteExecutorNodeTooManyRequests) Code() int {
	return 429
}

func (o *DeleteExecutorNodeTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/executor_nodes/{ID}][%d] deleteExecutorNodeTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteExecutorNodeTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/executor_nodes/{ID}][%d] deleteExecutorNodeTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteExecutorNodeTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeleteExecutorNodeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteExecutorNodeInternalServerError creates a DeleteExecutorNodeInternalServerError with default headers values
func NewDeleteExecutorNodeInternalServerError() *DeleteExecutorNodeInternalServerError {
	return &DeleteExecutorNodeInternalServerError{}
}

/*
DeleteExecutorNodeInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteExecutorNodeInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this delete executor node internal server error response has a 2xx status code
func (o *DeleteExecutorNodeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete executor node internal server error response has a 3xx status code
func (o *DeleteExecutorNodeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete executor node internal server error response has a 4xx status code
func (o *DeleteExecutorNodeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete executor node internal server error response has a 5xx status code
func (o *DeleteExecutorNodeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete executor node internal server error response a status code equal to that given
func (o *DeleteExecutorNodeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete executor node internal server error response
func (o *DeleteExecutorNodeInternalServerError) Code() int {
	return 500
}

func (o *DeleteExecutorNodeInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/executor_nodes/{ID}][%d] deleteExecutorNodeInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteExecutorNodeInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/executor_nodes/{ID}][%d] deleteExecutorNodeInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteExecutorNodeInternalServerError) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *DeleteExecutorNodeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
