// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ServiceNowGetDeploymentsReader is a Reader for the ServiceNowGetDeployments structure.
type ServiceNowGetDeploymentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServiceNowGetDeploymentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewServiceNowGetDeploymentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewServiceNowGetDeploymentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewServiceNowGetDeploymentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewServiceNowGetDeploymentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewServiceNowGetDeploymentsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewServiceNowGetDeploymentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /aspm-api-gateway/api/v1/servicenow/deployments] ServiceNowGetDeployments", response, response.Code())
	}
}

// NewServiceNowGetDeploymentsOK creates a ServiceNowGetDeploymentsOK with default headers values
func NewServiceNowGetDeploymentsOK() *ServiceNowGetDeploymentsOK {
	return &ServiceNowGetDeploymentsOK{}
}

/*
ServiceNowGetDeploymentsOK describes a response with status code 200, with default header values.

OK
*/
type ServiceNowGetDeploymentsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesServiceNowDeploymentsResponse
}

// IsSuccess returns true when this service now get deployments o k response has a 2xx status code
func (o *ServiceNowGetDeploymentsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this service now get deployments o k response has a 3xx status code
func (o *ServiceNowGetDeploymentsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this service now get deployments o k response has a 4xx status code
func (o *ServiceNowGetDeploymentsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this service now get deployments o k response has a 5xx status code
func (o *ServiceNowGetDeploymentsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this service now get deployments o k response a status code equal to that given
func (o *ServiceNowGetDeploymentsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the service now get deployments o k response
func (o *ServiceNowGetDeploymentsOK) Code() int {
	return 200
}

func (o *ServiceNowGetDeploymentsOK) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/deployments][%d] serviceNowGetDeploymentsOK  %+v", 200, o.Payload)
}

func (o *ServiceNowGetDeploymentsOK) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/deployments][%d] serviceNowGetDeploymentsOK  %+v", 200, o.Payload)
}

func (o *ServiceNowGetDeploymentsOK) GetPayload() *models.TypesServiceNowDeploymentsResponse {
	return o.Payload
}

func (o *ServiceNowGetDeploymentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesServiceNowDeploymentsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceNowGetDeploymentsBadRequest creates a ServiceNowGetDeploymentsBadRequest with default headers values
func NewServiceNowGetDeploymentsBadRequest() *ServiceNowGetDeploymentsBadRequest {
	return &ServiceNowGetDeploymentsBadRequest{}
}

/*
ServiceNowGetDeploymentsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ServiceNowGetDeploymentsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this service now get deployments bad request response has a 2xx status code
func (o *ServiceNowGetDeploymentsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this service now get deployments bad request response has a 3xx status code
func (o *ServiceNowGetDeploymentsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this service now get deployments bad request response has a 4xx status code
func (o *ServiceNowGetDeploymentsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this service now get deployments bad request response has a 5xx status code
func (o *ServiceNowGetDeploymentsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this service now get deployments bad request response a status code equal to that given
func (o *ServiceNowGetDeploymentsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the service now get deployments bad request response
func (o *ServiceNowGetDeploymentsBadRequest) Code() int {
	return 400
}

func (o *ServiceNowGetDeploymentsBadRequest) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/deployments][%d] serviceNowGetDeploymentsBadRequest  %+v", 400, o.Payload)
}

func (o *ServiceNowGetDeploymentsBadRequest) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/deployments][%d] serviceNowGetDeploymentsBadRequest  %+v", 400, o.Payload)
}

func (o *ServiceNowGetDeploymentsBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ServiceNowGetDeploymentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceNowGetDeploymentsUnauthorized creates a ServiceNowGetDeploymentsUnauthorized with default headers values
func NewServiceNowGetDeploymentsUnauthorized() *ServiceNowGetDeploymentsUnauthorized {
	return &ServiceNowGetDeploymentsUnauthorized{}
}

/*
ServiceNowGetDeploymentsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ServiceNowGetDeploymentsUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this service now get deployments unauthorized response has a 2xx status code
func (o *ServiceNowGetDeploymentsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this service now get deployments unauthorized response has a 3xx status code
func (o *ServiceNowGetDeploymentsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this service now get deployments unauthorized response has a 4xx status code
func (o *ServiceNowGetDeploymentsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this service now get deployments unauthorized response has a 5xx status code
func (o *ServiceNowGetDeploymentsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this service now get deployments unauthorized response a status code equal to that given
func (o *ServiceNowGetDeploymentsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the service now get deployments unauthorized response
func (o *ServiceNowGetDeploymentsUnauthorized) Code() int {
	return 401
}

func (o *ServiceNowGetDeploymentsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/deployments][%d] serviceNowGetDeploymentsUnauthorized  %+v", 401, o.Payload)
}

func (o *ServiceNowGetDeploymentsUnauthorized) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/deployments][%d] serviceNowGetDeploymentsUnauthorized  %+v", 401, o.Payload)
}

func (o *ServiceNowGetDeploymentsUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ServiceNowGetDeploymentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceNowGetDeploymentsForbidden creates a ServiceNowGetDeploymentsForbidden with default headers values
func NewServiceNowGetDeploymentsForbidden() *ServiceNowGetDeploymentsForbidden {
	return &ServiceNowGetDeploymentsForbidden{}
}

/*
ServiceNowGetDeploymentsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ServiceNowGetDeploymentsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this service now get deployments forbidden response has a 2xx status code
func (o *ServiceNowGetDeploymentsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this service now get deployments forbidden response has a 3xx status code
func (o *ServiceNowGetDeploymentsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this service now get deployments forbidden response has a 4xx status code
func (o *ServiceNowGetDeploymentsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this service now get deployments forbidden response has a 5xx status code
func (o *ServiceNowGetDeploymentsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this service now get deployments forbidden response a status code equal to that given
func (o *ServiceNowGetDeploymentsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the service now get deployments forbidden response
func (o *ServiceNowGetDeploymentsForbidden) Code() int {
	return 403
}

func (o *ServiceNowGetDeploymentsForbidden) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/deployments][%d] serviceNowGetDeploymentsForbidden  %+v", 403, o.Payload)
}

func (o *ServiceNowGetDeploymentsForbidden) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/deployments][%d] serviceNowGetDeploymentsForbidden  %+v", 403, o.Payload)
}

func (o *ServiceNowGetDeploymentsForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ServiceNowGetDeploymentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceNowGetDeploymentsTooManyRequests creates a ServiceNowGetDeploymentsTooManyRequests with default headers values
func NewServiceNowGetDeploymentsTooManyRequests() *ServiceNowGetDeploymentsTooManyRequests {
	return &ServiceNowGetDeploymentsTooManyRequests{}
}

/*
ServiceNowGetDeploymentsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ServiceNowGetDeploymentsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this service now get deployments too many requests response has a 2xx status code
func (o *ServiceNowGetDeploymentsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this service now get deployments too many requests response has a 3xx status code
func (o *ServiceNowGetDeploymentsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this service now get deployments too many requests response has a 4xx status code
func (o *ServiceNowGetDeploymentsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this service now get deployments too many requests response has a 5xx status code
func (o *ServiceNowGetDeploymentsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this service now get deployments too many requests response a status code equal to that given
func (o *ServiceNowGetDeploymentsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the service now get deployments too many requests response
func (o *ServiceNowGetDeploymentsTooManyRequests) Code() int {
	return 429
}

func (o *ServiceNowGetDeploymentsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/deployments][%d] serviceNowGetDeploymentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ServiceNowGetDeploymentsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/deployments][%d] serviceNowGetDeploymentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ServiceNowGetDeploymentsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ServiceNowGetDeploymentsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceNowGetDeploymentsInternalServerError creates a ServiceNowGetDeploymentsInternalServerError with default headers values
func NewServiceNowGetDeploymentsInternalServerError() *ServiceNowGetDeploymentsInternalServerError {
	return &ServiceNowGetDeploymentsInternalServerError{}
}

/*
ServiceNowGetDeploymentsInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ServiceNowGetDeploymentsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this service now get deployments internal server error response has a 2xx status code
func (o *ServiceNowGetDeploymentsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this service now get deployments internal server error response has a 3xx status code
func (o *ServiceNowGetDeploymentsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this service now get deployments internal server error response has a 4xx status code
func (o *ServiceNowGetDeploymentsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this service now get deployments internal server error response has a 5xx status code
func (o *ServiceNowGetDeploymentsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this service now get deployments internal server error response a status code equal to that given
func (o *ServiceNowGetDeploymentsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the service now get deployments internal server error response
func (o *ServiceNowGetDeploymentsInternalServerError) Code() int {
	return 500
}

func (o *ServiceNowGetDeploymentsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/deployments][%d] serviceNowGetDeploymentsInternalServerError  %+v", 500, o.Payload)
}

func (o *ServiceNowGetDeploymentsInternalServerError) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/deployments][%d] serviceNowGetDeploymentsInternalServerError  %+v", 500, o.Payload)
}

func (o *ServiceNowGetDeploymentsInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ServiceNowGetDeploymentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
