// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// DeleteTagsReader is a Reader for the DeleteTags structure.
type DeleteTagsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteTagsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteTagsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewDeleteTagsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteTagsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteTagsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteTagsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteTagsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteTagsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteTagsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /aspm-api-gateway/api/v1/tags] DeleteTags", response, response.Code())
	}
}

// NewDeleteTagsOK creates a DeleteTagsOK with default headers values
func NewDeleteTagsOK() *DeleteTagsOK {
	return &DeleteTagsOK{}
}

/*
DeleteTagsOK describes a response with status code 200, with default header values.

OK
*/
type DeleteTagsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this delete tags o k response has a 2xx status code
func (o *DeleteTagsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete tags o k response has a 3xx status code
func (o *DeleteTagsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete tags o k response has a 4xx status code
func (o *DeleteTagsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete tags o k response has a 5xx status code
func (o *DeleteTagsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete tags o k response a status code equal to that given
func (o *DeleteTagsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete tags o k response
func (o *DeleteTagsOK) Code() int {
	return 200
}

func (o *DeleteTagsOK) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/tags][%d] deleteTagsOK", 200)
}

func (o *DeleteTagsOK) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/tags][%d] deleteTagsOK", 200)
}

func (o *DeleteTagsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewDeleteTagsCreated creates a DeleteTagsCreated with default headers values
func NewDeleteTagsCreated() *DeleteTagsCreated {
	return &DeleteTagsCreated{}
}

/*
DeleteTagsCreated describes a response with status code 201, with default header values.

Created
*/
type DeleteTagsCreated struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this delete tags created response has a 2xx status code
func (o *DeleteTagsCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete tags created response has a 3xx status code
func (o *DeleteTagsCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete tags created response has a 4xx status code
func (o *DeleteTagsCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete tags created response has a 5xx status code
func (o *DeleteTagsCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this delete tags created response a status code equal to that given
func (o *DeleteTagsCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the delete tags created response
func (o *DeleteTagsCreated) Code() int {
	return 201
}

func (o *DeleteTagsCreated) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/tags][%d] deleteTagsCreated", 201)
}

func (o *DeleteTagsCreated) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/tags][%d] deleteTagsCreated", 201)
}

func (o *DeleteTagsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewDeleteTagsBadRequest creates a DeleteTagsBadRequest with default headers values
func NewDeleteTagsBadRequest() *DeleteTagsBadRequest {
	return &DeleteTagsBadRequest{}
}

/*
DeleteTagsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteTagsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this delete tags bad request response has a 2xx status code
func (o *DeleteTagsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete tags bad request response has a 3xx status code
func (o *DeleteTagsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete tags bad request response has a 4xx status code
func (o *DeleteTagsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete tags bad request response has a 5xx status code
func (o *DeleteTagsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete tags bad request response a status code equal to that given
func (o *DeleteTagsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete tags bad request response
func (o *DeleteTagsBadRequest) Code() int {
	return 400
}

func (o *DeleteTagsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/tags][%d] deleteTagsBadRequest %s", 400, payload)
}

func (o *DeleteTagsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/tags][%d] deleteTagsBadRequest %s", 400, payload)
}

func (o *DeleteTagsBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *DeleteTagsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTagsUnauthorized creates a DeleteTagsUnauthorized with default headers values
func NewDeleteTagsUnauthorized() *DeleteTagsUnauthorized {
	return &DeleteTagsUnauthorized{}
}

/*
DeleteTagsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteTagsUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this delete tags unauthorized response has a 2xx status code
func (o *DeleteTagsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete tags unauthorized response has a 3xx status code
func (o *DeleteTagsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete tags unauthorized response has a 4xx status code
func (o *DeleteTagsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete tags unauthorized response has a 5xx status code
func (o *DeleteTagsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete tags unauthorized response a status code equal to that given
func (o *DeleteTagsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete tags unauthorized response
func (o *DeleteTagsUnauthorized) Code() int {
	return 401
}

func (o *DeleteTagsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/tags][%d] deleteTagsUnauthorized %s", 401, payload)
}

func (o *DeleteTagsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/tags][%d] deleteTagsUnauthorized %s", 401, payload)
}

func (o *DeleteTagsUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *DeleteTagsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTagsForbidden creates a DeleteTagsForbidden with default headers values
func NewDeleteTagsForbidden() *DeleteTagsForbidden {
	return &DeleteTagsForbidden{}
}

/*
DeleteTagsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteTagsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this delete tags forbidden response has a 2xx status code
func (o *DeleteTagsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete tags forbidden response has a 3xx status code
func (o *DeleteTagsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete tags forbidden response has a 4xx status code
func (o *DeleteTagsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete tags forbidden response has a 5xx status code
func (o *DeleteTagsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete tags forbidden response a status code equal to that given
func (o *DeleteTagsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete tags forbidden response
func (o *DeleteTagsForbidden) Code() int {
	return 403
}

func (o *DeleteTagsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/tags][%d] deleteTagsForbidden %s", 403, payload)
}

func (o *DeleteTagsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/tags][%d] deleteTagsForbidden %s", 403, payload)
}

func (o *DeleteTagsForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *DeleteTagsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTagsTooManyRequests creates a DeleteTagsTooManyRequests with default headers values
func NewDeleteTagsTooManyRequests() *DeleteTagsTooManyRequests {
	return &DeleteTagsTooManyRequests{}
}

/*
DeleteTagsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type DeleteTagsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete tags too many requests response has a 2xx status code
func (o *DeleteTagsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete tags too many requests response has a 3xx status code
func (o *DeleteTagsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete tags too many requests response has a 4xx status code
func (o *DeleteTagsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete tags too many requests response has a 5xx status code
func (o *DeleteTagsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete tags too many requests response a status code equal to that given
func (o *DeleteTagsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete tags too many requests response
func (o *DeleteTagsTooManyRequests) Code() int {
	return 429
}

func (o *DeleteTagsTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/tags][%d] deleteTagsTooManyRequests %s", 429, payload)
}

func (o *DeleteTagsTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/tags][%d] deleteTagsTooManyRequests %s", 429, payload)
}

func (o *DeleteTagsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeleteTagsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTagsInternalServerError creates a DeleteTagsInternalServerError with default headers values
func NewDeleteTagsInternalServerError() *DeleteTagsInternalServerError {
	return &DeleteTagsInternalServerError{}
}

/*
DeleteTagsInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type DeleteTagsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete tags internal server error response has a 2xx status code
func (o *DeleteTagsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete tags internal server error response has a 3xx status code
func (o *DeleteTagsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete tags internal server error response has a 4xx status code
func (o *DeleteTagsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete tags internal server error response has a 5xx status code
func (o *DeleteTagsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete tags internal server error response a status code equal to that given
func (o *DeleteTagsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete tags internal server error response
func (o *DeleteTagsInternalServerError) Code() int {
	return 500
}

func (o *DeleteTagsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/tags][%d] deleteTagsInternalServerError %s", 500, payload)
}

func (o *DeleteTagsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/tags][%d] deleteTagsInternalServerError %s", 500, payload)
}

func (o *DeleteTagsInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeleteTagsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTagsServiceUnavailable creates a DeleteTagsServiceUnavailable with default headers values
func NewDeleteTagsServiceUnavailable() *DeleteTagsServiceUnavailable {
	return &DeleteTagsServiceUnavailable{}
}

/*
DeleteTagsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable
*/
type DeleteTagsServiceUnavailable struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this delete tags service unavailable response has a 2xx status code
func (o *DeleteTagsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete tags service unavailable response has a 3xx status code
func (o *DeleteTagsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete tags service unavailable response has a 4xx status code
func (o *DeleteTagsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete tags service unavailable response has a 5xx status code
func (o *DeleteTagsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this delete tags service unavailable response a status code equal to that given
func (o *DeleteTagsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the delete tags service unavailable response
func (o *DeleteTagsServiceUnavailable) Code() int {
	return 503
}

func (o *DeleteTagsServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/tags][%d] deleteTagsServiceUnavailable %s", 503, payload)
}

func (o *DeleteTagsServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/tags][%d] deleteTagsServiceUnavailable %s", 503, payload)
}

func (o *DeleteTagsServiceUnavailable) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *DeleteTagsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
