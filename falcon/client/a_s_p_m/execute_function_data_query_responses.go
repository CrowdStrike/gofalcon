// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExecuteFunctionDataQueryReader is a Reader for the ExecuteFunctionDataQuery structure.
type ExecuteFunctionDataQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecuteFunctionDataQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecuteFunctionDataQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExecuteFunctionDataQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExecuteFunctionDataQueryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExecuteFunctionDataQueryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExecuteFunctionDataQueryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExecuteFunctionDataQueryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewExecuteFunctionDataQueryServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /application-security/combined/query-function-data/v1] ExecuteFunctionDataQuery", response, response.Code())
	}
}

// NewExecuteFunctionDataQueryOK creates a ExecuteFunctionDataQueryOK with default headers values
func NewExecuteFunctionDataQueryOK() *ExecuteFunctionDataQueryOK {
	return &ExecuteFunctionDataQueryOK{}
}

/*
ExecuteFunctionDataQueryOK describes a response with status code 200, with default header values.

OK
*/
type ExecuteFunctionDataQueryOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesGeneralQueryResponse
}

// IsSuccess returns true when this execute function data query o k response has a 2xx status code
func (o *ExecuteFunctionDataQueryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this execute function data query o k response has a 3xx status code
func (o *ExecuteFunctionDataQueryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data query o k response has a 4xx status code
func (o *ExecuteFunctionDataQueryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute function data query o k response has a 5xx status code
func (o *ExecuteFunctionDataQueryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this execute function data query o k response a status code equal to that given
func (o *ExecuteFunctionDataQueryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the execute function data query o k response
func (o *ExecuteFunctionDataQueryOK) Code() int {
	return 200
}

func (o *ExecuteFunctionDataQueryOK) Error() string {
	return fmt.Sprintf("[GET /application-security/combined/query-function-data/v1][%d] executeFunctionDataQueryOK  %+v", 200, o.Payload)
}

func (o *ExecuteFunctionDataQueryOK) String() string {
	return fmt.Sprintf("[GET /application-security/combined/query-function-data/v1][%d] executeFunctionDataQueryOK  %+v", 200, o.Payload)
}

func (o *ExecuteFunctionDataQueryOK) GetPayload() *models.TypesGeneralQueryResponse {
	return o.Payload
}

func (o *ExecuteFunctionDataQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesGeneralQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataQueryBadRequest creates a ExecuteFunctionDataQueryBadRequest with default headers values
func NewExecuteFunctionDataQueryBadRequest() *ExecuteFunctionDataQueryBadRequest {
	return &ExecuteFunctionDataQueryBadRequest{}
}

/*
ExecuteFunctionDataQueryBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExecuteFunctionDataQueryBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute function data query bad request response has a 2xx status code
func (o *ExecuteFunctionDataQueryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data query bad request response has a 3xx status code
func (o *ExecuteFunctionDataQueryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data query bad request response has a 4xx status code
func (o *ExecuteFunctionDataQueryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute function data query bad request response has a 5xx status code
func (o *ExecuteFunctionDataQueryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this execute function data query bad request response a status code equal to that given
func (o *ExecuteFunctionDataQueryBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the execute function data query bad request response
func (o *ExecuteFunctionDataQueryBadRequest) Code() int {
	return 400
}

func (o *ExecuteFunctionDataQueryBadRequest) Error() string {
	return fmt.Sprintf("[GET /application-security/combined/query-function-data/v1][%d] executeFunctionDataQueryBadRequest  %+v", 400, o.Payload)
}

func (o *ExecuteFunctionDataQueryBadRequest) String() string {
	return fmt.Sprintf("[GET /application-security/combined/query-function-data/v1][%d] executeFunctionDataQueryBadRequest  %+v", 400, o.Payload)
}

func (o *ExecuteFunctionDataQueryBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionDataQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataQueryUnauthorized creates a ExecuteFunctionDataQueryUnauthorized with default headers values
func NewExecuteFunctionDataQueryUnauthorized() *ExecuteFunctionDataQueryUnauthorized {
	return &ExecuteFunctionDataQueryUnauthorized{}
}

/*
ExecuteFunctionDataQueryUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExecuteFunctionDataQueryUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute function data query unauthorized response has a 2xx status code
func (o *ExecuteFunctionDataQueryUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data query unauthorized response has a 3xx status code
func (o *ExecuteFunctionDataQueryUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data query unauthorized response has a 4xx status code
func (o *ExecuteFunctionDataQueryUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute function data query unauthorized response has a 5xx status code
func (o *ExecuteFunctionDataQueryUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this execute function data query unauthorized response a status code equal to that given
func (o *ExecuteFunctionDataQueryUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the execute function data query unauthorized response
func (o *ExecuteFunctionDataQueryUnauthorized) Code() int {
	return 401
}

func (o *ExecuteFunctionDataQueryUnauthorized) Error() string {
	return fmt.Sprintf("[GET /application-security/combined/query-function-data/v1][%d] executeFunctionDataQueryUnauthorized  %+v", 401, o.Payload)
}

func (o *ExecuteFunctionDataQueryUnauthorized) String() string {
	return fmt.Sprintf("[GET /application-security/combined/query-function-data/v1][%d] executeFunctionDataQueryUnauthorized  %+v", 401, o.Payload)
}

func (o *ExecuteFunctionDataQueryUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionDataQueryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataQueryForbidden creates a ExecuteFunctionDataQueryForbidden with default headers values
func NewExecuteFunctionDataQueryForbidden() *ExecuteFunctionDataQueryForbidden {
	return &ExecuteFunctionDataQueryForbidden{}
}

/*
ExecuteFunctionDataQueryForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExecuteFunctionDataQueryForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute function data query forbidden response has a 2xx status code
func (o *ExecuteFunctionDataQueryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data query forbidden response has a 3xx status code
func (o *ExecuteFunctionDataQueryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data query forbidden response has a 4xx status code
func (o *ExecuteFunctionDataQueryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute function data query forbidden response has a 5xx status code
func (o *ExecuteFunctionDataQueryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this execute function data query forbidden response a status code equal to that given
func (o *ExecuteFunctionDataQueryForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the execute function data query forbidden response
func (o *ExecuteFunctionDataQueryForbidden) Code() int {
	return 403
}

func (o *ExecuteFunctionDataQueryForbidden) Error() string {
	return fmt.Sprintf("[GET /application-security/combined/query-function-data/v1][%d] executeFunctionDataQueryForbidden  %+v", 403, o.Payload)
}

func (o *ExecuteFunctionDataQueryForbidden) String() string {
	return fmt.Sprintf("[GET /application-security/combined/query-function-data/v1][%d] executeFunctionDataQueryForbidden  %+v", 403, o.Payload)
}

func (o *ExecuteFunctionDataQueryForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionDataQueryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataQueryTooManyRequests creates a ExecuteFunctionDataQueryTooManyRequests with default headers values
func NewExecuteFunctionDataQueryTooManyRequests() *ExecuteFunctionDataQueryTooManyRequests {
	return &ExecuteFunctionDataQueryTooManyRequests{}
}

/*
ExecuteFunctionDataQueryTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExecuteFunctionDataQueryTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute function data query too many requests response has a 2xx status code
func (o *ExecuteFunctionDataQueryTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data query too many requests response has a 3xx status code
func (o *ExecuteFunctionDataQueryTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data query too many requests response has a 4xx status code
func (o *ExecuteFunctionDataQueryTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute function data query too many requests response has a 5xx status code
func (o *ExecuteFunctionDataQueryTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this execute function data query too many requests response a status code equal to that given
func (o *ExecuteFunctionDataQueryTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the execute function data query too many requests response
func (o *ExecuteFunctionDataQueryTooManyRequests) Code() int {
	return 429
}

func (o *ExecuteFunctionDataQueryTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /application-security/combined/query-function-data/v1][%d] executeFunctionDataQueryTooManyRequests  %+v", 429, o.Payload)
}

func (o *ExecuteFunctionDataQueryTooManyRequests) String() string {
	return fmt.Sprintf("[GET /application-security/combined/query-function-data/v1][%d] executeFunctionDataQueryTooManyRequests  %+v", 429, o.Payload)
}

func (o *ExecuteFunctionDataQueryTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteFunctionDataQueryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataQueryInternalServerError creates a ExecuteFunctionDataQueryInternalServerError with default headers values
func NewExecuteFunctionDataQueryInternalServerError() *ExecuteFunctionDataQueryInternalServerError {
	return &ExecuteFunctionDataQueryInternalServerError{}
}

/*
ExecuteFunctionDataQueryInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ExecuteFunctionDataQueryInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute function data query internal server error response has a 2xx status code
func (o *ExecuteFunctionDataQueryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data query internal server error response has a 3xx status code
func (o *ExecuteFunctionDataQueryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data query internal server error response has a 4xx status code
func (o *ExecuteFunctionDataQueryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute function data query internal server error response has a 5xx status code
func (o *ExecuteFunctionDataQueryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this execute function data query internal server error response a status code equal to that given
func (o *ExecuteFunctionDataQueryInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the execute function data query internal server error response
func (o *ExecuteFunctionDataQueryInternalServerError) Code() int {
	return 500
}

func (o *ExecuteFunctionDataQueryInternalServerError) Error() string {
	return fmt.Sprintf("[GET /application-security/combined/query-function-data/v1][%d] executeFunctionDataQueryInternalServerError  %+v", 500, o.Payload)
}

func (o *ExecuteFunctionDataQueryInternalServerError) String() string {
	return fmt.Sprintf("[GET /application-security/combined/query-function-data/v1][%d] executeFunctionDataQueryInternalServerError  %+v", 500, o.Payload)
}

func (o *ExecuteFunctionDataQueryInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteFunctionDataQueryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataQueryServiceUnavailable creates a ExecuteFunctionDataQueryServiceUnavailable with default headers values
func NewExecuteFunctionDataQueryServiceUnavailable() *ExecuteFunctionDataQueryServiceUnavailable {
	return &ExecuteFunctionDataQueryServiceUnavailable{}
}

/*
ExecuteFunctionDataQueryServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable
*/
type ExecuteFunctionDataQueryServiceUnavailable struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute function data query service unavailable response has a 2xx status code
func (o *ExecuteFunctionDataQueryServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data query service unavailable response has a 3xx status code
func (o *ExecuteFunctionDataQueryServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data query service unavailable response has a 4xx status code
func (o *ExecuteFunctionDataQueryServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute function data query service unavailable response has a 5xx status code
func (o *ExecuteFunctionDataQueryServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this execute function data query service unavailable response a status code equal to that given
func (o *ExecuteFunctionDataQueryServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the execute function data query service unavailable response
func (o *ExecuteFunctionDataQueryServiceUnavailable) Code() int {
	return 503
}

func (o *ExecuteFunctionDataQueryServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /application-security/combined/query-function-data/v1][%d] executeFunctionDataQueryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ExecuteFunctionDataQueryServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /application-security/combined/query-function-data/v1][%d] executeFunctionDataQueryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ExecuteFunctionDataQueryServiceUnavailable) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionDataQueryServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
