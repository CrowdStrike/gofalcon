// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetExecutorNodesReader is a Reader for the GetExecutorNodes structure.
type GetExecutorNodesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetExecutorNodesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetExecutorNodesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetExecutorNodesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetExecutorNodesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetExecutorNodesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetExecutorNodesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetExecutorNodesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /aspm-api-gateway/api/v1/executor_nodes] GetExecutorNodes", response, response.Code())
	}
}

// NewGetExecutorNodesOK creates a GetExecutorNodesOK with default headers values
func NewGetExecutorNodesOK() *GetExecutorNodesOK {
	return &GetExecutorNodesOK{}
}

/*
GetExecutorNodesOK describes a response with status code 200, with default header values.

OK
*/
type GetExecutorNodesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesListExecutorNodesResponse
}

// IsSuccess returns true when this get executor nodes o k response has a 2xx status code
func (o *GetExecutorNodesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get executor nodes o k response has a 3xx status code
func (o *GetExecutorNodesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get executor nodes o k response has a 4xx status code
func (o *GetExecutorNodesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get executor nodes o k response has a 5xx status code
func (o *GetExecutorNodesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get executor nodes o k response a status code equal to that given
func (o *GetExecutorNodesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get executor nodes o k response
func (o *GetExecutorNodesOK) Code() int {
	return 200
}

func (o *GetExecutorNodesOK) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes][%d] getExecutorNodesOK  %+v", 200, o.Payload)
}

func (o *GetExecutorNodesOK) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes][%d] getExecutorNodesOK  %+v", 200, o.Payload)
}

func (o *GetExecutorNodesOK) GetPayload() *models.TypesListExecutorNodesResponse {
	return o.Payload
}

func (o *GetExecutorNodesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesListExecutorNodesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExecutorNodesBadRequest creates a GetExecutorNodesBadRequest with default headers values
func NewGetExecutorNodesBadRequest() *GetExecutorNodesBadRequest {
	return &GetExecutorNodesBadRequest{}
}

/*
GetExecutorNodesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetExecutorNodesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get executor nodes bad request response has a 2xx status code
func (o *GetExecutorNodesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get executor nodes bad request response has a 3xx status code
func (o *GetExecutorNodesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get executor nodes bad request response has a 4xx status code
func (o *GetExecutorNodesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get executor nodes bad request response has a 5xx status code
func (o *GetExecutorNodesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get executor nodes bad request response a status code equal to that given
func (o *GetExecutorNodesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get executor nodes bad request response
func (o *GetExecutorNodesBadRequest) Code() int {
	return 400
}

func (o *GetExecutorNodesBadRequest) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes][%d] getExecutorNodesBadRequest  %+v", 400, o.Payload)
}

func (o *GetExecutorNodesBadRequest) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes][%d] getExecutorNodesBadRequest  %+v", 400, o.Payload)
}

func (o *GetExecutorNodesBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetExecutorNodesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExecutorNodesUnauthorized creates a GetExecutorNodesUnauthorized with default headers values
func NewGetExecutorNodesUnauthorized() *GetExecutorNodesUnauthorized {
	return &GetExecutorNodesUnauthorized{}
}

/*
GetExecutorNodesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetExecutorNodesUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get executor nodes unauthorized response has a 2xx status code
func (o *GetExecutorNodesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get executor nodes unauthorized response has a 3xx status code
func (o *GetExecutorNodesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get executor nodes unauthorized response has a 4xx status code
func (o *GetExecutorNodesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get executor nodes unauthorized response has a 5xx status code
func (o *GetExecutorNodesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get executor nodes unauthorized response a status code equal to that given
func (o *GetExecutorNodesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get executor nodes unauthorized response
func (o *GetExecutorNodesUnauthorized) Code() int {
	return 401
}

func (o *GetExecutorNodesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes][%d] getExecutorNodesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetExecutorNodesUnauthorized) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes][%d] getExecutorNodesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetExecutorNodesUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetExecutorNodesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExecutorNodesForbidden creates a GetExecutorNodesForbidden with default headers values
func NewGetExecutorNodesForbidden() *GetExecutorNodesForbidden {
	return &GetExecutorNodesForbidden{}
}

/*
GetExecutorNodesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetExecutorNodesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get executor nodes forbidden response has a 2xx status code
func (o *GetExecutorNodesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get executor nodes forbidden response has a 3xx status code
func (o *GetExecutorNodesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get executor nodes forbidden response has a 4xx status code
func (o *GetExecutorNodesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get executor nodes forbidden response has a 5xx status code
func (o *GetExecutorNodesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get executor nodes forbidden response a status code equal to that given
func (o *GetExecutorNodesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get executor nodes forbidden response
func (o *GetExecutorNodesForbidden) Code() int {
	return 403
}

func (o *GetExecutorNodesForbidden) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes][%d] getExecutorNodesForbidden  %+v", 403, o.Payload)
}

func (o *GetExecutorNodesForbidden) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes][%d] getExecutorNodesForbidden  %+v", 403, o.Payload)
}

func (o *GetExecutorNodesForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetExecutorNodesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExecutorNodesTooManyRequests creates a GetExecutorNodesTooManyRequests with default headers values
func NewGetExecutorNodesTooManyRequests() *GetExecutorNodesTooManyRequests {
	return &GetExecutorNodesTooManyRequests{}
}

/*
GetExecutorNodesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetExecutorNodesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get executor nodes too many requests response has a 2xx status code
func (o *GetExecutorNodesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get executor nodes too many requests response has a 3xx status code
func (o *GetExecutorNodesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get executor nodes too many requests response has a 4xx status code
func (o *GetExecutorNodesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get executor nodes too many requests response has a 5xx status code
func (o *GetExecutorNodesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get executor nodes too many requests response a status code equal to that given
func (o *GetExecutorNodesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get executor nodes too many requests response
func (o *GetExecutorNodesTooManyRequests) Code() int {
	return 429
}

func (o *GetExecutorNodesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes][%d] getExecutorNodesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetExecutorNodesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes][%d] getExecutorNodesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetExecutorNodesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetExecutorNodesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExecutorNodesInternalServerError creates a GetExecutorNodesInternalServerError with default headers values
func NewGetExecutorNodesInternalServerError() *GetExecutorNodesInternalServerError {
	return &GetExecutorNodesInternalServerError{}
}

/*
GetExecutorNodesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetExecutorNodesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get executor nodes internal server error response has a 2xx status code
func (o *GetExecutorNodesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get executor nodes internal server error response has a 3xx status code
func (o *GetExecutorNodesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get executor nodes internal server error response has a 4xx status code
func (o *GetExecutorNodesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get executor nodes internal server error response has a 5xx status code
func (o *GetExecutorNodesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get executor nodes internal server error response a status code equal to that given
func (o *GetExecutorNodesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get executor nodes internal server error response
func (o *GetExecutorNodesInternalServerError) Code() int {
	return 500
}

func (o *GetExecutorNodesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes][%d] getExecutorNodesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetExecutorNodesInternalServerError) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes][%d] getExecutorNodesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetExecutorNodesInternalServerError) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetExecutorNodesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
