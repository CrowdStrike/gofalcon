// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// DeleteIntegrationTaskReader is a Reader for the DeleteIntegrationTask structure.
type DeleteIntegrationTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteIntegrationTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteIntegrationTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteIntegrationTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteIntegrationTaskUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteIntegrationTaskForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteIntegrationTaskTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteIntegrationTaskInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /aspm-api-gateway/api/v1/integration_tasks/{ID}] DeleteIntegrationTask", response, response.Code())
	}
}

// NewDeleteIntegrationTaskOK creates a DeleteIntegrationTaskOK with default headers values
func NewDeleteIntegrationTaskOK() *DeleteIntegrationTaskOK {
	return &DeleteIntegrationTaskOK{}
}

/*
DeleteIntegrationTaskOK describes a response with status code 200, with default header values.

OK
*/
type DeleteIntegrationTaskOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this delete integration task o k response has a 2xx status code
func (o *DeleteIntegrationTaskOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete integration task o k response has a 3xx status code
func (o *DeleteIntegrationTaskOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete integration task o k response has a 4xx status code
func (o *DeleteIntegrationTaskOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete integration task o k response has a 5xx status code
func (o *DeleteIntegrationTaskOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete integration task o k response a status code equal to that given
func (o *DeleteIntegrationTaskOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete integration task o k response
func (o *DeleteIntegrationTaskOK) Code() int {
	return 200
}

func (o *DeleteIntegrationTaskOK) Error() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] deleteIntegrationTaskOK ", 200)
}

func (o *DeleteIntegrationTaskOK) String() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] deleteIntegrationTaskOK ", 200)
}

func (o *DeleteIntegrationTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewDeleteIntegrationTaskBadRequest creates a DeleteIntegrationTaskBadRequest with default headers values
func NewDeleteIntegrationTaskBadRequest() *DeleteIntegrationTaskBadRequest {
	return &DeleteIntegrationTaskBadRequest{}
}

/*
DeleteIntegrationTaskBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteIntegrationTaskBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this delete integration task bad request response has a 2xx status code
func (o *DeleteIntegrationTaskBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete integration task bad request response has a 3xx status code
func (o *DeleteIntegrationTaskBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete integration task bad request response has a 4xx status code
func (o *DeleteIntegrationTaskBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete integration task bad request response has a 5xx status code
func (o *DeleteIntegrationTaskBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete integration task bad request response a status code equal to that given
func (o *DeleteIntegrationTaskBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete integration task bad request response
func (o *DeleteIntegrationTaskBadRequest) Code() int {
	return 400
}

func (o *DeleteIntegrationTaskBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] deleteIntegrationTaskBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteIntegrationTaskBadRequest) String() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] deleteIntegrationTaskBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteIntegrationTaskBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *DeleteIntegrationTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIntegrationTaskUnauthorized creates a DeleteIntegrationTaskUnauthorized with default headers values
func NewDeleteIntegrationTaskUnauthorized() *DeleteIntegrationTaskUnauthorized {
	return &DeleteIntegrationTaskUnauthorized{}
}

/*
DeleteIntegrationTaskUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteIntegrationTaskUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this delete integration task unauthorized response has a 2xx status code
func (o *DeleteIntegrationTaskUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete integration task unauthorized response has a 3xx status code
func (o *DeleteIntegrationTaskUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete integration task unauthorized response has a 4xx status code
func (o *DeleteIntegrationTaskUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete integration task unauthorized response has a 5xx status code
func (o *DeleteIntegrationTaskUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete integration task unauthorized response a status code equal to that given
func (o *DeleteIntegrationTaskUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete integration task unauthorized response
func (o *DeleteIntegrationTaskUnauthorized) Code() int {
	return 401
}

func (o *DeleteIntegrationTaskUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] deleteIntegrationTaskUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteIntegrationTaskUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] deleteIntegrationTaskUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteIntegrationTaskUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *DeleteIntegrationTaskUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIntegrationTaskForbidden creates a DeleteIntegrationTaskForbidden with default headers values
func NewDeleteIntegrationTaskForbidden() *DeleteIntegrationTaskForbidden {
	return &DeleteIntegrationTaskForbidden{}
}

/*
DeleteIntegrationTaskForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteIntegrationTaskForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this delete integration task forbidden response has a 2xx status code
func (o *DeleteIntegrationTaskForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete integration task forbidden response has a 3xx status code
func (o *DeleteIntegrationTaskForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete integration task forbidden response has a 4xx status code
func (o *DeleteIntegrationTaskForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete integration task forbidden response has a 5xx status code
func (o *DeleteIntegrationTaskForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete integration task forbidden response a status code equal to that given
func (o *DeleteIntegrationTaskForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete integration task forbidden response
func (o *DeleteIntegrationTaskForbidden) Code() int {
	return 403
}

func (o *DeleteIntegrationTaskForbidden) Error() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] deleteIntegrationTaskForbidden  %+v", 403, o.Payload)
}

func (o *DeleteIntegrationTaskForbidden) String() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] deleteIntegrationTaskForbidden  %+v", 403, o.Payload)
}

func (o *DeleteIntegrationTaskForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *DeleteIntegrationTaskForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIntegrationTaskTooManyRequests creates a DeleteIntegrationTaskTooManyRequests with default headers values
func NewDeleteIntegrationTaskTooManyRequests() *DeleteIntegrationTaskTooManyRequests {
	return &DeleteIntegrationTaskTooManyRequests{}
}

/*
DeleteIntegrationTaskTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type DeleteIntegrationTaskTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete integration task too many requests response has a 2xx status code
func (o *DeleteIntegrationTaskTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete integration task too many requests response has a 3xx status code
func (o *DeleteIntegrationTaskTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete integration task too many requests response has a 4xx status code
func (o *DeleteIntegrationTaskTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete integration task too many requests response has a 5xx status code
func (o *DeleteIntegrationTaskTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete integration task too many requests response a status code equal to that given
func (o *DeleteIntegrationTaskTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete integration task too many requests response
func (o *DeleteIntegrationTaskTooManyRequests) Code() int {
	return 429
}

func (o *DeleteIntegrationTaskTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] deleteIntegrationTaskTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteIntegrationTaskTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] deleteIntegrationTaskTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteIntegrationTaskTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeleteIntegrationTaskTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIntegrationTaskInternalServerError creates a DeleteIntegrationTaskInternalServerError with default headers values
func NewDeleteIntegrationTaskInternalServerError() *DeleteIntegrationTaskInternalServerError {
	return &DeleteIntegrationTaskInternalServerError{}
}

/*
DeleteIntegrationTaskInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteIntegrationTaskInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this delete integration task internal server error response has a 2xx status code
func (o *DeleteIntegrationTaskInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete integration task internal server error response has a 3xx status code
func (o *DeleteIntegrationTaskInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete integration task internal server error response has a 4xx status code
func (o *DeleteIntegrationTaskInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete integration task internal server error response has a 5xx status code
func (o *DeleteIntegrationTaskInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete integration task internal server error response a status code equal to that given
func (o *DeleteIntegrationTaskInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete integration task internal server error response
func (o *DeleteIntegrationTaskInternalServerError) Code() int {
	return 500
}

func (o *DeleteIntegrationTaskInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] deleteIntegrationTaskInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteIntegrationTaskInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] deleteIntegrationTaskInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteIntegrationTaskInternalServerError) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *DeleteIntegrationTaskInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
