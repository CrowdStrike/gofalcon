// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// RunIntegrationTaskAdminReader is a Reader for the RunIntegrationTaskAdmin structure.
type RunIntegrationTaskAdminReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunIntegrationTaskAdminReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRunIntegrationTaskAdminOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRunIntegrationTaskAdminBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRunIntegrationTaskAdminUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRunIntegrationTaskAdminForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewRunIntegrationTaskAdminTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRunIntegrationTaskAdminInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run/admin] RunIntegrationTaskAdmin", response, response.Code())
	}
}

// NewRunIntegrationTaskAdminOK creates a RunIntegrationTaskAdminOK with default headers values
func NewRunIntegrationTaskAdminOK() *RunIntegrationTaskAdminOK {
	return &RunIntegrationTaskAdminOK{}
}

/*
RunIntegrationTaskAdminOK describes a response with status code 200, with default header values.

OK
*/
type RunIntegrationTaskAdminOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesIntegrationTaskTestConnectionResponse
}

// IsSuccess returns true when this run integration task admin o k response has a 2xx status code
func (o *RunIntegrationTaskAdminOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this run integration task admin o k response has a 3xx status code
func (o *RunIntegrationTaskAdminOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run integration task admin o k response has a 4xx status code
func (o *RunIntegrationTaskAdminOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this run integration task admin o k response has a 5xx status code
func (o *RunIntegrationTaskAdminOK) IsServerError() bool {
	return false
}

// IsCode returns true when this run integration task admin o k response a status code equal to that given
func (o *RunIntegrationTaskAdminOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the run integration task admin o k response
func (o *RunIntegrationTaskAdminOK) Code() int {
	return 200
}

func (o *RunIntegrationTaskAdminOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run/admin][%d] runIntegrationTaskAdminOK %s", 200, payload)
}

func (o *RunIntegrationTaskAdminOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run/admin][%d] runIntegrationTaskAdminOK %s", 200, payload)
}

func (o *RunIntegrationTaskAdminOK) GetPayload() *models.TypesIntegrationTaskTestConnectionResponse {
	return o.Payload
}

func (o *RunIntegrationTaskAdminOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesIntegrationTaskTestConnectionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunIntegrationTaskAdminBadRequest creates a RunIntegrationTaskAdminBadRequest with default headers values
func NewRunIntegrationTaskAdminBadRequest() *RunIntegrationTaskAdminBadRequest {
	return &RunIntegrationTaskAdminBadRequest{}
}

/*
RunIntegrationTaskAdminBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RunIntegrationTaskAdminBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this run integration task admin bad request response has a 2xx status code
func (o *RunIntegrationTaskAdminBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this run integration task admin bad request response has a 3xx status code
func (o *RunIntegrationTaskAdminBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run integration task admin bad request response has a 4xx status code
func (o *RunIntegrationTaskAdminBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this run integration task admin bad request response has a 5xx status code
func (o *RunIntegrationTaskAdminBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this run integration task admin bad request response a status code equal to that given
func (o *RunIntegrationTaskAdminBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the run integration task admin bad request response
func (o *RunIntegrationTaskAdminBadRequest) Code() int {
	return 400
}

func (o *RunIntegrationTaskAdminBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run/admin][%d] runIntegrationTaskAdminBadRequest %s", 400, payload)
}

func (o *RunIntegrationTaskAdminBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run/admin][%d] runIntegrationTaskAdminBadRequest %s", 400, payload)
}

func (o *RunIntegrationTaskAdminBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *RunIntegrationTaskAdminBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunIntegrationTaskAdminUnauthorized creates a RunIntegrationTaskAdminUnauthorized with default headers values
func NewRunIntegrationTaskAdminUnauthorized() *RunIntegrationTaskAdminUnauthorized {
	return &RunIntegrationTaskAdminUnauthorized{}
}

/*
RunIntegrationTaskAdminUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RunIntegrationTaskAdminUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this run integration task admin unauthorized response has a 2xx status code
func (o *RunIntegrationTaskAdminUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this run integration task admin unauthorized response has a 3xx status code
func (o *RunIntegrationTaskAdminUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run integration task admin unauthorized response has a 4xx status code
func (o *RunIntegrationTaskAdminUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this run integration task admin unauthorized response has a 5xx status code
func (o *RunIntegrationTaskAdminUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this run integration task admin unauthorized response a status code equal to that given
func (o *RunIntegrationTaskAdminUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the run integration task admin unauthorized response
func (o *RunIntegrationTaskAdminUnauthorized) Code() int {
	return 401
}

func (o *RunIntegrationTaskAdminUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run/admin][%d] runIntegrationTaskAdminUnauthorized %s", 401, payload)
}

func (o *RunIntegrationTaskAdminUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run/admin][%d] runIntegrationTaskAdminUnauthorized %s", 401, payload)
}

func (o *RunIntegrationTaskAdminUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *RunIntegrationTaskAdminUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunIntegrationTaskAdminForbidden creates a RunIntegrationTaskAdminForbidden with default headers values
func NewRunIntegrationTaskAdminForbidden() *RunIntegrationTaskAdminForbidden {
	return &RunIntegrationTaskAdminForbidden{}
}

/*
RunIntegrationTaskAdminForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RunIntegrationTaskAdminForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this run integration task admin forbidden response has a 2xx status code
func (o *RunIntegrationTaskAdminForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this run integration task admin forbidden response has a 3xx status code
func (o *RunIntegrationTaskAdminForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run integration task admin forbidden response has a 4xx status code
func (o *RunIntegrationTaskAdminForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this run integration task admin forbidden response has a 5xx status code
func (o *RunIntegrationTaskAdminForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this run integration task admin forbidden response a status code equal to that given
func (o *RunIntegrationTaskAdminForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the run integration task admin forbidden response
func (o *RunIntegrationTaskAdminForbidden) Code() int {
	return 403
}

func (o *RunIntegrationTaskAdminForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run/admin][%d] runIntegrationTaskAdminForbidden %s", 403, payload)
}

func (o *RunIntegrationTaskAdminForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run/admin][%d] runIntegrationTaskAdminForbidden %s", 403, payload)
}

func (o *RunIntegrationTaskAdminForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *RunIntegrationTaskAdminForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunIntegrationTaskAdminTooManyRequests creates a RunIntegrationTaskAdminTooManyRequests with default headers values
func NewRunIntegrationTaskAdminTooManyRequests() *RunIntegrationTaskAdminTooManyRequests {
	return &RunIntegrationTaskAdminTooManyRequests{}
}

/*
RunIntegrationTaskAdminTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type RunIntegrationTaskAdminTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this run integration task admin too many requests response has a 2xx status code
func (o *RunIntegrationTaskAdminTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this run integration task admin too many requests response has a 3xx status code
func (o *RunIntegrationTaskAdminTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run integration task admin too many requests response has a 4xx status code
func (o *RunIntegrationTaskAdminTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this run integration task admin too many requests response has a 5xx status code
func (o *RunIntegrationTaskAdminTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this run integration task admin too many requests response a status code equal to that given
func (o *RunIntegrationTaskAdminTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the run integration task admin too many requests response
func (o *RunIntegrationTaskAdminTooManyRequests) Code() int {
	return 429
}

func (o *RunIntegrationTaskAdminTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run/admin][%d] runIntegrationTaskAdminTooManyRequests %s", 429, payload)
}

func (o *RunIntegrationTaskAdminTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run/admin][%d] runIntegrationTaskAdminTooManyRequests %s", 429, payload)
}

func (o *RunIntegrationTaskAdminTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *RunIntegrationTaskAdminTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunIntegrationTaskAdminInternalServerError creates a RunIntegrationTaskAdminInternalServerError with default headers values
func NewRunIntegrationTaskAdminInternalServerError() *RunIntegrationTaskAdminInternalServerError {
	return &RunIntegrationTaskAdminInternalServerError{}
}

/*
RunIntegrationTaskAdminInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RunIntegrationTaskAdminInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this run integration task admin internal server error response has a 2xx status code
func (o *RunIntegrationTaskAdminInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this run integration task admin internal server error response has a 3xx status code
func (o *RunIntegrationTaskAdminInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run integration task admin internal server error response has a 4xx status code
func (o *RunIntegrationTaskAdminInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this run integration task admin internal server error response has a 5xx status code
func (o *RunIntegrationTaskAdminInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this run integration task admin internal server error response a status code equal to that given
func (o *RunIntegrationTaskAdminInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the run integration task admin internal server error response
func (o *RunIntegrationTaskAdminInternalServerError) Code() int {
	return 500
}

func (o *RunIntegrationTaskAdminInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run/admin][%d] runIntegrationTaskAdminInternalServerError %s", 500, payload)
}

func (o *RunIntegrationTaskAdminInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run/admin][%d] runIntegrationTaskAdminInternalServerError %s", 500, payload)
}

func (o *RunIntegrationTaskAdminInternalServerError) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *RunIntegrationTaskAdminInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
