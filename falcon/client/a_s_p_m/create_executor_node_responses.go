// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CreateExecutorNodeReader is a Reader for the CreateExecutorNode structure.
type CreateExecutorNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateExecutorNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateExecutorNodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateExecutorNodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateExecutorNodeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateExecutorNodeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateExecutorNodeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateExecutorNodeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /aspm-api-gateway/api/v1/executor_nodes] CreateExecutorNode", response, response.Code())
	}
}

// NewCreateExecutorNodeOK creates a CreateExecutorNodeOK with default headers values
func NewCreateExecutorNodeOK() *CreateExecutorNodeOK {
	return &CreateExecutorNodeOK{}
}

/*
CreateExecutorNodeOK describes a response with status code 200, with default header values.

OK
*/
type CreateExecutorNodeOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesExecutorNode
}

// IsSuccess returns true when this create executor node o k response has a 2xx status code
func (o *CreateExecutorNodeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create executor node o k response has a 3xx status code
func (o *CreateExecutorNodeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create executor node o k response has a 4xx status code
func (o *CreateExecutorNodeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create executor node o k response has a 5xx status code
func (o *CreateExecutorNodeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create executor node o k response a status code equal to that given
func (o *CreateExecutorNodeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create executor node o k response
func (o *CreateExecutorNodeOK) Code() int {
	return 200
}

func (o *CreateExecutorNodeOK) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/executor_nodes][%d] createExecutorNodeOK  %+v", 200, o.Payload)
}

func (o *CreateExecutorNodeOK) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/executor_nodes][%d] createExecutorNodeOK  %+v", 200, o.Payload)
}

func (o *CreateExecutorNodeOK) GetPayload() *models.TypesExecutorNode {
	return o.Payload
}

func (o *CreateExecutorNodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesExecutorNode)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateExecutorNodeBadRequest creates a CreateExecutorNodeBadRequest with default headers values
func NewCreateExecutorNodeBadRequest() *CreateExecutorNodeBadRequest {
	return &CreateExecutorNodeBadRequest{}
}

/*
CreateExecutorNodeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateExecutorNodeBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this create executor node bad request response has a 2xx status code
func (o *CreateExecutorNodeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create executor node bad request response has a 3xx status code
func (o *CreateExecutorNodeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create executor node bad request response has a 4xx status code
func (o *CreateExecutorNodeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create executor node bad request response has a 5xx status code
func (o *CreateExecutorNodeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create executor node bad request response a status code equal to that given
func (o *CreateExecutorNodeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create executor node bad request response
func (o *CreateExecutorNodeBadRequest) Code() int {
	return 400
}

func (o *CreateExecutorNodeBadRequest) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/executor_nodes][%d] createExecutorNodeBadRequest  %+v", 400, o.Payload)
}

func (o *CreateExecutorNodeBadRequest) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/executor_nodes][%d] createExecutorNodeBadRequest  %+v", 400, o.Payload)
}

func (o *CreateExecutorNodeBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *CreateExecutorNodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateExecutorNodeUnauthorized creates a CreateExecutorNodeUnauthorized with default headers values
func NewCreateExecutorNodeUnauthorized() *CreateExecutorNodeUnauthorized {
	return &CreateExecutorNodeUnauthorized{}
}

/*
CreateExecutorNodeUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreateExecutorNodeUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this create executor node unauthorized response has a 2xx status code
func (o *CreateExecutorNodeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create executor node unauthorized response has a 3xx status code
func (o *CreateExecutorNodeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create executor node unauthorized response has a 4xx status code
func (o *CreateExecutorNodeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create executor node unauthorized response has a 5xx status code
func (o *CreateExecutorNodeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create executor node unauthorized response a status code equal to that given
func (o *CreateExecutorNodeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create executor node unauthorized response
func (o *CreateExecutorNodeUnauthorized) Code() int {
	return 401
}

func (o *CreateExecutorNodeUnauthorized) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/executor_nodes][%d] createExecutorNodeUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateExecutorNodeUnauthorized) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/executor_nodes][%d] createExecutorNodeUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateExecutorNodeUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *CreateExecutorNodeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateExecutorNodeForbidden creates a CreateExecutorNodeForbidden with default headers values
func NewCreateExecutorNodeForbidden() *CreateExecutorNodeForbidden {
	return &CreateExecutorNodeForbidden{}
}

/*
CreateExecutorNodeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateExecutorNodeForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this create executor node forbidden response has a 2xx status code
func (o *CreateExecutorNodeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create executor node forbidden response has a 3xx status code
func (o *CreateExecutorNodeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create executor node forbidden response has a 4xx status code
func (o *CreateExecutorNodeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create executor node forbidden response has a 5xx status code
func (o *CreateExecutorNodeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create executor node forbidden response a status code equal to that given
func (o *CreateExecutorNodeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create executor node forbidden response
func (o *CreateExecutorNodeForbidden) Code() int {
	return 403
}

func (o *CreateExecutorNodeForbidden) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/executor_nodes][%d] createExecutorNodeForbidden  %+v", 403, o.Payload)
}

func (o *CreateExecutorNodeForbidden) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/executor_nodes][%d] createExecutorNodeForbidden  %+v", 403, o.Payload)
}

func (o *CreateExecutorNodeForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *CreateExecutorNodeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateExecutorNodeTooManyRequests creates a CreateExecutorNodeTooManyRequests with default headers values
func NewCreateExecutorNodeTooManyRequests() *CreateExecutorNodeTooManyRequests {
	return &CreateExecutorNodeTooManyRequests{}
}

/*
CreateExecutorNodeTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CreateExecutorNodeTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this create executor node too many requests response has a 2xx status code
func (o *CreateExecutorNodeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create executor node too many requests response has a 3xx status code
func (o *CreateExecutorNodeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create executor node too many requests response has a 4xx status code
func (o *CreateExecutorNodeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create executor node too many requests response has a 5xx status code
func (o *CreateExecutorNodeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create executor node too many requests response a status code equal to that given
func (o *CreateExecutorNodeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create executor node too many requests response
func (o *CreateExecutorNodeTooManyRequests) Code() int {
	return 429
}

func (o *CreateExecutorNodeTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/executor_nodes][%d] createExecutorNodeTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateExecutorNodeTooManyRequests) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/executor_nodes][%d] createExecutorNodeTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateExecutorNodeTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateExecutorNodeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateExecutorNodeInternalServerError creates a CreateExecutorNodeInternalServerError with default headers values
func NewCreateExecutorNodeInternalServerError() *CreateExecutorNodeInternalServerError {
	return &CreateExecutorNodeInternalServerError{}
}

/*
CreateExecutorNodeInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateExecutorNodeInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this create executor node internal server error response has a 2xx status code
func (o *CreateExecutorNodeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create executor node internal server error response has a 3xx status code
func (o *CreateExecutorNodeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create executor node internal server error response has a 4xx status code
func (o *CreateExecutorNodeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create executor node internal server error response has a 5xx status code
func (o *CreateExecutorNodeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create executor node internal server error response a status code equal to that given
func (o *CreateExecutorNodeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create executor node internal server error response
func (o *CreateExecutorNodeInternalServerError) Code() int {
	return 500
}

func (o *CreateExecutorNodeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/executor_nodes][%d] createExecutorNodeInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateExecutorNodeInternalServerError) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/executor_nodes][%d] createExecutorNodeInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateExecutorNodeInternalServerError) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *CreateExecutorNodeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
