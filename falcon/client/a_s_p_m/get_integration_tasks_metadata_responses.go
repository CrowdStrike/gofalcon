// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetIntegrationTasksMetadataReader is a Reader for the GetIntegrationTasksMetadata structure.
type GetIntegrationTasksMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIntegrationTasksMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIntegrationTasksMetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetIntegrationTasksMetadataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetIntegrationTasksMetadataUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetIntegrationTasksMetadataForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetIntegrationTasksMetadataTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetIntegrationTasksMetadataInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /aspm-api-gateway/api/v1/integration_tasks/metadata] GetIntegrationTasksMetadata", response, response.Code())
	}
}

// NewGetIntegrationTasksMetadataOK creates a GetIntegrationTasksMetadataOK with default headers values
func NewGetIntegrationTasksMetadataOK() *GetIntegrationTasksMetadataOK {
	return &GetIntegrationTasksMetadataOK{}
}

/*
GetIntegrationTasksMetadataOK describes a response with status code 200, with default header values.

OK
*/
type GetIntegrationTasksMetadataOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesGetIntegrationTasksMetadataResponse
}

// IsSuccess returns true when this get integration tasks metadata o k response has a 2xx status code
func (o *GetIntegrationTasksMetadataOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get integration tasks metadata o k response has a 3xx status code
func (o *GetIntegrationTasksMetadataOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get integration tasks metadata o k response has a 4xx status code
func (o *GetIntegrationTasksMetadataOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get integration tasks metadata o k response has a 5xx status code
func (o *GetIntegrationTasksMetadataOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get integration tasks metadata o k response a status code equal to that given
func (o *GetIntegrationTasksMetadataOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get integration tasks metadata o k response
func (o *GetIntegrationTasksMetadataOK) Code() int {
	return 200
}

func (o *GetIntegrationTasksMetadataOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integration_tasks/metadata][%d] getIntegrationTasksMetadataOK %s", 200, payload)
}

func (o *GetIntegrationTasksMetadataOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integration_tasks/metadata][%d] getIntegrationTasksMetadataOK %s", 200, payload)
}

func (o *GetIntegrationTasksMetadataOK) GetPayload() *models.TypesGetIntegrationTasksMetadataResponse {
	return o.Payload
}

func (o *GetIntegrationTasksMetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesGetIntegrationTasksMetadataResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntegrationTasksMetadataBadRequest creates a GetIntegrationTasksMetadataBadRequest with default headers values
func NewGetIntegrationTasksMetadataBadRequest() *GetIntegrationTasksMetadataBadRequest {
	return &GetIntegrationTasksMetadataBadRequest{}
}

/*
GetIntegrationTasksMetadataBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetIntegrationTasksMetadataBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get integration tasks metadata bad request response has a 2xx status code
func (o *GetIntegrationTasksMetadataBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get integration tasks metadata bad request response has a 3xx status code
func (o *GetIntegrationTasksMetadataBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get integration tasks metadata bad request response has a 4xx status code
func (o *GetIntegrationTasksMetadataBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get integration tasks metadata bad request response has a 5xx status code
func (o *GetIntegrationTasksMetadataBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get integration tasks metadata bad request response a status code equal to that given
func (o *GetIntegrationTasksMetadataBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get integration tasks metadata bad request response
func (o *GetIntegrationTasksMetadataBadRequest) Code() int {
	return 400
}

func (o *GetIntegrationTasksMetadataBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integration_tasks/metadata][%d] getIntegrationTasksMetadataBadRequest %s", 400, payload)
}

func (o *GetIntegrationTasksMetadataBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integration_tasks/metadata][%d] getIntegrationTasksMetadataBadRequest %s", 400, payload)
}

func (o *GetIntegrationTasksMetadataBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetIntegrationTasksMetadataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntegrationTasksMetadataUnauthorized creates a GetIntegrationTasksMetadataUnauthorized with default headers values
func NewGetIntegrationTasksMetadataUnauthorized() *GetIntegrationTasksMetadataUnauthorized {
	return &GetIntegrationTasksMetadataUnauthorized{}
}

/*
GetIntegrationTasksMetadataUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetIntegrationTasksMetadataUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get integration tasks metadata unauthorized response has a 2xx status code
func (o *GetIntegrationTasksMetadataUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get integration tasks metadata unauthorized response has a 3xx status code
func (o *GetIntegrationTasksMetadataUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get integration tasks metadata unauthorized response has a 4xx status code
func (o *GetIntegrationTasksMetadataUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get integration tasks metadata unauthorized response has a 5xx status code
func (o *GetIntegrationTasksMetadataUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get integration tasks metadata unauthorized response a status code equal to that given
func (o *GetIntegrationTasksMetadataUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get integration tasks metadata unauthorized response
func (o *GetIntegrationTasksMetadataUnauthorized) Code() int {
	return 401
}

func (o *GetIntegrationTasksMetadataUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integration_tasks/metadata][%d] getIntegrationTasksMetadataUnauthorized %s", 401, payload)
}

func (o *GetIntegrationTasksMetadataUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integration_tasks/metadata][%d] getIntegrationTasksMetadataUnauthorized %s", 401, payload)
}

func (o *GetIntegrationTasksMetadataUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetIntegrationTasksMetadataUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntegrationTasksMetadataForbidden creates a GetIntegrationTasksMetadataForbidden with default headers values
func NewGetIntegrationTasksMetadataForbidden() *GetIntegrationTasksMetadataForbidden {
	return &GetIntegrationTasksMetadataForbidden{}
}

/*
GetIntegrationTasksMetadataForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetIntegrationTasksMetadataForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get integration tasks metadata forbidden response has a 2xx status code
func (o *GetIntegrationTasksMetadataForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get integration tasks metadata forbidden response has a 3xx status code
func (o *GetIntegrationTasksMetadataForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get integration tasks metadata forbidden response has a 4xx status code
func (o *GetIntegrationTasksMetadataForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get integration tasks metadata forbidden response has a 5xx status code
func (o *GetIntegrationTasksMetadataForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get integration tasks metadata forbidden response a status code equal to that given
func (o *GetIntegrationTasksMetadataForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get integration tasks metadata forbidden response
func (o *GetIntegrationTasksMetadataForbidden) Code() int {
	return 403
}

func (o *GetIntegrationTasksMetadataForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integration_tasks/metadata][%d] getIntegrationTasksMetadataForbidden %s", 403, payload)
}

func (o *GetIntegrationTasksMetadataForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integration_tasks/metadata][%d] getIntegrationTasksMetadataForbidden %s", 403, payload)
}

func (o *GetIntegrationTasksMetadataForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetIntegrationTasksMetadataForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntegrationTasksMetadataTooManyRequests creates a GetIntegrationTasksMetadataTooManyRequests with default headers values
func NewGetIntegrationTasksMetadataTooManyRequests() *GetIntegrationTasksMetadataTooManyRequests {
	return &GetIntegrationTasksMetadataTooManyRequests{}
}

/*
GetIntegrationTasksMetadataTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetIntegrationTasksMetadataTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get integration tasks metadata too many requests response has a 2xx status code
func (o *GetIntegrationTasksMetadataTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get integration tasks metadata too many requests response has a 3xx status code
func (o *GetIntegrationTasksMetadataTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get integration tasks metadata too many requests response has a 4xx status code
func (o *GetIntegrationTasksMetadataTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get integration tasks metadata too many requests response has a 5xx status code
func (o *GetIntegrationTasksMetadataTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get integration tasks metadata too many requests response a status code equal to that given
func (o *GetIntegrationTasksMetadataTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get integration tasks metadata too many requests response
func (o *GetIntegrationTasksMetadataTooManyRequests) Code() int {
	return 429
}

func (o *GetIntegrationTasksMetadataTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integration_tasks/metadata][%d] getIntegrationTasksMetadataTooManyRequests %s", 429, payload)
}

func (o *GetIntegrationTasksMetadataTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integration_tasks/metadata][%d] getIntegrationTasksMetadataTooManyRequests %s", 429, payload)
}

func (o *GetIntegrationTasksMetadataTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetIntegrationTasksMetadataTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntegrationTasksMetadataInternalServerError creates a GetIntegrationTasksMetadataInternalServerError with default headers values
func NewGetIntegrationTasksMetadataInternalServerError() *GetIntegrationTasksMetadataInternalServerError {
	return &GetIntegrationTasksMetadataInternalServerError{}
}

/*
GetIntegrationTasksMetadataInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetIntegrationTasksMetadataInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get integration tasks metadata internal server error response has a 2xx status code
func (o *GetIntegrationTasksMetadataInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get integration tasks metadata internal server error response has a 3xx status code
func (o *GetIntegrationTasksMetadataInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get integration tasks metadata internal server error response has a 4xx status code
func (o *GetIntegrationTasksMetadataInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get integration tasks metadata internal server error response has a 5xx status code
func (o *GetIntegrationTasksMetadataInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get integration tasks metadata internal server error response a status code equal to that given
func (o *GetIntegrationTasksMetadataInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get integration tasks metadata internal server error response
func (o *GetIntegrationTasksMetadataInternalServerError) Code() int {
	return 500
}

func (o *GetIntegrationTasksMetadataInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integration_tasks/metadata][%d] getIntegrationTasksMetadataInternalServerError %s", 500, payload)
}

func (o *GetIntegrationTasksMetadataInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integration_tasks/metadata][%d] getIntegrationTasksMetadataInternalServerError %s", 500, payload)
}

func (o *GetIntegrationTasksMetadataInternalServerError) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetIntegrationTasksMetadataInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
