// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// RunIntegrationTaskReader is a Reader for the RunIntegrationTask structure.
type RunIntegrationTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunIntegrationTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRunIntegrationTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRunIntegrationTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRunIntegrationTaskUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRunIntegrationTaskForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewRunIntegrationTaskTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRunIntegrationTaskInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run] RunIntegrationTask", response, response.Code())
	}
}

// NewRunIntegrationTaskOK creates a RunIntegrationTaskOK with default headers values
func NewRunIntegrationTaskOK() *RunIntegrationTaskOK {
	return &RunIntegrationTaskOK{}
}

/*
RunIntegrationTaskOK describes a response with status code 200, with default header values.

OK
*/
type RunIntegrationTaskOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesIntegrationTaskTestConnectionResponse
}

// IsSuccess returns true when this run integration task o k response has a 2xx status code
func (o *RunIntegrationTaskOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this run integration task o k response has a 3xx status code
func (o *RunIntegrationTaskOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run integration task o k response has a 4xx status code
func (o *RunIntegrationTaskOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this run integration task o k response has a 5xx status code
func (o *RunIntegrationTaskOK) IsServerError() bool {
	return false
}

// IsCode returns true when this run integration task o k response a status code equal to that given
func (o *RunIntegrationTaskOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the run integration task o k response
func (o *RunIntegrationTaskOK) Code() int {
	return 200
}

func (o *RunIntegrationTaskOK) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run][%d] runIntegrationTaskOK  %+v", 200, o.Payload)
}

func (o *RunIntegrationTaskOK) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run][%d] runIntegrationTaskOK  %+v", 200, o.Payload)
}

func (o *RunIntegrationTaskOK) GetPayload() *models.TypesIntegrationTaskTestConnectionResponse {
	return o.Payload
}

func (o *RunIntegrationTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesIntegrationTaskTestConnectionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunIntegrationTaskBadRequest creates a RunIntegrationTaskBadRequest with default headers values
func NewRunIntegrationTaskBadRequest() *RunIntegrationTaskBadRequest {
	return &RunIntegrationTaskBadRequest{}
}

/*
RunIntegrationTaskBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RunIntegrationTaskBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this run integration task bad request response has a 2xx status code
func (o *RunIntegrationTaskBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this run integration task bad request response has a 3xx status code
func (o *RunIntegrationTaskBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run integration task bad request response has a 4xx status code
func (o *RunIntegrationTaskBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this run integration task bad request response has a 5xx status code
func (o *RunIntegrationTaskBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this run integration task bad request response a status code equal to that given
func (o *RunIntegrationTaskBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the run integration task bad request response
func (o *RunIntegrationTaskBadRequest) Code() int {
	return 400
}

func (o *RunIntegrationTaskBadRequest) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run][%d] runIntegrationTaskBadRequest  %+v", 400, o.Payload)
}

func (o *RunIntegrationTaskBadRequest) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run][%d] runIntegrationTaskBadRequest  %+v", 400, o.Payload)
}

func (o *RunIntegrationTaskBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *RunIntegrationTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunIntegrationTaskUnauthorized creates a RunIntegrationTaskUnauthorized with default headers values
func NewRunIntegrationTaskUnauthorized() *RunIntegrationTaskUnauthorized {
	return &RunIntegrationTaskUnauthorized{}
}

/*
RunIntegrationTaskUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RunIntegrationTaskUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this run integration task unauthorized response has a 2xx status code
func (o *RunIntegrationTaskUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this run integration task unauthorized response has a 3xx status code
func (o *RunIntegrationTaskUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run integration task unauthorized response has a 4xx status code
func (o *RunIntegrationTaskUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this run integration task unauthorized response has a 5xx status code
func (o *RunIntegrationTaskUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this run integration task unauthorized response a status code equal to that given
func (o *RunIntegrationTaskUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the run integration task unauthorized response
func (o *RunIntegrationTaskUnauthorized) Code() int {
	return 401
}

func (o *RunIntegrationTaskUnauthorized) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run][%d] runIntegrationTaskUnauthorized  %+v", 401, o.Payload)
}

func (o *RunIntegrationTaskUnauthorized) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run][%d] runIntegrationTaskUnauthorized  %+v", 401, o.Payload)
}

func (o *RunIntegrationTaskUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *RunIntegrationTaskUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunIntegrationTaskForbidden creates a RunIntegrationTaskForbidden with default headers values
func NewRunIntegrationTaskForbidden() *RunIntegrationTaskForbidden {
	return &RunIntegrationTaskForbidden{}
}

/*
RunIntegrationTaskForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RunIntegrationTaskForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this run integration task forbidden response has a 2xx status code
func (o *RunIntegrationTaskForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this run integration task forbidden response has a 3xx status code
func (o *RunIntegrationTaskForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run integration task forbidden response has a 4xx status code
func (o *RunIntegrationTaskForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this run integration task forbidden response has a 5xx status code
func (o *RunIntegrationTaskForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this run integration task forbidden response a status code equal to that given
func (o *RunIntegrationTaskForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the run integration task forbidden response
func (o *RunIntegrationTaskForbidden) Code() int {
	return 403
}

func (o *RunIntegrationTaskForbidden) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run][%d] runIntegrationTaskForbidden  %+v", 403, o.Payload)
}

func (o *RunIntegrationTaskForbidden) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run][%d] runIntegrationTaskForbidden  %+v", 403, o.Payload)
}

func (o *RunIntegrationTaskForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *RunIntegrationTaskForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunIntegrationTaskTooManyRequests creates a RunIntegrationTaskTooManyRequests with default headers values
func NewRunIntegrationTaskTooManyRequests() *RunIntegrationTaskTooManyRequests {
	return &RunIntegrationTaskTooManyRequests{}
}

/*
RunIntegrationTaskTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type RunIntegrationTaskTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this run integration task too many requests response has a 2xx status code
func (o *RunIntegrationTaskTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this run integration task too many requests response has a 3xx status code
func (o *RunIntegrationTaskTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run integration task too many requests response has a 4xx status code
func (o *RunIntegrationTaskTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this run integration task too many requests response has a 5xx status code
func (o *RunIntegrationTaskTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this run integration task too many requests response a status code equal to that given
func (o *RunIntegrationTaskTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the run integration task too many requests response
func (o *RunIntegrationTaskTooManyRequests) Code() int {
	return 429
}

func (o *RunIntegrationTaskTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run][%d] runIntegrationTaskTooManyRequests  %+v", 429, o.Payload)
}

func (o *RunIntegrationTaskTooManyRequests) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run][%d] runIntegrationTaskTooManyRequests  %+v", 429, o.Payload)
}

func (o *RunIntegrationTaskTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *RunIntegrationTaskTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunIntegrationTaskInternalServerError creates a RunIntegrationTaskInternalServerError with default headers values
func NewRunIntegrationTaskInternalServerError() *RunIntegrationTaskInternalServerError {
	return &RunIntegrationTaskInternalServerError{}
}

/*
RunIntegrationTaskInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RunIntegrationTaskInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this run integration task internal server error response has a 2xx status code
func (o *RunIntegrationTaskInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this run integration task internal server error response has a 3xx status code
func (o *RunIntegrationTaskInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run integration task internal server error response has a 4xx status code
func (o *RunIntegrationTaskInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this run integration task internal server error response has a 5xx status code
func (o *RunIntegrationTaskInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this run integration task internal server error response a status code equal to that given
func (o *RunIntegrationTaskInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the run integration task internal server error response
func (o *RunIntegrationTaskInternalServerError) Code() int {
	return 500
}

func (o *RunIntegrationTaskInternalServerError) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run][%d] runIntegrationTaskInternalServerError  %+v", 500, o.Payload)
}

func (o *RunIntegrationTaskInternalServerError) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks/{ID}/run][%d] runIntegrationTaskInternalServerError  %+v", 500, o.Payload)
}

func (o *RunIntegrationTaskInternalServerError) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *RunIntegrationTaskInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
