// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetServiceViolationTypesReader is a Reader for the GetServiceViolationTypes structure.
type GetServiceViolationTypesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetServiceViolationTypesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetServiceViolationTypesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetServiceViolationTypesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetServiceViolationTypesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetServiceViolationTypesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetServiceViolationTypesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetServiceViolationTypesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetServiceViolationTypesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /aspm-api-gateway/api/v1/services/violations/types] GetServiceViolationTypes", response, response.Code())
	}
}

// NewGetServiceViolationTypesOK creates a GetServiceViolationTypesOK with default headers values
func NewGetServiceViolationTypesOK() *GetServiceViolationTypesOK {
	return &GetServiceViolationTypesOK{}
}

/*
GetServiceViolationTypesOK describes a response with status code 200, with default header values.

OK
*/
type GetServiceViolationTypesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesGetViolationTypesResponse
}

// IsSuccess returns true when this get service violation types o k response has a 2xx status code
func (o *GetServiceViolationTypesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get service violation types o k response has a 3xx status code
func (o *GetServiceViolationTypesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service violation types o k response has a 4xx status code
func (o *GetServiceViolationTypesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get service violation types o k response has a 5xx status code
func (o *GetServiceViolationTypesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get service violation types o k response a status code equal to that given
func (o *GetServiceViolationTypesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get service violation types o k response
func (o *GetServiceViolationTypesOK) Code() int {
	return 200
}

func (o *GetServiceViolationTypesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/services/violations/types][%d] getServiceViolationTypesOK %s", 200, payload)
}

func (o *GetServiceViolationTypesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/services/violations/types][%d] getServiceViolationTypesOK %s", 200, payload)
}

func (o *GetServiceViolationTypesOK) GetPayload() *models.TypesGetViolationTypesResponse {
	return o.Payload
}

func (o *GetServiceViolationTypesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesGetViolationTypesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceViolationTypesBadRequest creates a GetServiceViolationTypesBadRequest with default headers values
func NewGetServiceViolationTypesBadRequest() *GetServiceViolationTypesBadRequest {
	return &GetServiceViolationTypesBadRequest{}
}

/*
GetServiceViolationTypesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetServiceViolationTypesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get service violation types bad request response has a 2xx status code
func (o *GetServiceViolationTypesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service violation types bad request response has a 3xx status code
func (o *GetServiceViolationTypesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service violation types bad request response has a 4xx status code
func (o *GetServiceViolationTypesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get service violation types bad request response has a 5xx status code
func (o *GetServiceViolationTypesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get service violation types bad request response a status code equal to that given
func (o *GetServiceViolationTypesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get service violation types bad request response
func (o *GetServiceViolationTypesBadRequest) Code() int {
	return 400
}

func (o *GetServiceViolationTypesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/services/violations/types][%d] getServiceViolationTypesBadRequest %s", 400, payload)
}

func (o *GetServiceViolationTypesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/services/violations/types][%d] getServiceViolationTypesBadRequest %s", 400, payload)
}

func (o *GetServiceViolationTypesBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetServiceViolationTypesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceViolationTypesUnauthorized creates a GetServiceViolationTypesUnauthorized with default headers values
func NewGetServiceViolationTypesUnauthorized() *GetServiceViolationTypesUnauthorized {
	return &GetServiceViolationTypesUnauthorized{}
}

/*
GetServiceViolationTypesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetServiceViolationTypesUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get service violation types unauthorized response has a 2xx status code
func (o *GetServiceViolationTypesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service violation types unauthorized response has a 3xx status code
func (o *GetServiceViolationTypesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service violation types unauthorized response has a 4xx status code
func (o *GetServiceViolationTypesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get service violation types unauthorized response has a 5xx status code
func (o *GetServiceViolationTypesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get service violation types unauthorized response a status code equal to that given
func (o *GetServiceViolationTypesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get service violation types unauthorized response
func (o *GetServiceViolationTypesUnauthorized) Code() int {
	return 401
}

func (o *GetServiceViolationTypesUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/services/violations/types][%d] getServiceViolationTypesUnauthorized %s", 401, payload)
}

func (o *GetServiceViolationTypesUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/services/violations/types][%d] getServiceViolationTypesUnauthorized %s", 401, payload)
}

func (o *GetServiceViolationTypesUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetServiceViolationTypesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceViolationTypesForbidden creates a GetServiceViolationTypesForbidden with default headers values
func NewGetServiceViolationTypesForbidden() *GetServiceViolationTypesForbidden {
	return &GetServiceViolationTypesForbidden{}
}

/*
GetServiceViolationTypesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetServiceViolationTypesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get service violation types forbidden response has a 2xx status code
func (o *GetServiceViolationTypesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service violation types forbidden response has a 3xx status code
func (o *GetServiceViolationTypesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service violation types forbidden response has a 4xx status code
func (o *GetServiceViolationTypesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get service violation types forbidden response has a 5xx status code
func (o *GetServiceViolationTypesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get service violation types forbidden response a status code equal to that given
func (o *GetServiceViolationTypesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get service violation types forbidden response
func (o *GetServiceViolationTypesForbidden) Code() int {
	return 403
}

func (o *GetServiceViolationTypesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/services/violations/types][%d] getServiceViolationTypesForbidden %s", 403, payload)
}

func (o *GetServiceViolationTypesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/services/violations/types][%d] getServiceViolationTypesForbidden %s", 403, payload)
}

func (o *GetServiceViolationTypesForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetServiceViolationTypesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceViolationTypesTooManyRequests creates a GetServiceViolationTypesTooManyRequests with default headers values
func NewGetServiceViolationTypesTooManyRequests() *GetServiceViolationTypesTooManyRequests {
	return &GetServiceViolationTypesTooManyRequests{}
}

/*
GetServiceViolationTypesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetServiceViolationTypesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get service violation types too many requests response has a 2xx status code
func (o *GetServiceViolationTypesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service violation types too many requests response has a 3xx status code
func (o *GetServiceViolationTypesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service violation types too many requests response has a 4xx status code
func (o *GetServiceViolationTypesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get service violation types too many requests response has a 5xx status code
func (o *GetServiceViolationTypesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get service violation types too many requests response a status code equal to that given
func (o *GetServiceViolationTypesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get service violation types too many requests response
func (o *GetServiceViolationTypesTooManyRequests) Code() int {
	return 429
}

func (o *GetServiceViolationTypesTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/services/violations/types][%d] getServiceViolationTypesTooManyRequests %s", 429, payload)
}

func (o *GetServiceViolationTypesTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/services/violations/types][%d] getServiceViolationTypesTooManyRequests %s", 429, payload)
}

func (o *GetServiceViolationTypesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetServiceViolationTypesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceViolationTypesInternalServerError creates a GetServiceViolationTypesInternalServerError with default headers values
func NewGetServiceViolationTypesInternalServerError() *GetServiceViolationTypesInternalServerError {
	return &GetServiceViolationTypesInternalServerError{}
}

/*
GetServiceViolationTypesInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type GetServiceViolationTypesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get service violation types internal server error response has a 2xx status code
func (o *GetServiceViolationTypesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service violation types internal server error response has a 3xx status code
func (o *GetServiceViolationTypesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service violation types internal server error response has a 4xx status code
func (o *GetServiceViolationTypesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get service violation types internal server error response has a 5xx status code
func (o *GetServiceViolationTypesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get service violation types internal server error response a status code equal to that given
func (o *GetServiceViolationTypesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get service violation types internal server error response
func (o *GetServiceViolationTypesInternalServerError) Code() int {
	return 500
}

func (o *GetServiceViolationTypesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/services/violations/types][%d] getServiceViolationTypesInternalServerError %s", 500, payload)
}

func (o *GetServiceViolationTypesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/services/violations/types][%d] getServiceViolationTypesInternalServerError %s", 500, payload)
}

func (o *GetServiceViolationTypesInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetServiceViolationTypesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceViolationTypesServiceUnavailable creates a GetServiceViolationTypesServiceUnavailable with default headers values
func NewGetServiceViolationTypesServiceUnavailable() *GetServiceViolationTypesServiceUnavailable {
	return &GetServiceViolationTypesServiceUnavailable{}
}

/*
GetServiceViolationTypesServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable
*/
type GetServiceViolationTypesServiceUnavailable struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get service violation types service unavailable response has a 2xx status code
func (o *GetServiceViolationTypesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service violation types service unavailable response has a 3xx status code
func (o *GetServiceViolationTypesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service violation types service unavailable response has a 4xx status code
func (o *GetServiceViolationTypesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get service violation types service unavailable response has a 5xx status code
func (o *GetServiceViolationTypesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get service violation types service unavailable response a status code equal to that given
func (o *GetServiceViolationTypesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the get service violation types service unavailable response
func (o *GetServiceViolationTypesServiceUnavailable) Code() int {
	return 503
}

func (o *GetServiceViolationTypesServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/services/violations/types][%d] getServiceViolationTypesServiceUnavailable %s", 503, payload)
}

func (o *GetServiceViolationTypesServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/services/violations/types][%d] getServiceViolationTypesServiceUnavailable %s", 503, payload)
}

func (o *GetServiceViolationTypesServiceUnavailable) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetServiceViolationTypesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
