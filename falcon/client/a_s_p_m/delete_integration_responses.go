// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// DeleteIntegrationReader is a Reader for the DeleteIntegration structure.
type DeleteIntegrationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteIntegrationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteIntegrationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteIntegrationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteIntegrationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteIntegrationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteIntegrationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteIntegrationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /aspm-api-gateway/api/v1/integrations/{ID}] DeleteIntegration", response, response.Code())
	}
}

// NewDeleteIntegrationOK creates a DeleteIntegrationOK with default headers values
func NewDeleteIntegrationOK() *DeleteIntegrationOK {
	return &DeleteIntegrationOK{}
}

/*
DeleteIntegrationOK describes a response with status code 200, with default header values.

OK
*/
type DeleteIntegrationOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this delete integration o k response has a 2xx status code
func (o *DeleteIntegrationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete integration o k response has a 3xx status code
func (o *DeleteIntegrationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete integration o k response has a 4xx status code
func (o *DeleteIntegrationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete integration o k response has a 5xx status code
func (o *DeleteIntegrationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete integration o k response a status code equal to that given
func (o *DeleteIntegrationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete integration o k response
func (o *DeleteIntegrationOK) Code() int {
	return 200
}

func (o *DeleteIntegrationOK) Error() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integrations/{ID}][%d] deleteIntegrationOK ", 200)
}

func (o *DeleteIntegrationOK) String() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integrations/{ID}][%d] deleteIntegrationOK ", 200)
}

func (o *DeleteIntegrationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewDeleteIntegrationBadRequest creates a DeleteIntegrationBadRequest with default headers values
func NewDeleteIntegrationBadRequest() *DeleteIntegrationBadRequest {
	return &DeleteIntegrationBadRequest{}
}

/*
DeleteIntegrationBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteIntegrationBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this delete integration bad request response has a 2xx status code
func (o *DeleteIntegrationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete integration bad request response has a 3xx status code
func (o *DeleteIntegrationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete integration bad request response has a 4xx status code
func (o *DeleteIntegrationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete integration bad request response has a 5xx status code
func (o *DeleteIntegrationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete integration bad request response a status code equal to that given
func (o *DeleteIntegrationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete integration bad request response
func (o *DeleteIntegrationBadRequest) Code() int {
	return 400
}

func (o *DeleteIntegrationBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integrations/{ID}][%d] deleteIntegrationBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteIntegrationBadRequest) String() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integrations/{ID}][%d] deleteIntegrationBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteIntegrationBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *DeleteIntegrationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIntegrationUnauthorized creates a DeleteIntegrationUnauthorized with default headers values
func NewDeleteIntegrationUnauthorized() *DeleteIntegrationUnauthorized {
	return &DeleteIntegrationUnauthorized{}
}

/*
DeleteIntegrationUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteIntegrationUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this delete integration unauthorized response has a 2xx status code
func (o *DeleteIntegrationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete integration unauthorized response has a 3xx status code
func (o *DeleteIntegrationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete integration unauthorized response has a 4xx status code
func (o *DeleteIntegrationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete integration unauthorized response has a 5xx status code
func (o *DeleteIntegrationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete integration unauthorized response a status code equal to that given
func (o *DeleteIntegrationUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete integration unauthorized response
func (o *DeleteIntegrationUnauthorized) Code() int {
	return 401
}

func (o *DeleteIntegrationUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integrations/{ID}][%d] deleteIntegrationUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteIntegrationUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integrations/{ID}][%d] deleteIntegrationUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteIntegrationUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *DeleteIntegrationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIntegrationForbidden creates a DeleteIntegrationForbidden with default headers values
func NewDeleteIntegrationForbidden() *DeleteIntegrationForbidden {
	return &DeleteIntegrationForbidden{}
}

/*
DeleteIntegrationForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteIntegrationForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this delete integration forbidden response has a 2xx status code
func (o *DeleteIntegrationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete integration forbidden response has a 3xx status code
func (o *DeleteIntegrationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete integration forbidden response has a 4xx status code
func (o *DeleteIntegrationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete integration forbidden response has a 5xx status code
func (o *DeleteIntegrationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete integration forbidden response a status code equal to that given
func (o *DeleteIntegrationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete integration forbidden response
func (o *DeleteIntegrationForbidden) Code() int {
	return 403
}

func (o *DeleteIntegrationForbidden) Error() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integrations/{ID}][%d] deleteIntegrationForbidden  %+v", 403, o.Payload)
}

func (o *DeleteIntegrationForbidden) String() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integrations/{ID}][%d] deleteIntegrationForbidden  %+v", 403, o.Payload)
}

func (o *DeleteIntegrationForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *DeleteIntegrationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIntegrationTooManyRequests creates a DeleteIntegrationTooManyRequests with default headers values
func NewDeleteIntegrationTooManyRequests() *DeleteIntegrationTooManyRequests {
	return &DeleteIntegrationTooManyRequests{}
}

/*
DeleteIntegrationTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type DeleteIntegrationTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete integration too many requests response has a 2xx status code
func (o *DeleteIntegrationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete integration too many requests response has a 3xx status code
func (o *DeleteIntegrationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete integration too many requests response has a 4xx status code
func (o *DeleteIntegrationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete integration too many requests response has a 5xx status code
func (o *DeleteIntegrationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete integration too many requests response a status code equal to that given
func (o *DeleteIntegrationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete integration too many requests response
func (o *DeleteIntegrationTooManyRequests) Code() int {
	return 429
}

func (o *DeleteIntegrationTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integrations/{ID}][%d] deleteIntegrationTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteIntegrationTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integrations/{ID}][%d] deleteIntegrationTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteIntegrationTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeleteIntegrationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIntegrationInternalServerError creates a DeleteIntegrationInternalServerError with default headers values
func NewDeleteIntegrationInternalServerError() *DeleteIntegrationInternalServerError {
	return &DeleteIntegrationInternalServerError{}
}

/*
DeleteIntegrationInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteIntegrationInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this delete integration internal server error response has a 2xx status code
func (o *DeleteIntegrationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete integration internal server error response has a 3xx status code
func (o *DeleteIntegrationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete integration internal server error response has a 4xx status code
func (o *DeleteIntegrationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete integration internal server error response has a 5xx status code
func (o *DeleteIntegrationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete integration internal server error response a status code equal to that given
func (o *DeleteIntegrationInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete integration internal server error response
func (o *DeleteIntegrationInternalServerError) Code() int {
	return 500
}

func (o *DeleteIntegrationInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integrations/{ID}][%d] deleteIntegrationInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteIntegrationInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/integrations/{ID}][%d] deleteIntegrationInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteIntegrationInternalServerError) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *DeleteIntegrationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
