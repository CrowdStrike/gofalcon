// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExecuteFunctionsCountReader is a Reader for the ExecuteFunctionsCount structure.
type ExecuteFunctionsCountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecuteFunctionsCountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecuteFunctionsCountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExecuteFunctionsCountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExecuteFunctionsCountUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExecuteFunctionsCountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExecuteFunctionsCountTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExecuteFunctionsCountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewExecuteFunctionsCountServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /application-security/aggregates/functions/count/v1] ExecuteFunctionsCount", response, response.Code())
	}
}

// NewExecuteFunctionsCountOK creates a ExecuteFunctionsCountOK with default headers values
func NewExecuteFunctionsCountOK() *ExecuteFunctionsCountOK {
	return &ExecuteFunctionsCountOK{}
}

/*
ExecuteFunctionsCountOK describes a response with status code 200, with default header values.

OK
*/
type ExecuteFunctionsCountOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesCountResponse
}

// IsSuccess returns true when this execute functions count o k response has a 2xx status code
func (o *ExecuteFunctionsCountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this execute functions count o k response has a 3xx status code
func (o *ExecuteFunctionsCountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions count o k response has a 4xx status code
func (o *ExecuteFunctionsCountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute functions count o k response has a 5xx status code
func (o *ExecuteFunctionsCountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions count o k response a status code equal to that given
func (o *ExecuteFunctionsCountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the execute functions count o k response
func (o *ExecuteFunctionsCountOK) Code() int {
	return 200
}

func (o *ExecuteFunctionsCountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/functions/count/v1][%d] executeFunctionsCountOK %s", 200, payload)
}

func (o *ExecuteFunctionsCountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/functions/count/v1][%d] executeFunctionsCountOK %s", 200, payload)
}

func (o *ExecuteFunctionsCountOK) GetPayload() *models.TypesCountResponse {
	return o.Payload
}

func (o *ExecuteFunctionsCountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesCountResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsCountBadRequest creates a ExecuteFunctionsCountBadRequest with default headers values
func NewExecuteFunctionsCountBadRequest() *ExecuteFunctionsCountBadRequest {
	return &ExecuteFunctionsCountBadRequest{}
}

/*
ExecuteFunctionsCountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExecuteFunctionsCountBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions count bad request response has a 2xx status code
func (o *ExecuteFunctionsCountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions count bad request response has a 3xx status code
func (o *ExecuteFunctionsCountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions count bad request response has a 4xx status code
func (o *ExecuteFunctionsCountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions count bad request response has a 5xx status code
func (o *ExecuteFunctionsCountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions count bad request response a status code equal to that given
func (o *ExecuteFunctionsCountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the execute functions count bad request response
func (o *ExecuteFunctionsCountBadRequest) Code() int {
	return 400
}

func (o *ExecuteFunctionsCountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/functions/count/v1][%d] executeFunctionsCountBadRequest %s", 400, payload)
}

func (o *ExecuteFunctionsCountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/functions/count/v1][%d] executeFunctionsCountBadRequest %s", 400, payload)
}

func (o *ExecuteFunctionsCountBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsCountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsCountUnauthorized creates a ExecuteFunctionsCountUnauthorized with default headers values
func NewExecuteFunctionsCountUnauthorized() *ExecuteFunctionsCountUnauthorized {
	return &ExecuteFunctionsCountUnauthorized{}
}

/*
ExecuteFunctionsCountUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExecuteFunctionsCountUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions count unauthorized response has a 2xx status code
func (o *ExecuteFunctionsCountUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions count unauthorized response has a 3xx status code
func (o *ExecuteFunctionsCountUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions count unauthorized response has a 4xx status code
func (o *ExecuteFunctionsCountUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions count unauthorized response has a 5xx status code
func (o *ExecuteFunctionsCountUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions count unauthorized response a status code equal to that given
func (o *ExecuteFunctionsCountUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the execute functions count unauthorized response
func (o *ExecuteFunctionsCountUnauthorized) Code() int {
	return 401
}

func (o *ExecuteFunctionsCountUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/functions/count/v1][%d] executeFunctionsCountUnauthorized %s", 401, payload)
}

func (o *ExecuteFunctionsCountUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/functions/count/v1][%d] executeFunctionsCountUnauthorized %s", 401, payload)
}

func (o *ExecuteFunctionsCountUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsCountUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsCountForbidden creates a ExecuteFunctionsCountForbidden with default headers values
func NewExecuteFunctionsCountForbidden() *ExecuteFunctionsCountForbidden {
	return &ExecuteFunctionsCountForbidden{}
}

/*
ExecuteFunctionsCountForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExecuteFunctionsCountForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions count forbidden response has a 2xx status code
func (o *ExecuteFunctionsCountForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions count forbidden response has a 3xx status code
func (o *ExecuteFunctionsCountForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions count forbidden response has a 4xx status code
func (o *ExecuteFunctionsCountForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions count forbidden response has a 5xx status code
func (o *ExecuteFunctionsCountForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions count forbidden response a status code equal to that given
func (o *ExecuteFunctionsCountForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the execute functions count forbidden response
func (o *ExecuteFunctionsCountForbidden) Code() int {
	return 403
}

func (o *ExecuteFunctionsCountForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/functions/count/v1][%d] executeFunctionsCountForbidden %s", 403, payload)
}

func (o *ExecuteFunctionsCountForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/functions/count/v1][%d] executeFunctionsCountForbidden %s", 403, payload)
}

func (o *ExecuteFunctionsCountForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsCountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsCountTooManyRequests creates a ExecuteFunctionsCountTooManyRequests with default headers values
func NewExecuteFunctionsCountTooManyRequests() *ExecuteFunctionsCountTooManyRequests {
	return &ExecuteFunctionsCountTooManyRequests{}
}

/*
ExecuteFunctionsCountTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExecuteFunctionsCountTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute functions count too many requests response has a 2xx status code
func (o *ExecuteFunctionsCountTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions count too many requests response has a 3xx status code
func (o *ExecuteFunctionsCountTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions count too many requests response has a 4xx status code
func (o *ExecuteFunctionsCountTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions count too many requests response has a 5xx status code
func (o *ExecuteFunctionsCountTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions count too many requests response a status code equal to that given
func (o *ExecuteFunctionsCountTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the execute functions count too many requests response
func (o *ExecuteFunctionsCountTooManyRequests) Code() int {
	return 429
}

func (o *ExecuteFunctionsCountTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/functions/count/v1][%d] executeFunctionsCountTooManyRequests %s", 429, payload)
}

func (o *ExecuteFunctionsCountTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/functions/count/v1][%d] executeFunctionsCountTooManyRequests %s", 429, payload)
}

func (o *ExecuteFunctionsCountTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteFunctionsCountTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsCountInternalServerError creates a ExecuteFunctionsCountInternalServerError with default headers values
func NewExecuteFunctionsCountInternalServerError() *ExecuteFunctionsCountInternalServerError {
	return &ExecuteFunctionsCountInternalServerError{}
}

/*
ExecuteFunctionsCountInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ExecuteFunctionsCountInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute functions count internal server error response has a 2xx status code
func (o *ExecuteFunctionsCountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions count internal server error response has a 3xx status code
func (o *ExecuteFunctionsCountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions count internal server error response has a 4xx status code
func (o *ExecuteFunctionsCountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute functions count internal server error response has a 5xx status code
func (o *ExecuteFunctionsCountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this execute functions count internal server error response a status code equal to that given
func (o *ExecuteFunctionsCountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the execute functions count internal server error response
func (o *ExecuteFunctionsCountInternalServerError) Code() int {
	return 500
}

func (o *ExecuteFunctionsCountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/functions/count/v1][%d] executeFunctionsCountInternalServerError %s", 500, payload)
}

func (o *ExecuteFunctionsCountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/functions/count/v1][%d] executeFunctionsCountInternalServerError %s", 500, payload)
}

func (o *ExecuteFunctionsCountInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteFunctionsCountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsCountServiceUnavailable creates a ExecuteFunctionsCountServiceUnavailable with default headers values
func NewExecuteFunctionsCountServiceUnavailable() *ExecuteFunctionsCountServiceUnavailable {
	return &ExecuteFunctionsCountServiceUnavailable{}
}

/*
ExecuteFunctionsCountServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable
*/
type ExecuteFunctionsCountServiceUnavailable struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions count service unavailable response has a 2xx status code
func (o *ExecuteFunctionsCountServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions count service unavailable response has a 3xx status code
func (o *ExecuteFunctionsCountServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions count service unavailable response has a 4xx status code
func (o *ExecuteFunctionsCountServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute functions count service unavailable response has a 5xx status code
func (o *ExecuteFunctionsCountServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this execute functions count service unavailable response a status code equal to that given
func (o *ExecuteFunctionsCountServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the execute functions count service unavailable response
func (o *ExecuteFunctionsCountServiceUnavailable) Code() int {
	return 503
}

func (o *ExecuteFunctionsCountServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/functions/count/v1][%d] executeFunctionsCountServiceUnavailable %s", 503, payload)
}

func (o *ExecuteFunctionsCountServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/functions/count/v1][%d] executeFunctionsCountServiceUnavailable %s", 503, payload)
}

func (o *ExecuteFunctionsCountServiceUnavailable) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsCountServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
