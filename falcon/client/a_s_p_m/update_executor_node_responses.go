// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// UpdateExecutorNodeReader is a Reader for the UpdateExecutorNode structure.
type UpdateExecutorNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateExecutorNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateExecutorNodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateExecutorNodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateExecutorNodeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateExecutorNodeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateExecutorNodeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateExecutorNodeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /aspm-api-gateway/api/v1/executor_nodes] UpdateExecutorNode", response, response.Code())
	}
}

// NewUpdateExecutorNodeOK creates a UpdateExecutorNodeOK with default headers values
func NewUpdateExecutorNodeOK() *UpdateExecutorNodeOK {
	return &UpdateExecutorNodeOK{}
}

/*
UpdateExecutorNodeOK describes a response with status code 200, with default header values.

OK
*/
type UpdateExecutorNodeOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesExecutorNode
}

// IsSuccess returns true when this update executor node o k response has a 2xx status code
func (o *UpdateExecutorNodeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update executor node o k response has a 3xx status code
func (o *UpdateExecutorNodeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update executor node o k response has a 4xx status code
func (o *UpdateExecutorNodeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update executor node o k response has a 5xx status code
func (o *UpdateExecutorNodeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update executor node o k response a status code equal to that given
func (o *UpdateExecutorNodeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update executor node o k response
func (o *UpdateExecutorNodeOK) Code() int {
	return 200
}

func (o *UpdateExecutorNodeOK) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/executor_nodes][%d] updateExecutorNodeOK  %+v", 200, o.Payload)
}

func (o *UpdateExecutorNodeOK) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/executor_nodes][%d] updateExecutorNodeOK  %+v", 200, o.Payload)
}

func (o *UpdateExecutorNodeOK) GetPayload() *models.TypesExecutorNode {
	return o.Payload
}

func (o *UpdateExecutorNodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesExecutorNode)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExecutorNodeBadRequest creates a UpdateExecutorNodeBadRequest with default headers values
func NewUpdateExecutorNodeBadRequest() *UpdateExecutorNodeBadRequest {
	return &UpdateExecutorNodeBadRequest{}
}

/*
UpdateExecutorNodeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateExecutorNodeBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this update executor node bad request response has a 2xx status code
func (o *UpdateExecutorNodeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update executor node bad request response has a 3xx status code
func (o *UpdateExecutorNodeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update executor node bad request response has a 4xx status code
func (o *UpdateExecutorNodeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update executor node bad request response has a 5xx status code
func (o *UpdateExecutorNodeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update executor node bad request response a status code equal to that given
func (o *UpdateExecutorNodeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update executor node bad request response
func (o *UpdateExecutorNodeBadRequest) Code() int {
	return 400
}

func (o *UpdateExecutorNodeBadRequest) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/executor_nodes][%d] updateExecutorNodeBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateExecutorNodeBadRequest) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/executor_nodes][%d] updateExecutorNodeBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateExecutorNodeBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *UpdateExecutorNodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExecutorNodeUnauthorized creates a UpdateExecutorNodeUnauthorized with default headers values
func NewUpdateExecutorNodeUnauthorized() *UpdateExecutorNodeUnauthorized {
	return &UpdateExecutorNodeUnauthorized{}
}

/*
UpdateExecutorNodeUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateExecutorNodeUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this update executor node unauthorized response has a 2xx status code
func (o *UpdateExecutorNodeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update executor node unauthorized response has a 3xx status code
func (o *UpdateExecutorNodeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update executor node unauthorized response has a 4xx status code
func (o *UpdateExecutorNodeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update executor node unauthorized response has a 5xx status code
func (o *UpdateExecutorNodeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update executor node unauthorized response a status code equal to that given
func (o *UpdateExecutorNodeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update executor node unauthorized response
func (o *UpdateExecutorNodeUnauthorized) Code() int {
	return 401
}

func (o *UpdateExecutorNodeUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/executor_nodes][%d] updateExecutorNodeUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateExecutorNodeUnauthorized) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/executor_nodes][%d] updateExecutorNodeUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateExecutorNodeUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *UpdateExecutorNodeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExecutorNodeForbidden creates a UpdateExecutorNodeForbidden with default headers values
func NewUpdateExecutorNodeForbidden() *UpdateExecutorNodeForbidden {
	return &UpdateExecutorNodeForbidden{}
}

/*
UpdateExecutorNodeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateExecutorNodeForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this update executor node forbidden response has a 2xx status code
func (o *UpdateExecutorNodeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update executor node forbidden response has a 3xx status code
func (o *UpdateExecutorNodeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update executor node forbidden response has a 4xx status code
func (o *UpdateExecutorNodeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update executor node forbidden response has a 5xx status code
func (o *UpdateExecutorNodeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update executor node forbidden response a status code equal to that given
func (o *UpdateExecutorNodeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update executor node forbidden response
func (o *UpdateExecutorNodeForbidden) Code() int {
	return 403
}

func (o *UpdateExecutorNodeForbidden) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/executor_nodes][%d] updateExecutorNodeForbidden  %+v", 403, o.Payload)
}

func (o *UpdateExecutorNodeForbidden) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/executor_nodes][%d] updateExecutorNodeForbidden  %+v", 403, o.Payload)
}

func (o *UpdateExecutorNodeForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *UpdateExecutorNodeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExecutorNodeTooManyRequests creates a UpdateExecutorNodeTooManyRequests with default headers values
func NewUpdateExecutorNodeTooManyRequests() *UpdateExecutorNodeTooManyRequests {
	return &UpdateExecutorNodeTooManyRequests{}
}

/*
UpdateExecutorNodeTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type UpdateExecutorNodeTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this update executor node too many requests response has a 2xx status code
func (o *UpdateExecutorNodeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update executor node too many requests response has a 3xx status code
func (o *UpdateExecutorNodeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update executor node too many requests response has a 4xx status code
func (o *UpdateExecutorNodeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update executor node too many requests response has a 5xx status code
func (o *UpdateExecutorNodeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update executor node too many requests response a status code equal to that given
func (o *UpdateExecutorNodeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update executor node too many requests response
func (o *UpdateExecutorNodeTooManyRequests) Code() int {
	return 429
}

func (o *UpdateExecutorNodeTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/executor_nodes][%d] updateExecutorNodeTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateExecutorNodeTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/executor_nodes][%d] updateExecutorNodeTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateExecutorNodeTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpdateExecutorNodeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExecutorNodeInternalServerError creates a UpdateExecutorNodeInternalServerError with default headers values
func NewUpdateExecutorNodeInternalServerError() *UpdateExecutorNodeInternalServerError {
	return &UpdateExecutorNodeInternalServerError{}
}

/*
UpdateExecutorNodeInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateExecutorNodeInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this update executor node internal server error response has a 2xx status code
func (o *UpdateExecutorNodeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update executor node internal server error response has a 3xx status code
func (o *UpdateExecutorNodeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update executor node internal server error response has a 4xx status code
func (o *UpdateExecutorNodeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update executor node internal server error response has a 5xx status code
func (o *UpdateExecutorNodeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update executor node internal server error response a status code equal to that given
func (o *UpdateExecutorNodeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update executor node internal server error response
func (o *UpdateExecutorNodeInternalServerError) Code() int {
	return 500
}

func (o *UpdateExecutorNodeInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/executor_nodes][%d] updateExecutorNodeInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateExecutorNodeInternalServerError) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/executor_nodes][%d] updateExecutorNodeInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateExecutorNodeInternalServerError) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *UpdateExecutorNodeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
