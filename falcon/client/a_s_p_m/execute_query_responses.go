// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExecuteQueryReader is a Reader for the ExecuteQuery structure.
type ExecuteQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecuteQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecuteQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExecuteQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExecuteQueryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExecuteQueryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExecuteQueryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExecuteQueryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewExecuteQueryServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /aspm-api-gateway/api/v1/query] ExecuteQuery", response, response.Code())
	}
}

// NewExecuteQueryOK creates a ExecuteQueryOK with default headers values
func NewExecuteQueryOK() *ExecuteQueryOK {
	return &ExecuteQueryOK{}
}

/*
ExecuteQueryOK describes a response with status code 200, with default header values.

OK
*/
type ExecuteQueryOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesQueryResponse
}

// IsSuccess returns true when this execute query o k response has a 2xx status code
func (o *ExecuteQueryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this execute query o k response has a 3xx status code
func (o *ExecuteQueryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute query o k response has a 4xx status code
func (o *ExecuteQueryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute query o k response has a 5xx status code
func (o *ExecuteQueryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this execute query o k response a status code equal to that given
func (o *ExecuteQueryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the execute query o k response
func (o *ExecuteQueryOK) Code() int {
	return 200
}

func (o *ExecuteQueryOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/query][%d] executeQueryOK %s", 200, payload)
}

func (o *ExecuteQueryOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/query][%d] executeQueryOK %s", 200, payload)
}

func (o *ExecuteQueryOK) GetPayload() *models.TypesQueryResponse {
	return o.Payload
}

func (o *ExecuteQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteQueryBadRequest creates a ExecuteQueryBadRequest with default headers values
func NewExecuteQueryBadRequest() *ExecuteQueryBadRequest {
	return &ExecuteQueryBadRequest{}
}

/*
ExecuteQueryBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExecuteQueryBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute query bad request response has a 2xx status code
func (o *ExecuteQueryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute query bad request response has a 3xx status code
func (o *ExecuteQueryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute query bad request response has a 4xx status code
func (o *ExecuteQueryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute query bad request response has a 5xx status code
func (o *ExecuteQueryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this execute query bad request response a status code equal to that given
func (o *ExecuteQueryBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the execute query bad request response
func (o *ExecuteQueryBadRequest) Code() int {
	return 400
}

func (o *ExecuteQueryBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/query][%d] executeQueryBadRequest %s", 400, payload)
}

func (o *ExecuteQueryBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/query][%d] executeQueryBadRequest %s", 400, payload)
}

func (o *ExecuteQueryBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteQueryUnauthorized creates a ExecuteQueryUnauthorized with default headers values
func NewExecuteQueryUnauthorized() *ExecuteQueryUnauthorized {
	return &ExecuteQueryUnauthorized{}
}

/*
ExecuteQueryUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExecuteQueryUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute query unauthorized response has a 2xx status code
func (o *ExecuteQueryUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute query unauthorized response has a 3xx status code
func (o *ExecuteQueryUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute query unauthorized response has a 4xx status code
func (o *ExecuteQueryUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute query unauthorized response has a 5xx status code
func (o *ExecuteQueryUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this execute query unauthorized response a status code equal to that given
func (o *ExecuteQueryUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the execute query unauthorized response
func (o *ExecuteQueryUnauthorized) Code() int {
	return 401
}

func (o *ExecuteQueryUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/query][%d] executeQueryUnauthorized %s", 401, payload)
}

func (o *ExecuteQueryUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/query][%d] executeQueryUnauthorized %s", 401, payload)
}

func (o *ExecuteQueryUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteQueryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteQueryForbidden creates a ExecuteQueryForbidden with default headers values
func NewExecuteQueryForbidden() *ExecuteQueryForbidden {
	return &ExecuteQueryForbidden{}
}

/*
ExecuteQueryForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExecuteQueryForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute query forbidden response has a 2xx status code
func (o *ExecuteQueryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute query forbidden response has a 3xx status code
func (o *ExecuteQueryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute query forbidden response has a 4xx status code
func (o *ExecuteQueryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute query forbidden response has a 5xx status code
func (o *ExecuteQueryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this execute query forbidden response a status code equal to that given
func (o *ExecuteQueryForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the execute query forbidden response
func (o *ExecuteQueryForbidden) Code() int {
	return 403
}

func (o *ExecuteQueryForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/query][%d] executeQueryForbidden %s", 403, payload)
}

func (o *ExecuteQueryForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/query][%d] executeQueryForbidden %s", 403, payload)
}

func (o *ExecuteQueryForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteQueryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteQueryTooManyRequests creates a ExecuteQueryTooManyRequests with default headers values
func NewExecuteQueryTooManyRequests() *ExecuteQueryTooManyRequests {
	return &ExecuteQueryTooManyRequests{}
}

/*
ExecuteQueryTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExecuteQueryTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute query too many requests response has a 2xx status code
func (o *ExecuteQueryTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute query too many requests response has a 3xx status code
func (o *ExecuteQueryTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute query too many requests response has a 4xx status code
func (o *ExecuteQueryTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute query too many requests response has a 5xx status code
func (o *ExecuteQueryTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this execute query too many requests response a status code equal to that given
func (o *ExecuteQueryTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the execute query too many requests response
func (o *ExecuteQueryTooManyRequests) Code() int {
	return 429
}

func (o *ExecuteQueryTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/query][%d] executeQueryTooManyRequests %s", 429, payload)
}

func (o *ExecuteQueryTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/query][%d] executeQueryTooManyRequests %s", 429, payload)
}

func (o *ExecuteQueryTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteQueryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteQueryInternalServerError creates a ExecuteQueryInternalServerError with default headers values
func NewExecuteQueryInternalServerError() *ExecuteQueryInternalServerError {
	return &ExecuteQueryInternalServerError{}
}

/*
ExecuteQueryInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ExecuteQueryInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute query internal server error response has a 2xx status code
func (o *ExecuteQueryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute query internal server error response has a 3xx status code
func (o *ExecuteQueryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute query internal server error response has a 4xx status code
func (o *ExecuteQueryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute query internal server error response has a 5xx status code
func (o *ExecuteQueryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this execute query internal server error response a status code equal to that given
func (o *ExecuteQueryInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the execute query internal server error response
func (o *ExecuteQueryInternalServerError) Code() int {
	return 500
}

func (o *ExecuteQueryInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/query][%d] executeQueryInternalServerError %s", 500, payload)
}

func (o *ExecuteQueryInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/query][%d] executeQueryInternalServerError %s", 500, payload)
}

func (o *ExecuteQueryInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteQueryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteQueryServiceUnavailable creates a ExecuteQueryServiceUnavailable with default headers values
func NewExecuteQueryServiceUnavailable() *ExecuteQueryServiceUnavailable {
	return &ExecuteQueryServiceUnavailable{}
}

/*
ExecuteQueryServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable
*/
type ExecuteQueryServiceUnavailable struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute query service unavailable response has a 2xx status code
func (o *ExecuteQueryServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute query service unavailable response has a 3xx status code
func (o *ExecuteQueryServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute query service unavailable response has a 4xx status code
func (o *ExecuteQueryServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute query service unavailable response has a 5xx status code
func (o *ExecuteQueryServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this execute query service unavailable response a status code equal to that given
func (o *ExecuteQueryServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the execute query service unavailable response
func (o *ExecuteQueryServiceUnavailable) Code() int {
	return 503
}

func (o *ExecuteQueryServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/query][%d] executeQueryServiceUnavailable %s", 503, payload)
}

func (o *ExecuteQueryServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/query][%d] executeQueryServiceUnavailable %s", 503, payload)
}

func (o *ExecuteQueryServiceUnavailable) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteQueryServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
