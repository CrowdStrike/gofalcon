// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// UpdateIntegrationTaskReader is a Reader for the UpdateIntegrationTask structure.
type UpdateIntegrationTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateIntegrationTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateIntegrationTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateIntegrationTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateIntegrationTaskUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateIntegrationTaskForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateIntegrationTaskTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateIntegrationTaskInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /aspm-api-gateway/api/v1/integration_tasks/{ID}] UpdateIntegrationTask", response, response.Code())
	}
}

// NewUpdateIntegrationTaskOK creates a UpdateIntegrationTaskOK with default headers values
func NewUpdateIntegrationTaskOK() *UpdateIntegrationTaskOK {
	return &UpdateIntegrationTaskOK{}
}

/*
UpdateIntegrationTaskOK describes a response with status code 200, with default header values.

OK
*/
type UpdateIntegrationTaskOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesIntegrationTaskResponse
}

// IsSuccess returns true when this update integration task o k response has a 2xx status code
func (o *UpdateIntegrationTaskOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update integration task o k response has a 3xx status code
func (o *UpdateIntegrationTaskOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update integration task o k response has a 4xx status code
func (o *UpdateIntegrationTaskOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update integration task o k response has a 5xx status code
func (o *UpdateIntegrationTaskOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update integration task o k response a status code equal to that given
func (o *UpdateIntegrationTaskOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update integration task o k response
func (o *UpdateIntegrationTaskOK) Code() int {
	return 200
}

func (o *UpdateIntegrationTaskOK) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] updateIntegrationTaskOK  %+v", 200, o.Payload)
}

func (o *UpdateIntegrationTaskOK) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] updateIntegrationTaskOK  %+v", 200, o.Payload)
}

func (o *UpdateIntegrationTaskOK) GetPayload() *models.TypesIntegrationTaskResponse {
	return o.Payload
}

func (o *UpdateIntegrationTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesIntegrationTaskResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIntegrationTaskBadRequest creates a UpdateIntegrationTaskBadRequest with default headers values
func NewUpdateIntegrationTaskBadRequest() *UpdateIntegrationTaskBadRequest {
	return &UpdateIntegrationTaskBadRequest{}
}

/*
UpdateIntegrationTaskBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateIntegrationTaskBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this update integration task bad request response has a 2xx status code
func (o *UpdateIntegrationTaskBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update integration task bad request response has a 3xx status code
func (o *UpdateIntegrationTaskBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update integration task bad request response has a 4xx status code
func (o *UpdateIntegrationTaskBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update integration task bad request response has a 5xx status code
func (o *UpdateIntegrationTaskBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update integration task bad request response a status code equal to that given
func (o *UpdateIntegrationTaskBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update integration task bad request response
func (o *UpdateIntegrationTaskBadRequest) Code() int {
	return 400
}

func (o *UpdateIntegrationTaskBadRequest) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] updateIntegrationTaskBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateIntegrationTaskBadRequest) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] updateIntegrationTaskBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateIntegrationTaskBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *UpdateIntegrationTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIntegrationTaskUnauthorized creates a UpdateIntegrationTaskUnauthorized with default headers values
func NewUpdateIntegrationTaskUnauthorized() *UpdateIntegrationTaskUnauthorized {
	return &UpdateIntegrationTaskUnauthorized{}
}

/*
UpdateIntegrationTaskUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateIntegrationTaskUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this update integration task unauthorized response has a 2xx status code
func (o *UpdateIntegrationTaskUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update integration task unauthorized response has a 3xx status code
func (o *UpdateIntegrationTaskUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update integration task unauthorized response has a 4xx status code
func (o *UpdateIntegrationTaskUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update integration task unauthorized response has a 5xx status code
func (o *UpdateIntegrationTaskUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update integration task unauthorized response a status code equal to that given
func (o *UpdateIntegrationTaskUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update integration task unauthorized response
func (o *UpdateIntegrationTaskUnauthorized) Code() int {
	return 401
}

func (o *UpdateIntegrationTaskUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] updateIntegrationTaskUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateIntegrationTaskUnauthorized) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] updateIntegrationTaskUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateIntegrationTaskUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *UpdateIntegrationTaskUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIntegrationTaskForbidden creates a UpdateIntegrationTaskForbidden with default headers values
func NewUpdateIntegrationTaskForbidden() *UpdateIntegrationTaskForbidden {
	return &UpdateIntegrationTaskForbidden{}
}

/*
UpdateIntegrationTaskForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateIntegrationTaskForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this update integration task forbidden response has a 2xx status code
func (o *UpdateIntegrationTaskForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update integration task forbidden response has a 3xx status code
func (o *UpdateIntegrationTaskForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update integration task forbidden response has a 4xx status code
func (o *UpdateIntegrationTaskForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update integration task forbidden response has a 5xx status code
func (o *UpdateIntegrationTaskForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update integration task forbidden response a status code equal to that given
func (o *UpdateIntegrationTaskForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update integration task forbidden response
func (o *UpdateIntegrationTaskForbidden) Code() int {
	return 403
}

func (o *UpdateIntegrationTaskForbidden) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] updateIntegrationTaskForbidden  %+v", 403, o.Payload)
}

func (o *UpdateIntegrationTaskForbidden) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] updateIntegrationTaskForbidden  %+v", 403, o.Payload)
}

func (o *UpdateIntegrationTaskForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *UpdateIntegrationTaskForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIntegrationTaskTooManyRequests creates a UpdateIntegrationTaskTooManyRequests with default headers values
func NewUpdateIntegrationTaskTooManyRequests() *UpdateIntegrationTaskTooManyRequests {
	return &UpdateIntegrationTaskTooManyRequests{}
}

/*
UpdateIntegrationTaskTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type UpdateIntegrationTaskTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this update integration task too many requests response has a 2xx status code
func (o *UpdateIntegrationTaskTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update integration task too many requests response has a 3xx status code
func (o *UpdateIntegrationTaskTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update integration task too many requests response has a 4xx status code
func (o *UpdateIntegrationTaskTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update integration task too many requests response has a 5xx status code
func (o *UpdateIntegrationTaskTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update integration task too many requests response a status code equal to that given
func (o *UpdateIntegrationTaskTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update integration task too many requests response
func (o *UpdateIntegrationTaskTooManyRequests) Code() int {
	return 429
}

func (o *UpdateIntegrationTaskTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] updateIntegrationTaskTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateIntegrationTaskTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] updateIntegrationTaskTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateIntegrationTaskTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpdateIntegrationTaskTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIntegrationTaskInternalServerError creates a UpdateIntegrationTaskInternalServerError with default headers values
func NewUpdateIntegrationTaskInternalServerError() *UpdateIntegrationTaskInternalServerError {
	return &UpdateIntegrationTaskInternalServerError{}
}

/*
UpdateIntegrationTaskInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateIntegrationTaskInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this update integration task internal server error response has a 2xx status code
func (o *UpdateIntegrationTaskInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update integration task internal server error response has a 3xx status code
func (o *UpdateIntegrationTaskInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update integration task internal server error response has a 4xx status code
func (o *UpdateIntegrationTaskInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update integration task internal server error response has a 5xx status code
func (o *UpdateIntegrationTaskInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update integration task internal server error response a status code equal to that given
func (o *UpdateIntegrationTaskInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update integration task internal server error response
func (o *UpdateIntegrationTaskInternalServerError) Code() int {
	return 500
}

func (o *UpdateIntegrationTaskInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] updateIntegrationTaskInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateIntegrationTaskInternalServerError) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integration_tasks/{ID}][%d] updateIntegrationTaskInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateIntegrationTaskInternalServerError) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *UpdateIntegrationTaskInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
