// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// NewRunIntegrationTaskAdminParams creates a new RunIntegrationTaskAdminParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRunIntegrationTaskAdminParams() *RunIntegrationTaskAdminParams {
	return &RunIntegrationTaskAdminParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRunIntegrationTaskAdminParamsWithTimeout creates a new RunIntegrationTaskAdminParams object
// with the ability to set a timeout on a request.
func NewRunIntegrationTaskAdminParamsWithTimeout(timeout time.Duration) *RunIntegrationTaskAdminParams {
	return &RunIntegrationTaskAdminParams{
		timeout: timeout,
	}
}

// NewRunIntegrationTaskAdminParamsWithContext creates a new RunIntegrationTaskAdminParams object
// with the ability to set a context for a request.
func NewRunIntegrationTaskAdminParamsWithContext(ctx context.Context) *RunIntegrationTaskAdminParams {
	return &RunIntegrationTaskAdminParams{
		Context: ctx,
	}
}

// NewRunIntegrationTaskAdminParamsWithHTTPClient creates a new RunIntegrationTaskAdminParams object
// with the ability to set a custom HTTPClient for a request.
func NewRunIntegrationTaskAdminParamsWithHTTPClient(client *http.Client) *RunIntegrationTaskAdminParams {
	return &RunIntegrationTaskAdminParams{
		HTTPClient: client,
	}
}

/*
RunIntegrationTaskAdminParams contains all the parameters to send to the API endpoint

	for the run integration task admin operation.

	Typically these are written to a http.Request.
*/
type RunIntegrationTaskAdminParams struct {

	// ID.
	ID int64

	// Body.
	Body *models.TypesRunIntegrationTaskRequest

	// Category.
	Category *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the run integration task admin params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RunIntegrationTaskAdminParams) WithDefaults() *RunIntegrationTaskAdminParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the run integration task admin params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RunIntegrationTaskAdminParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the run integration task admin params
func (o *RunIntegrationTaskAdminParams) WithTimeout(timeout time.Duration) *RunIntegrationTaskAdminParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the run integration task admin params
func (o *RunIntegrationTaskAdminParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the run integration task admin params
func (o *RunIntegrationTaskAdminParams) WithContext(ctx context.Context) *RunIntegrationTaskAdminParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the run integration task admin params
func (o *RunIntegrationTaskAdminParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the run integration task admin params
func (o *RunIntegrationTaskAdminParams) WithHTTPClient(client *http.Client) *RunIntegrationTaskAdminParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the run integration task admin params
func (o *RunIntegrationTaskAdminParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the run integration task admin params
func (o *RunIntegrationTaskAdminParams) WithID(id int64) *RunIntegrationTaskAdminParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the run integration task admin params
func (o *RunIntegrationTaskAdminParams) SetID(id int64) {
	o.ID = id
}

// WithBody adds the body to the run integration task admin params
func (o *RunIntegrationTaskAdminParams) WithBody(body *models.TypesRunIntegrationTaskRequest) *RunIntegrationTaskAdminParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the run integration task admin params
func (o *RunIntegrationTaskAdminParams) SetBody(body *models.TypesRunIntegrationTaskRequest) {
	o.Body = body
}

// WithCategory adds the category to the run integration task admin params
func (o *RunIntegrationTaskAdminParams) WithCategory(category *string) *RunIntegrationTaskAdminParams {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the run integration task admin params
func (o *RunIntegrationTaskAdminParams) SetCategory(category *string) {
	o.Category = category
}

// WriteToRequest writes these params to a swagger request
func (o *RunIntegrationTaskAdminParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param ID
	if err := r.SetPathParam("ID", swag.FormatInt64(o.ID)); err != nil {
		return err
	}
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.Category != nil {

		// query param category
		var qrCategory string

		if o.Category != nil {
			qrCategory = *o.Category
		}
		qCategory := qrCategory
		if qCategory != "" {

			if err := r.SetQueryParam("category", qCategory); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
