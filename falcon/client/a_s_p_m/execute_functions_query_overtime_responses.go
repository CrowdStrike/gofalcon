// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExecuteFunctionsQueryOvertimeReader is a Reader for the ExecuteFunctionsQueryOvertime structure.
type ExecuteFunctionsQueryOvertimeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecuteFunctionsQueryOvertimeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecuteFunctionsQueryOvertimeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExecuteFunctionsQueryOvertimeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExecuteFunctionsQueryOvertimeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExecuteFunctionsQueryOvertimeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExecuteFunctionsQueryOvertimeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExecuteFunctionsQueryOvertimeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewExecuteFunctionsQueryOvertimeServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /application-security/combined/query-functions-overtime/v1] ExecuteFunctionsQueryOvertime", response, response.Code())
	}
}

// NewExecuteFunctionsQueryOvertimeOK creates a ExecuteFunctionsQueryOvertimeOK with default headers values
func NewExecuteFunctionsQueryOvertimeOK() *ExecuteFunctionsQueryOvertimeOK {
	return &ExecuteFunctionsQueryOvertimeOK{}
}

/*
ExecuteFunctionsQueryOvertimeOK describes a response with status code 200, with default header values.

OK
*/
type ExecuteFunctionsQueryOvertimeOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesOvertimeResponse
}

// IsSuccess returns true when this execute functions query overtime o k response has a 2xx status code
func (o *ExecuteFunctionsQueryOvertimeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this execute functions query overtime o k response has a 3xx status code
func (o *ExecuteFunctionsQueryOvertimeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions query overtime o k response has a 4xx status code
func (o *ExecuteFunctionsQueryOvertimeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute functions query overtime o k response has a 5xx status code
func (o *ExecuteFunctionsQueryOvertimeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions query overtime o k response a status code equal to that given
func (o *ExecuteFunctionsQueryOvertimeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the execute functions query overtime o k response
func (o *ExecuteFunctionsQueryOvertimeOK) Code() int {
	return 200
}

func (o *ExecuteFunctionsQueryOvertimeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions-overtime/v1][%d] executeFunctionsQueryOvertimeOK %s", 200, payload)
}

func (o *ExecuteFunctionsQueryOvertimeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions-overtime/v1][%d] executeFunctionsQueryOvertimeOK %s", 200, payload)
}

func (o *ExecuteFunctionsQueryOvertimeOK) GetPayload() *models.TypesOvertimeResponse {
	return o.Payload
}

func (o *ExecuteFunctionsQueryOvertimeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesOvertimeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsQueryOvertimeBadRequest creates a ExecuteFunctionsQueryOvertimeBadRequest with default headers values
func NewExecuteFunctionsQueryOvertimeBadRequest() *ExecuteFunctionsQueryOvertimeBadRequest {
	return &ExecuteFunctionsQueryOvertimeBadRequest{}
}

/*
ExecuteFunctionsQueryOvertimeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExecuteFunctionsQueryOvertimeBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions query overtime bad request response has a 2xx status code
func (o *ExecuteFunctionsQueryOvertimeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions query overtime bad request response has a 3xx status code
func (o *ExecuteFunctionsQueryOvertimeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions query overtime bad request response has a 4xx status code
func (o *ExecuteFunctionsQueryOvertimeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions query overtime bad request response has a 5xx status code
func (o *ExecuteFunctionsQueryOvertimeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions query overtime bad request response a status code equal to that given
func (o *ExecuteFunctionsQueryOvertimeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the execute functions query overtime bad request response
func (o *ExecuteFunctionsQueryOvertimeBadRequest) Code() int {
	return 400
}

func (o *ExecuteFunctionsQueryOvertimeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions-overtime/v1][%d] executeFunctionsQueryOvertimeBadRequest %s", 400, payload)
}

func (o *ExecuteFunctionsQueryOvertimeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions-overtime/v1][%d] executeFunctionsQueryOvertimeBadRequest %s", 400, payload)
}

func (o *ExecuteFunctionsQueryOvertimeBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsQueryOvertimeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsQueryOvertimeUnauthorized creates a ExecuteFunctionsQueryOvertimeUnauthorized with default headers values
func NewExecuteFunctionsQueryOvertimeUnauthorized() *ExecuteFunctionsQueryOvertimeUnauthorized {
	return &ExecuteFunctionsQueryOvertimeUnauthorized{}
}

/*
ExecuteFunctionsQueryOvertimeUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExecuteFunctionsQueryOvertimeUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions query overtime unauthorized response has a 2xx status code
func (o *ExecuteFunctionsQueryOvertimeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions query overtime unauthorized response has a 3xx status code
func (o *ExecuteFunctionsQueryOvertimeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions query overtime unauthorized response has a 4xx status code
func (o *ExecuteFunctionsQueryOvertimeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions query overtime unauthorized response has a 5xx status code
func (o *ExecuteFunctionsQueryOvertimeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions query overtime unauthorized response a status code equal to that given
func (o *ExecuteFunctionsQueryOvertimeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the execute functions query overtime unauthorized response
func (o *ExecuteFunctionsQueryOvertimeUnauthorized) Code() int {
	return 401
}

func (o *ExecuteFunctionsQueryOvertimeUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions-overtime/v1][%d] executeFunctionsQueryOvertimeUnauthorized %s", 401, payload)
}

func (o *ExecuteFunctionsQueryOvertimeUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions-overtime/v1][%d] executeFunctionsQueryOvertimeUnauthorized %s", 401, payload)
}

func (o *ExecuteFunctionsQueryOvertimeUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsQueryOvertimeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsQueryOvertimeForbidden creates a ExecuteFunctionsQueryOvertimeForbidden with default headers values
func NewExecuteFunctionsQueryOvertimeForbidden() *ExecuteFunctionsQueryOvertimeForbidden {
	return &ExecuteFunctionsQueryOvertimeForbidden{}
}

/*
ExecuteFunctionsQueryOvertimeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExecuteFunctionsQueryOvertimeForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions query overtime forbidden response has a 2xx status code
func (o *ExecuteFunctionsQueryOvertimeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions query overtime forbidden response has a 3xx status code
func (o *ExecuteFunctionsQueryOvertimeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions query overtime forbidden response has a 4xx status code
func (o *ExecuteFunctionsQueryOvertimeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions query overtime forbidden response has a 5xx status code
func (o *ExecuteFunctionsQueryOvertimeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions query overtime forbidden response a status code equal to that given
func (o *ExecuteFunctionsQueryOvertimeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the execute functions query overtime forbidden response
func (o *ExecuteFunctionsQueryOvertimeForbidden) Code() int {
	return 403
}

func (o *ExecuteFunctionsQueryOvertimeForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions-overtime/v1][%d] executeFunctionsQueryOvertimeForbidden %s", 403, payload)
}

func (o *ExecuteFunctionsQueryOvertimeForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions-overtime/v1][%d] executeFunctionsQueryOvertimeForbidden %s", 403, payload)
}

func (o *ExecuteFunctionsQueryOvertimeForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsQueryOvertimeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsQueryOvertimeTooManyRequests creates a ExecuteFunctionsQueryOvertimeTooManyRequests with default headers values
func NewExecuteFunctionsQueryOvertimeTooManyRequests() *ExecuteFunctionsQueryOvertimeTooManyRequests {
	return &ExecuteFunctionsQueryOvertimeTooManyRequests{}
}

/*
ExecuteFunctionsQueryOvertimeTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExecuteFunctionsQueryOvertimeTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute functions query overtime too many requests response has a 2xx status code
func (o *ExecuteFunctionsQueryOvertimeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions query overtime too many requests response has a 3xx status code
func (o *ExecuteFunctionsQueryOvertimeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions query overtime too many requests response has a 4xx status code
func (o *ExecuteFunctionsQueryOvertimeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions query overtime too many requests response has a 5xx status code
func (o *ExecuteFunctionsQueryOvertimeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions query overtime too many requests response a status code equal to that given
func (o *ExecuteFunctionsQueryOvertimeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the execute functions query overtime too many requests response
func (o *ExecuteFunctionsQueryOvertimeTooManyRequests) Code() int {
	return 429
}

func (o *ExecuteFunctionsQueryOvertimeTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions-overtime/v1][%d] executeFunctionsQueryOvertimeTooManyRequests %s", 429, payload)
}

func (o *ExecuteFunctionsQueryOvertimeTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions-overtime/v1][%d] executeFunctionsQueryOvertimeTooManyRequests %s", 429, payload)
}

func (o *ExecuteFunctionsQueryOvertimeTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteFunctionsQueryOvertimeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsQueryOvertimeInternalServerError creates a ExecuteFunctionsQueryOvertimeInternalServerError with default headers values
func NewExecuteFunctionsQueryOvertimeInternalServerError() *ExecuteFunctionsQueryOvertimeInternalServerError {
	return &ExecuteFunctionsQueryOvertimeInternalServerError{}
}

/*
ExecuteFunctionsQueryOvertimeInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ExecuteFunctionsQueryOvertimeInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute functions query overtime internal server error response has a 2xx status code
func (o *ExecuteFunctionsQueryOvertimeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions query overtime internal server error response has a 3xx status code
func (o *ExecuteFunctionsQueryOvertimeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions query overtime internal server error response has a 4xx status code
func (o *ExecuteFunctionsQueryOvertimeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute functions query overtime internal server error response has a 5xx status code
func (o *ExecuteFunctionsQueryOvertimeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this execute functions query overtime internal server error response a status code equal to that given
func (o *ExecuteFunctionsQueryOvertimeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the execute functions query overtime internal server error response
func (o *ExecuteFunctionsQueryOvertimeInternalServerError) Code() int {
	return 500
}

func (o *ExecuteFunctionsQueryOvertimeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions-overtime/v1][%d] executeFunctionsQueryOvertimeInternalServerError %s", 500, payload)
}

func (o *ExecuteFunctionsQueryOvertimeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions-overtime/v1][%d] executeFunctionsQueryOvertimeInternalServerError %s", 500, payload)
}

func (o *ExecuteFunctionsQueryOvertimeInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteFunctionsQueryOvertimeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsQueryOvertimeServiceUnavailable creates a ExecuteFunctionsQueryOvertimeServiceUnavailable with default headers values
func NewExecuteFunctionsQueryOvertimeServiceUnavailable() *ExecuteFunctionsQueryOvertimeServiceUnavailable {
	return &ExecuteFunctionsQueryOvertimeServiceUnavailable{}
}

/*
ExecuteFunctionsQueryOvertimeServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable
*/
type ExecuteFunctionsQueryOvertimeServiceUnavailable struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions query overtime service unavailable response has a 2xx status code
func (o *ExecuteFunctionsQueryOvertimeServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions query overtime service unavailable response has a 3xx status code
func (o *ExecuteFunctionsQueryOvertimeServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions query overtime service unavailable response has a 4xx status code
func (o *ExecuteFunctionsQueryOvertimeServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute functions query overtime service unavailable response has a 5xx status code
func (o *ExecuteFunctionsQueryOvertimeServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this execute functions query overtime service unavailable response a status code equal to that given
func (o *ExecuteFunctionsQueryOvertimeServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the execute functions query overtime service unavailable response
func (o *ExecuteFunctionsQueryOvertimeServiceUnavailable) Code() int {
	return 503
}

func (o *ExecuteFunctionsQueryOvertimeServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions-overtime/v1][%d] executeFunctionsQueryOvertimeServiceUnavailable %s", 503, payload)
}

func (o *ExecuteFunctionsQueryOvertimeServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions-overtime/v1][%d] executeFunctionsQueryOvertimeServiceUnavailable %s", 503, payload)
}

func (o *ExecuteFunctionsQueryOvertimeServiceUnavailable) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsQueryOvertimeServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
