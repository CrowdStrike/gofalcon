// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// UpdateIntegrationReader is a Reader for the UpdateIntegration structure.
type UpdateIntegrationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateIntegrationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateIntegrationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateIntegrationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateIntegrationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateIntegrationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateIntegrationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateIntegrationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /aspm-api-gateway/api/v1/integrations/{ID}] UpdateIntegration", response, response.Code())
	}
}

// NewUpdateIntegrationOK creates a UpdateIntegrationOK with default headers values
func NewUpdateIntegrationOK() *UpdateIntegrationOK {
	return &UpdateIntegrationOK{}
}

/*
UpdateIntegrationOK describes a response with status code 200, with default header values.

OK
*/
type UpdateIntegrationOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesIntegrationResponse
}

// IsSuccess returns true when this update integration o k response has a 2xx status code
func (o *UpdateIntegrationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update integration o k response has a 3xx status code
func (o *UpdateIntegrationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update integration o k response has a 4xx status code
func (o *UpdateIntegrationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update integration o k response has a 5xx status code
func (o *UpdateIntegrationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update integration o k response a status code equal to that given
func (o *UpdateIntegrationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update integration o k response
func (o *UpdateIntegrationOK) Code() int {
	return 200
}

func (o *UpdateIntegrationOK) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integrations/{ID}][%d] updateIntegrationOK  %+v", 200, o.Payload)
}

func (o *UpdateIntegrationOK) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integrations/{ID}][%d] updateIntegrationOK  %+v", 200, o.Payload)
}

func (o *UpdateIntegrationOK) GetPayload() *models.TypesIntegrationResponse {
	return o.Payload
}

func (o *UpdateIntegrationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesIntegrationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIntegrationBadRequest creates a UpdateIntegrationBadRequest with default headers values
func NewUpdateIntegrationBadRequest() *UpdateIntegrationBadRequest {
	return &UpdateIntegrationBadRequest{}
}

/*
UpdateIntegrationBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateIntegrationBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this update integration bad request response has a 2xx status code
func (o *UpdateIntegrationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update integration bad request response has a 3xx status code
func (o *UpdateIntegrationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update integration bad request response has a 4xx status code
func (o *UpdateIntegrationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update integration bad request response has a 5xx status code
func (o *UpdateIntegrationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update integration bad request response a status code equal to that given
func (o *UpdateIntegrationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update integration bad request response
func (o *UpdateIntegrationBadRequest) Code() int {
	return 400
}

func (o *UpdateIntegrationBadRequest) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integrations/{ID}][%d] updateIntegrationBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateIntegrationBadRequest) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integrations/{ID}][%d] updateIntegrationBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateIntegrationBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *UpdateIntegrationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIntegrationUnauthorized creates a UpdateIntegrationUnauthorized with default headers values
func NewUpdateIntegrationUnauthorized() *UpdateIntegrationUnauthorized {
	return &UpdateIntegrationUnauthorized{}
}

/*
UpdateIntegrationUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateIntegrationUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this update integration unauthorized response has a 2xx status code
func (o *UpdateIntegrationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update integration unauthorized response has a 3xx status code
func (o *UpdateIntegrationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update integration unauthorized response has a 4xx status code
func (o *UpdateIntegrationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update integration unauthorized response has a 5xx status code
func (o *UpdateIntegrationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update integration unauthorized response a status code equal to that given
func (o *UpdateIntegrationUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update integration unauthorized response
func (o *UpdateIntegrationUnauthorized) Code() int {
	return 401
}

func (o *UpdateIntegrationUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integrations/{ID}][%d] updateIntegrationUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateIntegrationUnauthorized) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integrations/{ID}][%d] updateIntegrationUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateIntegrationUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *UpdateIntegrationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIntegrationForbidden creates a UpdateIntegrationForbidden with default headers values
func NewUpdateIntegrationForbidden() *UpdateIntegrationForbidden {
	return &UpdateIntegrationForbidden{}
}

/*
UpdateIntegrationForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateIntegrationForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this update integration forbidden response has a 2xx status code
func (o *UpdateIntegrationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update integration forbidden response has a 3xx status code
func (o *UpdateIntegrationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update integration forbidden response has a 4xx status code
func (o *UpdateIntegrationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update integration forbidden response has a 5xx status code
func (o *UpdateIntegrationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update integration forbidden response a status code equal to that given
func (o *UpdateIntegrationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update integration forbidden response
func (o *UpdateIntegrationForbidden) Code() int {
	return 403
}

func (o *UpdateIntegrationForbidden) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integrations/{ID}][%d] updateIntegrationForbidden  %+v", 403, o.Payload)
}

func (o *UpdateIntegrationForbidden) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integrations/{ID}][%d] updateIntegrationForbidden  %+v", 403, o.Payload)
}

func (o *UpdateIntegrationForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *UpdateIntegrationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIntegrationTooManyRequests creates a UpdateIntegrationTooManyRequests with default headers values
func NewUpdateIntegrationTooManyRequests() *UpdateIntegrationTooManyRequests {
	return &UpdateIntegrationTooManyRequests{}
}

/*
UpdateIntegrationTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type UpdateIntegrationTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this update integration too many requests response has a 2xx status code
func (o *UpdateIntegrationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update integration too many requests response has a 3xx status code
func (o *UpdateIntegrationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update integration too many requests response has a 4xx status code
func (o *UpdateIntegrationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update integration too many requests response has a 5xx status code
func (o *UpdateIntegrationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update integration too many requests response a status code equal to that given
func (o *UpdateIntegrationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update integration too many requests response
func (o *UpdateIntegrationTooManyRequests) Code() int {
	return 429
}

func (o *UpdateIntegrationTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integrations/{ID}][%d] updateIntegrationTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateIntegrationTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integrations/{ID}][%d] updateIntegrationTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateIntegrationTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpdateIntegrationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIntegrationInternalServerError creates a UpdateIntegrationInternalServerError with default headers values
func NewUpdateIntegrationInternalServerError() *UpdateIntegrationInternalServerError {
	return &UpdateIntegrationInternalServerError{}
}

/*
UpdateIntegrationInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateIntegrationInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this update integration internal server error response has a 2xx status code
func (o *UpdateIntegrationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update integration internal server error response has a 3xx status code
func (o *UpdateIntegrationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update integration internal server error response has a 4xx status code
func (o *UpdateIntegrationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update integration internal server error response has a 5xx status code
func (o *UpdateIntegrationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update integration internal server error response a status code equal to that given
func (o *UpdateIntegrationInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update integration internal server error response
func (o *UpdateIntegrationInternalServerError) Code() int {
	return 500
}

func (o *UpdateIntegrationInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integrations/{ID}][%d] updateIntegrationInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateIntegrationInternalServerError) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/integrations/{ID}][%d] updateIntegrationInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateIntegrationInternalServerError) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *UpdateIntegrationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
