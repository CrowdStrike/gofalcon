// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExecuteFunctionDataCountReader is a Reader for the ExecuteFunctionDataCount structure.
type ExecuteFunctionDataCountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecuteFunctionDataCountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecuteFunctionDataCountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExecuteFunctionDataCountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExecuteFunctionDataCountUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExecuteFunctionDataCountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExecuteFunctionDataCountTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExecuteFunctionDataCountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewExecuteFunctionDataCountServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /application-security/aggregates/function-data/count/v1] ExecuteFunctionDataCount", response, response.Code())
	}
}

// NewExecuteFunctionDataCountOK creates a ExecuteFunctionDataCountOK with default headers values
func NewExecuteFunctionDataCountOK() *ExecuteFunctionDataCountOK {
	return &ExecuteFunctionDataCountOK{}
}

/*
ExecuteFunctionDataCountOK describes a response with status code 200, with default header values.

OK
*/
type ExecuteFunctionDataCountOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesCountResponse
}

// IsSuccess returns true when this execute function data count o k response has a 2xx status code
func (o *ExecuteFunctionDataCountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this execute function data count o k response has a 3xx status code
func (o *ExecuteFunctionDataCountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data count o k response has a 4xx status code
func (o *ExecuteFunctionDataCountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute function data count o k response has a 5xx status code
func (o *ExecuteFunctionDataCountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this execute function data count o k response a status code equal to that given
func (o *ExecuteFunctionDataCountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the execute function data count o k response
func (o *ExecuteFunctionDataCountOK) Code() int {
	return 200
}

func (o *ExecuteFunctionDataCountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/function-data/count/v1][%d] executeFunctionDataCountOK %s", 200, payload)
}

func (o *ExecuteFunctionDataCountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/function-data/count/v1][%d] executeFunctionDataCountOK %s", 200, payload)
}

func (o *ExecuteFunctionDataCountOK) GetPayload() *models.TypesCountResponse {
	return o.Payload
}

func (o *ExecuteFunctionDataCountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesCountResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataCountBadRequest creates a ExecuteFunctionDataCountBadRequest with default headers values
func NewExecuteFunctionDataCountBadRequest() *ExecuteFunctionDataCountBadRequest {
	return &ExecuteFunctionDataCountBadRequest{}
}

/*
ExecuteFunctionDataCountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExecuteFunctionDataCountBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute function data count bad request response has a 2xx status code
func (o *ExecuteFunctionDataCountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data count bad request response has a 3xx status code
func (o *ExecuteFunctionDataCountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data count bad request response has a 4xx status code
func (o *ExecuteFunctionDataCountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute function data count bad request response has a 5xx status code
func (o *ExecuteFunctionDataCountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this execute function data count bad request response a status code equal to that given
func (o *ExecuteFunctionDataCountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the execute function data count bad request response
func (o *ExecuteFunctionDataCountBadRequest) Code() int {
	return 400
}

func (o *ExecuteFunctionDataCountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/function-data/count/v1][%d] executeFunctionDataCountBadRequest %s", 400, payload)
}

func (o *ExecuteFunctionDataCountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/function-data/count/v1][%d] executeFunctionDataCountBadRequest %s", 400, payload)
}

func (o *ExecuteFunctionDataCountBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionDataCountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataCountUnauthorized creates a ExecuteFunctionDataCountUnauthorized with default headers values
func NewExecuteFunctionDataCountUnauthorized() *ExecuteFunctionDataCountUnauthorized {
	return &ExecuteFunctionDataCountUnauthorized{}
}

/*
ExecuteFunctionDataCountUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExecuteFunctionDataCountUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute function data count unauthorized response has a 2xx status code
func (o *ExecuteFunctionDataCountUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data count unauthorized response has a 3xx status code
func (o *ExecuteFunctionDataCountUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data count unauthorized response has a 4xx status code
func (o *ExecuteFunctionDataCountUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute function data count unauthorized response has a 5xx status code
func (o *ExecuteFunctionDataCountUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this execute function data count unauthorized response a status code equal to that given
func (o *ExecuteFunctionDataCountUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the execute function data count unauthorized response
func (o *ExecuteFunctionDataCountUnauthorized) Code() int {
	return 401
}

func (o *ExecuteFunctionDataCountUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/function-data/count/v1][%d] executeFunctionDataCountUnauthorized %s", 401, payload)
}

func (o *ExecuteFunctionDataCountUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/function-data/count/v1][%d] executeFunctionDataCountUnauthorized %s", 401, payload)
}

func (o *ExecuteFunctionDataCountUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionDataCountUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataCountForbidden creates a ExecuteFunctionDataCountForbidden with default headers values
func NewExecuteFunctionDataCountForbidden() *ExecuteFunctionDataCountForbidden {
	return &ExecuteFunctionDataCountForbidden{}
}

/*
ExecuteFunctionDataCountForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExecuteFunctionDataCountForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute function data count forbidden response has a 2xx status code
func (o *ExecuteFunctionDataCountForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data count forbidden response has a 3xx status code
func (o *ExecuteFunctionDataCountForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data count forbidden response has a 4xx status code
func (o *ExecuteFunctionDataCountForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute function data count forbidden response has a 5xx status code
func (o *ExecuteFunctionDataCountForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this execute function data count forbidden response a status code equal to that given
func (o *ExecuteFunctionDataCountForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the execute function data count forbidden response
func (o *ExecuteFunctionDataCountForbidden) Code() int {
	return 403
}

func (o *ExecuteFunctionDataCountForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/function-data/count/v1][%d] executeFunctionDataCountForbidden %s", 403, payload)
}

func (o *ExecuteFunctionDataCountForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/function-data/count/v1][%d] executeFunctionDataCountForbidden %s", 403, payload)
}

func (o *ExecuteFunctionDataCountForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionDataCountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataCountTooManyRequests creates a ExecuteFunctionDataCountTooManyRequests with default headers values
func NewExecuteFunctionDataCountTooManyRequests() *ExecuteFunctionDataCountTooManyRequests {
	return &ExecuteFunctionDataCountTooManyRequests{}
}

/*
ExecuteFunctionDataCountTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExecuteFunctionDataCountTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute function data count too many requests response has a 2xx status code
func (o *ExecuteFunctionDataCountTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data count too many requests response has a 3xx status code
func (o *ExecuteFunctionDataCountTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data count too many requests response has a 4xx status code
func (o *ExecuteFunctionDataCountTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute function data count too many requests response has a 5xx status code
func (o *ExecuteFunctionDataCountTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this execute function data count too many requests response a status code equal to that given
func (o *ExecuteFunctionDataCountTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the execute function data count too many requests response
func (o *ExecuteFunctionDataCountTooManyRequests) Code() int {
	return 429
}

func (o *ExecuteFunctionDataCountTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/function-data/count/v1][%d] executeFunctionDataCountTooManyRequests %s", 429, payload)
}

func (o *ExecuteFunctionDataCountTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/function-data/count/v1][%d] executeFunctionDataCountTooManyRequests %s", 429, payload)
}

func (o *ExecuteFunctionDataCountTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteFunctionDataCountTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataCountInternalServerError creates a ExecuteFunctionDataCountInternalServerError with default headers values
func NewExecuteFunctionDataCountInternalServerError() *ExecuteFunctionDataCountInternalServerError {
	return &ExecuteFunctionDataCountInternalServerError{}
}

/*
ExecuteFunctionDataCountInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ExecuteFunctionDataCountInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute function data count internal server error response has a 2xx status code
func (o *ExecuteFunctionDataCountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data count internal server error response has a 3xx status code
func (o *ExecuteFunctionDataCountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data count internal server error response has a 4xx status code
func (o *ExecuteFunctionDataCountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute function data count internal server error response has a 5xx status code
func (o *ExecuteFunctionDataCountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this execute function data count internal server error response a status code equal to that given
func (o *ExecuteFunctionDataCountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the execute function data count internal server error response
func (o *ExecuteFunctionDataCountInternalServerError) Code() int {
	return 500
}

func (o *ExecuteFunctionDataCountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/function-data/count/v1][%d] executeFunctionDataCountInternalServerError %s", 500, payload)
}

func (o *ExecuteFunctionDataCountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/function-data/count/v1][%d] executeFunctionDataCountInternalServerError %s", 500, payload)
}

func (o *ExecuteFunctionDataCountInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteFunctionDataCountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataCountServiceUnavailable creates a ExecuteFunctionDataCountServiceUnavailable with default headers values
func NewExecuteFunctionDataCountServiceUnavailable() *ExecuteFunctionDataCountServiceUnavailable {
	return &ExecuteFunctionDataCountServiceUnavailable{}
}

/*
ExecuteFunctionDataCountServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable
*/
type ExecuteFunctionDataCountServiceUnavailable struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute function data count service unavailable response has a 2xx status code
func (o *ExecuteFunctionDataCountServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data count service unavailable response has a 3xx status code
func (o *ExecuteFunctionDataCountServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data count service unavailable response has a 4xx status code
func (o *ExecuteFunctionDataCountServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute function data count service unavailable response has a 5xx status code
func (o *ExecuteFunctionDataCountServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this execute function data count service unavailable response a status code equal to that given
func (o *ExecuteFunctionDataCountServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the execute function data count service unavailable response
func (o *ExecuteFunctionDataCountServiceUnavailable) Code() int {
	return 503
}

func (o *ExecuteFunctionDataCountServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/function-data/count/v1][%d] executeFunctionDataCountServiceUnavailable %s", 503, payload)
}

func (o *ExecuteFunctionDataCountServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /application-security/aggregates/function-data/count/v1][%d] executeFunctionDataCountServiceUnavailable %s", 503, payload)
}

func (o *ExecuteFunctionDataCountServiceUnavailable) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionDataCountServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
