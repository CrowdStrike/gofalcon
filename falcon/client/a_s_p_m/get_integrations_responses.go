// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetIntegrationsReader is a Reader for the GetIntegrations structure.
type GetIntegrationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIntegrationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIntegrationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetIntegrationsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetIntegrationsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetIntegrationsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetIntegrationsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetIntegrationsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /aspm-api-gateway/api/v1/integrations] GetIntegrations", response, response.Code())
	}
}

// NewGetIntegrationsOK creates a GetIntegrationsOK with default headers values
func NewGetIntegrationsOK() *GetIntegrationsOK {
	return &GetIntegrationsOK{}
}

/*
GetIntegrationsOK describes a response with status code 200, with default header values.

OK
*/
type GetIntegrationsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesListIntegrationsResponse
}

// IsSuccess returns true when this get integrations o k response has a 2xx status code
func (o *GetIntegrationsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get integrations o k response has a 3xx status code
func (o *GetIntegrationsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get integrations o k response has a 4xx status code
func (o *GetIntegrationsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get integrations o k response has a 5xx status code
func (o *GetIntegrationsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get integrations o k response a status code equal to that given
func (o *GetIntegrationsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get integrations o k response
func (o *GetIntegrationsOK) Code() int {
	return 200
}

func (o *GetIntegrationsOK) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integrations][%d] getIntegrationsOK  %+v", 200, o.Payload)
}

func (o *GetIntegrationsOK) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integrations][%d] getIntegrationsOK  %+v", 200, o.Payload)
}

func (o *GetIntegrationsOK) GetPayload() *models.TypesListIntegrationsResponse {
	return o.Payload
}

func (o *GetIntegrationsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesListIntegrationsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntegrationsBadRequest creates a GetIntegrationsBadRequest with default headers values
func NewGetIntegrationsBadRequest() *GetIntegrationsBadRequest {
	return &GetIntegrationsBadRequest{}
}

/*
GetIntegrationsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetIntegrationsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get integrations bad request response has a 2xx status code
func (o *GetIntegrationsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get integrations bad request response has a 3xx status code
func (o *GetIntegrationsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get integrations bad request response has a 4xx status code
func (o *GetIntegrationsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get integrations bad request response has a 5xx status code
func (o *GetIntegrationsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get integrations bad request response a status code equal to that given
func (o *GetIntegrationsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get integrations bad request response
func (o *GetIntegrationsBadRequest) Code() int {
	return 400
}

func (o *GetIntegrationsBadRequest) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integrations][%d] getIntegrationsBadRequest  %+v", 400, o.Payload)
}

func (o *GetIntegrationsBadRequest) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integrations][%d] getIntegrationsBadRequest  %+v", 400, o.Payload)
}

func (o *GetIntegrationsBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetIntegrationsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntegrationsUnauthorized creates a GetIntegrationsUnauthorized with default headers values
func NewGetIntegrationsUnauthorized() *GetIntegrationsUnauthorized {
	return &GetIntegrationsUnauthorized{}
}

/*
GetIntegrationsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetIntegrationsUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get integrations unauthorized response has a 2xx status code
func (o *GetIntegrationsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get integrations unauthorized response has a 3xx status code
func (o *GetIntegrationsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get integrations unauthorized response has a 4xx status code
func (o *GetIntegrationsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get integrations unauthorized response has a 5xx status code
func (o *GetIntegrationsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get integrations unauthorized response a status code equal to that given
func (o *GetIntegrationsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get integrations unauthorized response
func (o *GetIntegrationsUnauthorized) Code() int {
	return 401
}

func (o *GetIntegrationsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integrations][%d] getIntegrationsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetIntegrationsUnauthorized) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integrations][%d] getIntegrationsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetIntegrationsUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetIntegrationsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntegrationsForbidden creates a GetIntegrationsForbidden with default headers values
func NewGetIntegrationsForbidden() *GetIntegrationsForbidden {
	return &GetIntegrationsForbidden{}
}

/*
GetIntegrationsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetIntegrationsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get integrations forbidden response has a 2xx status code
func (o *GetIntegrationsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get integrations forbidden response has a 3xx status code
func (o *GetIntegrationsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get integrations forbidden response has a 4xx status code
func (o *GetIntegrationsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get integrations forbidden response has a 5xx status code
func (o *GetIntegrationsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get integrations forbidden response a status code equal to that given
func (o *GetIntegrationsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get integrations forbidden response
func (o *GetIntegrationsForbidden) Code() int {
	return 403
}

func (o *GetIntegrationsForbidden) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integrations][%d] getIntegrationsForbidden  %+v", 403, o.Payload)
}

func (o *GetIntegrationsForbidden) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integrations][%d] getIntegrationsForbidden  %+v", 403, o.Payload)
}

func (o *GetIntegrationsForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetIntegrationsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntegrationsTooManyRequests creates a GetIntegrationsTooManyRequests with default headers values
func NewGetIntegrationsTooManyRequests() *GetIntegrationsTooManyRequests {
	return &GetIntegrationsTooManyRequests{}
}

/*
GetIntegrationsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetIntegrationsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get integrations too many requests response has a 2xx status code
func (o *GetIntegrationsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get integrations too many requests response has a 3xx status code
func (o *GetIntegrationsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get integrations too many requests response has a 4xx status code
func (o *GetIntegrationsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get integrations too many requests response has a 5xx status code
func (o *GetIntegrationsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get integrations too many requests response a status code equal to that given
func (o *GetIntegrationsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get integrations too many requests response
func (o *GetIntegrationsTooManyRequests) Code() int {
	return 429
}

func (o *GetIntegrationsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integrations][%d] getIntegrationsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetIntegrationsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integrations][%d] getIntegrationsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetIntegrationsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetIntegrationsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntegrationsInternalServerError creates a GetIntegrationsInternalServerError with default headers values
func NewGetIntegrationsInternalServerError() *GetIntegrationsInternalServerError {
	return &GetIntegrationsInternalServerError{}
}

/*
GetIntegrationsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetIntegrationsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get integrations internal server error response has a 2xx status code
func (o *GetIntegrationsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get integrations internal server error response has a 3xx status code
func (o *GetIntegrationsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get integrations internal server error response has a 4xx status code
func (o *GetIntegrationsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get integrations internal server error response has a 5xx status code
func (o *GetIntegrationsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get integrations internal server error response a status code equal to that given
func (o *GetIntegrationsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get integrations internal server error response
func (o *GetIntegrationsInternalServerError) Code() int {
	return 500
}

func (o *GetIntegrationsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integrations][%d] getIntegrationsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetIntegrationsInternalServerError) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integrations][%d] getIntegrationsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetIntegrationsInternalServerError) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetIntegrationsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
