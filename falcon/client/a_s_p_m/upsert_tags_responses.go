// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// UpsertTagsReader is a Reader for the UpsertTags structure.
type UpsertTagsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpsertTagsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpsertTagsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpsertTagsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpsertTagsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpsertTagsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpsertTagsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpsertTagsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpsertTagsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUpsertTagsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /aspm-api-gateway/api/v1/tags] UpsertTags", response, response.Code())
	}
}

// NewUpsertTagsOK creates a UpsertTagsOK with default headers values
func NewUpsertTagsOK() *UpsertTagsOK {
	return &UpsertTagsOK{}
}

/*
UpsertTagsOK describes a response with status code 200, with default header values.

OK
*/
type UpsertTagsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this upsert tags o k response has a 2xx status code
func (o *UpsertTagsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upsert tags o k response has a 3xx status code
func (o *UpsertTagsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert tags o k response has a 4xx status code
func (o *UpsertTagsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this upsert tags o k response has a 5xx status code
func (o *UpsertTagsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert tags o k response a status code equal to that given
func (o *UpsertTagsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the upsert tags o k response
func (o *UpsertTagsOK) Code() int {
	return 200
}

func (o *UpsertTagsOK) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/tags][%d] upsertTagsOK ", 200)
}

func (o *UpsertTagsOK) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/tags][%d] upsertTagsOK ", 200)
}

func (o *UpsertTagsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewUpsertTagsCreated creates a UpsertTagsCreated with default headers values
func NewUpsertTagsCreated() *UpsertTagsCreated {
	return &UpsertTagsCreated{}
}

/*
UpsertTagsCreated describes a response with status code 201, with default header values.

Created
*/
type UpsertTagsCreated struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this upsert tags created response has a 2xx status code
func (o *UpsertTagsCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upsert tags created response has a 3xx status code
func (o *UpsertTagsCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert tags created response has a 4xx status code
func (o *UpsertTagsCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this upsert tags created response has a 5xx status code
func (o *UpsertTagsCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert tags created response a status code equal to that given
func (o *UpsertTagsCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the upsert tags created response
func (o *UpsertTagsCreated) Code() int {
	return 201
}

func (o *UpsertTagsCreated) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/tags][%d] upsertTagsCreated ", 201)
}

func (o *UpsertTagsCreated) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/tags][%d] upsertTagsCreated ", 201)
}

func (o *UpsertTagsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewUpsertTagsBadRequest creates a UpsertTagsBadRequest with default headers values
func NewUpsertTagsBadRequest() *UpsertTagsBadRequest {
	return &UpsertTagsBadRequest{}
}

/*
UpsertTagsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpsertTagsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this upsert tags bad request response has a 2xx status code
func (o *UpsertTagsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert tags bad request response has a 3xx status code
func (o *UpsertTagsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert tags bad request response has a 4xx status code
func (o *UpsertTagsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert tags bad request response has a 5xx status code
func (o *UpsertTagsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert tags bad request response a status code equal to that given
func (o *UpsertTagsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the upsert tags bad request response
func (o *UpsertTagsBadRequest) Code() int {
	return 400
}

func (o *UpsertTagsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/tags][%d] upsertTagsBadRequest  %+v", 400, o.Payload)
}

func (o *UpsertTagsBadRequest) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/tags][%d] upsertTagsBadRequest  %+v", 400, o.Payload)
}

func (o *UpsertTagsBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *UpsertTagsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertTagsUnauthorized creates a UpsertTagsUnauthorized with default headers values
func NewUpsertTagsUnauthorized() *UpsertTagsUnauthorized {
	return &UpsertTagsUnauthorized{}
}

/*
UpsertTagsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpsertTagsUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this upsert tags unauthorized response has a 2xx status code
func (o *UpsertTagsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert tags unauthorized response has a 3xx status code
func (o *UpsertTagsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert tags unauthorized response has a 4xx status code
func (o *UpsertTagsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert tags unauthorized response has a 5xx status code
func (o *UpsertTagsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert tags unauthorized response a status code equal to that given
func (o *UpsertTagsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the upsert tags unauthorized response
func (o *UpsertTagsUnauthorized) Code() int {
	return 401
}

func (o *UpsertTagsUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/tags][%d] upsertTagsUnauthorized  %+v", 401, o.Payload)
}

func (o *UpsertTagsUnauthorized) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/tags][%d] upsertTagsUnauthorized  %+v", 401, o.Payload)
}

func (o *UpsertTagsUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *UpsertTagsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertTagsForbidden creates a UpsertTagsForbidden with default headers values
func NewUpsertTagsForbidden() *UpsertTagsForbidden {
	return &UpsertTagsForbidden{}
}

/*
UpsertTagsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpsertTagsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this upsert tags forbidden response has a 2xx status code
func (o *UpsertTagsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert tags forbidden response has a 3xx status code
func (o *UpsertTagsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert tags forbidden response has a 4xx status code
func (o *UpsertTagsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert tags forbidden response has a 5xx status code
func (o *UpsertTagsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert tags forbidden response a status code equal to that given
func (o *UpsertTagsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the upsert tags forbidden response
func (o *UpsertTagsForbidden) Code() int {
	return 403
}

func (o *UpsertTagsForbidden) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/tags][%d] upsertTagsForbidden  %+v", 403, o.Payload)
}

func (o *UpsertTagsForbidden) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/tags][%d] upsertTagsForbidden  %+v", 403, o.Payload)
}

func (o *UpsertTagsForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *UpsertTagsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertTagsTooManyRequests creates a UpsertTagsTooManyRequests with default headers values
func NewUpsertTagsTooManyRequests() *UpsertTagsTooManyRequests {
	return &UpsertTagsTooManyRequests{}
}

/*
UpsertTagsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type UpsertTagsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this upsert tags too many requests response has a 2xx status code
func (o *UpsertTagsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert tags too many requests response has a 3xx status code
func (o *UpsertTagsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert tags too many requests response has a 4xx status code
func (o *UpsertTagsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert tags too many requests response has a 5xx status code
func (o *UpsertTagsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert tags too many requests response a status code equal to that given
func (o *UpsertTagsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the upsert tags too many requests response
func (o *UpsertTagsTooManyRequests) Code() int {
	return 429
}

func (o *UpsertTagsTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/tags][%d] upsertTagsTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpsertTagsTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/tags][%d] upsertTagsTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpsertTagsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpsertTagsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertTagsInternalServerError creates a UpsertTagsInternalServerError with default headers values
func NewUpsertTagsInternalServerError() *UpsertTagsInternalServerError {
	return &UpsertTagsInternalServerError{}
}

/*
UpsertTagsInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type UpsertTagsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this upsert tags internal server error response has a 2xx status code
func (o *UpsertTagsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert tags internal server error response has a 3xx status code
func (o *UpsertTagsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert tags internal server error response has a 4xx status code
func (o *UpsertTagsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this upsert tags internal server error response has a 5xx status code
func (o *UpsertTagsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this upsert tags internal server error response a status code equal to that given
func (o *UpsertTagsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the upsert tags internal server error response
func (o *UpsertTagsInternalServerError) Code() int {
	return 500
}

func (o *UpsertTagsInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/tags][%d] upsertTagsInternalServerError  %+v", 500, o.Payload)
}

func (o *UpsertTagsInternalServerError) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/tags][%d] upsertTagsInternalServerError  %+v", 500, o.Payload)
}

func (o *UpsertTagsInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpsertTagsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertTagsServiceUnavailable creates a UpsertTagsServiceUnavailable with default headers values
func NewUpsertTagsServiceUnavailable() *UpsertTagsServiceUnavailable {
	return &UpsertTagsServiceUnavailable{}
}

/*
UpsertTagsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable
*/
type UpsertTagsServiceUnavailable struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this upsert tags service unavailable response has a 2xx status code
func (o *UpsertTagsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert tags service unavailable response has a 3xx status code
func (o *UpsertTagsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert tags service unavailable response has a 4xx status code
func (o *UpsertTagsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this upsert tags service unavailable response has a 5xx status code
func (o *UpsertTagsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this upsert tags service unavailable response a status code equal to that given
func (o *UpsertTagsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the upsert tags service unavailable response
func (o *UpsertTagsServiceUnavailable) Code() int {
	return 503
}

func (o *UpsertTagsServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/tags][%d] upsertTagsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpsertTagsServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /aspm-api-gateway/api/v1/tags][%d] upsertTagsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpsertTagsServiceUnavailable) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *UpsertTagsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
