// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExecuteFunctionsReader is a Reader for the ExecuteFunctions structure.
type ExecuteFunctionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecuteFunctionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecuteFunctionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExecuteFunctionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExecuteFunctionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExecuteFunctionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExecuteFunctionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExecuteFunctionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewExecuteFunctionsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /application-security/combined/functions/v1] ExecuteFunctions", response, response.Code())
	}
}

// NewExecuteFunctionsOK creates a ExecuteFunctionsOK with default headers values
func NewExecuteFunctionsOK() *ExecuteFunctionsOK {
	return &ExecuteFunctionsOK{}
}

/*
ExecuteFunctionsOK describes a response with status code 200, with default header values.

OK
*/
type ExecuteFunctionsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesGeneralQueryResponse
}

// IsSuccess returns true when this execute functions o k response has a 2xx status code
func (o *ExecuteFunctionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this execute functions o k response has a 3xx status code
func (o *ExecuteFunctionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions o k response has a 4xx status code
func (o *ExecuteFunctionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute functions o k response has a 5xx status code
func (o *ExecuteFunctionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions o k response a status code equal to that given
func (o *ExecuteFunctionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the execute functions o k response
func (o *ExecuteFunctionsOK) Code() int {
	return 200
}

func (o *ExecuteFunctionsOK) Error() string {
	return fmt.Sprintf("[GET /application-security/combined/functions/v1][%d] executeFunctionsOK  %+v", 200, o.Payload)
}

func (o *ExecuteFunctionsOK) String() string {
	return fmt.Sprintf("[GET /application-security/combined/functions/v1][%d] executeFunctionsOK  %+v", 200, o.Payload)
}

func (o *ExecuteFunctionsOK) GetPayload() *models.TypesGeneralQueryResponse {
	return o.Payload
}

func (o *ExecuteFunctionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesGeneralQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsBadRequest creates a ExecuteFunctionsBadRequest with default headers values
func NewExecuteFunctionsBadRequest() *ExecuteFunctionsBadRequest {
	return &ExecuteFunctionsBadRequest{}
}

/*
ExecuteFunctionsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExecuteFunctionsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions bad request response has a 2xx status code
func (o *ExecuteFunctionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions bad request response has a 3xx status code
func (o *ExecuteFunctionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions bad request response has a 4xx status code
func (o *ExecuteFunctionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions bad request response has a 5xx status code
func (o *ExecuteFunctionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions bad request response a status code equal to that given
func (o *ExecuteFunctionsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the execute functions bad request response
func (o *ExecuteFunctionsBadRequest) Code() int {
	return 400
}

func (o *ExecuteFunctionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /application-security/combined/functions/v1][%d] executeFunctionsBadRequest  %+v", 400, o.Payload)
}

func (o *ExecuteFunctionsBadRequest) String() string {
	return fmt.Sprintf("[GET /application-security/combined/functions/v1][%d] executeFunctionsBadRequest  %+v", 400, o.Payload)
}

func (o *ExecuteFunctionsBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsUnauthorized creates a ExecuteFunctionsUnauthorized with default headers values
func NewExecuteFunctionsUnauthorized() *ExecuteFunctionsUnauthorized {
	return &ExecuteFunctionsUnauthorized{}
}

/*
ExecuteFunctionsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExecuteFunctionsUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions unauthorized response has a 2xx status code
func (o *ExecuteFunctionsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions unauthorized response has a 3xx status code
func (o *ExecuteFunctionsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions unauthorized response has a 4xx status code
func (o *ExecuteFunctionsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions unauthorized response has a 5xx status code
func (o *ExecuteFunctionsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions unauthorized response a status code equal to that given
func (o *ExecuteFunctionsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the execute functions unauthorized response
func (o *ExecuteFunctionsUnauthorized) Code() int {
	return 401
}

func (o *ExecuteFunctionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /application-security/combined/functions/v1][%d] executeFunctionsUnauthorized  %+v", 401, o.Payload)
}

func (o *ExecuteFunctionsUnauthorized) String() string {
	return fmt.Sprintf("[GET /application-security/combined/functions/v1][%d] executeFunctionsUnauthorized  %+v", 401, o.Payload)
}

func (o *ExecuteFunctionsUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsForbidden creates a ExecuteFunctionsForbidden with default headers values
func NewExecuteFunctionsForbidden() *ExecuteFunctionsForbidden {
	return &ExecuteFunctionsForbidden{}
}

/*
ExecuteFunctionsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExecuteFunctionsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions forbidden response has a 2xx status code
func (o *ExecuteFunctionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions forbidden response has a 3xx status code
func (o *ExecuteFunctionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions forbidden response has a 4xx status code
func (o *ExecuteFunctionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions forbidden response has a 5xx status code
func (o *ExecuteFunctionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions forbidden response a status code equal to that given
func (o *ExecuteFunctionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the execute functions forbidden response
func (o *ExecuteFunctionsForbidden) Code() int {
	return 403
}

func (o *ExecuteFunctionsForbidden) Error() string {
	return fmt.Sprintf("[GET /application-security/combined/functions/v1][%d] executeFunctionsForbidden  %+v", 403, o.Payload)
}

func (o *ExecuteFunctionsForbidden) String() string {
	return fmt.Sprintf("[GET /application-security/combined/functions/v1][%d] executeFunctionsForbidden  %+v", 403, o.Payload)
}

func (o *ExecuteFunctionsForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsTooManyRequests creates a ExecuteFunctionsTooManyRequests with default headers values
func NewExecuteFunctionsTooManyRequests() *ExecuteFunctionsTooManyRequests {
	return &ExecuteFunctionsTooManyRequests{}
}

/*
ExecuteFunctionsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExecuteFunctionsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute functions too many requests response has a 2xx status code
func (o *ExecuteFunctionsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions too many requests response has a 3xx status code
func (o *ExecuteFunctionsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions too many requests response has a 4xx status code
func (o *ExecuteFunctionsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions too many requests response has a 5xx status code
func (o *ExecuteFunctionsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions too many requests response a status code equal to that given
func (o *ExecuteFunctionsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the execute functions too many requests response
func (o *ExecuteFunctionsTooManyRequests) Code() int {
	return 429
}

func (o *ExecuteFunctionsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /application-security/combined/functions/v1][%d] executeFunctionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ExecuteFunctionsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /application-security/combined/functions/v1][%d] executeFunctionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ExecuteFunctionsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteFunctionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsInternalServerError creates a ExecuteFunctionsInternalServerError with default headers values
func NewExecuteFunctionsInternalServerError() *ExecuteFunctionsInternalServerError {
	return &ExecuteFunctionsInternalServerError{}
}

/*
ExecuteFunctionsInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ExecuteFunctionsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute functions internal server error response has a 2xx status code
func (o *ExecuteFunctionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions internal server error response has a 3xx status code
func (o *ExecuteFunctionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions internal server error response has a 4xx status code
func (o *ExecuteFunctionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute functions internal server error response has a 5xx status code
func (o *ExecuteFunctionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this execute functions internal server error response a status code equal to that given
func (o *ExecuteFunctionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the execute functions internal server error response
func (o *ExecuteFunctionsInternalServerError) Code() int {
	return 500
}

func (o *ExecuteFunctionsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /application-security/combined/functions/v1][%d] executeFunctionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ExecuteFunctionsInternalServerError) String() string {
	return fmt.Sprintf("[GET /application-security/combined/functions/v1][%d] executeFunctionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ExecuteFunctionsInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteFunctionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsServiceUnavailable creates a ExecuteFunctionsServiceUnavailable with default headers values
func NewExecuteFunctionsServiceUnavailable() *ExecuteFunctionsServiceUnavailable {
	return &ExecuteFunctionsServiceUnavailable{}
}

/*
ExecuteFunctionsServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable
*/
type ExecuteFunctionsServiceUnavailable struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions service unavailable response has a 2xx status code
func (o *ExecuteFunctionsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions service unavailable response has a 3xx status code
func (o *ExecuteFunctionsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions service unavailable response has a 4xx status code
func (o *ExecuteFunctionsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute functions service unavailable response has a 5xx status code
func (o *ExecuteFunctionsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this execute functions service unavailable response a status code equal to that given
func (o *ExecuteFunctionsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the execute functions service unavailable response
func (o *ExecuteFunctionsServiceUnavailable) Code() int {
	return 503
}

func (o *ExecuteFunctionsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /application-security/combined/functions/v1][%d] executeFunctionsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ExecuteFunctionsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /application-security/combined/functions/v1][%d] executeFunctionsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ExecuteFunctionsServiceUnavailable) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
