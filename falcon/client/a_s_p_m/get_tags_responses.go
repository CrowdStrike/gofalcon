// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetTagsReader is a Reader for the GetTags structure.
type GetTagsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTagsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTagsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTagsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetTagsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTagsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetTagsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetTagsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /aspm-api-gateway/api/v1/tags] GetTags", response, response.Code())
	}
}

// NewGetTagsOK creates a GetTagsOK with default headers values
func NewGetTagsOK() *GetTagsOK {
	return &GetTagsOK{}
}

/*
GetTagsOK describes a response with status code 200, with default header values.

OK
*/
type GetTagsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesTagsDataResponse
}

// IsSuccess returns true when this get tags o k response has a 2xx status code
func (o *GetTagsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get tags o k response has a 3xx status code
func (o *GetTagsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tags o k response has a 4xx status code
func (o *GetTagsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get tags o k response has a 5xx status code
func (o *GetTagsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get tags o k response a status code equal to that given
func (o *GetTagsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get tags o k response
func (o *GetTagsOK) Code() int {
	return 200
}

func (o *GetTagsOK) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/tags][%d] getTagsOK  %+v", 200, o.Payload)
}

func (o *GetTagsOK) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/tags][%d] getTagsOK  %+v", 200, o.Payload)
}

func (o *GetTagsOK) GetPayload() *models.TypesTagsDataResponse {
	return o.Payload
}

func (o *GetTagsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesTagsDataResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTagsBadRequest creates a GetTagsBadRequest with default headers values
func NewGetTagsBadRequest() *GetTagsBadRequest {
	return &GetTagsBadRequest{}
}

/*
GetTagsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetTagsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get tags bad request response has a 2xx status code
func (o *GetTagsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tags bad request response has a 3xx status code
func (o *GetTagsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tags bad request response has a 4xx status code
func (o *GetTagsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tags bad request response has a 5xx status code
func (o *GetTagsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get tags bad request response a status code equal to that given
func (o *GetTagsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get tags bad request response
func (o *GetTagsBadRequest) Code() int {
	return 400
}

func (o *GetTagsBadRequest) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/tags][%d] getTagsBadRequest  %+v", 400, o.Payload)
}

func (o *GetTagsBadRequest) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/tags][%d] getTagsBadRequest  %+v", 400, o.Payload)
}

func (o *GetTagsBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetTagsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTagsUnauthorized creates a GetTagsUnauthorized with default headers values
func NewGetTagsUnauthorized() *GetTagsUnauthorized {
	return &GetTagsUnauthorized{}
}

/*
GetTagsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetTagsUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get tags unauthorized response has a 2xx status code
func (o *GetTagsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tags unauthorized response has a 3xx status code
func (o *GetTagsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tags unauthorized response has a 4xx status code
func (o *GetTagsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tags unauthorized response has a 5xx status code
func (o *GetTagsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get tags unauthorized response a status code equal to that given
func (o *GetTagsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get tags unauthorized response
func (o *GetTagsUnauthorized) Code() int {
	return 401
}

func (o *GetTagsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/tags][%d] getTagsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTagsUnauthorized) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/tags][%d] getTagsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTagsUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetTagsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTagsForbidden creates a GetTagsForbidden with default headers values
func NewGetTagsForbidden() *GetTagsForbidden {
	return &GetTagsForbidden{}
}

/*
GetTagsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetTagsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get tags forbidden response has a 2xx status code
func (o *GetTagsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tags forbidden response has a 3xx status code
func (o *GetTagsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tags forbidden response has a 4xx status code
func (o *GetTagsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tags forbidden response has a 5xx status code
func (o *GetTagsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get tags forbidden response a status code equal to that given
func (o *GetTagsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get tags forbidden response
func (o *GetTagsForbidden) Code() int {
	return 403
}

func (o *GetTagsForbidden) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/tags][%d] getTagsForbidden  %+v", 403, o.Payload)
}

func (o *GetTagsForbidden) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/tags][%d] getTagsForbidden  %+v", 403, o.Payload)
}

func (o *GetTagsForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetTagsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTagsTooManyRequests creates a GetTagsTooManyRequests with default headers values
func NewGetTagsTooManyRequests() *GetTagsTooManyRequests {
	return &GetTagsTooManyRequests{}
}

/*
GetTagsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetTagsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get tags too many requests response has a 2xx status code
func (o *GetTagsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tags too many requests response has a 3xx status code
func (o *GetTagsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tags too many requests response has a 4xx status code
func (o *GetTagsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tags too many requests response has a 5xx status code
func (o *GetTagsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get tags too many requests response a status code equal to that given
func (o *GetTagsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get tags too many requests response
func (o *GetTagsTooManyRequests) Code() int {
	return 429
}

func (o *GetTagsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/tags][%d] getTagsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetTagsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/tags][%d] getTagsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetTagsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetTagsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTagsInternalServerError creates a GetTagsInternalServerError with default headers values
func NewGetTagsInternalServerError() *GetTagsInternalServerError {
	return &GetTagsInternalServerError{}
}

/*
GetTagsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetTagsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get tags internal server error response has a 2xx status code
func (o *GetTagsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tags internal server error response has a 3xx status code
func (o *GetTagsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tags internal server error response has a 4xx status code
func (o *GetTagsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get tags internal server error response has a 5xx status code
func (o *GetTagsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get tags internal server error response a status code equal to that given
func (o *GetTagsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get tags internal server error response
func (o *GetTagsInternalServerError) Code() int {
	return 500
}

func (o *GetTagsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/tags][%d] getTagsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTagsInternalServerError) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/tags][%d] getTagsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTagsInternalServerError) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetTagsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
