// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CreateIntegrationTaskReader is a Reader for the CreateIntegrationTask structure.
type CreateIntegrationTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateIntegrationTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateIntegrationTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateIntegrationTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateIntegrationTaskUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateIntegrationTaskForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateIntegrationTaskTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateIntegrationTaskInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /aspm-api-gateway/api/v1/integration_tasks] CreateIntegrationTask", response, response.Code())
	}
}

// NewCreateIntegrationTaskOK creates a CreateIntegrationTaskOK with default headers values
func NewCreateIntegrationTaskOK() *CreateIntegrationTaskOK {
	return &CreateIntegrationTaskOK{}
}

/*
CreateIntegrationTaskOK describes a response with status code 200, with default header values.

OK
*/
type CreateIntegrationTaskOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesIntegrationTaskResponse
}

// IsSuccess returns true when this create integration task o k response has a 2xx status code
func (o *CreateIntegrationTaskOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create integration task o k response has a 3xx status code
func (o *CreateIntegrationTaskOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create integration task o k response has a 4xx status code
func (o *CreateIntegrationTaskOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create integration task o k response has a 5xx status code
func (o *CreateIntegrationTaskOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create integration task o k response a status code equal to that given
func (o *CreateIntegrationTaskOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create integration task o k response
func (o *CreateIntegrationTaskOK) Code() int {
	return 200
}

func (o *CreateIntegrationTaskOK) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks][%d] createIntegrationTaskOK  %+v", 200, o.Payload)
}

func (o *CreateIntegrationTaskOK) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks][%d] createIntegrationTaskOK  %+v", 200, o.Payload)
}

func (o *CreateIntegrationTaskOK) GetPayload() *models.TypesIntegrationTaskResponse {
	return o.Payload
}

func (o *CreateIntegrationTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesIntegrationTaskResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIntegrationTaskBadRequest creates a CreateIntegrationTaskBadRequest with default headers values
func NewCreateIntegrationTaskBadRequest() *CreateIntegrationTaskBadRequest {
	return &CreateIntegrationTaskBadRequest{}
}

/*
CreateIntegrationTaskBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateIntegrationTaskBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this create integration task bad request response has a 2xx status code
func (o *CreateIntegrationTaskBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create integration task bad request response has a 3xx status code
func (o *CreateIntegrationTaskBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create integration task bad request response has a 4xx status code
func (o *CreateIntegrationTaskBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create integration task bad request response has a 5xx status code
func (o *CreateIntegrationTaskBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create integration task bad request response a status code equal to that given
func (o *CreateIntegrationTaskBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create integration task bad request response
func (o *CreateIntegrationTaskBadRequest) Code() int {
	return 400
}

func (o *CreateIntegrationTaskBadRequest) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks][%d] createIntegrationTaskBadRequest  %+v", 400, o.Payload)
}

func (o *CreateIntegrationTaskBadRequest) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks][%d] createIntegrationTaskBadRequest  %+v", 400, o.Payload)
}

func (o *CreateIntegrationTaskBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *CreateIntegrationTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIntegrationTaskUnauthorized creates a CreateIntegrationTaskUnauthorized with default headers values
func NewCreateIntegrationTaskUnauthorized() *CreateIntegrationTaskUnauthorized {
	return &CreateIntegrationTaskUnauthorized{}
}

/*
CreateIntegrationTaskUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreateIntegrationTaskUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this create integration task unauthorized response has a 2xx status code
func (o *CreateIntegrationTaskUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create integration task unauthorized response has a 3xx status code
func (o *CreateIntegrationTaskUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create integration task unauthorized response has a 4xx status code
func (o *CreateIntegrationTaskUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create integration task unauthorized response has a 5xx status code
func (o *CreateIntegrationTaskUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create integration task unauthorized response a status code equal to that given
func (o *CreateIntegrationTaskUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create integration task unauthorized response
func (o *CreateIntegrationTaskUnauthorized) Code() int {
	return 401
}

func (o *CreateIntegrationTaskUnauthorized) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks][%d] createIntegrationTaskUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateIntegrationTaskUnauthorized) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks][%d] createIntegrationTaskUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateIntegrationTaskUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *CreateIntegrationTaskUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIntegrationTaskForbidden creates a CreateIntegrationTaskForbidden with default headers values
func NewCreateIntegrationTaskForbidden() *CreateIntegrationTaskForbidden {
	return &CreateIntegrationTaskForbidden{}
}

/*
CreateIntegrationTaskForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateIntegrationTaskForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this create integration task forbidden response has a 2xx status code
func (o *CreateIntegrationTaskForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create integration task forbidden response has a 3xx status code
func (o *CreateIntegrationTaskForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create integration task forbidden response has a 4xx status code
func (o *CreateIntegrationTaskForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create integration task forbidden response has a 5xx status code
func (o *CreateIntegrationTaskForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create integration task forbidden response a status code equal to that given
func (o *CreateIntegrationTaskForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create integration task forbidden response
func (o *CreateIntegrationTaskForbidden) Code() int {
	return 403
}

func (o *CreateIntegrationTaskForbidden) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks][%d] createIntegrationTaskForbidden  %+v", 403, o.Payload)
}

func (o *CreateIntegrationTaskForbidden) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks][%d] createIntegrationTaskForbidden  %+v", 403, o.Payload)
}

func (o *CreateIntegrationTaskForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *CreateIntegrationTaskForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIntegrationTaskTooManyRequests creates a CreateIntegrationTaskTooManyRequests with default headers values
func NewCreateIntegrationTaskTooManyRequests() *CreateIntegrationTaskTooManyRequests {
	return &CreateIntegrationTaskTooManyRequests{}
}

/*
CreateIntegrationTaskTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CreateIntegrationTaskTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this create integration task too many requests response has a 2xx status code
func (o *CreateIntegrationTaskTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create integration task too many requests response has a 3xx status code
func (o *CreateIntegrationTaskTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create integration task too many requests response has a 4xx status code
func (o *CreateIntegrationTaskTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create integration task too many requests response has a 5xx status code
func (o *CreateIntegrationTaskTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create integration task too many requests response a status code equal to that given
func (o *CreateIntegrationTaskTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create integration task too many requests response
func (o *CreateIntegrationTaskTooManyRequests) Code() int {
	return 429
}

func (o *CreateIntegrationTaskTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks][%d] createIntegrationTaskTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateIntegrationTaskTooManyRequests) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks][%d] createIntegrationTaskTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateIntegrationTaskTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateIntegrationTaskTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIntegrationTaskInternalServerError creates a CreateIntegrationTaskInternalServerError with default headers values
func NewCreateIntegrationTaskInternalServerError() *CreateIntegrationTaskInternalServerError {
	return &CreateIntegrationTaskInternalServerError{}
}

/*
CreateIntegrationTaskInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateIntegrationTaskInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this create integration task internal server error response has a 2xx status code
func (o *CreateIntegrationTaskInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create integration task internal server error response has a 3xx status code
func (o *CreateIntegrationTaskInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create integration task internal server error response has a 4xx status code
func (o *CreateIntegrationTaskInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create integration task internal server error response has a 5xx status code
func (o *CreateIntegrationTaskInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create integration task internal server error response a status code equal to that given
func (o *CreateIntegrationTaskInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create integration task internal server error response
func (o *CreateIntegrationTaskInternalServerError) Code() int {
	return 500
}

func (o *CreateIntegrationTaskInternalServerError) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks][%d] createIntegrationTaskInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateIntegrationTaskInternalServerError) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/integration_tasks][%d] createIntegrationTaskInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateIntegrationTaskInternalServerError) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *CreateIntegrationTaskInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
