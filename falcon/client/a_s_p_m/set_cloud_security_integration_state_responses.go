// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// SetCloudSecurityIntegrationStateReader is a Reader for the SetCloudSecurityIntegrationState structure.
type SetCloudSecurityIntegrationStateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetCloudSecurityIntegrationStateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSetCloudSecurityIntegrationStateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewSetCloudSecurityIntegrationStateNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSetCloudSecurityIntegrationStateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSetCloudSecurityIntegrationStateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSetCloudSecurityIntegrationStateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSetCloudSecurityIntegrationStateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSetCloudSecurityIntegrationStateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /aspm-api-gateway/api/v1/cloud_security_config] SetCloudSecurityIntegrationState", response, response.Code())
	}
}

// NewSetCloudSecurityIntegrationStateOK creates a SetCloudSecurityIntegrationStateOK with default headers values
func NewSetCloudSecurityIntegrationStateOK() *SetCloudSecurityIntegrationStateOK {
	return &SetCloudSecurityIntegrationStateOK{}
}

/*
SetCloudSecurityIntegrationStateOK describes a response with status code 200, with default header values.

OK
*/
type SetCloudSecurityIntegrationStateOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this set cloud security integration state o k response has a 2xx status code
func (o *SetCloudSecurityIntegrationStateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this set cloud security integration state o k response has a 3xx status code
func (o *SetCloudSecurityIntegrationStateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set cloud security integration state o k response has a 4xx status code
func (o *SetCloudSecurityIntegrationStateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this set cloud security integration state o k response has a 5xx status code
func (o *SetCloudSecurityIntegrationStateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this set cloud security integration state o k response a status code equal to that given
func (o *SetCloudSecurityIntegrationStateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the set cloud security integration state o k response
func (o *SetCloudSecurityIntegrationStateOK) Code() int {
	return 200
}

func (o *SetCloudSecurityIntegrationStateOK) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/cloud_security_config][%d] setCloudSecurityIntegrationStateOK ", 200)
}

func (o *SetCloudSecurityIntegrationStateOK) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/cloud_security_config][%d] setCloudSecurityIntegrationStateOK ", 200)
}

func (o *SetCloudSecurityIntegrationStateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewSetCloudSecurityIntegrationStateNoContent creates a SetCloudSecurityIntegrationStateNoContent with default headers values
func NewSetCloudSecurityIntegrationStateNoContent() *SetCloudSecurityIntegrationStateNoContent {
	return &SetCloudSecurityIntegrationStateNoContent{}
}

/*
SetCloudSecurityIntegrationStateNoContent describes a response with status code 204, with default header values.

No Content
*/
type SetCloudSecurityIntegrationStateNoContent struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this set cloud security integration state no content response has a 2xx status code
func (o *SetCloudSecurityIntegrationStateNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this set cloud security integration state no content response has a 3xx status code
func (o *SetCloudSecurityIntegrationStateNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set cloud security integration state no content response has a 4xx status code
func (o *SetCloudSecurityIntegrationStateNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this set cloud security integration state no content response has a 5xx status code
func (o *SetCloudSecurityIntegrationStateNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this set cloud security integration state no content response a status code equal to that given
func (o *SetCloudSecurityIntegrationStateNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the set cloud security integration state no content response
func (o *SetCloudSecurityIntegrationStateNoContent) Code() int {
	return 204
}

func (o *SetCloudSecurityIntegrationStateNoContent) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/cloud_security_config][%d] setCloudSecurityIntegrationStateNoContent ", 204)
}

func (o *SetCloudSecurityIntegrationStateNoContent) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/cloud_security_config][%d] setCloudSecurityIntegrationStateNoContent ", 204)
}

func (o *SetCloudSecurityIntegrationStateNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewSetCloudSecurityIntegrationStateBadRequest creates a SetCloudSecurityIntegrationStateBadRequest with default headers values
func NewSetCloudSecurityIntegrationStateBadRequest() *SetCloudSecurityIntegrationStateBadRequest {
	return &SetCloudSecurityIntegrationStateBadRequest{}
}

/*
SetCloudSecurityIntegrationStateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SetCloudSecurityIntegrationStateBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this set cloud security integration state bad request response has a 2xx status code
func (o *SetCloudSecurityIntegrationStateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set cloud security integration state bad request response has a 3xx status code
func (o *SetCloudSecurityIntegrationStateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set cloud security integration state bad request response has a 4xx status code
func (o *SetCloudSecurityIntegrationStateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this set cloud security integration state bad request response has a 5xx status code
func (o *SetCloudSecurityIntegrationStateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this set cloud security integration state bad request response a status code equal to that given
func (o *SetCloudSecurityIntegrationStateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the set cloud security integration state bad request response
func (o *SetCloudSecurityIntegrationStateBadRequest) Code() int {
	return 400
}

func (o *SetCloudSecurityIntegrationStateBadRequest) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/cloud_security_config][%d] setCloudSecurityIntegrationStateBadRequest  %+v", 400, o.Payload)
}

func (o *SetCloudSecurityIntegrationStateBadRequest) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/cloud_security_config][%d] setCloudSecurityIntegrationStateBadRequest  %+v", 400, o.Payload)
}

func (o *SetCloudSecurityIntegrationStateBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *SetCloudSecurityIntegrationStateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetCloudSecurityIntegrationStateUnauthorized creates a SetCloudSecurityIntegrationStateUnauthorized with default headers values
func NewSetCloudSecurityIntegrationStateUnauthorized() *SetCloudSecurityIntegrationStateUnauthorized {
	return &SetCloudSecurityIntegrationStateUnauthorized{}
}

/*
SetCloudSecurityIntegrationStateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SetCloudSecurityIntegrationStateUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this set cloud security integration state unauthorized response has a 2xx status code
func (o *SetCloudSecurityIntegrationStateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set cloud security integration state unauthorized response has a 3xx status code
func (o *SetCloudSecurityIntegrationStateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set cloud security integration state unauthorized response has a 4xx status code
func (o *SetCloudSecurityIntegrationStateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this set cloud security integration state unauthorized response has a 5xx status code
func (o *SetCloudSecurityIntegrationStateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this set cloud security integration state unauthorized response a status code equal to that given
func (o *SetCloudSecurityIntegrationStateUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the set cloud security integration state unauthorized response
func (o *SetCloudSecurityIntegrationStateUnauthorized) Code() int {
	return 401
}

func (o *SetCloudSecurityIntegrationStateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/cloud_security_config][%d] setCloudSecurityIntegrationStateUnauthorized  %+v", 401, o.Payload)
}

func (o *SetCloudSecurityIntegrationStateUnauthorized) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/cloud_security_config][%d] setCloudSecurityIntegrationStateUnauthorized  %+v", 401, o.Payload)
}

func (o *SetCloudSecurityIntegrationStateUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *SetCloudSecurityIntegrationStateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetCloudSecurityIntegrationStateForbidden creates a SetCloudSecurityIntegrationStateForbidden with default headers values
func NewSetCloudSecurityIntegrationStateForbidden() *SetCloudSecurityIntegrationStateForbidden {
	return &SetCloudSecurityIntegrationStateForbidden{}
}

/*
SetCloudSecurityIntegrationStateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SetCloudSecurityIntegrationStateForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this set cloud security integration state forbidden response has a 2xx status code
func (o *SetCloudSecurityIntegrationStateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set cloud security integration state forbidden response has a 3xx status code
func (o *SetCloudSecurityIntegrationStateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set cloud security integration state forbidden response has a 4xx status code
func (o *SetCloudSecurityIntegrationStateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this set cloud security integration state forbidden response has a 5xx status code
func (o *SetCloudSecurityIntegrationStateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this set cloud security integration state forbidden response a status code equal to that given
func (o *SetCloudSecurityIntegrationStateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the set cloud security integration state forbidden response
func (o *SetCloudSecurityIntegrationStateForbidden) Code() int {
	return 403
}

func (o *SetCloudSecurityIntegrationStateForbidden) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/cloud_security_config][%d] setCloudSecurityIntegrationStateForbidden  %+v", 403, o.Payload)
}

func (o *SetCloudSecurityIntegrationStateForbidden) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/cloud_security_config][%d] setCloudSecurityIntegrationStateForbidden  %+v", 403, o.Payload)
}

func (o *SetCloudSecurityIntegrationStateForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *SetCloudSecurityIntegrationStateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetCloudSecurityIntegrationStateTooManyRequests creates a SetCloudSecurityIntegrationStateTooManyRequests with default headers values
func NewSetCloudSecurityIntegrationStateTooManyRequests() *SetCloudSecurityIntegrationStateTooManyRequests {
	return &SetCloudSecurityIntegrationStateTooManyRequests{}
}

/*
SetCloudSecurityIntegrationStateTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type SetCloudSecurityIntegrationStateTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this set cloud security integration state too many requests response has a 2xx status code
func (o *SetCloudSecurityIntegrationStateTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set cloud security integration state too many requests response has a 3xx status code
func (o *SetCloudSecurityIntegrationStateTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set cloud security integration state too many requests response has a 4xx status code
func (o *SetCloudSecurityIntegrationStateTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this set cloud security integration state too many requests response has a 5xx status code
func (o *SetCloudSecurityIntegrationStateTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this set cloud security integration state too many requests response a status code equal to that given
func (o *SetCloudSecurityIntegrationStateTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the set cloud security integration state too many requests response
func (o *SetCloudSecurityIntegrationStateTooManyRequests) Code() int {
	return 429
}

func (o *SetCloudSecurityIntegrationStateTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/cloud_security_config][%d] setCloudSecurityIntegrationStateTooManyRequests  %+v", 429, o.Payload)
}

func (o *SetCloudSecurityIntegrationStateTooManyRequests) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/cloud_security_config][%d] setCloudSecurityIntegrationStateTooManyRequests  %+v", 429, o.Payload)
}

func (o *SetCloudSecurityIntegrationStateTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *SetCloudSecurityIntegrationStateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetCloudSecurityIntegrationStateInternalServerError creates a SetCloudSecurityIntegrationStateInternalServerError with default headers values
func NewSetCloudSecurityIntegrationStateInternalServerError() *SetCloudSecurityIntegrationStateInternalServerError {
	return &SetCloudSecurityIntegrationStateInternalServerError{}
}

/*
SetCloudSecurityIntegrationStateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type SetCloudSecurityIntegrationStateInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this set cloud security integration state internal server error response has a 2xx status code
func (o *SetCloudSecurityIntegrationStateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set cloud security integration state internal server error response has a 3xx status code
func (o *SetCloudSecurityIntegrationStateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set cloud security integration state internal server error response has a 4xx status code
func (o *SetCloudSecurityIntegrationStateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this set cloud security integration state internal server error response has a 5xx status code
func (o *SetCloudSecurityIntegrationStateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this set cloud security integration state internal server error response a status code equal to that given
func (o *SetCloudSecurityIntegrationStateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the set cloud security integration state internal server error response
func (o *SetCloudSecurityIntegrationStateInternalServerError) Code() int {
	return 500
}

func (o *SetCloudSecurityIntegrationStateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/cloud_security_config][%d] setCloudSecurityIntegrationStateInternalServerError  %+v", 500, o.Payload)
}

func (o *SetCloudSecurityIntegrationStateInternalServerError) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/cloud_security_config][%d] setCloudSecurityIntegrationStateInternalServerError  %+v", 500, o.Payload)
}

func (o *SetCloudSecurityIntegrationStateInternalServerError) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *SetCloudSecurityIntegrationStateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
