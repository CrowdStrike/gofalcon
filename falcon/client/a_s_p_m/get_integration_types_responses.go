// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetIntegrationTypesReader is a Reader for the GetIntegrationTypes structure.
type GetIntegrationTypesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIntegrationTypesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIntegrationTypesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetIntegrationTypesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetIntegrationTypesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetIntegrationTypesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetIntegrationTypesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /aspm-api-gateway/api/v1/integration_types] GetIntegrationTypes", response, response.Code())
	}
}

// NewGetIntegrationTypesOK creates a GetIntegrationTypesOK with default headers values
func NewGetIntegrationTypesOK() *GetIntegrationTypesOK {
	return &GetIntegrationTypesOK{}
}

/*
GetIntegrationTypesOK describes a response with status code 200, with default header values.

OK
*/
type GetIntegrationTypesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesListIntegrationTypesResponse
}

// IsSuccess returns true when this get integration types o k response has a 2xx status code
func (o *GetIntegrationTypesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get integration types o k response has a 3xx status code
func (o *GetIntegrationTypesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get integration types o k response has a 4xx status code
func (o *GetIntegrationTypesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get integration types o k response has a 5xx status code
func (o *GetIntegrationTypesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get integration types o k response a status code equal to that given
func (o *GetIntegrationTypesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get integration types o k response
func (o *GetIntegrationTypesOK) Code() int {
	return 200
}

func (o *GetIntegrationTypesOK) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integration_types][%d] getIntegrationTypesOK  %+v", 200, o.Payload)
}

func (o *GetIntegrationTypesOK) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integration_types][%d] getIntegrationTypesOK  %+v", 200, o.Payload)
}

func (o *GetIntegrationTypesOK) GetPayload() *models.TypesListIntegrationTypesResponse {
	return o.Payload
}

func (o *GetIntegrationTypesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesListIntegrationTypesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntegrationTypesUnauthorized creates a GetIntegrationTypesUnauthorized with default headers values
func NewGetIntegrationTypesUnauthorized() *GetIntegrationTypesUnauthorized {
	return &GetIntegrationTypesUnauthorized{}
}

/*
GetIntegrationTypesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetIntegrationTypesUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get integration types unauthorized response has a 2xx status code
func (o *GetIntegrationTypesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get integration types unauthorized response has a 3xx status code
func (o *GetIntegrationTypesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get integration types unauthorized response has a 4xx status code
func (o *GetIntegrationTypesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get integration types unauthorized response has a 5xx status code
func (o *GetIntegrationTypesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get integration types unauthorized response a status code equal to that given
func (o *GetIntegrationTypesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get integration types unauthorized response
func (o *GetIntegrationTypesUnauthorized) Code() int {
	return 401
}

func (o *GetIntegrationTypesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integration_types][%d] getIntegrationTypesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetIntegrationTypesUnauthorized) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integration_types][%d] getIntegrationTypesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetIntegrationTypesUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetIntegrationTypesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntegrationTypesForbidden creates a GetIntegrationTypesForbidden with default headers values
func NewGetIntegrationTypesForbidden() *GetIntegrationTypesForbidden {
	return &GetIntegrationTypesForbidden{}
}

/*
GetIntegrationTypesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetIntegrationTypesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get integration types forbidden response has a 2xx status code
func (o *GetIntegrationTypesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get integration types forbidden response has a 3xx status code
func (o *GetIntegrationTypesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get integration types forbidden response has a 4xx status code
func (o *GetIntegrationTypesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get integration types forbidden response has a 5xx status code
func (o *GetIntegrationTypesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get integration types forbidden response a status code equal to that given
func (o *GetIntegrationTypesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get integration types forbidden response
func (o *GetIntegrationTypesForbidden) Code() int {
	return 403
}

func (o *GetIntegrationTypesForbidden) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integration_types][%d] getIntegrationTypesForbidden  %+v", 403, o.Payload)
}

func (o *GetIntegrationTypesForbidden) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integration_types][%d] getIntegrationTypesForbidden  %+v", 403, o.Payload)
}

func (o *GetIntegrationTypesForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetIntegrationTypesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntegrationTypesTooManyRequests creates a GetIntegrationTypesTooManyRequests with default headers values
func NewGetIntegrationTypesTooManyRequests() *GetIntegrationTypesTooManyRequests {
	return &GetIntegrationTypesTooManyRequests{}
}

/*
GetIntegrationTypesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetIntegrationTypesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get integration types too many requests response has a 2xx status code
func (o *GetIntegrationTypesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get integration types too many requests response has a 3xx status code
func (o *GetIntegrationTypesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get integration types too many requests response has a 4xx status code
func (o *GetIntegrationTypesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get integration types too many requests response has a 5xx status code
func (o *GetIntegrationTypesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get integration types too many requests response a status code equal to that given
func (o *GetIntegrationTypesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get integration types too many requests response
func (o *GetIntegrationTypesTooManyRequests) Code() int {
	return 429
}

func (o *GetIntegrationTypesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integration_types][%d] getIntegrationTypesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetIntegrationTypesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integration_types][%d] getIntegrationTypesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetIntegrationTypesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetIntegrationTypesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntegrationTypesInternalServerError creates a GetIntegrationTypesInternalServerError with default headers values
func NewGetIntegrationTypesInternalServerError() *GetIntegrationTypesInternalServerError {
	return &GetIntegrationTypesInternalServerError{}
}

/*
GetIntegrationTypesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetIntegrationTypesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get integration types internal server error response has a 2xx status code
func (o *GetIntegrationTypesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get integration types internal server error response has a 3xx status code
func (o *GetIntegrationTypesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get integration types internal server error response has a 4xx status code
func (o *GetIntegrationTypesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get integration types internal server error response has a 5xx status code
func (o *GetIntegrationTypesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get integration types internal server error response a status code equal to that given
func (o *GetIntegrationTypesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get integration types internal server error response
func (o *GetIntegrationTypesInternalServerError) Code() int {
	return 500
}

func (o *GetIntegrationTypesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integration_types][%d] getIntegrationTypesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetIntegrationTypesInternalServerError) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/integration_types][%d] getIntegrationTypesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetIntegrationTypesInternalServerError) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetIntegrationTypesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
