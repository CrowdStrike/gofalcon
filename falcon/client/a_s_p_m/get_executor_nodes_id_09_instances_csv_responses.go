// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetExecutorNodesID09InstancesCsvReader is a Reader for the GetExecutorNodesID09InstancesCsv structure.
type GetExecutorNodesID09InstancesCsvReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetExecutorNodesID09InstancesCsvReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetExecutorNodesId09InstancesCsvOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetExecutorNodesId09InstancesCsvBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetExecutorNodesId09InstancesCsvUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetExecutorNodesId09InstancesCsvForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetExecutorNodesId09InstancesCsvTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetExecutorNodesId09InstancesCsvInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /aspm-api-gateway/api/v1/executor_nodes/{ID}/instances/csv] get_/executor_nodes/{ID:[0-9]+}/instances/csv", response, response.Code())
	}
}

// NewGetExecutorNodesId09InstancesCsvOK creates a GetExecutorNodesId09InstancesCsvOK with default headers values
func NewGetExecutorNodesId09InstancesCsvOK() *GetExecutorNodesId09InstancesCsvOK {
	return &GetExecutorNodesId09InstancesCsvOK{}
}

/*
GetExecutorNodesId09InstancesCsvOK describes a response with status code 200, with default header values.

OK
*/
type GetExecutorNodesId09InstancesCsvOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload string
}

// IsSuccess returns true when this get executor nodes id09 instances csv o k response has a 2xx status code
func (o *GetExecutorNodesId09InstancesCsvOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get executor nodes id09 instances csv o k response has a 3xx status code
func (o *GetExecutorNodesId09InstancesCsvOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get executor nodes id09 instances csv o k response has a 4xx status code
func (o *GetExecutorNodesId09InstancesCsvOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get executor nodes id09 instances csv o k response has a 5xx status code
func (o *GetExecutorNodesId09InstancesCsvOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get executor nodes id09 instances csv o k response a status code equal to that given
func (o *GetExecutorNodesId09InstancesCsvOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get executor nodes id09 instances csv o k response
func (o *GetExecutorNodesId09InstancesCsvOK) Code() int {
	return 200
}

func (o *GetExecutorNodesId09InstancesCsvOK) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes/{ID}/instances/csv][%d] getExecutorNodesId09InstancesCsvOK  %+v", 200, o.Payload)
}

func (o *GetExecutorNodesId09InstancesCsvOK) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes/{ID}/instances/csv][%d] getExecutorNodesId09InstancesCsvOK  %+v", 200, o.Payload)
}

func (o *GetExecutorNodesId09InstancesCsvOK) GetPayload() string {
	return o.Payload
}

func (o *GetExecutorNodesId09InstancesCsvOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExecutorNodesId09InstancesCsvBadRequest creates a GetExecutorNodesId09InstancesCsvBadRequest with default headers values
func NewGetExecutorNodesId09InstancesCsvBadRequest() *GetExecutorNodesId09InstancesCsvBadRequest {
	return &GetExecutorNodesId09InstancesCsvBadRequest{}
}

/*
GetExecutorNodesId09InstancesCsvBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetExecutorNodesId09InstancesCsvBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get executor nodes id09 instances csv bad request response has a 2xx status code
func (o *GetExecutorNodesId09InstancesCsvBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get executor nodes id09 instances csv bad request response has a 3xx status code
func (o *GetExecutorNodesId09InstancesCsvBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get executor nodes id09 instances csv bad request response has a 4xx status code
func (o *GetExecutorNodesId09InstancesCsvBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get executor nodes id09 instances csv bad request response has a 5xx status code
func (o *GetExecutorNodesId09InstancesCsvBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get executor nodes id09 instances csv bad request response a status code equal to that given
func (o *GetExecutorNodesId09InstancesCsvBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get executor nodes id09 instances csv bad request response
func (o *GetExecutorNodesId09InstancesCsvBadRequest) Code() int {
	return 400
}

func (o *GetExecutorNodesId09InstancesCsvBadRequest) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes/{ID}/instances/csv][%d] getExecutorNodesId09InstancesCsvBadRequest  %+v", 400, o.Payload)
}

func (o *GetExecutorNodesId09InstancesCsvBadRequest) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes/{ID}/instances/csv][%d] getExecutorNodesId09InstancesCsvBadRequest  %+v", 400, o.Payload)
}

func (o *GetExecutorNodesId09InstancesCsvBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetExecutorNodesId09InstancesCsvBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExecutorNodesId09InstancesCsvUnauthorized creates a GetExecutorNodesId09InstancesCsvUnauthorized with default headers values
func NewGetExecutorNodesId09InstancesCsvUnauthorized() *GetExecutorNodesId09InstancesCsvUnauthorized {
	return &GetExecutorNodesId09InstancesCsvUnauthorized{}
}

/*
GetExecutorNodesId09InstancesCsvUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetExecutorNodesId09InstancesCsvUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get executor nodes id09 instances csv unauthorized response has a 2xx status code
func (o *GetExecutorNodesId09InstancesCsvUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get executor nodes id09 instances csv unauthorized response has a 3xx status code
func (o *GetExecutorNodesId09InstancesCsvUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get executor nodes id09 instances csv unauthorized response has a 4xx status code
func (o *GetExecutorNodesId09InstancesCsvUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get executor nodes id09 instances csv unauthorized response has a 5xx status code
func (o *GetExecutorNodesId09InstancesCsvUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get executor nodes id09 instances csv unauthorized response a status code equal to that given
func (o *GetExecutorNodesId09InstancesCsvUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get executor nodes id09 instances csv unauthorized response
func (o *GetExecutorNodesId09InstancesCsvUnauthorized) Code() int {
	return 401
}

func (o *GetExecutorNodesId09InstancesCsvUnauthorized) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes/{ID}/instances/csv][%d] getExecutorNodesId09InstancesCsvUnauthorized  %+v", 401, o.Payload)
}

func (o *GetExecutorNodesId09InstancesCsvUnauthorized) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes/{ID}/instances/csv][%d] getExecutorNodesId09InstancesCsvUnauthorized  %+v", 401, o.Payload)
}

func (o *GetExecutorNodesId09InstancesCsvUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetExecutorNodesId09InstancesCsvUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExecutorNodesId09InstancesCsvForbidden creates a GetExecutorNodesId09InstancesCsvForbidden with default headers values
func NewGetExecutorNodesId09InstancesCsvForbidden() *GetExecutorNodesId09InstancesCsvForbidden {
	return &GetExecutorNodesId09InstancesCsvForbidden{}
}

/*
GetExecutorNodesId09InstancesCsvForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetExecutorNodesId09InstancesCsvForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get executor nodes id09 instances csv forbidden response has a 2xx status code
func (o *GetExecutorNodesId09InstancesCsvForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get executor nodes id09 instances csv forbidden response has a 3xx status code
func (o *GetExecutorNodesId09InstancesCsvForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get executor nodes id09 instances csv forbidden response has a 4xx status code
func (o *GetExecutorNodesId09InstancesCsvForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get executor nodes id09 instances csv forbidden response has a 5xx status code
func (o *GetExecutorNodesId09InstancesCsvForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get executor nodes id09 instances csv forbidden response a status code equal to that given
func (o *GetExecutorNodesId09InstancesCsvForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get executor nodes id09 instances csv forbidden response
func (o *GetExecutorNodesId09InstancesCsvForbidden) Code() int {
	return 403
}

func (o *GetExecutorNodesId09InstancesCsvForbidden) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes/{ID}/instances/csv][%d] getExecutorNodesId09InstancesCsvForbidden  %+v", 403, o.Payload)
}

func (o *GetExecutorNodesId09InstancesCsvForbidden) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes/{ID}/instances/csv][%d] getExecutorNodesId09InstancesCsvForbidden  %+v", 403, o.Payload)
}

func (o *GetExecutorNodesId09InstancesCsvForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetExecutorNodesId09InstancesCsvForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExecutorNodesId09InstancesCsvTooManyRequests creates a GetExecutorNodesId09InstancesCsvTooManyRequests with default headers values
func NewGetExecutorNodesId09InstancesCsvTooManyRequests() *GetExecutorNodesId09InstancesCsvTooManyRequests {
	return &GetExecutorNodesId09InstancesCsvTooManyRequests{}
}

/*
GetExecutorNodesId09InstancesCsvTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetExecutorNodesId09InstancesCsvTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get executor nodes id09 instances csv too many requests response has a 2xx status code
func (o *GetExecutorNodesId09InstancesCsvTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get executor nodes id09 instances csv too many requests response has a 3xx status code
func (o *GetExecutorNodesId09InstancesCsvTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get executor nodes id09 instances csv too many requests response has a 4xx status code
func (o *GetExecutorNodesId09InstancesCsvTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get executor nodes id09 instances csv too many requests response has a 5xx status code
func (o *GetExecutorNodesId09InstancesCsvTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get executor nodes id09 instances csv too many requests response a status code equal to that given
func (o *GetExecutorNodesId09InstancesCsvTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get executor nodes id09 instances csv too many requests response
func (o *GetExecutorNodesId09InstancesCsvTooManyRequests) Code() int {
	return 429
}

func (o *GetExecutorNodesId09InstancesCsvTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes/{ID}/instances/csv][%d] getExecutorNodesId09InstancesCsvTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetExecutorNodesId09InstancesCsvTooManyRequests) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes/{ID}/instances/csv][%d] getExecutorNodesId09InstancesCsvTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetExecutorNodesId09InstancesCsvTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetExecutorNodesId09InstancesCsvTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExecutorNodesId09InstancesCsvInternalServerError creates a GetExecutorNodesId09InstancesCsvInternalServerError with default headers values
func NewGetExecutorNodesId09InstancesCsvInternalServerError() *GetExecutorNodesId09InstancesCsvInternalServerError {
	return &GetExecutorNodesId09InstancesCsvInternalServerError{}
}

/*
GetExecutorNodesId09InstancesCsvInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetExecutorNodesId09InstancesCsvInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get executor nodes id09 instances csv internal server error response has a 2xx status code
func (o *GetExecutorNodesId09InstancesCsvInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get executor nodes id09 instances csv internal server error response has a 3xx status code
func (o *GetExecutorNodesId09InstancesCsvInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get executor nodes id09 instances csv internal server error response has a 4xx status code
func (o *GetExecutorNodesId09InstancesCsvInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get executor nodes id09 instances csv internal server error response has a 5xx status code
func (o *GetExecutorNodesId09InstancesCsvInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get executor nodes id09 instances csv internal server error response a status code equal to that given
func (o *GetExecutorNodesId09InstancesCsvInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get executor nodes id09 instances csv internal server error response
func (o *GetExecutorNodesId09InstancesCsvInternalServerError) Code() int {
	return 500
}

func (o *GetExecutorNodesId09InstancesCsvInternalServerError) Error() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes/{ID}/instances/csv][%d] getExecutorNodesId09InstancesCsvInternalServerError  %+v", 500, o.Payload)
}

func (o *GetExecutorNodesId09InstancesCsvInternalServerError) String() string {
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/executor_nodes/{ID}/instances/csv][%d] getExecutorNodesId09InstancesCsvInternalServerError  %+v", 500, o.Payload)
}

func (o *GetExecutorNodesId09InstancesCsvInternalServerError) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetExecutorNodesId09InstancesCsvInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
