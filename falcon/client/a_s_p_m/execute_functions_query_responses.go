// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExecuteFunctionsQueryReader is a Reader for the ExecuteFunctionsQuery structure.
type ExecuteFunctionsQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecuteFunctionsQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecuteFunctionsQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExecuteFunctionsQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExecuteFunctionsQueryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExecuteFunctionsQueryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExecuteFunctionsQueryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExecuteFunctionsQueryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewExecuteFunctionsQueryServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /application-security/combined/query-functions/v1] ExecuteFunctionsQuery", response, response.Code())
	}
}

// NewExecuteFunctionsQueryOK creates a ExecuteFunctionsQueryOK with default headers values
func NewExecuteFunctionsQueryOK() *ExecuteFunctionsQueryOK {
	return &ExecuteFunctionsQueryOK{}
}

/*
ExecuteFunctionsQueryOK describes a response with status code 200, with default header values.

OK
*/
type ExecuteFunctionsQueryOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesGeneralQueryResponse
}

// IsSuccess returns true when this execute functions query o k response has a 2xx status code
func (o *ExecuteFunctionsQueryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this execute functions query o k response has a 3xx status code
func (o *ExecuteFunctionsQueryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions query o k response has a 4xx status code
func (o *ExecuteFunctionsQueryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute functions query o k response has a 5xx status code
func (o *ExecuteFunctionsQueryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions query o k response a status code equal to that given
func (o *ExecuteFunctionsQueryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the execute functions query o k response
func (o *ExecuteFunctionsQueryOK) Code() int {
	return 200
}

func (o *ExecuteFunctionsQueryOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions/v1][%d] executeFunctionsQueryOK %s", 200, payload)
}

func (o *ExecuteFunctionsQueryOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions/v1][%d] executeFunctionsQueryOK %s", 200, payload)
}

func (o *ExecuteFunctionsQueryOK) GetPayload() *models.TypesGeneralQueryResponse {
	return o.Payload
}

func (o *ExecuteFunctionsQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesGeneralQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsQueryBadRequest creates a ExecuteFunctionsQueryBadRequest with default headers values
func NewExecuteFunctionsQueryBadRequest() *ExecuteFunctionsQueryBadRequest {
	return &ExecuteFunctionsQueryBadRequest{}
}

/*
ExecuteFunctionsQueryBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExecuteFunctionsQueryBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions query bad request response has a 2xx status code
func (o *ExecuteFunctionsQueryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions query bad request response has a 3xx status code
func (o *ExecuteFunctionsQueryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions query bad request response has a 4xx status code
func (o *ExecuteFunctionsQueryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions query bad request response has a 5xx status code
func (o *ExecuteFunctionsQueryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions query bad request response a status code equal to that given
func (o *ExecuteFunctionsQueryBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the execute functions query bad request response
func (o *ExecuteFunctionsQueryBadRequest) Code() int {
	return 400
}

func (o *ExecuteFunctionsQueryBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions/v1][%d] executeFunctionsQueryBadRequest %s", 400, payload)
}

func (o *ExecuteFunctionsQueryBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions/v1][%d] executeFunctionsQueryBadRequest %s", 400, payload)
}

func (o *ExecuteFunctionsQueryBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsQueryUnauthorized creates a ExecuteFunctionsQueryUnauthorized with default headers values
func NewExecuteFunctionsQueryUnauthorized() *ExecuteFunctionsQueryUnauthorized {
	return &ExecuteFunctionsQueryUnauthorized{}
}

/*
ExecuteFunctionsQueryUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExecuteFunctionsQueryUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions query unauthorized response has a 2xx status code
func (o *ExecuteFunctionsQueryUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions query unauthorized response has a 3xx status code
func (o *ExecuteFunctionsQueryUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions query unauthorized response has a 4xx status code
func (o *ExecuteFunctionsQueryUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions query unauthorized response has a 5xx status code
func (o *ExecuteFunctionsQueryUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions query unauthorized response a status code equal to that given
func (o *ExecuteFunctionsQueryUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the execute functions query unauthorized response
func (o *ExecuteFunctionsQueryUnauthorized) Code() int {
	return 401
}

func (o *ExecuteFunctionsQueryUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions/v1][%d] executeFunctionsQueryUnauthorized %s", 401, payload)
}

func (o *ExecuteFunctionsQueryUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions/v1][%d] executeFunctionsQueryUnauthorized %s", 401, payload)
}

func (o *ExecuteFunctionsQueryUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsQueryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsQueryForbidden creates a ExecuteFunctionsQueryForbidden with default headers values
func NewExecuteFunctionsQueryForbidden() *ExecuteFunctionsQueryForbidden {
	return &ExecuteFunctionsQueryForbidden{}
}

/*
ExecuteFunctionsQueryForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExecuteFunctionsQueryForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions query forbidden response has a 2xx status code
func (o *ExecuteFunctionsQueryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions query forbidden response has a 3xx status code
func (o *ExecuteFunctionsQueryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions query forbidden response has a 4xx status code
func (o *ExecuteFunctionsQueryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions query forbidden response has a 5xx status code
func (o *ExecuteFunctionsQueryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions query forbidden response a status code equal to that given
func (o *ExecuteFunctionsQueryForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the execute functions query forbidden response
func (o *ExecuteFunctionsQueryForbidden) Code() int {
	return 403
}

func (o *ExecuteFunctionsQueryForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions/v1][%d] executeFunctionsQueryForbidden %s", 403, payload)
}

func (o *ExecuteFunctionsQueryForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions/v1][%d] executeFunctionsQueryForbidden %s", 403, payload)
}

func (o *ExecuteFunctionsQueryForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsQueryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsQueryTooManyRequests creates a ExecuteFunctionsQueryTooManyRequests with default headers values
func NewExecuteFunctionsQueryTooManyRequests() *ExecuteFunctionsQueryTooManyRequests {
	return &ExecuteFunctionsQueryTooManyRequests{}
}

/*
ExecuteFunctionsQueryTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExecuteFunctionsQueryTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute functions query too many requests response has a 2xx status code
func (o *ExecuteFunctionsQueryTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions query too many requests response has a 3xx status code
func (o *ExecuteFunctionsQueryTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions query too many requests response has a 4xx status code
func (o *ExecuteFunctionsQueryTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions query too many requests response has a 5xx status code
func (o *ExecuteFunctionsQueryTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions query too many requests response a status code equal to that given
func (o *ExecuteFunctionsQueryTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the execute functions query too many requests response
func (o *ExecuteFunctionsQueryTooManyRequests) Code() int {
	return 429
}

func (o *ExecuteFunctionsQueryTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions/v1][%d] executeFunctionsQueryTooManyRequests %s", 429, payload)
}

func (o *ExecuteFunctionsQueryTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions/v1][%d] executeFunctionsQueryTooManyRequests %s", 429, payload)
}

func (o *ExecuteFunctionsQueryTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteFunctionsQueryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsQueryInternalServerError creates a ExecuteFunctionsQueryInternalServerError with default headers values
func NewExecuteFunctionsQueryInternalServerError() *ExecuteFunctionsQueryInternalServerError {
	return &ExecuteFunctionsQueryInternalServerError{}
}

/*
ExecuteFunctionsQueryInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ExecuteFunctionsQueryInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute functions query internal server error response has a 2xx status code
func (o *ExecuteFunctionsQueryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions query internal server error response has a 3xx status code
func (o *ExecuteFunctionsQueryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions query internal server error response has a 4xx status code
func (o *ExecuteFunctionsQueryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute functions query internal server error response has a 5xx status code
func (o *ExecuteFunctionsQueryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this execute functions query internal server error response a status code equal to that given
func (o *ExecuteFunctionsQueryInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the execute functions query internal server error response
func (o *ExecuteFunctionsQueryInternalServerError) Code() int {
	return 500
}

func (o *ExecuteFunctionsQueryInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions/v1][%d] executeFunctionsQueryInternalServerError %s", 500, payload)
}

func (o *ExecuteFunctionsQueryInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions/v1][%d] executeFunctionsQueryInternalServerError %s", 500, payload)
}

func (o *ExecuteFunctionsQueryInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteFunctionsQueryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsQueryServiceUnavailable creates a ExecuteFunctionsQueryServiceUnavailable with default headers values
func NewExecuteFunctionsQueryServiceUnavailable() *ExecuteFunctionsQueryServiceUnavailable {
	return &ExecuteFunctionsQueryServiceUnavailable{}
}

/*
ExecuteFunctionsQueryServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable
*/
type ExecuteFunctionsQueryServiceUnavailable struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions query service unavailable response has a 2xx status code
func (o *ExecuteFunctionsQueryServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions query service unavailable response has a 3xx status code
func (o *ExecuteFunctionsQueryServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions query service unavailable response has a 4xx status code
func (o *ExecuteFunctionsQueryServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute functions query service unavailable response has a 5xx status code
func (o *ExecuteFunctionsQueryServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this execute functions query service unavailable response a status code equal to that given
func (o *ExecuteFunctionsQueryServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the execute functions query service unavailable response
func (o *ExecuteFunctionsQueryServiceUnavailable) Code() int {
	return 503
}

func (o *ExecuteFunctionsQueryServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions/v1][%d] executeFunctionsQueryServiceUnavailable %s", 503, payload)
}

func (o *ExecuteFunctionsQueryServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/query-functions/v1][%d] executeFunctionsQueryServiceUnavailable %s", 503, payload)
}

func (o *ExecuteFunctionsQueryServiceUnavailable) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsQueryServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
