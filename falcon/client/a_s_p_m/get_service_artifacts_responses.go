// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetServiceArtifactsReader is a Reader for the GetServiceArtifacts structure.
type GetServiceArtifactsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetServiceArtifactsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetServiceArtifactsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetServiceArtifactsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetServiceArtifactsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetServiceArtifactsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetServiceArtifactsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetServiceArtifactsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /aspm-api-gateway/api/v1/artifacts] getServiceArtifacts", response, response.Code())
	}
}

// NewGetServiceArtifactsOK creates a GetServiceArtifactsOK with default headers values
func NewGetServiceArtifactsOK() *GetServiceArtifactsOK {
	return &GetServiceArtifactsOK{}
}

/*
GetServiceArtifactsOK describes a response with status code 200, with default header values.

OK
*/
type GetServiceArtifactsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesArtifacts
}

// IsSuccess returns true when this get service artifacts o k response has a 2xx status code
func (o *GetServiceArtifactsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get service artifacts o k response has a 3xx status code
func (o *GetServiceArtifactsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service artifacts o k response has a 4xx status code
func (o *GetServiceArtifactsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get service artifacts o k response has a 5xx status code
func (o *GetServiceArtifactsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get service artifacts o k response a status code equal to that given
func (o *GetServiceArtifactsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get service artifacts o k response
func (o *GetServiceArtifactsOK) Code() int {
	return 200
}

func (o *GetServiceArtifactsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/artifacts][%d] getServiceArtifactsOK %s", 200, payload)
}

func (o *GetServiceArtifactsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/artifacts][%d] getServiceArtifactsOK %s", 200, payload)
}

func (o *GetServiceArtifactsOK) GetPayload() *models.TypesArtifacts {
	return o.Payload
}

func (o *GetServiceArtifactsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesArtifacts)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceArtifactsBadRequest creates a GetServiceArtifactsBadRequest with default headers values
func NewGetServiceArtifactsBadRequest() *GetServiceArtifactsBadRequest {
	return &GetServiceArtifactsBadRequest{}
}

/*
GetServiceArtifactsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetServiceArtifactsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get service artifacts bad request response has a 2xx status code
func (o *GetServiceArtifactsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service artifacts bad request response has a 3xx status code
func (o *GetServiceArtifactsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service artifacts bad request response has a 4xx status code
func (o *GetServiceArtifactsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get service artifacts bad request response has a 5xx status code
func (o *GetServiceArtifactsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get service artifacts bad request response a status code equal to that given
func (o *GetServiceArtifactsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get service artifacts bad request response
func (o *GetServiceArtifactsBadRequest) Code() int {
	return 400
}

func (o *GetServiceArtifactsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/artifacts][%d] getServiceArtifactsBadRequest %s", 400, payload)
}

func (o *GetServiceArtifactsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/artifacts][%d] getServiceArtifactsBadRequest %s", 400, payload)
}

func (o *GetServiceArtifactsBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetServiceArtifactsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceArtifactsUnauthorized creates a GetServiceArtifactsUnauthorized with default headers values
func NewGetServiceArtifactsUnauthorized() *GetServiceArtifactsUnauthorized {
	return &GetServiceArtifactsUnauthorized{}
}

/*
GetServiceArtifactsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetServiceArtifactsUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get service artifacts unauthorized response has a 2xx status code
func (o *GetServiceArtifactsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service artifacts unauthorized response has a 3xx status code
func (o *GetServiceArtifactsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service artifacts unauthorized response has a 4xx status code
func (o *GetServiceArtifactsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get service artifacts unauthorized response has a 5xx status code
func (o *GetServiceArtifactsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get service artifacts unauthorized response a status code equal to that given
func (o *GetServiceArtifactsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get service artifacts unauthorized response
func (o *GetServiceArtifactsUnauthorized) Code() int {
	return 401
}

func (o *GetServiceArtifactsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/artifacts][%d] getServiceArtifactsUnauthorized %s", 401, payload)
}

func (o *GetServiceArtifactsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/artifacts][%d] getServiceArtifactsUnauthorized %s", 401, payload)
}

func (o *GetServiceArtifactsUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetServiceArtifactsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceArtifactsForbidden creates a GetServiceArtifactsForbidden with default headers values
func NewGetServiceArtifactsForbidden() *GetServiceArtifactsForbidden {
	return &GetServiceArtifactsForbidden{}
}

/*
GetServiceArtifactsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetServiceArtifactsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get service artifacts forbidden response has a 2xx status code
func (o *GetServiceArtifactsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service artifacts forbidden response has a 3xx status code
func (o *GetServiceArtifactsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service artifacts forbidden response has a 4xx status code
func (o *GetServiceArtifactsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get service artifacts forbidden response has a 5xx status code
func (o *GetServiceArtifactsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get service artifacts forbidden response a status code equal to that given
func (o *GetServiceArtifactsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get service artifacts forbidden response
func (o *GetServiceArtifactsForbidden) Code() int {
	return 403
}

func (o *GetServiceArtifactsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/artifacts][%d] getServiceArtifactsForbidden %s", 403, payload)
}

func (o *GetServiceArtifactsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/artifacts][%d] getServiceArtifactsForbidden %s", 403, payload)
}

func (o *GetServiceArtifactsForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetServiceArtifactsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceArtifactsTooManyRequests creates a GetServiceArtifactsTooManyRequests with default headers values
func NewGetServiceArtifactsTooManyRequests() *GetServiceArtifactsTooManyRequests {
	return &GetServiceArtifactsTooManyRequests{}
}

/*
GetServiceArtifactsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetServiceArtifactsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get service artifacts too many requests response has a 2xx status code
func (o *GetServiceArtifactsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service artifacts too many requests response has a 3xx status code
func (o *GetServiceArtifactsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service artifacts too many requests response has a 4xx status code
func (o *GetServiceArtifactsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get service artifacts too many requests response has a 5xx status code
func (o *GetServiceArtifactsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get service artifacts too many requests response a status code equal to that given
func (o *GetServiceArtifactsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get service artifacts too many requests response
func (o *GetServiceArtifactsTooManyRequests) Code() int {
	return 429
}

func (o *GetServiceArtifactsTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/artifacts][%d] getServiceArtifactsTooManyRequests %s", 429, payload)
}

func (o *GetServiceArtifactsTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/artifacts][%d] getServiceArtifactsTooManyRequests %s", 429, payload)
}

func (o *GetServiceArtifactsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetServiceArtifactsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceArtifactsInternalServerError creates a GetServiceArtifactsInternalServerError with default headers values
func NewGetServiceArtifactsInternalServerError() *GetServiceArtifactsInternalServerError {
	return &GetServiceArtifactsInternalServerError{}
}

/*
GetServiceArtifactsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetServiceArtifactsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get service artifacts internal server error response has a 2xx status code
func (o *GetServiceArtifactsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service artifacts internal server error response has a 3xx status code
func (o *GetServiceArtifactsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service artifacts internal server error response has a 4xx status code
func (o *GetServiceArtifactsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get service artifacts internal server error response has a 5xx status code
func (o *GetServiceArtifactsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get service artifacts internal server error response a status code equal to that given
func (o *GetServiceArtifactsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get service artifacts internal server error response
func (o *GetServiceArtifactsInternalServerError) Code() int {
	return 500
}

func (o *GetServiceArtifactsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/artifacts][%d] getServiceArtifactsInternalServerError %s", 500, payload)
}

func (o *GetServiceArtifactsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/artifacts][%d] getServiceArtifactsInternalServerError %s", 500, payload)
}

func (o *GetServiceArtifactsInternalServerError) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetServiceArtifactsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
