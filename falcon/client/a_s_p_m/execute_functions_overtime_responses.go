// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExecuteFunctionsOvertimeReader is a Reader for the ExecuteFunctionsOvertime structure.
type ExecuteFunctionsOvertimeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecuteFunctionsOvertimeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecuteFunctionsOvertimeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExecuteFunctionsOvertimeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExecuteFunctionsOvertimeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExecuteFunctionsOvertimeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExecuteFunctionsOvertimeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExecuteFunctionsOvertimeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewExecuteFunctionsOvertimeServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /application-security/combined/functions-overtime/v1] ExecuteFunctionsOvertime", response, response.Code())
	}
}

// NewExecuteFunctionsOvertimeOK creates a ExecuteFunctionsOvertimeOK with default headers values
func NewExecuteFunctionsOvertimeOK() *ExecuteFunctionsOvertimeOK {
	return &ExecuteFunctionsOvertimeOK{}
}

/*
ExecuteFunctionsOvertimeOK describes a response with status code 200, with default header values.

OK
*/
type ExecuteFunctionsOvertimeOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesOvertimeResponse
}

// IsSuccess returns true when this execute functions overtime o k response has a 2xx status code
func (o *ExecuteFunctionsOvertimeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this execute functions overtime o k response has a 3xx status code
func (o *ExecuteFunctionsOvertimeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions overtime o k response has a 4xx status code
func (o *ExecuteFunctionsOvertimeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute functions overtime o k response has a 5xx status code
func (o *ExecuteFunctionsOvertimeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions overtime o k response a status code equal to that given
func (o *ExecuteFunctionsOvertimeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the execute functions overtime o k response
func (o *ExecuteFunctionsOvertimeOK) Code() int {
	return 200
}

func (o *ExecuteFunctionsOvertimeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/functions-overtime/v1][%d] executeFunctionsOvertimeOK %s", 200, payload)
}

func (o *ExecuteFunctionsOvertimeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/functions-overtime/v1][%d] executeFunctionsOvertimeOK %s", 200, payload)
}

func (o *ExecuteFunctionsOvertimeOK) GetPayload() *models.TypesOvertimeResponse {
	return o.Payload
}

func (o *ExecuteFunctionsOvertimeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesOvertimeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsOvertimeBadRequest creates a ExecuteFunctionsOvertimeBadRequest with default headers values
func NewExecuteFunctionsOvertimeBadRequest() *ExecuteFunctionsOvertimeBadRequest {
	return &ExecuteFunctionsOvertimeBadRequest{}
}

/*
ExecuteFunctionsOvertimeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExecuteFunctionsOvertimeBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions overtime bad request response has a 2xx status code
func (o *ExecuteFunctionsOvertimeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions overtime bad request response has a 3xx status code
func (o *ExecuteFunctionsOvertimeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions overtime bad request response has a 4xx status code
func (o *ExecuteFunctionsOvertimeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions overtime bad request response has a 5xx status code
func (o *ExecuteFunctionsOvertimeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions overtime bad request response a status code equal to that given
func (o *ExecuteFunctionsOvertimeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the execute functions overtime bad request response
func (o *ExecuteFunctionsOvertimeBadRequest) Code() int {
	return 400
}

func (o *ExecuteFunctionsOvertimeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/functions-overtime/v1][%d] executeFunctionsOvertimeBadRequest %s", 400, payload)
}

func (o *ExecuteFunctionsOvertimeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/functions-overtime/v1][%d] executeFunctionsOvertimeBadRequest %s", 400, payload)
}

func (o *ExecuteFunctionsOvertimeBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsOvertimeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsOvertimeUnauthorized creates a ExecuteFunctionsOvertimeUnauthorized with default headers values
func NewExecuteFunctionsOvertimeUnauthorized() *ExecuteFunctionsOvertimeUnauthorized {
	return &ExecuteFunctionsOvertimeUnauthorized{}
}

/*
ExecuteFunctionsOvertimeUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExecuteFunctionsOvertimeUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions overtime unauthorized response has a 2xx status code
func (o *ExecuteFunctionsOvertimeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions overtime unauthorized response has a 3xx status code
func (o *ExecuteFunctionsOvertimeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions overtime unauthorized response has a 4xx status code
func (o *ExecuteFunctionsOvertimeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions overtime unauthorized response has a 5xx status code
func (o *ExecuteFunctionsOvertimeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions overtime unauthorized response a status code equal to that given
func (o *ExecuteFunctionsOvertimeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the execute functions overtime unauthorized response
func (o *ExecuteFunctionsOvertimeUnauthorized) Code() int {
	return 401
}

func (o *ExecuteFunctionsOvertimeUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/functions-overtime/v1][%d] executeFunctionsOvertimeUnauthorized %s", 401, payload)
}

func (o *ExecuteFunctionsOvertimeUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/functions-overtime/v1][%d] executeFunctionsOvertimeUnauthorized %s", 401, payload)
}

func (o *ExecuteFunctionsOvertimeUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsOvertimeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsOvertimeForbidden creates a ExecuteFunctionsOvertimeForbidden with default headers values
func NewExecuteFunctionsOvertimeForbidden() *ExecuteFunctionsOvertimeForbidden {
	return &ExecuteFunctionsOvertimeForbidden{}
}

/*
ExecuteFunctionsOvertimeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExecuteFunctionsOvertimeForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions overtime forbidden response has a 2xx status code
func (o *ExecuteFunctionsOvertimeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions overtime forbidden response has a 3xx status code
func (o *ExecuteFunctionsOvertimeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions overtime forbidden response has a 4xx status code
func (o *ExecuteFunctionsOvertimeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions overtime forbidden response has a 5xx status code
func (o *ExecuteFunctionsOvertimeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions overtime forbidden response a status code equal to that given
func (o *ExecuteFunctionsOvertimeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the execute functions overtime forbidden response
func (o *ExecuteFunctionsOvertimeForbidden) Code() int {
	return 403
}

func (o *ExecuteFunctionsOvertimeForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/functions-overtime/v1][%d] executeFunctionsOvertimeForbidden %s", 403, payload)
}

func (o *ExecuteFunctionsOvertimeForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/functions-overtime/v1][%d] executeFunctionsOvertimeForbidden %s", 403, payload)
}

func (o *ExecuteFunctionsOvertimeForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsOvertimeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsOvertimeTooManyRequests creates a ExecuteFunctionsOvertimeTooManyRequests with default headers values
func NewExecuteFunctionsOvertimeTooManyRequests() *ExecuteFunctionsOvertimeTooManyRequests {
	return &ExecuteFunctionsOvertimeTooManyRequests{}
}

/*
ExecuteFunctionsOvertimeTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExecuteFunctionsOvertimeTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute functions overtime too many requests response has a 2xx status code
func (o *ExecuteFunctionsOvertimeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions overtime too many requests response has a 3xx status code
func (o *ExecuteFunctionsOvertimeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions overtime too many requests response has a 4xx status code
func (o *ExecuteFunctionsOvertimeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions overtime too many requests response has a 5xx status code
func (o *ExecuteFunctionsOvertimeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions overtime too many requests response a status code equal to that given
func (o *ExecuteFunctionsOvertimeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the execute functions overtime too many requests response
func (o *ExecuteFunctionsOvertimeTooManyRequests) Code() int {
	return 429
}

func (o *ExecuteFunctionsOvertimeTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/functions-overtime/v1][%d] executeFunctionsOvertimeTooManyRequests %s", 429, payload)
}

func (o *ExecuteFunctionsOvertimeTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/functions-overtime/v1][%d] executeFunctionsOvertimeTooManyRequests %s", 429, payload)
}

func (o *ExecuteFunctionsOvertimeTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteFunctionsOvertimeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsOvertimeInternalServerError creates a ExecuteFunctionsOvertimeInternalServerError with default headers values
func NewExecuteFunctionsOvertimeInternalServerError() *ExecuteFunctionsOvertimeInternalServerError {
	return &ExecuteFunctionsOvertimeInternalServerError{}
}

/*
ExecuteFunctionsOvertimeInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ExecuteFunctionsOvertimeInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute functions overtime internal server error response has a 2xx status code
func (o *ExecuteFunctionsOvertimeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions overtime internal server error response has a 3xx status code
func (o *ExecuteFunctionsOvertimeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions overtime internal server error response has a 4xx status code
func (o *ExecuteFunctionsOvertimeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute functions overtime internal server error response has a 5xx status code
func (o *ExecuteFunctionsOvertimeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this execute functions overtime internal server error response a status code equal to that given
func (o *ExecuteFunctionsOvertimeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the execute functions overtime internal server error response
func (o *ExecuteFunctionsOvertimeInternalServerError) Code() int {
	return 500
}

func (o *ExecuteFunctionsOvertimeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/functions-overtime/v1][%d] executeFunctionsOvertimeInternalServerError %s", 500, payload)
}

func (o *ExecuteFunctionsOvertimeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/functions-overtime/v1][%d] executeFunctionsOvertimeInternalServerError %s", 500, payload)
}

func (o *ExecuteFunctionsOvertimeInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteFunctionsOvertimeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsOvertimeServiceUnavailable creates a ExecuteFunctionsOvertimeServiceUnavailable with default headers values
func NewExecuteFunctionsOvertimeServiceUnavailable() *ExecuteFunctionsOvertimeServiceUnavailable {
	return &ExecuteFunctionsOvertimeServiceUnavailable{}
}

/*
ExecuteFunctionsOvertimeServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable
*/
type ExecuteFunctionsOvertimeServiceUnavailable struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions overtime service unavailable response has a 2xx status code
func (o *ExecuteFunctionsOvertimeServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions overtime service unavailable response has a 3xx status code
func (o *ExecuteFunctionsOvertimeServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions overtime service unavailable response has a 4xx status code
func (o *ExecuteFunctionsOvertimeServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute functions overtime service unavailable response has a 5xx status code
func (o *ExecuteFunctionsOvertimeServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this execute functions overtime service unavailable response a status code equal to that given
func (o *ExecuteFunctionsOvertimeServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the execute functions overtime service unavailable response
func (o *ExecuteFunctionsOvertimeServiceUnavailable) Code() int {
	return 503
}

func (o *ExecuteFunctionsOvertimeServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/functions-overtime/v1][%d] executeFunctionsOvertimeServiceUnavailable %s", 503, payload)
}

func (o *ExecuteFunctionsOvertimeServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/functions-overtime/v1][%d] executeFunctionsOvertimeServiceUnavailable %s", 503, payload)
}

func (o *ExecuteFunctionsOvertimeServiceUnavailable) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsOvertimeServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
