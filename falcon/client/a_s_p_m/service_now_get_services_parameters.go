// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewServiceNowGetServicesParams creates a new ServiceNowGetServicesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewServiceNowGetServicesParams() *ServiceNowGetServicesParams {
	return &ServiceNowGetServicesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewServiceNowGetServicesParamsWithTimeout creates a new ServiceNowGetServicesParams object
// with the ability to set a timeout on a request.
func NewServiceNowGetServicesParamsWithTimeout(timeout time.Duration) *ServiceNowGetServicesParams {
	return &ServiceNowGetServicesParams{
		timeout: timeout,
	}
}

// NewServiceNowGetServicesParamsWithContext creates a new ServiceNowGetServicesParams object
// with the ability to set a context for a request.
func NewServiceNowGetServicesParamsWithContext(ctx context.Context) *ServiceNowGetServicesParams {
	return &ServiceNowGetServicesParams{
		Context: ctx,
	}
}

// NewServiceNowGetServicesParamsWithHTTPClient creates a new ServiceNowGetServicesParams object
// with the ability to set a custom HTTPClient for a request.
func NewServiceNowGetServicesParamsWithHTTPClient(client *http.Client) *ServiceNowGetServicesParams {
	return &ServiceNowGetServicesParams{
		HTTPClient: client,
	}
}

/*
ServiceNowGetServicesParams contains all the parameters to send to the API endpoint

	for the service now get services operation.

	Typically these are written to a http.Request.
*/
type ServiceNowGetServicesParams struct {

	// Direction.
	Direction *string

	// Limit.
	Limit *int64

	// Offset.
	Offset *int64

	// OrderBy.
	OrderBy *string

	// QlFilters.
	QlFilters *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the service now get services params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ServiceNowGetServicesParams) WithDefaults() *ServiceNowGetServicesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the service now get services params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ServiceNowGetServicesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the service now get services params
func (o *ServiceNowGetServicesParams) WithTimeout(timeout time.Duration) *ServiceNowGetServicesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the service now get services params
func (o *ServiceNowGetServicesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the service now get services params
func (o *ServiceNowGetServicesParams) WithContext(ctx context.Context) *ServiceNowGetServicesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the service now get services params
func (o *ServiceNowGetServicesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the service now get services params
func (o *ServiceNowGetServicesParams) WithHTTPClient(client *http.Client) *ServiceNowGetServicesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the service now get services params
func (o *ServiceNowGetServicesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDirection adds the direction to the service now get services params
func (o *ServiceNowGetServicesParams) WithDirection(direction *string) *ServiceNowGetServicesParams {
	o.SetDirection(direction)
	return o
}

// SetDirection adds the direction to the service now get services params
func (o *ServiceNowGetServicesParams) SetDirection(direction *string) {
	o.Direction = direction
}

// WithLimit adds the limit to the service now get services params
func (o *ServiceNowGetServicesParams) WithLimit(limit *int64) *ServiceNowGetServicesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the service now get services params
func (o *ServiceNowGetServicesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the service now get services params
func (o *ServiceNowGetServicesParams) WithOffset(offset *int64) *ServiceNowGetServicesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the service now get services params
func (o *ServiceNowGetServicesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOrderBy adds the orderBy to the service now get services params
func (o *ServiceNowGetServicesParams) WithOrderBy(orderBy *string) *ServiceNowGetServicesParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the service now get services params
func (o *ServiceNowGetServicesParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithQlFilters adds the qlFilters to the service now get services params
func (o *ServiceNowGetServicesParams) WithQlFilters(qlFilters *string) *ServiceNowGetServicesParams {
	o.SetQlFilters(qlFilters)
	return o
}

// SetQlFilters adds the qlFilters to the service now get services params
func (o *ServiceNowGetServicesParams) SetQlFilters(qlFilters *string) {
	o.QlFilters = qlFilters
}

// WriteToRequest writes these params to a swagger request
func (o *ServiceNowGetServicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Direction != nil {

		// query param direction
		var qrDirection string

		if o.Direction != nil {
			qrDirection = *o.Direction
		}
		qDirection := qrDirection
		if qDirection != "" {

			if err := r.SetQueryParam("direction", qDirection); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// query param orderBy
		var qrOrderBy string

		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {

			if err := r.SetQueryParam("orderBy", qOrderBy); err != nil {
				return err
			}
		}
	}

	if o.QlFilters != nil {

		// query param ql_filters
		var qrQlFilters string

		if o.QlFilters != nil {
			qrQlFilters = *o.QlFilters
		}
		qQlFilters := qrQlFilters
		if qQlFilters != "" {

			if err := r.SetQueryParam("ql_filters", qQlFilters); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
