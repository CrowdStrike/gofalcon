// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new a s p m API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new a s p m API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new a s p m API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for a s p m API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateExecutorNode(params *CreateExecutorNodeParams, opts ...ClientOption) (*CreateExecutorNodeOK, error)

	CreateIntegration(params *CreateIntegrationParams, opts ...ClientOption) (*CreateIntegrationOK, error)

	CreateIntegrationTask(params *CreateIntegrationTaskParams, opts ...ClientOption) (*CreateIntegrationTaskOK, error)

	DeleteExecutorNode(params *DeleteExecutorNodeParams, opts ...ClientOption) (*DeleteExecutorNodeOK, error)

	DeleteIntegration(params *DeleteIntegrationParams, opts ...ClientOption) (*DeleteIntegrationOK, error)

	DeleteIntegrationTask(params *DeleteIntegrationTaskParams, opts ...ClientOption) (*DeleteIntegrationTaskOK, error)

	DeleteTags(params *DeleteTagsParams, opts ...ClientOption) (*DeleteTagsOK, *DeleteTagsCreated, error)

	ExecuteFunctionData(params *ExecuteFunctionDataParams, opts ...ClientOption) (*ExecuteFunctionDataOK, error)

	ExecuteFunctionDataCount(params *ExecuteFunctionDataCountParams, opts ...ClientOption) (*ExecuteFunctionDataCountOK, error)

	ExecuteFunctionDataQuery(params *ExecuteFunctionDataQueryParams, opts ...ClientOption) (*ExecuteFunctionDataQueryOK, error)

	ExecuteFunctionDataQueryCount(params *ExecuteFunctionDataQueryCountParams, opts ...ClientOption) (*ExecuteFunctionDataQueryCountOK, error)

	ExecuteFunctions(params *ExecuteFunctionsParams, opts ...ClientOption) (*ExecuteFunctionsOK, error)

	ExecuteFunctionsCount(params *ExecuteFunctionsCountParams, opts ...ClientOption) (*ExecuteFunctionsCountOK, error)

	ExecuteFunctionsOvertime(params *ExecuteFunctionsOvertimeParams, opts ...ClientOption) (*ExecuteFunctionsOvertimeOK, error)

	ExecuteFunctionsQuery(params *ExecuteFunctionsQueryParams, opts ...ClientOption) (*ExecuteFunctionsQueryOK, error)

	ExecuteFunctionsQueryCount(params *ExecuteFunctionsQueryCountParams, opts ...ClientOption) (*ExecuteFunctionsQueryCountOK, error)

	ExecuteFunctionsQueryOvertime(params *ExecuteFunctionsQueryOvertimeParams, opts ...ClientOption) (*ExecuteFunctionsQueryOvertimeOK, error)

	ExecuteQuery(params *ExecuteQueryParams, opts ...ClientOption) (*ExecuteQueryOK, error)

	GetCSPMInventoryBAServices(params *GetCSPMInventoryBAServicesParams, opts ...ClientOption) (*GetCSPMInventoryBAServicesOK, error)

	GetCSPMInventoryServiceDetails(params *GetCSPMInventoryServiceDetailsParams, opts ...ClientOption) (*GetCSPMInventoryServiceDetailsOK, error)

	GetCloudSecurityIntegrationState(params *GetCloudSecurityIntegrationStateParams, opts ...ClientOption) (*GetCloudSecurityIntegrationStateOK, error)

	GetExecutorNodes(params *GetExecutorNodesParams, opts ...ClientOption) (*GetExecutorNodesOK, error)

	GetExecutorNodesMetadata(params *GetExecutorNodesMetadataParams, opts ...ClientOption) (*GetExecutorNodesMetadataOK, error)

	GetIntegrationTasks(params *GetIntegrationTasksParams, opts ...ClientOption) (*GetIntegrationTasksOK, error)

	GetIntegrationTasksAdmin(params *GetIntegrationTasksAdminParams, opts ...ClientOption) (*GetIntegrationTasksAdminOK, error)

	GetIntegrationTasksMetadata(params *GetIntegrationTasksMetadataParams, opts ...ClientOption) (*GetIntegrationTasksMetadataOK, error)

	GetIntegrationTasksV2(params *GetIntegrationTasksV2Params, opts ...ClientOption) (*GetIntegrationTasksV2OK, error)

	GetIntegrationTypes(params *GetIntegrationTypesParams, opts ...ClientOption) (*GetIntegrationTypesOK, error)

	GetIntegrations(params *GetIntegrationsParams, opts ...ClientOption) (*GetIntegrationsOK, error)

	GetIntegrationsV2(params *GetIntegrationsV2Params, opts ...ClientOption) (*GetIntegrationsV2OK, error)

	GetServiceViolationTypes(params *GetServiceViolationTypesParams, opts ...ClientOption) (*GetServiceViolationTypesOK, error)

	GetServicesCount(params *GetServicesCountParams, opts ...ClientOption) (*GetServicesCountOK, error)

	GetTags(params *GetTagsParams, opts ...ClientOption) (*GetTagsOK, error)

	RunIntegrationTask(params *RunIntegrationTaskParams, opts ...ClientOption) (*RunIntegrationTaskOK, error)

	RunIntegrationTaskAdmin(params *RunIntegrationTaskAdminParams, opts ...ClientOption) (*RunIntegrationTaskAdminOK, error)

	RunIntegrationTaskV2(params *RunIntegrationTaskV2Params, opts ...ClientOption) (*RunIntegrationTaskV2OK, error)

	ServiceNowGetDeployments(params *ServiceNowGetDeploymentsParams, opts ...ClientOption) (*ServiceNowGetDeploymentsOK, error)

	ServiceNowGetServices(params *ServiceNowGetServicesParams, opts ...ClientOption) (*ServiceNowGetServicesOK, error)

	SetCloudSecurityIntegrationState(params *SetCloudSecurityIntegrationStateParams, opts ...ClientOption) (*SetCloudSecurityIntegrationStateOK, *SetCloudSecurityIntegrationStateNoContent, error)

	UpdateExecutorNode(params *UpdateExecutorNodeParams, opts ...ClientOption) (*UpdateExecutorNodeOK, error)

	UpdateIntegration(params *UpdateIntegrationParams, opts ...ClientOption) (*UpdateIntegrationOK, error)

	UpdateIntegrationTask(params *UpdateIntegrationTaskParams, opts ...ClientOption) (*UpdateIntegrationTaskOK, error)

	UpsertBusinessApplications(params *UpsertBusinessApplicationsParams, opts ...ClientOption) (*UpsertBusinessApplicationsOK, *UpsertBusinessApplicationsCreated, error)

	UpsertTags(params *UpsertTagsParams, opts ...ClientOption) (*UpsertTagsOK, *UpsertTagsCreated, error)

	DeleteGroupID09(params *DeleteGroupID09Params, opts ...ClientOption) (*DeleteGroupId09OK, error)

	GetServiceArtifacts(params *GetServiceArtifactsParams, opts ...ClientOption) (*GetServiceArtifactsOK, error)

	GetExecutorNodesID09InstancesCsv(params *GetExecutorNodesID09InstancesCsvParams, opts ...ClientOption) (*GetExecutorNodesId09InstancesCsvOK, error)

	GetGroupID09V2(params *GetGroupID09V2Params, opts ...ClientOption) (*GetGroupId09V2OK, error)

	GetGroupsHierV2(params *GetGroupsHierV2Params, opts ...ClientOption) (*GetGroupsHierV2OK, error)

	GetGroupsListV2(params *GetGroupsListV2Params, opts ...ClientOption) (*GetGroupsListV2OK, error)

	GetUsersV2(params *GetUsersV2Params, opts ...ClientOption) (*GetUsersV2OK, error)

	PostGroupV2(params *PostGroupV2Params, opts ...ClientOption) (*PostGroupV2OK, *PostGroupV2Created, error)

	PostGroupID09UpdateDefault(params *PostGroupID09UpdateDefaultParams, opts ...ClientOption) (*PostGroupId09UpdateDefaultOK, *PostGroupId09UpdateDefaultCreated, error)

	PostGroupID09V2(params *PostGroupID09V2Params, opts ...ClientOption) (*PostGroupId09V2OK, *PostGroupId09V2Created, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateExecutorNode creates a new relay node
*/
func (a *Client) CreateExecutorNode(params *CreateExecutorNodeParams, opts ...ClientOption) (*CreateExecutorNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateExecutorNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateExecutorNode",
		Method:             "POST",
		PathPattern:        "/aspm-api-gateway/api/v1/executor_nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateExecutorNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateExecutorNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateExecutorNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateIntegration creates a new integration
*/
func (a *Client) CreateIntegration(params *CreateIntegrationParams, opts ...ClientOption) (*CreateIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateIntegration",
		Method:             "POST",
		PathPattern:        "/aspm-api-gateway/api/v1/integrations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIntegrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateIntegration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateIntegrationTask creates new integration task
*/
func (a *Client) CreateIntegrationTask(params *CreateIntegrationTaskParams, opts ...ClientOption) (*CreateIntegrationTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIntegrationTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateIntegrationTask",
		Method:             "POST",
		PathPattern:        "/aspm-api-gateway/api/v1/integration_tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIntegrationTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIntegrationTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateIntegrationTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteExecutorNode deletes a relay node
*/
func (a *Client) DeleteExecutorNode(params *DeleteExecutorNodeParams, opts ...ClientOption) (*DeleteExecutorNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteExecutorNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteExecutorNode",
		Method:             "DELETE",
		PathPattern:        "/aspm-api-gateway/api/v1/executor_nodes/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteExecutorNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteExecutorNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteExecutorNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteIntegration deletes an existing integration by its ID
*/
func (a *Client) DeleteIntegration(params *DeleteIntegrationParams, opts ...ClientOption) (*DeleteIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteIntegration",
		Method:             "DELETE",
		PathPattern:        "/aspm-api-gateway/api/v1/integrations/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIntegrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteIntegration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteIntegrationTask deletes an existing integration task by its ID
*/
func (a *Client) DeleteIntegrationTask(params *DeleteIntegrationTaskParams, opts ...ClientOption) (*DeleteIntegrationTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIntegrationTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteIntegrationTask",
		Method:             "DELETE",
		PathPattern:        "/aspm-api-gateway/api/v1/integration_tasks/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIntegrationTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIntegrationTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteIntegrationTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTags removes existing tags
*/
func (a *Client) DeleteTags(params *DeleteTagsParams, opts ...ClientOption) (*DeleteTagsOK, *DeleteTagsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTags",
		Method:             "POST",
		PathPattern:        "/aspm-api-gateway/api/v1/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteTagsOK:
		return value, nil, nil
	case *DeleteTagsCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for a_s_p_m: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecuteFunctionData as selected list of query language queries request and response are in m s a format
*/
func (a *Client) ExecuteFunctionData(params *ExecuteFunctionDataParams, opts ...ClientOption) (*ExecuteFunctionDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteFunctionDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecuteFunctionData",
		Method:             "GET",
		PathPattern:        "/application-security/combined/function-data/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteFunctionDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteFunctionDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecuteFunctionData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecuteFunctionDataCount as selected list of query language count queries request and response are in m s a format
*/
func (a *Client) ExecuteFunctionDataCount(params *ExecuteFunctionDataCountParams, opts ...ClientOption) (*ExecuteFunctionDataCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteFunctionDataCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecuteFunctionDataCount",
		Method:             "POST",
		PathPattern:        "/application-security/aggregates/function-data/count/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteFunctionDataCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteFunctionDataCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecuteFunctionDataCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecuteFunctionDataQuery as selected list of query language queries request and response are in m s a format
*/
func (a *Client) ExecuteFunctionDataQuery(params *ExecuteFunctionDataQueryParams, opts ...ClientOption) (*ExecuteFunctionDataQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteFunctionDataQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecuteFunctionDataQuery",
		Method:             "GET",
		PathPattern:        "/application-security/combined/query-function-data/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteFunctionDataQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteFunctionDataQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecuteFunctionDataQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecuteFunctionDataQueryCount as selected list of query language count queries request and response are in m s a format
*/
func (a *Client) ExecuteFunctionDataQueryCount(params *ExecuteFunctionDataQueryCountParams, opts ...ClientOption) (*ExecuteFunctionDataQueryCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteFunctionDataQueryCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecuteFunctionDataQueryCount",
		Method:             "GET",
		PathPattern:        "/application-security/aggregates/query-function-data-count/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteFunctionDataQueryCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteFunctionDataQueryCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecuteFunctionDataQueryCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecuteFunctions as selected list of query language services queries request and response are in m s a format
*/
func (a *Client) ExecuteFunctions(params *ExecuteFunctionsParams, opts ...ClientOption) (*ExecuteFunctionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteFunctionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecuteFunctions",
		Method:             "GET",
		PathPattern:        "/application-security/combined/functions/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteFunctionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteFunctionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecuteFunctions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecuteFunctionsCount as selected list of query language count queries request and response are in m s a format
*/
func (a *Client) ExecuteFunctionsCount(params *ExecuteFunctionsCountParams, opts ...ClientOption) (*ExecuteFunctionsCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteFunctionsCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecuteFunctionsCount",
		Method:             "POST",
		PathPattern:        "/application-security/aggregates/functions/count/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteFunctionsCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteFunctionsCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecuteFunctionsCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecuteFunctionsOvertime as selected list of query language overtime queries request and response are in m s a format
*/
func (a *Client) ExecuteFunctionsOvertime(params *ExecuteFunctionsOvertimeParams, opts ...ClientOption) (*ExecuteFunctionsOvertimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteFunctionsOvertimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecuteFunctionsOvertime",
		Method:             "GET",
		PathPattern:        "/application-security/combined/functions-overtime/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteFunctionsOvertimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteFunctionsOvertimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecuteFunctionsOvertime: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecuteFunctionsQuery as selected list of query language services queries request and response are in m s a format
*/
func (a *Client) ExecuteFunctionsQuery(params *ExecuteFunctionsQueryParams, opts ...ClientOption) (*ExecuteFunctionsQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteFunctionsQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecuteFunctionsQuery",
		Method:             "GET",
		PathPattern:        "/application-security/combined/query-functions/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteFunctionsQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteFunctionsQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecuteFunctionsQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecuteFunctionsQueryCount as selected list of query language count queries request and response are in m s a format
*/
func (a *Client) ExecuteFunctionsQueryCount(params *ExecuteFunctionsQueryCountParams, opts ...ClientOption) (*ExecuteFunctionsQueryCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteFunctionsQueryCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecuteFunctionsQueryCount",
		Method:             "GET",
		PathPattern:        "/application-security/aggregates/query-functions-count/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteFunctionsQueryCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteFunctionsQueryCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecuteFunctionsQueryCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecuteFunctionsQueryOvertime as selected list of query language overtime queries request and response are in m s a format
*/
func (a *Client) ExecuteFunctionsQueryOvertime(params *ExecuteFunctionsQueryOvertimeParams, opts ...ClientOption) (*ExecuteFunctionsQueryOvertimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteFunctionsQueryOvertimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecuteFunctionsQueryOvertime",
		Method:             "GET",
		PathPattern:        "/application-security/combined/query-functions-overtime/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteFunctionsQueryOvertimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteFunctionsQueryOvertimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecuteFunctionsQueryOvertime: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecuteQuery executes a query the syntax used is identical to that of the query page
*/
func (a *Client) ExecuteQuery(params *ExecuteQueryParams, opts ...ClientOption) (*ExecuteQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecuteQuery",
		Method:             "POST",
		PathPattern:        "/aspm-api-gateway/api/v1/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecuteQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCSPMInventoryBAServices gets services ordered by risk score for given b a
*/
func (a *Client) GetCSPMInventoryBAServices(params *GetCSPMInventoryBAServicesParams, opts ...ClientOption) (*GetCSPMInventoryBAServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCSPMInventoryBAServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCSPMInventoryBAServices",
		Method:             "GET",
		PathPattern:        "/application-security/combined/cspm-inventory-ba-services/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCSPMInventoryBAServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCSPMInventoryBAServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCSPMInventoryBAServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCSPMInventoryServiceDetails gets all service details for c s p m inventory
*/
func (a *Client) GetCSPMInventoryServiceDetails(params *GetCSPMInventoryServiceDetailsParams, opts ...ClientOption) (*GetCSPMInventoryServiceDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCSPMInventoryServiceDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCSPMInventoryServiceDetails",
		Method:             "GET",
		PathPattern:        "/application-security/combined/cspm-inventory-service-data/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCSPMInventoryServiceDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCSPMInventoryServiceDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCSPMInventoryServiceDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCloudSecurityIntegrationState gets cloud security integration state
*/
func (a *Client) GetCloudSecurityIntegrationState(params *GetCloudSecurityIntegrationStateParams, opts ...ClientOption) (*GetCloudSecurityIntegrationStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudSecurityIntegrationStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCloudSecurityIntegrationState",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/cloud_security_config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudSecurityIntegrationStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCloudSecurityIntegrationStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCloudSecurityIntegrationState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExecutorNodes gets all the relay nodes
*/
func (a *Client) GetExecutorNodes(params *GetExecutorNodesParams, opts ...ClientOption) (*GetExecutorNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExecutorNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetExecutorNodes",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/executor_nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExecutorNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExecutorNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetExecutorNodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExecutorNodesMetadata gets metadata about all executor nodes
*/
func (a *Client) GetExecutorNodesMetadata(params *GetExecutorNodesMetadataParams, opts ...ClientOption) (*GetExecutorNodesMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExecutorNodesMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetExecutorNodesMetadata",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/executor_nodes/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExecutorNodesMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExecutorNodesMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetExecutorNodesMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIntegrationTasks gets all the integration tasks
*/
func (a *Client) GetIntegrationTasks(params *GetIntegrationTasksParams, opts ...ClientOption) (*GetIntegrationTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntegrationTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIntegrationTasks",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/integration_tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntegrationTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIntegrationTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIntegrationTasksAdmin gets all the integration tasks requires admin scope
*/
func (a *Client) GetIntegrationTasksAdmin(params *GetIntegrationTasksAdminParams, opts ...ClientOption) (*GetIntegrationTasksAdminOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntegrationTasksAdminParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIntegrationTasksAdmin",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/integration_tasks/admin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationTasksAdminReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntegrationTasksAdminOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIntegrationTasksAdmin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIntegrationTasksMetadata gets metadata about all integration tasks
*/
func (a *Client) GetIntegrationTasksMetadata(params *GetIntegrationTasksMetadataParams, opts ...ClientOption) (*GetIntegrationTasksMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntegrationTasksMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIntegrationTasksMetadata",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/integration_tasks/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationTasksMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntegrationTasksMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIntegrationTasksMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIntegrationTasksV2 gets all the integration tasks
*/
func (a *Client) GetIntegrationTasksV2(params *GetIntegrationTasksV2Params, opts ...ClientOption) (*GetIntegrationTasksV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntegrationTasksV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIntegrationTasksV2",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/integration_tasks/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationTasksV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntegrationTasksV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIntegrationTasksV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIntegrationTypes gets all the integration types
*/
func (a *Client) GetIntegrationTypes(params *GetIntegrationTypesParams, opts ...ClientOption) (*GetIntegrationTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntegrationTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIntegrationTypes",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/integration_types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntegrationTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIntegrationTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIntegrations gets a list of all the integrations
*/
func (a *Client) GetIntegrations(params *GetIntegrationsParams, opts ...ClientOption) (*GetIntegrationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntegrationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIntegrations",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/integrations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntegrationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIntegrations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIntegrationsV2 gets a list of all the integrations
*/
func (a *Client) GetIntegrationsV2(params *GetIntegrationsV2Params, opts ...ClientOption) (*GetIntegrationsV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntegrationsV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIntegrationsV2",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/integrations/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntegrationsV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIntegrationsV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServiceViolationTypes gets the different types of violation
*/
func (a *Client) GetServiceViolationTypes(params *GetServiceViolationTypesParams, opts ...ClientOption) (*GetServiceViolationTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceViolationTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetServiceViolationTypes",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/services/violations/types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceViolationTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceViolationTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetServiceViolationTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServicesCount gets the total amount of existing services
*/
func (a *Client) GetServicesCount(params *GetServicesCountParams, opts ...ClientOption) (*GetServicesCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetServicesCount",
		Method:             "POST",
		PathPattern:        "/aspm-api-gateway/api/v1/services/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServicesCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServicesCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetServicesCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTags gets all the tags
*/
func (a *Client) GetTags(params *GetTagsParams, opts ...ClientOption) (*GetTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTags",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RunIntegrationTask runs an integration task by its ID
*/
func (a *Client) RunIntegrationTask(params *RunIntegrationTaskParams, opts ...ClientOption) (*RunIntegrationTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunIntegrationTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RunIntegrationTask",
		Method:             "POST",
		PathPattern:        "/aspm-api-gateway/api/v1/integration_tasks/{ID}/run",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RunIntegrationTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RunIntegrationTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RunIntegrationTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RunIntegrationTaskAdmin runs an integration task by its ID for admin scope
*/
func (a *Client) RunIntegrationTaskAdmin(params *RunIntegrationTaskAdminParams, opts ...ClientOption) (*RunIntegrationTaskAdminOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunIntegrationTaskAdminParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RunIntegrationTaskAdmin",
		Method:             "POST",
		PathPattern:        "/aspm-api-gateway/api/v1/integration_tasks/{ID}/run/admin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RunIntegrationTaskAdminReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RunIntegrationTaskAdminOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RunIntegrationTaskAdmin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RunIntegrationTaskV2 runs an integration task by its ID
*/
func (a *Client) RunIntegrationTaskV2(params *RunIntegrationTaskV2Params, opts ...ClientOption) (*RunIntegrationTaskV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunIntegrationTaskV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "RunIntegrationTaskV2",
		Method:             "POST",
		PathPattern:        "/aspm-api-gateway/api/v1/integration_tasks/{ID}/run/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RunIntegrationTaskV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RunIntegrationTaskV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RunIntegrationTaskV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ServiceNowGetDeployments service now get deployments API
*/
func (a *Client) ServiceNowGetDeployments(params *ServiceNowGetDeploymentsParams, opts ...ClientOption) (*ServiceNowGetDeploymentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceNowGetDeploymentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServiceNowGetDeployments",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/servicenow/deployments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceNowGetDeploymentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceNowGetDeploymentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServiceNowGetDeployments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ServiceNowGetServices service now get services API
*/
func (a *Client) ServiceNowGetServices(params *ServiceNowGetServicesParams, opts ...ClientOption) (*ServiceNowGetServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceNowGetServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServiceNowGetServices",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/servicenow/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceNowGetServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceNowGetServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServiceNowGetServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetCloudSecurityIntegrationState sets cloud security integration state
*/
func (a *Client) SetCloudSecurityIntegrationState(params *SetCloudSecurityIntegrationStateParams, opts ...ClientOption) (*SetCloudSecurityIntegrationStateOK, *SetCloudSecurityIntegrationStateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetCloudSecurityIntegrationStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SetCloudSecurityIntegrationState",
		Method:             "POST",
		PathPattern:        "/aspm-api-gateway/api/v1/cloud_security_config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetCloudSecurityIntegrationStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SetCloudSecurityIntegrationStateOK:
		return value, nil, nil
	case *SetCloudSecurityIntegrationStateNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for a_s_p_m: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateExecutorNode updates an existing relay node
*/
func (a *Client) UpdateExecutorNode(params *UpdateExecutorNodeParams, opts ...ClientOption) (*UpdateExecutorNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateExecutorNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateExecutorNode",
		Method:             "PUT",
		PathPattern:        "/aspm-api-gateway/api/v1/executor_nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateExecutorNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateExecutorNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateExecutorNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateIntegration updates an existing integration by its ID
*/
func (a *Client) UpdateIntegration(params *UpdateIntegrationParams, opts ...ClientOption) (*UpdateIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateIntegration",
		Method:             "PUT",
		PathPattern:        "/aspm-api-gateway/api/v1/integrations/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIntegrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateIntegration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateIntegrationTask updates an existing integration task by its ID
*/
func (a *Client) UpdateIntegrationTask(params *UpdateIntegrationTaskParams, opts ...ClientOption) (*UpdateIntegrationTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIntegrationTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateIntegrationTask",
		Method:             "PUT",
		PathPattern:        "/aspm-api-gateway/api/v1/integration_tasks/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIntegrationTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIntegrationTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateIntegrationTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpsertBusinessApplications creates or update business applications
*/
func (a *Client) UpsertBusinessApplications(params *UpsertBusinessApplicationsParams, opts ...ClientOption) (*UpsertBusinessApplicationsOK, *UpsertBusinessApplicationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpsertBusinessApplicationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpsertBusinessApplications",
		Method:             "PUT",
		PathPattern:        "/aspm-api-gateway/api/v1/business_applications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpsertBusinessApplicationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpsertBusinessApplicationsOK:
		return value, nil, nil
	case *UpsertBusinessApplicationsCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for a_s_p_m: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpsertTags creates new or update existing tag you can update unique tags table or regular tags table
*/
func (a *Client) UpsertTags(params *UpsertTagsParams, opts ...ClientOption) (*UpsertTagsOK, *UpsertTagsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpsertTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpsertTags",
		Method:             "PUT",
		PathPattern:        "/aspm-api-gateway/api/v1/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpsertTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpsertTagsOK:
		return value, nil, nil
	case *UpsertTagsCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for a_s_p_m: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteGroupID09 delete group ID 0 9 API
*/
func (a *Client) DeleteGroupID09(params *DeleteGroupID09Params, opts ...ClientOption) (*DeleteGroupId09OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupID09Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_/group/{ID:[0-9]+}",
		Method:             "DELETE",
		PathPattern:        "/aspm-api-gateway/api/v1/group/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGroupID09Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGroupId09OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_/group/{ID:[0-9]+}: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServiceArtifacts get service artifacts API
*/
func (a *Client) GetServiceArtifacts(params *GetServiceArtifactsParams, opts ...ClientOption) (*GetServiceArtifactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceArtifactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServiceArtifacts",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/artifacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceArtifactsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceArtifactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServiceArtifacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExecutorNodesID09InstancesCsv retrieves the relay instances in c s v format
*/
func (a *Client) GetExecutorNodesID09InstancesCsv(params *GetExecutorNodesID09InstancesCsvParams, opts ...ClientOption) (*GetExecutorNodesId09InstancesCsvOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExecutorNodesID09InstancesCsvParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_/executor_nodes/{ID:[0-9]+}/instances/csv",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/executor_nodes/{ID}/instances/csv",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExecutorNodesID09InstancesCsvReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExecutorNodesId09InstancesCsvOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_/executor_nodes/{ID:[0-9]+}/instances/csv: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGroupID09V2 gets group details
*/
func (a *Client) GetGroupID09V2(params *GetGroupID09V2Params, opts ...ClientOption) (*GetGroupId09V2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupID09V2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_/group/{ID:[0-9]+}/v2",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/group/{ID}/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGroupID09V2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupId09V2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_/group/{ID:[0-9]+}/v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGroupsHierV2 gets group hierarchy
*/
func (a *Client) GetGroupsHierV2(params *GetGroupsHierV2Params, opts ...ClientOption) (*GetGroupsHierV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupsHierV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_/groups/hier/v2",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/groups/hier/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGroupsHierV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupsHierV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_/groups/hier/v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGroupsListV2 get groups list v2 API
*/
func (a *Client) GetGroupsListV2(params *GetGroupsListV2Params, opts ...ClientOption) (*GetGroupsListV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupsListV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_/groups/list/v2",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/groups/list/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGroupsListV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupsListV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_/groups/list/v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUsersV2 lists users
*/
func (a *Client) GetUsersV2(params *GetUsersV2Params, opts ...ClientOption) (*GetUsersV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_/users/v2",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/users/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_/users/v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostGroupV2 creates group
*/
func (a *Client) PostGroupV2(params *PostGroupV2Params, opts ...ClientOption) (*PostGroupV2OK, *PostGroupV2Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGroupV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "post_/group/v2",
		Method:             "POST",
		PathPattern:        "/aspm-api-gateway/api/v1/group/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGroupV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostGroupV2OK:
		return value, nil, nil
	case *PostGroupV2Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for a_s_p_m: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostGroupID09UpdateDefault updates default group
*/
func (a *Client) PostGroupID09UpdateDefault(params *PostGroupID09UpdateDefaultParams, opts ...ClientOption) (*PostGroupId09UpdateDefaultOK, *PostGroupId09UpdateDefaultCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGroupID09UpdateDefaultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post_/group/{ID:[0-9]+}/update_default",
		Method:             "POST",
		PathPattern:        "/aspm-api-gateway/api/v1/group/{ID}/update_default",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGroupID09UpdateDefaultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostGroupId09UpdateDefaultOK:
		return value, nil, nil
	case *PostGroupId09UpdateDefaultCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for a_s_p_m: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostGroupID09V2 updates group
*/
func (a *Client) PostGroupID09V2(params *PostGroupID09V2Params, opts ...ClientOption) (*PostGroupId09V2OK, *PostGroupId09V2Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGroupID09V2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "post_/group/{ID:[0-9]+}/v2",
		Method:             "POST",
		PathPattern:        "/aspm-api-gateway/api/v1/group/{ID}/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGroupID09V2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostGroupId09V2OK:
		return value, nil, nil
	case *PostGroupId09V2Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for a_s_p_m: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
