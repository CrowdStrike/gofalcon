// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new a s p m API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for a s p m API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateExecutorNode(params *CreateExecutorNodeParams, opts ...ClientOption) (*CreateExecutorNodeOK, error)

	CreateIntegration(params *CreateIntegrationParams, opts ...ClientOption) (*CreateIntegrationOK, error)

	CreateIntegrationTask(params *CreateIntegrationTaskParams, opts ...ClientOption) (*CreateIntegrationTaskOK, error)

	DeleteExecutorNode(params *DeleteExecutorNodeParams, opts ...ClientOption) (*DeleteExecutorNodeOK, error)

	DeleteIntegration(params *DeleteIntegrationParams, opts ...ClientOption) (*DeleteIntegrationOK, error)

	DeleteIntegrationTask(params *DeleteIntegrationTaskParams, opts ...ClientOption) (*DeleteIntegrationTaskOK, error)

	DeleteTags(params *DeleteTagsParams, opts ...ClientOption) (*DeleteTagsCreated, error)

	ExecuteQuery(params *ExecuteQueryParams, opts ...ClientOption) (*ExecuteQueryOK, error)

	GetExecutorNodes(params *GetExecutorNodesParams, opts ...ClientOption) (*GetExecutorNodesOK, error)

	GetIntegrationTasks(params *GetIntegrationTasksParams, opts ...ClientOption) (*GetIntegrationTasksOK, error)

	GetIntegrationTypes(params *GetIntegrationTypesParams, opts ...ClientOption) (*GetIntegrationTypesOK, error)

	GetIntegrations(params *GetIntegrationsParams, opts ...ClientOption) (*GetIntegrationsOK, error)

	GetServiceViolationTypes(params *GetServiceViolationTypesParams, opts ...ClientOption) (*GetServiceViolationTypesOK, error)

	GetServicesCount(params *GetServicesCountParams, opts ...ClientOption) (*GetServicesCountOK, error)

	GetTags(params *GetTagsParams, opts ...ClientOption) (*GetTagsOK, error)

	RunIntegrationTask(params *RunIntegrationTaskParams, opts ...ClientOption) (*RunIntegrationTaskOK, error)

	ServiceNowGetDeployments(params *ServiceNowGetDeploymentsParams, opts ...ClientOption) (*ServiceNowGetDeploymentsOK, error)

	ServiceNowGetServices(params *ServiceNowGetServicesParams, opts ...ClientOption) (*ServiceNowGetServicesOK, error)

	UpdateExecutorNode(params *UpdateExecutorNodeParams, opts ...ClientOption) (*UpdateExecutorNodeOK, error)

	UpdateIntegration(params *UpdateIntegrationParams, opts ...ClientOption) (*UpdateIntegrationOK, error)

	UpdateIntegrationTask(params *UpdateIntegrationTaskParams, opts ...ClientOption) (*UpdateIntegrationTaskOK, error)

	UpsertBusinessApplications(params *UpsertBusinessApplicationsParams, opts ...ClientOption) (*UpsertBusinessApplicationsCreated, error)

	UpsertTags(params *UpsertTagsParams, opts ...ClientOption) (*UpsertTagsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateExecutorNode creates a new relay node
*/
func (a *Client) CreateExecutorNode(params *CreateExecutorNodeParams, opts ...ClientOption) (*CreateExecutorNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateExecutorNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateExecutorNode",
		Method:             "POST",
		PathPattern:        "/aspm-api-gateway/api/v1/executor_nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateExecutorNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateExecutorNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateExecutorNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateIntegration creates a new integration
*/
func (a *Client) CreateIntegration(params *CreateIntegrationParams, opts ...ClientOption) (*CreateIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateIntegration",
		Method:             "POST",
		PathPattern:        "/aspm-api-gateway/api/v1/integrations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIntegrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateIntegration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateIntegrationTask creates new integration task
*/
func (a *Client) CreateIntegrationTask(params *CreateIntegrationTaskParams, opts ...ClientOption) (*CreateIntegrationTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIntegrationTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateIntegrationTask",
		Method:             "POST",
		PathPattern:        "/aspm-api-gateway/api/v1/integration_tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIntegrationTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIntegrationTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateIntegrationTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteExecutorNode deletes a relay node
*/
func (a *Client) DeleteExecutorNode(params *DeleteExecutorNodeParams, opts ...ClientOption) (*DeleteExecutorNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteExecutorNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteExecutorNode",
		Method:             "DELETE",
		PathPattern:        "/aspm-api-gateway/api/v1/executor_nodes/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteExecutorNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteExecutorNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteExecutorNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteIntegration deletes an existing integration by its ID
*/
func (a *Client) DeleteIntegration(params *DeleteIntegrationParams, opts ...ClientOption) (*DeleteIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteIntegration",
		Method:             "DELETE",
		PathPattern:        "/aspm-api-gateway/api/v1/integrations/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIntegrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteIntegration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteIntegrationTask deletes an existing integration task by its ID
*/
func (a *Client) DeleteIntegrationTask(params *DeleteIntegrationTaskParams, opts ...ClientOption) (*DeleteIntegrationTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIntegrationTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteIntegrationTask",
		Method:             "DELETE",
		PathPattern:        "/aspm-api-gateway/api/v1/integration_tasks/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIntegrationTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIntegrationTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteIntegrationTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTags removes existing tags
*/
func (a *Client) DeleteTags(params *DeleteTagsParams, opts ...ClientOption) (*DeleteTagsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTags",
		Method:             "POST",
		PathPattern:        "/aspm-api-gateway/api/v1/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTagsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecuteQuery executes a query the syntax used is identical to that of the query page
*/
func (a *Client) ExecuteQuery(params *ExecuteQueryParams, opts ...ClientOption) (*ExecuteQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecuteQuery",
		Method:             "POST",
		PathPattern:        "/aspm-api-gateway/api/v1/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecuteQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExecutorNodes gets all the relay nodes
*/
func (a *Client) GetExecutorNodes(params *GetExecutorNodesParams, opts ...ClientOption) (*GetExecutorNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExecutorNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetExecutorNodes",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/executor_nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExecutorNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExecutorNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetExecutorNodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIntegrationTasks gets all the integration tasks
*/
func (a *Client) GetIntegrationTasks(params *GetIntegrationTasksParams, opts ...ClientOption) (*GetIntegrationTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntegrationTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIntegrationTasks",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/integration_tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntegrationTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIntegrationTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIntegrationTypes gets all the integration types
*/
func (a *Client) GetIntegrationTypes(params *GetIntegrationTypesParams, opts ...ClientOption) (*GetIntegrationTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntegrationTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIntegrationTypes",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/integration_types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntegrationTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIntegrationTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIntegrations gets a list of all the integrations
*/
func (a *Client) GetIntegrations(params *GetIntegrationsParams, opts ...ClientOption) (*GetIntegrationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntegrationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIntegrations",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/integrations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntegrationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIntegrations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServiceViolationTypes gets the different types of violation
*/
func (a *Client) GetServiceViolationTypes(params *GetServiceViolationTypesParams, opts ...ClientOption) (*GetServiceViolationTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceViolationTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetServiceViolationTypes",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/services/violations/types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceViolationTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceViolationTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetServiceViolationTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServicesCount gets the total amount of existing services
*/
func (a *Client) GetServicesCount(params *GetServicesCountParams, opts ...ClientOption) (*GetServicesCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetServicesCount",
		Method:             "POST",
		PathPattern:        "/aspm-api-gateway/api/v1/services/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServicesCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServicesCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetServicesCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTags gets all the tags
*/
func (a *Client) GetTags(params *GetTagsParams, opts ...ClientOption) (*GetTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTags",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RunIntegrationTask runs an integration task by its ID
*/
func (a *Client) RunIntegrationTask(params *RunIntegrationTaskParams, opts ...ClientOption) (*RunIntegrationTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunIntegrationTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RunIntegrationTask",
		Method:             "POST",
		PathPattern:        "/aspm-api-gateway/api/v1/integration_tasks/{ID}/run",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RunIntegrationTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RunIntegrationTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RunIntegrationTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ServiceNowGetDeployments service now get deployments API
*/
func (a *Client) ServiceNowGetDeployments(params *ServiceNowGetDeploymentsParams, opts ...ClientOption) (*ServiceNowGetDeploymentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceNowGetDeploymentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServiceNowGetDeployments",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/servicenow/deployments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceNowGetDeploymentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceNowGetDeploymentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServiceNowGetDeployments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ServiceNowGetServices service now get services API
*/
func (a *Client) ServiceNowGetServices(params *ServiceNowGetServicesParams, opts ...ClientOption) (*ServiceNowGetServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceNowGetServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServiceNowGetServices",
		Method:             "GET",
		PathPattern:        "/aspm-api-gateway/api/v1/servicenow/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceNowGetServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceNowGetServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServiceNowGetServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateExecutorNode updates an existing relay node
*/
func (a *Client) UpdateExecutorNode(params *UpdateExecutorNodeParams, opts ...ClientOption) (*UpdateExecutorNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateExecutorNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateExecutorNode",
		Method:             "PUT",
		PathPattern:        "/aspm-api-gateway/api/v1/executor_nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateExecutorNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateExecutorNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateExecutorNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateIntegration updates an existing integration by its ID
*/
func (a *Client) UpdateIntegration(params *UpdateIntegrationParams, opts ...ClientOption) (*UpdateIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateIntegration",
		Method:             "PUT",
		PathPattern:        "/aspm-api-gateway/api/v1/integrations/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIntegrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateIntegration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateIntegrationTask updates an existing integration task by its ID
*/
func (a *Client) UpdateIntegrationTask(params *UpdateIntegrationTaskParams, opts ...ClientOption) (*UpdateIntegrationTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIntegrationTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateIntegrationTask",
		Method:             "PUT",
		PathPattern:        "/aspm-api-gateway/api/v1/integration_tasks/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIntegrationTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIntegrationTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateIntegrationTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpsertBusinessApplications creates or update business applications
*/
func (a *Client) UpsertBusinessApplications(params *UpsertBusinessApplicationsParams, opts ...ClientOption) (*UpsertBusinessApplicationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpsertBusinessApplicationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpsertBusinessApplications",
		Method:             "PUT",
		PathPattern:        "/aspm-api-gateway/api/v1/business_applications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpsertBusinessApplicationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpsertBusinessApplicationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpsertBusinessApplications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpsertTags creates new or update existing tag you can update unique tags table or regular tags table
*/
func (a *Client) UpsertTags(params *UpsertTagsParams, opts ...ClientOption) (*UpsertTagsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpsertTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpsertTags",
		Method:             "PUT",
		PathPattern:        "/aspm-api-gateway/api/v1/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpsertTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpsertTagsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpsertTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
