// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewExecuteFunctionDataCountParams creates a new ExecuteFunctionDataCountParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewExecuteFunctionDataCountParams() *ExecuteFunctionDataCountParams {
	return &ExecuteFunctionDataCountParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewExecuteFunctionDataCountParamsWithTimeout creates a new ExecuteFunctionDataCountParams object
// with the ability to set a timeout on a request.
func NewExecuteFunctionDataCountParamsWithTimeout(timeout time.Duration) *ExecuteFunctionDataCountParams {
	return &ExecuteFunctionDataCountParams{
		timeout: timeout,
	}
}

// NewExecuteFunctionDataCountParamsWithContext creates a new ExecuteFunctionDataCountParams object
// with the ability to set a context for a request.
func NewExecuteFunctionDataCountParamsWithContext(ctx context.Context) *ExecuteFunctionDataCountParams {
	return &ExecuteFunctionDataCountParams{
		Context: ctx,
	}
}

// NewExecuteFunctionDataCountParamsWithHTTPClient creates a new ExecuteFunctionDataCountParams object
// with the ability to set a custom HTTPClient for a request.
func NewExecuteFunctionDataCountParamsWithHTTPClient(client *http.Client) *ExecuteFunctionDataCountParams {
	return &ExecuteFunctionDataCountParams{
		HTTPClient: client,
	}
}

/*
ExecuteFunctionDataCountParams contains all the parameters to send to the API endpoint

	for the execute function data count operation.

	Typically these are written to a http.Request.
*/
type ExecuteFunctionDataCountParams struct {

	/* AwsLambdaArn.

	   required for 'aws' cloud provider
	*/
	AwsLambdaArn *string

	/* AzureFunctionAppName.

	   required for 'azure' cloud provider
	*/
	AzureFunctionAppName *string

	/* AzureSiteResourceGroup.

	   required for 'azure' cloud provider
	*/
	AzureSiteResourceGroup *string

	/* AzureSiteSubscriptionID.

	   required for 'azure' cloud provider
	*/
	AzureSiteSubscriptionID *string

	// CloudProvider.
	CloudProvider string

	/* GcpCloudFunctionURL.

	   required for 'gcp' cloud provider
	*/
	GcpCloudFunctionURL *string

	// QueryName.
	QueryName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the execute function data count params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ExecuteFunctionDataCountParams) WithDefaults() *ExecuteFunctionDataCountParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the execute function data count params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ExecuteFunctionDataCountParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the execute function data count params
func (o *ExecuteFunctionDataCountParams) WithTimeout(timeout time.Duration) *ExecuteFunctionDataCountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the execute function data count params
func (o *ExecuteFunctionDataCountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the execute function data count params
func (o *ExecuteFunctionDataCountParams) WithContext(ctx context.Context) *ExecuteFunctionDataCountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the execute function data count params
func (o *ExecuteFunctionDataCountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the execute function data count params
func (o *ExecuteFunctionDataCountParams) WithHTTPClient(client *http.Client) *ExecuteFunctionDataCountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the execute function data count params
func (o *ExecuteFunctionDataCountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAwsLambdaArn adds the awsLambdaArn to the execute function data count params
func (o *ExecuteFunctionDataCountParams) WithAwsLambdaArn(awsLambdaArn *string) *ExecuteFunctionDataCountParams {
	o.SetAwsLambdaArn(awsLambdaArn)
	return o
}

// SetAwsLambdaArn adds the awsLambdaArn to the execute function data count params
func (o *ExecuteFunctionDataCountParams) SetAwsLambdaArn(awsLambdaArn *string) {
	o.AwsLambdaArn = awsLambdaArn
}

// WithAzureFunctionAppName adds the azureFunctionAppName to the execute function data count params
func (o *ExecuteFunctionDataCountParams) WithAzureFunctionAppName(azureFunctionAppName *string) *ExecuteFunctionDataCountParams {
	o.SetAzureFunctionAppName(azureFunctionAppName)
	return o
}

// SetAzureFunctionAppName adds the azureFunctionAppName to the execute function data count params
func (o *ExecuteFunctionDataCountParams) SetAzureFunctionAppName(azureFunctionAppName *string) {
	o.AzureFunctionAppName = azureFunctionAppName
}

// WithAzureSiteResourceGroup adds the azureSiteResourceGroup to the execute function data count params
func (o *ExecuteFunctionDataCountParams) WithAzureSiteResourceGroup(azureSiteResourceGroup *string) *ExecuteFunctionDataCountParams {
	o.SetAzureSiteResourceGroup(azureSiteResourceGroup)
	return o
}

// SetAzureSiteResourceGroup adds the azureSiteResourceGroup to the execute function data count params
func (o *ExecuteFunctionDataCountParams) SetAzureSiteResourceGroup(azureSiteResourceGroup *string) {
	o.AzureSiteResourceGroup = azureSiteResourceGroup
}

// WithAzureSiteSubscriptionID adds the azureSiteSubscriptionID to the execute function data count params
func (o *ExecuteFunctionDataCountParams) WithAzureSiteSubscriptionID(azureSiteSubscriptionID *string) *ExecuteFunctionDataCountParams {
	o.SetAzureSiteSubscriptionID(azureSiteSubscriptionID)
	return o
}

// SetAzureSiteSubscriptionID adds the azureSiteSubscriptionId to the execute function data count params
func (o *ExecuteFunctionDataCountParams) SetAzureSiteSubscriptionID(azureSiteSubscriptionID *string) {
	o.AzureSiteSubscriptionID = azureSiteSubscriptionID
}

// WithCloudProvider adds the cloudProvider to the execute function data count params
func (o *ExecuteFunctionDataCountParams) WithCloudProvider(cloudProvider string) *ExecuteFunctionDataCountParams {
	o.SetCloudProvider(cloudProvider)
	return o
}

// SetCloudProvider adds the cloudProvider to the execute function data count params
func (o *ExecuteFunctionDataCountParams) SetCloudProvider(cloudProvider string) {
	o.CloudProvider = cloudProvider
}

// WithGcpCloudFunctionURL adds the gcpCloudFunctionURL to the execute function data count params
func (o *ExecuteFunctionDataCountParams) WithGcpCloudFunctionURL(gcpCloudFunctionURL *string) *ExecuteFunctionDataCountParams {
	o.SetGcpCloudFunctionURL(gcpCloudFunctionURL)
	return o
}

// SetGcpCloudFunctionURL adds the gcpCloudFunctionUrl to the execute function data count params
func (o *ExecuteFunctionDataCountParams) SetGcpCloudFunctionURL(gcpCloudFunctionURL *string) {
	o.GcpCloudFunctionURL = gcpCloudFunctionURL
}

// WithQueryName adds the queryName to the execute function data count params
func (o *ExecuteFunctionDataCountParams) WithQueryName(queryName string) *ExecuteFunctionDataCountParams {
	o.SetQueryName(queryName)
	return o
}

// SetQueryName adds the queryName to the execute function data count params
func (o *ExecuteFunctionDataCountParams) SetQueryName(queryName string) {
	o.QueryName = queryName
}

// WriteToRequest writes these params to a swagger request
func (o *ExecuteFunctionDataCountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AwsLambdaArn != nil {

		// query param aws_lambda_arn
		var qrAwsLambdaArn string

		if o.AwsLambdaArn != nil {
			qrAwsLambdaArn = *o.AwsLambdaArn
		}
		qAwsLambdaArn := qrAwsLambdaArn
		if qAwsLambdaArn != "" {

			if err := r.SetQueryParam("aws_lambda_arn", qAwsLambdaArn); err != nil {
				return err
			}
		}
	}

	if o.AzureFunctionAppName != nil {

		// query param azure_function_app_name
		var qrAzureFunctionAppName string

		if o.AzureFunctionAppName != nil {
			qrAzureFunctionAppName = *o.AzureFunctionAppName
		}
		qAzureFunctionAppName := qrAzureFunctionAppName
		if qAzureFunctionAppName != "" {

			if err := r.SetQueryParam("azure_function_app_name", qAzureFunctionAppName); err != nil {
				return err
			}
		}
	}

	if o.AzureSiteResourceGroup != nil {

		// query param azure_site_resource_group
		var qrAzureSiteResourceGroup string

		if o.AzureSiteResourceGroup != nil {
			qrAzureSiteResourceGroup = *o.AzureSiteResourceGroup
		}
		qAzureSiteResourceGroup := qrAzureSiteResourceGroup
		if qAzureSiteResourceGroup != "" {

			if err := r.SetQueryParam("azure_site_resource_group", qAzureSiteResourceGroup); err != nil {
				return err
			}
		}
	}

	if o.AzureSiteSubscriptionID != nil {

		// query param azure_site_subscription_id
		var qrAzureSiteSubscriptionID string

		if o.AzureSiteSubscriptionID != nil {
			qrAzureSiteSubscriptionID = *o.AzureSiteSubscriptionID
		}
		qAzureSiteSubscriptionID := qrAzureSiteSubscriptionID
		if qAzureSiteSubscriptionID != "" {

			if err := r.SetQueryParam("azure_site_subscription_id", qAzureSiteSubscriptionID); err != nil {
				return err
			}
		}
	}

	// query param cloud_provider
	qrCloudProvider := o.CloudProvider
	qCloudProvider := qrCloudProvider
	if qCloudProvider != "" {

		if err := r.SetQueryParam("cloud_provider", qCloudProvider); err != nil {
			return err
		}
	}

	if o.GcpCloudFunctionURL != nil {

		// query param gcp_cloud_function_url
		var qrGcpCloudFunctionURL string

		if o.GcpCloudFunctionURL != nil {
			qrGcpCloudFunctionURL = *o.GcpCloudFunctionURL
		}
		qGcpCloudFunctionURL := qrGcpCloudFunctionURL
		if qGcpCloudFunctionURL != "" {

			if err := r.SetQueryParam("gcp_cloud_function_url", qGcpCloudFunctionURL); err != nil {
				return err
			}
		}
	}

	// query param query_name
	qrQueryName := o.QueryName
	qQueryName := qrQueryName
	if qQueryName != "" {

		if err := r.SetQueryParam("query_name", qQueryName); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
