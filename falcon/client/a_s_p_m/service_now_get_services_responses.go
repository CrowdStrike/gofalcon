// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ServiceNowGetServicesReader is a Reader for the ServiceNowGetServices structure.
type ServiceNowGetServicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServiceNowGetServicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewServiceNowGetServicesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewServiceNowGetServicesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewServiceNowGetServicesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewServiceNowGetServicesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewServiceNowGetServicesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewServiceNowGetServicesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /aspm-api-gateway/api/v1/servicenow/services] ServiceNowGetServices", response, response.Code())
	}
}

// NewServiceNowGetServicesOK creates a ServiceNowGetServicesOK with default headers values
func NewServiceNowGetServicesOK() *ServiceNowGetServicesOK {
	return &ServiceNowGetServicesOK{}
}

/*
ServiceNowGetServicesOK describes a response with status code 200, with default header values.

OK
*/
type ServiceNowGetServicesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesServiceNowServicesResponse
}

// IsSuccess returns true when this service now get services o k response has a 2xx status code
func (o *ServiceNowGetServicesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this service now get services o k response has a 3xx status code
func (o *ServiceNowGetServicesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this service now get services o k response has a 4xx status code
func (o *ServiceNowGetServicesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this service now get services o k response has a 5xx status code
func (o *ServiceNowGetServicesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this service now get services o k response a status code equal to that given
func (o *ServiceNowGetServicesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the service now get services o k response
func (o *ServiceNowGetServicesOK) Code() int {
	return 200
}

func (o *ServiceNowGetServicesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/services][%d] serviceNowGetServicesOK %s", 200, payload)
}

func (o *ServiceNowGetServicesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/services][%d] serviceNowGetServicesOK %s", 200, payload)
}

func (o *ServiceNowGetServicesOK) GetPayload() *models.TypesServiceNowServicesResponse {
	return o.Payload
}

func (o *ServiceNowGetServicesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesServiceNowServicesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceNowGetServicesBadRequest creates a ServiceNowGetServicesBadRequest with default headers values
func NewServiceNowGetServicesBadRequest() *ServiceNowGetServicesBadRequest {
	return &ServiceNowGetServicesBadRequest{}
}

/*
ServiceNowGetServicesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ServiceNowGetServicesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this service now get services bad request response has a 2xx status code
func (o *ServiceNowGetServicesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this service now get services bad request response has a 3xx status code
func (o *ServiceNowGetServicesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this service now get services bad request response has a 4xx status code
func (o *ServiceNowGetServicesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this service now get services bad request response has a 5xx status code
func (o *ServiceNowGetServicesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this service now get services bad request response a status code equal to that given
func (o *ServiceNowGetServicesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the service now get services bad request response
func (o *ServiceNowGetServicesBadRequest) Code() int {
	return 400
}

func (o *ServiceNowGetServicesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/services][%d] serviceNowGetServicesBadRequest %s", 400, payload)
}

func (o *ServiceNowGetServicesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/services][%d] serviceNowGetServicesBadRequest %s", 400, payload)
}

func (o *ServiceNowGetServicesBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ServiceNowGetServicesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceNowGetServicesUnauthorized creates a ServiceNowGetServicesUnauthorized with default headers values
func NewServiceNowGetServicesUnauthorized() *ServiceNowGetServicesUnauthorized {
	return &ServiceNowGetServicesUnauthorized{}
}

/*
ServiceNowGetServicesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ServiceNowGetServicesUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this service now get services unauthorized response has a 2xx status code
func (o *ServiceNowGetServicesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this service now get services unauthorized response has a 3xx status code
func (o *ServiceNowGetServicesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this service now get services unauthorized response has a 4xx status code
func (o *ServiceNowGetServicesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this service now get services unauthorized response has a 5xx status code
func (o *ServiceNowGetServicesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this service now get services unauthorized response a status code equal to that given
func (o *ServiceNowGetServicesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the service now get services unauthorized response
func (o *ServiceNowGetServicesUnauthorized) Code() int {
	return 401
}

func (o *ServiceNowGetServicesUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/services][%d] serviceNowGetServicesUnauthorized %s", 401, payload)
}

func (o *ServiceNowGetServicesUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/services][%d] serviceNowGetServicesUnauthorized %s", 401, payload)
}

func (o *ServiceNowGetServicesUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ServiceNowGetServicesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceNowGetServicesForbidden creates a ServiceNowGetServicesForbidden with default headers values
func NewServiceNowGetServicesForbidden() *ServiceNowGetServicesForbidden {
	return &ServiceNowGetServicesForbidden{}
}

/*
ServiceNowGetServicesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ServiceNowGetServicesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this service now get services forbidden response has a 2xx status code
func (o *ServiceNowGetServicesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this service now get services forbidden response has a 3xx status code
func (o *ServiceNowGetServicesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this service now get services forbidden response has a 4xx status code
func (o *ServiceNowGetServicesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this service now get services forbidden response has a 5xx status code
func (o *ServiceNowGetServicesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this service now get services forbidden response a status code equal to that given
func (o *ServiceNowGetServicesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the service now get services forbidden response
func (o *ServiceNowGetServicesForbidden) Code() int {
	return 403
}

func (o *ServiceNowGetServicesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/services][%d] serviceNowGetServicesForbidden %s", 403, payload)
}

func (o *ServiceNowGetServicesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/services][%d] serviceNowGetServicesForbidden %s", 403, payload)
}

func (o *ServiceNowGetServicesForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ServiceNowGetServicesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceNowGetServicesTooManyRequests creates a ServiceNowGetServicesTooManyRequests with default headers values
func NewServiceNowGetServicesTooManyRequests() *ServiceNowGetServicesTooManyRequests {
	return &ServiceNowGetServicesTooManyRequests{}
}

/*
ServiceNowGetServicesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ServiceNowGetServicesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this service now get services too many requests response has a 2xx status code
func (o *ServiceNowGetServicesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this service now get services too many requests response has a 3xx status code
func (o *ServiceNowGetServicesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this service now get services too many requests response has a 4xx status code
func (o *ServiceNowGetServicesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this service now get services too many requests response has a 5xx status code
func (o *ServiceNowGetServicesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this service now get services too many requests response a status code equal to that given
func (o *ServiceNowGetServicesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the service now get services too many requests response
func (o *ServiceNowGetServicesTooManyRequests) Code() int {
	return 429
}

func (o *ServiceNowGetServicesTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/services][%d] serviceNowGetServicesTooManyRequests %s", 429, payload)
}

func (o *ServiceNowGetServicesTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/services][%d] serviceNowGetServicesTooManyRequests %s", 429, payload)
}

func (o *ServiceNowGetServicesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ServiceNowGetServicesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceNowGetServicesInternalServerError creates a ServiceNowGetServicesInternalServerError with default headers values
func NewServiceNowGetServicesInternalServerError() *ServiceNowGetServicesInternalServerError {
	return &ServiceNowGetServicesInternalServerError{}
}

/*
ServiceNowGetServicesInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ServiceNowGetServicesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this service now get services internal server error response has a 2xx status code
func (o *ServiceNowGetServicesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this service now get services internal server error response has a 3xx status code
func (o *ServiceNowGetServicesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this service now get services internal server error response has a 4xx status code
func (o *ServiceNowGetServicesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this service now get services internal server error response has a 5xx status code
func (o *ServiceNowGetServicesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this service now get services internal server error response a status code equal to that given
func (o *ServiceNowGetServicesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the service now get services internal server error response
func (o *ServiceNowGetServicesInternalServerError) Code() int {
	return 500
}

func (o *ServiceNowGetServicesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/services][%d] serviceNowGetServicesInternalServerError %s", 500, payload)
}

func (o *ServiceNowGetServicesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /aspm-api-gateway/api/v1/servicenow/services][%d] serviceNowGetServicesInternalServerError %s", 500, payload)
}

func (o *ServiceNowGetServicesInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ServiceNowGetServicesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
