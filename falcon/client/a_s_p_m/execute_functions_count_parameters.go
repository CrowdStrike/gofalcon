// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewExecuteFunctionsCountParams creates a new ExecuteFunctionsCountParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewExecuteFunctionsCountParams() *ExecuteFunctionsCountParams {
	return &ExecuteFunctionsCountParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewExecuteFunctionsCountParamsWithTimeout creates a new ExecuteFunctionsCountParams object
// with the ability to set a timeout on a request.
func NewExecuteFunctionsCountParamsWithTimeout(timeout time.Duration) *ExecuteFunctionsCountParams {
	return &ExecuteFunctionsCountParams{
		timeout: timeout,
	}
}

// NewExecuteFunctionsCountParamsWithContext creates a new ExecuteFunctionsCountParams object
// with the ability to set a context for a request.
func NewExecuteFunctionsCountParamsWithContext(ctx context.Context) *ExecuteFunctionsCountParams {
	return &ExecuteFunctionsCountParams{
		Context: ctx,
	}
}

// NewExecuteFunctionsCountParamsWithHTTPClient creates a new ExecuteFunctionsCountParams object
// with the ability to set a custom HTTPClient for a request.
func NewExecuteFunctionsCountParamsWithHTTPClient(client *http.Client) *ExecuteFunctionsCountParams {
	return &ExecuteFunctionsCountParams{
		HTTPClient: client,
	}
}

/*
ExecuteFunctionsCountParams contains all the parameters to send to the API endpoint

	for the execute functions count operation.

	Typically these are written to a http.Request.
*/
type ExecuteFunctionsCountParams struct {

	/* Cid.

	   required for 'azure' cloud provider
	*/
	Cid []string

	/* CloudAccountID.

	   required for 'aws' cloud provider
	*/
	CloudAccountID []string

	// CloudProvider.
	CloudProvider []string

	// QueryName.
	QueryName string

	/* Region.

	   required for 'gcp' cloud provider
	*/
	Region []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the execute functions count params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ExecuteFunctionsCountParams) WithDefaults() *ExecuteFunctionsCountParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the execute functions count params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ExecuteFunctionsCountParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the execute functions count params
func (o *ExecuteFunctionsCountParams) WithTimeout(timeout time.Duration) *ExecuteFunctionsCountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the execute functions count params
func (o *ExecuteFunctionsCountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the execute functions count params
func (o *ExecuteFunctionsCountParams) WithContext(ctx context.Context) *ExecuteFunctionsCountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the execute functions count params
func (o *ExecuteFunctionsCountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the execute functions count params
func (o *ExecuteFunctionsCountParams) WithHTTPClient(client *http.Client) *ExecuteFunctionsCountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the execute functions count params
func (o *ExecuteFunctionsCountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCid adds the cid to the execute functions count params
func (o *ExecuteFunctionsCountParams) WithCid(cid []string) *ExecuteFunctionsCountParams {
	o.SetCid(cid)
	return o
}

// SetCid adds the cid to the execute functions count params
func (o *ExecuteFunctionsCountParams) SetCid(cid []string) {
	o.Cid = cid
}

// WithCloudAccountID adds the cloudAccountID to the execute functions count params
func (o *ExecuteFunctionsCountParams) WithCloudAccountID(cloudAccountID []string) *ExecuteFunctionsCountParams {
	o.SetCloudAccountID(cloudAccountID)
	return o
}

// SetCloudAccountID adds the cloudAccountId to the execute functions count params
func (o *ExecuteFunctionsCountParams) SetCloudAccountID(cloudAccountID []string) {
	o.CloudAccountID = cloudAccountID
}

// WithCloudProvider adds the cloudProvider to the execute functions count params
func (o *ExecuteFunctionsCountParams) WithCloudProvider(cloudProvider []string) *ExecuteFunctionsCountParams {
	o.SetCloudProvider(cloudProvider)
	return o
}

// SetCloudProvider adds the cloudProvider to the execute functions count params
func (o *ExecuteFunctionsCountParams) SetCloudProvider(cloudProvider []string) {
	o.CloudProvider = cloudProvider
}

// WithQueryName adds the queryName to the execute functions count params
func (o *ExecuteFunctionsCountParams) WithQueryName(queryName string) *ExecuteFunctionsCountParams {
	o.SetQueryName(queryName)
	return o
}

// SetQueryName adds the queryName to the execute functions count params
func (o *ExecuteFunctionsCountParams) SetQueryName(queryName string) {
	o.QueryName = queryName
}

// WithRegion adds the region to the execute functions count params
func (o *ExecuteFunctionsCountParams) WithRegion(region []string) *ExecuteFunctionsCountParams {
	o.SetRegion(region)
	return o
}

// SetRegion adds the region to the execute functions count params
func (o *ExecuteFunctionsCountParams) SetRegion(region []string) {
	o.Region = region
}

// WriteToRequest writes these params to a swagger request
func (o *ExecuteFunctionsCountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cid != nil {

		// binding items for cid
		joinedCid := o.bindParamCid(reg)

		// query array param cid
		if err := r.SetQueryParam("cid", joinedCid...); err != nil {
			return err
		}
	}

	if o.CloudAccountID != nil {

		// binding items for cloud_account_id
		joinedCloudAccountID := o.bindParamCloudAccountID(reg)

		// query array param cloud_account_id
		if err := r.SetQueryParam("cloud_account_id", joinedCloudAccountID...); err != nil {
			return err
		}
	}

	if o.CloudProvider != nil {

		// binding items for cloud_provider
		joinedCloudProvider := o.bindParamCloudProvider(reg)

		// query array param cloud_provider
		if err := r.SetQueryParam("cloud_provider", joinedCloudProvider...); err != nil {
			return err
		}
	}

	// query param query_name
	qrQueryName := o.QueryName
	qQueryName := qrQueryName
	if qQueryName != "" {

		if err := r.SetQueryParam("query_name", qQueryName); err != nil {
			return err
		}
	}

	if o.Region != nil {

		// binding items for region
		joinedRegion := o.bindParamRegion(reg)

		// query array param region
		if err := r.SetQueryParam("region", joinedRegion...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamExecuteFunctionsCount binds the parameter cid
func (o *ExecuteFunctionsCountParams) bindParamCid(formats strfmt.Registry) []string {
	cidIR := o.Cid

	var cidIC []string
	for _, cidIIR := range cidIR { // explode []string

		cidIIV := cidIIR // string as string
		cidIC = append(cidIC, cidIIV)
	}

	// items.CollectionFormat: "csv"
	cidIS := swag.JoinByFormat(cidIC, "csv")

	return cidIS
}

// bindParamExecuteFunctionsCount binds the parameter cloud_account_id
func (o *ExecuteFunctionsCountParams) bindParamCloudAccountID(formats strfmt.Registry) []string {
	cloudAccountIDIR := o.CloudAccountID

	var cloudAccountIDIC []string
	for _, cloudAccountIDIIR := range cloudAccountIDIR { // explode []string

		cloudAccountIDIIV := cloudAccountIDIIR // string as string
		cloudAccountIDIC = append(cloudAccountIDIC, cloudAccountIDIIV)
	}

	// items.CollectionFormat: "csv"
	cloudAccountIDIS := swag.JoinByFormat(cloudAccountIDIC, "csv")

	return cloudAccountIDIS
}

// bindParamExecuteFunctionsCount binds the parameter cloud_provider
func (o *ExecuteFunctionsCountParams) bindParamCloudProvider(formats strfmt.Registry) []string {
	cloudProviderIR := o.CloudProvider

	var cloudProviderIC []string
	for _, cloudProviderIIR := range cloudProviderIR { // explode []string

		cloudProviderIIV := cloudProviderIIR // string as string
		cloudProviderIC = append(cloudProviderIC, cloudProviderIIV)
	}

	// items.CollectionFormat: "csv"
	cloudProviderIS := swag.JoinByFormat(cloudProviderIC, "csv")

	return cloudProviderIS
}

// bindParamExecuteFunctionsCount binds the parameter region
func (o *ExecuteFunctionsCountParams) bindParamRegion(formats strfmt.Registry) []string {
	regionIR := o.Region

	var regionIC []string
	for _, regionIIR := range regionIR { // explode []string

		regionIIV := regionIIR // string as string
		regionIC = append(regionIC, regionIIV)
	}

	// items.CollectionFormat: "csv"
	regionIS := swag.JoinByFormat(regionIC, "csv")

	return regionIS
}
