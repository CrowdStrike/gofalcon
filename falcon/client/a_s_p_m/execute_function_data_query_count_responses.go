// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExecuteFunctionDataQueryCountReader is a Reader for the ExecuteFunctionDataQueryCount structure.
type ExecuteFunctionDataQueryCountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecuteFunctionDataQueryCountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecuteFunctionDataQueryCountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExecuteFunctionDataQueryCountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExecuteFunctionDataQueryCountUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExecuteFunctionDataQueryCountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExecuteFunctionDataQueryCountTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExecuteFunctionDataQueryCountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewExecuteFunctionDataQueryCountServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /application-security/aggregates/query-function-data-count/v1] ExecuteFunctionDataQueryCount", response, response.Code())
	}
}

// NewExecuteFunctionDataQueryCountOK creates a ExecuteFunctionDataQueryCountOK with default headers values
func NewExecuteFunctionDataQueryCountOK() *ExecuteFunctionDataQueryCountOK {
	return &ExecuteFunctionDataQueryCountOK{}
}

/*
ExecuteFunctionDataQueryCountOK describes a response with status code 200, with default header values.

OK
*/
type ExecuteFunctionDataQueryCountOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesCountResponse
}

// IsSuccess returns true when this execute function data query count o k response has a 2xx status code
func (o *ExecuteFunctionDataQueryCountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this execute function data query count o k response has a 3xx status code
func (o *ExecuteFunctionDataQueryCountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data query count o k response has a 4xx status code
func (o *ExecuteFunctionDataQueryCountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute function data query count o k response has a 5xx status code
func (o *ExecuteFunctionDataQueryCountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this execute function data query count o k response a status code equal to that given
func (o *ExecuteFunctionDataQueryCountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the execute function data query count o k response
func (o *ExecuteFunctionDataQueryCountOK) Code() int {
	return 200
}

func (o *ExecuteFunctionDataQueryCountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-function-data-count/v1][%d] executeFunctionDataQueryCountOK %s", 200, payload)
}

func (o *ExecuteFunctionDataQueryCountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-function-data-count/v1][%d] executeFunctionDataQueryCountOK %s", 200, payload)
}

func (o *ExecuteFunctionDataQueryCountOK) GetPayload() *models.TypesCountResponse {
	return o.Payload
}

func (o *ExecuteFunctionDataQueryCountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesCountResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataQueryCountBadRequest creates a ExecuteFunctionDataQueryCountBadRequest with default headers values
func NewExecuteFunctionDataQueryCountBadRequest() *ExecuteFunctionDataQueryCountBadRequest {
	return &ExecuteFunctionDataQueryCountBadRequest{}
}

/*
ExecuteFunctionDataQueryCountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExecuteFunctionDataQueryCountBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute function data query count bad request response has a 2xx status code
func (o *ExecuteFunctionDataQueryCountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data query count bad request response has a 3xx status code
func (o *ExecuteFunctionDataQueryCountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data query count bad request response has a 4xx status code
func (o *ExecuteFunctionDataQueryCountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute function data query count bad request response has a 5xx status code
func (o *ExecuteFunctionDataQueryCountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this execute function data query count bad request response a status code equal to that given
func (o *ExecuteFunctionDataQueryCountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the execute function data query count bad request response
func (o *ExecuteFunctionDataQueryCountBadRequest) Code() int {
	return 400
}

func (o *ExecuteFunctionDataQueryCountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-function-data-count/v1][%d] executeFunctionDataQueryCountBadRequest %s", 400, payload)
}

func (o *ExecuteFunctionDataQueryCountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-function-data-count/v1][%d] executeFunctionDataQueryCountBadRequest %s", 400, payload)
}

func (o *ExecuteFunctionDataQueryCountBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionDataQueryCountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataQueryCountUnauthorized creates a ExecuteFunctionDataQueryCountUnauthorized with default headers values
func NewExecuteFunctionDataQueryCountUnauthorized() *ExecuteFunctionDataQueryCountUnauthorized {
	return &ExecuteFunctionDataQueryCountUnauthorized{}
}

/*
ExecuteFunctionDataQueryCountUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExecuteFunctionDataQueryCountUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute function data query count unauthorized response has a 2xx status code
func (o *ExecuteFunctionDataQueryCountUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data query count unauthorized response has a 3xx status code
func (o *ExecuteFunctionDataQueryCountUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data query count unauthorized response has a 4xx status code
func (o *ExecuteFunctionDataQueryCountUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute function data query count unauthorized response has a 5xx status code
func (o *ExecuteFunctionDataQueryCountUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this execute function data query count unauthorized response a status code equal to that given
func (o *ExecuteFunctionDataQueryCountUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the execute function data query count unauthorized response
func (o *ExecuteFunctionDataQueryCountUnauthorized) Code() int {
	return 401
}

func (o *ExecuteFunctionDataQueryCountUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-function-data-count/v1][%d] executeFunctionDataQueryCountUnauthorized %s", 401, payload)
}

func (o *ExecuteFunctionDataQueryCountUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-function-data-count/v1][%d] executeFunctionDataQueryCountUnauthorized %s", 401, payload)
}

func (o *ExecuteFunctionDataQueryCountUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionDataQueryCountUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataQueryCountForbidden creates a ExecuteFunctionDataQueryCountForbidden with default headers values
func NewExecuteFunctionDataQueryCountForbidden() *ExecuteFunctionDataQueryCountForbidden {
	return &ExecuteFunctionDataQueryCountForbidden{}
}

/*
ExecuteFunctionDataQueryCountForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExecuteFunctionDataQueryCountForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute function data query count forbidden response has a 2xx status code
func (o *ExecuteFunctionDataQueryCountForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data query count forbidden response has a 3xx status code
func (o *ExecuteFunctionDataQueryCountForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data query count forbidden response has a 4xx status code
func (o *ExecuteFunctionDataQueryCountForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute function data query count forbidden response has a 5xx status code
func (o *ExecuteFunctionDataQueryCountForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this execute function data query count forbidden response a status code equal to that given
func (o *ExecuteFunctionDataQueryCountForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the execute function data query count forbidden response
func (o *ExecuteFunctionDataQueryCountForbidden) Code() int {
	return 403
}

func (o *ExecuteFunctionDataQueryCountForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-function-data-count/v1][%d] executeFunctionDataQueryCountForbidden %s", 403, payload)
}

func (o *ExecuteFunctionDataQueryCountForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-function-data-count/v1][%d] executeFunctionDataQueryCountForbidden %s", 403, payload)
}

func (o *ExecuteFunctionDataQueryCountForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionDataQueryCountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataQueryCountTooManyRequests creates a ExecuteFunctionDataQueryCountTooManyRequests with default headers values
func NewExecuteFunctionDataQueryCountTooManyRequests() *ExecuteFunctionDataQueryCountTooManyRequests {
	return &ExecuteFunctionDataQueryCountTooManyRequests{}
}

/*
ExecuteFunctionDataQueryCountTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExecuteFunctionDataQueryCountTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute function data query count too many requests response has a 2xx status code
func (o *ExecuteFunctionDataQueryCountTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data query count too many requests response has a 3xx status code
func (o *ExecuteFunctionDataQueryCountTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data query count too many requests response has a 4xx status code
func (o *ExecuteFunctionDataQueryCountTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute function data query count too many requests response has a 5xx status code
func (o *ExecuteFunctionDataQueryCountTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this execute function data query count too many requests response a status code equal to that given
func (o *ExecuteFunctionDataQueryCountTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the execute function data query count too many requests response
func (o *ExecuteFunctionDataQueryCountTooManyRequests) Code() int {
	return 429
}

func (o *ExecuteFunctionDataQueryCountTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-function-data-count/v1][%d] executeFunctionDataQueryCountTooManyRequests %s", 429, payload)
}

func (o *ExecuteFunctionDataQueryCountTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-function-data-count/v1][%d] executeFunctionDataQueryCountTooManyRequests %s", 429, payload)
}

func (o *ExecuteFunctionDataQueryCountTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteFunctionDataQueryCountTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataQueryCountInternalServerError creates a ExecuteFunctionDataQueryCountInternalServerError with default headers values
func NewExecuteFunctionDataQueryCountInternalServerError() *ExecuteFunctionDataQueryCountInternalServerError {
	return &ExecuteFunctionDataQueryCountInternalServerError{}
}

/*
ExecuteFunctionDataQueryCountInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ExecuteFunctionDataQueryCountInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute function data query count internal server error response has a 2xx status code
func (o *ExecuteFunctionDataQueryCountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data query count internal server error response has a 3xx status code
func (o *ExecuteFunctionDataQueryCountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data query count internal server error response has a 4xx status code
func (o *ExecuteFunctionDataQueryCountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute function data query count internal server error response has a 5xx status code
func (o *ExecuteFunctionDataQueryCountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this execute function data query count internal server error response a status code equal to that given
func (o *ExecuteFunctionDataQueryCountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the execute function data query count internal server error response
func (o *ExecuteFunctionDataQueryCountInternalServerError) Code() int {
	return 500
}

func (o *ExecuteFunctionDataQueryCountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-function-data-count/v1][%d] executeFunctionDataQueryCountInternalServerError %s", 500, payload)
}

func (o *ExecuteFunctionDataQueryCountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-function-data-count/v1][%d] executeFunctionDataQueryCountInternalServerError %s", 500, payload)
}

func (o *ExecuteFunctionDataQueryCountInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteFunctionDataQueryCountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataQueryCountServiceUnavailable creates a ExecuteFunctionDataQueryCountServiceUnavailable with default headers values
func NewExecuteFunctionDataQueryCountServiceUnavailable() *ExecuteFunctionDataQueryCountServiceUnavailable {
	return &ExecuteFunctionDataQueryCountServiceUnavailable{}
}

/*
ExecuteFunctionDataQueryCountServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable
*/
type ExecuteFunctionDataQueryCountServiceUnavailable struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute function data query count service unavailable response has a 2xx status code
func (o *ExecuteFunctionDataQueryCountServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data query count service unavailable response has a 3xx status code
func (o *ExecuteFunctionDataQueryCountServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data query count service unavailable response has a 4xx status code
func (o *ExecuteFunctionDataQueryCountServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute function data query count service unavailable response has a 5xx status code
func (o *ExecuteFunctionDataQueryCountServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this execute function data query count service unavailable response a status code equal to that given
func (o *ExecuteFunctionDataQueryCountServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the execute function data query count service unavailable response
func (o *ExecuteFunctionDataQueryCountServiceUnavailable) Code() int {
	return 503
}

func (o *ExecuteFunctionDataQueryCountServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-function-data-count/v1][%d] executeFunctionDataQueryCountServiceUnavailable %s", 503, payload)
}

func (o *ExecuteFunctionDataQueryCountServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-function-data-count/v1][%d] executeFunctionDataQueryCountServiceUnavailable %s", 503, payload)
}

func (o *ExecuteFunctionDataQueryCountServiceUnavailable) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionDataQueryCountServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
