// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetCSPMInventoryBAServicesReader is a Reader for the GetCSPMInventoryBAServices structure.
type GetCSPMInventoryBAServicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCSPMInventoryBAServicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCSPMInventoryBAServicesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCSPMInventoryBAServicesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetCSPMInventoryBAServicesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCSPMInventoryBAServicesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetCSPMInventoryBAServicesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCSPMInventoryBAServicesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetCSPMInventoryBAServicesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /application-security/combined/cspm-inventory-ba-services/v1] GetCSPMInventoryBAServices", response, response.Code())
	}
}

// NewGetCSPMInventoryBAServicesOK creates a GetCSPMInventoryBAServicesOK with default headers values
func NewGetCSPMInventoryBAServicesOK() *GetCSPMInventoryBAServicesOK {
	return &GetCSPMInventoryBAServicesOK{}
}

/*
GetCSPMInventoryBAServicesOK describes a response with status code 200, with default header values.

OK
*/
type GetCSPMInventoryBAServicesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesGeneralQueryResponse
}

// IsSuccess returns true when this get c s p m inventory b a services o k response has a 2xx status code
func (o *GetCSPMInventoryBAServicesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get c s p m inventory b a services o k response has a 3xx status code
func (o *GetCSPMInventoryBAServicesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m inventory b a services o k response has a 4xx status code
func (o *GetCSPMInventoryBAServicesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get c s p m inventory b a services o k response has a 5xx status code
func (o *GetCSPMInventoryBAServicesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get c s p m inventory b a services o k response a status code equal to that given
func (o *GetCSPMInventoryBAServicesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get c s p m inventory b a services o k response
func (o *GetCSPMInventoryBAServicesOK) Code() int {
	return 200
}

func (o *GetCSPMInventoryBAServicesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/cspm-inventory-ba-services/v1][%d] getCSPMInventoryBAServicesOK %s", 200, payload)
}

func (o *GetCSPMInventoryBAServicesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/cspm-inventory-ba-services/v1][%d] getCSPMInventoryBAServicesOK %s", 200, payload)
}

func (o *GetCSPMInventoryBAServicesOK) GetPayload() *models.TypesGeneralQueryResponse {
	return o.Payload
}

func (o *GetCSPMInventoryBAServicesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesGeneralQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMInventoryBAServicesBadRequest creates a GetCSPMInventoryBAServicesBadRequest with default headers values
func NewGetCSPMInventoryBAServicesBadRequest() *GetCSPMInventoryBAServicesBadRequest {
	return &GetCSPMInventoryBAServicesBadRequest{}
}

/*
GetCSPMInventoryBAServicesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetCSPMInventoryBAServicesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get c s p m inventory b a services bad request response has a 2xx status code
func (o *GetCSPMInventoryBAServicesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get c s p m inventory b a services bad request response has a 3xx status code
func (o *GetCSPMInventoryBAServicesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m inventory b a services bad request response has a 4xx status code
func (o *GetCSPMInventoryBAServicesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get c s p m inventory b a services bad request response has a 5xx status code
func (o *GetCSPMInventoryBAServicesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get c s p m inventory b a services bad request response a status code equal to that given
func (o *GetCSPMInventoryBAServicesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get c s p m inventory b a services bad request response
func (o *GetCSPMInventoryBAServicesBadRequest) Code() int {
	return 400
}

func (o *GetCSPMInventoryBAServicesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/cspm-inventory-ba-services/v1][%d] getCSPMInventoryBAServicesBadRequest %s", 400, payload)
}

func (o *GetCSPMInventoryBAServicesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/cspm-inventory-ba-services/v1][%d] getCSPMInventoryBAServicesBadRequest %s", 400, payload)
}

func (o *GetCSPMInventoryBAServicesBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetCSPMInventoryBAServicesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMInventoryBAServicesUnauthorized creates a GetCSPMInventoryBAServicesUnauthorized with default headers values
func NewGetCSPMInventoryBAServicesUnauthorized() *GetCSPMInventoryBAServicesUnauthorized {
	return &GetCSPMInventoryBAServicesUnauthorized{}
}

/*
GetCSPMInventoryBAServicesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetCSPMInventoryBAServicesUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get c s p m inventory b a services unauthorized response has a 2xx status code
func (o *GetCSPMInventoryBAServicesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get c s p m inventory b a services unauthorized response has a 3xx status code
func (o *GetCSPMInventoryBAServicesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m inventory b a services unauthorized response has a 4xx status code
func (o *GetCSPMInventoryBAServicesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get c s p m inventory b a services unauthorized response has a 5xx status code
func (o *GetCSPMInventoryBAServicesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get c s p m inventory b a services unauthorized response a status code equal to that given
func (o *GetCSPMInventoryBAServicesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get c s p m inventory b a services unauthorized response
func (o *GetCSPMInventoryBAServicesUnauthorized) Code() int {
	return 401
}

func (o *GetCSPMInventoryBAServicesUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/cspm-inventory-ba-services/v1][%d] getCSPMInventoryBAServicesUnauthorized %s", 401, payload)
}

func (o *GetCSPMInventoryBAServicesUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/cspm-inventory-ba-services/v1][%d] getCSPMInventoryBAServicesUnauthorized %s", 401, payload)
}

func (o *GetCSPMInventoryBAServicesUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetCSPMInventoryBAServicesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMInventoryBAServicesForbidden creates a GetCSPMInventoryBAServicesForbidden with default headers values
func NewGetCSPMInventoryBAServicesForbidden() *GetCSPMInventoryBAServicesForbidden {
	return &GetCSPMInventoryBAServicesForbidden{}
}

/*
GetCSPMInventoryBAServicesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetCSPMInventoryBAServicesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get c s p m inventory b a services forbidden response has a 2xx status code
func (o *GetCSPMInventoryBAServicesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get c s p m inventory b a services forbidden response has a 3xx status code
func (o *GetCSPMInventoryBAServicesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m inventory b a services forbidden response has a 4xx status code
func (o *GetCSPMInventoryBAServicesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get c s p m inventory b a services forbidden response has a 5xx status code
func (o *GetCSPMInventoryBAServicesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get c s p m inventory b a services forbidden response a status code equal to that given
func (o *GetCSPMInventoryBAServicesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get c s p m inventory b a services forbidden response
func (o *GetCSPMInventoryBAServicesForbidden) Code() int {
	return 403
}

func (o *GetCSPMInventoryBAServicesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/cspm-inventory-ba-services/v1][%d] getCSPMInventoryBAServicesForbidden %s", 403, payload)
}

func (o *GetCSPMInventoryBAServicesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/cspm-inventory-ba-services/v1][%d] getCSPMInventoryBAServicesForbidden %s", 403, payload)
}

func (o *GetCSPMInventoryBAServicesForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetCSPMInventoryBAServicesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMInventoryBAServicesTooManyRequests creates a GetCSPMInventoryBAServicesTooManyRequests with default headers values
func NewGetCSPMInventoryBAServicesTooManyRequests() *GetCSPMInventoryBAServicesTooManyRequests {
	return &GetCSPMInventoryBAServicesTooManyRequests{}
}

/*
GetCSPMInventoryBAServicesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetCSPMInventoryBAServicesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get c s p m inventory b a services too many requests response has a 2xx status code
func (o *GetCSPMInventoryBAServicesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get c s p m inventory b a services too many requests response has a 3xx status code
func (o *GetCSPMInventoryBAServicesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m inventory b a services too many requests response has a 4xx status code
func (o *GetCSPMInventoryBAServicesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get c s p m inventory b a services too many requests response has a 5xx status code
func (o *GetCSPMInventoryBAServicesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get c s p m inventory b a services too many requests response a status code equal to that given
func (o *GetCSPMInventoryBAServicesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get c s p m inventory b a services too many requests response
func (o *GetCSPMInventoryBAServicesTooManyRequests) Code() int {
	return 429
}

func (o *GetCSPMInventoryBAServicesTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/cspm-inventory-ba-services/v1][%d] getCSPMInventoryBAServicesTooManyRequests %s", 429, payload)
}

func (o *GetCSPMInventoryBAServicesTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/cspm-inventory-ba-services/v1][%d] getCSPMInventoryBAServicesTooManyRequests %s", 429, payload)
}

func (o *GetCSPMInventoryBAServicesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetCSPMInventoryBAServicesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMInventoryBAServicesInternalServerError creates a GetCSPMInventoryBAServicesInternalServerError with default headers values
func NewGetCSPMInventoryBAServicesInternalServerError() *GetCSPMInventoryBAServicesInternalServerError {
	return &GetCSPMInventoryBAServicesInternalServerError{}
}

/*
GetCSPMInventoryBAServicesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetCSPMInventoryBAServicesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get c s p m inventory b a services internal server error response has a 2xx status code
func (o *GetCSPMInventoryBAServicesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get c s p m inventory b a services internal server error response has a 3xx status code
func (o *GetCSPMInventoryBAServicesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m inventory b a services internal server error response has a 4xx status code
func (o *GetCSPMInventoryBAServicesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get c s p m inventory b a services internal server error response has a 5xx status code
func (o *GetCSPMInventoryBAServicesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get c s p m inventory b a services internal server error response a status code equal to that given
func (o *GetCSPMInventoryBAServicesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get c s p m inventory b a services internal server error response
func (o *GetCSPMInventoryBAServicesInternalServerError) Code() int {
	return 500
}

func (o *GetCSPMInventoryBAServicesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/cspm-inventory-ba-services/v1][%d] getCSPMInventoryBAServicesInternalServerError %s", 500, payload)
}

func (o *GetCSPMInventoryBAServicesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/cspm-inventory-ba-services/v1][%d] getCSPMInventoryBAServicesInternalServerError %s", 500, payload)
}

func (o *GetCSPMInventoryBAServicesInternalServerError) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetCSPMInventoryBAServicesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMInventoryBAServicesServiceUnavailable creates a GetCSPMInventoryBAServicesServiceUnavailable with default headers values
func NewGetCSPMInventoryBAServicesServiceUnavailable() *GetCSPMInventoryBAServicesServiceUnavailable {
	return &GetCSPMInventoryBAServicesServiceUnavailable{}
}

/*
GetCSPMInventoryBAServicesServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable
*/
type GetCSPMInventoryBAServicesServiceUnavailable struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get c s p m inventory b a services service unavailable response has a 2xx status code
func (o *GetCSPMInventoryBAServicesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get c s p m inventory b a services service unavailable response has a 3xx status code
func (o *GetCSPMInventoryBAServicesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get c s p m inventory b a services service unavailable response has a 4xx status code
func (o *GetCSPMInventoryBAServicesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get c s p m inventory b a services service unavailable response has a 5xx status code
func (o *GetCSPMInventoryBAServicesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get c s p m inventory b a services service unavailable response a status code equal to that given
func (o *GetCSPMInventoryBAServicesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the get c s p m inventory b a services service unavailable response
func (o *GetCSPMInventoryBAServicesServiceUnavailable) Code() int {
	return 503
}

func (o *GetCSPMInventoryBAServicesServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/cspm-inventory-ba-services/v1][%d] getCSPMInventoryBAServicesServiceUnavailable %s", 503, payload)
}

func (o *GetCSPMInventoryBAServicesServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/cspm-inventory-ba-services/v1][%d] getCSPMInventoryBAServicesServiceUnavailable %s", 503, payload)
}

func (o *GetCSPMInventoryBAServicesServiceUnavailable) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetCSPMInventoryBAServicesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
