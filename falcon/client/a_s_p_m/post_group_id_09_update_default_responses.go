// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// PostGroupID09UpdateDefaultReader is a Reader for the PostGroupID09UpdateDefault structure.
type PostGroupID09UpdateDefaultReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostGroupID09UpdateDefaultReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostGroupId09UpdateDefaultOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewPostGroupId09UpdateDefaultCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostGroupId09UpdateDefaultBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostGroupId09UpdateDefaultUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostGroupId09UpdateDefaultForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostGroupId09UpdateDefaultTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostGroupId09UpdateDefaultInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /aspm-api-gateway/api/v1/group/{ID}/update_default] post_/group/{ID:[0-9]+}/update_default", response, response.Code())
	}
}

// NewPostGroupId09UpdateDefaultOK creates a PostGroupId09UpdateDefaultOK with default headers values
func NewPostGroupId09UpdateDefaultOK() *PostGroupId09UpdateDefaultOK {
	return &PostGroupId09UpdateDefaultOK{}
}

/*
PostGroupId09UpdateDefaultOK describes a response with status code 200, with default header values.

OK
*/
type PostGroupId09UpdateDefaultOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this post group id09 update default o k response has a 2xx status code
func (o *PostGroupId09UpdateDefaultOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post group id09 update default o k response has a 3xx status code
func (o *PostGroupId09UpdateDefaultOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post group id09 update default o k response has a 4xx status code
func (o *PostGroupId09UpdateDefaultOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post group id09 update default o k response has a 5xx status code
func (o *PostGroupId09UpdateDefaultOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post group id09 update default o k response a status code equal to that given
func (o *PostGroupId09UpdateDefaultOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post group id09 update default o k response
func (o *PostGroupId09UpdateDefaultOK) Code() int {
	return 200
}

func (o *PostGroupId09UpdateDefaultOK) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/group/{ID}/update_default][%d] postGroupId09UpdateDefaultOK", 200)
}

func (o *PostGroupId09UpdateDefaultOK) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/group/{ID}/update_default][%d] postGroupId09UpdateDefaultOK", 200)
}

func (o *PostGroupId09UpdateDefaultOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewPostGroupId09UpdateDefaultCreated creates a PostGroupId09UpdateDefaultCreated with default headers values
func NewPostGroupId09UpdateDefaultCreated() *PostGroupId09UpdateDefaultCreated {
	return &PostGroupId09UpdateDefaultCreated{}
}

/*
PostGroupId09UpdateDefaultCreated describes a response with status code 201, with default header values.

Created
*/
type PostGroupId09UpdateDefaultCreated struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this post group id09 update default created response has a 2xx status code
func (o *PostGroupId09UpdateDefaultCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post group id09 update default created response has a 3xx status code
func (o *PostGroupId09UpdateDefaultCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post group id09 update default created response has a 4xx status code
func (o *PostGroupId09UpdateDefaultCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post group id09 update default created response has a 5xx status code
func (o *PostGroupId09UpdateDefaultCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post group id09 update default created response a status code equal to that given
func (o *PostGroupId09UpdateDefaultCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post group id09 update default created response
func (o *PostGroupId09UpdateDefaultCreated) Code() int {
	return 201
}

func (o *PostGroupId09UpdateDefaultCreated) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/group/{ID}/update_default][%d] postGroupId09UpdateDefaultCreated", 201)
}

func (o *PostGroupId09UpdateDefaultCreated) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/group/{ID}/update_default][%d] postGroupId09UpdateDefaultCreated", 201)
}

func (o *PostGroupId09UpdateDefaultCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewPostGroupId09UpdateDefaultBadRequest creates a PostGroupId09UpdateDefaultBadRequest with default headers values
func NewPostGroupId09UpdateDefaultBadRequest() *PostGroupId09UpdateDefaultBadRequest {
	return &PostGroupId09UpdateDefaultBadRequest{}
}

/*
PostGroupId09UpdateDefaultBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostGroupId09UpdateDefaultBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this post group id09 update default bad request response has a 2xx status code
func (o *PostGroupId09UpdateDefaultBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post group id09 update default bad request response has a 3xx status code
func (o *PostGroupId09UpdateDefaultBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post group id09 update default bad request response has a 4xx status code
func (o *PostGroupId09UpdateDefaultBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post group id09 update default bad request response has a 5xx status code
func (o *PostGroupId09UpdateDefaultBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post group id09 update default bad request response a status code equal to that given
func (o *PostGroupId09UpdateDefaultBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post group id09 update default bad request response
func (o *PostGroupId09UpdateDefaultBadRequest) Code() int {
	return 400
}

func (o *PostGroupId09UpdateDefaultBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/group/{ID}/update_default][%d] postGroupId09UpdateDefaultBadRequest %s", 400, payload)
}

func (o *PostGroupId09UpdateDefaultBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/group/{ID}/update_default][%d] postGroupId09UpdateDefaultBadRequest %s", 400, payload)
}

func (o *PostGroupId09UpdateDefaultBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *PostGroupId09UpdateDefaultBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostGroupId09UpdateDefaultUnauthorized creates a PostGroupId09UpdateDefaultUnauthorized with default headers values
func NewPostGroupId09UpdateDefaultUnauthorized() *PostGroupId09UpdateDefaultUnauthorized {
	return &PostGroupId09UpdateDefaultUnauthorized{}
}

/*
PostGroupId09UpdateDefaultUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostGroupId09UpdateDefaultUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this post group id09 update default unauthorized response has a 2xx status code
func (o *PostGroupId09UpdateDefaultUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post group id09 update default unauthorized response has a 3xx status code
func (o *PostGroupId09UpdateDefaultUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post group id09 update default unauthorized response has a 4xx status code
func (o *PostGroupId09UpdateDefaultUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post group id09 update default unauthorized response has a 5xx status code
func (o *PostGroupId09UpdateDefaultUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post group id09 update default unauthorized response a status code equal to that given
func (o *PostGroupId09UpdateDefaultUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post group id09 update default unauthorized response
func (o *PostGroupId09UpdateDefaultUnauthorized) Code() int {
	return 401
}

func (o *PostGroupId09UpdateDefaultUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/group/{ID}/update_default][%d] postGroupId09UpdateDefaultUnauthorized %s", 401, payload)
}

func (o *PostGroupId09UpdateDefaultUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/group/{ID}/update_default][%d] postGroupId09UpdateDefaultUnauthorized %s", 401, payload)
}

func (o *PostGroupId09UpdateDefaultUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *PostGroupId09UpdateDefaultUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostGroupId09UpdateDefaultForbidden creates a PostGroupId09UpdateDefaultForbidden with default headers values
func NewPostGroupId09UpdateDefaultForbidden() *PostGroupId09UpdateDefaultForbidden {
	return &PostGroupId09UpdateDefaultForbidden{}
}

/*
PostGroupId09UpdateDefaultForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostGroupId09UpdateDefaultForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this post group id09 update default forbidden response has a 2xx status code
func (o *PostGroupId09UpdateDefaultForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post group id09 update default forbidden response has a 3xx status code
func (o *PostGroupId09UpdateDefaultForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post group id09 update default forbidden response has a 4xx status code
func (o *PostGroupId09UpdateDefaultForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post group id09 update default forbidden response has a 5xx status code
func (o *PostGroupId09UpdateDefaultForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post group id09 update default forbidden response a status code equal to that given
func (o *PostGroupId09UpdateDefaultForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post group id09 update default forbidden response
func (o *PostGroupId09UpdateDefaultForbidden) Code() int {
	return 403
}

func (o *PostGroupId09UpdateDefaultForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/group/{ID}/update_default][%d] postGroupId09UpdateDefaultForbidden %s", 403, payload)
}

func (o *PostGroupId09UpdateDefaultForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/group/{ID}/update_default][%d] postGroupId09UpdateDefaultForbidden %s", 403, payload)
}

func (o *PostGroupId09UpdateDefaultForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *PostGroupId09UpdateDefaultForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostGroupId09UpdateDefaultTooManyRequests creates a PostGroupId09UpdateDefaultTooManyRequests with default headers values
func NewPostGroupId09UpdateDefaultTooManyRequests() *PostGroupId09UpdateDefaultTooManyRequests {
	return &PostGroupId09UpdateDefaultTooManyRequests{}
}

/*
PostGroupId09UpdateDefaultTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type PostGroupId09UpdateDefaultTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this post group id09 update default too many requests response has a 2xx status code
func (o *PostGroupId09UpdateDefaultTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post group id09 update default too many requests response has a 3xx status code
func (o *PostGroupId09UpdateDefaultTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post group id09 update default too many requests response has a 4xx status code
func (o *PostGroupId09UpdateDefaultTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post group id09 update default too many requests response has a 5xx status code
func (o *PostGroupId09UpdateDefaultTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post group id09 update default too many requests response a status code equal to that given
func (o *PostGroupId09UpdateDefaultTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the post group id09 update default too many requests response
func (o *PostGroupId09UpdateDefaultTooManyRequests) Code() int {
	return 429
}

func (o *PostGroupId09UpdateDefaultTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/group/{ID}/update_default][%d] postGroupId09UpdateDefaultTooManyRequests %s", 429, payload)
}

func (o *PostGroupId09UpdateDefaultTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/group/{ID}/update_default][%d] postGroupId09UpdateDefaultTooManyRequests %s", 429, payload)
}

func (o *PostGroupId09UpdateDefaultTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *PostGroupId09UpdateDefaultTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostGroupId09UpdateDefaultInternalServerError creates a PostGroupId09UpdateDefaultInternalServerError with default headers values
func NewPostGroupId09UpdateDefaultInternalServerError() *PostGroupId09UpdateDefaultInternalServerError {
	return &PostGroupId09UpdateDefaultInternalServerError{}
}

/*
PostGroupId09UpdateDefaultInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostGroupId09UpdateDefaultInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this post group id09 update default internal server error response has a 2xx status code
func (o *PostGroupId09UpdateDefaultInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post group id09 update default internal server error response has a 3xx status code
func (o *PostGroupId09UpdateDefaultInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post group id09 update default internal server error response has a 4xx status code
func (o *PostGroupId09UpdateDefaultInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post group id09 update default internal server error response has a 5xx status code
func (o *PostGroupId09UpdateDefaultInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post group id09 update default internal server error response a status code equal to that given
func (o *PostGroupId09UpdateDefaultInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post group id09 update default internal server error response
func (o *PostGroupId09UpdateDefaultInternalServerError) Code() int {
	return 500
}

func (o *PostGroupId09UpdateDefaultInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/group/{ID}/update_default][%d] postGroupId09UpdateDefaultInternalServerError %s", 500, payload)
}

func (o *PostGroupId09UpdateDefaultInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/group/{ID}/update_default][%d] postGroupId09UpdateDefaultInternalServerError %s", 500, payload)
}

func (o *PostGroupId09UpdateDefaultInternalServerError) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *PostGroupId09UpdateDefaultInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
