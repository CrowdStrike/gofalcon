// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetServicesCountReader is a Reader for the GetServicesCount structure.
type GetServicesCountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetServicesCountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetServicesCountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetServicesCountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetServicesCountUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetServicesCountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetServicesCountTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetServicesCountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /aspm-api-gateway/api/v1/services/count] GetServicesCount", response, response.Code())
	}
}

// NewGetServicesCountOK creates a GetServicesCountOK with default headers values
func NewGetServicesCountOK() *GetServicesCountOK {
	return &GetServicesCountOK{}
}

/*
GetServicesCountOK describes a response with status code 200, with default header values.

OK
*/
type GetServicesCountOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this get services count o k response has a 2xx status code
func (o *GetServicesCountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get services count o k response has a 3xx status code
func (o *GetServicesCountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get services count o k response has a 4xx status code
func (o *GetServicesCountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get services count o k response has a 5xx status code
func (o *GetServicesCountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get services count o k response a status code equal to that given
func (o *GetServicesCountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get services count o k response
func (o *GetServicesCountOK) Code() int {
	return 200
}

func (o *GetServicesCountOK) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/services/count][%d] getServicesCountOK ", 200)
}

func (o *GetServicesCountOK) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/services/count][%d] getServicesCountOK ", 200)
}

func (o *GetServicesCountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewGetServicesCountBadRequest creates a GetServicesCountBadRequest with default headers values
func NewGetServicesCountBadRequest() *GetServicesCountBadRequest {
	return &GetServicesCountBadRequest{}
}

/*
GetServicesCountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetServicesCountBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get services count bad request response has a 2xx status code
func (o *GetServicesCountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get services count bad request response has a 3xx status code
func (o *GetServicesCountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get services count bad request response has a 4xx status code
func (o *GetServicesCountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get services count bad request response has a 5xx status code
func (o *GetServicesCountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get services count bad request response a status code equal to that given
func (o *GetServicesCountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get services count bad request response
func (o *GetServicesCountBadRequest) Code() int {
	return 400
}

func (o *GetServicesCountBadRequest) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/services/count][%d] getServicesCountBadRequest  %+v", 400, o.Payload)
}

func (o *GetServicesCountBadRequest) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/services/count][%d] getServicesCountBadRequest  %+v", 400, o.Payload)
}

func (o *GetServicesCountBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetServicesCountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServicesCountUnauthorized creates a GetServicesCountUnauthorized with default headers values
func NewGetServicesCountUnauthorized() *GetServicesCountUnauthorized {
	return &GetServicesCountUnauthorized{}
}

/*
GetServicesCountUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetServicesCountUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get services count unauthorized response has a 2xx status code
func (o *GetServicesCountUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get services count unauthorized response has a 3xx status code
func (o *GetServicesCountUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get services count unauthorized response has a 4xx status code
func (o *GetServicesCountUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get services count unauthorized response has a 5xx status code
func (o *GetServicesCountUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get services count unauthorized response a status code equal to that given
func (o *GetServicesCountUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get services count unauthorized response
func (o *GetServicesCountUnauthorized) Code() int {
	return 401
}

func (o *GetServicesCountUnauthorized) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/services/count][%d] getServicesCountUnauthorized  %+v", 401, o.Payload)
}

func (o *GetServicesCountUnauthorized) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/services/count][%d] getServicesCountUnauthorized  %+v", 401, o.Payload)
}

func (o *GetServicesCountUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetServicesCountUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServicesCountForbidden creates a GetServicesCountForbidden with default headers values
func NewGetServicesCountForbidden() *GetServicesCountForbidden {
	return &GetServicesCountForbidden{}
}

/*
GetServicesCountForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetServicesCountForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get services count forbidden response has a 2xx status code
func (o *GetServicesCountForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get services count forbidden response has a 3xx status code
func (o *GetServicesCountForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get services count forbidden response has a 4xx status code
func (o *GetServicesCountForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get services count forbidden response has a 5xx status code
func (o *GetServicesCountForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get services count forbidden response a status code equal to that given
func (o *GetServicesCountForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get services count forbidden response
func (o *GetServicesCountForbidden) Code() int {
	return 403
}

func (o *GetServicesCountForbidden) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/services/count][%d] getServicesCountForbidden  %+v", 403, o.Payload)
}

func (o *GetServicesCountForbidden) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/services/count][%d] getServicesCountForbidden  %+v", 403, o.Payload)
}

func (o *GetServicesCountForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetServicesCountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServicesCountTooManyRequests creates a GetServicesCountTooManyRequests with default headers values
func NewGetServicesCountTooManyRequests() *GetServicesCountTooManyRequests {
	return &GetServicesCountTooManyRequests{}
}

/*
GetServicesCountTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetServicesCountTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get services count too many requests response has a 2xx status code
func (o *GetServicesCountTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get services count too many requests response has a 3xx status code
func (o *GetServicesCountTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get services count too many requests response has a 4xx status code
func (o *GetServicesCountTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get services count too many requests response has a 5xx status code
func (o *GetServicesCountTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get services count too many requests response a status code equal to that given
func (o *GetServicesCountTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get services count too many requests response
func (o *GetServicesCountTooManyRequests) Code() int {
	return 429
}

func (o *GetServicesCountTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/services/count][%d] getServicesCountTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetServicesCountTooManyRequests) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/services/count][%d] getServicesCountTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetServicesCountTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetServicesCountTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServicesCountInternalServerError creates a GetServicesCountInternalServerError with default headers values
func NewGetServicesCountInternalServerError() *GetServicesCountInternalServerError {
	return &GetServicesCountInternalServerError{}
}

/*
GetServicesCountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetServicesCountInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this get services count internal server error response has a 2xx status code
func (o *GetServicesCountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get services count internal server error response has a 3xx status code
func (o *GetServicesCountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get services count internal server error response has a 4xx status code
func (o *GetServicesCountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get services count internal server error response has a 5xx status code
func (o *GetServicesCountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get services count internal server error response a status code equal to that given
func (o *GetServicesCountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get services count internal server error response
func (o *GetServicesCountInternalServerError) Code() int {
	return 500
}

func (o *GetServicesCountInternalServerError) Error() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/services/count][%d] getServicesCountInternalServerError  %+v", 500, o.Payload)
}

func (o *GetServicesCountInternalServerError) String() string {
	return fmt.Sprintf("[POST /aspm-api-gateway/api/v1/services/count][%d] getServicesCountInternalServerError  %+v", 500, o.Payload)
}

func (o *GetServicesCountInternalServerError) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *GetServicesCountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
