// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetTagsParams creates a new GetTagsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetTagsParams() *GetTagsParams {
	return &GetTagsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetTagsParamsWithTimeout creates a new GetTagsParams object
// with the ability to set a timeout on a request.
func NewGetTagsParamsWithTimeout(timeout time.Duration) *GetTagsParams {
	return &GetTagsParams{
		timeout: timeout,
	}
}

// NewGetTagsParamsWithContext creates a new GetTagsParams object
// with the ability to set a context for a request.
func NewGetTagsParamsWithContext(ctx context.Context) *GetTagsParams {
	return &GetTagsParams{
		Context: ctx,
	}
}

// NewGetTagsParamsWithHTTPClient creates a new GetTagsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetTagsParamsWithHTTPClient(client *http.Client) *GetTagsParams {
	return &GetTagsParams{
		HTTPClient: client,
	}
}

/*
GetTagsParams contains all the parameters to send to the API endpoint

	for the get tags operation.

	Typically these are written to a http.Request.
*/
type GetTagsParams struct {

	// IsUnique.
	IsUnique *bool

	// Limit.
	Limit *int64

	// Name.
	Name []string

	// Offset.
	Offset *int64

	// TagName.
	TagName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get tags params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTagsParams) WithDefaults() *GetTagsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get tags params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTagsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get tags params
func (o *GetTagsParams) WithTimeout(timeout time.Duration) *GetTagsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get tags params
func (o *GetTagsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get tags params
func (o *GetTagsParams) WithContext(ctx context.Context) *GetTagsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get tags params
func (o *GetTagsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get tags params
func (o *GetTagsParams) WithHTTPClient(client *http.Client) *GetTagsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get tags params
func (o *GetTagsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIsUnique adds the isUnique to the get tags params
func (o *GetTagsParams) WithIsUnique(isUnique *bool) *GetTagsParams {
	o.SetIsUnique(isUnique)
	return o
}

// SetIsUnique adds the isUnique to the get tags params
func (o *GetTagsParams) SetIsUnique(isUnique *bool) {
	o.IsUnique = isUnique
}

// WithLimit adds the limit to the get tags params
func (o *GetTagsParams) WithLimit(limit *int64) *GetTagsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get tags params
func (o *GetTagsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the get tags params
func (o *GetTagsParams) WithName(name []string) *GetTagsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get tags params
func (o *GetTagsParams) SetName(name []string) {
	o.Name = name
}

// WithOffset adds the offset to the get tags params
func (o *GetTagsParams) WithOffset(offset *int64) *GetTagsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get tags params
func (o *GetTagsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithTagName adds the tagName to the get tags params
func (o *GetTagsParams) WithTagName(tagName *string) *GetTagsParams {
	o.SetTagName(tagName)
	return o
}

// SetTagName adds the tagName to the get tags params
func (o *GetTagsParams) SetTagName(tagName *string) {
	o.TagName = tagName
}

// WriteToRequest writes these params to a swagger request
func (o *GetTagsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IsUnique != nil {

		// query param isUnique
		var qrIsUnique bool

		if o.IsUnique != nil {
			qrIsUnique = *o.IsUnique
		}
		qIsUnique := swag.FormatBool(qrIsUnique)
		if qIsUnique != "" {

			if err := r.SetQueryParam("isUnique", qIsUnique); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// binding items for name
		joinedName := o.bindParamName(reg)

		// query array param name
		if err := r.SetQueryParam("name", joinedName...); err != nil {
			return err
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.TagName != nil {

		// query param tagName
		var qrTagName string

		if o.TagName != nil {
			qrTagName = *o.TagName
		}
		qTagName := qrTagName
		if qTagName != "" {

			if err := r.SetQueryParam("tagName", qTagName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetTags binds the parameter name
func (o *GetTagsParams) bindParamName(formats strfmt.Registry) []string {
	nameIR := o.Name

	var nameIC []string
	for _, nameIIR := range nameIR { // explode []string

		nameIIV := nameIIR // string as string
		nameIC = append(nameIC, nameIIV)
	}

	// items.CollectionFormat: "csv"
	nameIS := swag.JoinByFormat(nameIC, "csv")

	return nameIS
}
