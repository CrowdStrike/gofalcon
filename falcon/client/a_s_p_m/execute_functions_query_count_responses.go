// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExecuteFunctionsQueryCountReader is a Reader for the ExecuteFunctionsQueryCount structure.
type ExecuteFunctionsQueryCountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecuteFunctionsQueryCountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecuteFunctionsQueryCountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExecuteFunctionsQueryCountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExecuteFunctionsQueryCountUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExecuteFunctionsQueryCountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExecuteFunctionsQueryCountTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExecuteFunctionsQueryCountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewExecuteFunctionsQueryCountServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /application-security/aggregates/query-functions-count/v1] ExecuteFunctionsQueryCount", response, response.Code())
	}
}

// NewExecuteFunctionsQueryCountOK creates a ExecuteFunctionsQueryCountOK with default headers values
func NewExecuteFunctionsQueryCountOK() *ExecuteFunctionsQueryCountOK {
	return &ExecuteFunctionsQueryCountOK{}
}

/*
ExecuteFunctionsQueryCountOK describes a response with status code 200, with default header values.

OK
*/
type ExecuteFunctionsQueryCountOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesCountResponse
}

// IsSuccess returns true when this execute functions query count o k response has a 2xx status code
func (o *ExecuteFunctionsQueryCountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this execute functions query count o k response has a 3xx status code
func (o *ExecuteFunctionsQueryCountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions query count o k response has a 4xx status code
func (o *ExecuteFunctionsQueryCountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute functions query count o k response has a 5xx status code
func (o *ExecuteFunctionsQueryCountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions query count o k response a status code equal to that given
func (o *ExecuteFunctionsQueryCountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the execute functions query count o k response
func (o *ExecuteFunctionsQueryCountOK) Code() int {
	return 200
}

func (o *ExecuteFunctionsQueryCountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-functions-count/v1][%d] executeFunctionsQueryCountOK %s", 200, payload)
}

func (o *ExecuteFunctionsQueryCountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-functions-count/v1][%d] executeFunctionsQueryCountOK %s", 200, payload)
}

func (o *ExecuteFunctionsQueryCountOK) GetPayload() *models.TypesCountResponse {
	return o.Payload
}

func (o *ExecuteFunctionsQueryCountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesCountResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsQueryCountBadRequest creates a ExecuteFunctionsQueryCountBadRequest with default headers values
func NewExecuteFunctionsQueryCountBadRequest() *ExecuteFunctionsQueryCountBadRequest {
	return &ExecuteFunctionsQueryCountBadRequest{}
}

/*
ExecuteFunctionsQueryCountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExecuteFunctionsQueryCountBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions query count bad request response has a 2xx status code
func (o *ExecuteFunctionsQueryCountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions query count bad request response has a 3xx status code
func (o *ExecuteFunctionsQueryCountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions query count bad request response has a 4xx status code
func (o *ExecuteFunctionsQueryCountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions query count bad request response has a 5xx status code
func (o *ExecuteFunctionsQueryCountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions query count bad request response a status code equal to that given
func (o *ExecuteFunctionsQueryCountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the execute functions query count bad request response
func (o *ExecuteFunctionsQueryCountBadRequest) Code() int {
	return 400
}

func (o *ExecuteFunctionsQueryCountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-functions-count/v1][%d] executeFunctionsQueryCountBadRequest %s", 400, payload)
}

func (o *ExecuteFunctionsQueryCountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-functions-count/v1][%d] executeFunctionsQueryCountBadRequest %s", 400, payload)
}

func (o *ExecuteFunctionsQueryCountBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsQueryCountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsQueryCountUnauthorized creates a ExecuteFunctionsQueryCountUnauthorized with default headers values
func NewExecuteFunctionsQueryCountUnauthorized() *ExecuteFunctionsQueryCountUnauthorized {
	return &ExecuteFunctionsQueryCountUnauthorized{}
}

/*
ExecuteFunctionsQueryCountUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExecuteFunctionsQueryCountUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions query count unauthorized response has a 2xx status code
func (o *ExecuteFunctionsQueryCountUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions query count unauthorized response has a 3xx status code
func (o *ExecuteFunctionsQueryCountUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions query count unauthorized response has a 4xx status code
func (o *ExecuteFunctionsQueryCountUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions query count unauthorized response has a 5xx status code
func (o *ExecuteFunctionsQueryCountUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions query count unauthorized response a status code equal to that given
func (o *ExecuteFunctionsQueryCountUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the execute functions query count unauthorized response
func (o *ExecuteFunctionsQueryCountUnauthorized) Code() int {
	return 401
}

func (o *ExecuteFunctionsQueryCountUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-functions-count/v1][%d] executeFunctionsQueryCountUnauthorized %s", 401, payload)
}

func (o *ExecuteFunctionsQueryCountUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-functions-count/v1][%d] executeFunctionsQueryCountUnauthorized %s", 401, payload)
}

func (o *ExecuteFunctionsQueryCountUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsQueryCountUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsQueryCountForbidden creates a ExecuteFunctionsQueryCountForbidden with default headers values
func NewExecuteFunctionsQueryCountForbidden() *ExecuteFunctionsQueryCountForbidden {
	return &ExecuteFunctionsQueryCountForbidden{}
}

/*
ExecuteFunctionsQueryCountForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExecuteFunctionsQueryCountForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions query count forbidden response has a 2xx status code
func (o *ExecuteFunctionsQueryCountForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions query count forbidden response has a 3xx status code
func (o *ExecuteFunctionsQueryCountForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions query count forbidden response has a 4xx status code
func (o *ExecuteFunctionsQueryCountForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions query count forbidden response has a 5xx status code
func (o *ExecuteFunctionsQueryCountForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions query count forbidden response a status code equal to that given
func (o *ExecuteFunctionsQueryCountForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the execute functions query count forbidden response
func (o *ExecuteFunctionsQueryCountForbidden) Code() int {
	return 403
}

func (o *ExecuteFunctionsQueryCountForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-functions-count/v1][%d] executeFunctionsQueryCountForbidden %s", 403, payload)
}

func (o *ExecuteFunctionsQueryCountForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-functions-count/v1][%d] executeFunctionsQueryCountForbidden %s", 403, payload)
}

func (o *ExecuteFunctionsQueryCountForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsQueryCountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsQueryCountTooManyRequests creates a ExecuteFunctionsQueryCountTooManyRequests with default headers values
func NewExecuteFunctionsQueryCountTooManyRequests() *ExecuteFunctionsQueryCountTooManyRequests {
	return &ExecuteFunctionsQueryCountTooManyRequests{}
}

/*
ExecuteFunctionsQueryCountTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExecuteFunctionsQueryCountTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute functions query count too many requests response has a 2xx status code
func (o *ExecuteFunctionsQueryCountTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions query count too many requests response has a 3xx status code
func (o *ExecuteFunctionsQueryCountTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions query count too many requests response has a 4xx status code
func (o *ExecuteFunctionsQueryCountTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute functions query count too many requests response has a 5xx status code
func (o *ExecuteFunctionsQueryCountTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this execute functions query count too many requests response a status code equal to that given
func (o *ExecuteFunctionsQueryCountTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the execute functions query count too many requests response
func (o *ExecuteFunctionsQueryCountTooManyRequests) Code() int {
	return 429
}

func (o *ExecuteFunctionsQueryCountTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-functions-count/v1][%d] executeFunctionsQueryCountTooManyRequests %s", 429, payload)
}

func (o *ExecuteFunctionsQueryCountTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-functions-count/v1][%d] executeFunctionsQueryCountTooManyRequests %s", 429, payload)
}

func (o *ExecuteFunctionsQueryCountTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteFunctionsQueryCountTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsQueryCountInternalServerError creates a ExecuteFunctionsQueryCountInternalServerError with default headers values
func NewExecuteFunctionsQueryCountInternalServerError() *ExecuteFunctionsQueryCountInternalServerError {
	return &ExecuteFunctionsQueryCountInternalServerError{}
}

/*
ExecuteFunctionsQueryCountInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ExecuteFunctionsQueryCountInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute functions query count internal server error response has a 2xx status code
func (o *ExecuteFunctionsQueryCountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions query count internal server error response has a 3xx status code
func (o *ExecuteFunctionsQueryCountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions query count internal server error response has a 4xx status code
func (o *ExecuteFunctionsQueryCountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute functions query count internal server error response has a 5xx status code
func (o *ExecuteFunctionsQueryCountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this execute functions query count internal server error response a status code equal to that given
func (o *ExecuteFunctionsQueryCountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the execute functions query count internal server error response
func (o *ExecuteFunctionsQueryCountInternalServerError) Code() int {
	return 500
}

func (o *ExecuteFunctionsQueryCountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-functions-count/v1][%d] executeFunctionsQueryCountInternalServerError %s", 500, payload)
}

func (o *ExecuteFunctionsQueryCountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-functions-count/v1][%d] executeFunctionsQueryCountInternalServerError %s", 500, payload)
}

func (o *ExecuteFunctionsQueryCountInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteFunctionsQueryCountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionsQueryCountServiceUnavailable creates a ExecuteFunctionsQueryCountServiceUnavailable with default headers values
func NewExecuteFunctionsQueryCountServiceUnavailable() *ExecuteFunctionsQueryCountServiceUnavailable {
	return &ExecuteFunctionsQueryCountServiceUnavailable{}
}

/*
ExecuteFunctionsQueryCountServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable
*/
type ExecuteFunctionsQueryCountServiceUnavailable struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute functions query count service unavailable response has a 2xx status code
func (o *ExecuteFunctionsQueryCountServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute functions query count service unavailable response has a 3xx status code
func (o *ExecuteFunctionsQueryCountServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute functions query count service unavailable response has a 4xx status code
func (o *ExecuteFunctionsQueryCountServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute functions query count service unavailable response has a 5xx status code
func (o *ExecuteFunctionsQueryCountServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this execute functions query count service unavailable response a status code equal to that given
func (o *ExecuteFunctionsQueryCountServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the execute functions query count service unavailable response
func (o *ExecuteFunctionsQueryCountServiceUnavailable) Code() int {
	return 503
}

func (o *ExecuteFunctionsQueryCountServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-functions-count/v1][%d] executeFunctionsQueryCountServiceUnavailable %s", 503, payload)
}

func (o *ExecuteFunctionsQueryCountServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/aggregates/query-functions-count/v1][%d] executeFunctionsQueryCountServiceUnavailable %s", 503, payload)
}

func (o *ExecuteFunctionsQueryCountServiceUnavailable) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionsQueryCountServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
