// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// DeleteGroupID09Reader is a Reader for the DeleteGroupID09 structure.
type DeleteGroupID09Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteGroupID09Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteGroupId09OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteGroupId09Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteGroupId09Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteGroupId09TooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteGroupId09InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /aspm-api-gateway/api/v1/group/{ID}] delete_/group/{ID:[0-9]+}", response, response.Code())
	}
}

// NewDeleteGroupId09OK creates a DeleteGroupId09OK with default headers values
func NewDeleteGroupId09OK() *DeleteGroupId09OK {
	return &DeleteGroupId09OK{}
}

/*
DeleteGroupId09OK describes a response with status code 200, with default header values.

OK
*/
type DeleteGroupId09OK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this delete group id09 o k response has a 2xx status code
func (o *DeleteGroupId09OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete group id09 o k response has a 3xx status code
func (o *DeleteGroupId09OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete group id09 o k response has a 4xx status code
func (o *DeleteGroupId09OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete group id09 o k response has a 5xx status code
func (o *DeleteGroupId09OK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete group id09 o k response a status code equal to that given
func (o *DeleteGroupId09OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete group id09 o k response
func (o *DeleteGroupId09OK) Code() int {
	return 200
}

func (o *DeleteGroupId09OK) Error() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/group/{ID}][%d] deleteGroupId09OK ", 200)
}

func (o *DeleteGroupId09OK) String() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/group/{ID}][%d] deleteGroupId09OK ", 200)
}

func (o *DeleteGroupId09OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewDeleteGroupId09Unauthorized creates a DeleteGroupId09Unauthorized with default headers values
func NewDeleteGroupId09Unauthorized() *DeleteGroupId09Unauthorized {
	return &DeleteGroupId09Unauthorized{}
}

/*
DeleteGroupId09Unauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteGroupId09Unauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this delete group id09 unauthorized response has a 2xx status code
func (o *DeleteGroupId09Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete group id09 unauthorized response has a 3xx status code
func (o *DeleteGroupId09Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete group id09 unauthorized response has a 4xx status code
func (o *DeleteGroupId09Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete group id09 unauthorized response has a 5xx status code
func (o *DeleteGroupId09Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete group id09 unauthorized response a status code equal to that given
func (o *DeleteGroupId09Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete group id09 unauthorized response
func (o *DeleteGroupId09Unauthorized) Code() int {
	return 401
}

func (o *DeleteGroupId09Unauthorized) Error() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/group/{ID}][%d] deleteGroupId09Unauthorized  %+v", 401, o.Payload)
}

func (o *DeleteGroupId09Unauthorized) String() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/group/{ID}][%d] deleteGroupId09Unauthorized  %+v", 401, o.Payload)
}

func (o *DeleteGroupId09Unauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *DeleteGroupId09Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupId09Forbidden creates a DeleteGroupId09Forbidden with default headers values
func NewDeleteGroupId09Forbidden() *DeleteGroupId09Forbidden {
	return &DeleteGroupId09Forbidden{}
}

/*
DeleteGroupId09Forbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteGroupId09Forbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this delete group id09 forbidden response has a 2xx status code
func (o *DeleteGroupId09Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete group id09 forbidden response has a 3xx status code
func (o *DeleteGroupId09Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete group id09 forbidden response has a 4xx status code
func (o *DeleteGroupId09Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete group id09 forbidden response has a 5xx status code
func (o *DeleteGroupId09Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete group id09 forbidden response a status code equal to that given
func (o *DeleteGroupId09Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete group id09 forbidden response
func (o *DeleteGroupId09Forbidden) Code() int {
	return 403
}

func (o *DeleteGroupId09Forbidden) Error() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/group/{ID}][%d] deleteGroupId09Forbidden  %+v", 403, o.Payload)
}

func (o *DeleteGroupId09Forbidden) String() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/group/{ID}][%d] deleteGroupId09Forbidden  %+v", 403, o.Payload)
}

func (o *DeleteGroupId09Forbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *DeleteGroupId09Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupId09TooManyRequests creates a DeleteGroupId09TooManyRequests with default headers values
func NewDeleteGroupId09TooManyRequests() *DeleteGroupId09TooManyRequests {
	return &DeleteGroupId09TooManyRequests{}
}

/*
DeleteGroupId09TooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type DeleteGroupId09TooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete group id09 too many requests response has a 2xx status code
func (o *DeleteGroupId09TooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete group id09 too many requests response has a 3xx status code
func (o *DeleteGroupId09TooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete group id09 too many requests response has a 4xx status code
func (o *DeleteGroupId09TooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete group id09 too many requests response has a 5xx status code
func (o *DeleteGroupId09TooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete group id09 too many requests response a status code equal to that given
func (o *DeleteGroupId09TooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete group id09 too many requests response
func (o *DeleteGroupId09TooManyRequests) Code() int {
	return 429
}

func (o *DeleteGroupId09TooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/group/{ID}][%d] deleteGroupId09TooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteGroupId09TooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/group/{ID}][%d] deleteGroupId09TooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteGroupId09TooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeleteGroupId09TooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupId09InternalServerError creates a DeleteGroupId09InternalServerError with default headers values
func NewDeleteGroupId09InternalServerError() *DeleteGroupId09InternalServerError {
	return &DeleteGroupId09InternalServerError{}
}

/*
DeleteGroupId09InternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type DeleteGroupId09InternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete group id09 internal server error response has a 2xx status code
func (o *DeleteGroupId09InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete group id09 internal server error response has a 3xx status code
func (o *DeleteGroupId09InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete group id09 internal server error response has a 4xx status code
func (o *DeleteGroupId09InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete group id09 internal server error response has a 5xx status code
func (o *DeleteGroupId09InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete group id09 internal server error response a status code equal to that given
func (o *DeleteGroupId09InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete group id09 internal server error response
func (o *DeleteGroupId09InternalServerError) Code() int {
	return 500
}

func (o *DeleteGroupId09InternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/group/{ID}][%d] deleteGroupId09InternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteGroupId09InternalServerError) String() string {
	return fmt.Sprintf("[DELETE /aspm-api-gateway/api/v1/group/{ID}][%d] deleteGroupId09InternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteGroupId09InternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeleteGroupId09InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
