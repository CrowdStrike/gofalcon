// Code generated by go-swagger; DO NOT EDIT.

package a_s_p_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExecuteFunctionDataReader is a Reader for the ExecuteFunctionData structure.
type ExecuteFunctionDataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecuteFunctionDataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecuteFunctionDataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExecuteFunctionDataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExecuteFunctionDataUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExecuteFunctionDataForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExecuteFunctionDataTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExecuteFunctionDataInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewExecuteFunctionDataServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /application-security/combined/function-data/v1] ExecuteFunctionData", response, response.Code())
	}
}

// NewExecuteFunctionDataOK creates a ExecuteFunctionDataOK with default headers values
func NewExecuteFunctionDataOK() *ExecuteFunctionDataOK {
	return &ExecuteFunctionDataOK{}
}

/*
ExecuteFunctionDataOK describes a response with status code 200, with default header values.

OK
*/
type ExecuteFunctionDataOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesGeneralQueryResponse
}

// IsSuccess returns true when this execute function data o k response has a 2xx status code
func (o *ExecuteFunctionDataOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this execute function data o k response has a 3xx status code
func (o *ExecuteFunctionDataOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data o k response has a 4xx status code
func (o *ExecuteFunctionDataOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute function data o k response has a 5xx status code
func (o *ExecuteFunctionDataOK) IsServerError() bool {
	return false
}

// IsCode returns true when this execute function data o k response a status code equal to that given
func (o *ExecuteFunctionDataOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the execute function data o k response
func (o *ExecuteFunctionDataOK) Code() int {
	return 200
}

func (o *ExecuteFunctionDataOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/function-data/v1][%d] executeFunctionDataOK %s", 200, payload)
}

func (o *ExecuteFunctionDataOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/function-data/v1][%d] executeFunctionDataOK %s", 200, payload)
}

func (o *ExecuteFunctionDataOK) GetPayload() *models.TypesGeneralQueryResponse {
	return o.Payload
}

func (o *ExecuteFunctionDataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesGeneralQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataBadRequest creates a ExecuteFunctionDataBadRequest with default headers values
func NewExecuteFunctionDataBadRequest() *ExecuteFunctionDataBadRequest {
	return &ExecuteFunctionDataBadRequest{}
}

/*
ExecuteFunctionDataBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExecuteFunctionDataBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute function data bad request response has a 2xx status code
func (o *ExecuteFunctionDataBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data bad request response has a 3xx status code
func (o *ExecuteFunctionDataBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data bad request response has a 4xx status code
func (o *ExecuteFunctionDataBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute function data bad request response has a 5xx status code
func (o *ExecuteFunctionDataBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this execute function data bad request response a status code equal to that given
func (o *ExecuteFunctionDataBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the execute function data bad request response
func (o *ExecuteFunctionDataBadRequest) Code() int {
	return 400
}

func (o *ExecuteFunctionDataBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/function-data/v1][%d] executeFunctionDataBadRequest %s", 400, payload)
}

func (o *ExecuteFunctionDataBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/function-data/v1][%d] executeFunctionDataBadRequest %s", 400, payload)
}

func (o *ExecuteFunctionDataBadRequest) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionDataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataUnauthorized creates a ExecuteFunctionDataUnauthorized with default headers values
func NewExecuteFunctionDataUnauthorized() *ExecuteFunctionDataUnauthorized {
	return &ExecuteFunctionDataUnauthorized{}
}

/*
ExecuteFunctionDataUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExecuteFunctionDataUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute function data unauthorized response has a 2xx status code
func (o *ExecuteFunctionDataUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data unauthorized response has a 3xx status code
func (o *ExecuteFunctionDataUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data unauthorized response has a 4xx status code
func (o *ExecuteFunctionDataUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute function data unauthorized response has a 5xx status code
func (o *ExecuteFunctionDataUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this execute function data unauthorized response a status code equal to that given
func (o *ExecuteFunctionDataUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the execute function data unauthorized response
func (o *ExecuteFunctionDataUnauthorized) Code() int {
	return 401
}

func (o *ExecuteFunctionDataUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/function-data/v1][%d] executeFunctionDataUnauthorized %s", 401, payload)
}

func (o *ExecuteFunctionDataUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/function-data/v1][%d] executeFunctionDataUnauthorized %s", 401, payload)
}

func (o *ExecuteFunctionDataUnauthorized) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionDataUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataForbidden creates a ExecuteFunctionDataForbidden with default headers values
func NewExecuteFunctionDataForbidden() *ExecuteFunctionDataForbidden {
	return &ExecuteFunctionDataForbidden{}
}

/*
ExecuteFunctionDataForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExecuteFunctionDataForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute function data forbidden response has a 2xx status code
func (o *ExecuteFunctionDataForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data forbidden response has a 3xx status code
func (o *ExecuteFunctionDataForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data forbidden response has a 4xx status code
func (o *ExecuteFunctionDataForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute function data forbidden response has a 5xx status code
func (o *ExecuteFunctionDataForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this execute function data forbidden response a status code equal to that given
func (o *ExecuteFunctionDataForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the execute function data forbidden response
func (o *ExecuteFunctionDataForbidden) Code() int {
	return 403
}

func (o *ExecuteFunctionDataForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/function-data/v1][%d] executeFunctionDataForbidden %s", 403, payload)
}

func (o *ExecuteFunctionDataForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/function-data/v1][%d] executeFunctionDataForbidden %s", 403, payload)
}

func (o *ExecuteFunctionDataForbidden) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionDataForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataTooManyRequests creates a ExecuteFunctionDataTooManyRequests with default headers values
func NewExecuteFunctionDataTooManyRequests() *ExecuteFunctionDataTooManyRequests {
	return &ExecuteFunctionDataTooManyRequests{}
}

/*
ExecuteFunctionDataTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExecuteFunctionDataTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute function data too many requests response has a 2xx status code
func (o *ExecuteFunctionDataTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data too many requests response has a 3xx status code
func (o *ExecuteFunctionDataTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data too many requests response has a 4xx status code
func (o *ExecuteFunctionDataTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute function data too many requests response has a 5xx status code
func (o *ExecuteFunctionDataTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this execute function data too many requests response a status code equal to that given
func (o *ExecuteFunctionDataTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the execute function data too many requests response
func (o *ExecuteFunctionDataTooManyRequests) Code() int {
	return 429
}

func (o *ExecuteFunctionDataTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/function-data/v1][%d] executeFunctionDataTooManyRequests %s", 429, payload)
}

func (o *ExecuteFunctionDataTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/function-data/v1][%d] executeFunctionDataTooManyRequests %s", 429, payload)
}

func (o *ExecuteFunctionDataTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteFunctionDataTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataInternalServerError creates a ExecuteFunctionDataInternalServerError with default headers values
func NewExecuteFunctionDataInternalServerError() *ExecuteFunctionDataInternalServerError {
	return &ExecuteFunctionDataInternalServerError{}
}

/*
ExecuteFunctionDataInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ExecuteFunctionDataInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute function data internal server error response has a 2xx status code
func (o *ExecuteFunctionDataInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data internal server error response has a 3xx status code
func (o *ExecuteFunctionDataInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data internal server error response has a 4xx status code
func (o *ExecuteFunctionDataInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute function data internal server error response has a 5xx status code
func (o *ExecuteFunctionDataInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this execute function data internal server error response a status code equal to that given
func (o *ExecuteFunctionDataInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the execute function data internal server error response
func (o *ExecuteFunctionDataInternalServerError) Code() int {
	return 500
}

func (o *ExecuteFunctionDataInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/function-data/v1][%d] executeFunctionDataInternalServerError %s", 500, payload)
}

func (o *ExecuteFunctionDataInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/function-data/v1][%d] executeFunctionDataInternalServerError %s", 500, payload)
}

func (o *ExecuteFunctionDataInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteFunctionDataInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteFunctionDataServiceUnavailable creates a ExecuteFunctionDataServiceUnavailable with default headers values
func NewExecuteFunctionDataServiceUnavailable() *ExecuteFunctionDataServiceUnavailable {
	return &ExecuteFunctionDataServiceUnavailable{}
}

/*
ExecuteFunctionDataServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable
*/
type ExecuteFunctionDataServiceUnavailable struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TypesErrorMessage
}

// IsSuccess returns true when this execute function data service unavailable response has a 2xx status code
func (o *ExecuteFunctionDataServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute function data service unavailable response has a 3xx status code
func (o *ExecuteFunctionDataServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute function data service unavailable response has a 4xx status code
func (o *ExecuteFunctionDataServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute function data service unavailable response has a 5xx status code
func (o *ExecuteFunctionDataServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this execute function data service unavailable response a status code equal to that given
func (o *ExecuteFunctionDataServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the execute function data service unavailable response
func (o *ExecuteFunctionDataServiceUnavailable) Code() int {
	return 503
}

func (o *ExecuteFunctionDataServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/function-data/v1][%d] executeFunctionDataServiceUnavailable %s", 503, payload)
}

func (o *ExecuteFunctionDataServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /application-security/combined/function-data/v1][%d] executeFunctionDataServiceUnavailable %s", 503, payload)
}

func (o *ExecuteFunctionDataServiceUnavailable) GetPayload() *models.TypesErrorMessage {
	return o.Payload
}

func (o *ExecuteFunctionDataServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TypesErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
