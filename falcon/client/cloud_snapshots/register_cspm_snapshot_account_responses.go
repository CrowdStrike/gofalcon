// Code generated by go-swagger; DO NOT EDIT.

package cloud_snapshots

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// RegisterCspmSnapshotAccountReader is a Reader for the RegisterCspmSnapshotAccount structure.
type RegisterCspmSnapshotAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RegisterCspmSnapshotAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRegisterCspmSnapshotAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRegisterCspmSnapshotAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRegisterCspmSnapshotAccountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewRegisterCspmSnapshotAccountTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRegisterCspmSnapshotAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /snapshots/entities/accounts/v1] RegisterCspmSnapshotAccount", response, response.Code())
	}
}

// NewRegisterCspmSnapshotAccountOK creates a RegisterCspmSnapshotAccountOK with default headers values
func NewRegisterCspmSnapshotAccountOK() *RegisterCspmSnapshotAccountOK {
	return &RegisterCspmSnapshotAccountOK{}
}

/* RegisterCspmSnapshotAccountOK describes a response with status code 200, with default header values.

OK
*/
type RegisterCspmSnapshotAccountOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ModelsAccountStatusResponse
}

// IsSuccess returns true when this register cspm snapshot account o k response has a 2xx status code
func (o *RegisterCspmSnapshotAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this register cspm snapshot account o k response has a 3xx status code
func (o *RegisterCspmSnapshotAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register cspm snapshot account o k response has a 4xx status code
func (o *RegisterCspmSnapshotAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this register cspm snapshot account o k response has a 5xx status code
func (o *RegisterCspmSnapshotAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this register cspm snapshot account o k response a status code equal to that given
func (o *RegisterCspmSnapshotAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the register cspm snapshot account o k response
func (o *RegisterCspmSnapshotAccountOK) Code() int {
	return 200
}

func (o *RegisterCspmSnapshotAccountOK) Error() string {
	return fmt.Sprintf("[POST /snapshots/entities/accounts/v1][%d] registerCspmSnapshotAccountOK  %+v", 200, o.Payload)
}

func (o *RegisterCspmSnapshotAccountOK) String() string {
	return fmt.Sprintf("[POST /snapshots/entities/accounts/v1][%d] registerCspmSnapshotAccountOK  %+v", 200, o.Payload)
}

func (o *RegisterCspmSnapshotAccountOK) GetPayload() *models.ModelsAccountStatusResponse {
	return o.Payload
}

func (o *RegisterCspmSnapshotAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ModelsAccountStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterCspmSnapshotAccountBadRequest creates a RegisterCspmSnapshotAccountBadRequest with default headers values
func NewRegisterCspmSnapshotAccountBadRequest() *RegisterCspmSnapshotAccountBadRequest {
	return &RegisterCspmSnapshotAccountBadRequest{}
}

/* RegisterCspmSnapshotAccountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RegisterCspmSnapshotAccountBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this register cspm snapshot account bad request response has a 2xx status code
func (o *RegisterCspmSnapshotAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register cspm snapshot account bad request response has a 3xx status code
func (o *RegisterCspmSnapshotAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register cspm snapshot account bad request response has a 4xx status code
func (o *RegisterCspmSnapshotAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this register cspm snapshot account bad request response has a 5xx status code
func (o *RegisterCspmSnapshotAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this register cspm snapshot account bad request response a status code equal to that given
func (o *RegisterCspmSnapshotAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the register cspm snapshot account bad request response
func (o *RegisterCspmSnapshotAccountBadRequest) Code() int {
	return 400
}

func (o *RegisterCspmSnapshotAccountBadRequest) Error() string {
	return fmt.Sprintf("[POST /snapshots/entities/accounts/v1][%d] registerCspmSnapshotAccountBadRequest  %+v", 400, o.Payload)
}

func (o *RegisterCspmSnapshotAccountBadRequest) String() string {
	return fmt.Sprintf("[POST /snapshots/entities/accounts/v1][%d] registerCspmSnapshotAccountBadRequest  %+v", 400, o.Payload)
}

func (o *RegisterCspmSnapshotAccountBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *RegisterCspmSnapshotAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterCspmSnapshotAccountForbidden creates a RegisterCspmSnapshotAccountForbidden with default headers values
func NewRegisterCspmSnapshotAccountForbidden() *RegisterCspmSnapshotAccountForbidden {
	return &RegisterCspmSnapshotAccountForbidden{}
}

/* RegisterCspmSnapshotAccountForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RegisterCspmSnapshotAccountForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this register cspm snapshot account forbidden response has a 2xx status code
func (o *RegisterCspmSnapshotAccountForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register cspm snapshot account forbidden response has a 3xx status code
func (o *RegisterCspmSnapshotAccountForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register cspm snapshot account forbidden response has a 4xx status code
func (o *RegisterCspmSnapshotAccountForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this register cspm snapshot account forbidden response has a 5xx status code
func (o *RegisterCspmSnapshotAccountForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this register cspm snapshot account forbidden response a status code equal to that given
func (o *RegisterCspmSnapshotAccountForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the register cspm snapshot account forbidden response
func (o *RegisterCspmSnapshotAccountForbidden) Code() int {
	return 403
}

func (o *RegisterCspmSnapshotAccountForbidden) Error() string {
	return fmt.Sprintf("[POST /snapshots/entities/accounts/v1][%d] registerCspmSnapshotAccountForbidden  %+v", 403, o.Payload)
}

func (o *RegisterCspmSnapshotAccountForbidden) String() string {
	return fmt.Sprintf("[POST /snapshots/entities/accounts/v1][%d] registerCspmSnapshotAccountForbidden  %+v", 403, o.Payload)
}

func (o *RegisterCspmSnapshotAccountForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *RegisterCspmSnapshotAccountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterCspmSnapshotAccountTooManyRequests creates a RegisterCspmSnapshotAccountTooManyRequests with default headers values
func NewRegisterCspmSnapshotAccountTooManyRequests() *RegisterCspmSnapshotAccountTooManyRequests {
	return &RegisterCspmSnapshotAccountTooManyRequests{}
}

/* RegisterCspmSnapshotAccountTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type RegisterCspmSnapshotAccountTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this register cspm snapshot account too many requests response has a 2xx status code
func (o *RegisterCspmSnapshotAccountTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register cspm snapshot account too many requests response has a 3xx status code
func (o *RegisterCspmSnapshotAccountTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register cspm snapshot account too many requests response has a 4xx status code
func (o *RegisterCspmSnapshotAccountTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this register cspm snapshot account too many requests response has a 5xx status code
func (o *RegisterCspmSnapshotAccountTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this register cspm snapshot account too many requests response a status code equal to that given
func (o *RegisterCspmSnapshotAccountTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the register cspm snapshot account too many requests response
func (o *RegisterCspmSnapshotAccountTooManyRequests) Code() int {
	return 429
}

func (o *RegisterCspmSnapshotAccountTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /snapshots/entities/accounts/v1][%d] registerCspmSnapshotAccountTooManyRequests  %+v", 429, o.Payload)
}

func (o *RegisterCspmSnapshotAccountTooManyRequests) String() string {
	return fmt.Sprintf("[POST /snapshots/entities/accounts/v1][%d] registerCspmSnapshotAccountTooManyRequests  %+v", 429, o.Payload)
}

func (o *RegisterCspmSnapshotAccountTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *RegisterCspmSnapshotAccountTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterCspmSnapshotAccountInternalServerError creates a RegisterCspmSnapshotAccountInternalServerError with default headers values
func NewRegisterCspmSnapshotAccountInternalServerError() *RegisterCspmSnapshotAccountInternalServerError {
	return &RegisterCspmSnapshotAccountInternalServerError{}
}

/* RegisterCspmSnapshotAccountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RegisterCspmSnapshotAccountInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this register cspm snapshot account internal server error response has a 2xx status code
func (o *RegisterCspmSnapshotAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register cspm snapshot account internal server error response has a 3xx status code
func (o *RegisterCspmSnapshotAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register cspm snapshot account internal server error response has a 4xx status code
func (o *RegisterCspmSnapshotAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this register cspm snapshot account internal server error response has a 5xx status code
func (o *RegisterCspmSnapshotAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this register cspm snapshot account internal server error response a status code equal to that given
func (o *RegisterCspmSnapshotAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the register cspm snapshot account internal server error response
func (o *RegisterCspmSnapshotAccountInternalServerError) Code() int {
	return 500
}

func (o *RegisterCspmSnapshotAccountInternalServerError) Error() string {
	return fmt.Sprintf("[POST /snapshots/entities/accounts/v1][%d] registerCspmSnapshotAccountInternalServerError  %+v", 500, o.Payload)
}

func (o *RegisterCspmSnapshotAccountInternalServerError) String() string {
	return fmt.Sprintf("[POST /snapshots/entities/accounts/v1][%d] registerCspmSnapshotAccountInternalServerError  %+v", 500, o.Payload)
}

func (o *RegisterCspmSnapshotAccountInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *RegisterCspmSnapshotAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
