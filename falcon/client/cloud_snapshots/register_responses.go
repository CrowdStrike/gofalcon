// Code generated by go-swagger; DO NOT EDIT.

package cloud_snapshots

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// RegisterReader is a Reader for the Register structure.
type RegisterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RegisterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRegisterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRegisterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRegisterForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewRegisterTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRegisterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /snapshots/entities/accounts/v1] Register", response, response.Code())
	}
}

// NewRegisterOK creates a RegisterOK with default headers values
func NewRegisterOK() *RegisterOK {
	return &RegisterOK{}
}

/*
RegisterOK describes a response with status code 200, with default header values.

OK
*/
type RegisterOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ModelsAccountStatusResponse
}

// IsSuccess returns true when this register o k response has a 2xx status code
func (o *RegisterOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this register o k response has a 3xx status code
func (o *RegisterOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register o k response has a 4xx status code
func (o *RegisterOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this register o k response has a 5xx status code
func (o *RegisterOK) IsServerError() bool {
	return false
}

// IsCode returns true when this register o k response a status code equal to that given
func (o *RegisterOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the register o k response
func (o *RegisterOK) Code() int {
	return 200
}

func (o *RegisterOK) Error() string {
	return fmt.Sprintf("[POST /snapshots/entities/accounts/v1][%d] registerOK  %+v", 200, o.Payload)
}

func (o *RegisterOK) String() string {
	return fmt.Sprintf("[POST /snapshots/entities/accounts/v1][%d] registerOK  %+v", 200, o.Payload)
}

func (o *RegisterOK) GetPayload() *models.ModelsAccountStatusResponse {
	return o.Payload
}

func (o *RegisterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ModelsAccountStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterBadRequest creates a RegisterBadRequest with default headers values
func NewRegisterBadRequest() *RegisterBadRequest {
	return &RegisterBadRequest{}
}

/*
RegisterBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RegisterBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this register bad request response has a 2xx status code
func (o *RegisterBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register bad request response has a 3xx status code
func (o *RegisterBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register bad request response has a 4xx status code
func (o *RegisterBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this register bad request response has a 5xx status code
func (o *RegisterBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this register bad request response a status code equal to that given
func (o *RegisterBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the register bad request response
func (o *RegisterBadRequest) Code() int {
	return 400
}

func (o *RegisterBadRequest) Error() string {
	return fmt.Sprintf("[POST /snapshots/entities/accounts/v1][%d] registerBadRequest  %+v", 400, o.Payload)
}

func (o *RegisterBadRequest) String() string {
	return fmt.Sprintf("[POST /snapshots/entities/accounts/v1][%d] registerBadRequest  %+v", 400, o.Payload)
}

func (o *RegisterBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *RegisterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterForbidden creates a RegisterForbidden with default headers values
func NewRegisterForbidden() *RegisterForbidden {
	return &RegisterForbidden{}
}

/*
RegisterForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RegisterForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this register forbidden response has a 2xx status code
func (o *RegisterForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register forbidden response has a 3xx status code
func (o *RegisterForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register forbidden response has a 4xx status code
func (o *RegisterForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this register forbidden response has a 5xx status code
func (o *RegisterForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this register forbidden response a status code equal to that given
func (o *RegisterForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the register forbidden response
func (o *RegisterForbidden) Code() int {
	return 403
}

func (o *RegisterForbidden) Error() string {
	return fmt.Sprintf("[POST /snapshots/entities/accounts/v1][%d] registerForbidden  %+v", 403, o.Payload)
}

func (o *RegisterForbidden) String() string {
	return fmt.Sprintf("[POST /snapshots/entities/accounts/v1][%d] registerForbidden  %+v", 403, o.Payload)
}

func (o *RegisterForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *RegisterForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterTooManyRequests creates a RegisterTooManyRequests with default headers values
func NewRegisterTooManyRequests() *RegisterTooManyRequests {
	return &RegisterTooManyRequests{}
}

/*
RegisterTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type RegisterTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this register too many requests response has a 2xx status code
func (o *RegisterTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register too many requests response has a 3xx status code
func (o *RegisterTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register too many requests response has a 4xx status code
func (o *RegisterTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this register too many requests response has a 5xx status code
func (o *RegisterTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this register too many requests response a status code equal to that given
func (o *RegisterTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the register too many requests response
func (o *RegisterTooManyRequests) Code() int {
	return 429
}

func (o *RegisterTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /snapshots/entities/accounts/v1][%d] registerTooManyRequests  %+v", 429, o.Payload)
}

func (o *RegisterTooManyRequests) String() string {
	return fmt.Sprintf("[POST /snapshots/entities/accounts/v1][%d] registerTooManyRequests  %+v", 429, o.Payload)
}

func (o *RegisterTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *RegisterTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterInternalServerError creates a RegisterInternalServerError with default headers values
func NewRegisterInternalServerError() *RegisterInternalServerError {
	return &RegisterInternalServerError{}
}

/*
RegisterInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RegisterInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this register internal server error response has a 2xx status code
func (o *RegisterInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register internal server error response has a 3xx status code
func (o *RegisterInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register internal server error response has a 4xx status code
func (o *RegisterInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this register internal server error response has a 5xx status code
func (o *RegisterInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this register internal server error response a status code equal to that given
func (o *RegisterInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the register internal server error response
func (o *RegisterInternalServerError) Code() int {
	return 500
}

func (o *RegisterInternalServerError) Error() string {
	return fmt.Sprintf("[POST /snapshots/entities/accounts/v1][%d] registerInternalServerError  %+v", 500, o.Payload)
}

func (o *RegisterInternalServerError) String() string {
	return fmt.Sprintf("[POST /snapshots/entities/accounts/v1][%d] registerInternalServerError  %+v", 500, o.Payload)
}

func (o *RegisterInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *RegisterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
