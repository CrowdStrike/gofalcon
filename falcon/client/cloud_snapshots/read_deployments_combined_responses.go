// Code generated by go-swagger; DO NOT EDIT.

package cloud_snapshots

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ReadDeploymentsCombinedReader is a Reader for the ReadDeploymentsCombined structure.
type ReadDeploymentsCombinedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadDeploymentsCombinedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadDeploymentsCombinedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReadDeploymentsCombinedBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReadDeploymentsCombinedForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewReadDeploymentsCombinedTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadDeploymentsCombinedInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /snapshots/combined/deployments/v1] ReadDeploymentsCombined", response, response.Code())
	}
}

// NewReadDeploymentsCombinedOK creates a ReadDeploymentsCombinedOK with default headers values
func NewReadDeploymentsCombinedOK() *ReadDeploymentsCombinedOK {
	return &ReadDeploymentsCombinedOK{}
}

/*
ReadDeploymentsCombinedOK describes a response with status code 200, with default header values.

OK
*/
type ReadDeploymentsCombinedOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DeploymentsEntityResponse
}

// IsSuccess returns true when this read deployments combined o k response has a 2xx status code
func (o *ReadDeploymentsCombinedOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this read deployments combined o k response has a 3xx status code
func (o *ReadDeploymentsCombinedOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read deployments combined o k response has a 4xx status code
func (o *ReadDeploymentsCombinedOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this read deployments combined o k response has a 5xx status code
func (o *ReadDeploymentsCombinedOK) IsServerError() bool {
	return false
}

// IsCode returns true when this read deployments combined o k response a status code equal to that given
func (o *ReadDeploymentsCombinedOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the read deployments combined o k response
func (o *ReadDeploymentsCombinedOK) Code() int {
	return 200
}

func (o *ReadDeploymentsCombinedOK) Error() string {
	return fmt.Sprintf("[GET /snapshots/combined/deployments/v1][%d] readDeploymentsCombinedOK  %+v", 200, o.Payload)
}

func (o *ReadDeploymentsCombinedOK) String() string {
	return fmt.Sprintf("[GET /snapshots/combined/deployments/v1][%d] readDeploymentsCombinedOK  %+v", 200, o.Payload)
}

func (o *ReadDeploymentsCombinedOK) GetPayload() *models.DeploymentsEntityResponse {
	return o.Payload
}

func (o *ReadDeploymentsCombinedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DeploymentsEntityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadDeploymentsCombinedBadRequest creates a ReadDeploymentsCombinedBadRequest with default headers values
func NewReadDeploymentsCombinedBadRequest() *ReadDeploymentsCombinedBadRequest {
	return &ReadDeploymentsCombinedBadRequest{}
}

/*
ReadDeploymentsCombinedBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ReadDeploymentsCombinedBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this read deployments combined bad request response has a 2xx status code
func (o *ReadDeploymentsCombinedBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read deployments combined bad request response has a 3xx status code
func (o *ReadDeploymentsCombinedBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read deployments combined bad request response has a 4xx status code
func (o *ReadDeploymentsCombinedBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this read deployments combined bad request response has a 5xx status code
func (o *ReadDeploymentsCombinedBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this read deployments combined bad request response a status code equal to that given
func (o *ReadDeploymentsCombinedBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the read deployments combined bad request response
func (o *ReadDeploymentsCombinedBadRequest) Code() int {
	return 400
}

func (o *ReadDeploymentsCombinedBadRequest) Error() string {
	return fmt.Sprintf("[GET /snapshots/combined/deployments/v1][%d] readDeploymentsCombinedBadRequest  %+v", 400, o.Payload)
}

func (o *ReadDeploymentsCombinedBadRequest) String() string {
	return fmt.Sprintf("[GET /snapshots/combined/deployments/v1][%d] readDeploymentsCombinedBadRequest  %+v", 400, o.Payload)
}

func (o *ReadDeploymentsCombinedBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ReadDeploymentsCombinedBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadDeploymentsCombinedForbidden creates a ReadDeploymentsCombinedForbidden with default headers values
func NewReadDeploymentsCombinedForbidden() *ReadDeploymentsCombinedForbidden {
	return &ReadDeploymentsCombinedForbidden{}
}

/*
ReadDeploymentsCombinedForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ReadDeploymentsCombinedForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this read deployments combined forbidden response has a 2xx status code
func (o *ReadDeploymentsCombinedForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read deployments combined forbidden response has a 3xx status code
func (o *ReadDeploymentsCombinedForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read deployments combined forbidden response has a 4xx status code
func (o *ReadDeploymentsCombinedForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this read deployments combined forbidden response has a 5xx status code
func (o *ReadDeploymentsCombinedForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this read deployments combined forbidden response a status code equal to that given
func (o *ReadDeploymentsCombinedForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the read deployments combined forbidden response
func (o *ReadDeploymentsCombinedForbidden) Code() int {
	return 403
}

func (o *ReadDeploymentsCombinedForbidden) Error() string {
	return fmt.Sprintf("[GET /snapshots/combined/deployments/v1][%d] readDeploymentsCombinedForbidden  %+v", 403, o.Payload)
}

func (o *ReadDeploymentsCombinedForbidden) String() string {
	return fmt.Sprintf("[GET /snapshots/combined/deployments/v1][%d] readDeploymentsCombinedForbidden  %+v", 403, o.Payload)
}

func (o *ReadDeploymentsCombinedForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ReadDeploymentsCombinedForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadDeploymentsCombinedTooManyRequests creates a ReadDeploymentsCombinedTooManyRequests with default headers values
func NewReadDeploymentsCombinedTooManyRequests() *ReadDeploymentsCombinedTooManyRequests {
	return &ReadDeploymentsCombinedTooManyRequests{}
}

/*
ReadDeploymentsCombinedTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ReadDeploymentsCombinedTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this read deployments combined too many requests response has a 2xx status code
func (o *ReadDeploymentsCombinedTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read deployments combined too many requests response has a 3xx status code
func (o *ReadDeploymentsCombinedTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read deployments combined too many requests response has a 4xx status code
func (o *ReadDeploymentsCombinedTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this read deployments combined too many requests response has a 5xx status code
func (o *ReadDeploymentsCombinedTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this read deployments combined too many requests response a status code equal to that given
func (o *ReadDeploymentsCombinedTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the read deployments combined too many requests response
func (o *ReadDeploymentsCombinedTooManyRequests) Code() int {
	return 429
}

func (o *ReadDeploymentsCombinedTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /snapshots/combined/deployments/v1][%d] readDeploymentsCombinedTooManyRequests  %+v", 429, o.Payload)
}

func (o *ReadDeploymentsCombinedTooManyRequests) String() string {
	return fmt.Sprintf("[GET /snapshots/combined/deployments/v1][%d] readDeploymentsCombinedTooManyRequests  %+v", 429, o.Payload)
}

func (o *ReadDeploymentsCombinedTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ReadDeploymentsCombinedTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadDeploymentsCombinedInternalServerError creates a ReadDeploymentsCombinedInternalServerError with default headers values
func NewReadDeploymentsCombinedInternalServerError() *ReadDeploymentsCombinedInternalServerError {
	return &ReadDeploymentsCombinedInternalServerError{}
}

/*
ReadDeploymentsCombinedInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ReadDeploymentsCombinedInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this read deployments combined internal server error response has a 2xx status code
func (o *ReadDeploymentsCombinedInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read deployments combined internal server error response has a 3xx status code
func (o *ReadDeploymentsCombinedInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read deployments combined internal server error response has a 4xx status code
func (o *ReadDeploymentsCombinedInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this read deployments combined internal server error response has a 5xx status code
func (o *ReadDeploymentsCombinedInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this read deployments combined internal server error response a status code equal to that given
func (o *ReadDeploymentsCombinedInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the read deployments combined internal server error response
func (o *ReadDeploymentsCombinedInternalServerError) Code() int {
	return 500
}

func (o *ReadDeploymentsCombinedInternalServerError) Error() string {
	return fmt.Sprintf("[GET /snapshots/combined/deployments/v1][%d] readDeploymentsCombinedInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadDeploymentsCombinedInternalServerError) String() string {
	return fmt.Sprintf("[GET /snapshots/combined/deployments/v1][%d] readDeploymentsCombinedInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadDeploymentsCombinedInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ReadDeploymentsCombinedInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
