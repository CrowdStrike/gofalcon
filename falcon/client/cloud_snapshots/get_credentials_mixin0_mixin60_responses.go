// Code generated by go-swagger; DO NOT EDIT.

package cloud_snapshots

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetCredentialsMixin0Mixin60Reader is a Reader for the GetCredentialsMixin0Mixin60 structure.
type GetCredentialsMixin0Mixin60Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCredentialsMixin0Mixin60Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCredentialsMixin0Mixin60OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCredentialsMixin0Mixin60BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetCredentialsMixin0Mixin60Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCredentialsMixin0Mixin60Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetCredentialsMixin0Mixin60TooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCredentialsMixin0Mixin60InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /snapshots/entities/image-registry-credentials/v1] GetCredentialsMixin0Mixin60", response, response.Code())
	}
}

// NewGetCredentialsMixin0Mixin60OK creates a GetCredentialsMixin0Mixin60OK with default headers values
func NewGetCredentialsMixin0Mixin60OK() *GetCredentialsMixin0Mixin60OK {
	return &GetCredentialsMixin0Mixin60OK{}
}

/*
GetCredentialsMixin0Mixin60OK describes a response with status code 200, with default header values.

OK
*/
type GetCredentialsMixin0Mixin60OK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ModelsRegistryCredentialsResponse
}

// IsSuccess returns true when this get credentials mixin0 mixin60 o k response has a 2xx status code
func (o *GetCredentialsMixin0Mixin60OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get credentials mixin0 mixin60 o k response has a 3xx status code
func (o *GetCredentialsMixin0Mixin60OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get credentials mixin0 mixin60 o k response has a 4xx status code
func (o *GetCredentialsMixin0Mixin60OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get credentials mixin0 mixin60 o k response has a 5xx status code
func (o *GetCredentialsMixin0Mixin60OK) IsServerError() bool {
	return false
}

// IsCode returns true when this get credentials mixin0 mixin60 o k response a status code equal to that given
func (o *GetCredentialsMixin0Mixin60OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get credentials mixin0 mixin60 o k response
func (o *GetCredentialsMixin0Mixin60OK) Code() int {
	return 200
}

func (o *GetCredentialsMixin0Mixin60OK) Error() string {
	return fmt.Sprintf("[GET /snapshots/entities/image-registry-credentials/v1][%d] getCredentialsMixin0Mixin60OK  %+v", 200, o.Payload)
}

func (o *GetCredentialsMixin0Mixin60OK) String() string {
	return fmt.Sprintf("[GET /snapshots/entities/image-registry-credentials/v1][%d] getCredentialsMixin0Mixin60OK  %+v", 200, o.Payload)
}

func (o *GetCredentialsMixin0Mixin60OK) GetPayload() *models.ModelsRegistryCredentialsResponse {
	return o.Payload
}

func (o *GetCredentialsMixin0Mixin60OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ModelsRegistryCredentialsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCredentialsMixin0Mixin60BadRequest creates a GetCredentialsMixin0Mixin60BadRequest with default headers values
func NewGetCredentialsMixin0Mixin60BadRequest() *GetCredentialsMixin0Mixin60BadRequest {
	return &GetCredentialsMixin0Mixin60BadRequest{}
}

/*
GetCredentialsMixin0Mixin60BadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetCredentialsMixin0Mixin60BadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaAPIError
}

// IsSuccess returns true when this get credentials mixin0 mixin60 bad request response has a 2xx status code
func (o *GetCredentialsMixin0Mixin60BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get credentials mixin0 mixin60 bad request response has a 3xx status code
func (o *GetCredentialsMixin0Mixin60BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get credentials mixin0 mixin60 bad request response has a 4xx status code
func (o *GetCredentialsMixin0Mixin60BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get credentials mixin0 mixin60 bad request response has a 5xx status code
func (o *GetCredentialsMixin0Mixin60BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get credentials mixin0 mixin60 bad request response a status code equal to that given
func (o *GetCredentialsMixin0Mixin60BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get credentials mixin0 mixin60 bad request response
func (o *GetCredentialsMixin0Mixin60BadRequest) Code() int {
	return 400
}

func (o *GetCredentialsMixin0Mixin60BadRequest) Error() string {
	return fmt.Sprintf("[GET /snapshots/entities/image-registry-credentials/v1][%d] getCredentialsMixin0Mixin60BadRequest  %+v", 400, o.Payload)
}

func (o *GetCredentialsMixin0Mixin60BadRequest) String() string {
	return fmt.Sprintf("[GET /snapshots/entities/image-registry-credentials/v1][%d] getCredentialsMixin0Mixin60BadRequest  %+v", 400, o.Payload)
}

func (o *GetCredentialsMixin0Mixin60BadRequest) GetPayload() *models.MsaAPIError {
	return o.Payload
}

func (o *GetCredentialsMixin0Mixin60BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCredentialsMixin0Mixin60Unauthorized creates a GetCredentialsMixin0Mixin60Unauthorized with default headers values
func NewGetCredentialsMixin0Mixin60Unauthorized() *GetCredentialsMixin0Mixin60Unauthorized {
	return &GetCredentialsMixin0Mixin60Unauthorized{}
}

/*
GetCredentialsMixin0Mixin60Unauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetCredentialsMixin0Mixin60Unauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaAPIError
}

// IsSuccess returns true when this get credentials mixin0 mixin60 unauthorized response has a 2xx status code
func (o *GetCredentialsMixin0Mixin60Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get credentials mixin0 mixin60 unauthorized response has a 3xx status code
func (o *GetCredentialsMixin0Mixin60Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get credentials mixin0 mixin60 unauthorized response has a 4xx status code
func (o *GetCredentialsMixin0Mixin60Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get credentials mixin0 mixin60 unauthorized response has a 5xx status code
func (o *GetCredentialsMixin0Mixin60Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get credentials mixin0 mixin60 unauthorized response a status code equal to that given
func (o *GetCredentialsMixin0Mixin60Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get credentials mixin0 mixin60 unauthorized response
func (o *GetCredentialsMixin0Mixin60Unauthorized) Code() int {
	return 401
}

func (o *GetCredentialsMixin0Mixin60Unauthorized) Error() string {
	return fmt.Sprintf("[GET /snapshots/entities/image-registry-credentials/v1][%d] getCredentialsMixin0Mixin60Unauthorized  %+v", 401, o.Payload)
}

func (o *GetCredentialsMixin0Mixin60Unauthorized) String() string {
	return fmt.Sprintf("[GET /snapshots/entities/image-registry-credentials/v1][%d] getCredentialsMixin0Mixin60Unauthorized  %+v", 401, o.Payload)
}

func (o *GetCredentialsMixin0Mixin60Unauthorized) GetPayload() *models.MsaAPIError {
	return o.Payload
}

func (o *GetCredentialsMixin0Mixin60Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCredentialsMixin0Mixin60Forbidden creates a GetCredentialsMixin0Mixin60Forbidden with default headers values
func NewGetCredentialsMixin0Mixin60Forbidden() *GetCredentialsMixin0Mixin60Forbidden {
	return &GetCredentialsMixin0Mixin60Forbidden{}
}

/*
GetCredentialsMixin0Mixin60Forbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetCredentialsMixin0Mixin60Forbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaAPIError
}

// IsSuccess returns true when this get credentials mixin0 mixin60 forbidden response has a 2xx status code
func (o *GetCredentialsMixin0Mixin60Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get credentials mixin0 mixin60 forbidden response has a 3xx status code
func (o *GetCredentialsMixin0Mixin60Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get credentials mixin0 mixin60 forbidden response has a 4xx status code
func (o *GetCredentialsMixin0Mixin60Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get credentials mixin0 mixin60 forbidden response has a 5xx status code
func (o *GetCredentialsMixin0Mixin60Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get credentials mixin0 mixin60 forbidden response a status code equal to that given
func (o *GetCredentialsMixin0Mixin60Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get credentials mixin0 mixin60 forbidden response
func (o *GetCredentialsMixin0Mixin60Forbidden) Code() int {
	return 403
}

func (o *GetCredentialsMixin0Mixin60Forbidden) Error() string {
	return fmt.Sprintf("[GET /snapshots/entities/image-registry-credentials/v1][%d] getCredentialsMixin0Mixin60Forbidden  %+v", 403, o.Payload)
}

func (o *GetCredentialsMixin0Mixin60Forbidden) String() string {
	return fmt.Sprintf("[GET /snapshots/entities/image-registry-credentials/v1][%d] getCredentialsMixin0Mixin60Forbidden  %+v", 403, o.Payload)
}

func (o *GetCredentialsMixin0Mixin60Forbidden) GetPayload() *models.MsaAPIError {
	return o.Payload
}

func (o *GetCredentialsMixin0Mixin60Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCredentialsMixin0Mixin60TooManyRequests creates a GetCredentialsMixin0Mixin60TooManyRequests with default headers values
func NewGetCredentialsMixin0Mixin60TooManyRequests() *GetCredentialsMixin0Mixin60TooManyRequests {
	return &GetCredentialsMixin0Mixin60TooManyRequests{}
}

/*
GetCredentialsMixin0Mixin60TooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetCredentialsMixin0Mixin60TooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get credentials mixin0 mixin60 too many requests response has a 2xx status code
func (o *GetCredentialsMixin0Mixin60TooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get credentials mixin0 mixin60 too many requests response has a 3xx status code
func (o *GetCredentialsMixin0Mixin60TooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get credentials mixin0 mixin60 too many requests response has a 4xx status code
func (o *GetCredentialsMixin0Mixin60TooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get credentials mixin0 mixin60 too many requests response has a 5xx status code
func (o *GetCredentialsMixin0Mixin60TooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get credentials mixin0 mixin60 too many requests response a status code equal to that given
func (o *GetCredentialsMixin0Mixin60TooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get credentials mixin0 mixin60 too many requests response
func (o *GetCredentialsMixin0Mixin60TooManyRequests) Code() int {
	return 429
}

func (o *GetCredentialsMixin0Mixin60TooManyRequests) Error() string {
	return fmt.Sprintf("[GET /snapshots/entities/image-registry-credentials/v1][%d] getCredentialsMixin0Mixin60TooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCredentialsMixin0Mixin60TooManyRequests) String() string {
	return fmt.Sprintf("[GET /snapshots/entities/image-registry-credentials/v1][%d] getCredentialsMixin0Mixin60TooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCredentialsMixin0Mixin60TooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetCredentialsMixin0Mixin60TooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCredentialsMixin0Mixin60InternalServerError creates a GetCredentialsMixin0Mixin60InternalServerError with default headers values
func NewGetCredentialsMixin0Mixin60InternalServerError() *GetCredentialsMixin0Mixin60InternalServerError {
	return &GetCredentialsMixin0Mixin60InternalServerError{}
}

/*
GetCredentialsMixin0Mixin60InternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetCredentialsMixin0Mixin60InternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ModelsRegistryCredentialsResponse
}

// IsSuccess returns true when this get credentials mixin0 mixin60 internal server error response has a 2xx status code
func (o *GetCredentialsMixin0Mixin60InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get credentials mixin0 mixin60 internal server error response has a 3xx status code
func (o *GetCredentialsMixin0Mixin60InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get credentials mixin0 mixin60 internal server error response has a 4xx status code
func (o *GetCredentialsMixin0Mixin60InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get credentials mixin0 mixin60 internal server error response has a 5xx status code
func (o *GetCredentialsMixin0Mixin60InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get credentials mixin0 mixin60 internal server error response a status code equal to that given
func (o *GetCredentialsMixin0Mixin60InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get credentials mixin0 mixin60 internal server error response
func (o *GetCredentialsMixin0Mixin60InternalServerError) Code() int {
	return 500
}

func (o *GetCredentialsMixin0Mixin60InternalServerError) Error() string {
	return fmt.Sprintf("[GET /snapshots/entities/image-registry-credentials/v1][%d] getCredentialsMixin0Mixin60InternalServerError  %+v", 500, o.Payload)
}

func (o *GetCredentialsMixin0Mixin60InternalServerError) String() string {
	return fmt.Sprintf("[GET /snapshots/entities/image-registry-credentials/v1][%d] getCredentialsMixin0Mixin60InternalServerError  %+v", 500, o.Payload)
}

func (o *GetCredentialsMixin0Mixin60InternalServerError) GetPayload() *models.ModelsRegistryCredentialsResponse {
	return o.Payload
}

func (o *GetCredentialsMixin0Mixin60InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ModelsRegistryCredentialsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
