// Code generated by go-swagger; DO NOT EDIT.

package exposure_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetEcosystemSubsidiariesParams creates a new GetEcosystemSubsidiariesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetEcosystemSubsidiariesParams() *GetEcosystemSubsidiariesParams {
	return &GetEcosystemSubsidiariesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetEcosystemSubsidiariesParamsWithTimeout creates a new GetEcosystemSubsidiariesParams object
// with the ability to set a timeout on a request.
func NewGetEcosystemSubsidiariesParamsWithTimeout(timeout time.Duration) *GetEcosystemSubsidiariesParams {
	return &GetEcosystemSubsidiariesParams{
		timeout: timeout,
	}
}

// NewGetEcosystemSubsidiariesParamsWithContext creates a new GetEcosystemSubsidiariesParams object
// with the ability to set a context for a request.
func NewGetEcosystemSubsidiariesParamsWithContext(ctx context.Context) *GetEcosystemSubsidiariesParams {
	return &GetEcosystemSubsidiariesParams{
		Context: ctx,
	}
}

// NewGetEcosystemSubsidiariesParamsWithHTTPClient creates a new GetEcosystemSubsidiariesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetEcosystemSubsidiariesParamsWithHTTPClient(client *http.Client) *GetEcosystemSubsidiariesParams {
	return &GetEcosystemSubsidiariesParams{
		HTTPClient: client,
	}
}

/*
GetEcosystemSubsidiariesParams contains all the parameters to send to the API endpoint

	for the get ecosystem subsidiaries operation.

	Typically these are written to a http.Request.
*/
type GetEcosystemSubsidiariesParams struct {

	/* Ids.

	   One or more asset IDs (max: 100). Find ecosystem subsidiary IDs with GET `/fem/entities/ecosystem-subsidiaries/v1`
	*/
	Ids []string

	/* VersionID.

	   The version ID of the ecosystem subsidiaries data, represented as a hash string. This parameter is required to ensure data consistency and prevent stale data. If a new version of the ecosystem subsidiaries data is written, the version ID will be updated. By including this parameter in the request, the client can ensure that the response will be invalidated if a new version is written.
	*/
	VersionID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get ecosystem subsidiaries params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetEcosystemSubsidiariesParams) WithDefaults() *GetEcosystemSubsidiariesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get ecosystem subsidiaries params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetEcosystemSubsidiariesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get ecosystem subsidiaries params
func (o *GetEcosystemSubsidiariesParams) WithTimeout(timeout time.Duration) *GetEcosystemSubsidiariesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get ecosystem subsidiaries params
func (o *GetEcosystemSubsidiariesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get ecosystem subsidiaries params
func (o *GetEcosystemSubsidiariesParams) WithContext(ctx context.Context) *GetEcosystemSubsidiariesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get ecosystem subsidiaries params
func (o *GetEcosystemSubsidiariesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get ecosystem subsidiaries params
func (o *GetEcosystemSubsidiariesParams) WithHTTPClient(client *http.Client) *GetEcosystemSubsidiariesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get ecosystem subsidiaries params
func (o *GetEcosystemSubsidiariesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIds adds the ids to the get ecosystem subsidiaries params
func (o *GetEcosystemSubsidiariesParams) WithIds(ids []string) *GetEcosystemSubsidiariesParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get ecosystem subsidiaries params
func (o *GetEcosystemSubsidiariesParams) SetIds(ids []string) {
	o.Ids = ids
}

// WithVersionID adds the versionID to the get ecosystem subsidiaries params
func (o *GetEcosystemSubsidiariesParams) WithVersionID(versionID *string) *GetEcosystemSubsidiariesParams {
	o.SetVersionID(versionID)
	return o
}

// SetVersionID adds the versionId to the get ecosystem subsidiaries params
func (o *GetEcosystemSubsidiariesParams) SetVersionID(versionID *string) {
	o.VersionID = versionID
}

// WriteToRequest writes these params to a swagger request
func (o *GetEcosystemSubsidiariesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.VersionID != nil {

		// query param version_id
		var qrVersionID string

		if o.VersionID != nil {
			qrVersionID = *o.VersionID
		}
		qVersionID := qrVersionID
		if qVersionID != "" {

			if err := r.SetQueryParam("version_id", qVersionID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetEcosystemSubsidiaries binds the parameter ids
func (o *GetEcosystemSubsidiariesParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []string

		idsIIV := idsIIR // string as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: "multi"
	idsIS := swag.JoinByFormat(idsIC, "multi")

	return idsIS
}
