// Code generated by go-swagger; DO NOT EDIT.

package exposure_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewQueryExternalAssetsParams creates a new QueryExternalAssetsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewQueryExternalAssetsParams() *QueryExternalAssetsParams {
	return &QueryExternalAssetsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewQueryExternalAssetsParamsWithTimeout creates a new QueryExternalAssetsParams object
// with the ability to set a timeout on a request.
func NewQueryExternalAssetsParamsWithTimeout(timeout time.Duration) *QueryExternalAssetsParams {
	return &QueryExternalAssetsParams{
		timeout: timeout,
	}
}

// NewQueryExternalAssetsParamsWithContext creates a new QueryExternalAssetsParams object
// with the ability to set a context for a request.
func NewQueryExternalAssetsParamsWithContext(ctx context.Context) *QueryExternalAssetsParams {
	return &QueryExternalAssetsParams{
		Context: ctx,
	}
}

// NewQueryExternalAssetsParamsWithHTTPClient creates a new QueryExternalAssetsParams object
// with the ability to set a custom HTTPClient for a request.
func NewQueryExternalAssetsParamsWithHTTPClient(client *http.Client) *QueryExternalAssetsParams {
	return &QueryExternalAssetsParams{
		HTTPClient: client,
	}
}

/*
QueryExternalAssetsParams contains all the parameters to send to the API endpoint

	for the query external assets operation.

	Typically these are written to a http.Request.
*/
type QueryExternalAssetsParams struct {

	/* Filter.

	     Filter assets using an FQL query. Common filter options include:<ul><li>asset_type:'ip'</li><li>last_seen_timestamp:>'now-7d'</li></ul>
				</br>Available filter fields that support exact match: asset_id, asset_type, confidence, connectivity_status, criticality, criticality_description, criticality_timestamp, criticality_username, data_providers, discovered_by, dns_domain.fqdn, dns_domain.isps, dns_domain.parent_domain, dns_domain.resolved_ips, dns_domain.services.applications.category, dns_domain.services.applications.cpe, dns_domain.services.applications.name, dns_domain.services.applications.vendor, dns_domain.services.applications.version, dns_domain.services.cloud_provider, dns_domain.services.cpes, dns_domain.services.hosting_provider, dns_domain.services.last_seen, dns_domain.services.platform_name, dns_domain.services.port, dns_domain.services.protocol, dns_domain.services.protocol_port, dns_domain.services.status, dns_domain.services.status_code, dns_domain.services.transport, dns_domain.type, first_seen, id, internet_exposure, ip.asn, ip.cloud_vm.description, ip.cloud_vm.instance_id, ip.cloud_vm.lifecycle, ip.cloud_vm.mac_address, ip.cloud_vm.owner_id, ip.cloud_vm.platform, ip.cloud_vm.private_ip, ip.cloud_vm.public_ip, ip.cloud_vm.region, ip.cloud_vm.security_groups, ip.cloud_vm.source, ip.cloud_vm.status, ip.fqdns, ip.ip_address, ip.isp, ip.location.area_code, ip.location.city, ip.location.country_code, ip.location.country_name, ip.location.postal_code, ip.location.region_code, ip.location.region_name, ip.location.timezone, ip.ptr, ip.aid, ip.services.applications.category, ip.services.applications.cpe, ip.services.applications.name, ip.services.applications.vendor, ip.services.applications.version, ip.services.cloud_provider, ip.services.cpes, ip.services.first_seen, ip.services.last_seen, ip.services.platform_name, ip.services.port, ip.services.protocol, ip.services.protocol_port, ip.services.status, ip.services.status_code, ip.services.transport, last_seen, manual, perimeter, subsidiaries.id, subsidiaries.name, triage.action, triage.assigned_to, triage.description, triage.status, triage.updated_by, triage.updated_timestamp
				</br>Available filter fields that supports wildcard (*): asset_id, asset_type, confidence, connectivity_status, criticality, criticality_username, data_providers, discovered_by, dns_domain.fqdn, dns_domain.isps, dns_domain.parent_domain, dns_domain.resolved_ips, dns_domain.services.applications.category, dns_domain.services.applications.cpe, dns_domain.services.applications.name, dns_domain.services.applications.vendor, dns_domain.services.applications.version, dns_domain.services.cloud_provider, dns_domain.services.cpes, dns_domain.services.hosting_provider, dns_domain.services.id, dns_domain.services.platform_name, dns_domain.services.port, dns_domain.services.protocol, dns_domain.services.protocol_port, dns_domain.services.status, dns_domain.services.status_code, dns_domain.services.transport, dns_domain.type, id, internet_exposure, ip.asn, ip.cloud_vm.instance_id, ip.cloud_vm.lifecycle, ip.cloud_vm.mac_address, ip.cloud_vm.owner_id, ip.cloud_vm.platform, ip.cloud_vm.private_ip, ip.cloud_vm.public_ip, ip.cloud_vm.region, ip.cloud_vm.security_groups, ip.cloud_vm.source, ip.cloud_vm.status, ip.fqdns, ip.ip_address, ip.isp, ip.location.area_code, ip.location.city, ip.location.country_code, ip.location.country_name, ip.location.postal_code, ip.location.region_code, ip.location.region_name, ip.location.timezone, ip.ptr, ip.aid, ip.services.applications.category, ip.services.applications.cpe, ip.services.applications.name, ip.services.applications.vendor, ip.services.applications.version, ip.services.cloud_provider, ip.services.cpes, ip.services.platform_name, ip.services.port, ip.services.protocol, ip.services.protocol_port, ip.services.status, ip.services.status_code, ip.services.transport, manual, perimeter, subsidiaries.id, subsidiaries.name, triage.action, triage.assigned_to, triage.description, triage.status, triage.updated_by
				</br>Available filter fields that supports in ([v1, v2]): asset_id, asset_type, confidence, connectivity_status, criticality, criticality_username, data_providers, discovered_by, dns_domain.fqdn, dns_domain.isps, dns_domain.parent_domain, dns_domain.services.applications.category, dns_domain.services.applications.cpe, dns_domain.services.applications.name, dns_domain.services.applications.vendor, dns_domain.services.applications.version, dns_domain.services.cloud_provider, dns_domain.services.cpes, dns_domain.services.id, dns_domain.services.platform_name, dns_domain.services.port, dns_domain.services.protocol, dns_domain.services.protocol_port, dns_domain.services.status, dns_domain.services.status_code, dns_domain.services.transport, dns_domain.type, id, internet_exposure, ip.asn, ip.cloud_vm.instance_id, ip.cloud_vm.lifecycle, ip.cloud_vm.mac_address, ip.cloud_vm.owner_id, ip.cloud_vm.platform, ip.cloud_vm.region, ip.cloud_vm.security_groups, ip.cloud_vm.source, ip.cloud_vm.status, ip.fqdns, ip.isp, ip.location.area_code, ip.location.city, ip.location.country_code, ip.location.country_name, ip.location.postal_code, ip.location.region_code, ip.location.region_name, ip.location.timezone, ip.ptr, ip.aid, ip.services.applications.category, ip.services.applications.cpe, ip.services.applications.name, ip.services.applications.vendor, ip.services.applications.version, ip.services.cloud_provider, ip.services.cpes, ip.services.platform_name, ip.services.port, ip.services.protocol, ip.services.protocol_port, ip.services.status, ip.services.status_code, ip.services.transport, manual, perimeter, subsidiaries.id, subsidiaries.name, triage.action, triage.assigned_to, triage.description, triage.status, triage.updated_by
				</br>Available filter fields that supports range comparisons (>, <, >=, <=): criticality_timestamp, dns_domain.resolved_ips, dns_domain.services.first_seen, dns_domain.services.last_seen, dns_domain.services.port, dns_domain.services.status_code, first_seen, ip.cloud_vm.private_ip, ip.cloud_vm.public_ip, ip.ip_address, ip.services.first_seen, ip.services.last_seen, ip.services.port, ip.services.status_code, last_seen, triage.updated_timestamp
				</br>All filter fields and operations supports negation (!).
	*/
	Filter *string

	/* Limit.

	   Number of IDs to return.
	*/
	Limit *int64

	/* Offset.

	   Starting index of result set from which to return IDs.
	*/
	Offset *string

	/* Sort.

	   Order by fields.
	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the query external assets params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryExternalAssetsParams) WithDefaults() *QueryExternalAssetsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the query external assets params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryExternalAssetsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the query external assets params
func (o *QueryExternalAssetsParams) WithTimeout(timeout time.Duration) *QueryExternalAssetsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query external assets params
func (o *QueryExternalAssetsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query external assets params
func (o *QueryExternalAssetsParams) WithContext(ctx context.Context) *QueryExternalAssetsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query external assets params
func (o *QueryExternalAssetsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query external assets params
func (o *QueryExternalAssetsParams) WithHTTPClient(client *http.Client) *QueryExternalAssetsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query external assets params
func (o *QueryExternalAssetsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the query external assets params
func (o *QueryExternalAssetsParams) WithFilter(filter *string) *QueryExternalAssetsParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the query external assets params
func (o *QueryExternalAssetsParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithLimit adds the limit to the query external assets params
func (o *QueryExternalAssetsParams) WithLimit(limit *int64) *QueryExternalAssetsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the query external assets params
func (o *QueryExternalAssetsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the query external assets params
func (o *QueryExternalAssetsParams) WithOffset(offset *string) *QueryExternalAssetsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the query external assets params
func (o *QueryExternalAssetsParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithSort adds the sort to the query external assets params
func (o *QueryExternalAssetsParams) WithSort(sort *string) *QueryExternalAssetsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the query external assets params
func (o *QueryExternalAssetsParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *QueryExternalAssetsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
