// Code generated by go-swagger; DO NOT EDIT.

package exposure_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCombinedEcosystemSubsidiariesParams creates a new CombinedEcosystemSubsidiariesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCombinedEcosystemSubsidiariesParams() *CombinedEcosystemSubsidiariesParams {
	return &CombinedEcosystemSubsidiariesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCombinedEcosystemSubsidiariesParamsWithTimeout creates a new CombinedEcosystemSubsidiariesParams object
// with the ability to set a timeout on a request.
func NewCombinedEcosystemSubsidiariesParamsWithTimeout(timeout time.Duration) *CombinedEcosystemSubsidiariesParams {
	return &CombinedEcosystemSubsidiariesParams{
		timeout: timeout,
	}
}

// NewCombinedEcosystemSubsidiariesParamsWithContext creates a new CombinedEcosystemSubsidiariesParams object
// with the ability to set a context for a request.
func NewCombinedEcosystemSubsidiariesParamsWithContext(ctx context.Context) *CombinedEcosystemSubsidiariesParams {
	return &CombinedEcosystemSubsidiariesParams{
		Context: ctx,
	}
}

// NewCombinedEcosystemSubsidiariesParamsWithHTTPClient creates a new CombinedEcosystemSubsidiariesParams object
// with the ability to set a custom HTTPClient for a request.
func NewCombinedEcosystemSubsidiariesParamsWithHTTPClient(client *http.Client) *CombinedEcosystemSubsidiariesParams {
	return &CombinedEcosystemSubsidiariesParams{
		HTTPClient: client,
	}
}

/*
CombinedEcosystemSubsidiariesParams contains all the parameters to send to the API endpoint

	for the combined ecosystem subsidiaries operation.

	Typically these are written to a http.Request.
*/
type CombinedEcosystemSubsidiariesParams struct {

	/* Limit.

	   The maximum number of subsidiaries to return in the response.

	   Default: 100
	*/
	Limit *int64

	/* Offset.

	   Starting index of result set from which to return subsidiaries
	*/
	Offset *int64

	/* Sort.

	   The field by which to sort the list of subsidiaries. Possible values:<ul><li>name</li><li>primary_domain</li></ul></br>Sort order can be specified by appending "asc" or "desc" to the field name (e.g. "name|asc" or "primary_domain|desc").
	*/
	Sort *string

	/* VersionID.

	   The version ID of the ecosystem subsidiaries data, represented as a hash string. This parameter is required to ensure data consistency and prevent stale data. If a new version of the ecosystem subsidiaries data is written, the version ID will be updated. By including this parameter in the request, the client can ensure that the response will be invalidated if a new version is written.
	*/
	VersionID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the combined ecosystem subsidiaries params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CombinedEcosystemSubsidiariesParams) WithDefaults() *CombinedEcosystemSubsidiariesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the combined ecosystem subsidiaries params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CombinedEcosystemSubsidiariesParams) SetDefaults() {
	var (
		limitDefault = int64(100)

		offsetDefault = int64(0)
	)

	val := CombinedEcosystemSubsidiariesParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the combined ecosystem subsidiaries params
func (o *CombinedEcosystemSubsidiariesParams) WithTimeout(timeout time.Duration) *CombinedEcosystemSubsidiariesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the combined ecosystem subsidiaries params
func (o *CombinedEcosystemSubsidiariesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the combined ecosystem subsidiaries params
func (o *CombinedEcosystemSubsidiariesParams) WithContext(ctx context.Context) *CombinedEcosystemSubsidiariesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the combined ecosystem subsidiaries params
func (o *CombinedEcosystemSubsidiariesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the combined ecosystem subsidiaries params
func (o *CombinedEcosystemSubsidiariesParams) WithHTTPClient(client *http.Client) *CombinedEcosystemSubsidiariesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the combined ecosystem subsidiaries params
func (o *CombinedEcosystemSubsidiariesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the combined ecosystem subsidiaries params
func (o *CombinedEcosystemSubsidiariesParams) WithLimit(limit *int64) *CombinedEcosystemSubsidiariesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the combined ecosystem subsidiaries params
func (o *CombinedEcosystemSubsidiariesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the combined ecosystem subsidiaries params
func (o *CombinedEcosystemSubsidiariesParams) WithOffset(offset *int64) *CombinedEcosystemSubsidiariesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the combined ecosystem subsidiaries params
func (o *CombinedEcosystemSubsidiariesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithSort adds the sort to the combined ecosystem subsidiaries params
func (o *CombinedEcosystemSubsidiariesParams) WithSort(sort *string) *CombinedEcosystemSubsidiariesParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the combined ecosystem subsidiaries params
func (o *CombinedEcosystemSubsidiariesParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithVersionID adds the versionID to the combined ecosystem subsidiaries params
func (o *CombinedEcosystemSubsidiariesParams) WithVersionID(versionID *string) *CombinedEcosystemSubsidiariesParams {
	o.SetVersionID(versionID)
	return o
}

// SetVersionID adds the versionId to the combined ecosystem subsidiaries params
func (o *CombinedEcosystemSubsidiariesParams) SetVersionID(versionID *string) {
	o.VersionID = versionID
}

// WriteToRequest writes these params to a swagger request
func (o *CombinedEcosystemSubsidiariesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.VersionID != nil {

		// query param version_id
		var qrVersionID string

		if o.VersionID != nil {
			qrVersionID = *o.VersionID
		}
		qVersionID := qrVersionID
		if qVersionID != "" {

			if err := r.SetQueryParam("version_id", qVersionID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
