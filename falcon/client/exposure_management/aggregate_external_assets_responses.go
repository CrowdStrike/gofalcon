// Code generated by go-swagger; DO NOT EDIT.

package exposure_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// AggregateExternalAssetsReader is a Reader for the AggregateExternalAssets structure.
type AggregateExternalAssetsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AggregateExternalAssetsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAggregateExternalAssetsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAggregateExternalAssetsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAggregateExternalAssetsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAggregateExternalAssetsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAggregateExternalAssetsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /fem/aggregates/external-assets/v1] aggregate-external-assets", response, response.Code())
	}
}

// NewAggregateExternalAssetsOK creates a AggregateExternalAssetsOK with default headers values
func NewAggregateExternalAssetsOK() *AggregateExternalAssetsOK {
	return &AggregateExternalAssetsOK{}
}

/*
AggregateExternalAssetsOK describes a response with status code 200, with default header values.

OK
*/
type AggregateExternalAssetsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaAggregatesResponse
}

// IsSuccess returns true when this aggregate external assets o k response has a 2xx status code
func (o *AggregateExternalAssetsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this aggregate external assets o k response has a 3xx status code
func (o *AggregateExternalAssetsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate external assets o k response has a 4xx status code
func (o *AggregateExternalAssetsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this aggregate external assets o k response has a 5xx status code
func (o *AggregateExternalAssetsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate external assets o k response a status code equal to that given
func (o *AggregateExternalAssetsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the aggregate external assets o k response
func (o *AggregateExternalAssetsOK) Code() int {
	return 200
}

func (o *AggregateExternalAssetsOK) Error() string {
	return fmt.Sprintf("[POST /fem/aggregates/external-assets/v1][%d] aggregateExternalAssetsOK  %+v", 200, o.Payload)
}

func (o *AggregateExternalAssetsOK) String() string {
	return fmt.Sprintf("[POST /fem/aggregates/external-assets/v1][%d] aggregateExternalAssetsOK  %+v", 200, o.Payload)
}

func (o *AggregateExternalAssetsOK) GetPayload() *models.MsaAggregatesResponse {
	return o.Payload
}

func (o *AggregateExternalAssetsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaAggregatesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateExternalAssetsBadRequest creates a AggregateExternalAssetsBadRequest with default headers values
func NewAggregateExternalAssetsBadRequest() *AggregateExternalAssetsBadRequest {
	return &AggregateExternalAssetsBadRequest{}
}

/*
AggregateExternalAssetsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AggregateExternalAssetsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this aggregate external assets bad request response has a 2xx status code
func (o *AggregateExternalAssetsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate external assets bad request response has a 3xx status code
func (o *AggregateExternalAssetsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate external assets bad request response has a 4xx status code
func (o *AggregateExternalAssetsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate external assets bad request response has a 5xx status code
func (o *AggregateExternalAssetsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate external assets bad request response a status code equal to that given
func (o *AggregateExternalAssetsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the aggregate external assets bad request response
func (o *AggregateExternalAssetsBadRequest) Code() int {
	return 400
}

func (o *AggregateExternalAssetsBadRequest) Error() string {
	return fmt.Sprintf("[POST /fem/aggregates/external-assets/v1][%d] aggregateExternalAssetsBadRequest  %+v", 400, o.Payload)
}

func (o *AggregateExternalAssetsBadRequest) String() string {
	return fmt.Sprintf("[POST /fem/aggregates/external-assets/v1][%d] aggregateExternalAssetsBadRequest  %+v", 400, o.Payload)
}

func (o *AggregateExternalAssetsBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *AggregateExternalAssetsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateExternalAssetsForbidden creates a AggregateExternalAssetsForbidden with default headers values
func NewAggregateExternalAssetsForbidden() *AggregateExternalAssetsForbidden {
	return &AggregateExternalAssetsForbidden{}
}

/*
AggregateExternalAssetsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AggregateExternalAssetsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this aggregate external assets forbidden response has a 2xx status code
func (o *AggregateExternalAssetsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate external assets forbidden response has a 3xx status code
func (o *AggregateExternalAssetsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate external assets forbidden response has a 4xx status code
func (o *AggregateExternalAssetsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate external assets forbidden response has a 5xx status code
func (o *AggregateExternalAssetsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate external assets forbidden response a status code equal to that given
func (o *AggregateExternalAssetsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the aggregate external assets forbidden response
func (o *AggregateExternalAssetsForbidden) Code() int {
	return 403
}

func (o *AggregateExternalAssetsForbidden) Error() string {
	return fmt.Sprintf("[POST /fem/aggregates/external-assets/v1][%d] aggregateExternalAssetsForbidden  %+v", 403, o.Payload)
}

func (o *AggregateExternalAssetsForbidden) String() string {
	return fmt.Sprintf("[POST /fem/aggregates/external-assets/v1][%d] aggregateExternalAssetsForbidden  %+v", 403, o.Payload)
}

func (o *AggregateExternalAssetsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *AggregateExternalAssetsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateExternalAssetsTooManyRequests creates a AggregateExternalAssetsTooManyRequests with default headers values
func NewAggregateExternalAssetsTooManyRequests() *AggregateExternalAssetsTooManyRequests {
	return &AggregateExternalAssetsTooManyRequests{}
}

/*
AggregateExternalAssetsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type AggregateExternalAssetsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this aggregate external assets too many requests response has a 2xx status code
func (o *AggregateExternalAssetsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate external assets too many requests response has a 3xx status code
func (o *AggregateExternalAssetsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate external assets too many requests response has a 4xx status code
func (o *AggregateExternalAssetsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate external assets too many requests response has a 5xx status code
func (o *AggregateExternalAssetsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate external assets too many requests response a status code equal to that given
func (o *AggregateExternalAssetsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the aggregate external assets too many requests response
func (o *AggregateExternalAssetsTooManyRequests) Code() int {
	return 429
}

func (o *AggregateExternalAssetsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fem/aggregates/external-assets/v1][%d] aggregateExternalAssetsTooManyRequests  %+v", 429, o.Payload)
}

func (o *AggregateExternalAssetsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /fem/aggregates/external-assets/v1][%d] aggregateExternalAssetsTooManyRequests  %+v", 429, o.Payload)
}

func (o *AggregateExternalAssetsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *AggregateExternalAssetsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateExternalAssetsInternalServerError creates a AggregateExternalAssetsInternalServerError with default headers values
func NewAggregateExternalAssetsInternalServerError() *AggregateExternalAssetsInternalServerError {
	return &AggregateExternalAssetsInternalServerError{}
}

/*
AggregateExternalAssetsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AggregateExternalAssetsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this aggregate external assets internal server error response has a 2xx status code
func (o *AggregateExternalAssetsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate external assets internal server error response has a 3xx status code
func (o *AggregateExternalAssetsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate external assets internal server error response has a 4xx status code
func (o *AggregateExternalAssetsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this aggregate external assets internal server error response has a 5xx status code
func (o *AggregateExternalAssetsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this aggregate external assets internal server error response a status code equal to that given
func (o *AggregateExternalAssetsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the aggregate external assets internal server error response
func (o *AggregateExternalAssetsInternalServerError) Code() int {
	return 500
}

func (o *AggregateExternalAssetsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /fem/aggregates/external-assets/v1][%d] aggregateExternalAssetsInternalServerError  %+v", 500, o.Payload)
}

func (o *AggregateExternalAssetsInternalServerError) String() string {
	return fmt.Sprintf("[POST /fem/aggregates/external-assets/v1][%d] aggregateExternalAssetsInternalServerError  %+v", 500, o.Payload)
}

func (o *AggregateExternalAssetsInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *AggregateExternalAssetsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
