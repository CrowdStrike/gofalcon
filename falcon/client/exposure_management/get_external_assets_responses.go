// Code generated by go-swagger; DO NOT EDIT.

package exposure_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetExternalAssetsReader is a Reader for the GetExternalAssets structure.
type GetExternalAssetsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetExternalAssetsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetExternalAssetsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetExternalAssetsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetExternalAssetsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetExternalAssetsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetExternalAssetsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /fem/entities/external-assets/v1] get-external-assets", response, response.Code())
	}
}

// NewGetExternalAssetsOK creates a GetExternalAssetsOK with default headers values
func NewGetExternalAssetsOK() *GetExternalAssetsOK {
	return &GetExternalAssetsOK{}
}

/*
GetExternalAssetsOK describes a response with status code 200, with default header values.

OK
*/
type GetExternalAssetsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainExternalAssetsAPITypeV1
}

// IsSuccess returns true when this get external assets o k response has a 2xx status code
func (o *GetExternalAssetsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get external assets o k response has a 3xx status code
func (o *GetExternalAssetsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get external assets o k response has a 4xx status code
func (o *GetExternalAssetsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get external assets o k response has a 5xx status code
func (o *GetExternalAssetsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get external assets o k response a status code equal to that given
func (o *GetExternalAssetsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get external assets o k response
func (o *GetExternalAssetsOK) Code() int {
	return 200
}

func (o *GetExternalAssetsOK) Error() string {
	return fmt.Sprintf("[GET /fem/entities/external-assets/v1][%d] getExternalAssetsOK  %+v", 200, o.Payload)
}

func (o *GetExternalAssetsOK) String() string {
	return fmt.Sprintf("[GET /fem/entities/external-assets/v1][%d] getExternalAssetsOK  %+v", 200, o.Payload)
}

func (o *GetExternalAssetsOK) GetPayload() *models.DomainExternalAssetsAPITypeV1 {
	return o.Payload
}

func (o *GetExternalAssetsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainExternalAssetsAPITypeV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExternalAssetsBadRequest creates a GetExternalAssetsBadRequest with default headers values
func NewGetExternalAssetsBadRequest() *GetExternalAssetsBadRequest {
	return &GetExternalAssetsBadRequest{}
}

/*
GetExternalAssetsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetExternalAssetsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get external assets bad request response has a 2xx status code
func (o *GetExternalAssetsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get external assets bad request response has a 3xx status code
func (o *GetExternalAssetsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get external assets bad request response has a 4xx status code
func (o *GetExternalAssetsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get external assets bad request response has a 5xx status code
func (o *GetExternalAssetsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get external assets bad request response a status code equal to that given
func (o *GetExternalAssetsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get external assets bad request response
func (o *GetExternalAssetsBadRequest) Code() int {
	return 400
}

func (o *GetExternalAssetsBadRequest) Error() string {
	return fmt.Sprintf("[GET /fem/entities/external-assets/v1][%d] getExternalAssetsBadRequest  %+v", 400, o.Payload)
}

func (o *GetExternalAssetsBadRequest) String() string {
	return fmt.Sprintf("[GET /fem/entities/external-assets/v1][%d] getExternalAssetsBadRequest  %+v", 400, o.Payload)
}

func (o *GetExternalAssetsBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetExternalAssetsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExternalAssetsForbidden creates a GetExternalAssetsForbidden with default headers values
func NewGetExternalAssetsForbidden() *GetExternalAssetsForbidden {
	return &GetExternalAssetsForbidden{}
}

/*
GetExternalAssetsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetExternalAssetsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get external assets forbidden response has a 2xx status code
func (o *GetExternalAssetsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get external assets forbidden response has a 3xx status code
func (o *GetExternalAssetsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get external assets forbidden response has a 4xx status code
func (o *GetExternalAssetsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get external assets forbidden response has a 5xx status code
func (o *GetExternalAssetsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get external assets forbidden response a status code equal to that given
func (o *GetExternalAssetsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get external assets forbidden response
func (o *GetExternalAssetsForbidden) Code() int {
	return 403
}

func (o *GetExternalAssetsForbidden) Error() string {
	return fmt.Sprintf("[GET /fem/entities/external-assets/v1][%d] getExternalAssetsForbidden  %+v", 403, o.Payload)
}

func (o *GetExternalAssetsForbidden) String() string {
	return fmt.Sprintf("[GET /fem/entities/external-assets/v1][%d] getExternalAssetsForbidden  %+v", 403, o.Payload)
}

func (o *GetExternalAssetsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetExternalAssetsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExternalAssetsTooManyRequests creates a GetExternalAssetsTooManyRequests with default headers values
func NewGetExternalAssetsTooManyRequests() *GetExternalAssetsTooManyRequests {
	return &GetExternalAssetsTooManyRequests{}
}

/*
GetExternalAssetsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetExternalAssetsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get external assets too many requests response has a 2xx status code
func (o *GetExternalAssetsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get external assets too many requests response has a 3xx status code
func (o *GetExternalAssetsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get external assets too many requests response has a 4xx status code
func (o *GetExternalAssetsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get external assets too many requests response has a 5xx status code
func (o *GetExternalAssetsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get external assets too many requests response a status code equal to that given
func (o *GetExternalAssetsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get external assets too many requests response
func (o *GetExternalAssetsTooManyRequests) Code() int {
	return 429
}

func (o *GetExternalAssetsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /fem/entities/external-assets/v1][%d] getExternalAssetsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetExternalAssetsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /fem/entities/external-assets/v1][%d] getExternalAssetsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetExternalAssetsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetExternalAssetsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExternalAssetsInternalServerError creates a GetExternalAssetsInternalServerError with default headers values
func NewGetExternalAssetsInternalServerError() *GetExternalAssetsInternalServerError {
	return &GetExternalAssetsInternalServerError{}
}

/*
GetExternalAssetsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetExternalAssetsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get external assets internal server error response has a 2xx status code
func (o *GetExternalAssetsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get external assets internal server error response has a 3xx status code
func (o *GetExternalAssetsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get external assets internal server error response has a 4xx status code
func (o *GetExternalAssetsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get external assets internal server error response has a 5xx status code
func (o *GetExternalAssetsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get external assets internal server error response a status code equal to that given
func (o *GetExternalAssetsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get external assets internal server error response
func (o *GetExternalAssetsInternalServerError) Code() int {
	return 500
}

func (o *GetExternalAssetsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /fem/entities/external-assets/v1][%d] getExternalAssetsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetExternalAssetsInternalServerError) String() string {
	return fmt.Sprintf("[GET /fem/entities/external-assets/v1][%d] getExternalAssetsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetExternalAssetsInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetExternalAssetsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
