// Code generated by go-swagger; DO NOT EDIT.

package exposure_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetEcosystemSubsidiariesReader is a Reader for the GetEcosystemSubsidiaries structure.
type GetEcosystemSubsidiariesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEcosystemSubsidiariesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEcosystemSubsidiariesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetEcosystemSubsidiariesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetEcosystemSubsidiariesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetEcosystemSubsidiariesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetEcosystemSubsidiariesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /fem/entities/ecosystem-subsidiaries/v1] get-ecosystem-subsidiaries", response, response.Code())
	}
}

// NewGetEcosystemSubsidiariesOK creates a GetEcosystemSubsidiariesOK with default headers values
func NewGetEcosystemSubsidiariesOK() *GetEcosystemSubsidiariesOK {
	return &GetEcosystemSubsidiariesOK{}
}

/*
GetEcosystemSubsidiariesOK describes a response with status code 200, with default header values.

OK
*/
type GetEcosystemSubsidiariesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainFemEcosystemSubsidiariesEntitiesResponse
}

// IsSuccess returns true when this get ecosystem subsidiaries o k response has a 2xx status code
func (o *GetEcosystemSubsidiariesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get ecosystem subsidiaries o k response has a 3xx status code
func (o *GetEcosystemSubsidiariesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get ecosystem subsidiaries o k response has a 4xx status code
func (o *GetEcosystemSubsidiariesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get ecosystem subsidiaries o k response has a 5xx status code
func (o *GetEcosystemSubsidiariesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get ecosystem subsidiaries o k response a status code equal to that given
func (o *GetEcosystemSubsidiariesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get ecosystem subsidiaries o k response
func (o *GetEcosystemSubsidiariesOK) Code() int {
	return 200
}

func (o *GetEcosystemSubsidiariesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /fem/entities/ecosystem-subsidiaries/v1][%d] getEcosystemSubsidiariesOK %s", 200, payload)
}

func (o *GetEcosystemSubsidiariesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /fem/entities/ecosystem-subsidiaries/v1][%d] getEcosystemSubsidiariesOK %s", 200, payload)
}

func (o *GetEcosystemSubsidiariesOK) GetPayload() *models.DomainFemEcosystemSubsidiariesEntitiesResponse {
	return o.Payload
}

func (o *GetEcosystemSubsidiariesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainFemEcosystemSubsidiariesEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEcosystemSubsidiariesBadRequest creates a GetEcosystemSubsidiariesBadRequest with default headers values
func NewGetEcosystemSubsidiariesBadRequest() *GetEcosystemSubsidiariesBadRequest {
	return &GetEcosystemSubsidiariesBadRequest{}
}

/*
GetEcosystemSubsidiariesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetEcosystemSubsidiariesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainFemEcosystemSubsidiariesResponseFields
}

// IsSuccess returns true when this get ecosystem subsidiaries bad request response has a 2xx status code
func (o *GetEcosystemSubsidiariesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get ecosystem subsidiaries bad request response has a 3xx status code
func (o *GetEcosystemSubsidiariesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get ecosystem subsidiaries bad request response has a 4xx status code
func (o *GetEcosystemSubsidiariesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get ecosystem subsidiaries bad request response has a 5xx status code
func (o *GetEcosystemSubsidiariesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get ecosystem subsidiaries bad request response a status code equal to that given
func (o *GetEcosystemSubsidiariesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get ecosystem subsidiaries bad request response
func (o *GetEcosystemSubsidiariesBadRequest) Code() int {
	return 400
}

func (o *GetEcosystemSubsidiariesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /fem/entities/ecosystem-subsidiaries/v1][%d] getEcosystemSubsidiariesBadRequest %s", 400, payload)
}

func (o *GetEcosystemSubsidiariesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /fem/entities/ecosystem-subsidiaries/v1][%d] getEcosystemSubsidiariesBadRequest %s", 400, payload)
}

func (o *GetEcosystemSubsidiariesBadRequest) GetPayload() *models.DomainFemEcosystemSubsidiariesResponseFields {
	return o.Payload
}

func (o *GetEcosystemSubsidiariesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainFemEcosystemSubsidiariesResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEcosystemSubsidiariesForbidden creates a GetEcosystemSubsidiariesForbidden with default headers values
func NewGetEcosystemSubsidiariesForbidden() *GetEcosystemSubsidiariesForbidden {
	return &GetEcosystemSubsidiariesForbidden{}
}

/*
GetEcosystemSubsidiariesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetEcosystemSubsidiariesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get ecosystem subsidiaries forbidden response has a 2xx status code
func (o *GetEcosystemSubsidiariesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get ecosystem subsidiaries forbidden response has a 3xx status code
func (o *GetEcosystemSubsidiariesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get ecosystem subsidiaries forbidden response has a 4xx status code
func (o *GetEcosystemSubsidiariesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get ecosystem subsidiaries forbidden response has a 5xx status code
func (o *GetEcosystemSubsidiariesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get ecosystem subsidiaries forbidden response a status code equal to that given
func (o *GetEcosystemSubsidiariesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get ecosystem subsidiaries forbidden response
func (o *GetEcosystemSubsidiariesForbidden) Code() int {
	return 403
}

func (o *GetEcosystemSubsidiariesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /fem/entities/ecosystem-subsidiaries/v1][%d] getEcosystemSubsidiariesForbidden %s", 403, payload)
}

func (o *GetEcosystemSubsidiariesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /fem/entities/ecosystem-subsidiaries/v1][%d] getEcosystemSubsidiariesForbidden %s", 403, payload)
}

func (o *GetEcosystemSubsidiariesForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetEcosystemSubsidiariesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEcosystemSubsidiariesTooManyRequests creates a GetEcosystemSubsidiariesTooManyRequests with default headers values
func NewGetEcosystemSubsidiariesTooManyRequests() *GetEcosystemSubsidiariesTooManyRequests {
	return &GetEcosystemSubsidiariesTooManyRequests{}
}

/*
GetEcosystemSubsidiariesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetEcosystemSubsidiariesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get ecosystem subsidiaries too many requests response has a 2xx status code
func (o *GetEcosystemSubsidiariesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get ecosystem subsidiaries too many requests response has a 3xx status code
func (o *GetEcosystemSubsidiariesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get ecosystem subsidiaries too many requests response has a 4xx status code
func (o *GetEcosystemSubsidiariesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get ecosystem subsidiaries too many requests response has a 5xx status code
func (o *GetEcosystemSubsidiariesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get ecosystem subsidiaries too many requests response a status code equal to that given
func (o *GetEcosystemSubsidiariesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get ecosystem subsidiaries too many requests response
func (o *GetEcosystemSubsidiariesTooManyRequests) Code() int {
	return 429
}

func (o *GetEcosystemSubsidiariesTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /fem/entities/ecosystem-subsidiaries/v1][%d] getEcosystemSubsidiariesTooManyRequests %s", 429, payload)
}

func (o *GetEcosystemSubsidiariesTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /fem/entities/ecosystem-subsidiaries/v1][%d] getEcosystemSubsidiariesTooManyRequests %s", 429, payload)
}

func (o *GetEcosystemSubsidiariesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetEcosystemSubsidiariesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEcosystemSubsidiariesInternalServerError creates a GetEcosystemSubsidiariesInternalServerError with default headers values
func NewGetEcosystemSubsidiariesInternalServerError() *GetEcosystemSubsidiariesInternalServerError {
	return &GetEcosystemSubsidiariesInternalServerError{}
}

/*
GetEcosystemSubsidiariesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetEcosystemSubsidiariesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainFemEcosystemSubsidiariesResponseFields
}

// IsSuccess returns true when this get ecosystem subsidiaries internal server error response has a 2xx status code
func (o *GetEcosystemSubsidiariesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get ecosystem subsidiaries internal server error response has a 3xx status code
func (o *GetEcosystemSubsidiariesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get ecosystem subsidiaries internal server error response has a 4xx status code
func (o *GetEcosystemSubsidiariesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get ecosystem subsidiaries internal server error response has a 5xx status code
func (o *GetEcosystemSubsidiariesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get ecosystem subsidiaries internal server error response a status code equal to that given
func (o *GetEcosystemSubsidiariesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get ecosystem subsidiaries internal server error response
func (o *GetEcosystemSubsidiariesInternalServerError) Code() int {
	return 500
}

func (o *GetEcosystemSubsidiariesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /fem/entities/ecosystem-subsidiaries/v1][%d] getEcosystemSubsidiariesInternalServerError %s", 500, payload)
}

func (o *GetEcosystemSubsidiariesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /fem/entities/ecosystem-subsidiaries/v1][%d] getEcosystemSubsidiariesInternalServerError %s", 500, payload)
}

func (o *GetEcosystemSubsidiariesInternalServerError) GetPayload() *models.DomainFemEcosystemSubsidiariesResponseFields {
	return o.Payload
}

func (o *GetEcosystemSubsidiariesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainFemEcosystemSubsidiariesResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
