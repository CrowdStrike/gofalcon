// Code generated by go-swagger; DO NOT EDIT.

package exposure_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CombinedEcosystemSubsidiariesReader is a Reader for the CombinedEcosystemSubsidiaries structure.
type CombinedEcosystemSubsidiariesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CombinedEcosystemSubsidiariesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCombinedEcosystemSubsidiariesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCombinedEcosystemSubsidiariesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCombinedEcosystemSubsidiariesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCombinedEcosystemSubsidiariesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCombinedEcosystemSubsidiariesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /fem/combined/ecosystem-subsidiaries/v1] combined-ecosystem-subsidiaries", response, response.Code())
	}
}

// NewCombinedEcosystemSubsidiariesOK creates a CombinedEcosystemSubsidiariesOK with default headers values
func NewCombinedEcosystemSubsidiariesOK() *CombinedEcosystemSubsidiariesOK {
	return &CombinedEcosystemSubsidiariesOK{}
}

/*
CombinedEcosystemSubsidiariesOK describes a response with status code 200, with default header values.

OK
*/
type CombinedEcosystemSubsidiariesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainFemEcosystemSubsidiariesEntitiesResponse
}

// IsSuccess returns true when this combined ecosystem subsidiaries o k response has a 2xx status code
func (o *CombinedEcosystemSubsidiariesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this combined ecosystem subsidiaries o k response has a 3xx status code
func (o *CombinedEcosystemSubsidiariesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined ecosystem subsidiaries o k response has a 4xx status code
func (o *CombinedEcosystemSubsidiariesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this combined ecosystem subsidiaries o k response has a 5xx status code
func (o *CombinedEcosystemSubsidiariesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this combined ecosystem subsidiaries o k response a status code equal to that given
func (o *CombinedEcosystemSubsidiariesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the combined ecosystem subsidiaries o k response
func (o *CombinedEcosystemSubsidiariesOK) Code() int {
	return 200
}

func (o *CombinedEcosystemSubsidiariesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /fem/combined/ecosystem-subsidiaries/v1][%d] combinedEcosystemSubsidiariesOK %s", 200, payload)
}

func (o *CombinedEcosystemSubsidiariesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /fem/combined/ecosystem-subsidiaries/v1][%d] combinedEcosystemSubsidiariesOK %s", 200, payload)
}

func (o *CombinedEcosystemSubsidiariesOK) GetPayload() *models.DomainFemEcosystemSubsidiariesEntitiesResponse {
	return o.Payload
}

func (o *CombinedEcosystemSubsidiariesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainFemEcosystemSubsidiariesEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedEcosystemSubsidiariesBadRequest creates a CombinedEcosystemSubsidiariesBadRequest with default headers values
func NewCombinedEcosystemSubsidiariesBadRequest() *CombinedEcosystemSubsidiariesBadRequest {
	return &CombinedEcosystemSubsidiariesBadRequest{}
}

/*
CombinedEcosystemSubsidiariesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CombinedEcosystemSubsidiariesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainFemEcosystemSubsidiariesResponseFields
}

// IsSuccess returns true when this combined ecosystem subsidiaries bad request response has a 2xx status code
func (o *CombinedEcosystemSubsidiariesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined ecosystem subsidiaries bad request response has a 3xx status code
func (o *CombinedEcosystemSubsidiariesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined ecosystem subsidiaries bad request response has a 4xx status code
func (o *CombinedEcosystemSubsidiariesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this combined ecosystem subsidiaries bad request response has a 5xx status code
func (o *CombinedEcosystemSubsidiariesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this combined ecosystem subsidiaries bad request response a status code equal to that given
func (o *CombinedEcosystemSubsidiariesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the combined ecosystem subsidiaries bad request response
func (o *CombinedEcosystemSubsidiariesBadRequest) Code() int {
	return 400
}

func (o *CombinedEcosystemSubsidiariesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /fem/combined/ecosystem-subsidiaries/v1][%d] combinedEcosystemSubsidiariesBadRequest %s", 400, payload)
}

func (o *CombinedEcosystemSubsidiariesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /fem/combined/ecosystem-subsidiaries/v1][%d] combinedEcosystemSubsidiariesBadRequest %s", 400, payload)
}

func (o *CombinedEcosystemSubsidiariesBadRequest) GetPayload() *models.DomainFemEcosystemSubsidiariesResponseFields {
	return o.Payload
}

func (o *CombinedEcosystemSubsidiariesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainFemEcosystemSubsidiariesResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedEcosystemSubsidiariesForbidden creates a CombinedEcosystemSubsidiariesForbidden with default headers values
func NewCombinedEcosystemSubsidiariesForbidden() *CombinedEcosystemSubsidiariesForbidden {
	return &CombinedEcosystemSubsidiariesForbidden{}
}

/*
CombinedEcosystemSubsidiariesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CombinedEcosystemSubsidiariesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this combined ecosystem subsidiaries forbidden response has a 2xx status code
func (o *CombinedEcosystemSubsidiariesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined ecosystem subsidiaries forbidden response has a 3xx status code
func (o *CombinedEcosystemSubsidiariesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined ecosystem subsidiaries forbidden response has a 4xx status code
func (o *CombinedEcosystemSubsidiariesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this combined ecosystem subsidiaries forbidden response has a 5xx status code
func (o *CombinedEcosystemSubsidiariesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this combined ecosystem subsidiaries forbidden response a status code equal to that given
func (o *CombinedEcosystemSubsidiariesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the combined ecosystem subsidiaries forbidden response
func (o *CombinedEcosystemSubsidiariesForbidden) Code() int {
	return 403
}

func (o *CombinedEcosystemSubsidiariesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /fem/combined/ecosystem-subsidiaries/v1][%d] combinedEcosystemSubsidiariesForbidden %s", 403, payload)
}

func (o *CombinedEcosystemSubsidiariesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /fem/combined/ecosystem-subsidiaries/v1][%d] combinedEcosystemSubsidiariesForbidden %s", 403, payload)
}

func (o *CombinedEcosystemSubsidiariesForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CombinedEcosystemSubsidiariesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedEcosystemSubsidiariesTooManyRequests creates a CombinedEcosystemSubsidiariesTooManyRequests with default headers values
func NewCombinedEcosystemSubsidiariesTooManyRequests() *CombinedEcosystemSubsidiariesTooManyRequests {
	return &CombinedEcosystemSubsidiariesTooManyRequests{}
}

/*
CombinedEcosystemSubsidiariesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CombinedEcosystemSubsidiariesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this combined ecosystem subsidiaries too many requests response has a 2xx status code
func (o *CombinedEcosystemSubsidiariesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined ecosystem subsidiaries too many requests response has a 3xx status code
func (o *CombinedEcosystemSubsidiariesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined ecosystem subsidiaries too many requests response has a 4xx status code
func (o *CombinedEcosystemSubsidiariesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this combined ecosystem subsidiaries too many requests response has a 5xx status code
func (o *CombinedEcosystemSubsidiariesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this combined ecosystem subsidiaries too many requests response a status code equal to that given
func (o *CombinedEcosystemSubsidiariesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the combined ecosystem subsidiaries too many requests response
func (o *CombinedEcosystemSubsidiariesTooManyRequests) Code() int {
	return 429
}

func (o *CombinedEcosystemSubsidiariesTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /fem/combined/ecosystem-subsidiaries/v1][%d] combinedEcosystemSubsidiariesTooManyRequests %s", 429, payload)
}

func (o *CombinedEcosystemSubsidiariesTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /fem/combined/ecosystem-subsidiaries/v1][%d] combinedEcosystemSubsidiariesTooManyRequests %s", 429, payload)
}

func (o *CombinedEcosystemSubsidiariesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CombinedEcosystemSubsidiariesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedEcosystemSubsidiariesInternalServerError creates a CombinedEcosystemSubsidiariesInternalServerError with default headers values
func NewCombinedEcosystemSubsidiariesInternalServerError() *CombinedEcosystemSubsidiariesInternalServerError {
	return &CombinedEcosystemSubsidiariesInternalServerError{}
}

/*
CombinedEcosystemSubsidiariesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CombinedEcosystemSubsidiariesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainFemEcosystemSubsidiariesResponseFields
}

// IsSuccess returns true when this combined ecosystem subsidiaries internal server error response has a 2xx status code
func (o *CombinedEcosystemSubsidiariesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined ecosystem subsidiaries internal server error response has a 3xx status code
func (o *CombinedEcosystemSubsidiariesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined ecosystem subsidiaries internal server error response has a 4xx status code
func (o *CombinedEcosystemSubsidiariesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this combined ecosystem subsidiaries internal server error response has a 5xx status code
func (o *CombinedEcosystemSubsidiariesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this combined ecosystem subsidiaries internal server error response a status code equal to that given
func (o *CombinedEcosystemSubsidiariesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the combined ecosystem subsidiaries internal server error response
func (o *CombinedEcosystemSubsidiariesInternalServerError) Code() int {
	return 500
}

func (o *CombinedEcosystemSubsidiariesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /fem/combined/ecosystem-subsidiaries/v1][%d] combinedEcosystemSubsidiariesInternalServerError %s", 500, payload)
}

func (o *CombinedEcosystemSubsidiariesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /fem/combined/ecosystem-subsidiaries/v1][%d] combinedEcosystemSubsidiariesInternalServerError %s", 500, payload)
}

func (o *CombinedEcosystemSubsidiariesInternalServerError) GetPayload() *models.DomainFemEcosystemSubsidiariesResponseFields {
	return o.Payload
}

func (o *CombinedEcosystemSubsidiariesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainFemEcosystemSubsidiariesResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
