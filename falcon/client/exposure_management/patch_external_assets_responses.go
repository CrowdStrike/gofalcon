// Code generated by go-swagger; DO NOT EDIT.

package exposure_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// PatchExternalAssetsReader is a Reader for the PatchExternalAssets structure.
type PatchExternalAssetsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchExternalAssetsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchExternalAssetsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchExternalAssetsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchExternalAssetsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchExternalAssetsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchExternalAssetsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /fem/entities/external-assets/v1] patch-external-assets", response, response.Code())
	}
}

// NewPatchExternalAssetsOK creates a PatchExternalAssetsOK with default headers values
func NewPatchExternalAssetsOK() *PatchExternalAssetsOK {
	return &PatchExternalAssetsOK{}
}

/*
PatchExternalAssetsOK describes a response with status code 200, with default header values.

OK
*/
type PatchExternalAssetsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainExternalAssetsAPITypeV1
}

// IsSuccess returns true when this patch external assets o k response has a 2xx status code
func (o *PatchExternalAssetsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch external assets o k response has a 3xx status code
func (o *PatchExternalAssetsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch external assets o k response has a 4xx status code
func (o *PatchExternalAssetsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch external assets o k response has a 5xx status code
func (o *PatchExternalAssetsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch external assets o k response a status code equal to that given
func (o *PatchExternalAssetsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch external assets o k response
func (o *PatchExternalAssetsOK) Code() int {
	return 200
}

func (o *PatchExternalAssetsOK) Error() string {
	return fmt.Sprintf("[PATCH /fem/entities/external-assets/v1][%d] patchExternalAssetsOK  %+v", 200, o.Payload)
}

func (o *PatchExternalAssetsOK) String() string {
	return fmt.Sprintf("[PATCH /fem/entities/external-assets/v1][%d] patchExternalAssetsOK  %+v", 200, o.Payload)
}

func (o *PatchExternalAssetsOK) GetPayload() *models.DomainExternalAssetsAPITypeV1 {
	return o.Payload
}

func (o *PatchExternalAssetsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainExternalAssetsAPITypeV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchExternalAssetsBadRequest creates a PatchExternalAssetsBadRequest with default headers values
func NewPatchExternalAssetsBadRequest() *PatchExternalAssetsBadRequest {
	return &PatchExternalAssetsBadRequest{}
}

/*
PatchExternalAssetsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PatchExternalAssetsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this patch external assets bad request response has a 2xx status code
func (o *PatchExternalAssetsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch external assets bad request response has a 3xx status code
func (o *PatchExternalAssetsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch external assets bad request response has a 4xx status code
func (o *PatchExternalAssetsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch external assets bad request response has a 5xx status code
func (o *PatchExternalAssetsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch external assets bad request response a status code equal to that given
func (o *PatchExternalAssetsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the patch external assets bad request response
func (o *PatchExternalAssetsBadRequest) Code() int {
	return 400
}

func (o *PatchExternalAssetsBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /fem/entities/external-assets/v1][%d] patchExternalAssetsBadRequest  %+v", 400, o.Payload)
}

func (o *PatchExternalAssetsBadRequest) String() string {
	return fmt.Sprintf("[PATCH /fem/entities/external-assets/v1][%d] patchExternalAssetsBadRequest  %+v", 400, o.Payload)
}

func (o *PatchExternalAssetsBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *PatchExternalAssetsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchExternalAssetsForbidden creates a PatchExternalAssetsForbidden with default headers values
func NewPatchExternalAssetsForbidden() *PatchExternalAssetsForbidden {
	return &PatchExternalAssetsForbidden{}
}

/*
PatchExternalAssetsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchExternalAssetsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this patch external assets forbidden response has a 2xx status code
func (o *PatchExternalAssetsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch external assets forbidden response has a 3xx status code
func (o *PatchExternalAssetsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch external assets forbidden response has a 4xx status code
func (o *PatchExternalAssetsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch external assets forbidden response has a 5xx status code
func (o *PatchExternalAssetsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch external assets forbidden response a status code equal to that given
func (o *PatchExternalAssetsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the patch external assets forbidden response
func (o *PatchExternalAssetsForbidden) Code() int {
	return 403
}

func (o *PatchExternalAssetsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /fem/entities/external-assets/v1][%d] patchExternalAssetsForbidden  %+v", 403, o.Payload)
}

func (o *PatchExternalAssetsForbidden) String() string {
	return fmt.Sprintf("[PATCH /fem/entities/external-assets/v1][%d] patchExternalAssetsForbidden  %+v", 403, o.Payload)
}

func (o *PatchExternalAssetsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *PatchExternalAssetsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchExternalAssetsTooManyRequests creates a PatchExternalAssetsTooManyRequests with default headers values
func NewPatchExternalAssetsTooManyRequests() *PatchExternalAssetsTooManyRequests {
	return &PatchExternalAssetsTooManyRequests{}
}

/*
PatchExternalAssetsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type PatchExternalAssetsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this patch external assets too many requests response has a 2xx status code
func (o *PatchExternalAssetsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch external assets too many requests response has a 3xx status code
func (o *PatchExternalAssetsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch external assets too many requests response has a 4xx status code
func (o *PatchExternalAssetsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch external assets too many requests response has a 5xx status code
func (o *PatchExternalAssetsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch external assets too many requests response a status code equal to that given
func (o *PatchExternalAssetsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the patch external assets too many requests response
func (o *PatchExternalAssetsTooManyRequests) Code() int {
	return 429
}

func (o *PatchExternalAssetsTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /fem/entities/external-assets/v1][%d] patchExternalAssetsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchExternalAssetsTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /fem/entities/external-assets/v1][%d] patchExternalAssetsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchExternalAssetsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *PatchExternalAssetsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchExternalAssetsInternalServerError creates a PatchExternalAssetsInternalServerError with default headers values
func NewPatchExternalAssetsInternalServerError() *PatchExternalAssetsInternalServerError {
	return &PatchExternalAssetsInternalServerError{}
}

/*
PatchExternalAssetsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PatchExternalAssetsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this patch external assets internal server error response has a 2xx status code
func (o *PatchExternalAssetsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch external assets internal server error response has a 3xx status code
func (o *PatchExternalAssetsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch external assets internal server error response has a 4xx status code
func (o *PatchExternalAssetsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch external assets internal server error response has a 5xx status code
func (o *PatchExternalAssetsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch external assets internal server error response a status code equal to that given
func (o *PatchExternalAssetsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the patch external assets internal server error response
func (o *PatchExternalAssetsInternalServerError) Code() int {
	return 500
}

func (o *PatchExternalAssetsInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /fem/entities/external-assets/v1][%d] patchExternalAssetsInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchExternalAssetsInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /fem/entities/external-assets/v1][%d] patchExternalAssetsInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchExternalAssetsInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *PatchExternalAssetsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
