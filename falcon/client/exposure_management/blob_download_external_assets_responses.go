// Code generated by go-swagger; DO NOT EDIT.

package exposure_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// BlobDownloadExternalAssetsReader is a Reader for the BlobDownloadExternalAssets structure.
type BlobDownloadExternalAssetsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BlobDownloadExternalAssetsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBlobDownloadExternalAssetsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewBlobDownloadExternalAssetsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewBlobDownloadExternalAssetsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewBlobDownloadExternalAssetsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewBlobDownloadExternalAssetsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /fem/entities/blobs-download/v1] blob-download-external-assets", response, response.Code())
	}
}

// NewBlobDownloadExternalAssetsOK creates a BlobDownloadExternalAssetsOK with default headers values
func NewBlobDownloadExternalAssetsOK() *BlobDownloadExternalAssetsOK {
	return &BlobDownloadExternalAssetsOK{}
}

/*
BlobDownloadExternalAssetsOK describes a response with status code 200, with default header values.

OK
*/
type BlobDownloadExternalAssetsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload []int64
}

// IsSuccess returns true when this blob download external assets o k response has a 2xx status code
func (o *BlobDownloadExternalAssetsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this blob download external assets o k response has a 3xx status code
func (o *BlobDownloadExternalAssetsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this blob download external assets o k response has a 4xx status code
func (o *BlobDownloadExternalAssetsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this blob download external assets o k response has a 5xx status code
func (o *BlobDownloadExternalAssetsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this blob download external assets o k response a status code equal to that given
func (o *BlobDownloadExternalAssetsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the blob download external assets o k response
func (o *BlobDownloadExternalAssetsOK) Code() int {
	return 200
}

func (o *BlobDownloadExternalAssetsOK) Error() string {
	return fmt.Sprintf("[GET /fem/entities/blobs-download/v1][%d] blobDownloadExternalAssetsOK  %+v", 200, o.Payload)
}

func (o *BlobDownloadExternalAssetsOK) String() string {
	return fmt.Sprintf("[GET /fem/entities/blobs-download/v1][%d] blobDownloadExternalAssetsOK  %+v", 200, o.Payload)
}

func (o *BlobDownloadExternalAssetsOK) GetPayload() []int64 {
	return o.Payload
}

func (o *BlobDownloadExternalAssetsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBlobDownloadExternalAssetsBadRequest creates a BlobDownloadExternalAssetsBadRequest with default headers values
func NewBlobDownloadExternalAssetsBadRequest() *BlobDownloadExternalAssetsBadRequest {
	return &BlobDownloadExternalAssetsBadRequest{}
}

/*
BlobDownloadExternalAssetsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type BlobDownloadExternalAssetsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this blob download external assets bad request response has a 2xx status code
func (o *BlobDownloadExternalAssetsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this blob download external assets bad request response has a 3xx status code
func (o *BlobDownloadExternalAssetsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this blob download external assets bad request response has a 4xx status code
func (o *BlobDownloadExternalAssetsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this blob download external assets bad request response has a 5xx status code
func (o *BlobDownloadExternalAssetsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this blob download external assets bad request response a status code equal to that given
func (o *BlobDownloadExternalAssetsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the blob download external assets bad request response
func (o *BlobDownloadExternalAssetsBadRequest) Code() int {
	return 400
}

func (o *BlobDownloadExternalAssetsBadRequest) Error() string {
	return fmt.Sprintf("[GET /fem/entities/blobs-download/v1][%d] blobDownloadExternalAssetsBadRequest  %+v", 400, o.Payload)
}

func (o *BlobDownloadExternalAssetsBadRequest) String() string {
	return fmt.Sprintf("[GET /fem/entities/blobs-download/v1][%d] blobDownloadExternalAssetsBadRequest  %+v", 400, o.Payload)
}

func (o *BlobDownloadExternalAssetsBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *BlobDownloadExternalAssetsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBlobDownloadExternalAssetsForbidden creates a BlobDownloadExternalAssetsForbidden with default headers values
func NewBlobDownloadExternalAssetsForbidden() *BlobDownloadExternalAssetsForbidden {
	return &BlobDownloadExternalAssetsForbidden{}
}

/*
BlobDownloadExternalAssetsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type BlobDownloadExternalAssetsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this blob download external assets forbidden response has a 2xx status code
func (o *BlobDownloadExternalAssetsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this blob download external assets forbidden response has a 3xx status code
func (o *BlobDownloadExternalAssetsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this blob download external assets forbidden response has a 4xx status code
func (o *BlobDownloadExternalAssetsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this blob download external assets forbidden response has a 5xx status code
func (o *BlobDownloadExternalAssetsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this blob download external assets forbidden response a status code equal to that given
func (o *BlobDownloadExternalAssetsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the blob download external assets forbidden response
func (o *BlobDownloadExternalAssetsForbidden) Code() int {
	return 403
}

func (o *BlobDownloadExternalAssetsForbidden) Error() string {
	return fmt.Sprintf("[GET /fem/entities/blobs-download/v1][%d] blobDownloadExternalAssetsForbidden  %+v", 403, o.Payload)
}

func (o *BlobDownloadExternalAssetsForbidden) String() string {
	return fmt.Sprintf("[GET /fem/entities/blobs-download/v1][%d] blobDownloadExternalAssetsForbidden  %+v", 403, o.Payload)
}

func (o *BlobDownloadExternalAssetsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *BlobDownloadExternalAssetsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBlobDownloadExternalAssetsTooManyRequests creates a BlobDownloadExternalAssetsTooManyRequests with default headers values
func NewBlobDownloadExternalAssetsTooManyRequests() *BlobDownloadExternalAssetsTooManyRequests {
	return &BlobDownloadExternalAssetsTooManyRequests{}
}

/*
BlobDownloadExternalAssetsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type BlobDownloadExternalAssetsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this blob download external assets too many requests response has a 2xx status code
func (o *BlobDownloadExternalAssetsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this blob download external assets too many requests response has a 3xx status code
func (o *BlobDownloadExternalAssetsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this blob download external assets too many requests response has a 4xx status code
func (o *BlobDownloadExternalAssetsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this blob download external assets too many requests response has a 5xx status code
func (o *BlobDownloadExternalAssetsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this blob download external assets too many requests response a status code equal to that given
func (o *BlobDownloadExternalAssetsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the blob download external assets too many requests response
func (o *BlobDownloadExternalAssetsTooManyRequests) Code() int {
	return 429
}

func (o *BlobDownloadExternalAssetsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /fem/entities/blobs-download/v1][%d] blobDownloadExternalAssetsTooManyRequests  %+v", 429, o.Payload)
}

func (o *BlobDownloadExternalAssetsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /fem/entities/blobs-download/v1][%d] blobDownloadExternalAssetsTooManyRequests  %+v", 429, o.Payload)
}

func (o *BlobDownloadExternalAssetsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *BlobDownloadExternalAssetsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBlobDownloadExternalAssetsInternalServerError creates a BlobDownloadExternalAssetsInternalServerError with default headers values
func NewBlobDownloadExternalAssetsInternalServerError() *BlobDownloadExternalAssetsInternalServerError {
	return &BlobDownloadExternalAssetsInternalServerError{}
}

/*
BlobDownloadExternalAssetsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type BlobDownloadExternalAssetsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this blob download external assets internal server error response has a 2xx status code
func (o *BlobDownloadExternalAssetsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this blob download external assets internal server error response has a 3xx status code
func (o *BlobDownloadExternalAssetsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this blob download external assets internal server error response has a 4xx status code
func (o *BlobDownloadExternalAssetsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this blob download external assets internal server error response has a 5xx status code
func (o *BlobDownloadExternalAssetsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this blob download external assets internal server error response a status code equal to that given
func (o *BlobDownloadExternalAssetsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the blob download external assets internal server error response
func (o *BlobDownloadExternalAssetsInternalServerError) Code() int {
	return 500
}

func (o *BlobDownloadExternalAssetsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /fem/entities/blobs-download/v1][%d] blobDownloadExternalAssetsInternalServerError  %+v", 500, o.Payload)
}

func (o *BlobDownloadExternalAssetsInternalServerError) String() string {
	return fmt.Sprintf("[GET /fem/entities/blobs-download/v1][%d] blobDownloadExternalAssetsInternalServerError  %+v", 500, o.Payload)
}

func (o *BlobDownloadExternalAssetsInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *BlobDownloadExternalAssetsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
