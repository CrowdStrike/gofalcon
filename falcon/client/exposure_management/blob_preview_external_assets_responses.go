// Code generated by go-swagger; DO NOT EDIT.

package exposure_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// BlobPreviewExternalAssetsReader is a Reader for the BlobPreviewExternalAssets structure.
type BlobPreviewExternalAssetsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BlobPreviewExternalAssetsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBlobPreviewExternalAssetsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewBlobPreviewExternalAssetsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewBlobPreviewExternalAssetsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewBlobPreviewExternalAssetsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewBlobPreviewExternalAssetsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /fem/entities/blobs-preview/v1] blob-preview-external-assets", response, response.Code())
	}
}

// NewBlobPreviewExternalAssetsOK creates a BlobPreviewExternalAssetsOK with default headers values
func NewBlobPreviewExternalAssetsOK() *BlobPreviewExternalAssetsOK {
	return &BlobPreviewExternalAssetsOK{}
}

/*
BlobPreviewExternalAssetsOK describes a response with status code 200, with default header values.

OK
*/
type BlobPreviewExternalAssetsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainExternalAssetsBlobAPITypeV1
}

// IsSuccess returns true when this blob preview external assets o k response has a 2xx status code
func (o *BlobPreviewExternalAssetsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this blob preview external assets o k response has a 3xx status code
func (o *BlobPreviewExternalAssetsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this blob preview external assets o k response has a 4xx status code
func (o *BlobPreviewExternalAssetsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this blob preview external assets o k response has a 5xx status code
func (o *BlobPreviewExternalAssetsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this blob preview external assets o k response a status code equal to that given
func (o *BlobPreviewExternalAssetsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the blob preview external assets o k response
func (o *BlobPreviewExternalAssetsOK) Code() int {
	return 200
}

func (o *BlobPreviewExternalAssetsOK) Error() string {
	return fmt.Sprintf("[GET /fem/entities/blobs-preview/v1][%d] blobPreviewExternalAssetsOK  %+v", 200, o.Payload)
}

func (o *BlobPreviewExternalAssetsOK) String() string {
	return fmt.Sprintf("[GET /fem/entities/blobs-preview/v1][%d] blobPreviewExternalAssetsOK  %+v", 200, o.Payload)
}

func (o *BlobPreviewExternalAssetsOK) GetPayload() *models.DomainExternalAssetsBlobAPITypeV1 {
	return o.Payload
}

func (o *BlobPreviewExternalAssetsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainExternalAssetsBlobAPITypeV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBlobPreviewExternalAssetsBadRequest creates a BlobPreviewExternalAssetsBadRequest with default headers values
func NewBlobPreviewExternalAssetsBadRequest() *BlobPreviewExternalAssetsBadRequest {
	return &BlobPreviewExternalAssetsBadRequest{}
}

/*
BlobPreviewExternalAssetsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type BlobPreviewExternalAssetsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this blob preview external assets bad request response has a 2xx status code
func (o *BlobPreviewExternalAssetsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this blob preview external assets bad request response has a 3xx status code
func (o *BlobPreviewExternalAssetsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this blob preview external assets bad request response has a 4xx status code
func (o *BlobPreviewExternalAssetsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this blob preview external assets bad request response has a 5xx status code
func (o *BlobPreviewExternalAssetsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this blob preview external assets bad request response a status code equal to that given
func (o *BlobPreviewExternalAssetsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the blob preview external assets bad request response
func (o *BlobPreviewExternalAssetsBadRequest) Code() int {
	return 400
}

func (o *BlobPreviewExternalAssetsBadRequest) Error() string {
	return fmt.Sprintf("[GET /fem/entities/blobs-preview/v1][%d] blobPreviewExternalAssetsBadRequest  %+v", 400, o.Payload)
}

func (o *BlobPreviewExternalAssetsBadRequest) String() string {
	return fmt.Sprintf("[GET /fem/entities/blobs-preview/v1][%d] blobPreviewExternalAssetsBadRequest  %+v", 400, o.Payload)
}

func (o *BlobPreviewExternalAssetsBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *BlobPreviewExternalAssetsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBlobPreviewExternalAssetsForbidden creates a BlobPreviewExternalAssetsForbidden with default headers values
func NewBlobPreviewExternalAssetsForbidden() *BlobPreviewExternalAssetsForbidden {
	return &BlobPreviewExternalAssetsForbidden{}
}

/*
BlobPreviewExternalAssetsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type BlobPreviewExternalAssetsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this blob preview external assets forbidden response has a 2xx status code
func (o *BlobPreviewExternalAssetsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this blob preview external assets forbidden response has a 3xx status code
func (o *BlobPreviewExternalAssetsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this blob preview external assets forbidden response has a 4xx status code
func (o *BlobPreviewExternalAssetsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this blob preview external assets forbidden response has a 5xx status code
func (o *BlobPreviewExternalAssetsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this blob preview external assets forbidden response a status code equal to that given
func (o *BlobPreviewExternalAssetsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the blob preview external assets forbidden response
func (o *BlobPreviewExternalAssetsForbidden) Code() int {
	return 403
}

func (o *BlobPreviewExternalAssetsForbidden) Error() string {
	return fmt.Sprintf("[GET /fem/entities/blobs-preview/v1][%d] blobPreviewExternalAssetsForbidden  %+v", 403, o.Payload)
}

func (o *BlobPreviewExternalAssetsForbidden) String() string {
	return fmt.Sprintf("[GET /fem/entities/blobs-preview/v1][%d] blobPreviewExternalAssetsForbidden  %+v", 403, o.Payload)
}

func (o *BlobPreviewExternalAssetsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *BlobPreviewExternalAssetsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBlobPreviewExternalAssetsTooManyRequests creates a BlobPreviewExternalAssetsTooManyRequests with default headers values
func NewBlobPreviewExternalAssetsTooManyRequests() *BlobPreviewExternalAssetsTooManyRequests {
	return &BlobPreviewExternalAssetsTooManyRequests{}
}

/*
BlobPreviewExternalAssetsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type BlobPreviewExternalAssetsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this blob preview external assets too many requests response has a 2xx status code
func (o *BlobPreviewExternalAssetsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this blob preview external assets too many requests response has a 3xx status code
func (o *BlobPreviewExternalAssetsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this blob preview external assets too many requests response has a 4xx status code
func (o *BlobPreviewExternalAssetsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this blob preview external assets too many requests response has a 5xx status code
func (o *BlobPreviewExternalAssetsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this blob preview external assets too many requests response a status code equal to that given
func (o *BlobPreviewExternalAssetsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the blob preview external assets too many requests response
func (o *BlobPreviewExternalAssetsTooManyRequests) Code() int {
	return 429
}

func (o *BlobPreviewExternalAssetsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /fem/entities/blobs-preview/v1][%d] blobPreviewExternalAssetsTooManyRequests  %+v", 429, o.Payload)
}

func (o *BlobPreviewExternalAssetsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /fem/entities/blobs-preview/v1][%d] blobPreviewExternalAssetsTooManyRequests  %+v", 429, o.Payload)
}

func (o *BlobPreviewExternalAssetsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *BlobPreviewExternalAssetsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBlobPreviewExternalAssetsInternalServerError creates a BlobPreviewExternalAssetsInternalServerError with default headers values
func NewBlobPreviewExternalAssetsInternalServerError() *BlobPreviewExternalAssetsInternalServerError {
	return &BlobPreviewExternalAssetsInternalServerError{}
}

/*
BlobPreviewExternalAssetsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type BlobPreviewExternalAssetsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this blob preview external assets internal server error response has a 2xx status code
func (o *BlobPreviewExternalAssetsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this blob preview external assets internal server error response has a 3xx status code
func (o *BlobPreviewExternalAssetsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this blob preview external assets internal server error response has a 4xx status code
func (o *BlobPreviewExternalAssetsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this blob preview external assets internal server error response has a 5xx status code
func (o *BlobPreviewExternalAssetsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this blob preview external assets internal server error response a status code equal to that given
func (o *BlobPreviewExternalAssetsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the blob preview external assets internal server error response
func (o *BlobPreviewExternalAssetsInternalServerError) Code() int {
	return 500
}

func (o *BlobPreviewExternalAssetsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /fem/entities/blobs-preview/v1][%d] blobPreviewExternalAssetsInternalServerError  %+v", 500, o.Payload)
}

func (o *BlobPreviewExternalAssetsInternalServerError) String() string {
	return fmt.Sprintf("[GET /fem/entities/blobs-preview/v1][%d] blobPreviewExternalAssetsInternalServerError  %+v", 500, o.Payload)
}

func (o *BlobPreviewExternalAssetsInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *BlobPreviewExternalAssetsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
