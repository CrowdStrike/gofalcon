// Code generated by go-swagger; DO NOT EDIT.

package exposure_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new exposure management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for exposure management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AggregateExternalAssets(params *AggregateExternalAssetsParams, opts ...ClientOption) (*AggregateExternalAssetsOK, error)

	BlobDownloadExternalAssets(params *BlobDownloadExternalAssetsParams, opts ...ClientOption) (*BlobDownloadExternalAssetsOK, error)

	BlobPreviewExternalAssets(params *BlobPreviewExternalAssetsParams, opts ...ClientOption) (*BlobPreviewExternalAssetsOK, error)

	GetExternalAssets(params *GetExternalAssetsParams, opts ...ClientOption) (*GetExternalAssetsOK, error)

	PatchExternalAssets(params *PatchExternalAssetsParams, opts ...ClientOption) (*PatchExternalAssetsOK, error)

	QueryExternalAssets(params *QueryExternalAssetsParams, opts ...ClientOption) (*QueryExternalAssetsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AggregateExternalAssets returns external assets aggregates

Returns external assets aggregates as specified via JSON in request body.
*/
func (a *Client) AggregateExternalAssets(params *AggregateExternalAssetsParams, opts ...ClientOption) (*AggregateExternalAssetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAggregateExternalAssetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "aggregate-external-assets",
		Method:             "POST",
		PathPattern:        "/fem/aggregates/external-assets/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AggregateExternalAssetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AggregateExternalAssetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for aggregate-external-assets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BlobDownloadExternalAssets downloads the entire contents of the blob the relative link to this endpoint is returned in the g e t entities external assets v1 request

Download the entire contents of the blob.
*/
func (a *Client) BlobDownloadExternalAssets(params *BlobDownloadExternalAssetsParams, opts ...ClientOption) (*BlobDownloadExternalAssetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBlobDownloadExternalAssetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "blob-download-external-assets",
		Method:             "GET",
		PathPattern:        "/fem/entities/blobs-download/v1",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BlobDownloadExternalAssetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BlobDownloadExternalAssetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for blob-download-external-assets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BlobPreviewExternalAssets downloads a preview of the blob the relative link to this endpoint is returned in the g e t entities external assets v1 request

Download a preview of the blob.
*/
func (a *Client) BlobPreviewExternalAssets(params *BlobPreviewExternalAssetsParams, opts ...ClientOption) (*BlobPreviewExternalAssetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBlobPreviewExternalAssetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "blob-preview-external-assets",
		Method:             "GET",
		PathPattern:        "/fem/entities/blobs-preview/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BlobPreviewExternalAssetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BlobPreviewExternalAssetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for blob-preview-external-assets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExternalAssets gets details on external assets by providing one or more i ds
*/
func (a *Client) GetExternalAssets(params *GetExternalAssetsParams, opts ...ClientOption) (*GetExternalAssetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExternalAssetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-external-assets",
		Method:             "GET",
		PathPattern:        "/fem/entities/external-assets/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalAssetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExternalAssetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-external-assets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchExternalAssets updates the details of external assets
*/
func (a *Client) PatchExternalAssets(params *PatchExternalAssetsParams, opts ...ClientOption) (*PatchExternalAssetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchExternalAssetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patch-external-assets",
		Method:             "PATCH",
		PathPattern:        "/fem/entities/external-assets/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchExternalAssetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchExternalAssetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patch-external-assets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueryExternalAssets gets a list of external asset i ds that match the provided filter conditions use these i ds with the entities external assets v1 endpoints
*/
func (a *Client) QueryExternalAssets(params *QueryExternalAssetsParams, opts ...ClientOption) (*QueryExternalAssetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryExternalAssetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "query-external-assets",
		Method:             "GET",
		PathPattern:        "/fem/queries/external-assets/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryExternalAssetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryExternalAssetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for query-external-assets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
