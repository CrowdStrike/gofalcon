// Code generated by go-swagger; DO NOT EDIT.

package exposure_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// QueryExternalAssetsReader is a Reader for the QueryExternalAssets structure.
type QueryExternalAssetsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryExternalAssetsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryExternalAssetsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryExternalAssetsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewQueryExternalAssetsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewQueryExternalAssetsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewQueryExternalAssetsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /fem/queries/external-assets/v1] query-external-assets", response, response.Code())
	}
}

// NewQueryExternalAssetsOK creates a QueryExternalAssetsOK with default headers values
func NewQueryExternalAssetsOK() *QueryExternalAssetsOK {
	return &QueryExternalAssetsOK{}
}

/*
QueryExternalAssetsOK describes a response with status code 200, with default header values.

OK
*/
type QueryExternalAssetsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecQueryResponse
}

// IsSuccess returns true when this query external assets o k response has a 2xx status code
func (o *QueryExternalAssetsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this query external assets o k response has a 3xx status code
func (o *QueryExternalAssetsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query external assets o k response has a 4xx status code
func (o *QueryExternalAssetsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this query external assets o k response has a 5xx status code
func (o *QueryExternalAssetsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this query external assets o k response a status code equal to that given
func (o *QueryExternalAssetsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the query external assets o k response
func (o *QueryExternalAssetsOK) Code() int {
	return 200
}

func (o *QueryExternalAssetsOK) Error() string {
	return fmt.Sprintf("[GET /fem/queries/external-assets/v1][%d] queryExternalAssetsOK  %+v", 200, o.Payload)
}

func (o *QueryExternalAssetsOK) String() string {
	return fmt.Sprintf("[GET /fem/queries/external-assets/v1][%d] queryExternalAssetsOK  %+v", 200, o.Payload)
}

func (o *QueryExternalAssetsOK) GetPayload() *models.MsaspecQueryResponse {
	return o.Payload
}

func (o *QueryExternalAssetsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryExternalAssetsBadRequest creates a QueryExternalAssetsBadRequest with default headers values
func NewQueryExternalAssetsBadRequest() *QueryExternalAssetsBadRequest {
	return &QueryExternalAssetsBadRequest{}
}

/*
QueryExternalAssetsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type QueryExternalAssetsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this query external assets bad request response has a 2xx status code
func (o *QueryExternalAssetsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query external assets bad request response has a 3xx status code
func (o *QueryExternalAssetsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query external assets bad request response has a 4xx status code
func (o *QueryExternalAssetsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this query external assets bad request response has a 5xx status code
func (o *QueryExternalAssetsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this query external assets bad request response a status code equal to that given
func (o *QueryExternalAssetsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the query external assets bad request response
func (o *QueryExternalAssetsBadRequest) Code() int {
	return 400
}

func (o *QueryExternalAssetsBadRequest) Error() string {
	return fmt.Sprintf("[GET /fem/queries/external-assets/v1][%d] queryExternalAssetsBadRequest  %+v", 400, o.Payload)
}

func (o *QueryExternalAssetsBadRequest) String() string {
	return fmt.Sprintf("[GET /fem/queries/external-assets/v1][%d] queryExternalAssetsBadRequest  %+v", 400, o.Payload)
}

func (o *QueryExternalAssetsBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *QueryExternalAssetsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryExternalAssetsForbidden creates a QueryExternalAssetsForbidden with default headers values
func NewQueryExternalAssetsForbidden() *QueryExternalAssetsForbidden {
	return &QueryExternalAssetsForbidden{}
}

/*
QueryExternalAssetsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type QueryExternalAssetsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this query external assets forbidden response has a 2xx status code
func (o *QueryExternalAssetsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query external assets forbidden response has a 3xx status code
func (o *QueryExternalAssetsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query external assets forbidden response has a 4xx status code
func (o *QueryExternalAssetsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this query external assets forbidden response has a 5xx status code
func (o *QueryExternalAssetsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this query external assets forbidden response a status code equal to that given
func (o *QueryExternalAssetsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the query external assets forbidden response
func (o *QueryExternalAssetsForbidden) Code() int {
	return 403
}

func (o *QueryExternalAssetsForbidden) Error() string {
	return fmt.Sprintf("[GET /fem/queries/external-assets/v1][%d] queryExternalAssetsForbidden  %+v", 403, o.Payload)
}

func (o *QueryExternalAssetsForbidden) String() string {
	return fmt.Sprintf("[GET /fem/queries/external-assets/v1][%d] queryExternalAssetsForbidden  %+v", 403, o.Payload)
}

func (o *QueryExternalAssetsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryExternalAssetsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryExternalAssetsTooManyRequests creates a QueryExternalAssetsTooManyRequests with default headers values
func NewQueryExternalAssetsTooManyRequests() *QueryExternalAssetsTooManyRequests {
	return &QueryExternalAssetsTooManyRequests{}
}

/*
QueryExternalAssetsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type QueryExternalAssetsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this query external assets too many requests response has a 2xx status code
func (o *QueryExternalAssetsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query external assets too many requests response has a 3xx status code
func (o *QueryExternalAssetsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query external assets too many requests response has a 4xx status code
func (o *QueryExternalAssetsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this query external assets too many requests response has a 5xx status code
func (o *QueryExternalAssetsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this query external assets too many requests response a status code equal to that given
func (o *QueryExternalAssetsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the query external assets too many requests response
func (o *QueryExternalAssetsTooManyRequests) Code() int {
	return 429
}

func (o *QueryExternalAssetsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /fem/queries/external-assets/v1][%d] queryExternalAssetsTooManyRequests  %+v", 429, o.Payload)
}

func (o *QueryExternalAssetsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /fem/queries/external-assets/v1][%d] queryExternalAssetsTooManyRequests  %+v", 429, o.Payload)
}

func (o *QueryExternalAssetsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryExternalAssetsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryExternalAssetsInternalServerError creates a QueryExternalAssetsInternalServerError with default headers values
func NewQueryExternalAssetsInternalServerError() *QueryExternalAssetsInternalServerError {
	return &QueryExternalAssetsInternalServerError{}
}

/*
QueryExternalAssetsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type QueryExternalAssetsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this query external assets internal server error response has a 2xx status code
func (o *QueryExternalAssetsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query external assets internal server error response has a 3xx status code
func (o *QueryExternalAssetsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query external assets internal server error response has a 4xx status code
func (o *QueryExternalAssetsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this query external assets internal server error response has a 5xx status code
func (o *QueryExternalAssetsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this query external assets internal server error response a status code equal to that given
func (o *QueryExternalAssetsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the query external assets internal server error response
func (o *QueryExternalAssetsInternalServerError) Code() int {
	return 500
}

func (o *QueryExternalAssetsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /fem/queries/external-assets/v1][%d] queryExternalAssetsInternalServerError  %+v", 500, o.Payload)
}

func (o *QueryExternalAssetsInternalServerError) String() string {
	return fmt.Sprintf("[GET /fem/queries/external-assets/v1][%d] queryExternalAssetsInternalServerError  %+v", 500, o.Payload)
}

func (o *QueryExternalAssetsInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *QueryExternalAssetsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
