// Code generated by go-swagger; DO NOT EDIT.

package exposure_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// QueryEcosystemSubsidiariesReader is a Reader for the QueryEcosystemSubsidiaries structure.
type QueryEcosystemSubsidiariesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryEcosystemSubsidiariesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryEcosystemSubsidiariesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryEcosystemSubsidiariesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewQueryEcosystemSubsidiariesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewQueryEcosystemSubsidiariesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewQueryEcosystemSubsidiariesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /fem/queries/ecosystem-subsidiaries/v1] query-ecosystem-subsidiaries", response, response.Code())
	}
}

// NewQueryEcosystemSubsidiariesOK creates a QueryEcosystemSubsidiariesOK with default headers values
func NewQueryEcosystemSubsidiariesOK() *QueryEcosystemSubsidiariesOK {
	return &QueryEcosystemSubsidiariesOK{}
}

/*
QueryEcosystemSubsidiariesOK describes a response with status code 200, with default header values.

OK
*/
type QueryEcosystemSubsidiariesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainFemEcosystemSubsidiariesQueryResponse
}

// IsSuccess returns true when this query ecosystem subsidiaries o k response has a 2xx status code
func (o *QueryEcosystemSubsidiariesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this query ecosystem subsidiaries o k response has a 3xx status code
func (o *QueryEcosystemSubsidiariesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query ecosystem subsidiaries o k response has a 4xx status code
func (o *QueryEcosystemSubsidiariesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this query ecosystem subsidiaries o k response has a 5xx status code
func (o *QueryEcosystemSubsidiariesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this query ecosystem subsidiaries o k response a status code equal to that given
func (o *QueryEcosystemSubsidiariesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the query ecosystem subsidiaries o k response
func (o *QueryEcosystemSubsidiariesOK) Code() int {
	return 200
}

func (o *QueryEcosystemSubsidiariesOK) Error() string {
	return fmt.Sprintf("[GET /fem/queries/ecosystem-subsidiaries/v1][%d] queryEcosystemSubsidiariesOK  %+v", 200, o.Payload)
}

func (o *QueryEcosystemSubsidiariesOK) String() string {
	return fmt.Sprintf("[GET /fem/queries/ecosystem-subsidiaries/v1][%d] queryEcosystemSubsidiariesOK  %+v", 200, o.Payload)
}

func (o *QueryEcosystemSubsidiariesOK) GetPayload() *models.DomainFemEcosystemSubsidiariesQueryResponse {
	return o.Payload
}

func (o *QueryEcosystemSubsidiariesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainFemEcosystemSubsidiariesQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryEcosystemSubsidiariesBadRequest creates a QueryEcosystemSubsidiariesBadRequest with default headers values
func NewQueryEcosystemSubsidiariesBadRequest() *QueryEcosystemSubsidiariesBadRequest {
	return &QueryEcosystemSubsidiariesBadRequest{}
}

/*
QueryEcosystemSubsidiariesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type QueryEcosystemSubsidiariesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainFemEcosystemSubsidiariesResponseFields
}

// IsSuccess returns true when this query ecosystem subsidiaries bad request response has a 2xx status code
func (o *QueryEcosystemSubsidiariesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query ecosystem subsidiaries bad request response has a 3xx status code
func (o *QueryEcosystemSubsidiariesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query ecosystem subsidiaries bad request response has a 4xx status code
func (o *QueryEcosystemSubsidiariesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this query ecosystem subsidiaries bad request response has a 5xx status code
func (o *QueryEcosystemSubsidiariesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this query ecosystem subsidiaries bad request response a status code equal to that given
func (o *QueryEcosystemSubsidiariesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the query ecosystem subsidiaries bad request response
func (o *QueryEcosystemSubsidiariesBadRequest) Code() int {
	return 400
}

func (o *QueryEcosystemSubsidiariesBadRequest) Error() string {
	return fmt.Sprintf("[GET /fem/queries/ecosystem-subsidiaries/v1][%d] queryEcosystemSubsidiariesBadRequest  %+v", 400, o.Payload)
}

func (o *QueryEcosystemSubsidiariesBadRequest) String() string {
	return fmt.Sprintf("[GET /fem/queries/ecosystem-subsidiaries/v1][%d] queryEcosystemSubsidiariesBadRequest  %+v", 400, o.Payload)
}

func (o *QueryEcosystemSubsidiariesBadRequest) GetPayload() *models.DomainFemEcosystemSubsidiariesResponseFields {
	return o.Payload
}

func (o *QueryEcosystemSubsidiariesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainFemEcosystemSubsidiariesResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryEcosystemSubsidiariesForbidden creates a QueryEcosystemSubsidiariesForbidden with default headers values
func NewQueryEcosystemSubsidiariesForbidden() *QueryEcosystemSubsidiariesForbidden {
	return &QueryEcosystemSubsidiariesForbidden{}
}

/*
QueryEcosystemSubsidiariesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type QueryEcosystemSubsidiariesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this query ecosystem subsidiaries forbidden response has a 2xx status code
func (o *QueryEcosystemSubsidiariesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query ecosystem subsidiaries forbidden response has a 3xx status code
func (o *QueryEcosystemSubsidiariesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query ecosystem subsidiaries forbidden response has a 4xx status code
func (o *QueryEcosystemSubsidiariesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this query ecosystem subsidiaries forbidden response has a 5xx status code
func (o *QueryEcosystemSubsidiariesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this query ecosystem subsidiaries forbidden response a status code equal to that given
func (o *QueryEcosystemSubsidiariesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the query ecosystem subsidiaries forbidden response
func (o *QueryEcosystemSubsidiariesForbidden) Code() int {
	return 403
}

func (o *QueryEcosystemSubsidiariesForbidden) Error() string {
	return fmt.Sprintf("[GET /fem/queries/ecosystem-subsidiaries/v1][%d] queryEcosystemSubsidiariesForbidden  %+v", 403, o.Payload)
}

func (o *QueryEcosystemSubsidiariesForbidden) String() string {
	return fmt.Sprintf("[GET /fem/queries/ecosystem-subsidiaries/v1][%d] queryEcosystemSubsidiariesForbidden  %+v", 403, o.Payload)
}

func (o *QueryEcosystemSubsidiariesForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryEcosystemSubsidiariesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryEcosystemSubsidiariesTooManyRequests creates a QueryEcosystemSubsidiariesTooManyRequests with default headers values
func NewQueryEcosystemSubsidiariesTooManyRequests() *QueryEcosystemSubsidiariesTooManyRequests {
	return &QueryEcosystemSubsidiariesTooManyRequests{}
}

/*
QueryEcosystemSubsidiariesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type QueryEcosystemSubsidiariesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this query ecosystem subsidiaries too many requests response has a 2xx status code
func (o *QueryEcosystemSubsidiariesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query ecosystem subsidiaries too many requests response has a 3xx status code
func (o *QueryEcosystemSubsidiariesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query ecosystem subsidiaries too many requests response has a 4xx status code
func (o *QueryEcosystemSubsidiariesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this query ecosystem subsidiaries too many requests response has a 5xx status code
func (o *QueryEcosystemSubsidiariesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this query ecosystem subsidiaries too many requests response a status code equal to that given
func (o *QueryEcosystemSubsidiariesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the query ecosystem subsidiaries too many requests response
func (o *QueryEcosystemSubsidiariesTooManyRequests) Code() int {
	return 429
}

func (o *QueryEcosystemSubsidiariesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /fem/queries/ecosystem-subsidiaries/v1][%d] queryEcosystemSubsidiariesTooManyRequests  %+v", 429, o.Payload)
}

func (o *QueryEcosystemSubsidiariesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /fem/queries/ecosystem-subsidiaries/v1][%d] queryEcosystemSubsidiariesTooManyRequests  %+v", 429, o.Payload)
}

func (o *QueryEcosystemSubsidiariesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryEcosystemSubsidiariesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryEcosystemSubsidiariesInternalServerError creates a QueryEcosystemSubsidiariesInternalServerError with default headers values
func NewQueryEcosystemSubsidiariesInternalServerError() *QueryEcosystemSubsidiariesInternalServerError {
	return &QueryEcosystemSubsidiariesInternalServerError{}
}

/*
QueryEcosystemSubsidiariesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type QueryEcosystemSubsidiariesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainFemEcosystemSubsidiariesResponseFields
}

// IsSuccess returns true when this query ecosystem subsidiaries internal server error response has a 2xx status code
func (o *QueryEcosystemSubsidiariesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query ecosystem subsidiaries internal server error response has a 3xx status code
func (o *QueryEcosystemSubsidiariesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query ecosystem subsidiaries internal server error response has a 4xx status code
func (o *QueryEcosystemSubsidiariesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this query ecosystem subsidiaries internal server error response has a 5xx status code
func (o *QueryEcosystemSubsidiariesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this query ecosystem subsidiaries internal server error response a status code equal to that given
func (o *QueryEcosystemSubsidiariesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the query ecosystem subsidiaries internal server error response
func (o *QueryEcosystemSubsidiariesInternalServerError) Code() int {
	return 500
}

func (o *QueryEcosystemSubsidiariesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /fem/queries/ecosystem-subsidiaries/v1][%d] queryEcosystemSubsidiariesInternalServerError  %+v", 500, o.Payload)
}

func (o *QueryEcosystemSubsidiariesInternalServerError) String() string {
	return fmt.Sprintf("[GET /fem/queries/ecosystem-subsidiaries/v1][%d] queryEcosystemSubsidiariesInternalServerError  %+v", 500, o.Payload)
}

func (o *QueryEcosystemSubsidiariesInternalServerError) GetPayload() *models.DomainFemEcosystemSubsidiariesResponseFields {
	return o.Payload
}

func (o *QueryEcosystemSubsidiariesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainFemEcosystemSubsidiariesResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
