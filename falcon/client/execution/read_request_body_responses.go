// Code generated by go-swagger; DO NOT EDIT.

package execution

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ReadRequestBodyReader is a Reader for the ReadRequestBody structure.
type ReadRequestBodyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadRequestBodyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadRequestBodyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReadRequestBodyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReadRequestBodyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewReadRequestBodyTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadRequestBodyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /faas-gateway/entities/execution-request-body/v2] ReadRequestBody", response, response.Code())
	}
}

// NewReadRequestBodyOK creates a ReadRequestBodyOK with default headers values
func NewReadRequestBodyOK() *ReadRequestBodyOK {
	return &ReadRequestBodyOK{}
}

/*
ReadRequestBodyOK describes a response with status code 200, with default header values.

request body retrieved successfully
*/
type ReadRequestBodyOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload models.MapStringInterface
}

// IsSuccess returns true when this read request body o k response has a 2xx status code
func (o *ReadRequestBodyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this read request body o k response has a 3xx status code
func (o *ReadRequestBodyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read request body o k response has a 4xx status code
func (o *ReadRequestBodyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this read request body o k response has a 5xx status code
func (o *ReadRequestBodyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this read request body o k response a status code equal to that given
func (o *ReadRequestBodyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the read request body o k response
func (o *ReadRequestBodyOK) Code() int {
	return 200
}

func (o *ReadRequestBodyOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /faas-gateway/entities/execution-request-body/v2][%d] readRequestBodyOK %s", 200, payload)
}

func (o *ReadRequestBodyOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /faas-gateway/entities/execution-request-body/v2][%d] readRequestBodyOK %s", 200, payload)
}

func (o *ReadRequestBodyOK) GetPayload() models.MapStringInterface {
	return o.Payload
}

func (o *ReadRequestBodyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadRequestBodyBadRequest creates a ReadRequestBodyBadRequest with default headers values
func NewReadRequestBodyBadRequest() *ReadRequestBodyBadRequest {
	return &ReadRequestBodyBadRequest{}
}

/*
ReadRequestBodyBadRequest describes a response with status code 400, with default header values.

Invalid arguments
*/
type ReadRequestBodyBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this read request body bad request response has a 2xx status code
func (o *ReadRequestBodyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read request body bad request response has a 3xx status code
func (o *ReadRequestBodyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read request body bad request response has a 4xx status code
func (o *ReadRequestBodyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this read request body bad request response has a 5xx status code
func (o *ReadRequestBodyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this read request body bad request response a status code equal to that given
func (o *ReadRequestBodyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the read request body bad request response
func (o *ReadRequestBodyBadRequest) Code() int {
	return 400
}

func (o *ReadRequestBodyBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /faas-gateway/entities/execution-request-body/v2][%d] readRequestBodyBadRequest %s", 400, payload)
}

func (o *ReadRequestBodyBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /faas-gateway/entities/execution-request-body/v2][%d] readRequestBodyBadRequest %s", 400, payload)
}

func (o *ReadRequestBodyBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ReadRequestBodyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadRequestBodyForbidden creates a ReadRequestBodyForbidden with default headers values
func NewReadRequestBodyForbidden() *ReadRequestBodyForbidden {
	return &ReadRequestBodyForbidden{}
}

/*
ReadRequestBodyForbidden describes a response with status code 403, with default header values.

Authorization failed
*/
type ReadRequestBodyForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this read request body forbidden response has a 2xx status code
func (o *ReadRequestBodyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read request body forbidden response has a 3xx status code
func (o *ReadRequestBodyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read request body forbidden response has a 4xx status code
func (o *ReadRequestBodyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this read request body forbidden response has a 5xx status code
func (o *ReadRequestBodyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this read request body forbidden response a status code equal to that given
func (o *ReadRequestBodyForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the read request body forbidden response
func (o *ReadRequestBodyForbidden) Code() int {
	return 403
}

func (o *ReadRequestBodyForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /faas-gateway/entities/execution-request-body/v2][%d] readRequestBodyForbidden %s", 403, payload)
}

func (o *ReadRequestBodyForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /faas-gateway/entities/execution-request-body/v2][%d] readRequestBodyForbidden %s", 403, payload)
}

func (o *ReadRequestBodyForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ReadRequestBodyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadRequestBodyTooManyRequests creates a ReadRequestBodyTooManyRequests with default headers values
func NewReadRequestBodyTooManyRequests() *ReadRequestBodyTooManyRequests {
	return &ReadRequestBodyTooManyRequests{}
}

/*
ReadRequestBodyTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ReadRequestBodyTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this read request body too many requests response has a 2xx status code
func (o *ReadRequestBodyTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read request body too many requests response has a 3xx status code
func (o *ReadRequestBodyTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read request body too many requests response has a 4xx status code
func (o *ReadRequestBodyTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this read request body too many requests response has a 5xx status code
func (o *ReadRequestBodyTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this read request body too many requests response a status code equal to that given
func (o *ReadRequestBodyTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the read request body too many requests response
func (o *ReadRequestBodyTooManyRequests) Code() int {
	return 429
}

func (o *ReadRequestBodyTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /faas-gateway/entities/execution-request-body/v2][%d] readRequestBodyTooManyRequests %s", 429, payload)
}

func (o *ReadRequestBodyTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /faas-gateway/entities/execution-request-body/v2][%d] readRequestBodyTooManyRequests %s", 429, payload)
}

func (o *ReadRequestBodyTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ReadRequestBodyTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadRequestBodyInternalServerError creates a ReadRequestBodyInternalServerError with default headers values
func NewReadRequestBodyInternalServerError() *ReadRequestBodyInternalServerError {
	return &ReadRequestBodyInternalServerError{}
}

/*
ReadRequestBodyInternalServerError describes a response with status code 500, with default header values.

Unexpected error during request body read
*/
type ReadRequestBodyInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this read request body internal server error response has a 2xx status code
func (o *ReadRequestBodyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read request body internal server error response has a 3xx status code
func (o *ReadRequestBodyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read request body internal server error response has a 4xx status code
func (o *ReadRequestBodyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this read request body internal server error response has a 5xx status code
func (o *ReadRequestBodyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this read request body internal server error response a status code equal to that given
func (o *ReadRequestBodyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the read request body internal server error response
func (o *ReadRequestBodyInternalServerError) Code() int {
	return 500
}

func (o *ReadRequestBodyInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /faas-gateway/entities/execution-request-body/v2][%d] readRequestBodyInternalServerError %s", 500, payload)
}

func (o *ReadRequestBodyInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /faas-gateway/entities/execution-request-body/v2][%d] readRequestBodyInternalServerError %s", 500, payload)
}

func (o *ReadRequestBodyInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ReadRequestBodyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
