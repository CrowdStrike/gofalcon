// Code generated by go-swagger; DO NOT EDIT.

package identity_detections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new identity detections API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for identity detections API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	APIPreemptProxyDeletePolicyEnforcement(params *APIPreemptProxyDeletePolicyEnforcementParams, opts ...ClientOption) (*APIPreemptProxyDeletePolicyEnforcementOK, error)

	APIPreemptProxyGetHealth(params *APIPreemptProxyGetHealthParams, opts ...ClientOption) (*APIPreemptProxyGetHealthOK, error)

	APIPreemptProxyGetMfaNextState(params *APIPreemptProxyGetMfaNextStateParams, opts ...ClientOption) (*APIPreemptProxyGetMfaNextStateOK, error)

	APIPreemptProxyGetMfaPublicInfo(params *APIPreemptProxyGetMfaPublicInfoParams, opts ...ClientOption) (*APIPreemptProxyGetMfaPublicInfoOK, error)

	APIPreemptProxyGetMfaUIHTML(params *APIPreemptProxyGetMfaUIHTMLParams, opts ...ClientOption) (*APIPreemptProxyGetMfaUIHTMLOK, error)

	APIPreemptProxyGetMfaUIJs(params *APIPreemptProxyGetMfaUIJsParams, opts ...ClientOption) (*APIPreemptProxyGetMfaUIJsOK, error)

	APIPreemptProxyGetPolicyEnforcement(params *APIPreemptProxyGetPolicyEnforcementParams, opts ...ClientOption) (*APIPreemptProxyGetPolicyEnforcementOK, error)

	APIPreemptProxyGetPolicyEnforcementResult(params *APIPreemptProxyGetPolicyEnforcementResultParams, opts ...ClientOption) (*APIPreemptProxyGetPolicyEnforcementResultOK, error)

	APIPreemptProxyGetSystemState(params *APIPreemptProxyGetSystemStateParams, opts ...ClientOption) (*APIPreemptProxyGetSystemStateOK, error)

	APIPreemptProxyPolicyEnforcementInit(params *APIPreemptProxyPolicyEnforcementInitParams, opts ...ClientOption) (*APIPreemptProxyPolicyEnforcementInitOK, error)

	APIPreemptProxyPolicyEnforcementInitSync(params *APIPreemptProxyPolicyEnforcementInitSyncParams, opts ...ClientOption) (*APIPreemptProxyPolicyEnforcementInitSyncOK, error)

	APIPreemptProxyPostMfaNextState(params *APIPreemptProxyPostMfaNextStateParams, opts ...ClientOption) (*APIPreemptProxyPostMfaNextStateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  APIPreemptProxyDeletePolicyEnforcement deletes the policy enforcement from the preempt VM
*/
func (a *Client) APIPreemptProxyDeletePolicyEnforcement(params *APIPreemptProxyDeletePolicyEnforcementParams, opts ...ClientOption) (*APIPreemptProxyDeletePolicyEnforcementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIPreemptProxyDeletePolicyEnforcementParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api.preempt.proxy.delete.policy.enforcement",
		Method:             "DELETE",
		PathPattern:        "/identity-protection/entities/policy/enforcement/{guid}/v1",
		ProducesMediaTypes: []string{"application/json", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APIPreemptProxyDeletePolicyEnforcementReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIPreemptProxyDeletePolicyEnforcementOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api.preempt.proxy.delete.policy.enforcement: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APIPreemptProxyGetHealth gets the health status of the preempt VM
*/
func (a *Client) APIPreemptProxyGetHealth(params *APIPreemptProxyGetHealthParams, opts ...ClientOption) (*APIPreemptProxyGetHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIPreemptProxyGetHealthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api.preempt.proxy.get.health",
		Method:             "GET",
		PathPattern:        "/identity-protection/entities/health/v1",
		ProducesMediaTypes: []string{"application/json", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APIPreemptProxyGetHealthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIPreemptProxyGetHealthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api.preempt.proxy.get.health: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APIPreemptProxyGetMfaNextState gets the next state of the m f a proxy from the preempt VM
*/
func (a *Client) APIPreemptProxyGetMfaNextState(params *APIPreemptProxyGetMfaNextStateParams, opts ...ClientOption) (*APIPreemptProxyGetMfaNextStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIPreemptProxyGetMfaNextStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api.preempt.proxy.get.mfa.next-state",
		Method:             "GET",
		PathPattern:        "/identity-protection/entities/mfa/next-state/v1",
		ProducesMediaTypes: []string{"application/json", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APIPreemptProxyGetMfaNextStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIPreemptProxyGetMfaNextStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api.preempt.proxy.get.mfa.next-state: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APIPreemptProxyGetMfaPublicInfo gets the public info for the m f a proxy from the preempt VM
*/
func (a *Client) APIPreemptProxyGetMfaPublicInfo(params *APIPreemptProxyGetMfaPublicInfoParams, opts ...ClientOption) (*APIPreemptProxyGetMfaPublicInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIPreemptProxyGetMfaPublicInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api.preempt.proxy.get.mfa.public-info",
		Method:             "GET",
		PathPattern:        "/identity-protection/entities/mfa/mfa-public-info/v1",
		ProducesMediaTypes: []string{"application/json", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APIPreemptProxyGetMfaPublicInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIPreemptProxyGetMfaPublicInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api.preempt.proxy.get.mfa.public-info: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APIPreemptProxyGetMfaUIHTML gets the UI java script for the m f a proxy from the preempt VM
*/
func (a *Client) APIPreemptProxyGetMfaUIHTML(params *APIPreemptProxyGetMfaUIHTMLParams, opts ...ClientOption) (*APIPreemptProxyGetMfaUIHTMLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIPreemptProxyGetMfaUIHTMLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api.preempt.proxy.get.mfa.ui-html",
		Method:             "GET",
		PathPattern:        "/identity-protection/entities/mfa/mfa-ui.html/v1",
		ProducesMediaTypes: []string{"text/html", "text/html; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APIPreemptProxyGetMfaUIHTMLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIPreemptProxyGetMfaUIHTMLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api.preempt.proxy.get.mfa.ui-html: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APIPreemptProxyGetMfaUIJs sets the next state of the m f a proxy from the preempt VM
*/
func (a *Client) APIPreemptProxyGetMfaUIJs(params *APIPreemptProxyGetMfaUIJsParams, opts ...ClientOption) (*APIPreemptProxyGetMfaUIJsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIPreemptProxyGetMfaUIJsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api.preempt.proxy.get.mfa.ui-js",
		Method:             "GET",
		PathPattern:        "/identity-protection/entities/mfa/mfa-ui.js/v1",
		ProducesMediaTypes: []string{"application/javascript", "application/javascript; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APIPreemptProxyGetMfaUIJsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIPreemptProxyGetMfaUIJsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api.preempt.proxy.get.mfa.ui-js: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APIPreemptProxyGetPolicyEnforcement gets the policy enforcement from the preempt VM
*/
func (a *Client) APIPreemptProxyGetPolicyEnforcement(params *APIPreemptProxyGetPolicyEnforcementParams, opts ...ClientOption) (*APIPreemptProxyGetPolicyEnforcementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIPreemptProxyGetPolicyEnforcementParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api.preempt.proxy.get.policy.enforcement",
		Method:             "GET",
		PathPattern:        "/identity-protection/entities/policy/enforcement/{guid}/v1",
		ProducesMediaTypes: []string{"application/json", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APIPreemptProxyGetPolicyEnforcementReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIPreemptProxyGetPolicyEnforcementOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api.preempt.proxy.get.policy.enforcement: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APIPreemptProxyGetPolicyEnforcementResult gets the policy enforcement result from the preempt VM
*/
func (a *Client) APIPreemptProxyGetPolicyEnforcementResult(params *APIPreemptProxyGetPolicyEnforcementResultParams, opts ...ClientOption) (*APIPreemptProxyGetPolicyEnforcementResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIPreemptProxyGetPolicyEnforcementResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api.preempt.proxy.get.policy.enforcement.result",
		Method:             "GET",
		PathPattern:        "/identity-protection/entities/policy/enforcement/{guid}/result/v1",
		ProducesMediaTypes: []string{"application/json", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APIPreemptProxyGetPolicyEnforcementResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIPreemptProxyGetPolicyEnforcementResultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api.preempt.proxy.get.policy.enforcement.result: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APIPreemptProxyGetSystemState gets the system state of the preempt VM
*/
func (a *Client) APIPreemptProxyGetSystemState(params *APIPreemptProxyGetSystemStateParams, opts ...ClientOption) (*APIPreemptProxyGetSystemStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIPreemptProxyGetSystemStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api.preempt.proxy.get.system-state",
		Method:             "GET",
		PathPattern:        "/identity-protection/entities/system-state/v1",
		ProducesMediaTypes: []string{"application/json", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APIPreemptProxyGetSystemStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIPreemptProxyGetSystemStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api.preempt.proxy.get.system-state: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APIPreemptProxyPolicyEnforcementInit initializes enforcement policy for the preempt VM
*/
func (a *Client) APIPreemptProxyPolicyEnforcementInit(params *APIPreemptProxyPolicyEnforcementInitParams, opts ...ClientOption) (*APIPreemptProxyPolicyEnforcementInitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIPreemptProxyPolicyEnforcementInitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api.preempt.proxy.policy.enforcement.init",
		Method:             "POST",
		PathPattern:        "/identity-protection/entities/policy/enforcement/init/v1",
		ProducesMediaTypes: []string{"application/json", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APIPreemptProxyPolicyEnforcementInitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIPreemptProxyPolicyEnforcementInitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api.preempt.proxy.policy.enforcement.init: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APIPreemptProxyPolicyEnforcementInitSync synchronouslies initializes enforcement policy for the preempt VM
*/
func (a *Client) APIPreemptProxyPolicyEnforcementInitSync(params *APIPreemptProxyPolicyEnforcementInitSyncParams, opts ...ClientOption) (*APIPreemptProxyPolicyEnforcementInitSyncOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIPreemptProxyPolicyEnforcementInitSyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api.preempt.proxy.policy.enforcement.init.sync",
		Method:             "POST",
		PathPattern:        "/identity-protection/entities/policy/enforcement/synchronous/init/v1",
		ProducesMediaTypes: []string{"application/json", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APIPreemptProxyPolicyEnforcementInitSyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIPreemptProxyPolicyEnforcementInitSyncOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api.preempt.proxy.policy.enforcement.init.sync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APIPreemptProxyPostMfaNextState sets the next state of the m f a proxy from the preempt VM
*/
func (a *Client) APIPreemptProxyPostMfaNextState(params *APIPreemptProxyPostMfaNextStateParams, opts ...ClientOption) (*APIPreemptProxyPostMfaNextStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIPreemptProxyPostMfaNextStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api.preempt.proxy.post.mfa.next-state",
		Method:             "POST",
		PathPattern:        "/identity-protection/entities/mfa/next-state/v1",
		ProducesMediaTypes: []string{"application/json", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APIPreemptProxyPostMfaNextStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIPreemptProxyPostMfaNextStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api.preempt.proxy.post.mfa.next-state: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
