// Code generated by go-swagger; DO NOT EDIT.

package identity_detections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// APIPreemptProxyDeletePolicyEnforcementReader is a Reader for the APIPreemptProxyDeletePolicyEnforcement structure.
type APIPreemptProxyDeletePolicyEnforcementReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *APIPreemptProxyDeletePolicyEnforcementReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAPIPreemptProxyDeletePolicyEnforcementOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAPIPreemptProxyDeletePolicyEnforcementForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAPIPreemptProxyDeletePolicyEnforcementTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAPIPreemptProxyDeletePolicyEnforcementOK creates a APIPreemptProxyDeletePolicyEnforcementOK with default headers values
func NewAPIPreemptProxyDeletePolicyEnforcementOK() *APIPreemptProxyDeletePolicyEnforcementOK {
	return &APIPreemptProxyDeletePolicyEnforcementOK{}
}

/* APIPreemptProxyDeletePolicyEnforcementOK describes a response with status code 200, with default header values.

OK
*/
type APIPreemptProxyDeletePolicyEnforcementOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

func (o *APIPreemptProxyDeletePolicyEnforcementOK) Error() string {
	return fmt.Sprintf("[DELETE /identity-protection/entities/policy/enforcement/{guid}/v1][%d] apiPreemptProxyDeletePolicyEnforcementOK ", 200)
}

func (o *APIPreemptProxyDeletePolicyEnforcementOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewAPIPreemptProxyDeletePolicyEnforcementForbidden creates a APIPreemptProxyDeletePolicyEnforcementForbidden with default headers values
func NewAPIPreemptProxyDeletePolicyEnforcementForbidden() *APIPreemptProxyDeletePolicyEnforcementForbidden {
	return &APIPreemptProxyDeletePolicyEnforcementForbidden{}
}

/* APIPreemptProxyDeletePolicyEnforcementForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type APIPreemptProxyDeletePolicyEnforcementForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

func (o *APIPreemptProxyDeletePolicyEnforcementForbidden) Error() string {
	return fmt.Sprintf("[DELETE /identity-protection/entities/policy/enforcement/{guid}/v1][%d] apiPreemptProxyDeletePolicyEnforcementForbidden  %+v", 403, o.Payload)
}
func (o *APIPreemptProxyDeletePolicyEnforcementForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *APIPreemptProxyDeletePolicyEnforcementForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAPIPreemptProxyDeletePolicyEnforcementTooManyRequests creates a APIPreemptProxyDeletePolicyEnforcementTooManyRequests with default headers values
func NewAPIPreemptProxyDeletePolicyEnforcementTooManyRequests() *APIPreemptProxyDeletePolicyEnforcementTooManyRequests {
	return &APIPreemptProxyDeletePolicyEnforcementTooManyRequests{}
}

/* APIPreemptProxyDeletePolicyEnforcementTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type APIPreemptProxyDeletePolicyEnforcementTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

func (o *APIPreemptProxyDeletePolicyEnforcementTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /identity-protection/entities/policy/enforcement/{guid}/v1][%d] apiPreemptProxyDeletePolicyEnforcementTooManyRequests  %+v", 429, o.Payload)
}
func (o *APIPreemptProxyDeletePolicyEnforcementTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *APIPreemptProxyDeletePolicyEnforcementTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
