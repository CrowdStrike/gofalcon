// Code generated by go-swagger; DO NOT EDIT.

package intelligence_indicator_graph

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// LookupIndicatorsReader is a Reader for the LookupIndicators structure.
type LookupIndicatorsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LookupIndicatorsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLookupIndicatorsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLookupIndicatorsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewLookupIndicatorsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLookupIndicatorsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewLookupIndicatorsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLookupIndicatorsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /intelligence/combined/lookup-indicators/v1] LookupIndicators", response, response.Code())
	}
}

// NewLookupIndicatorsOK creates a LookupIndicatorsOK with default headers values
func NewLookupIndicatorsOK() *LookupIndicatorsOK {
	return &LookupIndicatorsOK{}
}

/*
LookupIndicatorsOK describes a response with status code 200, with default header values.

OK
*/
type LookupIndicatorsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RestapiLookupIndicatorResponse
}

// IsSuccess returns true when this lookup indicators o k response has a 2xx status code
func (o *LookupIndicatorsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this lookup indicators o k response has a 3xx status code
func (o *LookupIndicatorsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this lookup indicators o k response has a 4xx status code
func (o *LookupIndicatorsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this lookup indicators o k response has a 5xx status code
func (o *LookupIndicatorsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this lookup indicators o k response a status code equal to that given
func (o *LookupIndicatorsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the lookup indicators o k response
func (o *LookupIndicatorsOK) Code() int {
	return 200
}

func (o *LookupIndicatorsOK) Error() string {
	return fmt.Sprintf("[POST /intelligence/combined/lookup-indicators/v1][%d] lookupIndicatorsOK  %+v", 200, o.Payload)
}

func (o *LookupIndicatorsOK) String() string {
	return fmt.Sprintf("[POST /intelligence/combined/lookup-indicators/v1][%d] lookupIndicatorsOK  %+v", 200, o.Payload)
}

func (o *LookupIndicatorsOK) GetPayload() *models.RestapiLookupIndicatorResponse {
	return o.Payload
}

func (o *LookupIndicatorsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RestapiLookupIndicatorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLookupIndicatorsBadRequest creates a LookupIndicatorsBadRequest with default headers values
func NewLookupIndicatorsBadRequest() *LookupIndicatorsBadRequest {
	return &LookupIndicatorsBadRequest{}
}

/*
LookupIndicatorsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type LookupIndicatorsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this lookup indicators bad request response has a 2xx status code
func (o *LookupIndicatorsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this lookup indicators bad request response has a 3xx status code
func (o *LookupIndicatorsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this lookup indicators bad request response has a 4xx status code
func (o *LookupIndicatorsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this lookup indicators bad request response has a 5xx status code
func (o *LookupIndicatorsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this lookup indicators bad request response a status code equal to that given
func (o *LookupIndicatorsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the lookup indicators bad request response
func (o *LookupIndicatorsBadRequest) Code() int {
	return 400
}

func (o *LookupIndicatorsBadRequest) Error() string {
	return fmt.Sprintf("[POST /intelligence/combined/lookup-indicators/v1][%d] lookupIndicatorsBadRequest ", 400)
}

func (o *LookupIndicatorsBadRequest) String() string {
	return fmt.Sprintf("[POST /intelligence/combined/lookup-indicators/v1][%d] lookupIndicatorsBadRequest ", 400)
}

func (o *LookupIndicatorsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewLookupIndicatorsForbidden creates a LookupIndicatorsForbidden with default headers values
func NewLookupIndicatorsForbidden() *LookupIndicatorsForbidden {
	return &LookupIndicatorsForbidden{}
}

/*
LookupIndicatorsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type LookupIndicatorsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this lookup indicators forbidden response has a 2xx status code
func (o *LookupIndicatorsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this lookup indicators forbidden response has a 3xx status code
func (o *LookupIndicatorsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this lookup indicators forbidden response has a 4xx status code
func (o *LookupIndicatorsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this lookup indicators forbidden response has a 5xx status code
func (o *LookupIndicatorsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this lookup indicators forbidden response a status code equal to that given
func (o *LookupIndicatorsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the lookup indicators forbidden response
func (o *LookupIndicatorsForbidden) Code() int {
	return 403
}

func (o *LookupIndicatorsForbidden) Error() string {
	return fmt.Sprintf("[POST /intelligence/combined/lookup-indicators/v1][%d] lookupIndicatorsForbidden  %+v", 403, o.Payload)
}

func (o *LookupIndicatorsForbidden) String() string {
	return fmt.Sprintf("[POST /intelligence/combined/lookup-indicators/v1][%d] lookupIndicatorsForbidden  %+v", 403, o.Payload)
}

func (o *LookupIndicatorsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *LookupIndicatorsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLookupIndicatorsNotFound creates a LookupIndicatorsNotFound with default headers values
func NewLookupIndicatorsNotFound() *LookupIndicatorsNotFound {
	return &LookupIndicatorsNotFound{}
}

/*
LookupIndicatorsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type LookupIndicatorsNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this lookup indicators not found response has a 2xx status code
func (o *LookupIndicatorsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this lookup indicators not found response has a 3xx status code
func (o *LookupIndicatorsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this lookup indicators not found response has a 4xx status code
func (o *LookupIndicatorsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this lookup indicators not found response has a 5xx status code
func (o *LookupIndicatorsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this lookup indicators not found response a status code equal to that given
func (o *LookupIndicatorsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the lookup indicators not found response
func (o *LookupIndicatorsNotFound) Code() int {
	return 404
}

func (o *LookupIndicatorsNotFound) Error() string {
	return fmt.Sprintf("[POST /intelligence/combined/lookup-indicators/v1][%d] lookupIndicatorsNotFound ", 404)
}

func (o *LookupIndicatorsNotFound) String() string {
	return fmt.Sprintf("[POST /intelligence/combined/lookup-indicators/v1][%d] lookupIndicatorsNotFound ", 404)
}

func (o *LookupIndicatorsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewLookupIndicatorsTooManyRequests creates a LookupIndicatorsTooManyRequests with default headers values
func NewLookupIndicatorsTooManyRequests() *LookupIndicatorsTooManyRequests {
	return &LookupIndicatorsTooManyRequests{}
}

/*
LookupIndicatorsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type LookupIndicatorsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this lookup indicators too many requests response has a 2xx status code
func (o *LookupIndicatorsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this lookup indicators too many requests response has a 3xx status code
func (o *LookupIndicatorsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this lookup indicators too many requests response has a 4xx status code
func (o *LookupIndicatorsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this lookup indicators too many requests response has a 5xx status code
func (o *LookupIndicatorsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this lookup indicators too many requests response a status code equal to that given
func (o *LookupIndicatorsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the lookup indicators too many requests response
func (o *LookupIndicatorsTooManyRequests) Code() int {
	return 429
}

func (o *LookupIndicatorsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /intelligence/combined/lookup-indicators/v1][%d] lookupIndicatorsTooManyRequests  %+v", 429, o.Payload)
}

func (o *LookupIndicatorsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /intelligence/combined/lookup-indicators/v1][%d] lookupIndicatorsTooManyRequests  %+v", 429, o.Payload)
}

func (o *LookupIndicatorsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *LookupIndicatorsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLookupIndicatorsInternalServerError creates a LookupIndicatorsInternalServerError with default headers values
func NewLookupIndicatorsInternalServerError() *LookupIndicatorsInternalServerError {
	return &LookupIndicatorsInternalServerError{}
}

/*
LookupIndicatorsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type LookupIndicatorsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this lookup indicators internal server error response has a 2xx status code
func (o *LookupIndicatorsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this lookup indicators internal server error response has a 3xx status code
func (o *LookupIndicatorsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this lookup indicators internal server error response has a 4xx status code
func (o *LookupIndicatorsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this lookup indicators internal server error response has a 5xx status code
func (o *LookupIndicatorsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this lookup indicators internal server error response a status code equal to that given
func (o *LookupIndicatorsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the lookup indicators internal server error response
func (o *LookupIndicatorsInternalServerError) Code() int {
	return 500
}

func (o *LookupIndicatorsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /intelligence/combined/lookup-indicators/v1][%d] lookupIndicatorsInternalServerError ", 500)
}

func (o *LookupIndicatorsInternalServerError) String() string {
	return fmt.Sprintf("[POST /intelligence/combined/lookup-indicators/v1][%d] lookupIndicatorsInternalServerError ", 500)
}

func (o *LookupIndicatorsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}
