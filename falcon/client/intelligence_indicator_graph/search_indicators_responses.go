// Code generated by go-swagger; DO NOT EDIT.

package intelligence_indicator_graph

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// SearchIndicatorsReader is a Reader for the SearchIndicators structure.
type SearchIndicatorsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchIndicatorsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchIndicatorsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchIndicatorsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSearchIndicatorsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchIndicatorsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSearchIndicatorsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchIndicatorsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /intelligence/combined/indicators/v1] SearchIndicators", response, response.Code())
	}
}

// NewSearchIndicatorsOK creates a SearchIndicatorsOK with default headers values
func NewSearchIndicatorsOK() *SearchIndicatorsOK {
	return &SearchIndicatorsOK{}
}

/*
SearchIndicatorsOK describes a response with status code 200, with default header values.

OK
*/
type SearchIndicatorsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RestapiIndicatorResponse
}

// IsSuccess returns true when this search indicators o k response has a 2xx status code
func (o *SearchIndicatorsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search indicators o k response has a 3xx status code
func (o *SearchIndicatorsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search indicators o k response has a 4xx status code
func (o *SearchIndicatorsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search indicators o k response has a 5xx status code
func (o *SearchIndicatorsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search indicators o k response a status code equal to that given
func (o *SearchIndicatorsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the search indicators o k response
func (o *SearchIndicatorsOK) Code() int {
	return 200
}

func (o *SearchIndicatorsOK) Error() string {
	return fmt.Sprintf("[POST /intelligence/combined/indicators/v1][%d] searchIndicatorsOK  %+v", 200, o.Payload)
}

func (o *SearchIndicatorsOK) String() string {
	return fmt.Sprintf("[POST /intelligence/combined/indicators/v1][%d] searchIndicatorsOK  %+v", 200, o.Payload)
}

func (o *SearchIndicatorsOK) GetPayload() *models.RestapiIndicatorResponse {
	return o.Payload
}

func (o *SearchIndicatorsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RestapiIndicatorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchIndicatorsBadRequest creates a SearchIndicatorsBadRequest with default headers values
func NewSearchIndicatorsBadRequest() *SearchIndicatorsBadRequest {
	return &SearchIndicatorsBadRequest{}
}

/*
SearchIndicatorsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SearchIndicatorsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this search indicators bad request response has a 2xx status code
func (o *SearchIndicatorsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search indicators bad request response has a 3xx status code
func (o *SearchIndicatorsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search indicators bad request response has a 4xx status code
func (o *SearchIndicatorsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this search indicators bad request response has a 5xx status code
func (o *SearchIndicatorsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this search indicators bad request response a status code equal to that given
func (o *SearchIndicatorsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the search indicators bad request response
func (o *SearchIndicatorsBadRequest) Code() int {
	return 400
}

func (o *SearchIndicatorsBadRequest) Error() string {
	return fmt.Sprintf("[POST /intelligence/combined/indicators/v1][%d] searchIndicatorsBadRequest ", 400)
}

func (o *SearchIndicatorsBadRequest) String() string {
	return fmt.Sprintf("[POST /intelligence/combined/indicators/v1][%d] searchIndicatorsBadRequest ", 400)
}

func (o *SearchIndicatorsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewSearchIndicatorsForbidden creates a SearchIndicatorsForbidden with default headers values
func NewSearchIndicatorsForbidden() *SearchIndicatorsForbidden {
	return &SearchIndicatorsForbidden{}
}

/*
SearchIndicatorsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SearchIndicatorsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this search indicators forbidden response has a 2xx status code
func (o *SearchIndicatorsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search indicators forbidden response has a 3xx status code
func (o *SearchIndicatorsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search indicators forbidden response has a 4xx status code
func (o *SearchIndicatorsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this search indicators forbidden response has a 5xx status code
func (o *SearchIndicatorsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this search indicators forbidden response a status code equal to that given
func (o *SearchIndicatorsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the search indicators forbidden response
func (o *SearchIndicatorsForbidden) Code() int {
	return 403
}

func (o *SearchIndicatorsForbidden) Error() string {
	return fmt.Sprintf("[POST /intelligence/combined/indicators/v1][%d] searchIndicatorsForbidden  %+v", 403, o.Payload)
}

func (o *SearchIndicatorsForbidden) String() string {
	return fmt.Sprintf("[POST /intelligence/combined/indicators/v1][%d] searchIndicatorsForbidden  %+v", 403, o.Payload)
}

func (o *SearchIndicatorsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *SearchIndicatorsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchIndicatorsNotFound creates a SearchIndicatorsNotFound with default headers values
func NewSearchIndicatorsNotFound() *SearchIndicatorsNotFound {
	return &SearchIndicatorsNotFound{}
}

/*
SearchIndicatorsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SearchIndicatorsNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this search indicators not found response has a 2xx status code
func (o *SearchIndicatorsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search indicators not found response has a 3xx status code
func (o *SearchIndicatorsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search indicators not found response has a 4xx status code
func (o *SearchIndicatorsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this search indicators not found response has a 5xx status code
func (o *SearchIndicatorsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this search indicators not found response a status code equal to that given
func (o *SearchIndicatorsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the search indicators not found response
func (o *SearchIndicatorsNotFound) Code() int {
	return 404
}

func (o *SearchIndicatorsNotFound) Error() string {
	return fmt.Sprintf("[POST /intelligence/combined/indicators/v1][%d] searchIndicatorsNotFound ", 404)
}

func (o *SearchIndicatorsNotFound) String() string {
	return fmt.Sprintf("[POST /intelligence/combined/indicators/v1][%d] searchIndicatorsNotFound ", 404)
}

func (o *SearchIndicatorsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewSearchIndicatorsTooManyRequests creates a SearchIndicatorsTooManyRequests with default headers values
func NewSearchIndicatorsTooManyRequests() *SearchIndicatorsTooManyRequests {
	return &SearchIndicatorsTooManyRequests{}
}

/*
SearchIndicatorsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type SearchIndicatorsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this search indicators too many requests response has a 2xx status code
func (o *SearchIndicatorsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search indicators too many requests response has a 3xx status code
func (o *SearchIndicatorsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search indicators too many requests response has a 4xx status code
func (o *SearchIndicatorsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this search indicators too many requests response has a 5xx status code
func (o *SearchIndicatorsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this search indicators too many requests response a status code equal to that given
func (o *SearchIndicatorsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the search indicators too many requests response
func (o *SearchIndicatorsTooManyRequests) Code() int {
	return 429
}

func (o *SearchIndicatorsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /intelligence/combined/indicators/v1][%d] searchIndicatorsTooManyRequests  %+v", 429, o.Payload)
}

func (o *SearchIndicatorsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /intelligence/combined/indicators/v1][%d] searchIndicatorsTooManyRequests  %+v", 429, o.Payload)
}

func (o *SearchIndicatorsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *SearchIndicatorsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchIndicatorsInternalServerError creates a SearchIndicatorsInternalServerError with default headers values
func NewSearchIndicatorsInternalServerError() *SearchIndicatorsInternalServerError {
	return &SearchIndicatorsInternalServerError{}
}

/*
SearchIndicatorsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type SearchIndicatorsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this search indicators internal server error response has a 2xx status code
func (o *SearchIndicatorsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search indicators internal server error response has a 3xx status code
func (o *SearchIndicatorsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search indicators internal server error response has a 4xx status code
func (o *SearchIndicatorsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this search indicators internal server error response has a 5xx status code
func (o *SearchIndicatorsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this search indicators internal server error response a status code equal to that given
func (o *SearchIndicatorsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the search indicators internal server error response
func (o *SearchIndicatorsInternalServerError) Code() int {
	return 500
}

func (o *SearchIndicatorsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /intelligence/combined/indicators/v1][%d] searchIndicatorsInternalServerError ", 500)
}

func (o *SearchIndicatorsInternalServerError) String() string {
	return fmt.Sprintf("[POST /intelligence/combined/indicators/v1][%d] searchIndicatorsInternalServerError ", 500)
}

func (o *SearchIndicatorsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}
