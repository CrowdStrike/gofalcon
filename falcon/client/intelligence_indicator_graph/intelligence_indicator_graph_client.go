// Code generated by go-swagger; DO NOT EDIT.

package intelligence_indicator_graph

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new intelligence indicator graph API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for intelligence indicator graph API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	LookupIndicators(params *LookupIndicatorsParams, opts ...ClientOption) (*LookupIndicatorsOK, error)

	SearchIndicators(params *SearchIndicatorsParams, opts ...ClientOption) (*SearchIndicatorsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
LookupIndicators gets indicators based on their value

Look up intelligence data for multiple indicators. Supports various indicator types including domains, IP addresses, and file hashes (MD5, SHA1, SHA256). Provide up to 100 indicators in a single request.
*/
func (a *Client) LookupIndicators(params *LookupIndicatorsParams, opts ...ClientOption) (*LookupIndicatorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLookupIndicatorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LookupIndicators",
		Method:             "POST",
		PathPattern:        "/intelligence/combined/lookup-indicators/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LookupIndicatorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LookupIndicatorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LookupIndicators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchIndicators searches indicators based on f q l filter
*/
func (a *Client) SearchIndicators(params *SearchIndicatorsParams, opts ...ClientOption) (*SearchIndicatorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchIndicatorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchIndicators",
		Method:             "POST",
		PathPattern:        "/intelligence/combined/indicators/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchIndicatorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchIndicatorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchIndicators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
