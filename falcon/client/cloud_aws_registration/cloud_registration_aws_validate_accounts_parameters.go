// Code generated by go-swagger; DO NOT EDIT.

package cloud_aws_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCloudRegistrationAwsValidateAccountsParams creates a new CloudRegistrationAwsValidateAccountsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCloudRegistrationAwsValidateAccountsParams() *CloudRegistrationAwsValidateAccountsParams {
	return &CloudRegistrationAwsValidateAccountsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCloudRegistrationAwsValidateAccountsParamsWithTimeout creates a new CloudRegistrationAwsValidateAccountsParams object
// with the ability to set a timeout on a request.
func NewCloudRegistrationAwsValidateAccountsParamsWithTimeout(timeout time.Duration) *CloudRegistrationAwsValidateAccountsParams {
	return &CloudRegistrationAwsValidateAccountsParams{
		timeout: timeout,
	}
}

// NewCloudRegistrationAwsValidateAccountsParamsWithContext creates a new CloudRegistrationAwsValidateAccountsParams object
// with the ability to set a context for a request.
func NewCloudRegistrationAwsValidateAccountsParamsWithContext(ctx context.Context) *CloudRegistrationAwsValidateAccountsParams {
	return &CloudRegistrationAwsValidateAccountsParams{
		Context: ctx,
	}
}

// NewCloudRegistrationAwsValidateAccountsParamsWithHTTPClient creates a new CloudRegistrationAwsValidateAccountsParams object
// with the ability to set a custom HTTPClient for a request.
func NewCloudRegistrationAwsValidateAccountsParamsWithHTTPClient(client *http.Client) *CloudRegistrationAwsValidateAccountsParams {
	return &CloudRegistrationAwsValidateAccountsParams{
		HTTPClient: client,
	}
}

/*
CloudRegistrationAwsValidateAccountsParams contains all the parameters to send to the API endpoint

	for the cloud registration aws validate accounts operation.

	Typically these are written to a http.Request.
*/
type CloudRegistrationAwsValidateAccountsParams struct {

	/* AccountID.

	   AWS Account ID
	*/
	AccountID *string

	/* Feature.

	   Features registered for an account
	*/
	Feature []string

	/* IamRoleArn.

	   IAM Role ARN
	*/
	IamRoleArn *string

	/* Products.

	   Product registered for an account
	*/
	Products string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cloud registration aws validate accounts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CloudRegistrationAwsValidateAccountsParams) WithDefaults() *CloudRegistrationAwsValidateAccountsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cloud registration aws validate accounts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CloudRegistrationAwsValidateAccountsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the cloud registration aws validate accounts params
func (o *CloudRegistrationAwsValidateAccountsParams) WithTimeout(timeout time.Duration) *CloudRegistrationAwsValidateAccountsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cloud registration aws validate accounts params
func (o *CloudRegistrationAwsValidateAccountsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cloud registration aws validate accounts params
func (o *CloudRegistrationAwsValidateAccountsParams) WithContext(ctx context.Context) *CloudRegistrationAwsValidateAccountsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cloud registration aws validate accounts params
func (o *CloudRegistrationAwsValidateAccountsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cloud registration aws validate accounts params
func (o *CloudRegistrationAwsValidateAccountsParams) WithHTTPClient(client *http.Client) *CloudRegistrationAwsValidateAccountsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cloud registration aws validate accounts params
func (o *CloudRegistrationAwsValidateAccountsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the cloud registration aws validate accounts params
func (o *CloudRegistrationAwsValidateAccountsParams) WithAccountID(accountID *string) *CloudRegistrationAwsValidateAccountsParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the cloud registration aws validate accounts params
func (o *CloudRegistrationAwsValidateAccountsParams) SetAccountID(accountID *string) {
	o.AccountID = accountID
}

// WithFeature adds the feature to the cloud registration aws validate accounts params
func (o *CloudRegistrationAwsValidateAccountsParams) WithFeature(feature []string) *CloudRegistrationAwsValidateAccountsParams {
	o.SetFeature(feature)
	return o
}

// SetFeature adds the feature to the cloud registration aws validate accounts params
func (o *CloudRegistrationAwsValidateAccountsParams) SetFeature(feature []string) {
	o.Feature = feature
}

// WithIamRoleArn adds the iamRoleArn to the cloud registration aws validate accounts params
func (o *CloudRegistrationAwsValidateAccountsParams) WithIamRoleArn(iamRoleArn *string) *CloudRegistrationAwsValidateAccountsParams {
	o.SetIamRoleArn(iamRoleArn)
	return o
}

// SetIamRoleArn adds the iamRoleArn to the cloud registration aws validate accounts params
func (o *CloudRegistrationAwsValidateAccountsParams) SetIamRoleArn(iamRoleArn *string) {
	o.IamRoleArn = iamRoleArn
}

// WithProducts adds the products to the cloud registration aws validate accounts params
func (o *CloudRegistrationAwsValidateAccountsParams) WithProducts(products string) *CloudRegistrationAwsValidateAccountsParams {
	o.SetProducts(products)
	return o
}

// SetProducts adds the products to the cloud registration aws validate accounts params
func (o *CloudRegistrationAwsValidateAccountsParams) SetProducts(products string) {
	o.Products = products
}

// WriteToRequest writes these params to a swagger request
func (o *CloudRegistrationAwsValidateAccountsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountID != nil {

		// query param account-id
		var qrAccountID string

		if o.AccountID != nil {
			qrAccountID = *o.AccountID
		}
		qAccountID := qrAccountID
		if qAccountID != "" {

			if err := r.SetQueryParam("account-id", qAccountID); err != nil {
				return err
			}
		}
	}

	if o.Feature != nil {

		// binding items for feature
		joinedFeature := o.bindParamFeature(reg)

		// query array param feature
		if err := r.SetQueryParam("feature", joinedFeature...); err != nil {
			return err
		}
	}

	if o.IamRoleArn != nil {

		// query param iam-role-arn
		var qrIamRoleArn string

		if o.IamRoleArn != nil {
			qrIamRoleArn = *o.IamRoleArn
		}
		qIamRoleArn := qrIamRoleArn
		if qIamRoleArn != "" {

			if err := r.SetQueryParam("iam-role-arn", qIamRoleArn); err != nil {
				return err
			}
		}
	}

	// query param products
	qrProducts := o.Products
	qProducts := qrProducts
	if qProducts != "" {

		if err := r.SetQueryParam("products", qProducts); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamCloudRegistrationAwsValidateAccounts binds the parameter feature
func (o *CloudRegistrationAwsValidateAccountsParams) bindParamFeature(formats strfmt.Registry) []string {
	featureIR := o.Feature

	var featureIC []string
	for _, featureIIR := range featureIR { // explode []string

		featureIIV := featureIIR // string as string
		featureIC = append(featureIC, featureIIV)
	}

	// items.CollectionFormat: "csv"
	featureIS := swag.JoinByFormat(featureIC, "csv")

	return featureIS
}
