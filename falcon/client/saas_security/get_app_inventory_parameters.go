// Code generated by go-swagger; DO NOT EDIT.

package saas_security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAppInventoryParams creates a new GetAppInventoryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAppInventoryParams() *GetAppInventoryParams {
	return &GetAppInventoryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAppInventoryParamsWithTimeout creates a new GetAppInventoryParams object
// with the ability to set a timeout on a request.
func NewGetAppInventoryParamsWithTimeout(timeout time.Duration) *GetAppInventoryParams {
	return &GetAppInventoryParams{
		timeout: timeout,
	}
}

// NewGetAppInventoryParamsWithContext creates a new GetAppInventoryParams object
// with the ability to set a context for a request.
func NewGetAppInventoryParamsWithContext(ctx context.Context) *GetAppInventoryParams {
	return &GetAppInventoryParams{
		Context: ctx,
	}
}

// NewGetAppInventoryParamsWithHTTPClient creates a new GetAppInventoryParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAppInventoryParamsWithHTTPClient(client *http.Client) *GetAppInventoryParams {
	return &GetAppInventoryParams{
		HTTPClient: client,
	}
}

/*
GetAppInventoryParams contains all the parameters to send to the API endpoint

	for the get app inventory operation.

	Typically these are written to a http.Request.
*/
type GetAppInventoryParams struct {

	/* AccessLevel.

	   Comma separated list of access levels
	*/
	AccessLevel *string

	/* Groups.

	   Comma separated list of groups
	*/
	Groups *string

	/* IntegrationID.

	   Comma separated list of integration IDs
	*/
	IntegrationID *string

	/* LastActivity.

	   Last activity was within or was not within the last 'value' days. Format: 'was value' or 'was not value' or 'value' (implies 'was value'). 'value' is an integer
	*/
	LastActivity *string

	/* Limit.

	   The maximum number of objects to return
	*/
	Limit *int64

	/* Offset.

	   The starting index of the results
	*/
	Offset *int64

	/* Scopes.

	   Comma separated list of scopes
	*/
	Scopes *string

	/* Status.

	   Comma separated list of application statuses (approved, in review, rejected, unclassified)
	*/
	Status *string

	/* Type.

	   Comma separated list of app types
	*/
	Type *string

	/* Users.

	   Users. Format: 'is equal value' or 'contains value' or 'value' (implies 'is equal value')
	*/
	Users *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get app inventory params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAppInventoryParams) WithDefaults() *GetAppInventoryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get app inventory params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAppInventoryParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get app inventory params
func (o *GetAppInventoryParams) WithTimeout(timeout time.Duration) *GetAppInventoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get app inventory params
func (o *GetAppInventoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get app inventory params
func (o *GetAppInventoryParams) WithContext(ctx context.Context) *GetAppInventoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get app inventory params
func (o *GetAppInventoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get app inventory params
func (o *GetAppInventoryParams) WithHTTPClient(client *http.Client) *GetAppInventoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get app inventory params
func (o *GetAppInventoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessLevel adds the accessLevel to the get app inventory params
func (o *GetAppInventoryParams) WithAccessLevel(accessLevel *string) *GetAppInventoryParams {
	o.SetAccessLevel(accessLevel)
	return o
}

// SetAccessLevel adds the accessLevel to the get app inventory params
func (o *GetAppInventoryParams) SetAccessLevel(accessLevel *string) {
	o.AccessLevel = accessLevel
}

// WithGroups adds the groups to the get app inventory params
func (o *GetAppInventoryParams) WithGroups(groups *string) *GetAppInventoryParams {
	o.SetGroups(groups)
	return o
}

// SetGroups adds the groups to the get app inventory params
func (o *GetAppInventoryParams) SetGroups(groups *string) {
	o.Groups = groups
}

// WithIntegrationID adds the integrationID to the get app inventory params
func (o *GetAppInventoryParams) WithIntegrationID(integrationID *string) *GetAppInventoryParams {
	o.SetIntegrationID(integrationID)
	return o
}

// SetIntegrationID adds the integrationId to the get app inventory params
func (o *GetAppInventoryParams) SetIntegrationID(integrationID *string) {
	o.IntegrationID = integrationID
}

// WithLastActivity adds the lastActivity to the get app inventory params
func (o *GetAppInventoryParams) WithLastActivity(lastActivity *string) *GetAppInventoryParams {
	o.SetLastActivity(lastActivity)
	return o
}

// SetLastActivity adds the lastActivity to the get app inventory params
func (o *GetAppInventoryParams) SetLastActivity(lastActivity *string) {
	o.LastActivity = lastActivity
}

// WithLimit adds the limit to the get app inventory params
func (o *GetAppInventoryParams) WithLimit(limit *int64) *GetAppInventoryParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get app inventory params
func (o *GetAppInventoryParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get app inventory params
func (o *GetAppInventoryParams) WithOffset(offset *int64) *GetAppInventoryParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get app inventory params
func (o *GetAppInventoryParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithScopes adds the scopes to the get app inventory params
func (o *GetAppInventoryParams) WithScopes(scopes *string) *GetAppInventoryParams {
	o.SetScopes(scopes)
	return o
}

// SetScopes adds the scopes to the get app inventory params
func (o *GetAppInventoryParams) SetScopes(scopes *string) {
	o.Scopes = scopes
}

// WithStatus adds the status to the get app inventory params
func (o *GetAppInventoryParams) WithStatus(status *string) *GetAppInventoryParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get app inventory params
func (o *GetAppInventoryParams) SetStatus(status *string) {
	o.Status = status
}

// WithType adds the typeVar to the get app inventory params
func (o *GetAppInventoryParams) WithType(typeVar *string) *GetAppInventoryParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get app inventory params
func (o *GetAppInventoryParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithUsers adds the users to the get app inventory params
func (o *GetAppInventoryParams) WithUsers(users *string) *GetAppInventoryParams {
	o.SetUsers(users)
	return o
}

// SetUsers adds the users to the get app inventory params
func (o *GetAppInventoryParams) SetUsers(users *string) {
	o.Users = users
}

// WriteToRequest writes these params to a swagger request
func (o *GetAppInventoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccessLevel != nil {

		// query param access_level
		var qrAccessLevel string

		if o.AccessLevel != nil {
			qrAccessLevel = *o.AccessLevel
		}
		qAccessLevel := qrAccessLevel
		if qAccessLevel != "" {

			if err := r.SetQueryParam("access_level", qAccessLevel); err != nil {
				return err
			}
		}
	}

	if o.Groups != nil {

		// query param groups
		var qrGroups string

		if o.Groups != nil {
			qrGroups = *o.Groups
		}
		qGroups := qrGroups
		if qGroups != "" {

			if err := r.SetQueryParam("groups", qGroups); err != nil {
				return err
			}
		}
	}

	if o.IntegrationID != nil {

		// query param integration_id
		var qrIntegrationID string

		if o.IntegrationID != nil {
			qrIntegrationID = *o.IntegrationID
		}
		qIntegrationID := qrIntegrationID
		if qIntegrationID != "" {

			if err := r.SetQueryParam("integration_id", qIntegrationID); err != nil {
				return err
			}
		}
	}

	if o.LastActivity != nil {

		// query param last_activity
		var qrLastActivity string

		if o.LastActivity != nil {
			qrLastActivity = *o.LastActivity
		}
		qLastActivity := qrLastActivity
		if qLastActivity != "" {

			if err := r.SetQueryParam("last_activity", qLastActivity); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Scopes != nil {

		// query param scopes
		var qrScopes string

		if o.Scopes != nil {
			qrScopes = *o.Scopes
		}
		qScopes := qrScopes
		if qScopes != "" {

			if err := r.SetQueryParam("scopes", qScopes); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if o.Users != nil {

		// query param users
		var qrUsers string

		if o.Users != nil {
			qrUsers = *o.Users
		}
		qUsers := qrUsers
		if qUsers != "" {

			if err := r.SetQueryParam("users", qUsers); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
