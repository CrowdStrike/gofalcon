// Code generated by go-swagger; DO NOT EDIT.

package saas_security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAlertsV3Params creates a new GetAlertsV3Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAlertsV3Params() *GetAlertsV3Params {
	return &GetAlertsV3Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAlertsV3ParamsWithTimeout creates a new GetAlertsV3Params object
// with the ability to set a timeout on a request.
func NewGetAlertsV3ParamsWithTimeout(timeout time.Duration) *GetAlertsV3Params {
	return &GetAlertsV3Params{
		timeout: timeout,
	}
}

// NewGetAlertsV3ParamsWithContext creates a new GetAlertsV3Params object
// with the ability to set a context for a request.
func NewGetAlertsV3ParamsWithContext(ctx context.Context) *GetAlertsV3Params {
	return &GetAlertsV3Params{
		Context: ctx,
	}
}

// NewGetAlertsV3ParamsWithHTTPClient creates a new GetAlertsV3Params object
// with the ability to set a custom HTTPClient for a request.
func NewGetAlertsV3ParamsWithHTTPClient(client *http.Client) *GetAlertsV3Params {
	return &GetAlertsV3Params{
		HTTPClient: client,
	}
}

/*
GetAlertsV3Params contains all the parameters to send to the API endpoint

	for the get alerts v3 operation.

	Typically these are written to a http.Request.
*/
type GetAlertsV3Params struct {

	// Ascending.
	Ascending *bool

	/* FromDate.

	   The start date of the alert you want to get (in YYYY-MM-DD format)

	   Format: date-time
	*/
	FromDate *strfmt.DateTime

	/* ID.

	   Alert ID
	*/
	ID *string

	/* IntegrationID.

	   Comma separated list of integration ID's of the alert you want to get
	*/
	IntegrationID *string

	/* LastID.

	   The last id of the alert you want to get
	*/
	LastID *string

	/* Limit.

	   The maximum number of objects to return
	*/
	Limit *int64

	/* Offset.

	   The starting index of the results
	*/
	Offset *int64

	/* ToDate.

	   The end date of the alert you want to get (in YYYY-MM-DD format)

	   Format: date-time
	*/
	ToDate *strfmt.DateTime

	/* Type.

	   The type of alert you want to get
	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get alerts v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAlertsV3Params) WithDefaults() *GetAlertsV3Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get alerts v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAlertsV3Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get alerts v3 params
func (o *GetAlertsV3Params) WithTimeout(timeout time.Duration) *GetAlertsV3Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get alerts v3 params
func (o *GetAlertsV3Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get alerts v3 params
func (o *GetAlertsV3Params) WithContext(ctx context.Context) *GetAlertsV3Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get alerts v3 params
func (o *GetAlertsV3Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get alerts v3 params
func (o *GetAlertsV3Params) WithHTTPClient(client *http.Client) *GetAlertsV3Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get alerts v3 params
func (o *GetAlertsV3Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAscending adds the ascending to the get alerts v3 params
func (o *GetAlertsV3Params) WithAscending(ascending *bool) *GetAlertsV3Params {
	o.SetAscending(ascending)
	return o
}

// SetAscending adds the ascending to the get alerts v3 params
func (o *GetAlertsV3Params) SetAscending(ascending *bool) {
	o.Ascending = ascending
}

// WithFromDate adds the fromDate to the get alerts v3 params
func (o *GetAlertsV3Params) WithFromDate(fromDate *strfmt.DateTime) *GetAlertsV3Params {
	o.SetFromDate(fromDate)
	return o
}

// SetFromDate adds the fromDate to the get alerts v3 params
func (o *GetAlertsV3Params) SetFromDate(fromDate *strfmt.DateTime) {
	o.FromDate = fromDate
}

// WithID adds the id to the get alerts v3 params
func (o *GetAlertsV3Params) WithID(id *string) *GetAlertsV3Params {
	o.SetID(id)
	return o
}

// SetID adds the id to the get alerts v3 params
func (o *GetAlertsV3Params) SetID(id *string) {
	o.ID = id
}

// WithIntegrationID adds the integrationID to the get alerts v3 params
func (o *GetAlertsV3Params) WithIntegrationID(integrationID *string) *GetAlertsV3Params {
	o.SetIntegrationID(integrationID)
	return o
}

// SetIntegrationID adds the integrationId to the get alerts v3 params
func (o *GetAlertsV3Params) SetIntegrationID(integrationID *string) {
	o.IntegrationID = integrationID
}

// WithLastID adds the lastID to the get alerts v3 params
func (o *GetAlertsV3Params) WithLastID(lastID *string) *GetAlertsV3Params {
	o.SetLastID(lastID)
	return o
}

// SetLastID adds the lastId to the get alerts v3 params
func (o *GetAlertsV3Params) SetLastID(lastID *string) {
	o.LastID = lastID
}

// WithLimit adds the limit to the get alerts v3 params
func (o *GetAlertsV3Params) WithLimit(limit *int64) *GetAlertsV3Params {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get alerts v3 params
func (o *GetAlertsV3Params) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get alerts v3 params
func (o *GetAlertsV3Params) WithOffset(offset *int64) *GetAlertsV3Params {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get alerts v3 params
func (o *GetAlertsV3Params) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithToDate adds the toDate to the get alerts v3 params
func (o *GetAlertsV3Params) WithToDate(toDate *strfmt.DateTime) *GetAlertsV3Params {
	o.SetToDate(toDate)
	return o
}

// SetToDate adds the toDate to the get alerts v3 params
func (o *GetAlertsV3Params) SetToDate(toDate *strfmt.DateTime) {
	o.ToDate = toDate
}

// WithType adds the typeVar to the get alerts v3 params
func (o *GetAlertsV3Params) WithType(typeVar *string) *GetAlertsV3Params {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get alerts v3 params
func (o *GetAlertsV3Params) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetAlertsV3Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Ascending != nil {

		// query param ascending
		var qrAscending bool

		if o.Ascending != nil {
			qrAscending = *o.Ascending
		}
		qAscending := swag.FormatBool(qrAscending)
		if qAscending != "" {

			if err := r.SetQueryParam("ascending", qAscending); err != nil {
				return err
			}
		}
	}

	if o.FromDate != nil {

		// query param from_date
		var qrFromDate strfmt.DateTime

		if o.FromDate != nil {
			qrFromDate = *o.FromDate
		}
		qFromDate := qrFromDate.String()
		if qFromDate != "" {

			if err := r.SetQueryParam("from_date", qFromDate); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID string

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.IntegrationID != nil {

		// query param integration_id
		var qrIntegrationID string

		if o.IntegrationID != nil {
			qrIntegrationID = *o.IntegrationID
		}
		qIntegrationID := qrIntegrationID
		if qIntegrationID != "" {

			if err := r.SetQueryParam("integration_id", qIntegrationID); err != nil {
				return err
			}
		}
	}

	if o.LastID != nil {

		// query param last_id
		var qrLastID string

		if o.LastID != nil {
			qrLastID = *o.LastID
		}
		qLastID := qrLastID
		if qLastID != "" {

			if err := r.SetQueryParam("last_id", qLastID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.ToDate != nil {

		// query param to_date
		var qrToDate strfmt.DateTime

		if o.ToDate != nil {
			qrToDate = *o.ToDate
		}
		qToDate := qrToDate.String()
		if qToDate != "" {

			if err := r.SetQueryParam("to_date", qToDate); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
