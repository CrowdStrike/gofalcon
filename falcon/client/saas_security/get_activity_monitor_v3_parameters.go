// Code generated by go-swagger; DO NOT EDIT.

package saas_security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetActivityMonitorV3Params creates a new GetActivityMonitorV3Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetActivityMonitorV3Params() *GetActivityMonitorV3Params {
	return &GetActivityMonitorV3Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetActivityMonitorV3ParamsWithTimeout creates a new GetActivityMonitorV3Params object
// with the ability to set a timeout on a request.
func NewGetActivityMonitorV3ParamsWithTimeout(timeout time.Duration) *GetActivityMonitorV3Params {
	return &GetActivityMonitorV3Params{
		timeout: timeout,
	}
}

// NewGetActivityMonitorV3ParamsWithContext creates a new GetActivityMonitorV3Params object
// with the ability to set a context for a request.
func NewGetActivityMonitorV3ParamsWithContext(ctx context.Context) *GetActivityMonitorV3Params {
	return &GetActivityMonitorV3Params{
		Context: ctx,
	}
}

// NewGetActivityMonitorV3ParamsWithHTTPClient creates a new GetActivityMonitorV3Params object
// with the ability to set a custom HTTPClient for a request.
func NewGetActivityMonitorV3ParamsWithHTTPClient(client *http.Client) *GetActivityMonitorV3Params {
	return &GetActivityMonitorV3Params{
		HTTPClient: client,
	}
}

/*
GetActivityMonitorV3Params contains all the parameters to send to the API endpoint

	for the get activity monitor v3 operation.

	Typically these are written to a http.Request.
*/
type GetActivityMonitorV3Params struct {

	/* Actor.

	   Actor
	*/
	Actor *string

	/* Category.

	   Comma separated list of categories
	*/
	Category *string

	/* FromDate.

	   From Date

	   Format: date-time
	*/
	FromDate *strfmt.DateTime

	/* IntegrationID.

	   Integration ID
	*/
	IntegrationID *string

	/* Limit.

	   Max number of logs to fetch
	*/
	Limit *int64

	/* Projection.

	   Comma separated list of projections
	*/
	Projection *string

	/* Skip.

	   Number of logs to skip
	*/
	Skip *int64

	/* ToDate.

	   To Date

	   Format: date-time
	*/
	ToDate *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get activity monitor v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetActivityMonitorV3Params) WithDefaults() *GetActivityMonitorV3Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get activity monitor v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetActivityMonitorV3Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get activity monitor v3 params
func (o *GetActivityMonitorV3Params) WithTimeout(timeout time.Duration) *GetActivityMonitorV3Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get activity monitor v3 params
func (o *GetActivityMonitorV3Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get activity monitor v3 params
func (o *GetActivityMonitorV3Params) WithContext(ctx context.Context) *GetActivityMonitorV3Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get activity monitor v3 params
func (o *GetActivityMonitorV3Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get activity monitor v3 params
func (o *GetActivityMonitorV3Params) WithHTTPClient(client *http.Client) *GetActivityMonitorV3Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get activity monitor v3 params
func (o *GetActivityMonitorV3Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActor adds the actor to the get activity monitor v3 params
func (o *GetActivityMonitorV3Params) WithActor(actor *string) *GetActivityMonitorV3Params {
	o.SetActor(actor)
	return o
}

// SetActor adds the actor to the get activity monitor v3 params
func (o *GetActivityMonitorV3Params) SetActor(actor *string) {
	o.Actor = actor
}

// WithCategory adds the category to the get activity monitor v3 params
func (o *GetActivityMonitorV3Params) WithCategory(category *string) *GetActivityMonitorV3Params {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the get activity monitor v3 params
func (o *GetActivityMonitorV3Params) SetCategory(category *string) {
	o.Category = category
}

// WithFromDate adds the fromDate to the get activity monitor v3 params
func (o *GetActivityMonitorV3Params) WithFromDate(fromDate *strfmt.DateTime) *GetActivityMonitorV3Params {
	o.SetFromDate(fromDate)
	return o
}

// SetFromDate adds the fromDate to the get activity monitor v3 params
func (o *GetActivityMonitorV3Params) SetFromDate(fromDate *strfmt.DateTime) {
	o.FromDate = fromDate
}

// WithIntegrationID adds the integrationID to the get activity monitor v3 params
func (o *GetActivityMonitorV3Params) WithIntegrationID(integrationID *string) *GetActivityMonitorV3Params {
	o.SetIntegrationID(integrationID)
	return o
}

// SetIntegrationID adds the integrationId to the get activity monitor v3 params
func (o *GetActivityMonitorV3Params) SetIntegrationID(integrationID *string) {
	o.IntegrationID = integrationID
}

// WithLimit adds the limit to the get activity monitor v3 params
func (o *GetActivityMonitorV3Params) WithLimit(limit *int64) *GetActivityMonitorV3Params {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get activity monitor v3 params
func (o *GetActivityMonitorV3Params) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithProjection adds the projection to the get activity monitor v3 params
func (o *GetActivityMonitorV3Params) WithProjection(projection *string) *GetActivityMonitorV3Params {
	o.SetProjection(projection)
	return o
}

// SetProjection adds the projection to the get activity monitor v3 params
func (o *GetActivityMonitorV3Params) SetProjection(projection *string) {
	o.Projection = projection
}

// WithSkip adds the skip to the get activity monitor v3 params
func (o *GetActivityMonitorV3Params) WithSkip(skip *int64) *GetActivityMonitorV3Params {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the get activity monitor v3 params
func (o *GetActivityMonitorV3Params) SetSkip(skip *int64) {
	o.Skip = skip
}

// WithToDate adds the toDate to the get activity monitor v3 params
func (o *GetActivityMonitorV3Params) WithToDate(toDate *strfmt.DateTime) *GetActivityMonitorV3Params {
	o.SetToDate(toDate)
	return o
}

// SetToDate adds the toDate to the get activity monitor v3 params
func (o *GetActivityMonitorV3Params) SetToDate(toDate *strfmt.DateTime) {
	o.ToDate = toDate
}

// WriteToRequest writes these params to a swagger request
func (o *GetActivityMonitorV3Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Actor != nil {

		// query param actor
		var qrActor string

		if o.Actor != nil {
			qrActor = *o.Actor
		}
		qActor := qrActor
		if qActor != "" {

			if err := r.SetQueryParam("actor", qActor); err != nil {
				return err
			}
		}
	}

	if o.Category != nil {

		// query param category
		var qrCategory string

		if o.Category != nil {
			qrCategory = *o.Category
		}
		qCategory := qrCategory
		if qCategory != "" {

			if err := r.SetQueryParam("category", qCategory); err != nil {
				return err
			}
		}
	}

	if o.FromDate != nil {

		// query param from_date
		var qrFromDate strfmt.DateTime

		if o.FromDate != nil {
			qrFromDate = *o.FromDate
		}
		qFromDate := qrFromDate.String()
		if qFromDate != "" {

			if err := r.SetQueryParam("from_date", qFromDate); err != nil {
				return err
			}
		}
	}

	if o.IntegrationID != nil {

		// query param integration_id
		var qrIntegrationID string

		if o.IntegrationID != nil {
			qrIntegrationID = *o.IntegrationID
		}
		qIntegrationID := qrIntegrationID
		if qIntegrationID != "" {

			if err := r.SetQueryParam("integration_id", qIntegrationID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Projection != nil {

		// query param projection
		var qrProjection string

		if o.Projection != nil {
			qrProjection = *o.Projection
		}
		qProjection := qrProjection
		if qProjection != "" {

			if err := r.SetQueryParam("projection", qProjection); err != nil {
				return err
			}
		}
	}

	if o.Skip != nil {

		// query param skip
		var qrSkip int64

		if o.Skip != nil {
			qrSkip = *o.Skip
		}
		qSkip := swag.FormatInt64(qrSkip)
		if qSkip != "" {

			if err := r.SetQueryParam("skip", qSkip); err != nil {
				return err
			}
		}
	}

	if o.ToDate != nil {

		// query param to_date
		var qrToDate strfmt.DateTime

		if o.ToDate != nil {
			qrToDate = *o.ToDate
		}
		qToDate := qrToDate.String()
		if qToDate != "" {

			if err := r.SetQueryParam("to_date", qToDate); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
