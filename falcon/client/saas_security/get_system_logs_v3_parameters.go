// Code generated by go-swagger; DO NOT EDIT.

package saas_security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSystemLogsV3Params creates a new GetSystemLogsV3Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSystemLogsV3Params() *GetSystemLogsV3Params {
	return &GetSystemLogsV3Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSystemLogsV3ParamsWithTimeout creates a new GetSystemLogsV3Params object
// with the ability to set a timeout on a request.
func NewGetSystemLogsV3ParamsWithTimeout(timeout time.Duration) *GetSystemLogsV3Params {
	return &GetSystemLogsV3Params{
		timeout: timeout,
	}
}

// NewGetSystemLogsV3ParamsWithContext creates a new GetSystemLogsV3Params object
// with the ability to set a context for a request.
func NewGetSystemLogsV3ParamsWithContext(ctx context.Context) *GetSystemLogsV3Params {
	return &GetSystemLogsV3Params{
		Context: ctx,
	}
}

// NewGetSystemLogsV3ParamsWithHTTPClient creates a new GetSystemLogsV3Params object
// with the ability to set a custom HTTPClient for a request.
func NewGetSystemLogsV3ParamsWithHTTPClient(client *http.Client) *GetSystemLogsV3Params {
	return &GetSystemLogsV3Params{
		HTTPClient: client,
	}
}

/*
GetSystemLogsV3Params contains all the parameters to send to the API endpoint

	for the get system logs v3 operation.

	Typically these are written to a http.Request.
*/
type GetSystemLogsV3Params struct {

	/* FromDate.

	   From Date (in YYYY-MM-DD format)

	   Format: date-time
	*/
	FromDate *strfmt.DateTime

	/* Limit.

	   The maximum number of objects to return
	*/
	Limit *int64

	/* Offset.

	   The starting index of the results
	*/
	Offset *int64

	/* ToDate.

	   To Date (in YYYY-MM-DD format)

	   Format: date-time
	*/
	ToDate *strfmt.DateTime

	/* TotalCount.

	   Fetch Total Count?
	*/
	TotalCount *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get system logs v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSystemLogsV3Params) WithDefaults() *GetSystemLogsV3Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get system logs v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSystemLogsV3Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get system logs v3 params
func (o *GetSystemLogsV3Params) WithTimeout(timeout time.Duration) *GetSystemLogsV3Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get system logs v3 params
func (o *GetSystemLogsV3Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get system logs v3 params
func (o *GetSystemLogsV3Params) WithContext(ctx context.Context) *GetSystemLogsV3Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get system logs v3 params
func (o *GetSystemLogsV3Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get system logs v3 params
func (o *GetSystemLogsV3Params) WithHTTPClient(client *http.Client) *GetSystemLogsV3Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get system logs v3 params
func (o *GetSystemLogsV3Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFromDate adds the fromDate to the get system logs v3 params
func (o *GetSystemLogsV3Params) WithFromDate(fromDate *strfmt.DateTime) *GetSystemLogsV3Params {
	o.SetFromDate(fromDate)
	return o
}

// SetFromDate adds the fromDate to the get system logs v3 params
func (o *GetSystemLogsV3Params) SetFromDate(fromDate *strfmt.DateTime) {
	o.FromDate = fromDate
}

// WithLimit adds the limit to the get system logs v3 params
func (o *GetSystemLogsV3Params) WithLimit(limit *int64) *GetSystemLogsV3Params {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get system logs v3 params
func (o *GetSystemLogsV3Params) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get system logs v3 params
func (o *GetSystemLogsV3Params) WithOffset(offset *int64) *GetSystemLogsV3Params {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get system logs v3 params
func (o *GetSystemLogsV3Params) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithToDate adds the toDate to the get system logs v3 params
func (o *GetSystemLogsV3Params) WithToDate(toDate *strfmt.DateTime) *GetSystemLogsV3Params {
	o.SetToDate(toDate)
	return o
}

// SetToDate adds the toDate to the get system logs v3 params
func (o *GetSystemLogsV3Params) SetToDate(toDate *strfmt.DateTime) {
	o.ToDate = toDate
}

// WithTotalCount adds the totalCount to the get system logs v3 params
func (o *GetSystemLogsV3Params) WithTotalCount(totalCount *bool) *GetSystemLogsV3Params {
	o.SetTotalCount(totalCount)
	return o
}

// SetTotalCount adds the totalCount to the get system logs v3 params
func (o *GetSystemLogsV3Params) SetTotalCount(totalCount *bool) {
	o.TotalCount = totalCount
}

// WriteToRequest writes these params to a swagger request
func (o *GetSystemLogsV3Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FromDate != nil {

		// query param from_date
		var qrFromDate strfmt.DateTime

		if o.FromDate != nil {
			qrFromDate = *o.FromDate
		}
		qFromDate := qrFromDate.String()
		if qFromDate != "" {

			if err := r.SetQueryParam("from_date", qFromDate); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.ToDate != nil {

		// query param to_date
		var qrToDate strfmt.DateTime

		if o.ToDate != nil {
			qrToDate = *o.ToDate
		}
		qToDate := qrToDate.String()
		if qToDate != "" {

			if err := r.SetQueryParam("to_date", qToDate); err != nil {
				return err
			}
		}
	}

	if o.TotalCount != nil {

		// query param total_count
		var qrTotalCount bool

		if o.TotalCount != nil {
			qrTotalCount = *o.TotalCount
		}
		qTotalCount := swag.FormatBool(qrTotalCount)
		if qTotalCount != "" {

			if err := r.SetQueryParam("total_count", qTotalCount); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
