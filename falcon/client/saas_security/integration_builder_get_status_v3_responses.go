// Code generated by go-swagger; DO NOT EDIT.

package saas_security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// IntegrationBuilderGetStatusV3Reader is a Reader for the IntegrationBuilderGetStatusV3 structure.
type IntegrationBuilderGetStatusV3Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IntegrationBuilderGetStatusV3Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIntegrationBuilderGetStatusV3OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewIntegrationBuilderGetStatusV3Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewIntegrationBuilderGetStatusV3TooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewIntegrationBuilderGetStatusV3InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /saas-security/entities/custom-integration-status/v3] IntegrationBuilderGetStatusV3", response, response.Code())
	}
}

// NewIntegrationBuilderGetStatusV3OK creates a IntegrationBuilderGetStatusV3OK with default headers values
func NewIntegrationBuilderGetStatusV3OK() *IntegrationBuilderGetStatusV3OK {
	return &IntegrationBuilderGetStatusV3OK{}
}

/*
IntegrationBuilderGetStatusV3OK describes a response with status code 200, with default header values.

IntegrationBuilderGetStatusV3OK integration builder get status v3 o k
*/
type IntegrationBuilderGetStatusV3OK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.GetTransactionStatus
}

// IsSuccess returns true when this integration builder get status v3 o k response has a 2xx status code
func (o *IntegrationBuilderGetStatusV3OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this integration builder get status v3 o k response has a 3xx status code
func (o *IntegrationBuilderGetStatusV3OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this integration builder get status v3 o k response has a 4xx status code
func (o *IntegrationBuilderGetStatusV3OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this integration builder get status v3 o k response has a 5xx status code
func (o *IntegrationBuilderGetStatusV3OK) IsServerError() bool {
	return false
}

// IsCode returns true when this integration builder get status v3 o k response a status code equal to that given
func (o *IntegrationBuilderGetStatusV3OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the integration builder get status v3 o k response
func (o *IntegrationBuilderGetStatusV3OK) Code() int {
	return 200
}

func (o *IntegrationBuilderGetStatusV3OK) Error() string {
	return fmt.Sprintf("[GET /saas-security/entities/custom-integration-status/v3][%d] integrationBuilderGetStatusV3OK  %+v", 200, o.Payload)
}

func (o *IntegrationBuilderGetStatusV3OK) String() string {
	return fmt.Sprintf("[GET /saas-security/entities/custom-integration-status/v3][%d] integrationBuilderGetStatusV3OK  %+v", 200, o.Payload)
}

func (o *IntegrationBuilderGetStatusV3OK) GetPayload() *models.GetTransactionStatus {
	return o.Payload
}

func (o *IntegrationBuilderGetStatusV3OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.GetTransactionStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIntegrationBuilderGetStatusV3Forbidden creates a IntegrationBuilderGetStatusV3Forbidden with default headers values
func NewIntegrationBuilderGetStatusV3Forbidden() *IntegrationBuilderGetStatusV3Forbidden {
	return &IntegrationBuilderGetStatusV3Forbidden{}
}

/*
IntegrationBuilderGetStatusV3Forbidden describes a response with status code 403, with default header values.

Forbidden
*/
type IntegrationBuilderGetStatusV3Forbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this integration builder get status v3 forbidden response has a 2xx status code
func (o *IntegrationBuilderGetStatusV3Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this integration builder get status v3 forbidden response has a 3xx status code
func (o *IntegrationBuilderGetStatusV3Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this integration builder get status v3 forbidden response has a 4xx status code
func (o *IntegrationBuilderGetStatusV3Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this integration builder get status v3 forbidden response has a 5xx status code
func (o *IntegrationBuilderGetStatusV3Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this integration builder get status v3 forbidden response a status code equal to that given
func (o *IntegrationBuilderGetStatusV3Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the integration builder get status v3 forbidden response
func (o *IntegrationBuilderGetStatusV3Forbidden) Code() int {
	return 403
}

func (o *IntegrationBuilderGetStatusV3Forbidden) Error() string {
	return fmt.Sprintf("[GET /saas-security/entities/custom-integration-status/v3][%d] integrationBuilderGetStatusV3Forbidden  %+v", 403, o.Payload)
}

func (o *IntegrationBuilderGetStatusV3Forbidden) String() string {
	return fmt.Sprintf("[GET /saas-security/entities/custom-integration-status/v3][%d] integrationBuilderGetStatusV3Forbidden  %+v", 403, o.Payload)
}

func (o *IntegrationBuilderGetStatusV3Forbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *IntegrationBuilderGetStatusV3Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIntegrationBuilderGetStatusV3TooManyRequests creates a IntegrationBuilderGetStatusV3TooManyRequests with default headers values
func NewIntegrationBuilderGetStatusV3TooManyRequests() *IntegrationBuilderGetStatusV3TooManyRequests {
	return &IntegrationBuilderGetStatusV3TooManyRequests{}
}

/*
IntegrationBuilderGetStatusV3TooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type IntegrationBuilderGetStatusV3TooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this integration builder get status v3 too many requests response has a 2xx status code
func (o *IntegrationBuilderGetStatusV3TooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this integration builder get status v3 too many requests response has a 3xx status code
func (o *IntegrationBuilderGetStatusV3TooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this integration builder get status v3 too many requests response has a 4xx status code
func (o *IntegrationBuilderGetStatusV3TooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this integration builder get status v3 too many requests response has a 5xx status code
func (o *IntegrationBuilderGetStatusV3TooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this integration builder get status v3 too many requests response a status code equal to that given
func (o *IntegrationBuilderGetStatusV3TooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the integration builder get status v3 too many requests response
func (o *IntegrationBuilderGetStatusV3TooManyRequests) Code() int {
	return 429
}

func (o *IntegrationBuilderGetStatusV3TooManyRequests) Error() string {
	return fmt.Sprintf("[GET /saas-security/entities/custom-integration-status/v3][%d] integrationBuilderGetStatusV3TooManyRequests  %+v", 429, o.Payload)
}

func (o *IntegrationBuilderGetStatusV3TooManyRequests) String() string {
	return fmt.Sprintf("[GET /saas-security/entities/custom-integration-status/v3][%d] integrationBuilderGetStatusV3TooManyRequests  %+v", 429, o.Payload)
}

func (o *IntegrationBuilderGetStatusV3TooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *IntegrationBuilderGetStatusV3TooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIntegrationBuilderGetStatusV3InternalServerError creates a IntegrationBuilderGetStatusV3InternalServerError with default headers values
func NewIntegrationBuilderGetStatusV3InternalServerError() *IntegrationBuilderGetStatusV3InternalServerError {
	return &IntegrationBuilderGetStatusV3InternalServerError{}
}

/*
IntegrationBuilderGetStatusV3InternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type IntegrationBuilderGetStatusV3InternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this integration builder get status v3 internal server error response has a 2xx status code
func (o *IntegrationBuilderGetStatusV3InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this integration builder get status v3 internal server error response has a 3xx status code
func (o *IntegrationBuilderGetStatusV3InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this integration builder get status v3 internal server error response has a 4xx status code
func (o *IntegrationBuilderGetStatusV3InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this integration builder get status v3 internal server error response has a 5xx status code
func (o *IntegrationBuilderGetStatusV3InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this integration builder get status v3 internal server error response a status code equal to that given
func (o *IntegrationBuilderGetStatusV3InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the integration builder get status v3 internal server error response
func (o *IntegrationBuilderGetStatusV3InternalServerError) Code() int {
	return 500
}

func (o *IntegrationBuilderGetStatusV3InternalServerError) Error() string {
	return fmt.Sprintf("[GET /saas-security/entities/custom-integration-status/v3][%d] integrationBuilderGetStatusV3InternalServerError  %+v", 500, o.Payload)
}

func (o *IntegrationBuilderGetStatusV3InternalServerError) String() string {
	return fmt.Sprintf("[GET /saas-security/entities/custom-integration-status/v3][%d] integrationBuilderGetStatusV3InternalServerError  %+v", 500, o.Payload)
}

func (o *IntegrationBuilderGetStatusV3InternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *IntegrationBuilderGetStatusV3InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
