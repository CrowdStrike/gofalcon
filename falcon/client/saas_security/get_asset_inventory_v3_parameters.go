// Code generated by go-swagger; DO NOT EDIT.

package saas_security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAssetInventoryV3Params creates a new GetAssetInventoryV3Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAssetInventoryV3Params() *GetAssetInventoryV3Params {
	return &GetAssetInventoryV3Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAssetInventoryV3ParamsWithTimeout creates a new GetAssetInventoryV3Params object
// with the ability to set a timeout on a request.
func NewGetAssetInventoryV3ParamsWithTimeout(timeout time.Duration) *GetAssetInventoryV3Params {
	return &GetAssetInventoryV3Params{
		timeout: timeout,
	}
}

// NewGetAssetInventoryV3ParamsWithContext creates a new GetAssetInventoryV3Params object
// with the ability to set a context for a request.
func NewGetAssetInventoryV3ParamsWithContext(ctx context.Context) *GetAssetInventoryV3Params {
	return &GetAssetInventoryV3Params{
		Context: ctx,
	}
}

// NewGetAssetInventoryV3ParamsWithHTTPClient creates a new GetAssetInventoryV3Params object
// with the ability to set a custom HTTPClient for a request.
func NewGetAssetInventoryV3ParamsWithHTTPClient(client *http.Client) *GetAssetInventoryV3Params {
	return &GetAssetInventoryV3Params{
		HTTPClient: client,
	}
}

/*
GetAssetInventoryV3Params contains all the parameters to send to the API endpoint

	for the get asset inventory v3 operation.

	Typically these are written to a http.Request.
*/
type GetAssetInventoryV3Params struct {

	/* AccessLevel.

	   Comma separated list of access levels
	*/
	AccessLevel *string

	/* IntegrationID.

	   Comma separated list of integration IDs
	*/
	IntegrationID *string

	/* LastAccessed.

	   Last accessed date was within or was not within the last 'value' days. Format: 'was value' or 'was not value' or 'value' (implies 'was value'). 'value' is an integer
	*/
	LastAccessed *string

	/* LastModified.

	   Last modified date was within or was not within the last 'value' days. Format: 'was value' or 'was not value' or 'value' (implies 'was value'). 'value' is an integer
	*/
	LastModified *string

	/* Limit.

	   The maximum number of objects to return
	*/
	Limit *int64

	/* Offset.

	   The starting index of the results
	*/
	Offset *int64

	/* PasswordProtected.

	   Password protected
	*/
	PasswordProtected *bool

	/* ResourceName.

	   Resource name contains 'value' (case insensitive)
	*/
	ResourceName *string

	/* ResourceOwner.

	   Resource owner contains 'value' (case insensitive)
	*/
	ResourceOwner *string

	/* ResourceOwnerEnabled.

	   Resource owner enabled
	*/
	ResourceOwnerEnabled *bool

	/* ResourceType.

	   Comma separated list of resource types
	*/
	ResourceType *string

	/* UnmanagedDomain.

	   Comma separated list of unmanaged domains
	*/
	UnmanagedDomain *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get asset inventory v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAssetInventoryV3Params) WithDefaults() *GetAssetInventoryV3Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get asset inventory v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAssetInventoryV3Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) WithTimeout(timeout time.Duration) *GetAssetInventoryV3Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) WithContext(ctx context.Context) *GetAssetInventoryV3Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) WithHTTPClient(client *http.Client) *GetAssetInventoryV3Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessLevel adds the accessLevel to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) WithAccessLevel(accessLevel *string) *GetAssetInventoryV3Params {
	o.SetAccessLevel(accessLevel)
	return o
}

// SetAccessLevel adds the accessLevel to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) SetAccessLevel(accessLevel *string) {
	o.AccessLevel = accessLevel
}

// WithIntegrationID adds the integrationID to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) WithIntegrationID(integrationID *string) *GetAssetInventoryV3Params {
	o.SetIntegrationID(integrationID)
	return o
}

// SetIntegrationID adds the integrationId to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) SetIntegrationID(integrationID *string) {
	o.IntegrationID = integrationID
}

// WithLastAccessed adds the lastAccessed to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) WithLastAccessed(lastAccessed *string) *GetAssetInventoryV3Params {
	o.SetLastAccessed(lastAccessed)
	return o
}

// SetLastAccessed adds the lastAccessed to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) SetLastAccessed(lastAccessed *string) {
	o.LastAccessed = lastAccessed
}

// WithLastModified adds the lastModified to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) WithLastModified(lastModified *string) *GetAssetInventoryV3Params {
	o.SetLastModified(lastModified)
	return o
}

// SetLastModified adds the lastModified to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) SetLastModified(lastModified *string) {
	o.LastModified = lastModified
}

// WithLimit adds the limit to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) WithLimit(limit *int64) *GetAssetInventoryV3Params {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) WithOffset(offset *int64) *GetAssetInventoryV3Params {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithPasswordProtected adds the passwordProtected to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) WithPasswordProtected(passwordProtected *bool) *GetAssetInventoryV3Params {
	o.SetPasswordProtected(passwordProtected)
	return o
}

// SetPasswordProtected adds the passwordProtected to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) SetPasswordProtected(passwordProtected *bool) {
	o.PasswordProtected = passwordProtected
}

// WithResourceName adds the resourceName to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) WithResourceName(resourceName *string) *GetAssetInventoryV3Params {
	o.SetResourceName(resourceName)
	return o
}

// SetResourceName adds the resourceName to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) SetResourceName(resourceName *string) {
	o.ResourceName = resourceName
}

// WithResourceOwner adds the resourceOwner to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) WithResourceOwner(resourceOwner *string) *GetAssetInventoryV3Params {
	o.SetResourceOwner(resourceOwner)
	return o
}

// SetResourceOwner adds the resourceOwner to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) SetResourceOwner(resourceOwner *string) {
	o.ResourceOwner = resourceOwner
}

// WithResourceOwnerEnabled adds the resourceOwnerEnabled to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) WithResourceOwnerEnabled(resourceOwnerEnabled *bool) *GetAssetInventoryV3Params {
	o.SetResourceOwnerEnabled(resourceOwnerEnabled)
	return o
}

// SetResourceOwnerEnabled adds the resourceOwnerEnabled to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) SetResourceOwnerEnabled(resourceOwnerEnabled *bool) {
	o.ResourceOwnerEnabled = resourceOwnerEnabled
}

// WithResourceType adds the resourceType to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) WithResourceType(resourceType *string) *GetAssetInventoryV3Params {
	o.SetResourceType(resourceType)
	return o
}

// SetResourceType adds the resourceType to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) SetResourceType(resourceType *string) {
	o.ResourceType = resourceType
}

// WithUnmanagedDomain adds the unmanagedDomain to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) WithUnmanagedDomain(unmanagedDomain *string) *GetAssetInventoryV3Params {
	o.SetUnmanagedDomain(unmanagedDomain)
	return o
}

// SetUnmanagedDomain adds the unmanagedDomain to the get asset inventory v3 params
func (o *GetAssetInventoryV3Params) SetUnmanagedDomain(unmanagedDomain *string) {
	o.UnmanagedDomain = unmanagedDomain
}

// WriteToRequest writes these params to a swagger request
func (o *GetAssetInventoryV3Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccessLevel != nil {

		// query param access_level
		var qrAccessLevel string

		if o.AccessLevel != nil {
			qrAccessLevel = *o.AccessLevel
		}
		qAccessLevel := qrAccessLevel
		if qAccessLevel != "" {

			if err := r.SetQueryParam("access_level", qAccessLevel); err != nil {
				return err
			}
		}
	}

	if o.IntegrationID != nil {

		// query param integration_id
		var qrIntegrationID string

		if o.IntegrationID != nil {
			qrIntegrationID = *o.IntegrationID
		}
		qIntegrationID := qrIntegrationID
		if qIntegrationID != "" {

			if err := r.SetQueryParam("integration_id", qIntegrationID); err != nil {
				return err
			}
		}
	}

	if o.LastAccessed != nil {

		// query param last_accessed
		var qrLastAccessed string

		if o.LastAccessed != nil {
			qrLastAccessed = *o.LastAccessed
		}
		qLastAccessed := qrLastAccessed
		if qLastAccessed != "" {

			if err := r.SetQueryParam("last_accessed", qLastAccessed); err != nil {
				return err
			}
		}
	}

	if o.LastModified != nil {

		// query param last_modified
		var qrLastModified string

		if o.LastModified != nil {
			qrLastModified = *o.LastModified
		}
		qLastModified := qrLastModified
		if qLastModified != "" {

			if err := r.SetQueryParam("last_modified", qLastModified); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.PasswordProtected != nil {

		// query param password_protected
		var qrPasswordProtected bool

		if o.PasswordProtected != nil {
			qrPasswordProtected = *o.PasswordProtected
		}
		qPasswordProtected := swag.FormatBool(qrPasswordProtected)
		if qPasswordProtected != "" {

			if err := r.SetQueryParam("password_protected", qPasswordProtected); err != nil {
				return err
			}
		}
	}

	if o.ResourceName != nil {

		// query param resource_name
		var qrResourceName string

		if o.ResourceName != nil {
			qrResourceName = *o.ResourceName
		}
		qResourceName := qrResourceName
		if qResourceName != "" {

			if err := r.SetQueryParam("resource_name", qResourceName); err != nil {
				return err
			}
		}
	}

	if o.ResourceOwner != nil {

		// query param resource_owner
		var qrResourceOwner string

		if o.ResourceOwner != nil {
			qrResourceOwner = *o.ResourceOwner
		}
		qResourceOwner := qrResourceOwner
		if qResourceOwner != "" {

			if err := r.SetQueryParam("resource_owner", qResourceOwner); err != nil {
				return err
			}
		}
	}

	if o.ResourceOwnerEnabled != nil {

		// query param resource_owner_enabled
		var qrResourceOwnerEnabled bool

		if o.ResourceOwnerEnabled != nil {
			qrResourceOwnerEnabled = *o.ResourceOwnerEnabled
		}
		qResourceOwnerEnabled := swag.FormatBool(qrResourceOwnerEnabled)
		if qResourceOwnerEnabled != "" {

			if err := r.SetQueryParam("resource_owner_enabled", qResourceOwnerEnabled); err != nil {
				return err
			}
		}
	}

	if o.ResourceType != nil {

		// query param resource_type
		var qrResourceType string

		if o.ResourceType != nil {
			qrResourceType = *o.ResourceType
		}
		qResourceType := qrResourceType
		if qResourceType != "" {

			if err := r.SetQueryParam("resource_type", qResourceType); err != nil {
				return err
			}
		}
	}

	if o.UnmanagedDomain != nil {

		// query param unmanaged_domain
		var qrUnmanagedDomain string

		if o.UnmanagedDomain != nil {
			qrUnmanagedDomain = *o.UnmanagedDomain
		}
		qUnmanagedDomain := qrUnmanagedDomain
		if qUnmanagedDomain != "" {

			if err := r.SetQueryParam("unmanaged_domain", qUnmanagedDomain); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
