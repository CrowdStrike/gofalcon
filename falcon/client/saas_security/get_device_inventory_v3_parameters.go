// Code generated by go-swagger; DO NOT EDIT.

package saas_security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetDeviceInventoryV3Params creates a new GetDeviceInventoryV3Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetDeviceInventoryV3Params() *GetDeviceInventoryV3Params {
	return &GetDeviceInventoryV3Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetDeviceInventoryV3ParamsWithTimeout creates a new GetDeviceInventoryV3Params object
// with the ability to set a timeout on a request.
func NewGetDeviceInventoryV3ParamsWithTimeout(timeout time.Duration) *GetDeviceInventoryV3Params {
	return &GetDeviceInventoryV3Params{
		timeout: timeout,
	}
}

// NewGetDeviceInventoryV3ParamsWithContext creates a new GetDeviceInventoryV3Params object
// with the ability to set a context for a request.
func NewGetDeviceInventoryV3ParamsWithContext(ctx context.Context) *GetDeviceInventoryV3Params {
	return &GetDeviceInventoryV3Params{
		Context: ctx,
	}
}

// NewGetDeviceInventoryV3ParamsWithHTTPClient creates a new GetDeviceInventoryV3Params object
// with the ability to set a custom HTTPClient for a request.
func NewGetDeviceInventoryV3ParamsWithHTTPClient(client *http.Client) *GetDeviceInventoryV3Params {
	return &GetDeviceInventoryV3Params{
		HTTPClient: client,
	}
}

/*
GetDeviceInventoryV3Params contains all the parameters to send to the API endpoint

	for the get device inventory v3 operation.

	Typically these are written to a http.Request.
*/
type GetDeviceInventoryV3Params struct {

	/* Email.

	   Email
	*/
	Email *string

	/* IntegrationID.

	   Comma separated integration ID's
	*/
	IntegrationID *string

	/* Limit.

	   The maximum number of objects to return
	*/
	Limit *int64

	/* Offset.

	   The starting index of the results
	*/
	Offset *int64

	/* PrivilegedOnly.

	   Privileged Only
	*/
	PrivilegedOnly *bool

	/* UnassociatedDevices.

	   Unassociated Devices
	*/
	UnassociatedDevices *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get device inventory v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDeviceInventoryV3Params) WithDefaults() *GetDeviceInventoryV3Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get device inventory v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDeviceInventoryV3Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get device inventory v3 params
func (o *GetDeviceInventoryV3Params) WithTimeout(timeout time.Duration) *GetDeviceInventoryV3Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get device inventory v3 params
func (o *GetDeviceInventoryV3Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get device inventory v3 params
func (o *GetDeviceInventoryV3Params) WithContext(ctx context.Context) *GetDeviceInventoryV3Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get device inventory v3 params
func (o *GetDeviceInventoryV3Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get device inventory v3 params
func (o *GetDeviceInventoryV3Params) WithHTTPClient(client *http.Client) *GetDeviceInventoryV3Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get device inventory v3 params
func (o *GetDeviceInventoryV3Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmail adds the email to the get device inventory v3 params
func (o *GetDeviceInventoryV3Params) WithEmail(email *string) *GetDeviceInventoryV3Params {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the get device inventory v3 params
func (o *GetDeviceInventoryV3Params) SetEmail(email *string) {
	o.Email = email
}

// WithIntegrationID adds the integrationID to the get device inventory v3 params
func (o *GetDeviceInventoryV3Params) WithIntegrationID(integrationID *string) *GetDeviceInventoryV3Params {
	o.SetIntegrationID(integrationID)
	return o
}

// SetIntegrationID adds the integrationId to the get device inventory v3 params
func (o *GetDeviceInventoryV3Params) SetIntegrationID(integrationID *string) {
	o.IntegrationID = integrationID
}

// WithLimit adds the limit to the get device inventory v3 params
func (o *GetDeviceInventoryV3Params) WithLimit(limit *int64) *GetDeviceInventoryV3Params {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get device inventory v3 params
func (o *GetDeviceInventoryV3Params) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get device inventory v3 params
func (o *GetDeviceInventoryV3Params) WithOffset(offset *int64) *GetDeviceInventoryV3Params {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get device inventory v3 params
func (o *GetDeviceInventoryV3Params) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithPrivilegedOnly adds the privilegedOnly to the get device inventory v3 params
func (o *GetDeviceInventoryV3Params) WithPrivilegedOnly(privilegedOnly *bool) *GetDeviceInventoryV3Params {
	o.SetPrivilegedOnly(privilegedOnly)
	return o
}

// SetPrivilegedOnly adds the privilegedOnly to the get device inventory v3 params
func (o *GetDeviceInventoryV3Params) SetPrivilegedOnly(privilegedOnly *bool) {
	o.PrivilegedOnly = privilegedOnly
}

// WithUnassociatedDevices adds the unassociatedDevices to the get device inventory v3 params
func (o *GetDeviceInventoryV3Params) WithUnassociatedDevices(unassociatedDevices *bool) *GetDeviceInventoryV3Params {
	o.SetUnassociatedDevices(unassociatedDevices)
	return o
}

// SetUnassociatedDevices adds the unassociatedDevices to the get device inventory v3 params
func (o *GetDeviceInventoryV3Params) SetUnassociatedDevices(unassociatedDevices *bool) {
	o.UnassociatedDevices = unassociatedDevices
}

// WriteToRequest writes these params to a swagger request
func (o *GetDeviceInventoryV3Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Email != nil {

		// query param email
		var qrEmail string

		if o.Email != nil {
			qrEmail = *o.Email
		}
		qEmail := qrEmail
		if qEmail != "" {

			if err := r.SetQueryParam("email", qEmail); err != nil {
				return err
			}
		}
	}

	if o.IntegrationID != nil {

		// query param integration_id
		var qrIntegrationID string

		if o.IntegrationID != nil {
			qrIntegrationID = *o.IntegrationID
		}
		qIntegrationID := qrIntegrationID
		if qIntegrationID != "" {

			if err := r.SetQueryParam("integration_id", qIntegrationID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.PrivilegedOnly != nil {

		// query param privileged_only
		var qrPrivilegedOnly bool

		if o.PrivilegedOnly != nil {
			qrPrivilegedOnly = *o.PrivilegedOnly
		}
		qPrivilegedOnly := swag.FormatBool(qrPrivilegedOnly)
		if qPrivilegedOnly != "" {

			if err := r.SetQueryParam("privileged_only", qPrivilegedOnly); err != nil {
				return err
			}
		}
	}

	if o.UnassociatedDevices != nil {

		// query param unassociated_devices
		var qrUnassociatedDevices bool

		if o.UnassociatedDevices != nil {
			qrUnassociatedDevices = *o.UnassociatedDevices
		}
		qUnassociatedDevices := swag.FormatBool(qrUnassociatedDevices)
		if qUnassociatedDevices != "" {

			if err := r.SetQueryParam("unassociated_devices", qUnassociatedDevices); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
