// Code generated by go-swagger; DO NOT EDIT.

package image_assessment_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// DeletePolicyGroupReader is a Reader for the DeletePolicyGroup structure.
type DeletePolicyGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeletePolicyGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeletePolicyGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeletePolicyGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeletePolicyGroupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeletePolicyGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /container-security/entities/image-assessment-policy-groups/v1] DeletePolicyGroup", response, response.Code())
	}
}

// NewDeletePolicyGroupOK creates a DeletePolicyGroupOK with default headers values
func NewDeletePolicyGroupOK() *DeletePolicyGroupOK {
	return &DeletePolicyGroupOK{}
}

/*
DeletePolicyGroupOK describes a response with status code 200, with default header values.

OK
*/
type DeletePolicyGroupOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CoreEntitiesResponse
}

// IsSuccess returns true when this delete policy group o k response has a 2xx status code
func (o *DeletePolicyGroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete policy group o k response has a 3xx status code
func (o *DeletePolicyGroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete policy group o k response has a 4xx status code
func (o *DeletePolicyGroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete policy group o k response has a 5xx status code
func (o *DeletePolicyGroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete policy group o k response a status code equal to that given
func (o *DeletePolicyGroupOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete policy group o k response
func (o *DeletePolicyGroupOK) Code() int {
	return 200
}

func (o *DeletePolicyGroupOK) Error() string {
	return fmt.Sprintf("[DELETE /container-security/entities/image-assessment-policy-groups/v1][%d] deletePolicyGroupOK  %+v", 200, o.Payload)
}

func (o *DeletePolicyGroupOK) String() string {
	return fmt.Sprintf("[DELETE /container-security/entities/image-assessment-policy-groups/v1][%d] deletePolicyGroupOK  %+v", 200, o.Payload)
}

func (o *DeletePolicyGroupOK) GetPayload() *models.CoreEntitiesResponse {
	return o.Payload
}

func (o *DeletePolicyGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CoreEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePolicyGroupForbidden creates a DeletePolicyGroupForbidden with default headers values
func NewDeletePolicyGroupForbidden() *DeletePolicyGroupForbidden {
	return &DeletePolicyGroupForbidden{}
}

/*
DeletePolicyGroupForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeletePolicyGroupForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete policy group forbidden response has a 2xx status code
func (o *DeletePolicyGroupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete policy group forbidden response has a 3xx status code
func (o *DeletePolicyGroupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete policy group forbidden response has a 4xx status code
func (o *DeletePolicyGroupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete policy group forbidden response has a 5xx status code
func (o *DeletePolicyGroupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete policy group forbidden response a status code equal to that given
func (o *DeletePolicyGroupForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete policy group forbidden response
func (o *DeletePolicyGroupForbidden) Code() int {
	return 403
}

func (o *DeletePolicyGroupForbidden) Error() string {
	return fmt.Sprintf("[DELETE /container-security/entities/image-assessment-policy-groups/v1][%d] deletePolicyGroupForbidden  %+v", 403, o.Payload)
}

func (o *DeletePolicyGroupForbidden) String() string {
	return fmt.Sprintf("[DELETE /container-security/entities/image-assessment-policy-groups/v1][%d] deletePolicyGroupForbidden  %+v", 403, o.Payload)
}

func (o *DeletePolicyGroupForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeletePolicyGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePolicyGroupTooManyRequests creates a DeletePolicyGroupTooManyRequests with default headers values
func NewDeletePolicyGroupTooManyRequests() *DeletePolicyGroupTooManyRequests {
	return &DeletePolicyGroupTooManyRequests{}
}

/*
DeletePolicyGroupTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type DeletePolicyGroupTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete policy group too many requests response has a 2xx status code
func (o *DeletePolicyGroupTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete policy group too many requests response has a 3xx status code
func (o *DeletePolicyGroupTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete policy group too many requests response has a 4xx status code
func (o *DeletePolicyGroupTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete policy group too many requests response has a 5xx status code
func (o *DeletePolicyGroupTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete policy group too many requests response a status code equal to that given
func (o *DeletePolicyGroupTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete policy group too many requests response
func (o *DeletePolicyGroupTooManyRequests) Code() int {
	return 429
}

func (o *DeletePolicyGroupTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /container-security/entities/image-assessment-policy-groups/v1][%d] deletePolicyGroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeletePolicyGroupTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /container-security/entities/image-assessment-policy-groups/v1][%d] deletePolicyGroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeletePolicyGroupTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeletePolicyGroupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePolicyGroupInternalServerError creates a DeletePolicyGroupInternalServerError with default headers values
func NewDeletePolicyGroupInternalServerError() *DeletePolicyGroupInternalServerError {
	return &DeletePolicyGroupInternalServerError{}
}

/*
DeletePolicyGroupInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeletePolicyGroupInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CoreEntitiesResponse
}

// IsSuccess returns true when this delete policy group internal server error response has a 2xx status code
func (o *DeletePolicyGroupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete policy group internal server error response has a 3xx status code
func (o *DeletePolicyGroupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete policy group internal server error response has a 4xx status code
func (o *DeletePolicyGroupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete policy group internal server error response has a 5xx status code
func (o *DeletePolicyGroupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete policy group internal server error response a status code equal to that given
func (o *DeletePolicyGroupInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete policy group internal server error response
func (o *DeletePolicyGroupInternalServerError) Code() int {
	return 500
}

func (o *DeletePolicyGroupInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /container-security/entities/image-assessment-policy-groups/v1][%d] deletePolicyGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *DeletePolicyGroupInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /container-security/entities/image-assessment-policy-groups/v1][%d] deletePolicyGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *DeletePolicyGroupInternalServerError) GetPayload() *models.CoreEntitiesResponse {
	return o.Payload
}

func (o *DeletePolicyGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CoreEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
