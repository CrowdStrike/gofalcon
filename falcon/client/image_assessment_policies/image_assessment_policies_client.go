// Code generated by go-swagger; DO NOT EDIT.

package image_assessment_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new image assessment policies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for image assessment policies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePolicies(params *CreatePoliciesParams, opts ...ClientOption) (*CreatePoliciesOK, error)

	CreatePolicyGroups(params *CreatePolicyGroupsParams, opts ...ClientOption) (*CreatePolicyGroupsOK, error)

	DeletePolicy(params *DeletePolicyParams, opts ...ClientOption) (*DeletePolicyOK, error)

	DeletePolicyGroup(params *DeletePolicyGroupParams, opts ...ClientOption) (*DeletePolicyGroupOK, error)

	ReadPolicies(params *ReadPoliciesParams, opts ...ClientOption) (*ReadPoliciesOK, error)

	ReadPolicyExclusions(params *ReadPolicyExclusionsParams, opts ...ClientOption) (*ReadPolicyExclusionsOK, error)

	ReadPolicyGroups(params *ReadPolicyGroupsParams, opts ...ClientOption) (*ReadPolicyGroupsOK, error)

	UpdatePolicies(params *UpdatePoliciesParams, opts ...ClientOption) (*UpdatePoliciesOK, error)

	UpdatePolicyExclusions(params *UpdatePolicyExclusionsParams, opts ...ClientOption) (*UpdatePolicyExclusionsOK, error)

	UpdatePolicyGroups(params *UpdatePolicyGroupsParams, opts ...ClientOption) (*UpdatePolicyGroupsOK, error)

	UpdatePolicyPrecedence(params *UpdatePolicyPrecedenceParams, opts ...ClientOption) (*UpdatePolicyPrecedenceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreatePolicies creates image assessment policies
*/
func (a *Client) CreatePolicies(params *CreatePoliciesParams, opts ...ClientOption) (*CreatePoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreatePolicies",
		Method:             "POST",
		PathPattern:        "/container-security/entities/image-assessment-policies/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreatePolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreatePolicyGroups creates image assessment policy group entities
*/
func (a *Client) CreatePolicyGroups(params *CreatePolicyGroupsParams, opts ...ClientOption) (*CreatePolicyGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePolicyGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreatePolicyGroups",
		Method:             "POST",
		PathPattern:        "/container-security/entities/image-assessment-policy-groups/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePolicyGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePolicyGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreatePolicyGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePolicy deletes image assessment policy by policy UUID
*/
func (a *Client) DeletePolicy(params *DeletePolicyParams, opts ...ClientOption) (*DeletePolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeletePolicy",
		Method:             "DELETE",
		PathPattern:        "/container-security/entities/image-assessment-policies/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeletePolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePolicyGroup deletes image assessment policy group entities
*/
func (a *Client) DeletePolicyGroup(params *DeletePolicyGroupParams, opts ...ClientOption) (*DeletePolicyGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePolicyGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeletePolicyGroup",
		Method:             "DELETE",
		PathPattern:        "/container-security/entities/image-assessment-policy-groups/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePolicyGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePolicyGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeletePolicyGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadPolicies gets all image assessment policies
*/
func (a *Client) ReadPolicies(params *ReadPoliciesParams, opts ...ClientOption) (*ReadPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadPolicies",
		Method:             "GET",
		PathPattern:        "/container-security/entities/image-assessment-policies/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadPoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadPolicyExclusions retrieves image assessment policy exclusion entities
*/
func (a *Client) ReadPolicyExclusions(params *ReadPolicyExclusionsParams, opts ...ClientOption) (*ReadPolicyExclusionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadPolicyExclusionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadPolicyExclusions",
		Method:             "GET",
		PathPattern:        "/container-security/entities/image-assessment-policy-exclusions/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadPolicyExclusionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadPolicyExclusionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadPolicyExclusions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadPolicyGroups retrieves image assessment policy group entities
*/
func (a *Client) ReadPolicyGroups(params *ReadPolicyGroupsParams, opts ...ClientOption) (*ReadPolicyGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadPolicyGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReadPolicyGroups",
		Method:             "GET",
		PathPattern:        "/container-security/entities/image-assessment-policy-groups/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadPolicyGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadPolicyGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReadPolicyGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePolicies updates image assessment policy entities
*/
func (a *Client) UpdatePolicies(params *UpdatePoliciesParams, opts ...ClientOption) (*UpdatePoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdatePolicies",
		Method:             "PATCH",
		PathPattern:        "/container-security/entities/image-assessment-policies/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdatePolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePolicyExclusions updates image assessment policy exclusion entities
*/
func (a *Client) UpdatePolicyExclusions(params *UpdatePolicyExclusionsParams, opts ...ClientOption) (*UpdatePolicyExclusionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePolicyExclusionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdatePolicyExclusions",
		Method:             "POST",
		PathPattern:        "/container-security/entities/image-assessment-policy-exclusions/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePolicyExclusionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePolicyExclusionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdatePolicyExclusions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePolicyGroups updates image assessment policy group entities
*/
func (a *Client) UpdatePolicyGroups(params *UpdatePolicyGroupsParams, opts ...ClientOption) (*UpdatePolicyGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePolicyGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdatePolicyGroups",
		Method:             "PATCH",
		PathPattern:        "/container-security/entities/image-assessment-policy-groups/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePolicyGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePolicyGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdatePolicyGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePolicyPrecedence updates image assessment policy precedence
*/
func (a *Client) UpdatePolicyPrecedence(params *UpdatePolicyPrecedenceParams, opts ...ClientOption) (*UpdatePolicyPrecedenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePolicyPrecedenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdatePolicyPrecedence",
		Method:             "POST",
		PathPattern:        "/container-security/entities/image-assessment-policy-precedence/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePolicyPrecedenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePolicyPrecedenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdatePolicyPrecedence: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
