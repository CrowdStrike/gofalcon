// Code generated by go-swagger; DO NOT EDIT.

package cases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// EntitiesAlertEvidencePostV1Reader is a Reader for the EntitiesAlertEvidencePostV1 structure.
type EntitiesAlertEvidencePostV1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EntitiesAlertEvidencePostV1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEntitiesAlertEvidencePostV1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEntitiesAlertEvidencePostV1BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEntitiesAlertEvidencePostV1Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewEntitiesAlertEvidencePostV1TooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEntitiesAlertEvidencePostV1InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cases/entities/alert-evidence/v1] entities.alert-evidence.post.v1", response, response.Code())
	}
}

// NewEntitiesAlertEvidencePostV1OK creates a EntitiesAlertEvidencePostV1OK with default headers values
func NewEntitiesAlertEvidencePostV1OK() *EntitiesAlertEvidencePostV1OK {
	return &EntitiesAlertEvidencePostV1OK{}
}

/*
EntitiesAlertEvidencePostV1OK describes a response with status code 200, with default header values.

OK
*/
type EntitiesAlertEvidencePostV1OK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.OperationsUpdateCaseResponseVM
}

// IsSuccess returns true when this entities alert evidence post v1 o k response has a 2xx status code
func (o *EntitiesAlertEvidencePostV1OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this entities alert evidence post v1 o k response has a 3xx status code
func (o *EntitiesAlertEvidencePostV1OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities alert evidence post v1 o k response has a 4xx status code
func (o *EntitiesAlertEvidencePostV1OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this entities alert evidence post v1 o k response has a 5xx status code
func (o *EntitiesAlertEvidencePostV1OK) IsServerError() bool {
	return false
}

// IsCode returns true when this entities alert evidence post v1 o k response a status code equal to that given
func (o *EntitiesAlertEvidencePostV1OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the entities alert evidence post v1 o k response
func (o *EntitiesAlertEvidencePostV1OK) Code() int {
	return 200
}

func (o *EntitiesAlertEvidencePostV1OK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cases/entities/alert-evidence/v1][%d] entitiesAlertEvidencePostV1OK %s", 200, payload)
}

func (o *EntitiesAlertEvidencePostV1OK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cases/entities/alert-evidence/v1][%d] entitiesAlertEvidencePostV1OK %s", 200, payload)
}

func (o *EntitiesAlertEvidencePostV1OK) GetPayload() *models.OperationsUpdateCaseResponseVM {
	return o.Payload
}

func (o *EntitiesAlertEvidencePostV1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.OperationsUpdateCaseResponseVM)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesAlertEvidencePostV1BadRequest creates a EntitiesAlertEvidencePostV1BadRequest with default headers values
func NewEntitiesAlertEvidencePostV1BadRequest() *EntitiesAlertEvidencePostV1BadRequest {
	return &EntitiesAlertEvidencePostV1BadRequest{}
}

/*
EntitiesAlertEvidencePostV1BadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type EntitiesAlertEvidencePostV1BadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.OperationsUpdateCaseResponseVM
}

// IsSuccess returns true when this entities alert evidence post v1 bad request response has a 2xx status code
func (o *EntitiesAlertEvidencePostV1BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities alert evidence post v1 bad request response has a 3xx status code
func (o *EntitiesAlertEvidencePostV1BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities alert evidence post v1 bad request response has a 4xx status code
func (o *EntitiesAlertEvidencePostV1BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities alert evidence post v1 bad request response has a 5xx status code
func (o *EntitiesAlertEvidencePostV1BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this entities alert evidence post v1 bad request response a status code equal to that given
func (o *EntitiesAlertEvidencePostV1BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the entities alert evidence post v1 bad request response
func (o *EntitiesAlertEvidencePostV1BadRequest) Code() int {
	return 400
}

func (o *EntitiesAlertEvidencePostV1BadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cases/entities/alert-evidence/v1][%d] entitiesAlertEvidencePostV1BadRequest %s", 400, payload)
}

func (o *EntitiesAlertEvidencePostV1BadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cases/entities/alert-evidence/v1][%d] entitiesAlertEvidencePostV1BadRequest %s", 400, payload)
}

func (o *EntitiesAlertEvidencePostV1BadRequest) GetPayload() *models.OperationsUpdateCaseResponseVM {
	return o.Payload
}

func (o *EntitiesAlertEvidencePostV1BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.OperationsUpdateCaseResponseVM)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesAlertEvidencePostV1Forbidden creates a EntitiesAlertEvidencePostV1Forbidden with default headers values
func NewEntitiesAlertEvidencePostV1Forbidden() *EntitiesAlertEvidencePostV1Forbidden {
	return &EntitiesAlertEvidencePostV1Forbidden{}
}

/*
EntitiesAlertEvidencePostV1Forbidden describes a response with status code 403, with default header values.

Forbidden
*/
type EntitiesAlertEvidencePostV1Forbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this entities alert evidence post v1 forbidden response has a 2xx status code
func (o *EntitiesAlertEvidencePostV1Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities alert evidence post v1 forbidden response has a 3xx status code
func (o *EntitiesAlertEvidencePostV1Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities alert evidence post v1 forbidden response has a 4xx status code
func (o *EntitiesAlertEvidencePostV1Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities alert evidence post v1 forbidden response has a 5xx status code
func (o *EntitiesAlertEvidencePostV1Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this entities alert evidence post v1 forbidden response a status code equal to that given
func (o *EntitiesAlertEvidencePostV1Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the entities alert evidence post v1 forbidden response
func (o *EntitiesAlertEvidencePostV1Forbidden) Code() int {
	return 403
}

func (o *EntitiesAlertEvidencePostV1Forbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cases/entities/alert-evidence/v1][%d] entitiesAlertEvidencePostV1Forbidden %s", 403, payload)
}

func (o *EntitiesAlertEvidencePostV1Forbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cases/entities/alert-evidence/v1][%d] entitiesAlertEvidencePostV1Forbidden %s", 403, payload)
}

func (o *EntitiesAlertEvidencePostV1Forbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *EntitiesAlertEvidencePostV1Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesAlertEvidencePostV1TooManyRequests creates a EntitiesAlertEvidencePostV1TooManyRequests with default headers values
func NewEntitiesAlertEvidencePostV1TooManyRequests() *EntitiesAlertEvidencePostV1TooManyRequests {
	return &EntitiesAlertEvidencePostV1TooManyRequests{}
}

/*
EntitiesAlertEvidencePostV1TooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type EntitiesAlertEvidencePostV1TooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this entities alert evidence post v1 too many requests response has a 2xx status code
func (o *EntitiesAlertEvidencePostV1TooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities alert evidence post v1 too many requests response has a 3xx status code
func (o *EntitiesAlertEvidencePostV1TooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities alert evidence post v1 too many requests response has a 4xx status code
func (o *EntitiesAlertEvidencePostV1TooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities alert evidence post v1 too many requests response has a 5xx status code
func (o *EntitiesAlertEvidencePostV1TooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this entities alert evidence post v1 too many requests response a status code equal to that given
func (o *EntitiesAlertEvidencePostV1TooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the entities alert evidence post v1 too many requests response
func (o *EntitiesAlertEvidencePostV1TooManyRequests) Code() int {
	return 429
}

func (o *EntitiesAlertEvidencePostV1TooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cases/entities/alert-evidence/v1][%d] entitiesAlertEvidencePostV1TooManyRequests %s", 429, payload)
}

func (o *EntitiesAlertEvidencePostV1TooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cases/entities/alert-evidence/v1][%d] entitiesAlertEvidencePostV1TooManyRequests %s", 429, payload)
}

func (o *EntitiesAlertEvidencePostV1TooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *EntitiesAlertEvidencePostV1TooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesAlertEvidencePostV1InternalServerError creates a EntitiesAlertEvidencePostV1InternalServerError with default headers values
func NewEntitiesAlertEvidencePostV1InternalServerError() *EntitiesAlertEvidencePostV1InternalServerError {
	return &EntitiesAlertEvidencePostV1InternalServerError{}
}

/*
EntitiesAlertEvidencePostV1InternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type EntitiesAlertEvidencePostV1InternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.OperationsUpdateCaseResponseVM
}

// IsSuccess returns true when this entities alert evidence post v1 internal server error response has a 2xx status code
func (o *EntitiesAlertEvidencePostV1InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities alert evidence post v1 internal server error response has a 3xx status code
func (o *EntitiesAlertEvidencePostV1InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities alert evidence post v1 internal server error response has a 4xx status code
func (o *EntitiesAlertEvidencePostV1InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this entities alert evidence post v1 internal server error response has a 5xx status code
func (o *EntitiesAlertEvidencePostV1InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this entities alert evidence post v1 internal server error response a status code equal to that given
func (o *EntitiesAlertEvidencePostV1InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the entities alert evidence post v1 internal server error response
func (o *EntitiesAlertEvidencePostV1InternalServerError) Code() int {
	return 500
}

func (o *EntitiesAlertEvidencePostV1InternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cases/entities/alert-evidence/v1][%d] entitiesAlertEvidencePostV1InternalServerError %s", 500, payload)
}

func (o *EntitiesAlertEvidencePostV1InternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cases/entities/alert-evidence/v1][%d] entitiesAlertEvidencePostV1InternalServerError %s", 500, payload)
}

func (o *EntitiesAlertEvidencePostV1InternalServerError) GetPayload() *models.OperationsUpdateCaseResponseVM {
	return o.Payload
}

func (o *EntitiesAlertEvidencePostV1InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.OperationsUpdateCaseResponseVM)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
