// Code generated by go-swagger; DO NOT EDIT.

package cases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new cases API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new cases API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new cases API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for cases API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	EntitiesAlertEvidencePostV1(params *EntitiesAlertEvidencePostV1Params, opts ...ClientOption) (*EntitiesAlertEvidencePostV1OK, error)

	EntitiesCaseTagsDeleteV1(params *EntitiesCaseTagsDeleteV1Params, opts ...ClientOption) (*EntitiesCaseTagsDeleteV1OK, error)

	EntitiesCaseTagsPostV1(params *EntitiesCaseTagsPostV1Params, opts ...ClientOption) (*EntitiesCaseTagsPostV1OK, error)

	EntitiesCasesPatchV2(params *EntitiesCasesPatchV2Params, opts ...ClientOption) (*EntitiesCasesPatchV2OK, error)

	EntitiesCasesPostV2(params *EntitiesCasesPostV2Params, opts ...ClientOption) (*EntitiesCasesPostV2OK, error)

	EntitiesCasesPutV2(params *EntitiesCasesPutV2Params, opts ...ClientOption) (*EntitiesCasesPutV2Created, error)

	EntitiesEventEvidencePostV1(params *EntitiesEventEvidencePostV1Params, opts ...ClientOption) (*EntitiesEventEvidencePostV1OK, error)

	QueriesCasesGetV1(params *QueriesCasesGetV1Params, opts ...ClientOption) (*QueriesCasesGetV1OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
EntitiesAlertEvidencePostV1 adds the given list of alert evidence to the specified case
*/
func (a *Client) EntitiesAlertEvidencePostV1(params *EntitiesAlertEvidencePostV1Params, opts ...ClientOption) (*EntitiesAlertEvidencePostV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesAlertEvidencePostV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.alert-evidence.post.v1",
		Method:             "POST",
		PathPattern:        "/cases/entities/alert-evidence/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesAlertEvidencePostV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesAlertEvidencePostV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.alert-evidence.post.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesCaseTagsDeleteV1 removes the specified tags from the specified case
*/
func (a *Client) EntitiesCaseTagsDeleteV1(params *EntitiesCaseTagsDeleteV1Params, opts ...ClientOption) (*EntitiesCaseTagsDeleteV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesCaseTagsDeleteV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.case-tags.delete.v1",
		Method:             "DELETE",
		PathPattern:        "/cases/entities/case-tags/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesCaseTagsDeleteV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesCaseTagsDeleteV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.case-tags.delete.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesCaseTagsPostV1 adds the given list of tags to the specified case
*/
func (a *Client) EntitiesCaseTagsPostV1(params *EntitiesCaseTagsPostV1Params, opts ...ClientOption) (*EntitiesCaseTagsPostV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesCaseTagsPostV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.case-tags.post.v1",
		Method:             "POST",
		PathPattern:        "/cases/entities/case-tags/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesCaseTagsPostV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesCaseTagsPostV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.case-tags.post.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesCasesPatchV2 updates given fields on the specified case
*/
func (a *Client) EntitiesCasesPatchV2(params *EntitiesCasesPatchV2Params, opts ...ClientOption) (*EntitiesCasesPatchV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesCasesPatchV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.cases.patch.v2",
		Method:             "PATCH",
		PathPattern:        "/cases/entities/cases/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesCasesPatchV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesCasesPatchV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.cases.patch.v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesCasesPostV2 retrieves all cases given their i ds
*/
func (a *Client) EntitiesCasesPostV2(params *EntitiesCasesPostV2Params, opts ...ClientOption) (*EntitiesCasesPostV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesCasesPostV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.cases.post.v2",
		Method:             "POST",
		PathPattern:        "/cases/entities/cases/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesCasesPostV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesCasesPostV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.cases.post.v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesCasesPutV2 creates the given case
*/
func (a *Client) EntitiesCasesPutV2(params *EntitiesCasesPutV2Params, opts ...ClientOption) (*EntitiesCasesPutV2Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesCasesPutV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.cases.put.v2",
		Method:             "PUT",
		PathPattern:        "/cases/entities/cases/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesCasesPutV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesCasesPutV2Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.cases.put.v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesEventEvidencePostV1 adds the given list of event evidence to the specified case
*/
func (a *Client) EntitiesEventEvidencePostV1(params *EntitiesEventEvidencePostV1Params, opts ...ClientOption) (*EntitiesEventEvidencePostV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesEventEvidencePostV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.event-evidence.post.v1",
		Method:             "POST",
		PathPattern:        "/cases/entities/event-evidence/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesEventEvidencePostV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesEventEvidencePostV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.event-evidence.post.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueriesCasesGetV1 retrieves all cases i ds that match a given query
*/
func (a *Client) QueriesCasesGetV1(params *QueriesCasesGetV1Params, opts ...ClientOption) (*QueriesCasesGetV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueriesCasesGetV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "queries.cases.get.v1",
		Method:             "GET",
		PathPattern:        "/cases/queries/cases/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueriesCasesGetV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueriesCasesGetV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queries.cases.get.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
