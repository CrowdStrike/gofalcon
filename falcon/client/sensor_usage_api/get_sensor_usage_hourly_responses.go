// Code generated by go-swagger; DO NOT EDIT.

package sensor_usage_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetSensorUsageHourlyReader is a Reader for the GetSensorUsageHourly structure.
type GetSensorUsageHourlyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSensorUsageHourlyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSensorUsageHourlyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSensorUsageHourlyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSensorUsageHourlyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSensorUsageHourlyTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSensorUsageHourlyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /billing-dashboards-usage/aggregates/hourly-average/v1] GetSensorUsageHourly", response, response.Code())
	}
}

// NewGetSensorUsageHourlyOK creates a GetSensorUsageHourlyOK with default headers values
func NewGetSensorUsageHourlyOK() *GetSensorUsageHourlyOK {
	return &GetSensorUsageHourlyOK{}
}

/*
GetSensorUsageHourlyOK describes a response with status code 200, with default header values.

OK
*/
type GetSensorUsageHourlyOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIHourlyAverageResponse
}

// IsSuccess returns true when this get sensor usage hourly o k response has a 2xx status code
func (o *GetSensorUsageHourlyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get sensor usage hourly o k response has a 3xx status code
func (o *GetSensorUsageHourlyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get sensor usage hourly o k response has a 4xx status code
func (o *GetSensorUsageHourlyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get sensor usage hourly o k response has a 5xx status code
func (o *GetSensorUsageHourlyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get sensor usage hourly o k response a status code equal to that given
func (o *GetSensorUsageHourlyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get sensor usage hourly o k response
func (o *GetSensorUsageHourlyOK) Code() int {
	return 200
}

func (o *GetSensorUsageHourlyOK) Error() string {
	return fmt.Sprintf("[GET /billing-dashboards-usage/aggregates/hourly-average/v1][%d] getSensorUsageHourlyOK  %+v", 200, o.Payload)
}

func (o *GetSensorUsageHourlyOK) String() string {
	return fmt.Sprintf("[GET /billing-dashboards-usage/aggregates/hourly-average/v1][%d] getSensorUsageHourlyOK  %+v", 200, o.Payload)
}

func (o *GetSensorUsageHourlyOK) GetPayload() *models.APIHourlyAverageResponse {
	return o.Payload
}

func (o *GetSensorUsageHourlyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIHourlyAverageResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSensorUsageHourlyBadRequest creates a GetSensorUsageHourlyBadRequest with default headers values
func NewGetSensorUsageHourlyBadRequest() *GetSensorUsageHourlyBadRequest {
	return &GetSensorUsageHourlyBadRequest{}
}

/*
GetSensorUsageHourlyBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetSensorUsageHourlyBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIHourlyAverageResponse
}

// IsSuccess returns true when this get sensor usage hourly bad request response has a 2xx status code
func (o *GetSensorUsageHourlyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get sensor usage hourly bad request response has a 3xx status code
func (o *GetSensorUsageHourlyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get sensor usage hourly bad request response has a 4xx status code
func (o *GetSensorUsageHourlyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get sensor usage hourly bad request response has a 5xx status code
func (o *GetSensorUsageHourlyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get sensor usage hourly bad request response a status code equal to that given
func (o *GetSensorUsageHourlyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get sensor usage hourly bad request response
func (o *GetSensorUsageHourlyBadRequest) Code() int {
	return 400
}

func (o *GetSensorUsageHourlyBadRequest) Error() string {
	return fmt.Sprintf("[GET /billing-dashboards-usage/aggregates/hourly-average/v1][%d] getSensorUsageHourlyBadRequest  %+v", 400, o.Payload)
}

func (o *GetSensorUsageHourlyBadRequest) String() string {
	return fmt.Sprintf("[GET /billing-dashboards-usage/aggregates/hourly-average/v1][%d] getSensorUsageHourlyBadRequest  %+v", 400, o.Payload)
}

func (o *GetSensorUsageHourlyBadRequest) GetPayload() *models.APIHourlyAverageResponse {
	return o.Payload
}

func (o *GetSensorUsageHourlyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIHourlyAverageResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSensorUsageHourlyForbidden creates a GetSensorUsageHourlyForbidden with default headers values
func NewGetSensorUsageHourlyForbidden() *GetSensorUsageHourlyForbidden {
	return &GetSensorUsageHourlyForbidden{}
}

/*
GetSensorUsageHourlyForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetSensorUsageHourlyForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIHourlyAverageResponse
}

// IsSuccess returns true when this get sensor usage hourly forbidden response has a 2xx status code
func (o *GetSensorUsageHourlyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get sensor usage hourly forbidden response has a 3xx status code
func (o *GetSensorUsageHourlyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get sensor usage hourly forbidden response has a 4xx status code
func (o *GetSensorUsageHourlyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get sensor usage hourly forbidden response has a 5xx status code
func (o *GetSensorUsageHourlyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get sensor usage hourly forbidden response a status code equal to that given
func (o *GetSensorUsageHourlyForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get sensor usage hourly forbidden response
func (o *GetSensorUsageHourlyForbidden) Code() int {
	return 403
}

func (o *GetSensorUsageHourlyForbidden) Error() string {
	return fmt.Sprintf("[GET /billing-dashboards-usage/aggregates/hourly-average/v1][%d] getSensorUsageHourlyForbidden  %+v", 403, o.Payload)
}

func (o *GetSensorUsageHourlyForbidden) String() string {
	return fmt.Sprintf("[GET /billing-dashboards-usage/aggregates/hourly-average/v1][%d] getSensorUsageHourlyForbidden  %+v", 403, o.Payload)
}

func (o *GetSensorUsageHourlyForbidden) GetPayload() *models.APIHourlyAverageResponse {
	return o.Payload
}

func (o *GetSensorUsageHourlyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIHourlyAverageResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSensorUsageHourlyTooManyRequests creates a GetSensorUsageHourlyTooManyRequests with default headers values
func NewGetSensorUsageHourlyTooManyRequests() *GetSensorUsageHourlyTooManyRequests {
	return &GetSensorUsageHourlyTooManyRequests{}
}

/*
GetSensorUsageHourlyTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetSensorUsageHourlyTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get sensor usage hourly too many requests response has a 2xx status code
func (o *GetSensorUsageHourlyTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get sensor usage hourly too many requests response has a 3xx status code
func (o *GetSensorUsageHourlyTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get sensor usage hourly too many requests response has a 4xx status code
func (o *GetSensorUsageHourlyTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get sensor usage hourly too many requests response has a 5xx status code
func (o *GetSensorUsageHourlyTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get sensor usage hourly too many requests response a status code equal to that given
func (o *GetSensorUsageHourlyTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get sensor usage hourly too many requests response
func (o *GetSensorUsageHourlyTooManyRequests) Code() int {
	return 429
}

func (o *GetSensorUsageHourlyTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /billing-dashboards-usage/aggregates/hourly-average/v1][%d] getSensorUsageHourlyTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSensorUsageHourlyTooManyRequests) String() string {
	return fmt.Sprintf("[GET /billing-dashboards-usage/aggregates/hourly-average/v1][%d] getSensorUsageHourlyTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSensorUsageHourlyTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetSensorUsageHourlyTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSensorUsageHourlyInternalServerError creates a GetSensorUsageHourlyInternalServerError with default headers values
func NewGetSensorUsageHourlyInternalServerError() *GetSensorUsageHourlyInternalServerError {
	return &GetSensorUsageHourlyInternalServerError{}
}

/*
GetSensorUsageHourlyInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetSensorUsageHourlyInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIHourlyAverageResponse
}

// IsSuccess returns true when this get sensor usage hourly internal server error response has a 2xx status code
func (o *GetSensorUsageHourlyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get sensor usage hourly internal server error response has a 3xx status code
func (o *GetSensorUsageHourlyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get sensor usage hourly internal server error response has a 4xx status code
func (o *GetSensorUsageHourlyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get sensor usage hourly internal server error response has a 5xx status code
func (o *GetSensorUsageHourlyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get sensor usage hourly internal server error response a status code equal to that given
func (o *GetSensorUsageHourlyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get sensor usage hourly internal server error response
func (o *GetSensorUsageHourlyInternalServerError) Code() int {
	return 500
}

func (o *GetSensorUsageHourlyInternalServerError) Error() string {
	return fmt.Sprintf("[GET /billing-dashboards-usage/aggregates/hourly-average/v1][%d] getSensorUsageHourlyInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSensorUsageHourlyInternalServerError) String() string {
	return fmt.Sprintf("[GET /billing-dashboards-usage/aggregates/hourly-average/v1][%d] getSensorUsageHourlyInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSensorUsageHourlyInternalServerError) GetPayload() *models.APIHourlyAverageResponse {
	return o.Payload
}

func (o *GetSensorUsageHourlyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIHourlyAverageResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
