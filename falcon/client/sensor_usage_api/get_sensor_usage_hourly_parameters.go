// Code generated by go-swagger; DO NOT EDIT.

package sensor_usage_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetSensorUsageHourlyParams creates a new GetSensorUsageHourlyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSensorUsageHourlyParams() *GetSensorUsageHourlyParams {
	return &GetSensorUsageHourlyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSensorUsageHourlyParamsWithTimeout creates a new GetSensorUsageHourlyParams object
// with the ability to set a timeout on a request.
func NewGetSensorUsageHourlyParamsWithTimeout(timeout time.Duration) *GetSensorUsageHourlyParams {
	return &GetSensorUsageHourlyParams{
		timeout: timeout,
	}
}

// NewGetSensorUsageHourlyParamsWithContext creates a new GetSensorUsageHourlyParams object
// with the ability to set a context for a request.
func NewGetSensorUsageHourlyParamsWithContext(ctx context.Context) *GetSensorUsageHourlyParams {
	return &GetSensorUsageHourlyParams{
		Context: ctx,
	}
}

// NewGetSensorUsageHourlyParamsWithHTTPClient creates a new GetSensorUsageHourlyParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSensorUsageHourlyParamsWithHTTPClient(client *http.Client) *GetSensorUsageHourlyParams {
	return &GetSensorUsageHourlyParams{
		HTTPClient: client,
	}
}

/*
GetSensorUsageHourlyParams contains all the parameters to send to the API endpoint

	for the get sensor usage hourly operation.

	Typically these are written to a http.Request.
*/
type GetSensorUsageHourlyParams struct {

	/* Filter.

	     The FQL search filter. Allowed fields:
	"event_date" : A specified date that will be final date of the results returned. Specified date cannot be after the default.
		Format: '2024-06-11'
		Default: the current date, minus 2 days, in UTC
	"period" : An integer surrounded by single quotes representing the number of days to return.
		Format: '30'
		Default: '28'
		Minimum: '1'
		Maximum: '395'
	"selected_cids" : A comma separated list of CIDs to return data for. Caller must be a parent CID or have special access enabled.
		Format: 'cid_1,cid_2,cid_3'
		Default: for parent CIDs the default is the parent and all children, otherwise the current CID
	*/
	Filter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get sensor usage hourly params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSensorUsageHourlyParams) WithDefaults() *GetSensorUsageHourlyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get sensor usage hourly params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSensorUsageHourlyParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get sensor usage hourly params
func (o *GetSensorUsageHourlyParams) WithTimeout(timeout time.Duration) *GetSensorUsageHourlyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get sensor usage hourly params
func (o *GetSensorUsageHourlyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get sensor usage hourly params
func (o *GetSensorUsageHourlyParams) WithContext(ctx context.Context) *GetSensorUsageHourlyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get sensor usage hourly params
func (o *GetSensorUsageHourlyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get sensor usage hourly params
func (o *GetSensorUsageHourlyParams) WithHTTPClient(client *http.Client) *GetSensorUsageHourlyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get sensor usage hourly params
func (o *GetSensorUsageHourlyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the get sensor usage hourly params
func (o *GetSensorUsageHourlyParams) WithFilter(filter *string) *GetSensorUsageHourlyParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get sensor usage hourly params
func (o *GetSensorUsageHourlyParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WriteToRequest writes these params to a swagger request
func (o *GetSensorUsageHourlyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
