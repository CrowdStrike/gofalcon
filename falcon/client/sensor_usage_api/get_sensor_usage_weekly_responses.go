// Code generated by go-swagger; DO NOT EDIT.

package sensor_usage_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetSensorUsageWeeklyReader is a Reader for the GetSensorUsageWeekly structure.
type GetSensorUsageWeeklyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSensorUsageWeeklyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSensorUsageWeeklyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSensorUsageWeeklyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSensorUsageWeeklyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSensorUsageWeeklyTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSensorUsageWeeklyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /billing-dashboards-usage/aggregates/weekly-average/v1] GetSensorUsageWeekly", response, response.Code())
	}
}

// NewGetSensorUsageWeeklyOK creates a GetSensorUsageWeeklyOK with default headers values
func NewGetSensorUsageWeeklyOK() *GetSensorUsageWeeklyOK {
	return &GetSensorUsageWeeklyOK{}
}

/*
GetSensorUsageWeeklyOK describes a response with status code 200, with default header values.

OK
*/
type GetSensorUsageWeeklyOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIWeeklyAverageResponse
}

// IsSuccess returns true when this get sensor usage weekly o k response has a 2xx status code
func (o *GetSensorUsageWeeklyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get sensor usage weekly o k response has a 3xx status code
func (o *GetSensorUsageWeeklyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get sensor usage weekly o k response has a 4xx status code
func (o *GetSensorUsageWeeklyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get sensor usage weekly o k response has a 5xx status code
func (o *GetSensorUsageWeeklyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get sensor usage weekly o k response a status code equal to that given
func (o *GetSensorUsageWeeklyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get sensor usage weekly o k response
func (o *GetSensorUsageWeeklyOK) Code() int {
	return 200
}

func (o *GetSensorUsageWeeklyOK) Error() string {
	return fmt.Sprintf("[GET /billing-dashboards-usage/aggregates/weekly-average/v1][%d] getSensorUsageWeeklyOK  %+v", 200, o.Payload)
}

func (o *GetSensorUsageWeeklyOK) String() string {
	return fmt.Sprintf("[GET /billing-dashboards-usage/aggregates/weekly-average/v1][%d] getSensorUsageWeeklyOK  %+v", 200, o.Payload)
}

func (o *GetSensorUsageWeeklyOK) GetPayload() *models.APIWeeklyAverageResponse {
	return o.Payload
}

func (o *GetSensorUsageWeeklyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIWeeklyAverageResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSensorUsageWeeklyBadRequest creates a GetSensorUsageWeeklyBadRequest with default headers values
func NewGetSensorUsageWeeklyBadRequest() *GetSensorUsageWeeklyBadRequest {
	return &GetSensorUsageWeeklyBadRequest{}
}

/*
GetSensorUsageWeeklyBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetSensorUsageWeeklyBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIHourlyAverageResponse
}

// IsSuccess returns true when this get sensor usage weekly bad request response has a 2xx status code
func (o *GetSensorUsageWeeklyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get sensor usage weekly bad request response has a 3xx status code
func (o *GetSensorUsageWeeklyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get sensor usage weekly bad request response has a 4xx status code
func (o *GetSensorUsageWeeklyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get sensor usage weekly bad request response has a 5xx status code
func (o *GetSensorUsageWeeklyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get sensor usage weekly bad request response a status code equal to that given
func (o *GetSensorUsageWeeklyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get sensor usage weekly bad request response
func (o *GetSensorUsageWeeklyBadRequest) Code() int {
	return 400
}

func (o *GetSensorUsageWeeklyBadRequest) Error() string {
	return fmt.Sprintf("[GET /billing-dashboards-usage/aggregates/weekly-average/v1][%d] getSensorUsageWeeklyBadRequest  %+v", 400, o.Payload)
}

func (o *GetSensorUsageWeeklyBadRequest) String() string {
	return fmt.Sprintf("[GET /billing-dashboards-usage/aggregates/weekly-average/v1][%d] getSensorUsageWeeklyBadRequest  %+v", 400, o.Payload)
}

func (o *GetSensorUsageWeeklyBadRequest) GetPayload() *models.APIHourlyAverageResponse {
	return o.Payload
}

func (o *GetSensorUsageWeeklyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIHourlyAverageResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSensorUsageWeeklyForbidden creates a GetSensorUsageWeeklyForbidden with default headers values
func NewGetSensorUsageWeeklyForbidden() *GetSensorUsageWeeklyForbidden {
	return &GetSensorUsageWeeklyForbidden{}
}

/*
GetSensorUsageWeeklyForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetSensorUsageWeeklyForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIHourlyAverageResponse
}

// IsSuccess returns true when this get sensor usage weekly forbidden response has a 2xx status code
func (o *GetSensorUsageWeeklyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get sensor usage weekly forbidden response has a 3xx status code
func (o *GetSensorUsageWeeklyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get sensor usage weekly forbidden response has a 4xx status code
func (o *GetSensorUsageWeeklyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get sensor usage weekly forbidden response has a 5xx status code
func (o *GetSensorUsageWeeklyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get sensor usage weekly forbidden response a status code equal to that given
func (o *GetSensorUsageWeeklyForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get sensor usage weekly forbidden response
func (o *GetSensorUsageWeeklyForbidden) Code() int {
	return 403
}

func (o *GetSensorUsageWeeklyForbidden) Error() string {
	return fmt.Sprintf("[GET /billing-dashboards-usage/aggregates/weekly-average/v1][%d] getSensorUsageWeeklyForbidden  %+v", 403, o.Payload)
}

func (o *GetSensorUsageWeeklyForbidden) String() string {
	return fmt.Sprintf("[GET /billing-dashboards-usage/aggregates/weekly-average/v1][%d] getSensorUsageWeeklyForbidden  %+v", 403, o.Payload)
}

func (o *GetSensorUsageWeeklyForbidden) GetPayload() *models.APIHourlyAverageResponse {
	return o.Payload
}

func (o *GetSensorUsageWeeklyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIHourlyAverageResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSensorUsageWeeklyTooManyRequests creates a GetSensorUsageWeeklyTooManyRequests with default headers values
func NewGetSensorUsageWeeklyTooManyRequests() *GetSensorUsageWeeklyTooManyRequests {
	return &GetSensorUsageWeeklyTooManyRequests{}
}

/*
GetSensorUsageWeeklyTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetSensorUsageWeeklyTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get sensor usage weekly too many requests response has a 2xx status code
func (o *GetSensorUsageWeeklyTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get sensor usage weekly too many requests response has a 3xx status code
func (o *GetSensorUsageWeeklyTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get sensor usage weekly too many requests response has a 4xx status code
func (o *GetSensorUsageWeeklyTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get sensor usage weekly too many requests response has a 5xx status code
func (o *GetSensorUsageWeeklyTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get sensor usage weekly too many requests response a status code equal to that given
func (o *GetSensorUsageWeeklyTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get sensor usage weekly too many requests response
func (o *GetSensorUsageWeeklyTooManyRequests) Code() int {
	return 429
}

func (o *GetSensorUsageWeeklyTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /billing-dashboards-usage/aggregates/weekly-average/v1][%d] getSensorUsageWeeklyTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSensorUsageWeeklyTooManyRequests) String() string {
	return fmt.Sprintf("[GET /billing-dashboards-usage/aggregates/weekly-average/v1][%d] getSensorUsageWeeklyTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSensorUsageWeeklyTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetSensorUsageWeeklyTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSensorUsageWeeklyInternalServerError creates a GetSensorUsageWeeklyInternalServerError with default headers values
func NewGetSensorUsageWeeklyInternalServerError() *GetSensorUsageWeeklyInternalServerError {
	return &GetSensorUsageWeeklyInternalServerError{}
}

/*
GetSensorUsageWeeklyInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetSensorUsageWeeklyInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIHourlyAverageResponse
}

// IsSuccess returns true when this get sensor usage weekly internal server error response has a 2xx status code
func (o *GetSensorUsageWeeklyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get sensor usage weekly internal server error response has a 3xx status code
func (o *GetSensorUsageWeeklyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get sensor usage weekly internal server error response has a 4xx status code
func (o *GetSensorUsageWeeklyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get sensor usage weekly internal server error response has a 5xx status code
func (o *GetSensorUsageWeeklyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get sensor usage weekly internal server error response a status code equal to that given
func (o *GetSensorUsageWeeklyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get sensor usage weekly internal server error response
func (o *GetSensorUsageWeeklyInternalServerError) Code() int {
	return 500
}

func (o *GetSensorUsageWeeklyInternalServerError) Error() string {
	return fmt.Sprintf("[GET /billing-dashboards-usage/aggregates/weekly-average/v1][%d] getSensorUsageWeeklyInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSensorUsageWeeklyInternalServerError) String() string {
	return fmt.Sprintf("[GET /billing-dashboards-usage/aggregates/weekly-average/v1][%d] getSensorUsageWeeklyInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSensorUsageWeeklyInternalServerError) GetPayload() *models.APIHourlyAverageResponse {
	return o.Payload
}

func (o *GetSensorUsageWeeklyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIHourlyAverageResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
