// Code generated by go-swagger; DO NOT EDIT.

package cloud_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CreateRuleOverrideReader is a Reader for the CreateRuleOverride structure.
type CreateRuleOverrideReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateRuleOverrideReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateRuleOverrideOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateRuleOverrideBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateRuleOverrideForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateRuleOverrideTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateRuleOverrideInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cloud-policies/entities/rule-overrides/v1] CreateRuleOverride", response, response.Code())
	}
}

// NewCreateRuleOverrideOK creates a CreateRuleOverrideOK with default headers values
func NewCreateRuleOverrideOK() *CreateRuleOverrideOK {
	return &CreateRuleOverrideOK{}
}

/*
CreateRuleOverrideOK describes a response with status code 200, with default header values.

OK
*/
type CreateRuleOverrideOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonCreateRuleOverrideResponse
}

// IsSuccess returns true when this create rule override o k response has a 2xx status code
func (o *CreateRuleOverrideOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create rule override o k response has a 3xx status code
func (o *CreateRuleOverrideOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create rule override o k response has a 4xx status code
func (o *CreateRuleOverrideOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create rule override o k response has a 5xx status code
func (o *CreateRuleOverrideOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create rule override o k response a status code equal to that given
func (o *CreateRuleOverrideOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create rule override o k response
func (o *CreateRuleOverrideOK) Code() int {
	return 200
}

func (o *CreateRuleOverrideOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cloud-policies/entities/rule-overrides/v1][%d] createRuleOverrideOK %s", 200, payload)
}

func (o *CreateRuleOverrideOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cloud-policies/entities/rule-overrides/v1][%d] createRuleOverrideOK %s", 200, payload)
}

func (o *CreateRuleOverrideOK) GetPayload() *models.CommonCreateRuleOverrideResponse {
	return o.Payload
}

func (o *CreateRuleOverrideOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonCreateRuleOverrideResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRuleOverrideBadRequest creates a CreateRuleOverrideBadRequest with default headers values
func NewCreateRuleOverrideBadRequest() *CreateRuleOverrideBadRequest {
	return &CreateRuleOverrideBadRequest{}
}

/*
CreateRuleOverrideBadRequest describes a response with status code 400, with default header values.

Internal Server Error
*/
type CreateRuleOverrideBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this create rule override bad request response has a 2xx status code
func (o *CreateRuleOverrideBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create rule override bad request response has a 3xx status code
func (o *CreateRuleOverrideBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create rule override bad request response has a 4xx status code
func (o *CreateRuleOverrideBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create rule override bad request response has a 5xx status code
func (o *CreateRuleOverrideBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create rule override bad request response a status code equal to that given
func (o *CreateRuleOverrideBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create rule override bad request response
func (o *CreateRuleOverrideBadRequest) Code() int {
	return 400
}

func (o *CreateRuleOverrideBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cloud-policies/entities/rule-overrides/v1][%d] createRuleOverrideBadRequest %s", 400, payload)
}

func (o *CreateRuleOverrideBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cloud-policies/entities/rule-overrides/v1][%d] createRuleOverrideBadRequest %s", 400, payload)
}

func (o *CreateRuleOverrideBadRequest) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *CreateRuleOverrideBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRuleOverrideForbidden creates a CreateRuleOverrideForbidden with default headers values
func NewCreateRuleOverrideForbidden() *CreateRuleOverrideForbidden {
	return &CreateRuleOverrideForbidden{}
}

/*
CreateRuleOverrideForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateRuleOverrideForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this create rule override forbidden response has a 2xx status code
func (o *CreateRuleOverrideForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create rule override forbidden response has a 3xx status code
func (o *CreateRuleOverrideForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create rule override forbidden response has a 4xx status code
func (o *CreateRuleOverrideForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create rule override forbidden response has a 5xx status code
func (o *CreateRuleOverrideForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create rule override forbidden response a status code equal to that given
func (o *CreateRuleOverrideForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create rule override forbidden response
func (o *CreateRuleOverrideForbidden) Code() int {
	return 403
}

func (o *CreateRuleOverrideForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cloud-policies/entities/rule-overrides/v1][%d] createRuleOverrideForbidden %s", 403, payload)
}

func (o *CreateRuleOverrideForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cloud-policies/entities/rule-overrides/v1][%d] createRuleOverrideForbidden %s", 403, payload)
}

func (o *CreateRuleOverrideForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateRuleOverrideForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRuleOverrideTooManyRequests creates a CreateRuleOverrideTooManyRequests with default headers values
func NewCreateRuleOverrideTooManyRequests() *CreateRuleOverrideTooManyRequests {
	return &CreateRuleOverrideTooManyRequests{}
}

/*
CreateRuleOverrideTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CreateRuleOverrideTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this create rule override too many requests response has a 2xx status code
func (o *CreateRuleOverrideTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create rule override too many requests response has a 3xx status code
func (o *CreateRuleOverrideTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create rule override too many requests response has a 4xx status code
func (o *CreateRuleOverrideTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create rule override too many requests response has a 5xx status code
func (o *CreateRuleOverrideTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create rule override too many requests response a status code equal to that given
func (o *CreateRuleOverrideTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create rule override too many requests response
func (o *CreateRuleOverrideTooManyRequests) Code() int {
	return 429
}

func (o *CreateRuleOverrideTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cloud-policies/entities/rule-overrides/v1][%d] createRuleOverrideTooManyRequests %s", 429, payload)
}

func (o *CreateRuleOverrideTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cloud-policies/entities/rule-overrides/v1][%d] createRuleOverrideTooManyRequests %s", 429, payload)
}

func (o *CreateRuleOverrideTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateRuleOverrideTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRuleOverrideInternalServerError creates a CreateRuleOverrideInternalServerError with default headers values
func NewCreateRuleOverrideInternalServerError() *CreateRuleOverrideInternalServerError {
	return &CreateRuleOverrideInternalServerError{}
}

/*
CreateRuleOverrideInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateRuleOverrideInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this create rule override internal server error response has a 2xx status code
func (o *CreateRuleOverrideInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create rule override internal server error response has a 3xx status code
func (o *CreateRuleOverrideInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create rule override internal server error response has a 4xx status code
func (o *CreateRuleOverrideInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create rule override internal server error response has a 5xx status code
func (o *CreateRuleOverrideInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create rule override internal server error response a status code equal to that given
func (o *CreateRuleOverrideInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create rule override internal server error response
func (o *CreateRuleOverrideInternalServerError) Code() int {
	return 500
}

func (o *CreateRuleOverrideInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cloud-policies/entities/rule-overrides/v1][%d] createRuleOverrideInternalServerError %s", 500, payload)
}

func (o *CreateRuleOverrideInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /cloud-policies/entities/rule-overrides/v1][%d] createRuleOverrideInternalServerError %s", 500, payload)
}

func (o *CreateRuleOverrideInternalServerError) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *CreateRuleOverrideInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
