// Code generated by go-swagger; DO NOT EDIT.

package cloud_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CreateRuleOverrideReader is a Reader for the CreateRuleOverride structure.
type CreateRuleOverrideReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateRuleOverrideReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateRuleOverrideOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateRuleOverrideBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateRuleOverrideInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cloud-policies/entities/rule-overrides/v1] CreateRuleOverride", response, response.Code())
	}
}

// NewCreateRuleOverrideOK creates a CreateRuleOverrideOK with default headers values
func NewCreateRuleOverrideOK() *CreateRuleOverrideOK {
	return &CreateRuleOverrideOK{}
}

/*
CreateRuleOverrideOK describes a response with status code 200, with default header values.

OK
*/
type CreateRuleOverrideOK struct {
	Payload *models.CommonCreateRuleOverrideResponse
}

// IsSuccess returns true when this create rule override o k response has a 2xx status code
func (o *CreateRuleOverrideOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create rule override o k response has a 3xx status code
func (o *CreateRuleOverrideOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create rule override o k response has a 4xx status code
func (o *CreateRuleOverrideOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create rule override o k response has a 5xx status code
func (o *CreateRuleOverrideOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create rule override o k response a status code equal to that given
func (o *CreateRuleOverrideOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create rule override o k response
func (o *CreateRuleOverrideOK) Code() int {
	return 200
}

func (o *CreateRuleOverrideOK) Error() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/rule-overrides/v1][%d] createRuleOverrideOK  %+v", 200, o.Payload)
}

func (o *CreateRuleOverrideOK) String() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/rule-overrides/v1][%d] createRuleOverrideOK  %+v", 200, o.Payload)
}

func (o *CreateRuleOverrideOK) GetPayload() *models.CommonCreateRuleOverrideResponse {
	return o.Payload
}

func (o *CreateRuleOverrideOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonCreateRuleOverrideResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRuleOverrideBadRequest creates a CreateRuleOverrideBadRequest with default headers values
func NewCreateRuleOverrideBadRequest() *CreateRuleOverrideBadRequest {
	return &CreateRuleOverrideBadRequest{}
}

/*
CreateRuleOverrideBadRequest describes a response with status code 400, with default header values.

Internal Server Error
*/
type CreateRuleOverrideBadRequest struct {
	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this create rule override bad request response has a 2xx status code
func (o *CreateRuleOverrideBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create rule override bad request response has a 3xx status code
func (o *CreateRuleOverrideBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create rule override bad request response has a 4xx status code
func (o *CreateRuleOverrideBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create rule override bad request response has a 5xx status code
func (o *CreateRuleOverrideBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create rule override bad request response a status code equal to that given
func (o *CreateRuleOverrideBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create rule override bad request response
func (o *CreateRuleOverrideBadRequest) Code() int {
	return 400
}

func (o *CreateRuleOverrideBadRequest) Error() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/rule-overrides/v1][%d] createRuleOverrideBadRequest  %+v", 400, o.Payload)
}

func (o *CreateRuleOverrideBadRequest) String() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/rule-overrides/v1][%d] createRuleOverrideBadRequest  %+v", 400, o.Payload)
}

func (o *CreateRuleOverrideBadRequest) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *CreateRuleOverrideBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRuleOverrideInternalServerError creates a CreateRuleOverrideInternalServerError with default headers values
func NewCreateRuleOverrideInternalServerError() *CreateRuleOverrideInternalServerError {
	return &CreateRuleOverrideInternalServerError{}
}

/*
CreateRuleOverrideInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateRuleOverrideInternalServerError struct {
	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this create rule override internal server error response has a 2xx status code
func (o *CreateRuleOverrideInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create rule override internal server error response has a 3xx status code
func (o *CreateRuleOverrideInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create rule override internal server error response has a 4xx status code
func (o *CreateRuleOverrideInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create rule override internal server error response has a 5xx status code
func (o *CreateRuleOverrideInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create rule override internal server error response a status code equal to that given
func (o *CreateRuleOverrideInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create rule override internal server error response
func (o *CreateRuleOverrideInternalServerError) Code() int {
	return 500
}

func (o *CreateRuleOverrideInternalServerError) Error() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/rule-overrides/v1][%d] createRuleOverrideInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateRuleOverrideInternalServerError) String() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/rule-overrides/v1][%d] createRuleOverrideInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateRuleOverrideInternalServerError) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *CreateRuleOverrideInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
