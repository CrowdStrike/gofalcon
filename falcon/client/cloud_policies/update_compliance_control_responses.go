// Code generated by go-swagger; DO NOT EDIT.

package cloud_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// UpdateComplianceControlReader is a Reader for the UpdateComplianceControl structure.
type UpdateComplianceControlReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateComplianceControlReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateComplianceControlOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateComplianceControlBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateComplianceControlForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateComplianceControlTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateComplianceControlInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /cloud-policies/entities/compliance/controls/v1] UpdateComplianceControl", response, response.Code())
	}
}

// NewUpdateComplianceControlOK creates a UpdateComplianceControlOK with default headers values
func NewUpdateComplianceControlOK() *UpdateComplianceControlOK {
	return &UpdateComplianceControlOK{}
}

/*
UpdateComplianceControlOK describes a response with status code 200, with default header values.

OK
*/
type UpdateComplianceControlOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonCreateComplianceControlResponse
}

// IsSuccess returns true when this update compliance control o k response has a 2xx status code
func (o *UpdateComplianceControlOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update compliance control o k response has a 3xx status code
func (o *UpdateComplianceControlOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update compliance control o k response has a 4xx status code
func (o *UpdateComplianceControlOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update compliance control o k response has a 5xx status code
func (o *UpdateComplianceControlOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update compliance control o k response a status code equal to that given
func (o *UpdateComplianceControlOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update compliance control o k response
func (o *UpdateComplianceControlOK) Code() int {
	return 200
}

func (o *UpdateComplianceControlOK) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/controls/v1][%d] updateComplianceControlOK  %+v", 200, o.Payload)
}

func (o *UpdateComplianceControlOK) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/controls/v1][%d] updateComplianceControlOK  %+v", 200, o.Payload)
}

func (o *UpdateComplianceControlOK) GetPayload() *models.CommonCreateComplianceControlResponse {
	return o.Payload
}

func (o *UpdateComplianceControlOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonCreateComplianceControlResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateComplianceControlBadRequest creates a UpdateComplianceControlBadRequest with default headers values
func NewUpdateComplianceControlBadRequest() *UpdateComplianceControlBadRequest {
	return &UpdateComplianceControlBadRequest{}
}

/*
UpdateComplianceControlBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateComplianceControlBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this update compliance control bad request response has a 2xx status code
func (o *UpdateComplianceControlBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update compliance control bad request response has a 3xx status code
func (o *UpdateComplianceControlBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update compliance control bad request response has a 4xx status code
func (o *UpdateComplianceControlBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update compliance control bad request response has a 5xx status code
func (o *UpdateComplianceControlBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update compliance control bad request response a status code equal to that given
func (o *UpdateComplianceControlBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update compliance control bad request response
func (o *UpdateComplianceControlBadRequest) Code() int {
	return 400
}

func (o *UpdateComplianceControlBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/controls/v1][%d] updateComplianceControlBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateComplianceControlBadRequest) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/controls/v1][%d] updateComplianceControlBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateComplianceControlBadRequest) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *UpdateComplianceControlBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateComplianceControlForbidden creates a UpdateComplianceControlForbidden with default headers values
func NewUpdateComplianceControlForbidden() *UpdateComplianceControlForbidden {
	return &UpdateComplianceControlForbidden{}
}

/*
UpdateComplianceControlForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateComplianceControlForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this update compliance control forbidden response has a 2xx status code
func (o *UpdateComplianceControlForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update compliance control forbidden response has a 3xx status code
func (o *UpdateComplianceControlForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update compliance control forbidden response has a 4xx status code
func (o *UpdateComplianceControlForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update compliance control forbidden response has a 5xx status code
func (o *UpdateComplianceControlForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update compliance control forbidden response a status code equal to that given
func (o *UpdateComplianceControlForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update compliance control forbidden response
func (o *UpdateComplianceControlForbidden) Code() int {
	return 403
}

func (o *UpdateComplianceControlForbidden) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/controls/v1][%d] updateComplianceControlForbidden  %+v", 403, o.Payload)
}

func (o *UpdateComplianceControlForbidden) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/controls/v1][%d] updateComplianceControlForbidden  %+v", 403, o.Payload)
}

func (o *UpdateComplianceControlForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpdateComplianceControlForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateComplianceControlTooManyRequests creates a UpdateComplianceControlTooManyRequests with default headers values
func NewUpdateComplianceControlTooManyRequests() *UpdateComplianceControlTooManyRequests {
	return &UpdateComplianceControlTooManyRequests{}
}

/*
UpdateComplianceControlTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type UpdateComplianceControlTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this update compliance control too many requests response has a 2xx status code
func (o *UpdateComplianceControlTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update compliance control too many requests response has a 3xx status code
func (o *UpdateComplianceControlTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update compliance control too many requests response has a 4xx status code
func (o *UpdateComplianceControlTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update compliance control too many requests response has a 5xx status code
func (o *UpdateComplianceControlTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update compliance control too many requests response a status code equal to that given
func (o *UpdateComplianceControlTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update compliance control too many requests response
func (o *UpdateComplianceControlTooManyRequests) Code() int {
	return 429
}

func (o *UpdateComplianceControlTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/controls/v1][%d] updateComplianceControlTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateComplianceControlTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/controls/v1][%d] updateComplianceControlTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateComplianceControlTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpdateComplianceControlTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateComplianceControlInternalServerError creates a UpdateComplianceControlInternalServerError with default headers values
func NewUpdateComplianceControlInternalServerError() *UpdateComplianceControlInternalServerError {
	return &UpdateComplianceControlInternalServerError{}
}

/*
UpdateComplianceControlInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type UpdateComplianceControlInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this update compliance control internal server error response has a 2xx status code
func (o *UpdateComplianceControlInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update compliance control internal server error response has a 3xx status code
func (o *UpdateComplianceControlInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update compliance control internal server error response has a 4xx status code
func (o *UpdateComplianceControlInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update compliance control internal server error response has a 5xx status code
func (o *UpdateComplianceControlInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update compliance control internal server error response a status code equal to that given
func (o *UpdateComplianceControlInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update compliance control internal server error response
func (o *UpdateComplianceControlInternalServerError) Code() int {
	return 500
}

func (o *UpdateComplianceControlInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/controls/v1][%d] updateComplianceControlInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateComplianceControlInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/controls/v1][%d] updateComplianceControlInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateComplianceControlInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpdateComplianceControlInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
