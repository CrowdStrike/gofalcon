// Code generated by go-swagger; DO NOT EDIT.

package cloud_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// DeleteRuleOverrideReader is a Reader for the DeleteRuleOverride structure.
type DeleteRuleOverrideReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRuleOverrideReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteRuleOverrideOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteRuleOverrideNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteRuleOverrideBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteRuleOverrideForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteRuleOverrideNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteRuleOverrideTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteRuleOverrideInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cloud-policies/entities/rule-overrides/v1] DeleteRuleOverride", response, response.Code())
	}
}

// NewDeleteRuleOverrideOK creates a DeleteRuleOverrideOK with default headers values
func NewDeleteRuleOverrideOK() *DeleteRuleOverrideOK {
	return &DeleteRuleOverrideOK{}
}

/*
DeleteRuleOverrideOK describes a response with status code 200, with default header values.

OK
*/
type DeleteRuleOverrideOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonDeleteRuleOverrideResponse
}

// IsSuccess returns true when this delete rule override o k response has a 2xx status code
func (o *DeleteRuleOverrideOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete rule override o k response has a 3xx status code
func (o *DeleteRuleOverrideOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete rule override o k response has a 4xx status code
func (o *DeleteRuleOverrideOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete rule override o k response has a 5xx status code
func (o *DeleteRuleOverrideOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete rule override o k response a status code equal to that given
func (o *DeleteRuleOverrideOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete rule override o k response
func (o *DeleteRuleOverrideOK) Code() int {
	return 200
}

func (o *DeleteRuleOverrideOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cloud-policies/entities/rule-overrides/v1][%d] deleteRuleOverrideOK %s", 200, payload)
}

func (o *DeleteRuleOverrideOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cloud-policies/entities/rule-overrides/v1][%d] deleteRuleOverrideOK %s", 200, payload)
}

func (o *DeleteRuleOverrideOK) GetPayload() *models.CommonDeleteRuleOverrideResponse {
	return o.Payload
}

func (o *DeleteRuleOverrideOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonDeleteRuleOverrideResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRuleOverrideNoContent creates a DeleteRuleOverrideNoContent with default headers values
func NewDeleteRuleOverrideNoContent() *DeleteRuleOverrideNoContent {
	return &DeleteRuleOverrideNoContent{}
}

/*
DeleteRuleOverrideNoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteRuleOverrideNoContent struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this delete rule override no content response has a 2xx status code
func (o *DeleteRuleOverrideNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete rule override no content response has a 3xx status code
func (o *DeleteRuleOverrideNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete rule override no content response has a 4xx status code
func (o *DeleteRuleOverrideNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete rule override no content response has a 5xx status code
func (o *DeleteRuleOverrideNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete rule override no content response a status code equal to that given
func (o *DeleteRuleOverrideNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete rule override no content response
func (o *DeleteRuleOverrideNoContent) Code() int {
	return 204
}

func (o *DeleteRuleOverrideNoContent) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cloud-policies/entities/rule-overrides/v1][%d] deleteRuleOverrideNoContent %s", 204, payload)
}

func (o *DeleteRuleOverrideNoContent) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cloud-policies/entities/rule-overrides/v1][%d] deleteRuleOverrideNoContent %s", 204, payload)
}

func (o *DeleteRuleOverrideNoContent) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *DeleteRuleOverrideNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRuleOverrideBadRequest creates a DeleteRuleOverrideBadRequest with default headers values
func NewDeleteRuleOverrideBadRequest() *DeleteRuleOverrideBadRequest {
	return &DeleteRuleOverrideBadRequest{}
}

/*
DeleteRuleOverrideBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteRuleOverrideBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this delete rule override bad request response has a 2xx status code
func (o *DeleteRuleOverrideBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete rule override bad request response has a 3xx status code
func (o *DeleteRuleOverrideBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete rule override bad request response has a 4xx status code
func (o *DeleteRuleOverrideBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete rule override bad request response has a 5xx status code
func (o *DeleteRuleOverrideBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete rule override bad request response a status code equal to that given
func (o *DeleteRuleOverrideBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete rule override bad request response
func (o *DeleteRuleOverrideBadRequest) Code() int {
	return 400
}

func (o *DeleteRuleOverrideBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cloud-policies/entities/rule-overrides/v1][%d] deleteRuleOverrideBadRequest %s", 400, payload)
}

func (o *DeleteRuleOverrideBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cloud-policies/entities/rule-overrides/v1][%d] deleteRuleOverrideBadRequest %s", 400, payload)
}

func (o *DeleteRuleOverrideBadRequest) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *DeleteRuleOverrideBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRuleOverrideForbidden creates a DeleteRuleOverrideForbidden with default headers values
func NewDeleteRuleOverrideForbidden() *DeleteRuleOverrideForbidden {
	return &DeleteRuleOverrideForbidden{}
}

/*
DeleteRuleOverrideForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteRuleOverrideForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete rule override forbidden response has a 2xx status code
func (o *DeleteRuleOverrideForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete rule override forbidden response has a 3xx status code
func (o *DeleteRuleOverrideForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete rule override forbidden response has a 4xx status code
func (o *DeleteRuleOverrideForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete rule override forbidden response has a 5xx status code
func (o *DeleteRuleOverrideForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete rule override forbidden response a status code equal to that given
func (o *DeleteRuleOverrideForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete rule override forbidden response
func (o *DeleteRuleOverrideForbidden) Code() int {
	return 403
}

func (o *DeleteRuleOverrideForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cloud-policies/entities/rule-overrides/v1][%d] deleteRuleOverrideForbidden %s", 403, payload)
}

func (o *DeleteRuleOverrideForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cloud-policies/entities/rule-overrides/v1][%d] deleteRuleOverrideForbidden %s", 403, payload)
}

func (o *DeleteRuleOverrideForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeleteRuleOverrideForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRuleOverrideNotFound creates a DeleteRuleOverrideNotFound with default headers values
func NewDeleteRuleOverrideNotFound() *DeleteRuleOverrideNotFound {
	return &DeleteRuleOverrideNotFound{}
}

/*
DeleteRuleOverrideNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteRuleOverrideNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonDeleteRuleOverrideResponse
}

// IsSuccess returns true when this delete rule override not found response has a 2xx status code
func (o *DeleteRuleOverrideNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete rule override not found response has a 3xx status code
func (o *DeleteRuleOverrideNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete rule override not found response has a 4xx status code
func (o *DeleteRuleOverrideNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete rule override not found response has a 5xx status code
func (o *DeleteRuleOverrideNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete rule override not found response a status code equal to that given
func (o *DeleteRuleOverrideNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete rule override not found response
func (o *DeleteRuleOverrideNotFound) Code() int {
	return 404
}

func (o *DeleteRuleOverrideNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cloud-policies/entities/rule-overrides/v1][%d] deleteRuleOverrideNotFound %s", 404, payload)
}

func (o *DeleteRuleOverrideNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cloud-policies/entities/rule-overrides/v1][%d] deleteRuleOverrideNotFound %s", 404, payload)
}

func (o *DeleteRuleOverrideNotFound) GetPayload() *models.CommonDeleteRuleOverrideResponse {
	return o.Payload
}

func (o *DeleteRuleOverrideNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonDeleteRuleOverrideResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRuleOverrideTooManyRequests creates a DeleteRuleOverrideTooManyRequests with default headers values
func NewDeleteRuleOverrideTooManyRequests() *DeleteRuleOverrideTooManyRequests {
	return &DeleteRuleOverrideTooManyRequests{}
}

/*
DeleteRuleOverrideTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type DeleteRuleOverrideTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete rule override too many requests response has a 2xx status code
func (o *DeleteRuleOverrideTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete rule override too many requests response has a 3xx status code
func (o *DeleteRuleOverrideTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete rule override too many requests response has a 4xx status code
func (o *DeleteRuleOverrideTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete rule override too many requests response has a 5xx status code
func (o *DeleteRuleOverrideTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete rule override too many requests response a status code equal to that given
func (o *DeleteRuleOverrideTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete rule override too many requests response
func (o *DeleteRuleOverrideTooManyRequests) Code() int {
	return 429
}

func (o *DeleteRuleOverrideTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cloud-policies/entities/rule-overrides/v1][%d] deleteRuleOverrideTooManyRequests %s", 429, payload)
}

func (o *DeleteRuleOverrideTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cloud-policies/entities/rule-overrides/v1][%d] deleteRuleOverrideTooManyRequests %s", 429, payload)
}

func (o *DeleteRuleOverrideTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeleteRuleOverrideTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRuleOverrideInternalServerError creates a DeleteRuleOverrideInternalServerError with default headers values
func NewDeleteRuleOverrideInternalServerError() *DeleteRuleOverrideInternalServerError {
	return &DeleteRuleOverrideInternalServerError{}
}

/*
DeleteRuleOverrideInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteRuleOverrideInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this delete rule override internal server error response has a 2xx status code
func (o *DeleteRuleOverrideInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete rule override internal server error response has a 3xx status code
func (o *DeleteRuleOverrideInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete rule override internal server error response has a 4xx status code
func (o *DeleteRuleOverrideInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete rule override internal server error response has a 5xx status code
func (o *DeleteRuleOverrideInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete rule override internal server error response a status code equal to that given
func (o *DeleteRuleOverrideInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete rule override internal server error response
func (o *DeleteRuleOverrideInternalServerError) Code() int {
	return 500
}

func (o *DeleteRuleOverrideInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cloud-policies/entities/rule-overrides/v1][%d] deleteRuleOverrideInternalServerError %s", 500, payload)
}

func (o *DeleteRuleOverrideInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /cloud-policies/entities/rule-overrides/v1][%d] deleteRuleOverrideInternalServerError %s", 500, payload)
}

func (o *DeleteRuleOverrideInternalServerError) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *DeleteRuleOverrideInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
