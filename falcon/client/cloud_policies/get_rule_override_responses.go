// Code generated by go-swagger; DO NOT EDIT.

package cloud_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetRuleOverrideReader is a Reader for the GetRuleOverride structure.
type GetRuleOverrideReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRuleOverrideReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRuleOverrideOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetRuleOverrideForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRuleOverrideNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRuleOverrideTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRuleOverrideInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cloud-policies/entities/rule-overrides/v1] GetRuleOverride", response, response.Code())
	}
}

// NewGetRuleOverrideOK creates a GetRuleOverrideOK with default headers values
func NewGetRuleOverrideOK() *GetRuleOverrideOK {
	return &GetRuleOverrideOK{}
}

/*
GetRuleOverrideOK describes a response with status code 200, with default header values.

OK
*/
type GetRuleOverrideOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonGetRuleOverrideResponse
}

// IsSuccess returns true when this get rule override o k response has a 2xx status code
func (o *GetRuleOverrideOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get rule override o k response has a 3xx status code
func (o *GetRuleOverrideOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rule override o k response has a 4xx status code
func (o *GetRuleOverrideOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get rule override o k response has a 5xx status code
func (o *GetRuleOverrideOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get rule override o k response a status code equal to that given
func (o *GetRuleOverrideOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get rule override o k response
func (o *GetRuleOverrideOK) Code() int {
	return 200
}

func (o *GetRuleOverrideOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-policies/entities/rule-overrides/v1][%d] getRuleOverrideOK %s", 200, payload)
}

func (o *GetRuleOverrideOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-policies/entities/rule-overrides/v1][%d] getRuleOverrideOK %s", 200, payload)
}

func (o *GetRuleOverrideOK) GetPayload() *models.CommonGetRuleOverrideResponse {
	return o.Payload
}

func (o *GetRuleOverrideOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonGetRuleOverrideResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRuleOverrideForbidden creates a GetRuleOverrideForbidden with default headers values
func NewGetRuleOverrideForbidden() *GetRuleOverrideForbidden {
	return &GetRuleOverrideForbidden{}
}

/*
GetRuleOverrideForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetRuleOverrideForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get rule override forbidden response has a 2xx status code
func (o *GetRuleOverrideForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rule override forbidden response has a 3xx status code
func (o *GetRuleOverrideForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rule override forbidden response has a 4xx status code
func (o *GetRuleOverrideForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rule override forbidden response has a 5xx status code
func (o *GetRuleOverrideForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get rule override forbidden response a status code equal to that given
func (o *GetRuleOverrideForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get rule override forbidden response
func (o *GetRuleOverrideForbidden) Code() int {
	return 403
}

func (o *GetRuleOverrideForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-policies/entities/rule-overrides/v1][%d] getRuleOverrideForbidden %s", 403, payload)
}

func (o *GetRuleOverrideForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-policies/entities/rule-overrides/v1][%d] getRuleOverrideForbidden %s", 403, payload)
}

func (o *GetRuleOverrideForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetRuleOverrideForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRuleOverrideNotFound creates a GetRuleOverrideNotFound with default headers values
func NewGetRuleOverrideNotFound() *GetRuleOverrideNotFound {
	return &GetRuleOverrideNotFound{}
}

/*
GetRuleOverrideNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetRuleOverrideNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this get rule override not found response has a 2xx status code
func (o *GetRuleOverrideNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rule override not found response has a 3xx status code
func (o *GetRuleOverrideNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rule override not found response has a 4xx status code
func (o *GetRuleOverrideNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rule override not found response has a 5xx status code
func (o *GetRuleOverrideNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get rule override not found response a status code equal to that given
func (o *GetRuleOverrideNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get rule override not found response
func (o *GetRuleOverrideNotFound) Code() int {
	return 404
}

func (o *GetRuleOverrideNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-policies/entities/rule-overrides/v1][%d] getRuleOverrideNotFound %s", 404, payload)
}

func (o *GetRuleOverrideNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-policies/entities/rule-overrides/v1][%d] getRuleOverrideNotFound %s", 404, payload)
}

func (o *GetRuleOverrideNotFound) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *GetRuleOverrideNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRuleOverrideTooManyRequests creates a GetRuleOverrideTooManyRequests with default headers values
func NewGetRuleOverrideTooManyRequests() *GetRuleOverrideTooManyRequests {
	return &GetRuleOverrideTooManyRequests{}
}

/*
GetRuleOverrideTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetRuleOverrideTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get rule override too many requests response has a 2xx status code
func (o *GetRuleOverrideTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rule override too many requests response has a 3xx status code
func (o *GetRuleOverrideTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rule override too many requests response has a 4xx status code
func (o *GetRuleOverrideTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rule override too many requests response has a 5xx status code
func (o *GetRuleOverrideTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get rule override too many requests response a status code equal to that given
func (o *GetRuleOverrideTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get rule override too many requests response
func (o *GetRuleOverrideTooManyRequests) Code() int {
	return 429
}

func (o *GetRuleOverrideTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-policies/entities/rule-overrides/v1][%d] getRuleOverrideTooManyRequests %s", 429, payload)
}

func (o *GetRuleOverrideTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-policies/entities/rule-overrides/v1][%d] getRuleOverrideTooManyRequests %s", 429, payload)
}

func (o *GetRuleOverrideTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetRuleOverrideTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRuleOverrideInternalServerError creates a GetRuleOverrideInternalServerError with default headers values
func NewGetRuleOverrideInternalServerError() *GetRuleOverrideInternalServerError {
	return &GetRuleOverrideInternalServerError{}
}

/*
GetRuleOverrideInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetRuleOverrideInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this get rule override internal server error response has a 2xx status code
func (o *GetRuleOverrideInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rule override internal server error response has a 3xx status code
func (o *GetRuleOverrideInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rule override internal server error response has a 4xx status code
func (o *GetRuleOverrideInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get rule override internal server error response has a 5xx status code
func (o *GetRuleOverrideInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get rule override internal server error response a status code equal to that given
func (o *GetRuleOverrideInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get rule override internal server error response
func (o *GetRuleOverrideInternalServerError) Code() int {
	return 500
}

func (o *GetRuleOverrideInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-policies/entities/rule-overrides/v1][%d] getRuleOverrideInternalServerError %s", 500, payload)
}

func (o *GetRuleOverrideInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-policies/entities/rule-overrides/v1][%d] getRuleOverrideInternalServerError %s", 500, payload)
}

func (o *GetRuleOverrideInternalServerError) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *GetRuleOverrideInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
