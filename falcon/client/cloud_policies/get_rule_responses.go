// Code generated by go-swagger; DO NOT EDIT.

package cloud_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetRuleReader is a Reader for the GetRule structure.
type GetRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetRuleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRuleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRuleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cloud-policies/entities/rules/v1] GetRule", response, response.Code())
	}
}

// NewGetRuleOK creates a GetRuleOK with default headers values
func NewGetRuleOK() *GetRuleOK {
	return &GetRuleOK{}
}

/*
GetRuleOK describes a response with status code 200, with default header values.

OK
*/
type GetRuleOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonGetRulesResponse
}

// IsSuccess returns true when this get rule o k response has a 2xx status code
func (o *GetRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get rule o k response has a 3xx status code
func (o *GetRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rule o k response has a 4xx status code
func (o *GetRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get rule o k response has a 5xx status code
func (o *GetRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get rule o k response a status code equal to that given
func (o *GetRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get rule o k response
func (o *GetRuleOK) Code() int {
	return 200
}

func (o *GetRuleOK) Error() string {
	return fmt.Sprintf("[GET /cloud-policies/entities/rules/v1][%d] getRuleOK  %+v", 200, o.Payload)
}

func (o *GetRuleOK) String() string {
	return fmt.Sprintf("[GET /cloud-policies/entities/rules/v1][%d] getRuleOK  %+v", 200, o.Payload)
}

func (o *GetRuleOK) GetPayload() *models.CommonGetRulesResponse {
	return o.Payload
}

func (o *GetRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonGetRulesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRuleForbidden creates a GetRuleForbidden with default headers values
func NewGetRuleForbidden() *GetRuleForbidden {
	return &GetRuleForbidden{}
}

/*
GetRuleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetRuleForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get rule forbidden response has a 2xx status code
func (o *GetRuleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rule forbidden response has a 3xx status code
func (o *GetRuleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rule forbidden response has a 4xx status code
func (o *GetRuleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rule forbidden response has a 5xx status code
func (o *GetRuleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get rule forbidden response a status code equal to that given
func (o *GetRuleForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get rule forbidden response
func (o *GetRuleForbidden) Code() int {
	return 403
}

func (o *GetRuleForbidden) Error() string {
	return fmt.Sprintf("[GET /cloud-policies/entities/rules/v1][%d] getRuleForbidden  %+v", 403, o.Payload)
}

func (o *GetRuleForbidden) String() string {
	return fmt.Sprintf("[GET /cloud-policies/entities/rules/v1][%d] getRuleForbidden  %+v", 403, o.Payload)
}

func (o *GetRuleForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetRuleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRuleNotFound creates a GetRuleNotFound with default headers values
func NewGetRuleNotFound() *GetRuleNotFound {
	return &GetRuleNotFound{}
}

/*
GetRuleNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetRuleNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonGetRulesResponse
}

// IsSuccess returns true when this get rule not found response has a 2xx status code
func (o *GetRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rule not found response has a 3xx status code
func (o *GetRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rule not found response has a 4xx status code
func (o *GetRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rule not found response has a 5xx status code
func (o *GetRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get rule not found response a status code equal to that given
func (o *GetRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get rule not found response
func (o *GetRuleNotFound) Code() int {
	return 404
}

func (o *GetRuleNotFound) Error() string {
	return fmt.Sprintf("[GET /cloud-policies/entities/rules/v1][%d] getRuleNotFound  %+v", 404, o.Payload)
}

func (o *GetRuleNotFound) String() string {
	return fmt.Sprintf("[GET /cloud-policies/entities/rules/v1][%d] getRuleNotFound  %+v", 404, o.Payload)
}

func (o *GetRuleNotFound) GetPayload() *models.CommonGetRulesResponse {
	return o.Payload
}

func (o *GetRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonGetRulesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRuleTooManyRequests creates a GetRuleTooManyRequests with default headers values
func NewGetRuleTooManyRequests() *GetRuleTooManyRequests {
	return &GetRuleTooManyRequests{}
}

/*
GetRuleTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetRuleTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get rule too many requests response has a 2xx status code
func (o *GetRuleTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rule too many requests response has a 3xx status code
func (o *GetRuleTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rule too many requests response has a 4xx status code
func (o *GetRuleTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rule too many requests response has a 5xx status code
func (o *GetRuleTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get rule too many requests response a status code equal to that given
func (o *GetRuleTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get rule too many requests response
func (o *GetRuleTooManyRequests) Code() int {
	return 429
}

func (o *GetRuleTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /cloud-policies/entities/rules/v1][%d] getRuleTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRuleTooManyRequests) String() string {
	return fmt.Sprintf("[GET /cloud-policies/entities/rules/v1][%d] getRuleTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRuleTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetRuleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRuleInternalServerError creates a GetRuleInternalServerError with default headers values
func NewGetRuleInternalServerError() *GetRuleInternalServerError {
	return &GetRuleInternalServerError{}
}

/*
GetRuleInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetRuleInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this get rule internal server error response has a 2xx status code
func (o *GetRuleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rule internal server error response has a 3xx status code
func (o *GetRuleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rule internal server error response has a 4xx status code
func (o *GetRuleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get rule internal server error response has a 5xx status code
func (o *GetRuleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get rule internal server error response a status code equal to that given
func (o *GetRuleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get rule internal server error response
func (o *GetRuleInternalServerError) Code() int {
	return 500
}

func (o *GetRuleInternalServerError) Error() string {
	return fmt.Sprintf("[GET /cloud-policies/entities/rules/v1][%d] getRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRuleInternalServerError) String() string {
	return fmt.Sprintf("[GET /cloud-policies/entities/rules/v1][%d] getRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRuleInternalServerError) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *GetRuleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
