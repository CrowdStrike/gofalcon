// Code generated by go-swagger; DO NOT EDIT.

package cloud_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// UpdateRuleReader is a Reader for the UpdateRule structure.
type UpdateRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRuleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateRuleConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateRuleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateRuleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /cloud-policies/entities/rules/v1] UpdateRule", response, response.Code())
	}
}

// NewUpdateRuleOK creates a UpdateRuleOK with default headers values
func NewUpdateRuleOK() *UpdateRuleOK {
	return &UpdateRuleOK{}
}

/*
UpdateRuleOK describes a response with status code 200, with default header values.

OK
*/
type UpdateRuleOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this update rule o k response has a 2xx status code
func (o *UpdateRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update rule o k response has a 3xx status code
func (o *UpdateRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update rule o k response has a 4xx status code
func (o *UpdateRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update rule o k response has a 5xx status code
func (o *UpdateRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update rule o k response a status code equal to that given
func (o *UpdateRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update rule o k response
func (o *UpdateRuleOK) Code() int {
	return 200
}

func (o *UpdateRuleOK) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/rules/v1][%d] updateRuleOK  %+v", 200, o.Payload)
}

func (o *UpdateRuleOK) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/rules/v1][%d] updateRuleOK  %+v", 200, o.Payload)
}

func (o *UpdateRuleOK) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *UpdateRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRuleBadRequest creates a UpdateRuleBadRequest with default headers values
func NewUpdateRuleBadRequest() *UpdateRuleBadRequest {
	return &UpdateRuleBadRequest{}
}

/*
UpdateRuleBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateRuleBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this update rule bad request response has a 2xx status code
func (o *UpdateRuleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update rule bad request response has a 3xx status code
func (o *UpdateRuleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update rule bad request response has a 4xx status code
func (o *UpdateRuleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update rule bad request response has a 5xx status code
func (o *UpdateRuleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update rule bad request response a status code equal to that given
func (o *UpdateRuleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update rule bad request response
func (o *UpdateRuleBadRequest) Code() int {
	return 400
}

func (o *UpdateRuleBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/rules/v1][%d] updateRuleBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateRuleBadRequest) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/rules/v1][%d] updateRuleBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateRuleBadRequest) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *UpdateRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRuleForbidden creates a UpdateRuleForbidden with default headers values
func NewUpdateRuleForbidden() *UpdateRuleForbidden {
	return &UpdateRuleForbidden{}
}

/*
UpdateRuleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateRuleForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this update rule forbidden response has a 2xx status code
func (o *UpdateRuleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update rule forbidden response has a 3xx status code
func (o *UpdateRuleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update rule forbidden response has a 4xx status code
func (o *UpdateRuleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update rule forbidden response has a 5xx status code
func (o *UpdateRuleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update rule forbidden response a status code equal to that given
func (o *UpdateRuleForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update rule forbidden response
func (o *UpdateRuleForbidden) Code() int {
	return 403
}

func (o *UpdateRuleForbidden) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/rules/v1][%d] updateRuleForbidden  %+v", 403, o.Payload)
}

func (o *UpdateRuleForbidden) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/rules/v1][%d] updateRuleForbidden  %+v", 403, o.Payload)
}

func (o *UpdateRuleForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpdateRuleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRuleConflict creates a UpdateRuleConflict with default headers values
func NewUpdateRuleConflict() *UpdateRuleConflict {
	return &UpdateRuleConflict{}
}

/*
UpdateRuleConflict describes a response with status code 409, with default header values.

Conflict
*/
type UpdateRuleConflict struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this update rule conflict response has a 2xx status code
func (o *UpdateRuleConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update rule conflict response has a 3xx status code
func (o *UpdateRuleConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update rule conflict response has a 4xx status code
func (o *UpdateRuleConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update rule conflict response has a 5xx status code
func (o *UpdateRuleConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update rule conflict response a status code equal to that given
func (o *UpdateRuleConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update rule conflict response
func (o *UpdateRuleConflict) Code() int {
	return 409
}

func (o *UpdateRuleConflict) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/rules/v1][%d] updateRuleConflict  %+v", 409, o.Payload)
}

func (o *UpdateRuleConflict) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/rules/v1][%d] updateRuleConflict  %+v", 409, o.Payload)
}

func (o *UpdateRuleConflict) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *UpdateRuleConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRuleTooManyRequests creates a UpdateRuleTooManyRequests with default headers values
func NewUpdateRuleTooManyRequests() *UpdateRuleTooManyRequests {
	return &UpdateRuleTooManyRequests{}
}

/*
UpdateRuleTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type UpdateRuleTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this update rule too many requests response has a 2xx status code
func (o *UpdateRuleTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update rule too many requests response has a 3xx status code
func (o *UpdateRuleTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update rule too many requests response has a 4xx status code
func (o *UpdateRuleTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update rule too many requests response has a 5xx status code
func (o *UpdateRuleTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update rule too many requests response a status code equal to that given
func (o *UpdateRuleTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update rule too many requests response
func (o *UpdateRuleTooManyRequests) Code() int {
	return 429
}

func (o *UpdateRuleTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/rules/v1][%d] updateRuleTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateRuleTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/rules/v1][%d] updateRuleTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateRuleTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpdateRuleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRuleInternalServerError creates a UpdateRuleInternalServerError with default headers values
func NewUpdateRuleInternalServerError() *UpdateRuleInternalServerError {
	return &UpdateRuleInternalServerError{}
}

/*
UpdateRuleInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateRuleInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this update rule internal server error response has a 2xx status code
func (o *UpdateRuleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update rule internal server error response has a 3xx status code
func (o *UpdateRuleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update rule internal server error response has a 4xx status code
func (o *UpdateRuleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update rule internal server error response has a 5xx status code
func (o *UpdateRuleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update rule internal server error response a status code equal to that given
func (o *UpdateRuleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update rule internal server error response
func (o *UpdateRuleInternalServerError) Code() int {
	return 500
}

func (o *UpdateRuleInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/rules/v1][%d] updateRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateRuleInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/rules/v1][%d] updateRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateRuleInternalServerError) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *UpdateRuleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
