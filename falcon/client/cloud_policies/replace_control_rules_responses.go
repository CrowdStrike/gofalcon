// Code generated by go-swagger; DO NOT EDIT.

package cloud_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ReplaceControlRulesReader is a Reader for the ReplaceControlRules structure.
type ReplaceControlRulesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceControlRulesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReplaceControlRulesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReplaceControlRulesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReplaceControlRulesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReplaceControlRulesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewReplaceControlRulesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReplaceControlRulesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /cloud-policies/entities/compliance/control-rule-assignments/v1] ReplaceControlRules", response, response.Code())
	}
}

// NewReplaceControlRulesOK creates a ReplaceControlRulesOK with default headers values
func NewReplaceControlRulesOK() *ReplaceControlRulesOK {
	return &ReplaceControlRulesOK{}
}

/*
ReplaceControlRulesOK describes a response with status code 200, with default header values.

OK
*/
type ReplaceControlRulesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonAssignRulesToControlResponse
}

// IsSuccess returns true when this replace control rules o k response has a 2xx status code
func (o *ReplaceControlRulesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace control rules o k response has a 3xx status code
func (o *ReplaceControlRulesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace control rules o k response has a 4xx status code
func (o *ReplaceControlRulesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace control rules o k response has a 5xx status code
func (o *ReplaceControlRulesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this replace control rules o k response a status code equal to that given
func (o *ReplaceControlRulesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the replace control rules o k response
func (o *ReplaceControlRulesOK) Code() int {
	return 200
}

func (o *ReplaceControlRulesOK) Error() string {
	return fmt.Sprintf("[PUT /cloud-policies/entities/compliance/control-rule-assignments/v1][%d] replaceControlRulesOK  %+v", 200, o.Payload)
}

func (o *ReplaceControlRulesOK) String() string {
	return fmt.Sprintf("[PUT /cloud-policies/entities/compliance/control-rule-assignments/v1][%d] replaceControlRulesOK  %+v", 200, o.Payload)
}

func (o *ReplaceControlRulesOK) GetPayload() *models.CommonAssignRulesToControlResponse {
	return o.Payload
}

func (o *ReplaceControlRulesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonAssignRulesToControlResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceControlRulesBadRequest creates a ReplaceControlRulesBadRequest with default headers values
func NewReplaceControlRulesBadRequest() *ReplaceControlRulesBadRequest {
	return &ReplaceControlRulesBadRequest{}
}

/*
ReplaceControlRulesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ReplaceControlRulesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this replace control rules bad request response has a 2xx status code
func (o *ReplaceControlRulesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace control rules bad request response has a 3xx status code
func (o *ReplaceControlRulesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace control rules bad request response has a 4xx status code
func (o *ReplaceControlRulesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace control rules bad request response has a 5xx status code
func (o *ReplaceControlRulesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this replace control rules bad request response a status code equal to that given
func (o *ReplaceControlRulesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the replace control rules bad request response
func (o *ReplaceControlRulesBadRequest) Code() int {
	return 400
}

func (o *ReplaceControlRulesBadRequest) Error() string {
	return fmt.Sprintf("[PUT /cloud-policies/entities/compliance/control-rule-assignments/v1][%d] replaceControlRulesBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceControlRulesBadRequest) String() string {
	return fmt.Sprintf("[PUT /cloud-policies/entities/compliance/control-rule-assignments/v1][%d] replaceControlRulesBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceControlRulesBadRequest) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *ReplaceControlRulesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceControlRulesForbidden creates a ReplaceControlRulesForbidden with default headers values
func NewReplaceControlRulesForbidden() *ReplaceControlRulesForbidden {
	return &ReplaceControlRulesForbidden{}
}

/*
ReplaceControlRulesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ReplaceControlRulesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this replace control rules forbidden response has a 2xx status code
func (o *ReplaceControlRulesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace control rules forbidden response has a 3xx status code
func (o *ReplaceControlRulesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace control rules forbidden response has a 4xx status code
func (o *ReplaceControlRulesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace control rules forbidden response has a 5xx status code
func (o *ReplaceControlRulesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this replace control rules forbidden response a status code equal to that given
func (o *ReplaceControlRulesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the replace control rules forbidden response
func (o *ReplaceControlRulesForbidden) Code() int {
	return 403
}

func (o *ReplaceControlRulesForbidden) Error() string {
	return fmt.Sprintf("[PUT /cloud-policies/entities/compliance/control-rule-assignments/v1][%d] replaceControlRulesForbidden  %+v", 403, o.Payload)
}

func (o *ReplaceControlRulesForbidden) String() string {
	return fmt.Sprintf("[PUT /cloud-policies/entities/compliance/control-rule-assignments/v1][%d] replaceControlRulesForbidden  %+v", 403, o.Payload)
}

func (o *ReplaceControlRulesForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ReplaceControlRulesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceControlRulesNotFound creates a ReplaceControlRulesNotFound with default headers values
func NewReplaceControlRulesNotFound() *ReplaceControlRulesNotFound {
	return &ReplaceControlRulesNotFound{}
}

/*
ReplaceControlRulesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ReplaceControlRulesNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this replace control rules not found response has a 2xx status code
func (o *ReplaceControlRulesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace control rules not found response has a 3xx status code
func (o *ReplaceControlRulesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace control rules not found response has a 4xx status code
func (o *ReplaceControlRulesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace control rules not found response has a 5xx status code
func (o *ReplaceControlRulesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this replace control rules not found response a status code equal to that given
func (o *ReplaceControlRulesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the replace control rules not found response
func (o *ReplaceControlRulesNotFound) Code() int {
	return 404
}

func (o *ReplaceControlRulesNotFound) Error() string {
	return fmt.Sprintf("[PUT /cloud-policies/entities/compliance/control-rule-assignments/v1][%d] replaceControlRulesNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceControlRulesNotFound) String() string {
	return fmt.Sprintf("[PUT /cloud-policies/entities/compliance/control-rule-assignments/v1][%d] replaceControlRulesNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceControlRulesNotFound) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *ReplaceControlRulesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceControlRulesTooManyRequests creates a ReplaceControlRulesTooManyRequests with default headers values
func NewReplaceControlRulesTooManyRequests() *ReplaceControlRulesTooManyRequests {
	return &ReplaceControlRulesTooManyRequests{}
}

/*
ReplaceControlRulesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ReplaceControlRulesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this replace control rules too many requests response has a 2xx status code
func (o *ReplaceControlRulesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace control rules too many requests response has a 3xx status code
func (o *ReplaceControlRulesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace control rules too many requests response has a 4xx status code
func (o *ReplaceControlRulesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace control rules too many requests response has a 5xx status code
func (o *ReplaceControlRulesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this replace control rules too many requests response a status code equal to that given
func (o *ReplaceControlRulesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the replace control rules too many requests response
func (o *ReplaceControlRulesTooManyRequests) Code() int {
	return 429
}

func (o *ReplaceControlRulesTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /cloud-policies/entities/compliance/control-rule-assignments/v1][%d] replaceControlRulesTooManyRequests  %+v", 429, o.Payload)
}

func (o *ReplaceControlRulesTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /cloud-policies/entities/compliance/control-rule-assignments/v1][%d] replaceControlRulesTooManyRequests  %+v", 429, o.Payload)
}

func (o *ReplaceControlRulesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ReplaceControlRulesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceControlRulesInternalServerError creates a ReplaceControlRulesInternalServerError with default headers values
func NewReplaceControlRulesInternalServerError() *ReplaceControlRulesInternalServerError {
	return &ReplaceControlRulesInternalServerError{}
}

/*
ReplaceControlRulesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ReplaceControlRulesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this replace control rules internal server error response has a 2xx status code
func (o *ReplaceControlRulesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace control rules internal server error response has a 3xx status code
func (o *ReplaceControlRulesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace control rules internal server error response has a 4xx status code
func (o *ReplaceControlRulesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace control rules internal server error response has a 5xx status code
func (o *ReplaceControlRulesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this replace control rules internal server error response a status code equal to that given
func (o *ReplaceControlRulesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the replace control rules internal server error response
func (o *ReplaceControlRulesInternalServerError) Code() int {
	return 500
}

func (o *ReplaceControlRulesInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /cloud-policies/entities/compliance/control-rule-assignments/v1][%d] replaceControlRulesInternalServerError  %+v", 500, o.Payload)
}

func (o *ReplaceControlRulesInternalServerError) String() string {
	return fmt.Sprintf("[PUT /cloud-policies/entities/compliance/control-rule-assignments/v1][%d] replaceControlRulesInternalServerError  %+v", 500, o.Payload)
}

func (o *ReplaceControlRulesInternalServerError) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *ReplaceControlRulesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
