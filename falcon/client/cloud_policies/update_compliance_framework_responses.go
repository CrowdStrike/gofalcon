// Code generated by go-swagger; DO NOT EDIT.

package cloud_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// UpdateComplianceFrameworkReader is a Reader for the UpdateComplianceFramework structure.
type UpdateComplianceFrameworkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateComplianceFrameworkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateComplianceFrameworkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateComplianceFrameworkBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateComplianceFrameworkForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateComplianceFrameworkNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateComplianceFrameworkConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateComplianceFrameworkTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateComplianceFrameworkInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /cloud-policies/entities/compliance/frameworks/v1] UpdateComplianceFramework", response, response.Code())
	}
}

// NewUpdateComplianceFrameworkOK creates a UpdateComplianceFrameworkOK with default headers values
func NewUpdateComplianceFrameworkOK() *UpdateComplianceFrameworkOK {
	return &UpdateComplianceFrameworkOK{}
}

/*
UpdateComplianceFrameworkOK describes a response with status code 200, with default header values.

OK
*/
type UpdateComplianceFrameworkOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonCreateComplianceFrameworkResponse
}

// IsSuccess returns true when this update compliance framework o k response has a 2xx status code
func (o *UpdateComplianceFrameworkOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update compliance framework o k response has a 3xx status code
func (o *UpdateComplianceFrameworkOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update compliance framework o k response has a 4xx status code
func (o *UpdateComplianceFrameworkOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update compliance framework o k response has a 5xx status code
func (o *UpdateComplianceFrameworkOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update compliance framework o k response a status code equal to that given
func (o *UpdateComplianceFrameworkOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update compliance framework o k response
func (o *UpdateComplianceFrameworkOK) Code() int {
	return 200
}

func (o *UpdateComplianceFrameworkOK) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/v1][%d] updateComplianceFrameworkOK  %+v", 200, o.Payload)
}

func (o *UpdateComplianceFrameworkOK) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/v1][%d] updateComplianceFrameworkOK  %+v", 200, o.Payload)
}

func (o *UpdateComplianceFrameworkOK) GetPayload() *models.CommonCreateComplianceFrameworkResponse {
	return o.Payload
}

func (o *UpdateComplianceFrameworkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonCreateComplianceFrameworkResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateComplianceFrameworkBadRequest creates a UpdateComplianceFrameworkBadRequest with default headers values
func NewUpdateComplianceFrameworkBadRequest() *UpdateComplianceFrameworkBadRequest {
	return &UpdateComplianceFrameworkBadRequest{}
}

/*
UpdateComplianceFrameworkBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateComplianceFrameworkBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this update compliance framework bad request response has a 2xx status code
func (o *UpdateComplianceFrameworkBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update compliance framework bad request response has a 3xx status code
func (o *UpdateComplianceFrameworkBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update compliance framework bad request response has a 4xx status code
func (o *UpdateComplianceFrameworkBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update compliance framework bad request response has a 5xx status code
func (o *UpdateComplianceFrameworkBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update compliance framework bad request response a status code equal to that given
func (o *UpdateComplianceFrameworkBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update compliance framework bad request response
func (o *UpdateComplianceFrameworkBadRequest) Code() int {
	return 400
}

func (o *UpdateComplianceFrameworkBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/v1][%d] updateComplianceFrameworkBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateComplianceFrameworkBadRequest) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/v1][%d] updateComplianceFrameworkBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateComplianceFrameworkBadRequest) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *UpdateComplianceFrameworkBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateComplianceFrameworkForbidden creates a UpdateComplianceFrameworkForbidden with default headers values
func NewUpdateComplianceFrameworkForbidden() *UpdateComplianceFrameworkForbidden {
	return &UpdateComplianceFrameworkForbidden{}
}

/*
UpdateComplianceFrameworkForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateComplianceFrameworkForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this update compliance framework forbidden response has a 2xx status code
func (o *UpdateComplianceFrameworkForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update compliance framework forbidden response has a 3xx status code
func (o *UpdateComplianceFrameworkForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update compliance framework forbidden response has a 4xx status code
func (o *UpdateComplianceFrameworkForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update compliance framework forbidden response has a 5xx status code
func (o *UpdateComplianceFrameworkForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update compliance framework forbidden response a status code equal to that given
func (o *UpdateComplianceFrameworkForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update compliance framework forbidden response
func (o *UpdateComplianceFrameworkForbidden) Code() int {
	return 403
}

func (o *UpdateComplianceFrameworkForbidden) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/v1][%d] updateComplianceFrameworkForbidden  %+v", 403, o.Payload)
}

func (o *UpdateComplianceFrameworkForbidden) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/v1][%d] updateComplianceFrameworkForbidden  %+v", 403, o.Payload)
}

func (o *UpdateComplianceFrameworkForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpdateComplianceFrameworkForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateComplianceFrameworkNotFound creates a UpdateComplianceFrameworkNotFound with default headers values
func NewUpdateComplianceFrameworkNotFound() *UpdateComplianceFrameworkNotFound {
	return &UpdateComplianceFrameworkNotFound{}
}

/*
UpdateComplianceFrameworkNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateComplianceFrameworkNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this update compliance framework not found response has a 2xx status code
func (o *UpdateComplianceFrameworkNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update compliance framework not found response has a 3xx status code
func (o *UpdateComplianceFrameworkNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update compliance framework not found response has a 4xx status code
func (o *UpdateComplianceFrameworkNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update compliance framework not found response has a 5xx status code
func (o *UpdateComplianceFrameworkNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update compliance framework not found response a status code equal to that given
func (o *UpdateComplianceFrameworkNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update compliance framework not found response
func (o *UpdateComplianceFrameworkNotFound) Code() int {
	return 404
}

func (o *UpdateComplianceFrameworkNotFound) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/v1][%d] updateComplianceFrameworkNotFound  %+v", 404, o.Payload)
}

func (o *UpdateComplianceFrameworkNotFound) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/v1][%d] updateComplianceFrameworkNotFound  %+v", 404, o.Payload)
}

func (o *UpdateComplianceFrameworkNotFound) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *UpdateComplianceFrameworkNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateComplianceFrameworkConflict creates a UpdateComplianceFrameworkConflict with default headers values
func NewUpdateComplianceFrameworkConflict() *UpdateComplianceFrameworkConflict {
	return &UpdateComplianceFrameworkConflict{}
}

/*
UpdateComplianceFrameworkConflict describes a response with status code 409, with default header values.

Conflict
*/
type UpdateComplianceFrameworkConflict struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this update compliance framework conflict response has a 2xx status code
func (o *UpdateComplianceFrameworkConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update compliance framework conflict response has a 3xx status code
func (o *UpdateComplianceFrameworkConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update compliance framework conflict response has a 4xx status code
func (o *UpdateComplianceFrameworkConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update compliance framework conflict response has a 5xx status code
func (o *UpdateComplianceFrameworkConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update compliance framework conflict response a status code equal to that given
func (o *UpdateComplianceFrameworkConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update compliance framework conflict response
func (o *UpdateComplianceFrameworkConflict) Code() int {
	return 409
}

func (o *UpdateComplianceFrameworkConflict) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/v1][%d] updateComplianceFrameworkConflict  %+v", 409, o.Payload)
}

func (o *UpdateComplianceFrameworkConflict) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/v1][%d] updateComplianceFrameworkConflict  %+v", 409, o.Payload)
}

func (o *UpdateComplianceFrameworkConflict) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *UpdateComplianceFrameworkConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateComplianceFrameworkTooManyRequests creates a UpdateComplianceFrameworkTooManyRequests with default headers values
func NewUpdateComplianceFrameworkTooManyRequests() *UpdateComplianceFrameworkTooManyRequests {
	return &UpdateComplianceFrameworkTooManyRequests{}
}

/*
UpdateComplianceFrameworkTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type UpdateComplianceFrameworkTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this update compliance framework too many requests response has a 2xx status code
func (o *UpdateComplianceFrameworkTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update compliance framework too many requests response has a 3xx status code
func (o *UpdateComplianceFrameworkTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update compliance framework too many requests response has a 4xx status code
func (o *UpdateComplianceFrameworkTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update compliance framework too many requests response has a 5xx status code
func (o *UpdateComplianceFrameworkTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update compliance framework too many requests response a status code equal to that given
func (o *UpdateComplianceFrameworkTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update compliance framework too many requests response
func (o *UpdateComplianceFrameworkTooManyRequests) Code() int {
	return 429
}

func (o *UpdateComplianceFrameworkTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/v1][%d] updateComplianceFrameworkTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateComplianceFrameworkTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/v1][%d] updateComplianceFrameworkTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateComplianceFrameworkTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpdateComplianceFrameworkTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateComplianceFrameworkInternalServerError creates a UpdateComplianceFrameworkInternalServerError with default headers values
func NewUpdateComplianceFrameworkInternalServerError() *UpdateComplianceFrameworkInternalServerError {
	return &UpdateComplianceFrameworkInternalServerError{}
}

/*
UpdateComplianceFrameworkInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type UpdateComplianceFrameworkInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this update compliance framework internal server error response has a 2xx status code
func (o *UpdateComplianceFrameworkInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update compliance framework internal server error response has a 3xx status code
func (o *UpdateComplianceFrameworkInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update compliance framework internal server error response has a 4xx status code
func (o *UpdateComplianceFrameworkInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update compliance framework internal server error response has a 5xx status code
func (o *UpdateComplianceFrameworkInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update compliance framework internal server error response a status code equal to that given
func (o *UpdateComplianceFrameworkInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update compliance framework internal server error response
func (o *UpdateComplianceFrameworkInternalServerError) Code() int {
	return 500
}

func (o *UpdateComplianceFrameworkInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/v1][%d] updateComplianceFrameworkInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateComplianceFrameworkInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/v1][%d] updateComplianceFrameworkInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateComplianceFrameworkInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpdateComplianceFrameworkInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
