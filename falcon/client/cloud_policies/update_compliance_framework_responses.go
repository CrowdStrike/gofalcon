// Code generated by go-swagger; DO NOT EDIT.

package cloud_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// UpdateComplianceFrameworkReader is a Reader for the UpdateComplianceFramework structure.
type UpdateComplianceFrameworkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateComplianceFrameworkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateComplianceFrameworkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateComplianceFrameworkBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateComplianceFrameworkNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /cloud-policies/entities/compliance/frameworks/v1] UpdateComplianceFramework", response, response.Code())
	}
}

// NewUpdateComplianceFrameworkOK creates a UpdateComplianceFrameworkOK with default headers values
func NewUpdateComplianceFrameworkOK() *UpdateComplianceFrameworkOK {
	return &UpdateComplianceFrameworkOK{}
}

/*
UpdateComplianceFrameworkOK describes a response with status code 200, with default header values.

OK
*/
type UpdateComplianceFrameworkOK struct {
	Payload *models.CommonCreateComplianceFrameworkResponse
}

// IsSuccess returns true when this update compliance framework o k response has a 2xx status code
func (o *UpdateComplianceFrameworkOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update compliance framework o k response has a 3xx status code
func (o *UpdateComplianceFrameworkOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update compliance framework o k response has a 4xx status code
func (o *UpdateComplianceFrameworkOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update compliance framework o k response has a 5xx status code
func (o *UpdateComplianceFrameworkOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update compliance framework o k response a status code equal to that given
func (o *UpdateComplianceFrameworkOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update compliance framework o k response
func (o *UpdateComplianceFrameworkOK) Code() int {
	return 200
}

func (o *UpdateComplianceFrameworkOK) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/v1][%d] updateComplianceFrameworkOK  %+v", 200, o.Payload)
}

func (o *UpdateComplianceFrameworkOK) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/v1][%d] updateComplianceFrameworkOK  %+v", 200, o.Payload)
}

func (o *UpdateComplianceFrameworkOK) GetPayload() *models.CommonCreateComplianceFrameworkResponse {
	return o.Payload
}

func (o *UpdateComplianceFrameworkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonCreateComplianceFrameworkResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateComplianceFrameworkBadRequest creates a UpdateComplianceFrameworkBadRequest with default headers values
func NewUpdateComplianceFrameworkBadRequest() *UpdateComplianceFrameworkBadRequest {
	return &UpdateComplianceFrameworkBadRequest{}
}

/*
UpdateComplianceFrameworkBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateComplianceFrameworkBadRequest struct {
	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this update compliance framework bad request response has a 2xx status code
func (o *UpdateComplianceFrameworkBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update compliance framework bad request response has a 3xx status code
func (o *UpdateComplianceFrameworkBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update compliance framework bad request response has a 4xx status code
func (o *UpdateComplianceFrameworkBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update compliance framework bad request response has a 5xx status code
func (o *UpdateComplianceFrameworkBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update compliance framework bad request response a status code equal to that given
func (o *UpdateComplianceFrameworkBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update compliance framework bad request response
func (o *UpdateComplianceFrameworkBadRequest) Code() int {
	return 400
}

func (o *UpdateComplianceFrameworkBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/v1][%d] updateComplianceFrameworkBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateComplianceFrameworkBadRequest) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/v1][%d] updateComplianceFrameworkBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateComplianceFrameworkBadRequest) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *UpdateComplianceFrameworkBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateComplianceFrameworkNotFound creates a UpdateComplianceFrameworkNotFound with default headers values
func NewUpdateComplianceFrameworkNotFound() *UpdateComplianceFrameworkNotFound {
	return &UpdateComplianceFrameworkNotFound{}
}

/*
UpdateComplianceFrameworkNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateComplianceFrameworkNotFound struct {
	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this update compliance framework not found response has a 2xx status code
func (o *UpdateComplianceFrameworkNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update compliance framework not found response has a 3xx status code
func (o *UpdateComplianceFrameworkNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update compliance framework not found response has a 4xx status code
func (o *UpdateComplianceFrameworkNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update compliance framework not found response has a 5xx status code
func (o *UpdateComplianceFrameworkNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update compliance framework not found response a status code equal to that given
func (o *UpdateComplianceFrameworkNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update compliance framework not found response
func (o *UpdateComplianceFrameworkNotFound) Code() int {
	return 404
}

func (o *UpdateComplianceFrameworkNotFound) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/v1][%d] updateComplianceFrameworkNotFound  %+v", 404, o.Payload)
}

func (o *UpdateComplianceFrameworkNotFound) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/v1][%d] updateComplianceFrameworkNotFound  %+v", 404, o.Payload)
}

func (o *UpdateComplianceFrameworkNotFound) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *UpdateComplianceFrameworkNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
