// Code generated by go-swagger; DO NOT EDIT.

package cloud_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// NewRenameSectionComplianceFrameworkParams creates a new RenameSectionComplianceFrameworkParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRenameSectionComplianceFrameworkParams() *RenameSectionComplianceFrameworkParams {
	return &RenameSectionComplianceFrameworkParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRenameSectionComplianceFrameworkParamsWithTimeout creates a new RenameSectionComplianceFrameworkParams object
// with the ability to set a timeout on a request.
func NewRenameSectionComplianceFrameworkParamsWithTimeout(timeout time.Duration) *RenameSectionComplianceFrameworkParams {
	return &RenameSectionComplianceFrameworkParams{
		timeout: timeout,
	}
}

// NewRenameSectionComplianceFrameworkParamsWithContext creates a new RenameSectionComplianceFrameworkParams object
// with the ability to set a context for a request.
func NewRenameSectionComplianceFrameworkParamsWithContext(ctx context.Context) *RenameSectionComplianceFrameworkParams {
	return &RenameSectionComplianceFrameworkParams{
		Context: ctx,
	}
}

// NewRenameSectionComplianceFrameworkParamsWithHTTPClient creates a new RenameSectionComplianceFrameworkParams object
// with the ability to set a custom HTTPClient for a request.
func NewRenameSectionComplianceFrameworkParamsWithHTTPClient(client *http.Client) *RenameSectionComplianceFrameworkParams {
	return &RenameSectionComplianceFrameworkParams{
		HTTPClient: client,
	}
}

/*
RenameSectionComplianceFrameworkParams contains all the parameters to send to the API endpoint

	for the rename section compliance framework operation.

	Typically these are written to a http.Request.
*/
type RenameSectionComplianceFrameworkParams struct {

	// Body.
	Body *models.CommonRenameSectionRequest

	/* Ids.

	   The uuid of compliance framework containing the section to rename
	*/
	Ids string

	/* SectionName.

	   The current name of the section to rename
	*/
	SectionName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the rename section compliance framework params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RenameSectionComplianceFrameworkParams) WithDefaults() *RenameSectionComplianceFrameworkParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the rename section compliance framework params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RenameSectionComplianceFrameworkParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the rename section compliance framework params
func (o *RenameSectionComplianceFrameworkParams) WithTimeout(timeout time.Duration) *RenameSectionComplianceFrameworkParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the rename section compliance framework params
func (o *RenameSectionComplianceFrameworkParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the rename section compliance framework params
func (o *RenameSectionComplianceFrameworkParams) WithContext(ctx context.Context) *RenameSectionComplianceFrameworkParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the rename section compliance framework params
func (o *RenameSectionComplianceFrameworkParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the rename section compliance framework params
func (o *RenameSectionComplianceFrameworkParams) WithHTTPClient(client *http.Client) *RenameSectionComplianceFrameworkParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the rename section compliance framework params
func (o *RenameSectionComplianceFrameworkParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the rename section compliance framework params
func (o *RenameSectionComplianceFrameworkParams) WithBody(body *models.CommonRenameSectionRequest) *RenameSectionComplianceFrameworkParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the rename section compliance framework params
func (o *RenameSectionComplianceFrameworkParams) SetBody(body *models.CommonRenameSectionRequest) {
	o.Body = body
}

// WithIds adds the ids to the rename section compliance framework params
func (o *RenameSectionComplianceFrameworkParams) WithIds(ids string) *RenameSectionComplianceFrameworkParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the rename section compliance framework params
func (o *RenameSectionComplianceFrameworkParams) SetIds(ids string) {
	o.Ids = ids
}

// WithSectionName adds the sectionName to the rename section compliance framework params
func (o *RenameSectionComplianceFrameworkParams) WithSectionName(sectionName string) *RenameSectionComplianceFrameworkParams {
	o.SetSectionName(sectionName)
	return o
}

// SetSectionName adds the sectionName to the rename section compliance framework params
func (o *RenameSectionComplianceFrameworkParams) SetSectionName(sectionName string) {
	o.SectionName = sectionName
}

// WriteToRequest writes these params to a swagger request
func (o *RenameSectionComplianceFrameworkParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// query param ids
	qrIds := o.Ids
	qIds := qrIds
	if qIds != "" {

		if err := r.SetQueryParam("ids", qIds); err != nil {
			return err
		}
	}

	// query param sectionName
	qrSectionName := o.SectionName
	qSectionName := qrSectionName
	if qSectionName != "" {

		if err := r.SetQueryParam("sectionName", qSectionName); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
