// Code generated by go-swagger; DO NOT EDIT.

package cloud_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// QueryRuleOverrideReader is a Reader for the QueryRuleOverride structure.
type QueryRuleOverrideReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryRuleOverrideReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryRuleOverrideOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryRuleOverrideBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewQueryRuleOverrideNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewQueryRuleOverrideInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cloud-policies/queries/rule-overrides/v1] QueryRuleOverride", response, response.Code())
	}
}

// NewQueryRuleOverrideOK creates a QueryRuleOverrideOK with default headers values
func NewQueryRuleOverrideOK() *QueryRuleOverrideOK {
	return &QueryRuleOverrideOK{}
}

/*
QueryRuleOverrideOK describes a response with status code 200, with default header values.

OK
*/
type QueryRuleOverrideOK struct {
	Payload *models.CommonQueryResponse
}

// IsSuccess returns true when this query rule override o k response has a 2xx status code
func (o *QueryRuleOverrideOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this query rule override o k response has a 3xx status code
func (o *QueryRuleOverrideOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query rule override o k response has a 4xx status code
func (o *QueryRuleOverrideOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this query rule override o k response has a 5xx status code
func (o *QueryRuleOverrideOK) IsServerError() bool {
	return false
}

// IsCode returns true when this query rule override o k response a status code equal to that given
func (o *QueryRuleOverrideOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the query rule override o k response
func (o *QueryRuleOverrideOK) Code() int {
	return 200
}

func (o *QueryRuleOverrideOK) Error() string {
	return fmt.Sprintf("[GET /cloud-policies/queries/rule-overrides/v1][%d] queryRuleOverrideOK  %+v", 200, o.Payload)
}

func (o *QueryRuleOverrideOK) String() string {
	return fmt.Sprintf("[GET /cloud-policies/queries/rule-overrides/v1][%d] queryRuleOverrideOK  %+v", 200, o.Payload)
}

func (o *QueryRuleOverrideOK) GetPayload() *models.CommonQueryResponse {
	return o.Payload
}

func (o *QueryRuleOverrideOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryRuleOverrideBadRequest creates a QueryRuleOverrideBadRequest with default headers values
func NewQueryRuleOverrideBadRequest() *QueryRuleOverrideBadRequest {
	return &QueryRuleOverrideBadRequest{}
}

/*
QueryRuleOverrideBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type QueryRuleOverrideBadRequest struct {
	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this query rule override bad request response has a 2xx status code
func (o *QueryRuleOverrideBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query rule override bad request response has a 3xx status code
func (o *QueryRuleOverrideBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query rule override bad request response has a 4xx status code
func (o *QueryRuleOverrideBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this query rule override bad request response has a 5xx status code
func (o *QueryRuleOverrideBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this query rule override bad request response a status code equal to that given
func (o *QueryRuleOverrideBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the query rule override bad request response
func (o *QueryRuleOverrideBadRequest) Code() int {
	return 400
}

func (o *QueryRuleOverrideBadRequest) Error() string {
	return fmt.Sprintf("[GET /cloud-policies/queries/rule-overrides/v1][%d] queryRuleOverrideBadRequest  %+v", 400, o.Payload)
}

func (o *QueryRuleOverrideBadRequest) String() string {
	return fmt.Sprintf("[GET /cloud-policies/queries/rule-overrides/v1][%d] queryRuleOverrideBadRequest  %+v", 400, o.Payload)
}

func (o *QueryRuleOverrideBadRequest) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *QueryRuleOverrideBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryRuleOverrideNotFound creates a QueryRuleOverrideNotFound with default headers values
func NewQueryRuleOverrideNotFound() *QueryRuleOverrideNotFound {
	return &QueryRuleOverrideNotFound{}
}

/*
QueryRuleOverrideNotFound describes a response with status code 404, with default header values.

Not Found
*/
type QueryRuleOverrideNotFound struct {
	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this query rule override not found response has a 2xx status code
func (o *QueryRuleOverrideNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query rule override not found response has a 3xx status code
func (o *QueryRuleOverrideNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query rule override not found response has a 4xx status code
func (o *QueryRuleOverrideNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this query rule override not found response has a 5xx status code
func (o *QueryRuleOverrideNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this query rule override not found response a status code equal to that given
func (o *QueryRuleOverrideNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the query rule override not found response
func (o *QueryRuleOverrideNotFound) Code() int {
	return 404
}

func (o *QueryRuleOverrideNotFound) Error() string {
	return fmt.Sprintf("[GET /cloud-policies/queries/rule-overrides/v1][%d] queryRuleOverrideNotFound  %+v", 404, o.Payload)
}

func (o *QueryRuleOverrideNotFound) String() string {
	return fmt.Sprintf("[GET /cloud-policies/queries/rule-overrides/v1][%d] queryRuleOverrideNotFound  %+v", 404, o.Payload)
}

func (o *QueryRuleOverrideNotFound) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *QueryRuleOverrideNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryRuleOverrideInternalServerError creates a QueryRuleOverrideInternalServerError with default headers values
func NewQueryRuleOverrideInternalServerError() *QueryRuleOverrideInternalServerError {
	return &QueryRuleOverrideInternalServerError{}
}

/*
QueryRuleOverrideInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type QueryRuleOverrideInternalServerError struct {
	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this query rule override internal server error response has a 2xx status code
func (o *QueryRuleOverrideInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query rule override internal server error response has a 3xx status code
func (o *QueryRuleOverrideInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query rule override internal server error response has a 4xx status code
func (o *QueryRuleOverrideInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this query rule override internal server error response has a 5xx status code
func (o *QueryRuleOverrideInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this query rule override internal server error response a status code equal to that given
func (o *QueryRuleOverrideInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the query rule override internal server error response
func (o *QueryRuleOverrideInternalServerError) Code() int {
	return 500
}

func (o *QueryRuleOverrideInternalServerError) Error() string {
	return fmt.Sprintf("[GET /cloud-policies/queries/rule-overrides/v1][%d] queryRuleOverrideInternalServerError  %+v", 500, o.Payload)
}

func (o *QueryRuleOverrideInternalServerError) String() string {
	return fmt.Sprintf("[GET /cloud-policies/queries/rule-overrides/v1][%d] queryRuleOverrideInternalServerError  %+v", 500, o.Payload)
}

func (o *QueryRuleOverrideInternalServerError) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *QueryRuleOverrideInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
