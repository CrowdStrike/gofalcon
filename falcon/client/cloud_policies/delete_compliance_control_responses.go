// Code generated by go-swagger; DO NOT EDIT.

package cloud_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// DeleteComplianceControlReader is a Reader for the DeleteComplianceControl structure.
type DeleteComplianceControlReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteComplianceControlReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteComplianceControlOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteComplianceControlBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteComplianceControlForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteComplianceControlNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteComplianceControlTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteComplianceControlInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cloud-policies/entities/compliance/controls/v1] DeleteComplianceControl", response, response.Code())
	}
}

// NewDeleteComplianceControlOK creates a DeleteComplianceControlOK with default headers values
func NewDeleteComplianceControlOK() *DeleteComplianceControlOK {
	return &DeleteComplianceControlOK{}
}

/*
DeleteComplianceControlOK describes a response with status code 200, with default header values.

OK
*/
type DeleteComplianceControlOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonDeleteComplianceControlResponse
}

// IsSuccess returns true when this delete compliance control o k response has a 2xx status code
func (o *DeleteComplianceControlOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete compliance control o k response has a 3xx status code
func (o *DeleteComplianceControlOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete compliance control o k response has a 4xx status code
func (o *DeleteComplianceControlOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete compliance control o k response has a 5xx status code
func (o *DeleteComplianceControlOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete compliance control o k response a status code equal to that given
func (o *DeleteComplianceControlOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete compliance control o k response
func (o *DeleteComplianceControlOK) Code() int {
	return 200
}

func (o *DeleteComplianceControlOK) Error() string {
	return fmt.Sprintf("[DELETE /cloud-policies/entities/compliance/controls/v1][%d] deleteComplianceControlOK  %+v", 200, o.Payload)
}

func (o *DeleteComplianceControlOK) String() string {
	return fmt.Sprintf("[DELETE /cloud-policies/entities/compliance/controls/v1][%d] deleteComplianceControlOK  %+v", 200, o.Payload)
}

func (o *DeleteComplianceControlOK) GetPayload() *models.CommonDeleteComplianceControlResponse {
	return o.Payload
}

func (o *DeleteComplianceControlOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonDeleteComplianceControlResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteComplianceControlBadRequest creates a DeleteComplianceControlBadRequest with default headers values
func NewDeleteComplianceControlBadRequest() *DeleteComplianceControlBadRequest {
	return &DeleteComplianceControlBadRequest{}
}

/*
DeleteComplianceControlBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteComplianceControlBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this delete compliance control bad request response has a 2xx status code
func (o *DeleteComplianceControlBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete compliance control bad request response has a 3xx status code
func (o *DeleteComplianceControlBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete compliance control bad request response has a 4xx status code
func (o *DeleteComplianceControlBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete compliance control bad request response has a 5xx status code
func (o *DeleteComplianceControlBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete compliance control bad request response a status code equal to that given
func (o *DeleteComplianceControlBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete compliance control bad request response
func (o *DeleteComplianceControlBadRequest) Code() int {
	return 400
}

func (o *DeleteComplianceControlBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /cloud-policies/entities/compliance/controls/v1][%d] deleteComplianceControlBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteComplianceControlBadRequest) String() string {
	return fmt.Sprintf("[DELETE /cloud-policies/entities/compliance/controls/v1][%d] deleteComplianceControlBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteComplianceControlBadRequest) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *DeleteComplianceControlBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteComplianceControlForbidden creates a DeleteComplianceControlForbidden with default headers values
func NewDeleteComplianceControlForbidden() *DeleteComplianceControlForbidden {
	return &DeleteComplianceControlForbidden{}
}

/*
DeleteComplianceControlForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteComplianceControlForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete compliance control forbidden response has a 2xx status code
func (o *DeleteComplianceControlForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete compliance control forbidden response has a 3xx status code
func (o *DeleteComplianceControlForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete compliance control forbidden response has a 4xx status code
func (o *DeleteComplianceControlForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete compliance control forbidden response has a 5xx status code
func (o *DeleteComplianceControlForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete compliance control forbidden response a status code equal to that given
func (o *DeleteComplianceControlForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete compliance control forbidden response
func (o *DeleteComplianceControlForbidden) Code() int {
	return 403
}

func (o *DeleteComplianceControlForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cloud-policies/entities/compliance/controls/v1][%d] deleteComplianceControlForbidden  %+v", 403, o.Payload)
}

func (o *DeleteComplianceControlForbidden) String() string {
	return fmt.Sprintf("[DELETE /cloud-policies/entities/compliance/controls/v1][%d] deleteComplianceControlForbidden  %+v", 403, o.Payload)
}

func (o *DeleteComplianceControlForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeleteComplianceControlForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteComplianceControlNotFound creates a DeleteComplianceControlNotFound with default headers values
func NewDeleteComplianceControlNotFound() *DeleteComplianceControlNotFound {
	return &DeleteComplianceControlNotFound{}
}

/*
DeleteComplianceControlNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteComplianceControlNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this delete compliance control not found response has a 2xx status code
func (o *DeleteComplianceControlNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete compliance control not found response has a 3xx status code
func (o *DeleteComplianceControlNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete compliance control not found response has a 4xx status code
func (o *DeleteComplianceControlNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete compliance control not found response has a 5xx status code
func (o *DeleteComplianceControlNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete compliance control not found response a status code equal to that given
func (o *DeleteComplianceControlNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete compliance control not found response
func (o *DeleteComplianceControlNotFound) Code() int {
	return 404
}

func (o *DeleteComplianceControlNotFound) Error() string {
	return fmt.Sprintf("[DELETE /cloud-policies/entities/compliance/controls/v1][%d] deleteComplianceControlNotFound  %+v", 404, o.Payload)
}

func (o *DeleteComplianceControlNotFound) String() string {
	return fmt.Sprintf("[DELETE /cloud-policies/entities/compliance/controls/v1][%d] deleteComplianceControlNotFound  %+v", 404, o.Payload)
}

func (o *DeleteComplianceControlNotFound) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *DeleteComplianceControlNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteComplianceControlTooManyRequests creates a DeleteComplianceControlTooManyRequests with default headers values
func NewDeleteComplianceControlTooManyRequests() *DeleteComplianceControlTooManyRequests {
	return &DeleteComplianceControlTooManyRequests{}
}

/*
DeleteComplianceControlTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type DeleteComplianceControlTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete compliance control too many requests response has a 2xx status code
func (o *DeleteComplianceControlTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete compliance control too many requests response has a 3xx status code
func (o *DeleteComplianceControlTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete compliance control too many requests response has a 4xx status code
func (o *DeleteComplianceControlTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete compliance control too many requests response has a 5xx status code
func (o *DeleteComplianceControlTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete compliance control too many requests response a status code equal to that given
func (o *DeleteComplianceControlTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete compliance control too many requests response
func (o *DeleteComplianceControlTooManyRequests) Code() int {
	return 429
}

func (o *DeleteComplianceControlTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /cloud-policies/entities/compliance/controls/v1][%d] deleteComplianceControlTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteComplianceControlTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /cloud-policies/entities/compliance/controls/v1][%d] deleteComplianceControlTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteComplianceControlTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeleteComplianceControlTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteComplianceControlInternalServerError creates a DeleteComplianceControlInternalServerError with default headers values
func NewDeleteComplianceControlInternalServerError() *DeleteComplianceControlInternalServerError {
	return &DeleteComplianceControlInternalServerError{}
}

/*
DeleteComplianceControlInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type DeleteComplianceControlInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete compliance control internal server error response has a 2xx status code
func (o *DeleteComplianceControlInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete compliance control internal server error response has a 3xx status code
func (o *DeleteComplianceControlInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete compliance control internal server error response has a 4xx status code
func (o *DeleteComplianceControlInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete compliance control internal server error response has a 5xx status code
func (o *DeleteComplianceControlInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete compliance control internal server error response a status code equal to that given
func (o *DeleteComplianceControlInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete compliance control internal server error response
func (o *DeleteComplianceControlInternalServerError) Code() int {
	return 500
}

func (o *DeleteComplianceControlInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /cloud-policies/entities/compliance/controls/v1][%d] deleteComplianceControlInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteComplianceControlInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /cloud-policies/entities/compliance/controls/v1][%d] deleteComplianceControlInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteComplianceControlInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeleteComplianceControlInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
