// Code generated by go-swagger; DO NOT EDIT.

package cloud_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetEvaluationResultReader is a Reader for the GetEvaluationResult structure.
type GetEvaluationResultReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEvaluationResultReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEvaluationResultOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetEvaluationResultBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetEvaluationResultForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetEvaluationResultTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetEvaluationResultInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cloud-policies/entities/evaluation/v1] GetEvaluationResult", response, response.Code())
	}
}

// NewGetEvaluationResultOK creates a GetEvaluationResultOK with default headers values
func NewGetEvaluationResultOK() *GetEvaluationResultOK {
	return &GetEvaluationResultOK{}
}

/*
GetEvaluationResultOK describes a response with status code 200, with default header values.

OK
*/
type GetEvaluationResultOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonCursorQueryResponse
}

// IsSuccess returns true when this get evaluation result o k response has a 2xx status code
func (o *GetEvaluationResultOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get evaluation result o k response has a 3xx status code
func (o *GetEvaluationResultOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get evaluation result o k response has a 4xx status code
func (o *GetEvaluationResultOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get evaluation result o k response has a 5xx status code
func (o *GetEvaluationResultOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get evaluation result o k response a status code equal to that given
func (o *GetEvaluationResultOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get evaluation result o k response
func (o *GetEvaluationResultOK) Code() int {
	return 200
}

func (o *GetEvaluationResultOK) Error() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/evaluation/v1][%d] getEvaluationResultOK  %+v", 200, o.Payload)
}

func (o *GetEvaluationResultOK) String() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/evaluation/v1][%d] getEvaluationResultOK  %+v", 200, o.Payload)
}

func (o *GetEvaluationResultOK) GetPayload() *models.CommonCursorQueryResponse {
	return o.Payload
}

func (o *GetEvaluationResultOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonCursorQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEvaluationResultBadRequest creates a GetEvaluationResultBadRequest with default headers values
func NewGetEvaluationResultBadRequest() *GetEvaluationResultBadRequest {
	return &GetEvaluationResultBadRequest{}
}

/*
GetEvaluationResultBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetEvaluationResultBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonCursorQueryResponse
}

// IsSuccess returns true when this get evaluation result bad request response has a 2xx status code
func (o *GetEvaluationResultBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get evaluation result bad request response has a 3xx status code
func (o *GetEvaluationResultBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get evaluation result bad request response has a 4xx status code
func (o *GetEvaluationResultBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get evaluation result bad request response has a 5xx status code
func (o *GetEvaluationResultBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get evaluation result bad request response a status code equal to that given
func (o *GetEvaluationResultBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get evaluation result bad request response
func (o *GetEvaluationResultBadRequest) Code() int {
	return 400
}

func (o *GetEvaluationResultBadRequest) Error() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/evaluation/v1][%d] getEvaluationResultBadRequest  %+v", 400, o.Payload)
}

func (o *GetEvaluationResultBadRequest) String() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/evaluation/v1][%d] getEvaluationResultBadRequest  %+v", 400, o.Payload)
}

func (o *GetEvaluationResultBadRequest) GetPayload() *models.CommonCursorQueryResponse {
	return o.Payload
}

func (o *GetEvaluationResultBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonCursorQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEvaluationResultForbidden creates a GetEvaluationResultForbidden with default headers values
func NewGetEvaluationResultForbidden() *GetEvaluationResultForbidden {
	return &GetEvaluationResultForbidden{}
}

/*
GetEvaluationResultForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetEvaluationResultForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get evaluation result forbidden response has a 2xx status code
func (o *GetEvaluationResultForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get evaluation result forbidden response has a 3xx status code
func (o *GetEvaluationResultForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get evaluation result forbidden response has a 4xx status code
func (o *GetEvaluationResultForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get evaluation result forbidden response has a 5xx status code
func (o *GetEvaluationResultForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get evaluation result forbidden response a status code equal to that given
func (o *GetEvaluationResultForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get evaluation result forbidden response
func (o *GetEvaluationResultForbidden) Code() int {
	return 403
}

func (o *GetEvaluationResultForbidden) Error() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/evaluation/v1][%d] getEvaluationResultForbidden  %+v", 403, o.Payload)
}

func (o *GetEvaluationResultForbidden) String() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/evaluation/v1][%d] getEvaluationResultForbidden  %+v", 403, o.Payload)
}

func (o *GetEvaluationResultForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetEvaluationResultForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEvaluationResultTooManyRequests creates a GetEvaluationResultTooManyRequests with default headers values
func NewGetEvaluationResultTooManyRequests() *GetEvaluationResultTooManyRequests {
	return &GetEvaluationResultTooManyRequests{}
}

/*
GetEvaluationResultTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetEvaluationResultTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get evaluation result too many requests response has a 2xx status code
func (o *GetEvaluationResultTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get evaluation result too many requests response has a 3xx status code
func (o *GetEvaluationResultTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get evaluation result too many requests response has a 4xx status code
func (o *GetEvaluationResultTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get evaluation result too many requests response has a 5xx status code
func (o *GetEvaluationResultTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get evaluation result too many requests response a status code equal to that given
func (o *GetEvaluationResultTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get evaluation result too many requests response
func (o *GetEvaluationResultTooManyRequests) Code() int {
	return 429
}

func (o *GetEvaluationResultTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/evaluation/v1][%d] getEvaluationResultTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetEvaluationResultTooManyRequests) String() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/evaluation/v1][%d] getEvaluationResultTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetEvaluationResultTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetEvaluationResultTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEvaluationResultInternalServerError creates a GetEvaluationResultInternalServerError with default headers values
func NewGetEvaluationResultInternalServerError() *GetEvaluationResultInternalServerError {
	return &GetEvaluationResultInternalServerError{}
}

/*
GetEvaluationResultInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetEvaluationResultInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonCursorQueryResponse
}

// IsSuccess returns true when this get evaluation result internal server error response has a 2xx status code
func (o *GetEvaluationResultInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get evaluation result internal server error response has a 3xx status code
func (o *GetEvaluationResultInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get evaluation result internal server error response has a 4xx status code
func (o *GetEvaluationResultInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get evaluation result internal server error response has a 5xx status code
func (o *GetEvaluationResultInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get evaluation result internal server error response a status code equal to that given
func (o *GetEvaluationResultInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get evaluation result internal server error response
func (o *GetEvaluationResultInternalServerError) Code() int {
	return 500
}

func (o *GetEvaluationResultInternalServerError) Error() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/evaluation/v1][%d] getEvaluationResultInternalServerError  %+v", 500, o.Payload)
}

func (o *GetEvaluationResultInternalServerError) String() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/evaluation/v1][%d] getEvaluationResultInternalServerError  %+v", 500, o.Payload)
}

func (o *GetEvaluationResultInternalServerError) GetPayload() *models.CommonCursorQueryResponse {
	return o.Payload
}

func (o *GetEvaluationResultInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonCursorQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
