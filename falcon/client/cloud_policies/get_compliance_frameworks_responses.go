// Code generated by go-swagger; DO NOT EDIT.

package cloud_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetComplianceFrameworksReader is a Reader for the GetComplianceFrameworks structure.
type GetComplianceFrameworksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetComplianceFrameworksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetComplianceFrameworksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetComplianceFrameworksBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetComplianceFrameworksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetComplianceFrameworksNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetComplianceFrameworksTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetComplianceFrameworksInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cloud-policies/entities/compliance/frameworks/v1] GetComplianceFrameworks", response, response.Code())
	}
}

// NewGetComplianceFrameworksOK creates a GetComplianceFrameworksOK with default headers values
func NewGetComplianceFrameworksOK() *GetComplianceFrameworksOK {
	return &GetComplianceFrameworksOK{}
}

/*
GetComplianceFrameworksOK describes a response with status code 200, with default header values.

OK
*/
type GetComplianceFrameworksOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonGetComplianceFrameworksResponse
}

// IsSuccess returns true when this get compliance frameworks o k response has a 2xx status code
func (o *GetComplianceFrameworksOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get compliance frameworks o k response has a 3xx status code
func (o *GetComplianceFrameworksOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get compliance frameworks o k response has a 4xx status code
func (o *GetComplianceFrameworksOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get compliance frameworks o k response has a 5xx status code
func (o *GetComplianceFrameworksOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get compliance frameworks o k response a status code equal to that given
func (o *GetComplianceFrameworksOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get compliance frameworks o k response
func (o *GetComplianceFrameworksOK) Code() int {
	return 200
}

func (o *GetComplianceFrameworksOK) Error() string {
	return fmt.Sprintf("[GET /cloud-policies/entities/compliance/frameworks/v1][%d] getComplianceFrameworksOK  %+v", 200, o.Payload)
}

func (o *GetComplianceFrameworksOK) String() string {
	return fmt.Sprintf("[GET /cloud-policies/entities/compliance/frameworks/v1][%d] getComplianceFrameworksOK  %+v", 200, o.Payload)
}

func (o *GetComplianceFrameworksOK) GetPayload() *models.CommonGetComplianceFrameworksResponse {
	return o.Payload
}

func (o *GetComplianceFrameworksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonGetComplianceFrameworksResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetComplianceFrameworksBadRequest creates a GetComplianceFrameworksBadRequest with default headers values
func NewGetComplianceFrameworksBadRequest() *GetComplianceFrameworksBadRequest {
	return &GetComplianceFrameworksBadRequest{}
}

/*
GetComplianceFrameworksBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetComplianceFrameworksBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this get compliance frameworks bad request response has a 2xx status code
func (o *GetComplianceFrameworksBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get compliance frameworks bad request response has a 3xx status code
func (o *GetComplianceFrameworksBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get compliance frameworks bad request response has a 4xx status code
func (o *GetComplianceFrameworksBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get compliance frameworks bad request response has a 5xx status code
func (o *GetComplianceFrameworksBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get compliance frameworks bad request response a status code equal to that given
func (o *GetComplianceFrameworksBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get compliance frameworks bad request response
func (o *GetComplianceFrameworksBadRequest) Code() int {
	return 400
}

func (o *GetComplianceFrameworksBadRequest) Error() string {
	return fmt.Sprintf("[GET /cloud-policies/entities/compliance/frameworks/v1][%d] getComplianceFrameworksBadRequest  %+v", 400, o.Payload)
}

func (o *GetComplianceFrameworksBadRequest) String() string {
	return fmt.Sprintf("[GET /cloud-policies/entities/compliance/frameworks/v1][%d] getComplianceFrameworksBadRequest  %+v", 400, o.Payload)
}

func (o *GetComplianceFrameworksBadRequest) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *GetComplianceFrameworksBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetComplianceFrameworksForbidden creates a GetComplianceFrameworksForbidden with default headers values
func NewGetComplianceFrameworksForbidden() *GetComplianceFrameworksForbidden {
	return &GetComplianceFrameworksForbidden{}
}

/*
GetComplianceFrameworksForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetComplianceFrameworksForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get compliance frameworks forbidden response has a 2xx status code
func (o *GetComplianceFrameworksForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get compliance frameworks forbidden response has a 3xx status code
func (o *GetComplianceFrameworksForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get compliance frameworks forbidden response has a 4xx status code
func (o *GetComplianceFrameworksForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get compliance frameworks forbidden response has a 5xx status code
func (o *GetComplianceFrameworksForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get compliance frameworks forbidden response a status code equal to that given
func (o *GetComplianceFrameworksForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get compliance frameworks forbidden response
func (o *GetComplianceFrameworksForbidden) Code() int {
	return 403
}

func (o *GetComplianceFrameworksForbidden) Error() string {
	return fmt.Sprintf("[GET /cloud-policies/entities/compliance/frameworks/v1][%d] getComplianceFrameworksForbidden  %+v", 403, o.Payload)
}

func (o *GetComplianceFrameworksForbidden) String() string {
	return fmt.Sprintf("[GET /cloud-policies/entities/compliance/frameworks/v1][%d] getComplianceFrameworksForbidden  %+v", 403, o.Payload)
}

func (o *GetComplianceFrameworksForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetComplianceFrameworksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetComplianceFrameworksNotFound creates a GetComplianceFrameworksNotFound with default headers values
func NewGetComplianceFrameworksNotFound() *GetComplianceFrameworksNotFound {
	return &GetComplianceFrameworksNotFound{}
}

/*
GetComplianceFrameworksNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetComplianceFrameworksNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonGetComplianceFrameworksResponse
}

// IsSuccess returns true when this get compliance frameworks not found response has a 2xx status code
func (o *GetComplianceFrameworksNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get compliance frameworks not found response has a 3xx status code
func (o *GetComplianceFrameworksNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get compliance frameworks not found response has a 4xx status code
func (o *GetComplianceFrameworksNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get compliance frameworks not found response has a 5xx status code
func (o *GetComplianceFrameworksNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get compliance frameworks not found response a status code equal to that given
func (o *GetComplianceFrameworksNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get compliance frameworks not found response
func (o *GetComplianceFrameworksNotFound) Code() int {
	return 404
}

func (o *GetComplianceFrameworksNotFound) Error() string {
	return fmt.Sprintf("[GET /cloud-policies/entities/compliance/frameworks/v1][%d] getComplianceFrameworksNotFound  %+v", 404, o.Payload)
}

func (o *GetComplianceFrameworksNotFound) String() string {
	return fmt.Sprintf("[GET /cloud-policies/entities/compliance/frameworks/v1][%d] getComplianceFrameworksNotFound  %+v", 404, o.Payload)
}

func (o *GetComplianceFrameworksNotFound) GetPayload() *models.CommonGetComplianceFrameworksResponse {
	return o.Payload
}

func (o *GetComplianceFrameworksNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonGetComplianceFrameworksResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetComplianceFrameworksTooManyRequests creates a GetComplianceFrameworksTooManyRequests with default headers values
func NewGetComplianceFrameworksTooManyRequests() *GetComplianceFrameworksTooManyRequests {
	return &GetComplianceFrameworksTooManyRequests{}
}

/*
GetComplianceFrameworksTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetComplianceFrameworksTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get compliance frameworks too many requests response has a 2xx status code
func (o *GetComplianceFrameworksTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get compliance frameworks too many requests response has a 3xx status code
func (o *GetComplianceFrameworksTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get compliance frameworks too many requests response has a 4xx status code
func (o *GetComplianceFrameworksTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get compliance frameworks too many requests response has a 5xx status code
func (o *GetComplianceFrameworksTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get compliance frameworks too many requests response a status code equal to that given
func (o *GetComplianceFrameworksTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get compliance frameworks too many requests response
func (o *GetComplianceFrameworksTooManyRequests) Code() int {
	return 429
}

func (o *GetComplianceFrameworksTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /cloud-policies/entities/compliance/frameworks/v1][%d] getComplianceFrameworksTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetComplianceFrameworksTooManyRequests) String() string {
	return fmt.Sprintf("[GET /cloud-policies/entities/compliance/frameworks/v1][%d] getComplianceFrameworksTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetComplianceFrameworksTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetComplianceFrameworksTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetComplianceFrameworksInternalServerError creates a GetComplianceFrameworksInternalServerError with default headers values
func NewGetComplianceFrameworksInternalServerError() *GetComplianceFrameworksInternalServerError {
	return &GetComplianceFrameworksInternalServerError{}
}

/*
GetComplianceFrameworksInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetComplianceFrameworksInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this get compliance frameworks internal server error response has a 2xx status code
func (o *GetComplianceFrameworksInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get compliance frameworks internal server error response has a 3xx status code
func (o *GetComplianceFrameworksInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get compliance frameworks internal server error response has a 4xx status code
func (o *GetComplianceFrameworksInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get compliance frameworks internal server error response has a 5xx status code
func (o *GetComplianceFrameworksInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get compliance frameworks internal server error response a status code equal to that given
func (o *GetComplianceFrameworksInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get compliance frameworks internal server error response
func (o *GetComplianceFrameworksInternalServerError) Code() int {
	return 500
}

func (o *GetComplianceFrameworksInternalServerError) Error() string {
	return fmt.Sprintf("[GET /cloud-policies/entities/compliance/frameworks/v1][%d] getComplianceFrameworksInternalServerError  %+v", 500, o.Payload)
}

func (o *GetComplianceFrameworksInternalServerError) String() string {
	return fmt.Sprintf("[GET /cloud-policies/entities/compliance/frameworks/v1][%d] getComplianceFrameworksInternalServerError  %+v", 500, o.Payload)
}

func (o *GetComplianceFrameworksInternalServerError) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *GetComplianceFrameworksInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
