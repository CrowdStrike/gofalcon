// Code generated by go-swagger; DO NOT EDIT.

package cloud_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// QueryComplianceFrameworksReader is a Reader for the QueryComplianceFrameworks structure.
type QueryComplianceFrameworksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryComplianceFrameworksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryComplianceFrameworksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryComplianceFrameworksBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewQueryComplianceFrameworksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewQueryComplianceFrameworksTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewQueryComplianceFrameworksInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cloud-policies/queries/compliance/frameworks/v1] QueryComplianceFrameworks", response, response.Code())
	}
}

// NewQueryComplianceFrameworksOK creates a QueryComplianceFrameworksOK with default headers values
func NewQueryComplianceFrameworksOK() *QueryComplianceFrameworksOK {
	return &QueryComplianceFrameworksOK{}
}

/*
QueryComplianceFrameworksOK describes a response with status code 200, with default header values.

OK
*/
type QueryComplianceFrameworksOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonQueryResponse
}

// IsSuccess returns true when this query compliance frameworks o k response has a 2xx status code
func (o *QueryComplianceFrameworksOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this query compliance frameworks o k response has a 3xx status code
func (o *QueryComplianceFrameworksOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query compliance frameworks o k response has a 4xx status code
func (o *QueryComplianceFrameworksOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this query compliance frameworks o k response has a 5xx status code
func (o *QueryComplianceFrameworksOK) IsServerError() bool {
	return false
}

// IsCode returns true when this query compliance frameworks o k response a status code equal to that given
func (o *QueryComplianceFrameworksOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the query compliance frameworks o k response
func (o *QueryComplianceFrameworksOK) Code() int {
	return 200
}

func (o *QueryComplianceFrameworksOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-policies/queries/compliance/frameworks/v1][%d] queryComplianceFrameworksOK %s", 200, payload)
}

func (o *QueryComplianceFrameworksOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-policies/queries/compliance/frameworks/v1][%d] queryComplianceFrameworksOK %s", 200, payload)
}

func (o *QueryComplianceFrameworksOK) GetPayload() *models.CommonQueryResponse {
	return o.Payload
}

func (o *QueryComplianceFrameworksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryComplianceFrameworksBadRequest creates a QueryComplianceFrameworksBadRequest with default headers values
func NewQueryComplianceFrameworksBadRequest() *QueryComplianceFrameworksBadRequest {
	return &QueryComplianceFrameworksBadRequest{}
}

/*
QueryComplianceFrameworksBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type QueryComplianceFrameworksBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this query compliance frameworks bad request response has a 2xx status code
func (o *QueryComplianceFrameworksBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query compliance frameworks bad request response has a 3xx status code
func (o *QueryComplianceFrameworksBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query compliance frameworks bad request response has a 4xx status code
func (o *QueryComplianceFrameworksBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this query compliance frameworks bad request response has a 5xx status code
func (o *QueryComplianceFrameworksBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this query compliance frameworks bad request response a status code equal to that given
func (o *QueryComplianceFrameworksBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the query compliance frameworks bad request response
func (o *QueryComplianceFrameworksBadRequest) Code() int {
	return 400
}

func (o *QueryComplianceFrameworksBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-policies/queries/compliance/frameworks/v1][%d] queryComplianceFrameworksBadRequest %s", 400, payload)
}

func (o *QueryComplianceFrameworksBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-policies/queries/compliance/frameworks/v1][%d] queryComplianceFrameworksBadRequest %s", 400, payload)
}

func (o *QueryComplianceFrameworksBadRequest) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *QueryComplianceFrameworksBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryComplianceFrameworksForbidden creates a QueryComplianceFrameworksForbidden with default headers values
func NewQueryComplianceFrameworksForbidden() *QueryComplianceFrameworksForbidden {
	return &QueryComplianceFrameworksForbidden{}
}

/*
QueryComplianceFrameworksForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type QueryComplianceFrameworksForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this query compliance frameworks forbidden response has a 2xx status code
func (o *QueryComplianceFrameworksForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query compliance frameworks forbidden response has a 3xx status code
func (o *QueryComplianceFrameworksForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query compliance frameworks forbidden response has a 4xx status code
func (o *QueryComplianceFrameworksForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this query compliance frameworks forbidden response has a 5xx status code
func (o *QueryComplianceFrameworksForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this query compliance frameworks forbidden response a status code equal to that given
func (o *QueryComplianceFrameworksForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the query compliance frameworks forbidden response
func (o *QueryComplianceFrameworksForbidden) Code() int {
	return 403
}

func (o *QueryComplianceFrameworksForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-policies/queries/compliance/frameworks/v1][%d] queryComplianceFrameworksForbidden %s", 403, payload)
}

func (o *QueryComplianceFrameworksForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-policies/queries/compliance/frameworks/v1][%d] queryComplianceFrameworksForbidden %s", 403, payload)
}

func (o *QueryComplianceFrameworksForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryComplianceFrameworksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryComplianceFrameworksTooManyRequests creates a QueryComplianceFrameworksTooManyRequests with default headers values
func NewQueryComplianceFrameworksTooManyRequests() *QueryComplianceFrameworksTooManyRequests {
	return &QueryComplianceFrameworksTooManyRequests{}
}

/*
QueryComplianceFrameworksTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type QueryComplianceFrameworksTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this query compliance frameworks too many requests response has a 2xx status code
func (o *QueryComplianceFrameworksTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query compliance frameworks too many requests response has a 3xx status code
func (o *QueryComplianceFrameworksTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query compliance frameworks too many requests response has a 4xx status code
func (o *QueryComplianceFrameworksTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this query compliance frameworks too many requests response has a 5xx status code
func (o *QueryComplianceFrameworksTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this query compliance frameworks too many requests response a status code equal to that given
func (o *QueryComplianceFrameworksTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the query compliance frameworks too many requests response
func (o *QueryComplianceFrameworksTooManyRequests) Code() int {
	return 429
}

func (o *QueryComplianceFrameworksTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-policies/queries/compliance/frameworks/v1][%d] queryComplianceFrameworksTooManyRequests %s", 429, payload)
}

func (o *QueryComplianceFrameworksTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-policies/queries/compliance/frameworks/v1][%d] queryComplianceFrameworksTooManyRequests %s", 429, payload)
}

func (o *QueryComplianceFrameworksTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryComplianceFrameworksTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryComplianceFrameworksInternalServerError creates a QueryComplianceFrameworksInternalServerError with default headers values
func NewQueryComplianceFrameworksInternalServerError() *QueryComplianceFrameworksInternalServerError {
	return &QueryComplianceFrameworksInternalServerError{}
}

/*
QueryComplianceFrameworksInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type QueryComplianceFrameworksInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this query compliance frameworks internal server error response has a 2xx status code
func (o *QueryComplianceFrameworksInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query compliance frameworks internal server error response has a 3xx status code
func (o *QueryComplianceFrameworksInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query compliance frameworks internal server error response has a 4xx status code
func (o *QueryComplianceFrameworksInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this query compliance frameworks internal server error response has a 5xx status code
func (o *QueryComplianceFrameworksInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this query compliance frameworks internal server error response a status code equal to that given
func (o *QueryComplianceFrameworksInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the query compliance frameworks internal server error response
func (o *QueryComplianceFrameworksInternalServerError) Code() int {
	return 500
}

func (o *QueryComplianceFrameworksInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-policies/queries/compliance/frameworks/v1][%d] queryComplianceFrameworksInternalServerError %s", 500, payload)
}

func (o *QueryComplianceFrameworksInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-policies/queries/compliance/frameworks/v1][%d] queryComplianceFrameworksInternalServerError %s", 500, payload)
}

func (o *QueryComplianceFrameworksInternalServerError) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *QueryComplianceFrameworksInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
