// Code generated by go-swagger; DO NOT EDIT.

package cloud_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// QueryRuleReader is a Reader for the QueryRule structure.
type QueryRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewQueryRuleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewQueryRuleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewQueryRuleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cloud-policies/queries/rules/v1] QueryRule", response, response.Code())
	}
}

// NewQueryRuleOK creates a QueryRuleOK with default headers values
func NewQueryRuleOK() *QueryRuleOK {
	return &QueryRuleOK{}
}

/*
QueryRuleOK describes a response with status code 200, with default header values.

OK
*/
type QueryRuleOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this query rule o k response has a 2xx status code
func (o *QueryRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this query rule o k response has a 3xx status code
func (o *QueryRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query rule o k response has a 4xx status code
func (o *QueryRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this query rule o k response has a 5xx status code
func (o *QueryRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this query rule o k response a status code equal to that given
func (o *QueryRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the query rule o k response
func (o *QueryRuleOK) Code() int {
	return 200
}

func (o *QueryRuleOK) Error() string {
	return fmt.Sprintf("[GET /cloud-policies/queries/rules/v1][%d] queryRuleOK  %+v", 200, o.Payload)
}

func (o *QueryRuleOK) String() string {
	return fmt.Sprintf("[GET /cloud-policies/queries/rules/v1][%d] queryRuleOK  %+v", 200, o.Payload)
}

func (o *QueryRuleOK) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *QueryRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryRuleForbidden creates a QueryRuleForbidden with default headers values
func NewQueryRuleForbidden() *QueryRuleForbidden {
	return &QueryRuleForbidden{}
}

/*
QueryRuleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type QueryRuleForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this query rule forbidden response has a 2xx status code
func (o *QueryRuleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query rule forbidden response has a 3xx status code
func (o *QueryRuleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query rule forbidden response has a 4xx status code
func (o *QueryRuleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this query rule forbidden response has a 5xx status code
func (o *QueryRuleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this query rule forbidden response a status code equal to that given
func (o *QueryRuleForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the query rule forbidden response
func (o *QueryRuleForbidden) Code() int {
	return 403
}

func (o *QueryRuleForbidden) Error() string {
	return fmt.Sprintf("[GET /cloud-policies/queries/rules/v1][%d] queryRuleForbidden  %+v", 403, o.Payload)
}

func (o *QueryRuleForbidden) String() string {
	return fmt.Sprintf("[GET /cloud-policies/queries/rules/v1][%d] queryRuleForbidden  %+v", 403, o.Payload)
}

func (o *QueryRuleForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryRuleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryRuleTooManyRequests creates a QueryRuleTooManyRequests with default headers values
func NewQueryRuleTooManyRequests() *QueryRuleTooManyRequests {
	return &QueryRuleTooManyRequests{}
}

/*
QueryRuleTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type QueryRuleTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this query rule too many requests response has a 2xx status code
func (o *QueryRuleTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query rule too many requests response has a 3xx status code
func (o *QueryRuleTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query rule too many requests response has a 4xx status code
func (o *QueryRuleTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this query rule too many requests response has a 5xx status code
func (o *QueryRuleTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this query rule too many requests response a status code equal to that given
func (o *QueryRuleTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the query rule too many requests response
func (o *QueryRuleTooManyRequests) Code() int {
	return 429
}

func (o *QueryRuleTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /cloud-policies/queries/rules/v1][%d] queryRuleTooManyRequests  %+v", 429, o.Payload)
}

func (o *QueryRuleTooManyRequests) String() string {
	return fmt.Sprintf("[GET /cloud-policies/queries/rules/v1][%d] queryRuleTooManyRequests  %+v", 429, o.Payload)
}

func (o *QueryRuleTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryRuleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryRuleInternalServerError creates a QueryRuleInternalServerError with default headers values
func NewQueryRuleInternalServerError() *QueryRuleInternalServerError {
	return &QueryRuleInternalServerError{}
}

/*
QueryRuleInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type QueryRuleInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this query rule internal server error response has a 2xx status code
func (o *QueryRuleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query rule internal server error response has a 3xx status code
func (o *QueryRuleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query rule internal server error response has a 4xx status code
func (o *QueryRuleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this query rule internal server error response has a 5xx status code
func (o *QueryRuleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this query rule internal server error response a status code equal to that given
func (o *QueryRuleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the query rule internal server error response
func (o *QueryRuleInternalServerError) Code() int {
	return 500
}

func (o *QueryRuleInternalServerError) Error() string {
	return fmt.Sprintf("[GET /cloud-policies/queries/rules/v1][%d] queryRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *QueryRuleInternalServerError) String() string {
	return fmt.Sprintf("[GET /cloud-policies/queries/rules/v1][%d] queryRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *QueryRuleInternalServerError) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *QueryRuleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
