// Code generated by go-swagger; DO NOT EDIT.

package cloud_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cloud policies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cloud policies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRule(params *CreateRuleParams, opts ...ClientOption) (*CreateRuleOK, error)

	CreateRuleOverride(params *CreateRuleOverrideParams, opts ...ClientOption) (*CreateRuleOverrideOK, error)

	DeleteRule(params *DeleteRuleParams, opts ...ClientOption) (*DeleteRuleOK, error)

	DeleteRuleOverride(params *DeleteRuleOverrideParams, opts ...ClientOption) (*DeleteRuleOverrideOK, *DeleteRuleOverrideNoContent, error)

	GetCombinedRulesExport(params *GetCombinedRulesExportParams, opts ...ClientOption) (*GetCombinedRulesExportOK, error)

	GetComplianceControls(params *GetComplianceControlsParams, opts ...ClientOption) (*GetComplianceControlsOK, error)

	GetComplianceFrameworks(params *GetComplianceFrameworksParams, opts ...ClientOption) (*GetComplianceFrameworksOK, error)

	GetEvaluationResult(params *GetEvaluationResultParams, opts ...ClientOption) (*GetEvaluationResultOK, error)

	GetRule(params *GetRuleParams, opts ...ClientOption) (*GetRuleOK, error)

	GetRuleOverride(params *GetRuleOverrideParams, opts ...ClientOption) (*GetRuleOverrideOK, error)

	GetValuesByFieldComplianceControl(params *GetValuesByFieldComplianceControlParams, opts ...ClientOption) (*GetValuesByFieldComplianceControlOK, error)

	GetValuesByFieldComplianceFramework(params *GetValuesByFieldComplianceFrameworkParams, opts ...ClientOption) (*GetValuesByFieldComplianceFrameworkOK, error)

	GetValuesByFieldRule(params *GetValuesByFieldRuleParams, opts ...ClientOption) (*GetValuesByFieldRuleOK, error)

	QueryComplianceControls(params *QueryComplianceControlsParams, opts ...ClientOption) (*QueryComplianceControlsOK, error)

	QueryComplianceFrameworks(params *QueryComplianceFrameworksParams, opts ...ClientOption) (*QueryComplianceFrameworksOK, error)

	QueryRule(params *QueryRuleParams, opts ...ClientOption) (*QueryRuleOK, error)

	QueryRuleOverride(params *QueryRuleOverrideParams, opts ...ClientOption) (*QueryRuleOverrideOK, error)

	UpdateRule(params *UpdateRuleParams, opts ...ClientOption) (*UpdateRuleOK, error)

	UpdateRuleOverride(params *UpdateRuleOverrideParams, opts ...ClientOption) (*UpdateRuleOverrideOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateRule creates a new rule
*/
func (a *Client) CreateRule(params *CreateRuleParams, opts ...ClientOption) (*CreateRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateRule",
		Method:             "POST",
		PathPattern:        "/cloud-policies/entities/rules/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateRuleOverride creates a new rule override
*/
func (a *Client) CreateRuleOverride(params *CreateRuleOverrideParams, opts ...ClientOption) (*CreateRuleOverrideOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRuleOverrideParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateRuleOverride",
		Method:             "POST",
		PathPattern:        "/cloud-policies/entities/rule-overrides/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRuleOverrideReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRuleOverrideOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateRuleOverride: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRule deletes a rule
*/
func (a *Client) DeleteRule(params *DeleteRuleParams, opts ...ClientOption) (*DeleteRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRule",
		Method:             "DELETE",
		PathPattern:        "/cloud-policies/entities/rules/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRuleOverride deletes a rule override
*/
func (a *Client) DeleteRuleOverride(params *DeleteRuleOverrideParams, opts ...ClientOption) (*DeleteRuleOverrideOK, *DeleteRuleOverrideNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRuleOverrideParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRuleOverride",
		Method:             "DELETE",
		PathPattern:        "/cloud-policies/entities/rule-overrides/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRuleOverrideReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteRuleOverrideOK:
		return value, nil, nil
	case *DeleteRuleOverrideNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloud_policies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCombinedRulesExport exports rule details
*/
func (a *Client) GetCombinedRulesExport(params *GetCombinedRulesExportParams, opts ...ClientOption) (*GetCombinedRulesExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCombinedRulesExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCombinedRulesExport",
		Method:             "POST",
		PathPattern:        "/cloud-policies/combined/rules/export/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCombinedRulesExportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCombinedRulesExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCombinedRulesExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComplianceControls gets compliance controls by ID
*/
func (a *Client) GetComplianceControls(params *GetComplianceControlsParams, opts ...ClientOption) (*GetComplianceControlsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceControlsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceControls",
		Method:             "GET",
		PathPattern:        "/cloud-policies/entities/compliance/controls/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceControlsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceControlsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceControls: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComplianceFrameworks gets compliance frameworks by ID
*/
func (a *Client) GetComplianceFrameworks(params *GetComplianceFrameworksParams, opts ...ClientOption) (*GetComplianceFrameworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceFrameworksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceFrameworks",
		Method:             "GET",
		PathPattern:        "/cloud-policies/entities/compliance/frameworks/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceFrameworksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceFrameworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceFrameworks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEvaluationResult gets evaluation results based on the provided rule
*/
func (a *Client) GetEvaluationResult(params *GetEvaluationResultParams, opts ...ClientOption) (*GetEvaluationResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEvaluationResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEvaluationResult",
		Method:             "POST",
		PathPattern:        "/cloud-policies/entities/evaluation/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEvaluationResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEvaluationResultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEvaluationResult: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRule gets a rule by id
*/
func (a *Client) GetRule(params *GetRuleParams, opts ...ClientOption) (*GetRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRule",
		Method:             "GET",
		PathPattern:        "/cloud-policies/entities/rules/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRuleOverride gets a rule override
*/
func (a *Client) GetRuleOverride(params *GetRuleOverrideParams, opts ...ClientOption) (*GetRuleOverrideOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRuleOverrideParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRuleOverride",
		Method:             "GET",
		PathPattern:        "/cloud-policies/entities/rule-overrides/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRuleOverrideReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRuleOverrideOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRuleOverride: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetValuesByFieldComplianceControl gets distinct values for a field in compliance controls
*/
func (a *Client) GetValuesByFieldComplianceControl(params *GetValuesByFieldComplianceControlParams, opts ...ClientOption) (*GetValuesByFieldComplianceControlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetValuesByFieldComplianceControlParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetValuesByFieldComplianceControl",
		Method:             "GET",
		PathPattern:        "/cloud-policies/aggregates/compliance/controls/values-by-field/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetValuesByFieldComplianceControlReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetValuesByFieldComplianceControlOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetValuesByFieldComplianceControl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetValuesByFieldComplianceFramework gets distinct values for a field in compliance frameworks
*/
func (a *Client) GetValuesByFieldComplianceFramework(params *GetValuesByFieldComplianceFrameworkParams, opts ...ClientOption) (*GetValuesByFieldComplianceFrameworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetValuesByFieldComplianceFrameworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetValuesByFieldComplianceFramework",
		Method:             "GET",
		PathPattern:        "/cloud-policies/aggregates/compliance/frameworks/values-by-field/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetValuesByFieldComplianceFrameworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetValuesByFieldComplianceFrameworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetValuesByFieldComplianceFramework: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetValuesByFieldRule gets distinct values for a field in rules
*/
func (a *Client) GetValuesByFieldRule(params *GetValuesByFieldRuleParams, opts ...ClientOption) (*GetValuesByFieldRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetValuesByFieldRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetValuesByFieldRule",
		Method:             "GET",
		PathPattern:        "/cloud-policies/aggregates/rules/values-by-field/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetValuesByFieldRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetValuesByFieldRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetValuesByFieldRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueryComplianceControls queries for compliance controls by various parameters
*/
func (a *Client) QueryComplianceControls(params *QueryComplianceControlsParams, opts ...ClientOption) (*QueryComplianceControlsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryComplianceControlsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryComplianceControls",
		Method:             "GET",
		PathPattern:        "/cloud-policies/queries/compliance/controls/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryComplianceControlsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryComplianceControlsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryComplianceControls: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueryComplianceFrameworks queries for compliance frameworks by various parameters
*/
func (a *Client) QueryComplianceFrameworks(params *QueryComplianceFrameworksParams, opts ...ClientOption) (*QueryComplianceFrameworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryComplianceFrameworksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryComplianceFrameworks",
		Method:             "GET",
		PathPattern:        "/cloud-policies/queries/compliance/frameworks/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryComplianceFrameworksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryComplianceFrameworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryComplianceFrameworks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueryRule queries for rules by various parameters
*/
func (a *Client) QueryRule(params *QueryRuleParams, opts ...ClientOption) (*QueryRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryRule",
		Method:             "GET",
		PathPattern:        "/cloud-policies/queries/rules/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueryRuleOverride queries for rule overrides
*/
func (a *Client) QueryRuleOverride(params *QueryRuleOverrideParams, opts ...ClientOption) (*QueryRuleOverrideOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryRuleOverrideParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryRuleOverride",
		Method:             "GET",
		PathPattern:        "/cloud-policies/queries/rule-overrides/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryRuleOverrideReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryRuleOverrideOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryRuleOverride: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRule updates a rule
*/
func (a *Client) UpdateRule(params *UpdateRuleParams, opts ...ClientOption) (*UpdateRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateRule",
		Method:             "PATCH",
		PathPattern:        "/cloud-policies/entities/rules/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRuleOverride updates a rule override
*/
func (a *Client) UpdateRuleOverride(params *UpdateRuleOverrideParams, opts ...ClientOption) (*UpdateRuleOverrideOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRuleOverrideParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateRuleOverride",
		Method:             "PATCH",
		PathPattern:        "/cloud-policies/entities/rule-overrides/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRuleOverrideReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRuleOverrideOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateRuleOverride: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
