// Code generated by go-swagger; DO NOT EDIT.

package cloud_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CreateComplianceControlReader is a Reader for the CreateComplianceControl structure.
type CreateComplianceControlReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateComplianceControlReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateComplianceControlOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateComplianceControlBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateComplianceControlForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateComplianceControlTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateComplianceControlInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cloud-policies/entities/compliance/controls/v1] CreateComplianceControl", response, response.Code())
	}
}

// NewCreateComplianceControlOK creates a CreateComplianceControlOK with default headers values
func NewCreateComplianceControlOK() *CreateComplianceControlOK {
	return &CreateComplianceControlOK{}
}

/*
CreateComplianceControlOK describes a response with status code 200, with default header values.

OK
*/
type CreateComplianceControlOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonCreateComplianceControlResponse
}

// IsSuccess returns true when this create compliance control o k response has a 2xx status code
func (o *CreateComplianceControlOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create compliance control o k response has a 3xx status code
func (o *CreateComplianceControlOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create compliance control o k response has a 4xx status code
func (o *CreateComplianceControlOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create compliance control o k response has a 5xx status code
func (o *CreateComplianceControlOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create compliance control o k response a status code equal to that given
func (o *CreateComplianceControlOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create compliance control o k response
func (o *CreateComplianceControlOK) Code() int {
	return 200
}

func (o *CreateComplianceControlOK) Error() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/compliance/controls/v1][%d] createComplianceControlOK  %+v", 200, o.Payload)
}

func (o *CreateComplianceControlOK) String() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/compliance/controls/v1][%d] createComplianceControlOK  %+v", 200, o.Payload)
}

func (o *CreateComplianceControlOK) GetPayload() *models.CommonCreateComplianceControlResponse {
	return o.Payload
}

func (o *CreateComplianceControlOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonCreateComplianceControlResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateComplianceControlBadRequest creates a CreateComplianceControlBadRequest with default headers values
func NewCreateComplianceControlBadRequest() *CreateComplianceControlBadRequest {
	return &CreateComplianceControlBadRequest{}
}

/*
CreateComplianceControlBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateComplianceControlBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this create compliance control bad request response has a 2xx status code
func (o *CreateComplianceControlBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create compliance control bad request response has a 3xx status code
func (o *CreateComplianceControlBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create compliance control bad request response has a 4xx status code
func (o *CreateComplianceControlBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create compliance control bad request response has a 5xx status code
func (o *CreateComplianceControlBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create compliance control bad request response a status code equal to that given
func (o *CreateComplianceControlBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create compliance control bad request response
func (o *CreateComplianceControlBadRequest) Code() int {
	return 400
}

func (o *CreateComplianceControlBadRequest) Error() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/compliance/controls/v1][%d] createComplianceControlBadRequest  %+v", 400, o.Payload)
}

func (o *CreateComplianceControlBadRequest) String() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/compliance/controls/v1][%d] createComplianceControlBadRequest  %+v", 400, o.Payload)
}

func (o *CreateComplianceControlBadRequest) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *CreateComplianceControlBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateComplianceControlForbidden creates a CreateComplianceControlForbidden with default headers values
func NewCreateComplianceControlForbidden() *CreateComplianceControlForbidden {
	return &CreateComplianceControlForbidden{}
}

/*
CreateComplianceControlForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateComplianceControlForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this create compliance control forbidden response has a 2xx status code
func (o *CreateComplianceControlForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create compliance control forbidden response has a 3xx status code
func (o *CreateComplianceControlForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create compliance control forbidden response has a 4xx status code
func (o *CreateComplianceControlForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create compliance control forbidden response has a 5xx status code
func (o *CreateComplianceControlForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create compliance control forbidden response a status code equal to that given
func (o *CreateComplianceControlForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create compliance control forbidden response
func (o *CreateComplianceControlForbidden) Code() int {
	return 403
}

func (o *CreateComplianceControlForbidden) Error() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/compliance/controls/v1][%d] createComplianceControlForbidden  %+v", 403, o.Payload)
}

func (o *CreateComplianceControlForbidden) String() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/compliance/controls/v1][%d] createComplianceControlForbidden  %+v", 403, o.Payload)
}

func (o *CreateComplianceControlForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateComplianceControlForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateComplianceControlTooManyRequests creates a CreateComplianceControlTooManyRequests with default headers values
func NewCreateComplianceControlTooManyRequests() *CreateComplianceControlTooManyRequests {
	return &CreateComplianceControlTooManyRequests{}
}

/*
CreateComplianceControlTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CreateComplianceControlTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this create compliance control too many requests response has a 2xx status code
func (o *CreateComplianceControlTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create compliance control too many requests response has a 3xx status code
func (o *CreateComplianceControlTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create compliance control too many requests response has a 4xx status code
func (o *CreateComplianceControlTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create compliance control too many requests response has a 5xx status code
func (o *CreateComplianceControlTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create compliance control too many requests response a status code equal to that given
func (o *CreateComplianceControlTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create compliance control too many requests response
func (o *CreateComplianceControlTooManyRequests) Code() int {
	return 429
}

func (o *CreateComplianceControlTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/compliance/controls/v1][%d] createComplianceControlTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateComplianceControlTooManyRequests) String() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/compliance/controls/v1][%d] createComplianceControlTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateComplianceControlTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateComplianceControlTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateComplianceControlInternalServerError creates a CreateComplianceControlInternalServerError with default headers values
func NewCreateComplianceControlInternalServerError() *CreateComplianceControlInternalServerError {
	return &CreateComplianceControlInternalServerError{}
}

/*
CreateComplianceControlInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type CreateComplianceControlInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this create compliance control internal server error response has a 2xx status code
func (o *CreateComplianceControlInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create compliance control internal server error response has a 3xx status code
func (o *CreateComplianceControlInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create compliance control internal server error response has a 4xx status code
func (o *CreateComplianceControlInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create compliance control internal server error response has a 5xx status code
func (o *CreateComplianceControlInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create compliance control internal server error response a status code equal to that given
func (o *CreateComplianceControlInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create compliance control internal server error response
func (o *CreateComplianceControlInternalServerError) Code() int {
	return 500
}

func (o *CreateComplianceControlInternalServerError) Error() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/compliance/controls/v1][%d] createComplianceControlInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateComplianceControlInternalServerError) String() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/compliance/controls/v1][%d] createComplianceControlInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateComplianceControlInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateComplianceControlInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
