// Code generated by go-swagger; DO NOT EDIT.

package cloud_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewQueryComplianceControlsParams creates a new QueryComplianceControlsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewQueryComplianceControlsParams() *QueryComplianceControlsParams {
	return &QueryComplianceControlsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewQueryComplianceControlsParamsWithTimeout creates a new QueryComplianceControlsParams object
// with the ability to set a timeout on a request.
func NewQueryComplianceControlsParamsWithTimeout(timeout time.Duration) *QueryComplianceControlsParams {
	return &QueryComplianceControlsParams{
		timeout: timeout,
	}
}

// NewQueryComplianceControlsParamsWithContext creates a new QueryComplianceControlsParams object
// with the ability to set a context for a request.
func NewQueryComplianceControlsParamsWithContext(ctx context.Context) *QueryComplianceControlsParams {
	return &QueryComplianceControlsParams{
		Context: ctx,
	}
}

// NewQueryComplianceControlsParamsWithHTTPClient creates a new QueryComplianceControlsParams object
// with the ability to set a custom HTTPClient for a request.
func NewQueryComplianceControlsParamsWithHTTPClient(client *http.Client) *QueryComplianceControlsParams {
	return &QueryComplianceControlsParams{
		HTTPClient: client,
	}
}

/*
QueryComplianceControlsParams contains all the parameters to send to the API endpoint

	for the query compliance controls operation.

	Typically these are written to a http.Request.
*/
type QueryComplianceControlsParams struct {

	/* Authorization.

	   Bearer Token
	*/
	Authorization string

	/* XCSCUSTID.

	   Customer ID
	*/
	XCSCUSTID string

	/* XCSUSERUUID.

	   User UUID
	*/
	XCSUSERUUID string

	/* Filter.

	   FQL filter, allowed props: *compliance_control_name* *compliance_control_authority* *compliance_control_type* *compliance_control_section* *compliance_control_requirement* *compliance_control_benchmark_name* *compliance_control_benchmark_version*
	*/
	Filter *string

	/* Limit.

	   The maximum number of resources to return. The maximum allowed is 500.

	   Default: 100
	*/
	Limit *int64

	/* Offset.

	   The number of results to skip before starting to return results.
	*/
	Offset *int64

	/* Sort.

	   Field to sort on. Sortable fields: *compliance_control_name* *compliance_control_authority* *compliance_control_type* *compliance_control_section* *compliance_control_requirement* *compliance_control_benchmark_name* *compliance_control_benchmark_version* Use the `|asc` or `|desc` suffix to specify sort direction.
	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the query compliance controls params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryComplianceControlsParams) WithDefaults() *QueryComplianceControlsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the query compliance controls params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryComplianceControlsParams) SetDefaults() {
	var (
		limitDefault = int64(100)

		offsetDefault = int64(0)
	)

	val := QueryComplianceControlsParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the query compliance controls params
func (o *QueryComplianceControlsParams) WithTimeout(timeout time.Duration) *QueryComplianceControlsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query compliance controls params
func (o *QueryComplianceControlsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query compliance controls params
func (o *QueryComplianceControlsParams) WithContext(ctx context.Context) *QueryComplianceControlsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query compliance controls params
func (o *QueryComplianceControlsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query compliance controls params
func (o *QueryComplianceControlsParams) WithHTTPClient(client *http.Client) *QueryComplianceControlsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query compliance controls params
func (o *QueryComplianceControlsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the query compliance controls params
func (o *QueryComplianceControlsParams) WithAuthorization(authorization string) *QueryComplianceControlsParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the query compliance controls params
func (o *QueryComplianceControlsParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithXCSCUSTID adds the xCSCUSTID to the query compliance controls params
func (o *QueryComplianceControlsParams) WithXCSCUSTID(xCSCUSTID string) *QueryComplianceControlsParams {
	o.SetXCSCUSTID(xCSCUSTID)
	return o
}

// SetXCSCUSTID adds the xCSCUSTId to the query compliance controls params
func (o *QueryComplianceControlsParams) SetXCSCUSTID(xCSCUSTID string) {
	o.XCSCUSTID = xCSCUSTID
}

// WithXCSUSERUUID adds the xCSUSERUUID to the query compliance controls params
func (o *QueryComplianceControlsParams) WithXCSUSERUUID(xCSUSERUUID string) *QueryComplianceControlsParams {
	o.SetXCSUSERUUID(xCSUSERUUID)
	return o
}

// SetXCSUSERUUID adds the xCSUSERUuid to the query compliance controls params
func (o *QueryComplianceControlsParams) SetXCSUSERUUID(xCSUSERUUID string) {
	o.XCSUSERUUID = xCSUSERUUID
}

// WithFilter adds the filter to the query compliance controls params
func (o *QueryComplianceControlsParams) WithFilter(filter *string) *QueryComplianceControlsParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the query compliance controls params
func (o *QueryComplianceControlsParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithLimit adds the limit to the query compliance controls params
func (o *QueryComplianceControlsParams) WithLimit(limit *int64) *QueryComplianceControlsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the query compliance controls params
func (o *QueryComplianceControlsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the query compliance controls params
func (o *QueryComplianceControlsParams) WithOffset(offset *int64) *QueryComplianceControlsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the query compliance controls params
func (o *QueryComplianceControlsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithSort adds the sort to the query compliance controls params
func (o *QueryComplianceControlsParams) WithSort(sort *string) *QueryComplianceControlsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the query compliance controls params
func (o *QueryComplianceControlsParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *QueryComplianceControlsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// header param X-CS-CUSTID
	if err := r.SetHeaderParam("X-CS-CUSTID", o.XCSCUSTID); err != nil {
		return err
	}

	// header param X-CS-USERUUID
	if err := r.SetHeaderParam("X-CS-USERUUID", o.XCSUSERUUID); err != nil {
		return err
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
