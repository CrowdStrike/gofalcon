// Code generated by go-swagger; DO NOT EDIT.

package cloud_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// RenameSectionComplianceFrameworkReader is a Reader for the RenameSectionComplianceFramework structure.
type RenameSectionComplianceFrameworkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RenameSectionComplianceFrameworkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRenameSectionComplianceFrameworkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRenameSectionComplianceFrameworkBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRenameSectionComplianceFrameworkNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRenameSectionComplianceFrameworkInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /cloud-policies/entities/compliance/frameworks/section/v1] RenameSectionComplianceFramework", response, response.Code())
	}
}

// NewRenameSectionComplianceFrameworkOK creates a RenameSectionComplianceFrameworkOK with default headers values
func NewRenameSectionComplianceFrameworkOK() *RenameSectionComplianceFrameworkOK {
	return &RenameSectionComplianceFrameworkOK{}
}

/*
RenameSectionComplianceFrameworkOK describes a response with status code 200, with default header values.

OK
*/
type RenameSectionComplianceFrameworkOK struct {
	Payload *models.CommonRenameSectionResponse
}

// IsSuccess returns true when this rename section compliance framework o k response has a 2xx status code
func (o *RenameSectionComplianceFrameworkOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this rename section compliance framework o k response has a 3xx status code
func (o *RenameSectionComplianceFrameworkOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rename section compliance framework o k response has a 4xx status code
func (o *RenameSectionComplianceFrameworkOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this rename section compliance framework o k response has a 5xx status code
func (o *RenameSectionComplianceFrameworkOK) IsServerError() bool {
	return false
}

// IsCode returns true when this rename section compliance framework o k response a status code equal to that given
func (o *RenameSectionComplianceFrameworkOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the rename section compliance framework o k response
func (o *RenameSectionComplianceFrameworkOK) Code() int {
	return 200
}

func (o *RenameSectionComplianceFrameworkOK) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/section/v1][%d] renameSectionComplianceFrameworkOK  %+v", 200, o.Payload)
}

func (o *RenameSectionComplianceFrameworkOK) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/section/v1][%d] renameSectionComplianceFrameworkOK  %+v", 200, o.Payload)
}

func (o *RenameSectionComplianceFrameworkOK) GetPayload() *models.CommonRenameSectionResponse {
	return o.Payload
}

func (o *RenameSectionComplianceFrameworkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonRenameSectionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRenameSectionComplianceFrameworkBadRequest creates a RenameSectionComplianceFrameworkBadRequest with default headers values
func NewRenameSectionComplianceFrameworkBadRequest() *RenameSectionComplianceFrameworkBadRequest {
	return &RenameSectionComplianceFrameworkBadRequest{}
}

/*
RenameSectionComplianceFrameworkBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RenameSectionComplianceFrameworkBadRequest struct {
	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this rename section compliance framework bad request response has a 2xx status code
func (o *RenameSectionComplianceFrameworkBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rename section compliance framework bad request response has a 3xx status code
func (o *RenameSectionComplianceFrameworkBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rename section compliance framework bad request response has a 4xx status code
func (o *RenameSectionComplianceFrameworkBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this rename section compliance framework bad request response has a 5xx status code
func (o *RenameSectionComplianceFrameworkBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this rename section compliance framework bad request response a status code equal to that given
func (o *RenameSectionComplianceFrameworkBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the rename section compliance framework bad request response
func (o *RenameSectionComplianceFrameworkBadRequest) Code() int {
	return 400
}

func (o *RenameSectionComplianceFrameworkBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/section/v1][%d] renameSectionComplianceFrameworkBadRequest  %+v", 400, o.Payload)
}

func (o *RenameSectionComplianceFrameworkBadRequest) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/section/v1][%d] renameSectionComplianceFrameworkBadRequest  %+v", 400, o.Payload)
}

func (o *RenameSectionComplianceFrameworkBadRequest) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *RenameSectionComplianceFrameworkBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRenameSectionComplianceFrameworkNotFound creates a RenameSectionComplianceFrameworkNotFound with default headers values
func NewRenameSectionComplianceFrameworkNotFound() *RenameSectionComplianceFrameworkNotFound {
	return &RenameSectionComplianceFrameworkNotFound{}
}

/*
RenameSectionComplianceFrameworkNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RenameSectionComplianceFrameworkNotFound struct {
	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this rename section compliance framework not found response has a 2xx status code
func (o *RenameSectionComplianceFrameworkNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rename section compliance framework not found response has a 3xx status code
func (o *RenameSectionComplianceFrameworkNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rename section compliance framework not found response has a 4xx status code
func (o *RenameSectionComplianceFrameworkNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this rename section compliance framework not found response has a 5xx status code
func (o *RenameSectionComplianceFrameworkNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this rename section compliance framework not found response a status code equal to that given
func (o *RenameSectionComplianceFrameworkNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the rename section compliance framework not found response
func (o *RenameSectionComplianceFrameworkNotFound) Code() int {
	return 404
}

func (o *RenameSectionComplianceFrameworkNotFound) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/section/v1][%d] renameSectionComplianceFrameworkNotFound  %+v", 404, o.Payload)
}

func (o *RenameSectionComplianceFrameworkNotFound) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/section/v1][%d] renameSectionComplianceFrameworkNotFound  %+v", 404, o.Payload)
}

func (o *RenameSectionComplianceFrameworkNotFound) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *RenameSectionComplianceFrameworkNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRenameSectionComplianceFrameworkInternalServerError creates a RenameSectionComplianceFrameworkInternalServerError with default headers values
func NewRenameSectionComplianceFrameworkInternalServerError() *RenameSectionComplianceFrameworkInternalServerError {
	return &RenameSectionComplianceFrameworkInternalServerError{}
}

/*
RenameSectionComplianceFrameworkInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RenameSectionComplianceFrameworkInternalServerError struct {
	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this rename section compliance framework internal server error response has a 2xx status code
func (o *RenameSectionComplianceFrameworkInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rename section compliance framework internal server error response has a 3xx status code
func (o *RenameSectionComplianceFrameworkInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rename section compliance framework internal server error response has a 4xx status code
func (o *RenameSectionComplianceFrameworkInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this rename section compliance framework internal server error response has a 5xx status code
func (o *RenameSectionComplianceFrameworkInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this rename section compliance framework internal server error response a status code equal to that given
func (o *RenameSectionComplianceFrameworkInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the rename section compliance framework internal server error response
func (o *RenameSectionComplianceFrameworkInternalServerError) Code() int {
	return 500
}

func (o *RenameSectionComplianceFrameworkInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/section/v1][%d] renameSectionComplianceFrameworkInternalServerError  %+v", 500, o.Payload)
}

func (o *RenameSectionComplianceFrameworkInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /cloud-policies/entities/compliance/frameworks/section/v1][%d] renameSectionComplianceFrameworkInternalServerError  %+v", 500, o.Payload)
}

func (o *RenameSectionComplianceFrameworkInternalServerError) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *RenameSectionComplianceFrameworkInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
