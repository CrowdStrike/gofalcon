// Code generated by go-swagger; DO NOT EDIT.

package cloud_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CreateComplianceFrameworkReader is a Reader for the CreateComplianceFramework structure.
type CreateComplianceFrameworkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateComplianceFrameworkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateComplianceFrameworkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateComplianceFrameworkBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateComplianceFrameworkForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateComplianceFrameworkConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateComplianceFrameworkTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateComplianceFrameworkInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cloud-policies/entities/compliance/frameworks/v1] CreateComplianceFramework", response, response.Code())
	}
}

// NewCreateComplianceFrameworkOK creates a CreateComplianceFrameworkOK with default headers values
func NewCreateComplianceFrameworkOK() *CreateComplianceFrameworkOK {
	return &CreateComplianceFrameworkOK{}
}

/*
CreateComplianceFrameworkOK describes a response with status code 200, with default header values.

OK
*/
type CreateComplianceFrameworkOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonCreateComplianceFrameworkResponse
}

// IsSuccess returns true when this create compliance framework o k response has a 2xx status code
func (o *CreateComplianceFrameworkOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create compliance framework o k response has a 3xx status code
func (o *CreateComplianceFrameworkOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create compliance framework o k response has a 4xx status code
func (o *CreateComplianceFrameworkOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create compliance framework o k response has a 5xx status code
func (o *CreateComplianceFrameworkOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create compliance framework o k response a status code equal to that given
func (o *CreateComplianceFrameworkOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create compliance framework o k response
func (o *CreateComplianceFrameworkOK) Code() int {
	return 200
}

func (o *CreateComplianceFrameworkOK) Error() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/compliance/frameworks/v1][%d] createComplianceFrameworkOK  %+v", 200, o.Payload)
}

func (o *CreateComplianceFrameworkOK) String() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/compliance/frameworks/v1][%d] createComplianceFrameworkOK  %+v", 200, o.Payload)
}

func (o *CreateComplianceFrameworkOK) GetPayload() *models.CommonCreateComplianceFrameworkResponse {
	return o.Payload
}

func (o *CreateComplianceFrameworkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonCreateComplianceFrameworkResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateComplianceFrameworkBadRequest creates a CreateComplianceFrameworkBadRequest with default headers values
func NewCreateComplianceFrameworkBadRequest() *CreateComplianceFrameworkBadRequest {
	return &CreateComplianceFrameworkBadRequest{}
}

/*
CreateComplianceFrameworkBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateComplianceFrameworkBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this create compliance framework bad request response has a 2xx status code
func (o *CreateComplianceFrameworkBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create compliance framework bad request response has a 3xx status code
func (o *CreateComplianceFrameworkBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create compliance framework bad request response has a 4xx status code
func (o *CreateComplianceFrameworkBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create compliance framework bad request response has a 5xx status code
func (o *CreateComplianceFrameworkBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create compliance framework bad request response a status code equal to that given
func (o *CreateComplianceFrameworkBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create compliance framework bad request response
func (o *CreateComplianceFrameworkBadRequest) Code() int {
	return 400
}

func (o *CreateComplianceFrameworkBadRequest) Error() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/compliance/frameworks/v1][%d] createComplianceFrameworkBadRequest  %+v", 400, o.Payload)
}

func (o *CreateComplianceFrameworkBadRequest) String() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/compliance/frameworks/v1][%d] createComplianceFrameworkBadRequest  %+v", 400, o.Payload)
}

func (o *CreateComplianceFrameworkBadRequest) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *CreateComplianceFrameworkBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateComplianceFrameworkForbidden creates a CreateComplianceFrameworkForbidden with default headers values
func NewCreateComplianceFrameworkForbidden() *CreateComplianceFrameworkForbidden {
	return &CreateComplianceFrameworkForbidden{}
}

/*
CreateComplianceFrameworkForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateComplianceFrameworkForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this create compliance framework forbidden response has a 2xx status code
func (o *CreateComplianceFrameworkForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create compliance framework forbidden response has a 3xx status code
func (o *CreateComplianceFrameworkForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create compliance framework forbidden response has a 4xx status code
func (o *CreateComplianceFrameworkForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create compliance framework forbidden response has a 5xx status code
func (o *CreateComplianceFrameworkForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create compliance framework forbidden response a status code equal to that given
func (o *CreateComplianceFrameworkForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create compliance framework forbidden response
func (o *CreateComplianceFrameworkForbidden) Code() int {
	return 403
}

func (o *CreateComplianceFrameworkForbidden) Error() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/compliance/frameworks/v1][%d] createComplianceFrameworkForbidden  %+v", 403, o.Payload)
}

func (o *CreateComplianceFrameworkForbidden) String() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/compliance/frameworks/v1][%d] createComplianceFrameworkForbidden  %+v", 403, o.Payload)
}

func (o *CreateComplianceFrameworkForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateComplianceFrameworkForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateComplianceFrameworkConflict creates a CreateComplianceFrameworkConflict with default headers values
func NewCreateComplianceFrameworkConflict() *CreateComplianceFrameworkConflict {
	return &CreateComplianceFrameworkConflict{}
}

/*
CreateComplianceFrameworkConflict describes a response with status code 409, with default header values.

Conflict
*/
type CreateComplianceFrameworkConflict struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonEntitiesResponse
}

// IsSuccess returns true when this create compliance framework conflict response has a 2xx status code
func (o *CreateComplianceFrameworkConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create compliance framework conflict response has a 3xx status code
func (o *CreateComplianceFrameworkConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create compliance framework conflict response has a 4xx status code
func (o *CreateComplianceFrameworkConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create compliance framework conflict response has a 5xx status code
func (o *CreateComplianceFrameworkConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create compliance framework conflict response a status code equal to that given
func (o *CreateComplianceFrameworkConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create compliance framework conflict response
func (o *CreateComplianceFrameworkConflict) Code() int {
	return 409
}

func (o *CreateComplianceFrameworkConflict) Error() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/compliance/frameworks/v1][%d] createComplianceFrameworkConflict  %+v", 409, o.Payload)
}

func (o *CreateComplianceFrameworkConflict) String() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/compliance/frameworks/v1][%d] createComplianceFrameworkConflict  %+v", 409, o.Payload)
}

func (o *CreateComplianceFrameworkConflict) GetPayload() *models.CommonEntitiesResponse {
	return o.Payload
}

func (o *CreateComplianceFrameworkConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateComplianceFrameworkTooManyRequests creates a CreateComplianceFrameworkTooManyRequests with default headers values
func NewCreateComplianceFrameworkTooManyRequests() *CreateComplianceFrameworkTooManyRequests {
	return &CreateComplianceFrameworkTooManyRequests{}
}

/*
CreateComplianceFrameworkTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CreateComplianceFrameworkTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this create compliance framework too many requests response has a 2xx status code
func (o *CreateComplianceFrameworkTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create compliance framework too many requests response has a 3xx status code
func (o *CreateComplianceFrameworkTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create compliance framework too many requests response has a 4xx status code
func (o *CreateComplianceFrameworkTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create compliance framework too many requests response has a 5xx status code
func (o *CreateComplianceFrameworkTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create compliance framework too many requests response a status code equal to that given
func (o *CreateComplianceFrameworkTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create compliance framework too many requests response
func (o *CreateComplianceFrameworkTooManyRequests) Code() int {
	return 429
}

func (o *CreateComplianceFrameworkTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/compliance/frameworks/v1][%d] createComplianceFrameworkTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateComplianceFrameworkTooManyRequests) String() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/compliance/frameworks/v1][%d] createComplianceFrameworkTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateComplianceFrameworkTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateComplianceFrameworkTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateComplianceFrameworkInternalServerError creates a CreateComplianceFrameworkInternalServerError with default headers values
func NewCreateComplianceFrameworkInternalServerError() *CreateComplianceFrameworkInternalServerError {
	return &CreateComplianceFrameworkInternalServerError{}
}

/*
CreateComplianceFrameworkInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type CreateComplianceFrameworkInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this create compliance framework internal server error response has a 2xx status code
func (o *CreateComplianceFrameworkInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create compliance framework internal server error response has a 3xx status code
func (o *CreateComplianceFrameworkInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create compliance framework internal server error response has a 4xx status code
func (o *CreateComplianceFrameworkInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create compliance framework internal server error response has a 5xx status code
func (o *CreateComplianceFrameworkInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create compliance framework internal server error response a status code equal to that given
func (o *CreateComplianceFrameworkInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create compliance framework internal server error response
func (o *CreateComplianceFrameworkInternalServerError) Code() int {
	return 500
}

func (o *CreateComplianceFrameworkInternalServerError) Error() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/compliance/frameworks/v1][%d] createComplianceFrameworkInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateComplianceFrameworkInternalServerError) String() string {
	return fmt.Sprintf("[POST /cloud-policies/entities/compliance/frameworks/v1][%d] createComplianceFrameworkInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateComplianceFrameworkInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateComplianceFrameworkInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
