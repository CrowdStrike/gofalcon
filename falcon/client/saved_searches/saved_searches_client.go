// Code generated by go-swagger; DO NOT EDIT.

package saved_searches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new saved searches API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for saved searches API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSavedSearch(params *CreateSavedSearchParams, opts ...ClientOption) (*CreateSavedSearchOK, error)

	DeleteSavedSearch(params *DeleteSavedSearchParams, opts ...ClientOption) (*DeleteSavedSearchOK, error)

	Deploy(params *DeployParams, opts ...ClientOption) (*DeployOK, error)

	ExecuteDynamic(params *ExecuteDynamicParams, opts ...ClientOption) (*ExecuteDynamicOK, error)

	Ingest(params *IngestParams, opts ...ClientOption) (*IngestOK, error)

	QueryCombined(params *QueryCombinedParams, opts ...ClientOption) (*QueryCombinedOK, error)

	Result(params *ResultParams, opts ...ClientOption) (*ResultOK, error)

	UpdateSavedSearch(params *UpdateSavedSearchParams, opts ...ClientOption) (*UpdateSavedSearchOK, error)

	Validate(params *ValidateParams, opts ...ClientOption) (*ValidateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateSavedSearch creates a saved searches resource
*/
func (a *Client) CreateSavedSearch(params *CreateSavedSearchParams, opts ...ClientOption) (*CreateSavedSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSavedSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSavedSearch",
		Method:             "POST",
		PathPattern:        "/loggingapi/entities/saved-searches/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSavedSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSavedSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateSavedSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSavedSearch deletes a saved searches resource
*/
func (a *Client) DeleteSavedSearch(params *DeleteSavedSearchParams, opts ...ClientOption) (*DeleteSavedSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSavedSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSavedSearch",
		Method:             "DELETE",
		PathPattern:        "/loggingapi/entities/saved-searches/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSavedSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSavedSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteSavedSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Deploy deploys a saved search
*/
func (a *Client) Deploy(params *DeployParams, opts ...ClientOption) (*DeployOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeployParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Deploy",
		Method:             "POST",
		PathPattern:        "/loggingapi/entities/saved-searches-deploy/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeployReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeployOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Deploy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExecuteDynamic executes a dynamic saved search
*/
func (a *Client) ExecuteDynamic(params *ExecuteDynamicParams, opts ...ClientOption) (*ExecuteDynamicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteDynamicParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecuteDynamic",
		Method:             "POST",
		PathPattern:        "/loggingapi/entities/saved-searches-dynamic-execute/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteDynamicReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteDynamicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecuteDynamic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Ingest populates a saved search
*/
func (a *Client) Ingest(params *IngestParams, opts ...ClientOption) (*IngestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIngestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Ingest",
		Method:             "POST",
		PathPattern:        "/loggingapi/entities/saved-searches-ingest/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IngestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IngestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Ingest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryCombined queries for saved searches resources and returns details
*/
func (a *Client) QueryCombined(params *QueryCombinedParams, opts ...ClientOption) (*QueryCombinedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryCombinedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryCombined",
		Method:             "GET",
		PathPattern:        "/loggingapi/combined/saved-searches/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryCombinedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryCombinedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryCombined: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Result gets the results of a saved search
*/
func (a *Client) Result(params *ResultParams, opts ...ClientOption) (*ResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Result",
		Method:             "GET",
		PathPattern:        "/loggingapi/entities/saved-searches-execute/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Result: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSavedSearch updates a saved searches resource
*/
func (a *Client) UpdateSavedSearch(params *UpdateSavedSearchParams, opts ...ClientOption) (*UpdateSavedSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSavedSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateSavedSearch",
		Method:             "PATCH",
		PathPattern:        "/loggingapi/entities/saved-searches/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSavedSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSavedSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateSavedSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Validate validates a search
*/
func (a *Client) Validate(params *ValidateParams, opts ...ClientOption) (*ValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Validate",
		Method:             "POST",
		PathPattern:        "/loggingapi/entities/saved-searches-validate/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Validate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
