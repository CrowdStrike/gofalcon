// Code generated by go-swagger; DO NOT EDIT.

package saved_searches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// NewCreateSavedSearchParams creates a new CreateSavedSearchParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateSavedSearchParams() *CreateSavedSearchParams {
	return &CreateSavedSearchParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateSavedSearchParamsWithTimeout creates a new CreateSavedSearchParams object
// with the ability to set a timeout on a request.
func NewCreateSavedSearchParamsWithTimeout(timeout time.Duration) *CreateSavedSearchParams {
	return &CreateSavedSearchParams{
		timeout: timeout,
	}
}

// NewCreateSavedSearchParamsWithContext creates a new CreateSavedSearchParams object
// with the ability to set a context for a request.
func NewCreateSavedSearchParamsWithContext(ctx context.Context) *CreateSavedSearchParams {
	return &CreateSavedSearchParams{
		Context: ctx,
	}
}

// NewCreateSavedSearchParamsWithHTTPClient creates a new CreateSavedSearchParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateSavedSearchParamsWithHTTPClient(client *http.Client) *CreateSavedSearchParams {
	return &CreateSavedSearchParams{
		HTTPClient: client,
	}
}

/* CreateSavedSearchParams contains all the parameters to send to the API endpoint
   for the create saved search operation.

   Typically these are written to a http.Request.
*/
type CreateSavedSearchParams struct {

	/* XCSCREATEORIGIN.

	   Create / Update request origin .
	*/
	XCSCREATEORIGIN *string

	/* XCsAppName.

	   App name used to name repository and workflow action
	*/
	XCsAppName *string

	// Body.
	Body *models.ApidomainSavedSearchCreateRequestV1

	/* DryRun.

	   Only test for correctness without saving / updating
	*/
	DryRun *bool

	/* Version.

	   Version of resource being created
	*/
	Version *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create saved search params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateSavedSearchParams) WithDefaults() *CreateSavedSearchParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create saved search params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateSavedSearchParams) SetDefaults() {
	var (
		dryRunDefault = bool(false)
	)

	val := CreateSavedSearchParams{
		DryRun: &dryRunDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the create saved search params
func (o *CreateSavedSearchParams) WithTimeout(timeout time.Duration) *CreateSavedSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create saved search params
func (o *CreateSavedSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create saved search params
func (o *CreateSavedSearchParams) WithContext(ctx context.Context) *CreateSavedSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create saved search params
func (o *CreateSavedSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create saved search params
func (o *CreateSavedSearchParams) WithHTTPClient(client *http.Client) *CreateSavedSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create saved search params
func (o *CreateSavedSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXCSCREATEORIGIN adds the xCSCREATEORIGIN to the create saved search params
func (o *CreateSavedSearchParams) WithXCSCREATEORIGIN(xCSCREATEORIGIN *string) *CreateSavedSearchParams {
	o.SetXCSCREATEORIGIN(xCSCREATEORIGIN)
	return o
}

// SetXCSCREATEORIGIN adds the xCSCREATEORIGIN to the create saved search params
func (o *CreateSavedSearchParams) SetXCSCREATEORIGIN(xCSCREATEORIGIN *string) {
	o.XCSCREATEORIGIN = xCSCREATEORIGIN
}

// WithXCsAppName adds the xCsAppName to the create saved search params
func (o *CreateSavedSearchParams) WithXCsAppName(xCsAppName *string) *CreateSavedSearchParams {
	o.SetXCsAppName(xCsAppName)
	return o
}

// SetXCsAppName adds the xCsAppName to the create saved search params
func (o *CreateSavedSearchParams) SetXCsAppName(xCsAppName *string) {
	o.XCsAppName = xCsAppName
}

// WithBody adds the body to the create saved search params
func (o *CreateSavedSearchParams) WithBody(body *models.ApidomainSavedSearchCreateRequestV1) *CreateSavedSearchParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the create saved search params
func (o *CreateSavedSearchParams) SetBody(body *models.ApidomainSavedSearchCreateRequestV1) {
	o.Body = body
}

// WithDryRun adds the dryRun to the create saved search params
func (o *CreateSavedSearchParams) WithDryRun(dryRun *bool) *CreateSavedSearchParams {
	o.SetDryRun(dryRun)
	return o
}

// SetDryRun adds the dryRun to the create saved search params
func (o *CreateSavedSearchParams) SetDryRun(dryRun *bool) {
	o.DryRun = dryRun
}

// WithVersion adds the version to the create saved search params
func (o *CreateSavedSearchParams) WithVersion(version *string) *CreateSavedSearchParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the create saved search params
func (o *CreateSavedSearchParams) SetVersion(version *string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *CreateSavedSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XCSCREATEORIGIN != nil {

		// header param X-CS-CREATE-ORIGIN
		if err := r.SetHeaderParam("X-CS-CREATE-ORIGIN", *o.XCSCREATEORIGIN); err != nil {
			return err
		}
	}

	if o.XCsAppName != nil {

		// header param X-Cs-App-Name
		if err := r.SetHeaderParam("X-Cs-App-Name", *o.XCsAppName); err != nil {
			return err
		}
	}
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.DryRun != nil {

		// query param dry_run
		var qrDryRun bool

		if o.DryRun != nil {
			qrDryRun = *o.DryRun
		}
		qDryRun := swag.FormatBool(qrDryRun)
		if qDryRun != "" {

			if err := r.SetQueryParam("dry_run", qDryRun); err != nil {
				return err
			}
		}
	}

	if o.Version != nil {

		// query param version
		var qrVersion string

		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := qrVersion
		if qVersion != "" {

			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
