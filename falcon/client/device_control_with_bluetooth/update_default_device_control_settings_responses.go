// Code generated by go-swagger; DO NOT EDIT.

package device_control_with_bluetooth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// UpdateDefaultDeviceControlSettingsReader is a Reader for the UpdateDefaultDeviceControlSettings structure.
type UpdateDefaultDeviceControlSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDefaultDeviceControlSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDefaultDeviceControlSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateDefaultDeviceControlSettingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateDefaultDeviceControlSettingsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateDefaultDeviceControlSettingsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateDefaultDeviceControlSettingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /policy/entities/device-control-default-settings/v1] updateDefaultDeviceControlSettings", response, response.Code())
	}
}

// NewUpdateDefaultDeviceControlSettingsOK creates a UpdateDefaultDeviceControlSettingsOK with default headers values
func NewUpdateDefaultDeviceControlSettingsOK() *UpdateDefaultDeviceControlSettingsOK {
	return &UpdateDefaultDeviceControlSettingsOK{}
}

/*
UpdateDefaultDeviceControlSettingsOK describes a response with status code 200, with default header values.

OK
*/
type UpdateDefaultDeviceControlSettingsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DeviceControlRespDefaultSettingV1
}

// IsSuccess returns true when this update default device control settings o k response has a 2xx status code
func (o *UpdateDefaultDeviceControlSettingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update default device control settings o k response has a 3xx status code
func (o *UpdateDefaultDeviceControlSettingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update default device control settings o k response has a 4xx status code
func (o *UpdateDefaultDeviceControlSettingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update default device control settings o k response has a 5xx status code
func (o *UpdateDefaultDeviceControlSettingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update default device control settings o k response a status code equal to that given
func (o *UpdateDefaultDeviceControlSettingsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update default device control settings o k response
func (o *UpdateDefaultDeviceControlSettingsOK) Code() int {
	return 200
}

func (o *UpdateDefaultDeviceControlSettingsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /policy/entities/device-control-default-settings/v1][%d] updateDefaultDeviceControlSettingsOK %s", 200, payload)
}

func (o *UpdateDefaultDeviceControlSettingsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /policy/entities/device-control-default-settings/v1][%d] updateDefaultDeviceControlSettingsOK %s", 200, payload)
}

func (o *UpdateDefaultDeviceControlSettingsOK) GetPayload() *models.DeviceControlRespDefaultSettingV1 {
	return o.Payload
}

func (o *UpdateDefaultDeviceControlSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DeviceControlRespDefaultSettingV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDefaultDeviceControlSettingsForbidden creates a UpdateDefaultDeviceControlSettingsForbidden with default headers values
func NewUpdateDefaultDeviceControlSettingsForbidden() *UpdateDefaultDeviceControlSettingsForbidden {
	return &UpdateDefaultDeviceControlSettingsForbidden{}
}

/*
UpdateDefaultDeviceControlSettingsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateDefaultDeviceControlSettingsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update default device control settings forbidden response has a 2xx status code
func (o *UpdateDefaultDeviceControlSettingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update default device control settings forbidden response has a 3xx status code
func (o *UpdateDefaultDeviceControlSettingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update default device control settings forbidden response has a 4xx status code
func (o *UpdateDefaultDeviceControlSettingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update default device control settings forbidden response has a 5xx status code
func (o *UpdateDefaultDeviceControlSettingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update default device control settings forbidden response a status code equal to that given
func (o *UpdateDefaultDeviceControlSettingsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update default device control settings forbidden response
func (o *UpdateDefaultDeviceControlSettingsForbidden) Code() int {
	return 403
}

func (o *UpdateDefaultDeviceControlSettingsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /policy/entities/device-control-default-settings/v1][%d] updateDefaultDeviceControlSettingsForbidden %s", 403, payload)
}

func (o *UpdateDefaultDeviceControlSettingsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /policy/entities/device-control-default-settings/v1][%d] updateDefaultDeviceControlSettingsForbidden %s", 403, payload)
}

func (o *UpdateDefaultDeviceControlSettingsForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateDefaultDeviceControlSettingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDefaultDeviceControlSettingsNotFound creates a UpdateDefaultDeviceControlSettingsNotFound with default headers values
func NewUpdateDefaultDeviceControlSettingsNotFound() *UpdateDefaultDeviceControlSettingsNotFound {
	return &UpdateDefaultDeviceControlSettingsNotFound{}
}

/*
UpdateDefaultDeviceControlSettingsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateDefaultDeviceControlSettingsNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DeviceControlRespV1
}

// IsSuccess returns true when this update default device control settings not found response has a 2xx status code
func (o *UpdateDefaultDeviceControlSettingsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update default device control settings not found response has a 3xx status code
func (o *UpdateDefaultDeviceControlSettingsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update default device control settings not found response has a 4xx status code
func (o *UpdateDefaultDeviceControlSettingsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update default device control settings not found response has a 5xx status code
func (o *UpdateDefaultDeviceControlSettingsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update default device control settings not found response a status code equal to that given
func (o *UpdateDefaultDeviceControlSettingsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update default device control settings not found response
func (o *UpdateDefaultDeviceControlSettingsNotFound) Code() int {
	return 404
}

func (o *UpdateDefaultDeviceControlSettingsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /policy/entities/device-control-default-settings/v1][%d] updateDefaultDeviceControlSettingsNotFound %s", 404, payload)
}

func (o *UpdateDefaultDeviceControlSettingsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /policy/entities/device-control-default-settings/v1][%d] updateDefaultDeviceControlSettingsNotFound %s", 404, payload)
}

func (o *UpdateDefaultDeviceControlSettingsNotFound) GetPayload() *models.DeviceControlRespV1 {
	return o.Payload
}

func (o *UpdateDefaultDeviceControlSettingsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DeviceControlRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDefaultDeviceControlSettingsTooManyRequests creates a UpdateDefaultDeviceControlSettingsTooManyRequests with default headers values
func NewUpdateDefaultDeviceControlSettingsTooManyRequests() *UpdateDefaultDeviceControlSettingsTooManyRequests {
	return &UpdateDefaultDeviceControlSettingsTooManyRequests{}
}

/*
UpdateDefaultDeviceControlSettingsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type UpdateDefaultDeviceControlSettingsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this update default device control settings too many requests response has a 2xx status code
func (o *UpdateDefaultDeviceControlSettingsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update default device control settings too many requests response has a 3xx status code
func (o *UpdateDefaultDeviceControlSettingsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update default device control settings too many requests response has a 4xx status code
func (o *UpdateDefaultDeviceControlSettingsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update default device control settings too many requests response has a 5xx status code
func (o *UpdateDefaultDeviceControlSettingsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update default device control settings too many requests response a status code equal to that given
func (o *UpdateDefaultDeviceControlSettingsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update default device control settings too many requests response
func (o *UpdateDefaultDeviceControlSettingsTooManyRequests) Code() int {
	return 429
}

func (o *UpdateDefaultDeviceControlSettingsTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /policy/entities/device-control-default-settings/v1][%d] updateDefaultDeviceControlSettingsTooManyRequests %s", 429, payload)
}

func (o *UpdateDefaultDeviceControlSettingsTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /policy/entities/device-control-default-settings/v1][%d] updateDefaultDeviceControlSettingsTooManyRequests %s", 429, payload)
}

func (o *UpdateDefaultDeviceControlSettingsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpdateDefaultDeviceControlSettingsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDefaultDeviceControlSettingsInternalServerError creates a UpdateDefaultDeviceControlSettingsInternalServerError with default headers values
func NewUpdateDefaultDeviceControlSettingsInternalServerError() *UpdateDefaultDeviceControlSettingsInternalServerError {
	return &UpdateDefaultDeviceControlSettingsInternalServerError{}
}

/*
UpdateDefaultDeviceControlSettingsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateDefaultDeviceControlSettingsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DeviceControlRespV1
}

// IsSuccess returns true when this update default device control settings internal server error response has a 2xx status code
func (o *UpdateDefaultDeviceControlSettingsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update default device control settings internal server error response has a 3xx status code
func (o *UpdateDefaultDeviceControlSettingsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update default device control settings internal server error response has a 4xx status code
func (o *UpdateDefaultDeviceControlSettingsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update default device control settings internal server error response has a 5xx status code
func (o *UpdateDefaultDeviceControlSettingsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update default device control settings internal server error response a status code equal to that given
func (o *UpdateDefaultDeviceControlSettingsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update default device control settings internal server error response
func (o *UpdateDefaultDeviceControlSettingsInternalServerError) Code() int {
	return 500
}

func (o *UpdateDefaultDeviceControlSettingsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /policy/entities/device-control-default-settings/v1][%d] updateDefaultDeviceControlSettingsInternalServerError %s", 500, payload)
}

func (o *UpdateDefaultDeviceControlSettingsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /policy/entities/device-control-default-settings/v1][%d] updateDefaultDeviceControlSettingsInternalServerError %s", 500, payload)
}

func (o *UpdateDefaultDeviceControlSettingsInternalServerError) GetPayload() *models.DeviceControlRespV1 {
	return o.Payload
}

func (o *UpdateDefaultDeviceControlSettingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DeviceControlRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
