// Code generated by go-swagger; DO NOT EDIT.

package device_control_with_bluetooth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new device control with bluetooth API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for device control with bluetooth API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetDefaultDeviceControlSettings(params *GetDefaultDeviceControlSettingsParams, opts ...ClientOption) (*GetDefaultDeviceControlSettingsOK, error)

	GetDeviceControlPoliciesV2(params *GetDeviceControlPoliciesV2Params, opts ...ClientOption) (*GetDeviceControlPoliciesV2OK, error)

	PatchDeviceControlPoliciesClassesV1(params *PatchDeviceControlPoliciesClassesV1Params, opts ...ClientOption) (*PatchDeviceControlPoliciesClassesV1OK, error)

	PatchDeviceControlPoliciesV2(params *PatchDeviceControlPoliciesV2Params, opts ...ClientOption) (*PatchDeviceControlPoliciesV2OK, error)

	PostDeviceControlPoliciesV2(params *PostDeviceControlPoliciesV2Params, opts ...ClientOption) (*PostDeviceControlPoliciesV2OK, error)

	UpdateDefaultDeviceControlSettings(params *UpdateDefaultDeviceControlSettingsParams, opts ...ClientOption) (*UpdateDefaultDeviceControlSettingsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetDefaultDeviceControlSettings gets default device control settings u s b and bluetooth
*/
func (a *Client) GetDefaultDeviceControlSettings(params *GetDefaultDeviceControlSettingsParams, opts ...ClientOption) (*GetDefaultDeviceControlSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDefaultDeviceControlSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDefaultDeviceControlSettings",
		Method:             "GET",
		PathPattern:        "/policy/entities/device-control-default-settings/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDefaultDeviceControlSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDefaultDeviceControlSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDefaultDeviceControlSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeviceControlPoliciesV2 gets device control policies for the given filter criteria u s b and bluetooth
*/
func (a *Client) GetDeviceControlPoliciesV2(params *GetDeviceControlPoliciesV2Params, opts ...ClientOption) (*GetDeviceControlPoliciesV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceControlPoliciesV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeviceControlPoliciesV2",
		Method:             "GET",
		PathPattern:        "/policy/entities/device-control/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceControlPoliciesV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceControlPoliciesV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceControlPoliciesV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchDeviceControlPoliciesClassesV1 updates device control policy s classes u s b and bluetooth
*/
func (a *Client) PatchDeviceControlPoliciesClassesV1(params *PatchDeviceControlPoliciesClassesV1Params, opts ...ClientOption) (*PatchDeviceControlPoliciesClassesV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDeviceControlPoliciesClassesV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchDeviceControlPoliciesClassesV1",
		Method:             "PATCH",
		PathPattern:        "/policy/entities/device-control-classes/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDeviceControlPoliciesClassesV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchDeviceControlPoliciesClassesV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchDeviceControlPoliciesClassesV1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchDeviceControlPoliciesV2 updates device control policy base u s b and bluetooth
*/
func (a *Client) PatchDeviceControlPoliciesV2(params *PatchDeviceControlPoliciesV2Params, opts ...ClientOption) (*PatchDeviceControlPoliciesV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDeviceControlPoliciesV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchDeviceControlPoliciesV2",
		Method:             "PATCH",
		PathPattern:        "/policy/entities/device-control/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDeviceControlPoliciesV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchDeviceControlPoliciesV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchDeviceControlPoliciesV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostDeviceControlPoliciesV2 creates clone a device control policy u s b and bluetooth
*/
func (a *Client) PostDeviceControlPoliciesV2(params *PostDeviceControlPoliciesV2Params, opts ...ClientOption) (*PostDeviceControlPoliciesV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDeviceControlPoliciesV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDeviceControlPoliciesV2",
		Method:             "POST",
		PathPattern:        "/policy/entities/device-control/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDeviceControlPoliciesV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDeviceControlPoliciesV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDeviceControlPoliciesV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDefaultDeviceControlSettings updates the configuration for default device control settings
*/
func (a *Client) UpdateDefaultDeviceControlSettings(params *UpdateDefaultDeviceControlSettingsParams, opts ...ClientOption) (*UpdateDefaultDeviceControlSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDefaultDeviceControlSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDefaultDeviceControlSettings",
		Method:             "PATCH",
		PathPattern:        "/policy/entities/device-control-default-settings/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDefaultDeviceControlSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDefaultDeviceControlSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDefaultDeviceControlSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
