// Code generated by go-swagger; DO NOT EDIT.

package device_control_with_bluetooth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetDefaultDeviceControlSettingsReader is a Reader for the GetDefaultDeviceControlSettings structure.
type GetDefaultDeviceControlSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDefaultDeviceControlSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDefaultDeviceControlSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetDefaultDeviceControlSettingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDefaultDeviceControlSettingsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetDefaultDeviceControlSettingsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDefaultDeviceControlSettingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /policy/entities/device-control-default-settings/v1] getDefaultDeviceControlSettings", response, response.Code())
	}
}

// NewGetDefaultDeviceControlSettingsOK creates a GetDefaultDeviceControlSettingsOK with default headers values
func NewGetDefaultDeviceControlSettingsOK() *GetDefaultDeviceControlSettingsOK {
	return &GetDefaultDeviceControlSettingsOK{}
}

/*
GetDefaultDeviceControlSettingsOK describes a response with status code 200, with default header values.

OK
*/
type GetDefaultDeviceControlSettingsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DeviceControlRespDefaultSettingV1
}

// IsSuccess returns true when this get default device control settings o k response has a 2xx status code
func (o *GetDefaultDeviceControlSettingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get default device control settings o k response has a 3xx status code
func (o *GetDefaultDeviceControlSettingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get default device control settings o k response has a 4xx status code
func (o *GetDefaultDeviceControlSettingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get default device control settings o k response has a 5xx status code
func (o *GetDefaultDeviceControlSettingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get default device control settings o k response a status code equal to that given
func (o *GetDefaultDeviceControlSettingsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get default device control settings o k response
func (o *GetDefaultDeviceControlSettingsOK) Code() int {
	return 200
}

func (o *GetDefaultDeviceControlSettingsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/entities/device-control-default-settings/v1][%d] getDefaultDeviceControlSettingsOK %s", 200, payload)
}

func (o *GetDefaultDeviceControlSettingsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/entities/device-control-default-settings/v1][%d] getDefaultDeviceControlSettingsOK %s", 200, payload)
}

func (o *GetDefaultDeviceControlSettingsOK) GetPayload() *models.DeviceControlRespDefaultSettingV1 {
	return o.Payload
}

func (o *GetDefaultDeviceControlSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DeviceControlRespDefaultSettingV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDefaultDeviceControlSettingsForbidden creates a GetDefaultDeviceControlSettingsForbidden with default headers values
func NewGetDefaultDeviceControlSettingsForbidden() *GetDefaultDeviceControlSettingsForbidden {
	return &GetDefaultDeviceControlSettingsForbidden{}
}

/*
GetDefaultDeviceControlSettingsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetDefaultDeviceControlSettingsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get default device control settings forbidden response has a 2xx status code
func (o *GetDefaultDeviceControlSettingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get default device control settings forbidden response has a 3xx status code
func (o *GetDefaultDeviceControlSettingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get default device control settings forbidden response has a 4xx status code
func (o *GetDefaultDeviceControlSettingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get default device control settings forbidden response has a 5xx status code
func (o *GetDefaultDeviceControlSettingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get default device control settings forbidden response a status code equal to that given
func (o *GetDefaultDeviceControlSettingsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get default device control settings forbidden response
func (o *GetDefaultDeviceControlSettingsForbidden) Code() int {
	return 403
}

func (o *GetDefaultDeviceControlSettingsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/entities/device-control-default-settings/v1][%d] getDefaultDeviceControlSettingsForbidden %s", 403, payload)
}

func (o *GetDefaultDeviceControlSettingsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/entities/device-control-default-settings/v1][%d] getDefaultDeviceControlSettingsForbidden %s", 403, payload)
}

func (o *GetDefaultDeviceControlSettingsForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetDefaultDeviceControlSettingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDefaultDeviceControlSettingsNotFound creates a GetDefaultDeviceControlSettingsNotFound with default headers values
func NewGetDefaultDeviceControlSettingsNotFound() *GetDefaultDeviceControlSettingsNotFound {
	return &GetDefaultDeviceControlSettingsNotFound{}
}

/*
GetDefaultDeviceControlSettingsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetDefaultDeviceControlSettingsNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DeviceControlRespV1
}

// IsSuccess returns true when this get default device control settings not found response has a 2xx status code
func (o *GetDefaultDeviceControlSettingsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get default device control settings not found response has a 3xx status code
func (o *GetDefaultDeviceControlSettingsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get default device control settings not found response has a 4xx status code
func (o *GetDefaultDeviceControlSettingsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get default device control settings not found response has a 5xx status code
func (o *GetDefaultDeviceControlSettingsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get default device control settings not found response a status code equal to that given
func (o *GetDefaultDeviceControlSettingsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get default device control settings not found response
func (o *GetDefaultDeviceControlSettingsNotFound) Code() int {
	return 404
}

func (o *GetDefaultDeviceControlSettingsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/entities/device-control-default-settings/v1][%d] getDefaultDeviceControlSettingsNotFound %s", 404, payload)
}

func (o *GetDefaultDeviceControlSettingsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/entities/device-control-default-settings/v1][%d] getDefaultDeviceControlSettingsNotFound %s", 404, payload)
}

func (o *GetDefaultDeviceControlSettingsNotFound) GetPayload() *models.DeviceControlRespV1 {
	return o.Payload
}

func (o *GetDefaultDeviceControlSettingsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DeviceControlRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDefaultDeviceControlSettingsTooManyRequests creates a GetDefaultDeviceControlSettingsTooManyRequests with default headers values
func NewGetDefaultDeviceControlSettingsTooManyRequests() *GetDefaultDeviceControlSettingsTooManyRequests {
	return &GetDefaultDeviceControlSettingsTooManyRequests{}
}

/*
GetDefaultDeviceControlSettingsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetDefaultDeviceControlSettingsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get default device control settings too many requests response has a 2xx status code
func (o *GetDefaultDeviceControlSettingsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get default device control settings too many requests response has a 3xx status code
func (o *GetDefaultDeviceControlSettingsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get default device control settings too many requests response has a 4xx status code
func (o *GetDefaultDeviceControlSettingsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get default device control settings too many requests response has a 5xx status code
func (o *GetDefaultDeviceControlSettingsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get default device control settings too many requests response a status code equal to that given
func (o *GetDefaultDeviceControlSettingsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get default device control settings too many requests response
func (o *GetDefaultDeviceControlSettingsTooManyRequests) Code() int {
	return 429
}

func (o *GetDefaultDeviceControlSettingsTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/entities/device-control-default-settings/v1][%d] getDefaultDeviceControlSettingsTooManyRequests %s", 429, payload)
}

func (o *GetDefaultDeviceControlSettingsTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/entities/device-control-default-settings/v1][%d] getDefaultDeviceControlSettingsTooManyRequests %s", 429, payload)
}

func (o *GetDefaultDeviceControlSettingsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetDefaultDeviceControlSettingsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDefaultDeviceControlSettingsInternalServerError creates a GetDefaultDeviceControlSettingsInternalServerError with default headers values
func NewGetDefaultDeviceControlSettingsInternalServerError() *GetDefaultDeviceControlSettingsInternalServerError {
	return &GetDefaultDeviceControlSettingsInternalServerError{}
}

/*
GetDefaultDeviceControlSettingsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetDefaultDeviceControlSettingsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DeviceControlRespV1
}

// IsSuccess returns true when this get default device control settings internal server error response has a 2xx status code
func (o *GetDefaultDeviceControlSettingsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get default device control settings internal server error response has a 3xx status code
func (o *GetDefaultDeviceControlSettingsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get default device control settings internal server error response has a 4xx status code
func (o *GetDefaultDeviceControlSettingsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get default device control settings internal server error response has a 5xx status code
func (o *GetDefaultDeviceControlSettingsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get default device control settings internal server error response a status code equal to that given
func (o *GetDefaultDeviceControlSettingsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get default device control settings internal server error response
func (o *GetDefaultDeviceControlSettingsInternalServerError) Code() int {
	return 500
}

func (o *GetDefaultDeviceControlSettingsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/entities/device-control-default-settings/v1][%d] getDefaultDeviceControlSettingsInternalServerError %s", 500, payload)
}

func (o *GetDefaultDeviceControlSettingsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/entities/device-control-default-settings/v1][%d] getDefaultDeviceControlSettingsInternalServerError %s", 500, payload)
}

func (o *GetDefaultDeviceControlSettingsInternalServerError) GetPayload() *models.DeviceControlRespV1 {
	return o.Payload
}

func (o *GetDefaultDeviceControlSettingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DeviceControlRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
