// Code generated by go-swagger; DO NOT EDIT.

package cspg_iacapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CombinedDetectionsReader is a Reader for the CombinedDetections structure.
type CombinedDetectionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CombinedDetectionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCombinedDetectionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCombinedDetectionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCombinedDetectionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCombinedDetectionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCombinedDetectionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /iac/combined/detections/v1] CombinedDetections", response, response.Code())
	}
}

// NewCombinedDetectionsOK creates a CombinedDetectionsOK with default headers values
func NewCombinedDetectionsOK() *CombinedDetectionsOK {
	return &CombinedDetectionsOK{}
}

/*
CombinedDetectionsOK describes a response with status code 200, with default header values.

OK
*/
type CombinedDetectionsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ModelsDetectionsCombinedResponse
}

// IsSuccess returns true when this combined detections o k response has a 2xx status code
func (o *CombinedDetectionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this combined detections o k response has a 3xx status code
func (o *CombinedDetectionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined detections o k response has a 4xx status code
func (o *CombinedDetectionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this combined detections o k response has a 5xx status code
func (o *CombinedDetectionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this combined detections o k response a status code equal to that given
func (o *CombinedDetectionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the combined detections o k response
func (o *CombinedDetectionsOK) Code() int {
	return 200
}

func (o *CombinedDetectionsOK) Error() string {
	return fmt.Sprintf("[GET /iac/combined/detections/v1][%d] combinedDetectionsOK  %+v", 200, o.Payload)
}

func (o *CombinedDetectionsOK) String() string {
	return fmt.Sprintf("[GET /iac/combined/detections/v1][%d] combinedDetectionsOK  %+v", 200, o.Payload)
}

func (o *CombinedDetectionsOK) GetPayload() *models.ModelsDetectionsCombinedResponse {
	return o.Payload
}

func (o *CombinedDetectionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ModelsDetectionsCombinedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedDetectionsBadRequest creates a CombinedDetectionsBadRequest with default headers values
func NewCombinedDetectionsBadRequest() *CombinedDetectionsBadRequest {
	return &CombinedDetectionsBadRequest{}
}

/*
CombinedDetectionsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CombinedDetectionsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this combined detections bad request response has a 2xx status code
func (o *CombinedDetectionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined detections bad request response has a 3xx status code
func (o *CombinedDetectionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined detections bad request response has a 4xx status code
func (o *CombinedDetectionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this combined detections bad request response has a 5xx status code
func (o *CombinedDetectionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this combined detections bad request response a status code equal to that given
func (o *CombinedDetectionsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the combined detections bad request response
func (o *CombinedDetectionsBadRequest) Code() int {
	return 400
}

func (o *CombinedDetectionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /iac/combined/detections/v1][%d] combinedDetectionsBadRequest  %+v", 400, o.Payload)
}

func (o *CombinedDetectionsBadRequest) String() string {
	return fmt.Sprintf("[GET /iac/combined/detections/v1][%d] combinedDetectionsBadRequest  %+v", 400, o.Payload)
}

func (o *CombinedDetectionsBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CombinedDetectionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedDetectionsForbidden creates a CombinedDetectionsForbidden with default headers values
func NewCombinedDetectionsForbidden() *CombinedDetectionsForbidden {
	return &CombinedDetectionsForbidden{}
}

/*
CombinedDetectionsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CombinedDetectionsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this combined detections forbidden response has a 2xx status code
func (o *CombinedDetectionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined detections forbidden response has a 3xx status code
func (o *CombinedDetectionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined detections forbidden response has a 4xx status code
func (o *CombinedDetectionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this combined detections forbidden response has a 5xx status code
func (o *CombinedDetectionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this combined detections forbidden response a status code equal to that given
func (o *CombinedDetectionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the combined detections forbidden response
func (o *CombinedDetectionsForbidden) Code() int {
	return 403
}

func (o *CombinedDetectionsForbidden) Error() string {
	return fmt.Sprintf("[GET /iac/combined/detections/v1][%d] combinedDetectionsForbidden  %+v", 403, o.Payload)
}

func (o *CombinedDetectionsForbidden) String() string {
	return fmt.Sprintf("[GET /iac/combined/detections/v1][%d] combinedDetectionsForbidden  %+v", 403, o.Payload)
}

func (o *CombinedDetectionsForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CombinedDetectionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedDetectionsTooManyRequests creates a CombinedDetectionsTooManyRequests with default headers values
func NewCombinedDetectionsTooManyRequests() *CombinedDetectionsTooManyRequests {
	return &CombinedDetectionsTooManyRequests{}
}

/*
CombinedDetectionsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CombinedDetectionsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this combined detections too many requests response has a 2xx status code
func (o *CombinedDetectionsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined detections too many requests response has a 3xx status code
func (o *CombinedDetectionsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined detections too many requests response has a 4xx status code
func (o *CombinedDetectionsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this combined detections too many requests response has a 5xx status code
func (o *CombinedDetectionsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this combined detections too many requests response a status code equal to that given
func (o *CombinedDetectionsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the combined detections too many requests response
func (o *CombinedDetectionsTooManyRequests) Code() int {
	return 429
}

func (o *CombinedDetectionsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /iac/combined/detections/v1][%d] combinedDetectionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *CombinedDetectionsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /iac/combined/detections/v1][%d] combinedDetectionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *CombinedDetectionsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CombinedDetectionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedDetectionsInternalServerError creates a CombinedDetectionsInternalServerError with default headers values
func NewCombinedDetectionsInternalServerError() *CombinedDetectionsInternalServerError {
	return &CombinedDetectionsInternalServerError{}
}

/*
CombinedDetectionsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CombinedDetectionsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this combined detections internal server error response has a 2xx status code
func (o *CombinedDetectionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined detections internal server error response has a 3xx status code
func (o *CombinedDetectionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined detections internal server error response has a 4xx status code
func (o *CombinedDetectionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this combined detections internal server error response has a 5xx status code
func (o *CombinedDetectionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this combined detections internal server error response a status code equal to that given
func (o *CombinedDetectionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the combined detections internal server error response
func (o *CombinedDetectionsInternalServerError) Code() int {
	return 500
}

func (o *CombinedDetectionsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /iac/combined/detections/v1][%d] combinedDetectionsInternalServerError  %+v", 500, o.Payload)
}

func (o *CombinedDetectionsInternalServerError) String() string {
	return fmt.Sprintf("[GET /iac/combined/detections/v1][%d] combinedDetectionsInternalServerError  %+v", 500, o.Payload)
}

func (o *CombinedDetectionsInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CombinedDetectionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
