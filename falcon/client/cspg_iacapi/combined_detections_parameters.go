// Code generated by go-swagger; DO NOT EDIT.

package cspg_iacapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCombinedDetectionsParams creates a new CombinedDetectionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCombinedDetectionsParams() *CombinedDetectionsParams {
	return &CombinedDetectionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCombinedDetectionsParamsWithTimeout creates a new CombinedDetectionsParams object
// with the ability to set a timeout on a request.
func NewCombinedDetectionsParamsWithTimeout(timeout time.Duration) *CombinedDetectionsParams {
	return &CombinedDetectionsParams{
		timeout: timeout,
	}
}

// NewCombinedDetectionsParamsWithContext creates a new CombinedDetectionsParams object
// with the ability to set a context for a request.
func NewCombinedDetectionsParamsWithContext(ctx context.Context) *CombinedDetectionsParams {
	return &CombinedDetectionsParams{
		Context: ctx,
	}
}

// NewCombinedDetectionsParamsWithHTTPClient creates a new CombinedDetectionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewCombinedDetectionsParamsWithHTTPClient(client *http.Client) *CombinedDetectionsParams {
	return &CombinedDetectionsParams{
		HTTPClient: client,
	}
}

/*
CombinedDetectionsParams contains all the parameters to send to the API endpoint

	for the combined detections operation.

	Typically these are written to a http.Request.
*/
type CombinedDetectionsParams struct {

	/* Filter.

	   Search IaC detections using a query in Falcon Query Language (FQL). Supported filters: detection_uuid,file_name,last_detected,platform,project_name,project_owner,project_ref,provider,resource_name,rule_category,rule_name,rule_type,rule_uuid,service,severity
	*/
	Filter *string

	/* Limit.

	   the upper-bound on the number of records to retrieve
	*/
	Limit *int64

	/* Offset.

	   The offset from where to begin.
	*/
	Offset *int64

	/* Sort.

	   fields to sort the records on. Supported columns:  [detection_uuid file_name last_detected platform project_name project_owner project_ref provider resource_name rule_category rule_name rule_type rule_uuid service severity]
	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the combined detections params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CombinedDetectionsParams) WithDefaults() *CombinedDetectionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the combined detections params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CombinedDetectionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the combined detections params
func (o *CombinedDetectionsParams) WithTimeout(timeout time.Duration) *CombinedDetectionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the combined detections params
func (o *CombinedDetectionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the combined detections params
func (o *CombinedDetectionsParams) WithContext(ctx context.Context) *CombinedDetectionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the combined detections params
func (o *CombinedDetectionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the combined detections params
func (o *CombinedDetectionsParams) WithHTTPClient(client *http.Client) *CombinedDetectionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the combined detections params
func (o *CombinedDetectionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the combined detections params
func (o *CombinedDetectionsParams) WithFilter(filter *string) *CombinedDetectionsParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the combined detections params
func (o *CombinedDetectionsParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithLimit adds the limit to the combined detections params
func (o *CombinedDetectionsParams) WithLimit(limit *int64) *CombinedDetectionsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the combined detections params
func (o *CombinedDetectionsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the combined detections params
func (o *CombinedDetectionsParams) WithOffset(offset *int64) *CombinedDetectionsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the combined detections params
func (o *CombinedDetectionsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithSort adds the sort to the combined detections params
func (o *CombinedDetectionsParams) WithSort(sort *string) *CombinedDetectionsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the combined detections params
func (o *CombinedDetectionsParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *CombinedDetectionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
