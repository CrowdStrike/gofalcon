// Code generated by go-swagger; DO NOT EDIT.

package cao_hunting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cao hunting API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cao hunting API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AggregateIntelligenceQueries(params *AggregateIntelligenceQueriesParams, opts ...ClientOption) (*AggregateIntelligenceQueriesOK, error)

	GetArchiveExport(params *GetArchiveExportParams, opts ...ClientOption) (*GetArchiveExportOK, error)

	GetIntelligenceQueries(params *GetIntelligenceQueriesParams, opts ...ClientOption) (*GetIntelligenceQueriesOK, error)

	SearchIntelligenceQueries(params *SearchIntelligenceQueriesParams, opts ...ClientOption) (*SearchIntelligenceQueriesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AggregateIntelligenceQueries aggregates intelligence queries
*/
func (a *Client) AggregateIntelligenceQueries(params *AggregateIntelligenceQueriesParams, opts ...ClientOption) (*AggregateIntelligenceQueriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAggregateIntelligenceQueriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AggregateIntelligenceQueries",
		Method:             "POST",
		PathPattern:        "/hunting/aggregates/intelligence-queries/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AggregateIntelligenceQueriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AggregateIntelligenceQueriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AggregateIntelligenceQueries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArchiveExport creates an archive export
*/
func (a *Client) GetArchiveExport(params *GetArchiveExportParams, opts ...ClientOption) (*GetArchiveExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArchiveExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetArchiveExport",
		Method:             "GET",
		PathPattern:        "/hunting/entities/archive-exports/v1",
		ProducesMediaTypes: []string{"application/json", "application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArchiveExportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArchiveExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetArchiveExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIntelligenceQueries retrieves a list of intelligence queries
*/
func (a *Client) GetIntelligenceQueries(params *GetIntelligenceQueriesParams, opts ...ClientOption) (*GetIntelligenceQueriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntelligenceQueriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIntelligenceQueries",
		Method:             "GET",
		PathPattern:        "/hunting/entities/intelligence-queries/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntelligenceQueriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntelligenceQueriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIntelligenceQueries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchIntelligenceQueries searches intelligence queries that match the provided conditions
*/
func (a *Client) SearchIntelligenceQueries(params *SearchIntelligenceQueriesParams, opts ...ClientOption) (*SearchIntelligenceQueriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchIntelligenceQueriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchIntelligenceQueries",
		Method:             "GET",
		PathPattern:        "/hunting/queries/intelligence-queries/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchIntelligenceQueriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchIntelligenceQueriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchIntelligenceQueries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
