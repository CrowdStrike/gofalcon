// Code generated by go-swagger; DO NOT EDIT.

package cao_hunting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetIntelligenceQueriesReader is a Reader for the GetIntelligenceQueries structure.
type GetIntelligenceQueriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIntelligenceQueriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIntelligenceQueriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetIntelligenceQueriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetIntelligenceQueriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetIntelligenceQueriesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 499:
		result := NewGetIntelligenceQueriesClientClosedRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetIntelligenceQueriesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /hunting/entities/intelligence-queries/v1] GetIntelligenceQueries", response, response.Code())
	}
}

// NewGetIntelligenceQueriesOK creates a GetIntelligenceQueriesOK with default headers values
func NewGetIntelligenceQueriesOK() *GetIntelligenceQueriesOK {
	return &GetIntelligenceQueriesOK{}
}

/*
GetIntelligenceQueriesOK describes a response with status code 200, with default header values.

OK
*/
type GetIntelligenceQueriesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CaohuntingapiIntelligenceQueryEntityResponse
}

// IsSuccess returns true when this get intelligence queries o k response has a 2xx status code
func (o *GetIntelligenceQueriesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get intelligence queries o k response has a 3xx status code
func (o *GetIntelligenceQueriesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get intelligence queries o k response has a 4xx status code
func (o *GetIntelligenceQueriesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get intelligence queries o k response has a 5xx status code
func (o *GetIntelligenceQueriesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get intelligence queries o k response a status code equal to that given
func (o *GetIntelligenceQueriesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get intelligence queries o k response
func (o *GetIntelligenceQueriesOK) Code() int {
	return 200
}

func (o *GetIntelligenceQueriesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hunting/entities/intelligence-queries/v1][%d] getIntelligenceQueriesOK %s", 200, payload)
}

func (o *GetIntelligenceQueriesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hunting/entities/intelligence-queries/v1][%d] getIntelligenceQueriesOK %s", 200, payload)
}

func (o *GetIntelligenceQueriesOK) GetPayload() *models.CaohuntingapiIntelligenceQueryEntityResponse {
	return o.Payload
}

func (o *GetIntelligenceQueriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CaohuntingapiIntelligenceQueryEntityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntelligenceQueriesBadRequest creates a GetIntelligenceQueriesBadRequest with default headers values
func NewGetIntelligenceQueriesBadRequest() *GetIntelligenceQueriesBadRequest {
	return &GetIntelligenceQueriesBadRequest{}
}

/*
GetIntelligenceQueriesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetIntelligenceQueriesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get intelligence queries bad request response has a 2xx status code
func (o *GetIntelligenceQueriesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get intelligence queries bad request response has a 3xx status code
func (o *GetIntelligenceQueriesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get intelligence queries bad request response has a 4xx status code
func (o *GetIntelligenceQueriesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get intelligence queries bad request response has a 5xx status code
func (o *GetIntelligenceQueriesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get intelligence queries bad request response a status code equal to that given
func (o *GetIntelligenceQueriesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get intelligence queries bad request response
func (o *GetIntelligenceQueriesBadRequest) Code() int {
	return 400
}

func (o *GetIntelligenceQueriesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hunting/entities/intelligence-queries/v1][%d] getIntelligenceQueriesBadRequest %s", 400, payload)
}

func (o *GetIntelligenceQueriesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hunting/entities/intelligence-queries/v1][%d] getIntelligenceQueriesBadRequest %s", 400, payload)
}

func (o *GetIntelligenceQueriesBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetIntelligenceQueriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntelligenceQueriesForbidden creates a GetIntelligenceQueriesForbidden with default headers values
func NewGetIntelligenceQueriesForbidden() *GetIntelligenceQueriesForbidden {
	return &GetIntelligenceQueriesForbidden{}
}

/*
GetIntelligenceQueriesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetIntelligenceQueriesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get intelligence queries forbidden response has a 2xx status code
func (o *GetIntelligenceQueriesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get intelligence queries forbidden response has a 3xx status code
func (o *GetIntelligenceQueriesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get intelligence queries forbidden response has a 4xx status code
func (o *GetIntelligenceQueriesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get intelligence queries forbidden response has a 5xx status code
func (o *GetIntelligenceQueriesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get intelligence queries forbidden response a status code equal to that given
func (o *GetIntelligenceQueriesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get intelligence queries forbidden response
func (o *GetIntelligenceQueriesForbidden) Code() int {
	return 403
}

func (o *GetIntelligenceQueriesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hunting/entities/intelligence-queries/v1][%d] getIntelligenceQueriesForbidden %s", 403, payload)
}

func (o *GetIntelligenceQueriesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hunting/entities/intelligence-queries/v1][%d] getIntelligenceQueriesForbidden %s", 403, payload)
}

func (o *GetIntelligenceQueriesForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetIntelligenceQueriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntelligenceQueriesTooManyRequests creates a GetIntelligenceQueriesTooManyRequests with default headers values
func NewGetIntelligenceQueriesTooManyRequests() *GetIntelligenceQueriesTooManyRequests {
	return &GetIntelligenceQueriesTooManyRequests{}
}

/*
GetIntelligenceQueriesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetIntelligenceQueriesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get intelligence queries too many requests response has a 2xx status code
func (o *GetIntelligenceQueriesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get intelligence queries too many requests response has a 3xx status code
func (o *GetIntelligenceQueriesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get intelligence queries too many requests response has a 4xx status code
func (o *GetIntelligenceQueriesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get intelligence queries too many requests response has a 5xx status code
func (o *GetIntelligenceQueriesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get intelligence queries too many requests response a status code equal to that given
func (o *GetIntelligenceQueriesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get intelligence queries too many requests response
func (o *GetIntelligenceQueriesTooManyRequests) Code() int {
	return 429
}

func (o *GetIntelligenceQueriesTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hunting/entities/intelligence-queries/v1][%d] getIntelligenceQueriesTooManyRequests %s", 429, payload)
}

func (o *GetIntelligenceQueriesTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hunting/entities/intelligence-queries/v1][%d] getIntelligenceQueriesTooManyRequests %s", 429, payload)
}

func (o *GetIntelligenceQueriesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetIntelligenceQueriesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntelligenceQueriesClientClosedRequest creates a GetIntelligenceQueriesClientClosedRequest with default headers values
func NewGetIntelligenceQueriesClientClosedRequest() *GetIntelligenceQueriesClientClosedRequest {
	return &GetIntelligenceQueriesClientClosedRequest{}
}

/*
GetIntelligenceQueriesClientClosedRequest describes a response with status code 499, with default header values.

Client request canceled
*/
type GetIntelligenceQueriesClientClosedRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get intelligence queries client closed request response has a 2xx status code
func (o *GetIntelligenceQueriesClientClosedRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get intelligence queries client closed request response has a 3xx status code
func (o *GetIntelligenceQueriesClientClosedRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get intelligence queries client closed request response has a 4xx status code
func (o *GetIntelligenceQueriesClientClosedRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get intelligence queries client closed request response has a 5xx status code
func (o *GetIntelligenceQueriesClientClosedRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get intelligence queries client closed request response a status code equal to that given
func (o *GetIntelligenceQueriesClientClosedRequest) IsCode(code int) bool {
	return code == 499
}

// Code gets the status code for the get intelligence queries client closed request response
func (o *GetIntelligenceQueriesClientClosedRequest) Code() int {
	return 499
}

func (o *GetIntelligenceQueriesClientClosedRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hunting/entities/intelligence-queries/v1][%d] getIntelligenceQueriesClientClosedRequest %s", 499, payload)
}

func (o *GetIntelligenceQueriesClientClosedRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hunting/entities/intelligence-queries/v1][%d] getIntelligenceQueriesClientClosedRequest %s", 499, payload)
}

func (o *GetIntelligenceQueriesClientClosedRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetIntelligenceQueriesClientClosedRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntelligenceQueriesInternalServerError creates a GetIntelligenceQueriesInternalServerError with default headers values
func NewGetIntelligenceQueriesInternalServerError() *GetIntelligenceQueriesInternalServerError {
	return &GetIntelligenceQueriesInternalServerError{}
}

/*
GetIntelligenceQueriesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetIntelligenceQueriesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get intelligence queries internal server error response has a 2xx status code
func (o *GetIntelligenceQueriesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get intelligence queries internal server error response has a 3xx status code
func (o *GetIntelligenceQueriesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get intelligence queries internal server error response has a 4xx status code
func (o *GetIntelligenceQueriesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get intelligence queries internal server error response has a 5xx status code
func (o *GetIntelligenceQueriesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get intelligence queries internal server error response a status code equal to that given
func (o *GetIntelligenceQueriesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get intelligence queries internal server error response
func (o *GetIntelligenceQueriesInternalServerError) Code() int {
	return 500
}

func (o *GetIntelligenceQueriesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hunting/entities/intelligence-queries/v1][%d] getIntelligenceQueriesInternalServerError %s", 500, payload)
}

func (o *GetIntelligenceQueriesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hunting/entities/intelligence-queries/v1][%d] getIntelligenceQueriesInternalServerError %s", 500, payload)
}

func (o *GetIntelligenceQueriesInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetIntelligenceQueriesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
