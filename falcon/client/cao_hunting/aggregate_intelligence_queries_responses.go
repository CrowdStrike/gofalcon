// Code generated by go-swagger; DO NOT EDIT.

package cao_hunting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// AggregateIntelligenceQueriesReader is a Reader for the AggregateIntelligenceQueries structure.
type AggregateIntelligenceQueriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AggregateIntelligenceQueriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAggregateIntelligenceQueriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAggregateIntelligenceQueriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAggregateIntelligenceQueriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAggregateIntelligenceQueriesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAggregateIntelligenceQueriesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 499:
		result := NewAggregateIntelligenceQueriesClientClosedRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAggregateIntelligenceQueriesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /hunting/aggregates/intelligence-queries/v1] AggregateIntelligenceQueries", response, response.Code())
	}
}

// NewAggregateIntelligenceQueriesOK creates a AggregateIntelligenceQueriesOK with default headers values
func NewAggregateIntelligenceQueriesOK() *AggregateIntelligenceQueriesOK {
	return &AggregateIntelligenceQueriesOK{}
}

/*
AggregateIntelligenceQueriesOK describes a response with status code 200, with default header values.

OK
*/
type AggregateIntelligenceQueriesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIIntelligenceQueryAggregatesResponse
}

// IsSuccess returns true when this aggregate intelligence queries o k response has a 2xx status code
func (o *AggregateIntelligenceQueriesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this aggregate intelligence queries o k response has a 3xx status code
func (o *AggregateIntelligenceQueriesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate intelligence queries o k response has a 4xx status code
func (o *AggregateIntelligenceQueriesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this aggregate intelligence queries o k response has a 5xx status code
func (o *AggregateIntelligenceQueriesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate intelligence queries o k response a status code equal to that given
func (o *AggregateIntelligenceQueriesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the aggregate intelligence queries o k response
func (o *AggregateIntelligenceQueriesOK) Code() int {
	return 200
}

func (o *AggregateIntelligenceQueriesOK) Error() string {
	return fmt.Sprintf("[POST /hunting/aggregates/intelligence-queries/v1][%d] aggregateIntelligenceQueriesOK  %+v", 200, o.Payload)
}

func (o *AggregateIntelligenceQueriesOK) String() string {
	return fmt.Sprintf("[POST /hunting/aggregates/intelligence-queries/v1][%d] aggregateIntelligenceQueriesOK  %+v", 200, o.Payload)
}

func (o *AggregateIntelligenceQueriesOK) GetPayload() *models.APIIntelligenceQueryAggregatesResponse {
	return o.Payload
}

func (o *AggregateIntelligenceQueriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIIntelligenceQueryAggregatesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateIntelligenceQueriesBadRequest creates a AggregateIntelligenceQueriesBadRequest with default headers values
func NewAggregateIntelligenceQueriesBadRequest() *AggregateIntelligenceQueriesBadRequest {
	return &AggregateIntelligenceQueriesBadRequest{}
}

/*
AggregateIntelligenceQueriesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AggregateIntelligenceQueriesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this aggregate intelligence queries bad request response has a 2xx status code
func (o *AggregateIntelligenceQueriesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate intelligence queries bad request response has a 3xx status code
func (o *AggregateIntelligenceQueriesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate intelligence queries bad request response has a 4xx status code
func (o *AggregateIntelligenceQueriesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate intelligence queries bad request response has a 5xx status code
func (o *AggregateIntelligenceQueriesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate intelligence queries bad request response a status code equal to that given
func (o *AggregateIntelligenceQueriesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the aggregate intelligence queries bad request response
func (o *AggregateIntelligenceQueriesBadRequest) Code() int {
	return 400
}

func (o *AggregateIntelligenceQueriesBadRequest) Error() string {
	return fmt.Sprintf("[POST /hunting/aggregates/intelligence-queries/v1][%d] aggregateIntelligenceQueriesBadRequest  %+v", 400, o.Payload)
}

func (o *AggregateIntelligenceQueriesBadRequest) String() string {
	return fmt.Sprintf("[POST /hunting/aggregates/intelligence-queries/v1][%d] aggregateIntelligenceQueriesBadRequest  %+v", 400, o.Payload)
}

func (o *AggregateIntelligenceQueriesBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *AggregateIntelligenceQueriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateIntelligenceQueriesForbidden creates a AggregateIntelligenceQueriesForbidden with default headers values
func NewAggregateIntelligenceQueriesForbidden() *AggregateIntelligenceQueriesForbidden {
	return &AggregateIntelligenceQueriesForbidden{}
}

/*
AggregateIntelligenceQueriesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AggregateIntelligenceQueriesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this aggregate intelligence queries forbidden response has a 2xx status code
func (o *AggregateIntelligenceQueriesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate intelligence queries forbidden response has a 3xx status code
func (o *AggregateIntelligenceQueriesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate intelligence queries forbidden response has a 4xx status code
func (o *AggregateIntelligenceQueriesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate intelligence queries forbidden response has a 5xx status code
func (o *AggregateIntelligenceQueriesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate intelligence queries forbidden response a status code equal to that given
func (o *AggregateIntelligenceQueriesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the aggregate intelligence queries forbidden response
func (o *AggregateIntelligenceQueriesForbidden) Code() int {
	return 403
}

func (o *AggregateIntelligenceQueriesForbidden) Error() string {
	return fmt.Sprintf("[POST /hunting/aggregates/intelligence-queries/v1][%d] aggregateIntelligenceQueriesForbidden  %+v", 403, o.Payload)
}

func (o *AggregateIntelligenceQueriesForbidden) String() string {
	return fmt.Sprintf("[POST /hunting/aggregates/intelligence-queries/v1][%d] aggregateIntelligenceQueriesForbidden  %+v", 403, o.Payload)
}

func (o *AggregateIntelligenceQueriesForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *AggregateIntelligenceQueriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateIntelligenceQueriesNotFound creates a AggregateIntelligenceQueriesNotFound with default headers values
func NewAggregateIntelligenceQueriesNotFound() *AggregateIntelligenceQueriesNotFound {
	return &AggregateIntelligenceQueriesNotFound{}
}

/*
AggregateIntelligenceQueriesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AggregateIntelligenceQueriesNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this aggregate intelligence queries not found response has a 2xx status code
func (o *AggregateIntelligenceQueriesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate intelligence queries not found response has a 3xx status code
func (o *AggregateIntelligenceQueriesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate intelligence queries not found response has a 4xx status code
func (o *AggregateIntelligenceQueriesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate intelligence queries not found response has a 5xx status code
func (o *AggregateIntelligenceQueriesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate intelligence queries not found response a status code equal to that given
func (o *AggregateIntelligenceQueriesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the aggregate intelligence queries not found response
func (o *AggregateIntelligenceQueriesNotFound) Code() int {
	return 404
}

func (o *AggregateIntelligenceQueriesNotFound) Error() string {
	return fmt.Sprintf("[POST /hunting/aggregates/intelligence-queries/v1][%d] aggregateIntelligenceQueriesNotFound  %+v", 404, o.Payload)
}

func (o *AggregateIntelligenceQueriesNotFound) String() string {
	return fmt.Sprintf("[POST /hunting/aggregates/intelligence-queries/v1][%d] aggregateIntelligenceQueriesNotFound  %+v", 404, o.Payload)
}

func (o *AggregateIntelligenceQueriesNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *AggregateIntelligenceQueriesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateIntelligenceQueriesTooManyRequests creates a AggregateIntelligenceQueriesTooManyRequests with default headers values
func NewAggregateIntelligenceQueriesTooManyRequests() *AggregateIntelligenceQueriesTooManyRequests {
	return &AggregateIntelligenceQueriesTooManyRequests{}
}

/*
AggregateIntelligenceQueriesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type AggregateIntelligenceQueriesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this aggregate intelligence queries too many requests response has a 2xx status code
func (o *AggregateIntelligenceQueriesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate intelligence queries too many requests response has a 3xx status code
func (o *AggregateIntelligenceQueriesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate intelligence queries too many requests response has a 4xx status code
func (o *AggregateIntelligenceQueriesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate intelligence queries too many requests response has a 5xx status code
func (o *AggregateIntelligenceQueriesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate intelligence queries too many requests response a status code equal to that given
func (o *AggregateIntelligenceQueriesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the aggregate intelligence queries too many requests response
func (o *AggregateIntelligenceQueriesTooManyRequests) Code() int {
	return 429
}

func (o *AggregateIntelligenceQueriesTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /hunting/aggregates/intelligence-queries/v1][%d] aggregateIntelligenceQueriesTooManyRequests  %+v", 429, o.Payload)
}

func (o *AggregateIntelligenceQueriesTooManyRequests) String() string {
	return fmt.Sprintf("[POST /hunting/aggregates/intelligence-queries/v1][%d] aggregateIntelligenceQueriesTooManyRequests  %+v", 429, o.Payload)
}

func (o *AggregateIntelligenceQueriesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *AggregateIntelligenceQueriesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateIntelligenceQueriesClientClosedRequest creates a AggregateIntelligenceQueriesClientClosedRequest with default headers values
func NewAggregateIntelligenceQueriesClientClosedRequest() *AggregateIntelligenceQueriesClientClosedRequest {
	return &AggregateIntelligenceQueriesClientClosedRequest{}
}

/*
AggregateIntelligenceQueriesClientClosedRequest describes a response with status code 499, with default header values.

Client request canceled
*/
type AggregateIntelligenceQueriesClientClosedRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this aggregate intelligence queries client closed request response has a 2xx status code
func (o *AggregateIntelligenceQueriesClientClosedRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate intelligence queries client closed request response has a 3xx status code
func (o *AggregateIntelligenceQueriesClientClosedRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate intelligence queries client closed request response has a 4xx status code
func (o *AggregateIntelligenceQueriesClientClosedRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate intelligence queries client closed request response has a 5xx status code
func (o *AggregateIntelligenceQueriesClientClosedRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate intelligence queries client closed request response a status code equal to that given
func (o *AggregateIntelligenceQueriesClientClosedRequest) IsCode(code int) bool {
	return code == 499
}

// Code gets the status code for the aggregate intelligence queries client closed request response
func (o *AggregateIntelligenceQueriesClientClosedRequest) Code() int {
	return 499
}

func (o *AggregateIntelligenceQueriesClientClosedRequest) Error() string {
	return fmt.Sprintf("[POST /hunting/aggregates/intelligence-queries/v1][%d] aggregateIntelligenceQueriesClientClosedRequest  %+v", 499, o.Payload)
}

func (o *AggregateIntelligenceQueriesClientClosedRequest) String() string {
	return fmt.Sprintf("[POST /hunting/aggregates/intelligence-queries/v1][%d] aggregateIntelligenceQueriesClientClosedRequest  %+v", 499, o.Payload)
}

func (o *AggregateIntelligenceQueriesClientClosedRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *AggregateIntelligenceQueriesClientClosedRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateIntelligenceQueriesInternalServerError creates a AggregateIntelligenceQueriesInternalServerError with default headers values
func NewAggregateIntelligenceQueriesInternalServerError() *AggregateIntelligenceQueriesInternalServerError {
	return &AggregateIntelligenceQueriesInternalServerError{}
}

/*
AggregateIntelligenceQueriesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AggregateIntelligenceQueriesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this aggregate intelligence queries internal server error response has a 2xx status code
func (o *AggregateIntelligenceQueriesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate intelligence queries internal server error response has a 3xx status code
func (o *AggregateIntelligenceQueriesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate intelligence queries internal server error response has a 4xx status code
func (o *AggregateIntelligenceQueriesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this aggregate intelligence queries internal server error response has a 5xx status code
func (o *AggregateIntelligenceQueriesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this aggregate intelligence queries internal server error response a status code equal to that given
func (o *AggregateIntelligenceQueriesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the aggregate intelligence queries internal server error response
func (o *AggregateIntelligenceQueriesInternalServerError) Code() int {
	return 500
}

func (o *AggregateIntelligenceQueriesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /hunting/aggregates/intelligence-queries/v1][%d] aggregateIntelligenceQueriesInternalServerError  %+v", 500, o.Payload)
}

func (o *AggregateIntelligenceQueriesInternalServerError) String() string {
	return fmt.Sprintf("[POST /hunting/aggregates/intelligence-queries/v1][%d] aggregateIntelligenceQueriesInternalServerError  %+v", 500, o.Payload)
}

func (o *AggregateIntelligenceQueriesInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *AggregateIntelligenceQueriesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
