// Code generated by go-swagger; DO NOT EDIT.

package cao_hunting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// SearchIntelligenceQueriesReader is a Reader for the SearchIntelligenceQueries structure.
type SearchIntelligenceQueriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchIntelligenceQueriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchIntelligenceQueriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchIntelligenceQueriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSearchIntelligenceQueriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchIntelligenceQueriesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSearchIntelligenceQueriesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 499:
		result := NewSearchIntelligenceQueriesClientClosedRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchIntelligenceQueriesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /hunting/queries/intelligence-queries/v1] SearchIntelligenceQueries", response, response.Code())
	}
}

// NewSearchIntelligenceQueriesOK creates a SearchIntelligenceQueriesOK with default headers values
func NewSearchIntelligenceQueriesOK() *SearchIntelligenceQueriesOK {
	return &SearchIntelligenceQueriesOK{}
}

/*
SearchIntelligenceQueriesOK describes a response with status code 200, with default header values.

OK
*/
type SearchIntelligenceQueriesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecQueryResponse
}

// IsSuccess returns true when this search intelligence queries o k response has a 2xx status code
func (o *SearchIntelligenceQueriesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search intelligence queries o k response has a 3xx status code
func (o *SearchIntelligenceQueriesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search intelligence queries o k response has a 4xx status code
func (o *SearchIntelligenceQueriesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search intelligence queries o k response has a 5xx status code
func (o *SearchIntelligenceQueriesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search intelligence queries o k response a status code equal to that given
func (o *SearchIntelligenceQueriesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the search intelligence queries o k response
func (o *SearchIntelligenceQueriesOK) Code() int {
	return 200
}

func (o *SearchIntelligenceQueriesOK) Error() string {
	return fmt.Sprintf("[GET /hunting/queries/intelligence-queries/v1][%d] searchIntelligenceQueriesOK  %+v", 200, o.Payload)
}

func (o *SearchIntelligenceQueriesOK) String() string {
	return fmt.Sprintf("[GET /hunting/queries/intelligence-queries/v1][%d] searchIntelligenceQueriesOK  %+v", 200, o.Payload)
}

func (o *SearchIntelligenceQueriesOK) GetPayload() *models.MsaspecQueryResponse {
	return o.Payload
}

func (o *SearchIntelligenceQueriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchIntelligenceQueriesBadRequest creates a SearchIntelligenceQueriesBadRequest with default headers values
func NewSearchIntelligenceQueriesBadRequest() *SearchIntelligenceQueriesBadRequest {
	return &SearchIntelligenceQueriesBadRequest{}
}

/*
SearchIntelligenceQueriesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SearchIntelligenceQueriesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this search intelligence queries bad request response has a 2xx status code
func (o *SearchIntelligenceQueriesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search intelligence queries bad request response has a 3xx status code
func (o *SearchIntelligenceQueriesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search intelligence queries bad request response has a 4xx status code
func (o *SearchIntelligenceQueriesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this search intelligence queries bad request response has a 5xx status code
func (o *SearchIntelligenceQueriesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this search intelligence queries bad request response a status code equal to that given
func (o *SearchIntelligenceQueriesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the search intelligence queries bad request response
func (o *SearchIntelligenceQueriesBadRequest) Code() int {
	return 400
}

func (o *SearchIntelligenceQueriesBadRequest) Error() string {
	return fmt.Sprintf("[GET /hunting/queries/intelligence-queries/v1][%d] searchIntelligenceQueriesBadRequest  %+v", 400, o.Payload)
}

func (o *SearchIntelligenceQueriesBadRequest) String() string {
	return fmt.Sprintf("[GET /hunting/queries/intelligence-queries/v1][%d] searchIntelligenceQueriesBadRequest  %+v", 400, o.Payload)
}

func (o *SearchIntelligenceQueriesBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *SearchIntelligenceQueriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchIntelligenceQueriesForbidden creates a SearchIntelligenceQueriesForbidden with default headers values
func NewSearchIntelligenceQueriesForbidden() *SearchIntelligenceQueriesForbidden {
	return &SearchIntelligenceQueriesForbidden{}
}

/*
SearchIntelligenceQueriesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SearchIntelligenceQueriesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this search intelligence queries forbidden response has a 2xx status code
func (o *SearchIntelligenceQueriesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search intelligence queries forbidden response has a 3xx status code
func (o *SearchIntelligenceQueriesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search intelligence queries forbidden response has a 4xx status code
func (o *SearchIntelligenceQueriesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this search intelligence queries forbidden response has a 5xx status code
func (o *SearchIntelligenceQueriesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this search intelligence queries forbidden response a status code equal to that given
func (o *SearchIntelligenceQueriesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the search intelligence queries forbidden response
func (o *SearchIntelligenceQueriesForbidden) Code() int {
	return 403
}

func (o *SearchIntelligenceQueriesForbidden) Error() string {
	return fmt.Sprintf("[GET /hunting/queries/intelligence-queries/v1][%d] searchIntelligenceQueriesForbidden  %+v", 403, o.Payload)
}

func (o *SearchIntelligenceQueriesForbidden) String() string {
	return fmt.Sprintf("[GET /hunting/queries/intelligence-queries/v1][%d] searchIntelligenceQueriesForbidden  %+v", 403, o.Payload)
}

func (o *SearchIntelligenceQueriesForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *SearchIntelligenceQueriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchIntelligenceQueriesNotFound creates a SearchIntelligenceQueriesNotFound with default headers values
func NewSearchIntelligenceQueriesNotFound() *SearchIntelligenceQueriesNotFound {
	return &SearchIntelligenceQueriesNotFound{}
}

/*
SearchIntelligenceQueriesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SearchIntelligenceQueriesNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this search intelligence queries not found response has a 2xx status code
func (o *SearchIntelligenceQueriesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search intelligence queries not found response has a 3xx status code
func (o *SearchIntelligenceQueriesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search intelligence queries not found response has a 4xx status code
func (o *SearchIntelligenceQueriesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this search intelligence queries not found response has a 5xx status code
func (o *SearchIntelligenceQueriesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this search intelligence queries not found response a status code equal to that given
func (o *SearchIntelligenceQueriesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the search intelligence queries not found response
func (o *SearchIntelligenceQueriesNotFound) Code() int {
	return 404
}

func (o *SearchIntelligenceQueriesNotFound) Error() string {
	return fmt.Sprintf("[GET /hunting/queries/intelligence-queries/v1][%d] searchIntelligenceQueriesNotFound  %+v", 404, o.Payload)
}

func (o *SearchIntelligenceQueriesNotFound) String() string {
	return fmt.Sprintf("[GET /hunting/queries/intelligence-queries/v1][%d] searchIntelligenceQueriesNotFound  %+v", 404, o.Payload)
}

func (o *SearchIntelligenceQueriesNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *SearchIntelligenceQueriesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchIntelligenceQueriesTooManyRequests creates a SearchIntelligenceQueriesTooManyRequests with default headers values
func NewSearchIntelligenceQueriesTooManyRequests() *SearchIntelligenceQueriesTooManyRequests {
	return &SearchIntelligenceQueriesTooManyRequests{}
}

/*
SearchIntelligenceQueriesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type SearchIntelligenceQueriesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this search intelligence queries too many requests response has a 2xx status code
func (o *SearchIntelligenceQueriesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search intelligence queries too many requests response has a 3xx status code
func (o *SearchIntelligenceQueriesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search intelligence queries too many requests response has a 4xx status code
func (o *SearchIntelligenceQueriesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this search intelligence queries too many requests response has a 5xx status code
func (o *SearchIntelligenceQueriesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this search intelligence queries too many requests response a status code equal to that given
func (o *SearchIntelligenceQueriesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the search intelligence queries too many requests response
func (o *SearchIntelligenceQueriesTooManyRequests) Code() int {
	return 429
}

func (o *SearchIntelligenceQueriesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /hunting/queries/intelligence-queries/v1][%d] searchIntelligenceQueriesTooManyRequests  %+v", 429, o.Payload)
}

func (o *SearchIntelligenceQueriesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /hunting/queries/intelligence-queries/v1][%d] searchIntelligenceQueriesTooManyRequests  %+v", 429, o.Payload)
}

func (o *SearchIntelligenceQueriesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *SearchIntelligenceQueriesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchIntelligenceQueriesClientClosedRequest creates a SearchIntelligenceQueriesClientClosedRequest with default headers values
func NewSearchIntelligenceQueriesClientClosedRequest() *SearchIntelligenceQueriesClientClosedRequest {
	return &SearchIntelligenceQueriesClientClosedRequest{}
}

/*
SearchIntelligenceQueriesClientClosedRequest describes a response with status code 499, with default header values.

Client request canceled
*/
type SearchIntelligenceQueriesClientClosedRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this search intelligence queries client closed request response has a 2xx status code
func (o *SearchIntelligenceQueriesClientClosedRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search intelligence queries client closed request response has a 3xx status code
func (o *SearchIntelligenceQueriesClientClosedRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search intelligence queries client closed request response has a 4xx status code
func (o *SearchIntelligenceQueriesClientClosedRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this search intelligence queries client closed request response has a 5xx status code
func (o *SearchIntelligenceQueriesClientClosedRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this search intelligence queries client closed request response a status code equal to that given
func (o *SearchIntelligenceQueriesClientClosedRequest) IsCode(code int) bool {
	return code == 499
}

// Code gets the status code for the search intelligence queries client closed request response
func (o *SearchIntelligenceQueriesClientClosedRequest) Code() int {
	return 499
}

func (o *SearchIntelligenceQueriesClientClosedRequest) Error() string {
	return fmt.Sprintf("[GET /hunting/queries/intelligence-queries/v1][%d] searchIntelligenceQueriesClientClosedRequest  %+v", 499, o.Payload)
}

func (o *SearchIntelligenceQueriesClientClosedRequest) String() string {
	return fmt.Sprintf("[GET /hunting/queries/intelligence-queries/v1][%d] searchIntelligenceQueriesClientClosedRequest  %+v", 499, o.Payload)
}

func (o *SearchIntelligenceQueriesClientClosedRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *SearchIntelligenceQueriesClientClosedRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchIntelligenceQueriesInternalServerError creates a SearchIntelligenceQueriesInternalServerError with default headers values
func NewSearchIntelligenceQueriesInternalServerError() *SearchIntelligenceQueriesInternalServerError {
	return &SearchIntelligenceQueriesInternalServerError{}
}

/*
SearchIntelligenceQueriesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type SearchIntelligenceQueriesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this search intelligence queries internal server error response has a 2xx status code
func (o *SearchIntelligenceQueriesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search intelligence queries internal server error response has a 3xx status code
func (o *SearchIntelligenceQueriesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search intelligence queries internal server error response has a 4xx status code
func (o *SearchIntelligenceQueriesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this search intelligence queries internal server error response has a 5xx status code
func (o *SearchIntelligenceQueriesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this search intelligence queries internal server error response a status code equal to that given
func (o *SearchIntelligenceQueriesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the search intelligence queries internal server error response
func (o *SearchIntelligenceQueriesInternalServerError) Code() int {
	return 500
}

func (o *SearchIntelligenceQueriesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /hunting/queries/intelligence-queries/v1][%d] searchIntelligenceQueriesInternalServerError  %+v", 500, o.Payload)
}

func (o *SearchIntelligenceQueriesInternalServerError) String() string {
	return fmt.Sprintf("[GET /hunting/queries/intelligence-queries/v1][%d] searchIntelligenceQueriesInternalServerError  %+v", 500, o.Payload)
}

func (o *SearchIntelligenceQueriesInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *SearchIntelligenceQueriesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
