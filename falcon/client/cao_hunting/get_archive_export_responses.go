// Code generated by go-swagger; DO NOT EDIT.

package cao_hunting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetArchiveExportReader is a Reader for the GetArchiveExport structure.
type GetArchiveExportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetArchiveExportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetArchiveExportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetArchiveExportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetArchiveExportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetArchiveExportTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 499:
		result := NewGetArchiveExportClientClosedRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetArchiveExportInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /hunting/entities/archive-exports/v1] GetArchiveExport", response, response.Code())
	}
}

// NewGetArchiveExportOK creates a GetArchiveExportOK with default headers values
func NewGetArchiveExportOK() *GetArchiveExportOK {
	return &GetArchiveExportOK{}
}

/*
GetArchiveExportOK describes a response with status code 200, with default header values.

OK
*/
type GetArchiveExportOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload []int64
}

// IsSuccess returns true when this get archive export o k response has a 2xx status code
func (o *GetArchiveExportOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get archive export o k response has a 3xx status code
func (o *GetArchiveExportOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get archive export o k response has a 4xx status code
func (o *GetArchiveExportOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get archive export o k response has a 5xx status code
func (o *GetArchiveExportOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get archive export o k response a status code equal to that given
func (o *GetArchiveExportOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get archive export o k response
func (o *GetArchiveExportOK) Code() int {
	return 200
}

func (o *GetArchiveExportOK) Error() string {
	return fmt.Sprintf("[GET /hunting/entities/archive-exports/v1][%d] getArchiveExportOK  %+v", 200, o.Payload)
}

func (o *GetArchiveExportOK) String() string {
	return fmt.Sprintf("[GET /hunting/entities/archive-exports/v1][%d] getArchiveExportOK  %+v", 200, o.Payload)
}

func (o *GetArchiveExportOK) GetPayload() []int64 {
	return o.Payload
}

func (o *GetArchiveExportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetArchiveExportBadRequest creates a GetArchiveExportBadRequest with default headers values
func NewGetArchiveExportBadRequest() *GetArchiveExportBadRequest {
	return &GetArchiveExportBadRequest{}
}

/*
GetArchiveExportBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetArchiveExportBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get archive export bad request response has a 2xx status code
func (o *GetArchiveExportBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get archive export bad request response has a 3xx status code
func (o *GetArchiveExportBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get archive export bad request response has a 4xx status code
func (o *GetArchiveExportBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get archive export bad request response has a 5xx status code
func (o *GetArchiveExportBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get archive export bad request response a status code equal to that given
func (o *GetArchiveExportBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get archive export bad request response
func (o *GetArchiveExportBadRequest) Code() int {
	return 400
}

func (o *GetArchiveExportBadRequest) Error() string {
	return fmt.Sprintf("[GET /hunting/entities/archive-exports/v1][%d] getArchiveExportBadRequest  %+v", 400, o.Payload)
}

func (o *GetArchiveExportBadRequest) String() string {
	return fmt.Sprintf("[GET /hunting/entities/archive-exports/v1][%d] getArchiveExportBadRequest  %+v", 400, o.Payload)
}

func (o *GetArchiveExportBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetArchiveExportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetArchiveExportForbidden creates a GetArchiveExportForbidden with default headers values
func NewGetArchiveExportForbidden() *GetArchiveExportForbidden {
	return &GetArchiveExportForbidden{}
}

/*
GetArchiveExportForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetArchiveExportForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get archive export forbidden response has a 2xx status code
func (o *GetArchiveExportForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get archive export forbidden response has a 3xx status code
func (o *GetArchiveExportForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get archive export forbidden response has a 4xx status code
func (o *GetArchiveExportForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get archive export forbidden response has a 5xx status code
func (o *GetArchiveExportForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get archive export forbidden response a status code equal to that given
func (o *GetArchiveExportForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get archive export forbidden response
func (o *GetArchiveExportForbidden) Code() int {
	return 403
}

func (o *GetArchiveExportForbidden) Error() string {
	return fmt.Sprintf("[GET /hunting/entities/archive-exports/v1][%d] getArchiveExportForbidden  %+v", 403, o.Payload)
}

func (o *GetArchiveExportForbidden) String() string {
	return fmt.Sprintf("[GET /hunting/entities/archive-exports/v1][%d] getArchiveExportForbidden  %+v", 403, o.Payload)
}

func (o *GetArchiveExportForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetArchiveExportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetArchiveExportTooManyRequests creates a GetArchiveExportTooManyRequests with default headers values
func NewGetArchiveExportTooManyRequests() *GetArchiveExportTooManyRequests {
	return &GetArchiveExportTooManyRequests{}
}

/*
GetArchiveExportTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetArchiveExportTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get archive export too many requests response has a 2xx status code
func (o *GetArchiveExportTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get archive export too many requests response has a 3xx status code
func (o *GetArchiveExportTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get archive export too many requests response has a 4xx status code
func (o *GetArchiveExportTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get archive export too many requests response has a 5xx status code
func (o *GetArchiveExportTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get archive export too many requests response a status code equal to that given
func (o *GetArchiveExportTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get archive export too many requests response
func (o *GetArchiveExportTooManyRequests) Code() int {
	return 429
}

func (o *GetArchiveExportTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /hunting/entities/archive-exports/v1][%d] getArchiveExportTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetArchiveExportTooManyRequests) String() string {
	return fmt.Sprintf("[GET /hunting/entities/archive-exports/v1][%d] getArchiveExportTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetArchiveExportTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetArchiveExportTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetArchiveExportClientClosedRequest creates a GetArchiveExportClientClosedRequest with default headers values
func NewGetArchiveExportClientClosedRequest() *GetArchiveExportClientClosedRequest {
	return &GetArchiveExportClientClosedRequest{}
}

/*
GetArchiveExportClientClosedRequest describes a response with status code 499, with default header values.

Client request canceled
*/
type GetArchiveExportClientClosedRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get archive export client closed request response has a 2xx status code
func (o *GetArchiveExportClientClosedRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get archive export client closed request response has a 3xx status code
func (o *GetArchiveExportClientClosedRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get archive export client closed request response has a 4xx status code
func (o *GetArchiveExportClientClosedRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get archive export client closed request response has a 5xx status code
func (o *GetArchiveExportClientClosedRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get archive export client closed request response a status code equal to that given
func (o *GetArchiveExportClientClosedRequest) IsCode(code int) bool {
	return code == 499
}

// Code gets the status code for the get archive export client closed request response
func (o *GetArchiveExportClientClosedRequest) Code() int {
	return 499
}

func (o *GetArchiveExportClientClosedRequest) Error() string {
	return fmt.Sprintf("[GET /hunting/entities/archive-exports/v1][%d] getArchiveExportClientClosedRequest  %+v", 499, o.Payload)
}

func (o *GetArchiveExportClientClosedRequest) String() string {
	return fmt.Sprintf("[GET /hunting/entities/archive-exports/v1][%d] getArchiveExportClientClosedRequest  %+v", 499, o.Payload)
}

func (o *GetArchiveExportClientClosedRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetArchiveExportClientClosedRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetArchiveExportInternalServerError creates a GetArchiveExportInternalServerError with default headers values
func NewGetArchiveExportInternalServerError() *GetArchiveExportInternalServerError {
	return &GetArchiveExportInternalServerError{}
}

/*
GetArchiveExportInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetArchiveExportInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get archive export internal server error response has a 2xx status code
func (o *GetArchiveExportInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get archive export internal server error response has a 3xx status code
func (o *GetArchiveExportInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get archive export internal server error response has a 4xx status code
func (o *GetArchiveExportInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get archive export internal server error response has a 5xx status code
func (o *GetArchiveExportInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get archive export internal server error response a status code equal to that given
func (o *GetArchiveExportInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get archive export internal server error response
func (o *GetArchiveExportInternalServerError) Code() int {
	return 500
}

func (o *GetArchiveExportInternalServerError) Error() string {
	return fmt.Sprintf("[GET /hunting/entities/archive-exports/v1][%d] getArchiveExportInternalServerError  %+v", 500, o.Payload)
}

func (o *GetArchiveExportInternalServerError) String() string {
	return fmt.Sprintf("[GET /hunting/entities/archive-exports/v1][%d] getArchiveExportInternalServerError  %+v", 500, o.Payload)
}

func (o *GetArchiveExportInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetArchiveExportInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
