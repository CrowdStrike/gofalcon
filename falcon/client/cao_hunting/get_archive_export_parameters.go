// Code generated by go-swagger; DO NOT EDIT.

package cao_hunting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetArchiveExportParams creates a new GetArchiveExportParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetArchiveExportParams() *GetArchiveExportParams {
	return &GetArchiveExportParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetArchiveExportParamsWithTimeout creates a new GetArchiveExportParams object
// with the ability to set a timeout on a request.
func NewGetArchiveExportParamsWithTimeout(timeout time.Duration) *GetArchiveExportParams {
	return &GetArchiveExportParams{
		timeout: timeout,
	}
}

// NewGetArchiveExportParamsWithContext creates a new GetArchiveExportParams object
// with the ability to set a context for a request.
func NewGetArchiveExportParamsWithContext(ctx context.Context) *GetArchiveExportParams {
	return &GetArchiveExportParams{
		Context: ctx,
	}
}

// NewGetArchiveExportParamsWithHTTPClient creates a new GetArchiveExportParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetArchiveExportParamsWithHTTPClient(client *http.Client) *GetArchiveExportParams {
	return &GetArchiveExportParams{
		HTTPClient: client,
	}
}

/*
GetArchiveExportParams contains all the parameters to send to the API endpoint

	for the get archive export operation.

	Typically these are written to a http.Request.
*/
type GetArchiveExportParams struct {

	/* ArchiveType.

	   The Archive Type can be one of 'zip' and 'gzip'. Defaults to 'zip'.
	*/
	ArchiveType *string

	/* Filter.

	   The FQL Filter
	*/
	Filter *string

	/* Language.

	     The Query Language. Accepted Values:

	<li>cql</li><li>snort</li><li>suricata</li><li>yara</li>
	*/
	Language string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get archive export params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetArchiveExportParams) WithDefaults() *GetArchiveExportParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get archive export params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetArchiveExportParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get archive export params
func (o *GetArchiveExportParams) WithTimeout(timeout time.Duration) *GetArchiveExportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get archive export params
func (o *GetArchiveExportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get archive export params
func (o *GetArchiveExportParams) WithContext(ctx context.Context) *GetArchiveExportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get archive export params
func (o *GetArchiveExportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get archive export params
func (o *GetArchiveExportParams) WithHTTPClient(client *http.Client) *GetArchiveExportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get archive export params
func (o *GetArchiveExportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArchiveType adds the archiveType to the get archive export params
func (o *GetArchiveExportParams) WithArchiveType(archiveType *string) *GetArchiveExportParams {
	o.SetArchiveType(archiveType)
	return o
}

// SetArchiveType adds the archiveType to the get archive export params
func (o *GetArchiveExportParams) SetArchiveType(archiveType *string) {
	o.ArchiveType = archiveType
}

// WithFilter adds the filter to the get archive export params
func (o *GetArchiveExportParams) WithFilter(filter *string) *GetArchiveExportParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get archive export params
func (o *GetArchiveExportParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithLanguage adds the language to the get archive export params
func (o *GetArchiveExportParams) WithLanguage(language string) *GetArchiveExportParams {
	o.SetLanguage(language)
	return o
}

// SetLanguage adds the language to the get archive export params
func (o *GetArchiveExportParams) SetLanguage(language string) {
	o.Language = language
}

// WriteToRequest writes these params to a swagger request
func (o *GetArchiveExportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ArchiveType != nil {

		// query param archive_type
		var qrArchiveType string

		if o.ArchiveType != nil {
			qrArchiveType = *o.ArchiveType
		}
		qArchiveType := qrArchiveType
		if qArchiveType != "" {

			if err := r.SetQueryParam("archive_type", qArchiveType); err != nil {
				return err
			}
		}
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	// query param language
	qrLanguage := o.Language
	qLanguage := qrLanguage
	if qLanguage != "" {

		if err := r.SetQueryParam("language", qLanguage); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
