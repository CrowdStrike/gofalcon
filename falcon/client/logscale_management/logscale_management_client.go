// Code generated by go-swagger; DO NOT EDIT.

package logscale_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new logscale management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for logscale management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateView(params *CreateViewParams, opts ...ClientOption) (*CreateViewOK, error)

	Initialize(params *InitializeParams, opts ...ClientOption) (*InitializeOK, error)

	ListRepos(params *ListReposParams, opts ...ClientOption) (*ListReposOK, error)

	ListViews(params *ListViewsParams, opts ...ClientOption) (*ListViewsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateView creates a view
*/
func (a *Client) CreateView(params *CreateViewParams, opts ...ClientOption) (*CreateViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateViewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateView",
		Method:             "POST",
		PathPattern:        "/loggingapi/entities/views/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateView: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Initialize initializes the required logscale artifacts
*/
func (a *Client) Initialize(params *InitializeParams, opts ...ClientOption) (*InitializeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitializeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Initialize",
		Method:             "POST",
		PathPattern:        "/loggingapi/combined/initialize/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InitializeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InitializeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Initialize: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListRepos lists available repositories and views
*/
func (a *Client) ListRepos(params *ListReposParams, opts ...ClientOption) (*ListReposOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListReposParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListRepos",
		Method:             "GET",
		PathPattern:        "/loggingapi/combined/repos/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListReposReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListReposOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListRepos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListViews lists views
*/
func (a *Client) ListViews(params *ListViewsParams, opts ...ClientOption) (*ListViewsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListViewsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListViews",
		Method:             "GET",
		PathPattern:        "/loggingapi/entities/views/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListViewsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListViewsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListViews: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
