// Code generated by go-swagger; DO NOT EDIT.

package releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCombinedReleasesV1Mixin0Params creates a new CombinedReleasesV1Mixin0Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCombinedReleasesV1Mixin0Params() *CombinedReleasesV1Mixin0Params {
	return &CombinedReleasesV1Mixin0Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewCombinedReleasesV1Mixin0ParamsWithTimeout creates a new CombinedReleasesV1Mixin0Params object
// with the ability to set a timeout on a request.
func NewCombinedReleasesV1Mixin0ParamsWithTimeout(timeout time.Duration) *CombinedReleasesV1Mixin0Params {
	return &CombinedReleasesV1Mixin0Params{
		timeout: timeout,
	}
}

// NewCombinedReleasesV1Mixin0ParamsWithContext creates a new CombinedReleasesV1Mixin0Params object
// with the ability to set a context for a request.
func NewCombinedReleasesV1Mixin0ParamsWithContext(ctx context.Context) *CombinedReleasesV1Mixin0Params {
	return &CombinedReleasesV1Mixin0Params{
		Context: ctx,
	}
}

// NewCombinedReleasesV1Mixin0ParamsWithHTTPClient creates a new CombinedReleasesV1Mixin0Params object
// with the ability to set a custom HTTPClient for a request.
func NewCombinedReleasesV1Mixin0ParamsWithHTTPClient(client *http.Client) *CombinedReleasesV1Mixin0Params {
	return &CombinedReleasesV1Mixin0Params{
		HTTPClient: client,
	}
}

/*
CombinedReleasesV1Mixin0Params contains all the parameters to send to the API endpoint

	for the combined releases v1 mixin0 operation.

	Typically these are written to a http.Request.
*/
type CombinedReleasesV1Mixin0Params struct {

	/* Authorization.

	   authorization header
	*/
	Authorization string

	/* XCSUSERNAME.

	   user name
	*/
	XCSUSERNAME *string

	/* Filter.

	   FQL query specifying filter parameters.
	*/
	Filter string

	/* Limit.

	   Maximum number of records to return.
	*/
	Limit *int64

	/* Offset.

	   Starting pagination offset of records to return.
	*/
	Offset *string

	/* Sort.

	   Sort items by providing a comma separated list of property and direction (eg name.desc,time.asc). If direction is omitted, defaults to descending.
	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the combined releases v1 mixin0 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CombinedReleasesV1Mixin0Params) WithDefaults() *CombinedReleasesV1Mixin0Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the combined releases v1 mixin0 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CombinedReleasesV1Mixin0Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the combined releases v1 mixin0 params
func (o *CombinedReleasesV1Mixin0Params) WithTimeout(timeout time.Duration) *CombinedReleasesV1Mixin0Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the combined releases v1 mixin0 params
func (o *CombinedReleasesV1Mixin0Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the combined releases v1 mixin0 params
func (o *CombinedReleasesV1Mixin0Params) WithContext(ctx context.Context) *CombinedReleasesV1Mixin0Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the combined releases v1 mixin0 params
func (o *CombinedReleasesV1Mixin0Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the combined releases v1 mixin0 params
func (o *CombinedReleasesV1Mixin0Params) WithHTTPClient(client *http.Client) *CombinedReleasesV1Mixin0Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the combined releases v1 mixin0 params
func (o *CombinedReleasesV1Mixin0Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the combined releases v1 mixin0 params
func (o *CombinedReleasesV1Mixin0Params) WithAuthorization(authorization string) *CombinedReleasesV1Mixin0Params {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the combined releases v1 mixin0 params
func (o *CombinedReleasesV1Mixin0Params) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithXCSUSERNAME adds the xCSUSERNAME to the combined releases v1 mixin0 params
func (o *CombinedReleasesV1Mixin0Params) WithXCSUSERNAME(xCSUSERNAME *string) *CombinedReleasesV1Mixin0Params {
	o.SetXCSUSERNAME(xCSUSERNAME)
	return o
}

// SetXCSUSERNAME adds the xCSUSERNAME to the combined releases v1 mixin0 params
func (o *CombinedReleasesV1Mixin0Params) SetXCSUSERNAME(xCSUSERNAME *string) {
	o.XCSUSERNAME = xCSUSERNAME
}

// WithFilter adds the filter to the combined releases v1 mixin0 params
func (o *CombinedReleasesV1Mixin0Params) WithFilter(filter string) *CombinedReleasesV1Mixin0Params {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the combined releases v1 mixin0 params
func (o *CombinedReleasesV1Mixin0Params) SetFilter(filter string) {
	o.Filter = filter
}

// WithLimit adds the limit to the combined releases v1 mixin0 params
func (o *CombinedReleasesV1Mixin0Params) WithLimit(limit *int64) *CombinedReleasesV1Mixin0Params {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the combined releases v1 mixin0 params
func (o *CombinedReleasesV1Mixin0Params) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the combined releases v1 mixin0 params
func (o *CombinedReleasesV1Mixin0Params) WithOffset(offset *string) *CombinedReleasesV1Mixin0Params {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the combined releases v1 mixin0 params
func (o *CombinedReleasesV1Mixin0Params) SetOffset(offset *string) {
	o.Offset = offset
}

// WithSort adds the sort to the combined releases v1 mixin0 params
func (o *CombinedReleasesV1Mixin0Params) WithSort(sort *string) *CombinedReleasesV1Mixin0Params {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the combined releases v1 mixin0 params
func (o *CombinedReleasesV1Mixin0Params) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *CombinedReleasesV1Mixin0Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.XCSUSERNAME != nil {

		// header param X-CS-USERNAME
		if err := r.SetHeaderParam("X-CS-USERNAME", *o.XCSUSERNAME); err != nil {
			return err
		}
	}

	// query param filter
	qrFilter := o.Filter
	qFilter := qrFilter

	if err := r.SetQueryParam("filter", qFilter); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
