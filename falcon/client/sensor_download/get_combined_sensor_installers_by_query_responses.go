// Code generated by go-swagger; DO NOT EDIT.

package sensor_download

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetCombinedSensorInstallersByQueryReader is a Reader for the GetCombinedSensorInstallersByQuery structure.
type GetCombinedSensorInstallersByQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCombinedSensorInstallersByQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCombinedSensorInstallersByQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCombinedSensorInstallersByQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCombinedSensorInstallersByQueryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetCombinedSensorInstallersByQueryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetCombinedSensorInstallersByQueryDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetCombinedSensorInstallersByQueryOK creates a GetCombinedSensorInstallersByQueryOK with default headers values
func NewGetCombinedSensorInstallersByQueryOK() *GetCombinedSensorInstallersByQueryOK {
	return &GetCombinedSensorInstallersByQueryOK{}
}

/*GetCombinedSensorInstallersByQueryOK handles this case with default header values.

OK
*/
type GetCombinedSensorInstallersByQueryOK struct {
	/*Request limit per minute.
	 */
	XRateLimitLimit int64
	/*The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainSensorInstallersV1
}

func (o *GetCombinedSensorInstallersByQueryOK) Error() string {
	return fmt.Sprintf("[GET /sensors/combined/installers/v1][%d] getCombinedSensorInstallersByQueryOK  %+v", 200, o.Payload)
}

func (o *GetCombinedSensorInstallersByQueryOK) GetPayload() *models.DomainSensorInstallersV1 {
	return o.Payload
}

func (o *GetCombinedSensorInstallersByQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-RateLimit-Limit
	xRateLimitLimit, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Limit"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Limit", "header", "int64", response.GetHeader("X-RateLimit-Limit"))
	}
	o.XRateLimitLimit = xRateLimitLimit

	// response header X-RateLimit-Remaining
	xRateLimitRemaining, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Remaining"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", response.GetHeader("X-RateLimit-Remaining"))
	}
	o.XRateLimitRemaining = xRateLimitRemaining

	o.Payload = new(models.DomainSensorInstallersV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCombinedSensorInstallersByQueryBadRequest creates a GetCombinedSensorInstallersByQueryBadRequest with default headers values
func NewGetCombinedSensorInstallersByQueryBadRequest() *GetCombinedSensorInstallersByQueryBadRequest {
	return &GetCombinedSensorInstallersByQueryBadRequest{}
}

/*GetCombinedSensorInstallersByQueryBadRequest handles this case with default header values.

Bad Request
*/
type GetCombinedSensorInstallersByQueryBadRequest struct {
	/*Request limit per minute.
	 */
	XRateLimitLimit int64
	/*The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaQueryResponse
}

func (o *GetCombinedSensorInstallersByQueryBadRequest) Error() string {
	return fmt.Sprintf("[GET /sensors/combined/installers/v1][%d] getCombinedSensorInstallersByQueryBadRequest  %+v", 400, o.Payload)
}

func (o *GetCombinedSensorInstallersByQueryBadRequest) GetPayload() *models.MsaQueryResponse {
	return o.Payload
}

func (o *GetCombinedSensorInstallersByQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-RateLimit-Limit
	xRateLimitLimit, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Limit"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Limit", "header", "int64", response.GetHeader("X-RateLimit-Limit"))
	}
	o.XRateLimitLimit = xRateLimitLimit

	// response header X-RateLimit-Remaining
	xRateLimitRemaining, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Remaining"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", response.GetHeader("X-RateLimit-Remaining"))
	}
	o.XRateLimitRemaining = xRateLimitRemaining

	o.Payload = new(models.MsaQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCombinedSensorInstallersByQueryForbidden creates a GetCombinedSensorInstallersByQueryForbidden with default headers values
func NewGetCombinedSensorInstallersByQueryForbidden() *GetCombinedSensorInstallersByQueryForbidden {
	return &GetCombinedSensorInstallersByQueryForbidden{}
}

/*GetCombinedSensorInstallersByQueryForbidden handles this case with default header values.

Forbidden
*/
type GetCombinedSensorInstallersByQueryForbidden struct {
	/*Request limit per minute.
	 */
	XRateLimitLimit int64
	/*The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

func (o *GetCombinedSensorInstallersByQueryForbidden) Error() string {
	return fmt.Sprintf("[GET /sensors/combined/installers/v1][%d] getCombinedSensorInstallersByQueryForbidden  %+v", 403, o.Payload)
}

func (o *GetCombinedSensorInstallersByQueryForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetCombinedSensorInstallersByQueryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-RateLimit-Limit
	xRateLimitLimit, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Limit"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Limit", "header", "int64", response.GetHeader("X-RateLimit-Limit"))
	}
	o.XRateLimitLimit = xRateLimitLimit

	// response header X-RateLimit-Remaining
	xRateLimitRemaining, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Remaining"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", response.GetHeader("X-RateLimit-Remaining"))
	}
	o.XRateLimitRemaining = xRateLimitRemaining

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCombinedSensorInstallersByQueryTooManyRequests creates a GetCombinedSensorInstallersByQueryTooManyRequests with default headers values
func NewGetCombinedSensorInstallersByQueryTooManyRequests() *GetCombinedSensorInstallersByQueryTooManyRequests {
	return &GetCombinedSensorInstallersByQueryTooManyRequests{}
}

/*GetCombinedSensorInstallersByQueryTooManyRequests handles this case with default header values.

Too Many Requests
*/
type GetCombinedSensorInstallersByQueryTooManyRequests struct {
	/*Request limit per minute.
	 */
	XRateLimitLimit int64
	/*The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
	/*Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

func (o *GetCombinedSensorInstallersByQueryTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /sensors/combined/installers/v1][%d] getCombinedSensorInstallersByQueryTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCombinedSensorInstallersByQueryTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetCombinedSensorInstallersByQueryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-RateLimit-Limit
	xRateLimitLimit, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Limit"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Limit", "header", "int64", response.GetHeader("X-RateLimit-Limit"))
	}
	o.XRateLimitLimit = xRateLimitLimit

	// response header X-RateLimit-Remaining
	xRateLimitRemaining, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Remaining"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", response.GetHeader("X-RateLimit-Remaining"))
	}
	o.XRateLimitRemaining = xRateLimitRemaining

	// response header X-RateLimit-RetryAfter
	xRateLimitRetryAfter, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-RetryAfter"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", response.GetHeader("X-RateLimit-RetryAfter"))
	}
	o.XRateLimitRetryAfter = xRateLimitRetryAfter

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCombinedSensorInstallersByQueryDefault creates a GetCombinedSensorInstallersByQueryDefault with default headers values
func NewGetCombinedSensorInstallersByQueryDefault(code int) *GetCombinedSensorInstallersByQueryDefault {
	return &GetCombinedSensorInstallersByQueryDefault{
		_statusCode: code,
	}
}

/*GetCombinedSensorInstallersByQueryDefault handles this case with default header values.

OK
*/
type GetCombinedSensorInstallersByQueryDefault struct {
	_statusCode int

	Payload *models.DomainSensorInstallersV1
}

// Code gets the status code for the get combined sensor installers by query default response
func (o *GetCombinedSensorInstallersByQueryDefault) Code() int {
	return o._statusCode
}

func (o *GetCombinedSensorInstallersByQueryDefault) Error() string {
	return fmt.Sprintf("[GET /sensors/combined/installers/v1][%d] GetCombinedSensorInstallersByQuery default  %+v", o._statusCode, o.Payload)
}

func (o *GetCombinedSensorInstallersByQueryDefault) GetPayload() *models.DomainSensorInstallersV1 {
	return o.Payload
}

func (o *GetCombinedSensorInstallersByQueryDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DomainSensorInstallersV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
