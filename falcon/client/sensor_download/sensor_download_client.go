// Code generated by go-swagger; DO NOT EDIT.

package sensor_download

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new sensor download API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new sensor download API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new sensor download API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for sensor download API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationOctetStream sets the Accept header to "application/octet-stream".
func WithAcceptApplicationOctetStream(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/octet-stream"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	DownloadSensorInstallerByID(params *DownloadSensorInstallerByIDParams, writer io.Writer, opts ...ClientOption) (*DownloadSensorInstallerByIDOK, error)

	DownloadSensorInstallerByIDV2(params *DownloadSensorInstallerByIDV2Params, writer io.Writer, opts ...ClientOption) (*DownloadSensorInstallerByIDV2OK, error)

	GetCombinedSensorInstallersByQuery(params *GetCombinedSensorInstallersByQueryParams, opts ...ClientOption) (*GetCombinedSensorInstallersByQueryOK, error)

	GetCombinedSensorInstallersByQueryV2(params *GetCombinedSensorInstallersByQueryV2Params, opts ...ClientOption) (*GetCombinedSensorInstallersByQueryV2OK, error)

	GetSensorInstallersByQuery(params *GetSensorInstallersByQueryParams, opts ...ClientOption) (*GetSensorInstallersByQueryOK, error)

	GetSensorInstallersByQueryV2(params *GetSensorInstallersByQueryV2Params, opts ...ClientOption) (*GetSensorInstallersByQueryV2OK, error)

	GetSensorInstallersCCIDByQuery(params *GetSensorInstallersCCIDByQueryParams, opts ...ClientOption) (*GetSensorInstallersCCIDByQueryOK, error)

	GetSensorInstallersEntities(params *GetSensorInstallersEntitiesParams, opts ...ClientOption) (*GetSensorInstallersEntitiesOK, *GetSensorInstallersEntitiesMultiStatus, error)

	GetSensorInstallersEntitiesV2(params *GetSensorInstallersEntitiesV2Params, opts ...ClientOption) (*GetSensorInstallersEntitiesV2OK, *GetSensorInstallersEntitiesV2MultiStatus, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DownloadSensorInstallerByID downloads sensor installer by s h a256 ID
*/
func (a *Client) DownloadSensorInstallerByID(params *DownloadSensorInstallerByIDParams, writer io.Writer, opts ...ClientOption) (*DownloadSensorInstallerByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadSensorInstallerByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DownloadSensorInstallerById",
		Method:             "GET",
		PathPattern:        "/sensors/entities/download-installer/v1",
		ProducesMediaTypes: []string{"application/json", "application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DownloadSensorInstallerByIDReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownloadSensorInstallerByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DownloadSensorInstallerById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DownloadSensorInstallerByIDV2 downloads sensor installer by s h a256 ID
*/
func (a *Client) DownloadSensorInstallerByIDV2(params *DownloadSensorInstallerByIDV2Params, writer io.Writer, opts ...ClientOption) (*DownloadSensorInstallerByIDV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadSensorInstallerByIDV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "DownloadSensorInstallerByIdV2",
		Method:             "GET",
		PathPattern:        "/sensors/entities/download-installer/v2",
		ProducesMediaTypes: []string{"application/json", "application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DownloadSensorInstallerByIDV2Reader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownloadSensorInstallerByIDV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DownloadSensorInstallerByIdV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCombinedSensorInstallersByQuery gets sensor installer details by provided query
*/
func (a *Client) GetCombinedSensorInstallersByQuery(params *GetCombinedSensorInstallersByQueryParams, opts ...ClientOption) (*GetCombinedSensorInstallersByQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCombinedSensorInstallersByQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCombinedSensorInstallersByQuery",
		Method:             "GET",
		PathPattern:        "/sensors/combined/installers/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCombinedSensorInstallersByQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCombinedSensorInstallersByQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCombinedSensorInstallersByQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCombinedSensorInstallersByQueryV2 gets sensor installer details by provided query
*/
func (a *Client) GetCombinedSensorInstallersByQueryV2(params *GetCombinedSensorInstallersByQueryV2Params, opts ...ClientOption) (*GetCombinedSensorInstallersByQueryV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCombinedSensorInstallersByQueryV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCombinedSensorInstallersByQueryV2",
		Method:             "GET",
		PathPattern:        "/sensors/combined/installers/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCombinedSensorInstallersByQueryV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCombinedSensorInstallersByQueryV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCombinedSensorInstallersByQueryV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSensorInstallersByQuery gets sensor installer i ds by provided query
*/
func (a *Client) GetSensorInstallersByQuery(params *GetSensorInstallersByQueryParams, opts ...ClientOption) (*GetSensorInstallersByQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSensorInstallersByQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSensorInstallersByQuery",
		Method:             "GET",
		PathPattern:        "/sensors/queries/installers/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSensorInstallersByQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSensorInstallersByQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSensorInstallersByQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSensorInstallersByQueryV2 gets sensor installer i ds by provided query
*/
func (a *Client) GetSensorInstallersByQueryV2(params *GetSensorInstallersByQueryV2Params, opts ...ClientOption) (*GetSensorInstallersByQueryV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSensorInstallersByQueryV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSensorInstallersByQueryV2",
		Method:             "GET",
		PathPattern:        "/sensors/queries/installers/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSensorInstallersByQueryV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSensorInstallersByQueryV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSensorInstallersByQueryV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSensorInstallersCCIDByQuery gets c c ID to use with sensor installers
*/
func (a *Client) GetSensorInstallersCCIDByQuery(params *GetSensorInstallersCCIDByQueryParams, opts ...ClientOption) (*GetSensorInstallersCCIDByQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSensorInstallersCCIDByQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSensorInstallersCCIDByQuery",
		Method:             "GET",
		PathPattern:        "/sensors/queries/installers/ccid/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSensorInstallersCCIDByQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSensorInstallersCCIDByQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSensorInstallersCCIDByQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSensorInstallersEntities gets sensor installer details by provided s h a256 i ds
*/
func (a *Client) GetSensorInstallersEntities(params *GetSensorInstallersEntitiesParams, opts ...ClientOption) (*GetSensorInstallersEntitiesOK, *GetSensorInstallersEntitiesMultiStatus, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSensorInstallersEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSensorInstallersEntities",
		Method:             "GET",
		PathPattern:        "/sensors/entities/installers/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSensorInstallersEntitiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetSensorInstallersEntitiesOK:
		return value, nil, nil
	case *GetSensorInstallersEntitiesMultiStatus:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sensor_download: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSensorInstallersEntitiesV2 gets sensor installer details by provided s h a256 i ds
*/
func (a *Client) GetSensorInstallersEntitiesV2(params *GetSensorInstallersEntitiesV2Params, opts ...ClientOption) (*GetSensorInstallersEntitiesV2OK, *GetSensorInstallersEntitiesV2MultiStatus, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSensorInstallersEntitiesV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSensorInstallersEntitiesV2",
		Method:             "GET",
		PathPattern:        "/sensors/entities/installers/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSensorInstallersEntitiesV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetSensorInstallersEntitiesV2OK:
		return value, nil, nil
	case *GetSensorInstallersEntitiesV2MultiStatus:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sensor_download: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
