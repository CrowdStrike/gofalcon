// Code generated by go-swagger; DO NOT EDIT.

package filevantage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// HighVolumeQueryChangesReader is a Reader for the HighVolumeQueryChanges structure.
type HighVolumeQueryChangesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HighVolumeQueryChangesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewHighVolumeQueryChangesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewHighVolumeQueryChangesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewHighVolumeQueryChangesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewHighVolumeQueryChangesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewHighVolumeQueryChangesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /filevantage/queries/changes/v3] highVolumeQueryChanges", response, response.Code())
	}
}

// NewHighVolumeQueryChangesOK creates a HighVolumeQueryChangesOK with default headers values
func NewHighVolumeQueryChangesOK() *HighVolumeQueryChangesOK {
	return &HighVolumeQueryChangesOK{}
}

/*
HighVolumeQueryChangesOK describes a response with status code 200, with default header values.

OK
*/
type HighVolumeQueryChangesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ChangesHighVolumeQueryResponse
}

// IsSuccess returns true when this high volume query changes o k response has a 2xx status code
func (o *HighVolumeQueryChangesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this high volume query changes o k response has a 3xx status code
func (o *HighVolumeQueryChangesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this high volume query changes o k response has a 4xx status code
func (o *HighVolumeQueryChangesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this high volume query changes o k response has a 5xx status code
func (o *HighVolumeQueryChangesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this high volume query changes o k response a status code equal to that given
func (o *HighVolumeQueryChangesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the high volume query changes o k response
func (o *HighVolumeQueryChangesOK) Code() int {
	return 200
}

func (o *HighVolumeQueryChangesOK) Error() string {
	return fmt.Sprintf("[GET /filevantage/queries/changes/v3][%d] highVolumeQueryChangesOK  %+v", 200, o.Payload)
}

func (o *HighVolumeQueryChangesOK) String() string {
	return fmt.Sprintf("[GET /filevantage/queries/changes/v3][%d] highVolumeQueryChangesOK  %+v", 200, o.Payload)
}

func (o *HighVolumeQueryChangesOK) GetPayload() *models.ChangesHighVolumeQueryResponse {
	return o.Payload
}

func (o *HighVolumeQueryChangesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ChangesHighVolumeQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHighVolumeQueryChangesBadRequest creates a HighVolumeQueryChangesBadRequest with default headers values
func NewHighVolumeQueryChangesBadRequest() *HighVolumeQueryChangesBadRequest {
	return &HighVolumeQueryChangesBadRequest{}
}

/*
HighVolumeQueryChangesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type HighVolumeQueryChangesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this high volume query changes bad request response has a 2xx status code
func (o *HighVolumeQueryChangesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this high volume query changes bad request response has a 3xx status code
func (o *HighVolumeQueryChangesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this high volume query changes bad request response has a 4xx status code
func (o *HighVolumeQueryChangesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this high volume query changes bad request response has a 5xx status code
func (o *HighVolumeQueryChangesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this high volume query changes bad request response a status code equal to that given
func (o *HighVolumeQueryChangesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the high volume query changes bad request response
func (o *HighVolumeQueryChangesBadRequest) Code() int {
	return 400
}

func (o *HighVolumeQueryChangesBadRequest) Error() string {
	return fmt.Sprintf("[GET /filevantage/queries/changes/v3][%d] highVolumeQueryChangesBadRequest  %+v", 400, o.Payload)
}

func (o *HighVolumeQueryChangesBadRequest) String() string {
	return fmt.Sprintf("[GET /filevantage/queries/changes/v3][%d] highVolumeQueryChangesBadRequest  %+v", 400, o.Payload)
}

func (o *HighVolumeQueryChangesBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *HighVolumeQueryChangesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHighVolumeQueryChangesForbidden creates a HighVolumeQueryChangesForbidden with default headers values
func NewHighVolumeQueryChangesForbidden() *HighVolumeQueryChangesForbidden {
	return &HighVolumeQueryChangesForbidden{}
}

/*
HighVolumeQueryChangesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type HighVolumeQueryChangesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this high volume query changes forbidden response has a 2xx status code
func (o *HighVolumeQueryChangesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this high volume query changes forbidden response has a 3xx status code
func (o *HighVolumeQueryChangesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this high volume query changes forbidden response has a 4xx status code
func (o *HighVolumeQueryChangesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this high volume query changes forbidden response has a 5xx status code
func (o *HighVolumeQueryChangesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this high volume query changes forbidden response a status code equal to that given
func (o *HighVolumeQueryChangesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the high volume query changes forbidden response
func (o *HighVolumeQueryChangesForbidden) Code() int {
	return 403
}

func (o *HighVolumeQueryChangesForbidden) Error() string {
	return fmt.Sprintf("[GET /filevantage/queries/changes/v3][%d] highVolumeQueryChangesForbidden  %+v", 403, o.Payload)
}

func (o *HighVolumeQueryChangesForbidden) String() string {
	return fmt.Sprintf("[GET /filevantage/queries/changes/v3][%d] highVolumeQueryChangesForbidden  %+v", 403, o.Payload)
}

func (o *HighVolumeQueryChangesForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *HighVolumeQueryChangesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHighVolumeQueryChangesTooManyRequests creates a HighVolumeQueryChangesTooManyRequests with default headers values
func NewHighVolumeQueryChangesTooManyRequests() *HighVolumeQueryChangesTooManyRequests {
	return &HighVolumeQueryChangesTooManyRequests{}
}

/*
HighVolumeQueryChangesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type HighVolumeQueryChangesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this high volume query changes too many requests response has a 2xx status code
func (o *HighVolumeQueryChangesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this high volume query changes too many requests response has a 3xx status code
func (o *HighVolumeQueryChangesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this high volume query changes too many requests response has a 4xx status code
func (o *HighVolumeQueryChangesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this high volume query changes too many requests response has a 5xx status code
func (o *HighVolumeQueryChangesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this high volume query changes too many requests response a status code equal to that given
func (o *HighVolumeQueryChangesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the high volume query changes too many requests response
func (o *HighVolumeQueryChangesTooManyRequests) Code() int {
	return 429
}

func (o *HighVolumeQueryChangesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /filevantage/queries/changes/v3][%d] highVolumeQueryChangesTooManyRequests  %+v", 429, o.Payload)
}

func (o *HighVolumeQueryChangesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /filevantage/queries/changes/v3][%d] highVolumeQueryChangesTooManyRequests  %+v", 429, o.Payload)
}

func (o *HighVolumeQueryChangesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *HighVolumeQueryChangesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHighVolumeQueryChangesInternalServerError creates a HighVolumeQueryChangesInternalServerError with default headers values
func NewHighVolumeQueryChangesInternalServerError() *HighVolumeQueryChangesInternalServerError {
	return &HighVolumeQueryChangesInternalServerError{}
}

/*
HighVolumeQueryChangesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type HighVolumeQueryChangesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this high volume query changes internal server error response has a 2xx status code
func (o *HighVolumeQueryChangesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this high volume query changes internal server error response has a 3xx status code
func (o *HighVolumeQueryChangesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this high volume query changes internal server error response has a 4xx status code
func (o *HighVolumeQueryChangesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this high volume query changes internal server error response has a 5xx status code
func (o *HighVolumeQueryChangesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this high volume query changes internal server error response a status code equal to that given
func (o *HighVolumeQueryChangesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the high volume query changes internal server error response
func (o *HighVolumeQueryChangesInternalServerError) Code() int {
	return 500
}

func (o *HighVolumeQueryChangesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /filevantage/queries/changes/v3][%d] highVolumeQueryChangesInternalServerError  %+v", 500, o.Payload)
}

func (o *HighVolumeQueryChangesInternalServerError) String() string {
	return fmt.Sprintf("[GET /filevantage/queries/changes/v3][%d] highVolumeQueryChangesInternalServerError  %+v", 500, o.Payload)
}

func (o *HighVolumeQueryChangesInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *HighVolumeQueryChangesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
