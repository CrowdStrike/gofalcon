// Code generated by go-swagger; DO NOT EDIT.

package filevantage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CreateRuleGroupsReader is a Reader for the CreateRuleGroups structure.
type CreateRuleGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateRuleGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateRuleGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateRuleGroupsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateRuleGroupsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateRuleGroupsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateRuleGroupsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateRuleGroupsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /filevantage/entities/rule-groups/v1] createRuleGroups", response, response.Code())
	}
}

// NewCreateRuleGroupsOK creates a CreateRuleGroupsOK with default headers values
func NewCreateRuleGroupsOK() *CreateRuleGroupsOK {
	return &CreateRuleGroupsOK{}
}

/*
CreateRuleGroupsOK describes a response with status code 200, with default header values.

The rule group has been created.
*/
type CreateRuleGroupsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RulegroupsResponse
}

// IsSuccess returns true when this create rule groups o k response has a 2xx status code
func (o *CreateRuleGroupsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create rule groups o k response has a 3xx status code
func (o *CreateRuleGroupsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create rule groups o k response has a 4xx status code
func (o *CreateRuleGroupsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create rule groups o k response has a 5xx status code
func (o *CreateRuleGroupsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create rule groups o k response a status code equal to that given
func (o *CreateRuleGroupsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create rule groups o k response
func (o *CreateRuleGroupsOK) Code() int {
	return 200
}

func (o *CreateRuleGroupsOK) Error() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups/v1][%d] createRuleGroupsOK  %+v", 200, o.Payload)
}

func (o *CreateRuleGroupsOK) String() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups/v1][%d] createRuleGroupsOK  %+v", 200, o.Payload)
}

func (o *CreateRuleGroupsOK) GetPayload() *models.RulegroupsResponse {
	return o.Payload
}

func (o *CreateRuleGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RulegroupsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRuleGroupsBadRequest creates a CreateRuleGroupsBadRequest with default headers values
func NewCreateRuleGroupsBadRequest() *CreateRuleGroupsBadRequest {
	return &CreateRuleGroupsBadRequest{}
}

/*
CreateRuleGroupsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateRuleGroupsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create rule groups bad request response has a 2xx status code
func (o *CreateRuleGroupsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create rule groups bad request response has a 3xx status code
func (o *CreateRuleGroupsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create rule groups bad request response has a 4xx status code
func (o *CreateRuleGroupsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create rule groups bad request response has a 5xx status code
func (o *CreateRuleGroupsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create rule groups bad request response a status code equal to that given
func (o *CreateRuleGroupsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create rule groups bad request response
func (o *CreateRuleGroupsBadRequest) Code() int {
	return 400
}

func (o *CreateRuleGroupsBadRequest) Error() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups/v1][%d] createRuleGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *CreateRuleGroupsBadRequest) String() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups/v1][%d] createRuleGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *CreateRuleGroupsBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateRuleGroupsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRuleGroupsForbidden creates a CreateRuleGroupsForbidden with default headers values
func NewCreateRuleGroupsForbidden() *CreateRuleGroupsForbidden {
	return &CreateRuleGroupsForbidden{}
}

/*
CreateRuleGroupsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateRuleGroupsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this create rule groups forbidden response has a 2xx status code
func (o *CreateRuleGroupsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create rule groups forbidden response has a 3xx status code
func (o *CreateRuleGroupsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create rule groups forbidden response has a 4xx status code
func (o *CreateRuleGroupsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create rule groups forbidden response has a 5xx status code
func (o *CreateRuleGroupsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create rule groups forbidden response a status code equal to that given
func (o *CreateRuleGroupsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create rule groups forbidden response
func (o *CreateRuleGroupsForbidden) Code() int {
	return 403
}

func (o *CreateRuleGroupsForbidden) Error() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups/v1][%d] createRuleGroupsForbidden  %+v", 403, o.Payload)
}

func (o *CreateRuleGroupsForbidden) String() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups/v1][%d] createRuleGroupsForbidden  %+v", 403, o.Payload)
}

func (o *CreateRuleGroupsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateRuleGroupsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRuleGroupsConflict creates a CreateRuleGroupsConflict with default headers values
func NewCreateRuleGroupsConflict() *CreateRuleGroupsConflict {
	return &CreateRuleGroupsConflict{}
}

/*
CreateRuleGroupsConflict describes a response with status code 409, with default header values.

Conflict
*/
type CreateRuleGroupsConflict struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create rule groups conflict response has a 2xx status code
func (o *CreateRuleGroupsConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create rule groups conflict response has a 3xx status code
func (o *CreateRuleGroupsConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create rule groups conflict response has a 4xx status code
func (o *CreateRuleGroupsConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create rule groups conflict response has a 5xx status code
func (o *CreateRuleGroupsConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create rule groups conflict response a status code equal to that given
func (o *CreateRuleGroupsConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create rule groups conflict response
func (o *CreateRuleGroupsConflict) Code() int {
	return 409
}

func (o *CreateRuleGroupsConflict) Error() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups/v1][%d] createRuleGroupsConflict  %+v", 409, o.Payload)
}

func (o *CreateRuleGroupsConflict) String() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups/v1][%d] createRuleGroupsConflict  %+v", 409, o.Payload)
}

func (o *CreateRuleGroupsConflict) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateRuleGroupsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRuleGroupsTooManyRequests creates a CreateRuleGroupsTooManyRequests with default headers values
func NewCreateRuleGroupsTooManyRequests() *CreateRuleGroupsTooManyRequests {
	return &CreateRuleGroupsTooManyRequests{}
}

/*
CreateRuleGroupsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CreateRuleGroupsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this create rule groups too many requests response has a 2xx status code
func (o *CreateRuleGroupsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create rule groups too many requests response has a 3xx status code
func (o *CreateRuleGroupsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create rule groups too many requests response has a 4xx status code
func (o *CreateRuleGroupsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create rule groups too many requests response has a 5xx status code
func (o *CreateRuleGroupsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create rule groups too many requests response a status code equal to that given
func (o *CreateRuleGroupsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create rule groups too many requests response
func (o *CreateRuleGroupsTooManyRequests) Code() int {
	return 429
}

func (o *CreateRuleGroupsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups/v1][%d] createRuleGroupsTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateRuleGroupsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups/v1][%d] createRuleGroupsTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateRuleGroupsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateRuleGroupsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRuleGroupsInternalServerError creates a CreateRuleGroupsInternalServerError with default headers values
func NewCreateRuleGroupsInternalServerError() *CreateRuleGroupsInternalServerError {
	return &CreateRuleGroupsInternalServerError{}
}

/*
CreateRuleGroupsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateRuleGroupsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create rule groups internal server error response has a 2xx status code
func (o *CreateRuleGroupsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create rule groups internal server error response has a 3xx status code
func (o *CreateRuleGroupsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create rule groups internal server error response has a 4xx status code
func (o *CreateRuleGroupsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create rule groups internal server error response has a 5xx status code
func (o *CreateRuleGroupsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create rule groups internal server error response a status code equal to that given
func (o *CreateRuleGroupsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create rule groups internal server error response
func (o *CreateRuleGroupsInternalServerError) Code() int {
	return 500
}

func (o *CreateRuleGroupsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups/v1][%d] createRuleGroupsInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateRuleGroupsInternalServerError) String() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups/v1][%d] createRuleGroupsInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateRuleGroupsInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateRuleGroupsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
