// Code generated by go-swagger; DO NOT EDIT.

package filevantage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CreateRulesReader is a Reader for the CreateRules structure.
type CreateRulesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateRulesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateRulesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateRulesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateRulesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateRulesConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateRulesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateRulesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /filevantage/entities/rule-groups-rules/v1] createRules", response, response.Code())
	}
}

// NewCreateRulesOK creates a CreateRulesOK with default headers values
func NewCreateRulesOK() *CreateRulesOK {
	return &CreateRulesOK{}
}

/*
CreateRulesOK describes a response with status code 200, with default header values.

OK
*/
type CreateRulesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RulegroupsRulesResponse
}

// IsSuccess returns true when this create rules o k response has a 2xx status code
func (o *CreateRulesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create rules o k response has a 3xx status code
func (o *CreateRulesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create rules o k response has a 4xx status code
func (o *CreateRulesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create rules o k response has a 5xx status code
func (o *CreateRulesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create rules o k response a status code equal to that given
func (o *CreateRulesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create rules o k response
func (o *CreateRulesOK) Code() int {
	return 200
}

func (o *CreateRulesOK) Error() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups-rules/v1][%d] createRulesOK  %+v", 200, o.Payload)
}

func (o *CreateRulesOK) String() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups-rules/v1][%d] createRulesOK  %+v", 200, o.Payload)
}

func (o *CreateRulesOK) GetPayload() *models.RulegroupsRulesResponse {
	return o.Payload
}

func (o *CreateRulesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RulegroupsRulesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRulesBadRequest creates a CreateRulesBadRequest with default headers values
func NewCreateRulesBadRequest() *CreateRulesBadRequest {
	return &CreateRulesBadRequest{}
}

/*
CreateRulesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateRulesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create rules bad request response has a 2xx status code
func (o *CreateRulesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create rules bad request response has a 3xx status code
func (o *CreateRulesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create rules bad request response has a 4xx status code
func (o *CreateRulesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create rules bad request response has a 5xx status code
func (o *CreateRulesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create rules bad request response a status code equal to that given
func (o *CreateRulesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create rules bad request response
func (o *CreateRulesBadRequest) Code() int {
	return 400
}

func (o *CreateRulesBadRequest) Error() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups-rules/v1][%d] createRulesBadRequest  %+v", 400, o.Payload)
}

func (o *CreateRulesBadRequest) String() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups-rules/v1][%d] createRulesBadRequest  %+v", 400, o.Payload)
}

func (o *CreateRulesBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateRulesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRulesForbidden creates a CreateRulesForbidden with default headers values
func NewCreateRulesForbidden() *CreateRulesForbidden {
	return &CreateRulesForbidden{}
}

/*
CreateRulesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateRulesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this create rules forbidden response has a 2xx status code
func (o *CreateRulesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create rules forbidden response has a 3xx status code
func (o *CreateRulesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create rules forbidden response has a 4xx status code
func (o *CreateRulesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create rules forbidden response has a 5xx status code
func (o *CreateRulesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create rules forbidden response a status code equal to that given
func (o *CreateRulesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create rules forbidden response
func (o *CreateRulesForbidden) Code() int {
	return 403
}

func (o *CreateRulesForbidden) Error() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups-rules/v1][%d] createRulesForbidden  %+v", 403, o.Payload)
}

func (o *CreateRulesForbidden) String() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups-rules/v1][%d] createRulesForbidden  %+v", 403, o.Payload)
}

func (o *CreateRulesForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateRulesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRulesConflict creates a CreateRulesConflict with default headers values
func NewCreateRulesConflict() *CreateRulesConflict {
	return &CreateRulesConflict{}
}

/*
CreateRulesConflict describes a response with status code 409, with default header values.

Conflict
*/
type CreateRulesConflict struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create rules conflict response has a 2xx status code
func (o *CreateRulesConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create rules conflict response has a 3xx status code
func (o *CreateRulesConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create rules conflict response has a 4xx status code
func (o *CreateRulesConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create rules conflict response has a 5xx status code
func (o *CreateRulesConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create rules conflict response a status code equal to that given
func (o *CreateRulesConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create rules conflict response
func (o *CreateRulesConflict) Code() int {
	return 409
}

func (o *CreateRulesConflict) Error() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups-rules/v1][%d] createRulesConflict  %+v", 409, o.Payload)
}

func (o *CreateRulesConflict) String() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups-rules/v1][%d] createRulesConflict  %+v", 409, o.Payload)
}

func (o *CreateRulesConflict) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateRulesConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRulesTooManyRequests creates a CreateRulesTooManyRequests with default headers values
func NewCreateRulesTooManyRequests() *CreateRulesTooManyRequests {
	return &CreateRulesTooManyRequests{}
}

/*
CreateRulesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CreateRulesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this create rules too many requests response has a 2xx status code
func (o *CreateRulesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create rules too many requests response has a 3xx status code
func (o *CreateRulesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create rules too many requests response has a 4xx status code
func (o *CreateRulesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create rules too many requests response has a 5xx status code
func (o *CreateRulesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create rules too many requests response a status code equal to that given
func (o *CreateRulesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create rules too many requests response
func (o *CreateRulesTooManyRequests) Code() int {
	return 429
}

func (o *CreateRulesTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups-rules/v1][%d] createRulesTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateRulesTooManyRequests) String() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups-rules/v1][%d] createRulesTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateRulesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateRulesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRulesInternalServerError creates a CreateRulesInternalServerError with default headers values
func NewCreateRulesInternalServerError() *CreateRulesInternalServerError {
	return &CreateRulesInternalServerError{}
}

/*
CreateRulesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateRulesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create rules internal server error response has a 2xx status code
func (o *CreateRulesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create rules internal server error response has a 3xx status code
func (o *CreateRulesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create rules internal server error response has a 4xx status code
func (o *CreateRulesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create rules internal server error response has a 5xx status code
func (o *CreateRulesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create rules internal server error response a status code equal to that given
func (o *CreateRulesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create rules internal server error response
func (o *CreateRulesInternalServerError) Code() int {
	return 500
}

func (o *CreateRulesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups-rules/v1][%d] createRulesInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateRulesInternalServerError) String() string {
	return fmt.Sprintf("[POST /filevantage/entities/rule-groups-rules/v1][%d] createRulesInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateRulesInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateRulesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
