// Code generated by go-swagger; DO NOT EDIT.

package filevantage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/aslape/gofalcon/falcon/models"
)

// GetContentsReader is a Reader for the GetContents structure.
type GetContentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetContentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetContentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetContentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetContentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetContentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetContentsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetContentsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 425:
		result := NewGetContentsStatus425()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetContentsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetContentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /filevantage/entities/change-content/v1] getContents", response, response.Code())
	}
}

// NewGetContentsOK creates a GetContentsOK with default headers values
func NewGetContentsOK() *GetContentsOK {
	return &GetContentsOK{}
}

/*
GetContentsOK describes a response with status code 200, with default header values.

OK
*/
type GetContentsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ContentchangesChangeContentsResponse
}

// IsSuccess returns true when this get contents o k response has a 2xx status code
func (o *GetContentsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get contents o k response has a 3xx status code
func (o *GetContentsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get contents o k response has a 4xx status code
func (o *GetContentsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get contents o k response has a 5xx status code
func (o *GetContentsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get contents o k response a status code equal to that given
func (o *GetContentsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get contents o k response
func (o *GetContentsOK) Code() int {
	return 200
}

func (o *GetContentsOK) Error() string {
	return fmt.Sprintf("[GET /filevantage/entities/change-content/v1][%d] getContentsOK  %+v", 200, o.Payload)
}

func (o *GetContentsOK) String() string {
	return fmt.Sprintf("[GET /filevantage/entities/change-content/v1][%d] getContentsOK  %+v", 200, o.Payload)
}

func (o *GetContentsOK) GetPayload() *models.ContentchangesChangeContentsResponse {
	return o.Payload
}

func (o *GetContentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ContentchangesChangeContentsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentsBadRequest creates a GetContentsBadRequest with default headers values
func NewGetContentsBadRequest() *GetContentsBadRequest {
	return &GetContentsBadRequest{}
}

/*
GetContentsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetContentsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get contents bad request response has a 2xx status code
func (o *GetContentsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get contents bad request response has a 3xx status code
func (o *GetContentsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get contents bad request response has a 4xx status code
func (o *GetContentsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get contents bad request response has a 5xx status code
func (o *GetContentsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get contents bad request response a status code equal to that given
func (o *GetContentsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get contents bad request response
func (o *GetContentsBadRequest) Code() int {
	return 400
}

func (o *GetContentsBadRequest) Error() string {
	return fmt.Sprintf("[GET /filevantage/entities/change-content/v1][%d] getContentsBadRequest  %+v", 400, o.Payload)
}

func (o *GetContentsBadRequest) String() string {
	return fmt.Sprintf("[GET /filevantage/entities/change-content/v1][%d] getContentsBadRequest  %+v", 400, o.Payload)
}

func (o *GetContentsBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetContentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentsForbidden creates a GetContentsForbidden with default headers values
func NewGetContentsForbidden() *GetContentsForbidden {
	return &GetContentsForbidden{}
}

/*
GetContentsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetContentsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get contents forbidden response has a 2xx status code
func (o *GetContentsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get contents forbidden response has a 3xx status code
func (o *GetContentsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get contents forbidden response has a 4xx status code
func (o *GetContentsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get contents forbidden response has a 5xx status code
func (o *GetContentsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get contents forbidden response a status code equal to that given
func (o *GetContentsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get contents forbidden response
func (o *GetContentsForbidden) Code() int {
	return 403
}

func (o *GetContentsForbidden) Error() string {
	return fmt.Sprintf("[GET /filevantage/entities/change-content/v1][%d] getContentsForbidden  %+v", 403, o.Payload)
}

func (o *GetContentsForbidden) String() string {
	return fmt.Sprintf("[GET /filevantage/entities/change-content/v1][%d] getContentsForbidden  %+v", 403, o.Payload)
}

func (o *GetContentsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetContentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentsNotFound creates a GetContentsNotFound with default headers values
func NewGetContentsNotFound() *GetContentsNotFound {
	return &GetContentsNotFound{}
}

/*
GetContentsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetContentsNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get contents not found response has a 2xx status code
func (o *GetContentsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get contents not found response has a 3xx status code
func (o *GetContentsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get contents not found response has a 4xx status code
func (o *GetContentsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get contents not found response has a 5xx status code
func (o *GetContentsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get contents not found response a status code equal to that given
func (o *GetContentsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get contents not found response
func (o *GetContentsNotFound) Code() int {
	return 404
}

func (o *GetContentsNotFound) Error() string {
	return fmt.Sprintf("[GET /filevantage/entities/change-content/v1][%d] getContentsNotFound  %+v", 404, o.Payload)
}

func (o *GetContentsNotFound) String() string {
	return fmt.Sprintf("[GET /filevantage/entities/change-content/v1][%d] getContentsNotFound  %+v", 404, o.Payload)
}

func (o *GetContentsNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetContentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentsRequestEntityTooLarge creates a GetContentsRequestEntityTooLarge with default headers values
func NewGetContentsRequestEntityTooLarge() *GetContentsRequestEntityTooLarge {
	return &GetContentsRequestEntityTooLarge{}
}

/*
GetContentsRequestEntityTooLarge describes a response with status code 413, with default header values.

Request Entity Too Large
*/
type GetContentsRequestEntityTooLarge struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get contents request entity too large response has a 2xx status code
func (o *GetContentsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get contents request entity too large response has a 3xx status code
func (o *GetContentsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get contents request entity too large response has a 4xx status code
func (o *GetContentsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get contents request entity too large response has a 5xx status code
func (o *GetContentsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get contents request entity too large response a status code equal to that given
func (o *GetContentsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

// Code gets the status code for the get contents request entity too large response
func (o *GetContentsRequestEntityTooLarge) Code() int {
	return 413
}

func (o *GetContentsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /filevantage/entities/change-content/v1][%d] getContentsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetContentsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /filevantage/entities/change-content/v1][%d] getContentsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetContentsRequestEntityTooLarge) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetContentsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentsUnsupportedMediaType creates a GetContentsUnsupportedMediaType with default headers values
func NewGetContentsUnsupportedMediaType() *GetContentsUnsupportedMediaType {
	return &GetContentsUnsupportedMediaType{}
}

/*
GetContentsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type
*/
type GetContentsUnsupportedMediaType struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get contents unsupported media type response has a 2xx status code
func (o *GetContentsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get contents unsupported media type response has a 3xx status code
func (o *GetContentsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get contents unsupported media type response has a 4xx status code
func (o *GetContentsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get contents unsupported media type response has a 5xx status code
func (o *GetContentsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get contents unsupported media type response a status code equal to that given
func (o *GetContentsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the get contents unsupported media type response
func (o *GetContentsUnsupportedMediaType) Code() int {
	return 415
}

func (o *GetContentsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /filevantage/entities/change-content/v1][%d] getContentsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetContentsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /filevantage/entities/change-content/v1][%d] getContentsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetContentsUnsupportedMediaType) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetContentsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentsStatus425 creates a GetContentsStatus425 with default headers values
func NewGetContentsStatus425() *GetContentsStatus425 {
	return &GetContentsStatus425{}
}

/*
GetContentsStatus425 describes a response with status code 425, with default header values.

Too Early
*/
type GetContentsStatus425 struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get contents status425 response has a 2xx status code
func (o *GetContentsStatus425) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get contents status425 response has a 3xx status code
func (o *GetContentsStatus425) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get contents status425 response has a 4xx status code
func (o *GetContentsStatus425) IsClientError() bool {
	return true
}

// IsServerError returns true when this get contents status425 response has a 5xx status code
func (o *GetContentsStatus425) IsServerError() bool {
	return false
}

// IsCode returns true when this get contents status425 response a status code equal to that given
func (o *GetContentsStatus425) IsCode(code int) bool {
	return code == 425
}

// Code gets the status code for the get contents status425 response
func (o *GetContentsStatus425) Code() int {
	return 425
}

func (o *GetContentsStatus425) Error() string {
	return fmt.Sprintf("[GET /filevantage/entities/change-content/v1][%d] getContentsStatus425  %+v", 425, o.Payload)
}

func (o *GetContentsStatus425) String() string {
	return fmt.Sprintf("[GET /filevantage/entities/change-content/v1][%d] getContentsStatus425  %+v", 425, o.Payload)
}

func (o *GetContentsStatus425) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetContentsStatus425) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentsTooManyRequests creates a GetContentsTooManyRequests with default headers values
func NewGetContentsTooManyRequests() *GetContentsTooManyRequests {
	return &GetContentsTooManyRequests{}
}

/*
GetContentsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetContentsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get contents too many requests response has a 2xx status code
func (o *GetContentsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get contents too many requests response has a 3xx status code
func (o *GetContentsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get contents too many requests response has a 4xx status code
func (o *GetContentsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get contents too many requests response has a 5xx status code
func (o *GetContentsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get contents too many requests response a status code equal to that given
func (o *GetContentsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get contents too many requests response
func (o *GetContentsTooManyRequests) Code() int {
	return 429
}

func (o *GetContentsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /filevantage/entities/change-content/v1][%d] getContentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetContentsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /filevantage/entities/change-content/v1][%d] getContentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetContentsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetContentsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentsInternalServerError creates a GetContentsInternalServerError with default headers values
func NewGetContentsInternalServerError() *GetContentsInternalServerError {
	return &GetContentsInternalServerError{}
}

/*
GetContentsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetContentsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get contents internal server error response has a 2xx status code
func (o *GetContentsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get contents internal server error response has a 3xx status code
func (o *GetContentsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get contents internal server error response has a 4xx status code
func (o *GetContentsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get contents internal server error response has a 5xx status code
func (o *GetContentsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get contents internal server error response a status code equal to that given
func (o *GetContentsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get contents internal server error response
func (o *GetContentsInternalServerError) Code() int {
	return 500
}

func (o *GetContentsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /filevantage/entities/change-content/v1][%d] getContentsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetContentsInternalServerError) String() string {
	return fmt.Sprintf("[GET /filevantage/entities/change-content/v1][%d] getContentsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetContentsInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetContentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
