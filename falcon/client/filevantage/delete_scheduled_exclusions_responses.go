// Code generated by go-swagger; DO NOT EDIT.

package filevantage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// DeleteScheduledExclusionsReader is a Reader for the DeleteScheduledExclusions structure.
type DeleteScheduledExclusionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteScheduledExclusionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteScheduledExclusionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteScheduledExclusionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteScheduledExclusionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteScheduledExclusionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteScheduledExclusionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteScheduledExclusionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /filevantage/entities/policy-scheduled-exclusions/v1] deleteScheduledExclusions", response, response.Code())
	}
}

// NewDeleteScheduledExclusionsOK creates a DeleteScheduledExclusionsOK with default headers values
func NewDeleteScheduledExclusionsOK() *DeleteScheduledExclusionsOK {
	return &DeleteScheduledExclusionsOK{}
}

/*
DeleteScheduledExclusionsOK describes a response with status code 200, with default header values.

OK
*/
type DeleteScheduledExclusionsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecQueryResponse
}

// IsSuccess returns true when this delete scheduled exclusions o k response has a 2xx status code
func (o *DeleteScheduledExclusionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete scheduled exclusions o k response has a 3xx status code
func (o *DeleteScheduledExclusionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete scheduled exclusions o k response has a 4xx status code
func (o *DeleteScheduledExclusionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete scheduled exclusions o k response has a 5xx status code
func (o *DeleteScheduledExclusionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete scheduled exclusions o k response a status code equal to that given
func (o *DeleteScheduledExclusionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete scheduled exclusions o k response
func (o *DeleteScheduledExclusionsOK) Code() int {
	return 200
}

func (o *DeleteScheduledExclusionsOK) Error() string {
	return fmt.Sprintf("[DELETE /filevantage/entities/policy-scheduled-exclusions/v1][%d] deleteScheduledExclusionsOK  %+v", 200, o.Payload)
}

func (o *DeleteScheduledExclusionsOK) String() string {
	return fmt.Sprintf("[DELETE /filevantage/entities/policy-scheduled-exclusions/v1][%d] deleteScheduledExclusionsOK  %+v", 200, o.Payload)
}

func (o *DeleteScheduledExclusionsOK) GetPayload() *models.MsaspecQueryResponse {
	return o.Payload
}

func (o *DeleteScheduledExclusionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScheduledExclusionsBadRequest creates a DeleteScheduledExclusionsBadRequest with default headers values
func NewDeleteScheduledExclusionsBadRequest() *DeleteScheduledExclusionsBadRequest {
	return &DeleteScheduledExclusionsBadRequest{}
}

/*
DeleteScheduledExclusionsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteScheduledExclusionsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this delete scheduled exclusions bad request response has a 2xx status code
func (o *DeleteScheduledExclusionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete scheduled exclusions bad request response has a 3xx status code
func (o *DeleteScheduledExclusionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete scheduled exclusions bad request response has a 4xx status code
func (o *DeleteScheduledExclusionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete scheduled exclusions bad request response has a 5xx status code
func (o *DeleteScheduledExclusionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete scheduled exclusions bad request response a status code equal to that given
func (o *DeleteScheduledExclusionsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete scheduled exclusions bad request response
func (o *DeleteScheduledExclusionsBadRequest) Code() int {
	return 400
}

func (o *DeleteScheduledExclusionsBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /filevantage/entities/policy-scheduled-exclusions/v1][%d] deleteScheduledExclusionsBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteScheduledExclusionsBadRequest) String() string {
	return fmt.Sprintf("[DELETE /filevantage/entities/policy-scheduled-exclusions/v1][%d] deleteScheduledExclusionsBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteScheduledExclusionsBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DeleteScheduledExclusionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScheduledExclusionsForbidden creates a DeleteScheduledExclusionsForbidden with default headers values
func NewDeleteScheduledExclusionsForbidden() *DeleteScheduledExclusionsForbidden {
	return &DeleteScheduledExclusionsForbidden{}
}

/*
DeleteScheduledExclusionsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteScheduledExclusionsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete scheduled exclusions forbidden response has a 2xx status code
func (o *DeleteScheduledExclusionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete scheduled exclusions forbidden response has a 3xx status code
func (o *DeleteScheduledExclusionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete scheduled exclusions forbidden response has a 4xx status code
func (o *DeleteScheduledExclusionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete scheduled exclusions forbidden response has a 5xx status code
func (o *DeleteScheduledExclusionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete scheduled exclusions forbidden response a status code equal to that given
func (o *DeleteScheduledExclusionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete scheduled exclusions forbidden response
func (o *DeleteScheduledExclusionsForbidden) Code() int {
	return 403
}

func (o *DeleteScheduledExclusionsForbidden) Error() string {
	return fmt.Sprintf("[DELETE /filevantage/entities/policy-scheduled-exclusions/v1][%d] deleteScheduledExclusionsForbidden  %+v", 403, o.Payload)
}

func (o *DeleteScheduledExclusionsForbidden) String() string {
	return fmt.Sprintf("[DELETE /filevantage/entities/policy-scheduled-exclusions/v1][%d] deleteScheduledExclusionsForbidden  %+v", 403, o.Payload)
}

func (o *DeleteScheduledExclusionsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeleteScheduledExclusionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScheduledExclusionsNotFound creates a DeleteScheduledExclusionsNotFound with default headers values
func NewDeleteScheduledExclusionsNotFound() *DeleteScheduledExclusionsNotFound {
	return &DeleteScheduledExclusionsNotFound{}
}

/*
DeleteScheduledExclusionsNotFound describes a response with status code 404, with default header values.

The policy to remove the scheduled exclusions from does not exist.
*/
type DeleteScheduledExclusionsNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this delete scheduled exclusions not found response has a 2xx status code
func (o *DeleteScheduledExclusionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete scheduled exclusions not found response has a 3xx status code
func (o *DeleteScheduledExclusionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete scheduled exclusions not found response has a 4xx status code
func (o *DeleteScheduledExclusionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete scheduled exclusions not found response has a 5xx status code
func (o *DeleteScheduledExclusionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete scheduled exclusions not found response a status code equal to that given
func (o *DeleteScheduledExclusionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete scheduled exclusions not found response
func (o *DeleteScheduledExclusionsNotFound) Code() int {
	return 404
}

func (o *DeleteScheduledExclusionsNotFound) Error() string {
	return fmt.Sprintf("[DELETE /filevantage/entities/policy-scheduled-exclusions/v1][%d] deleteScheduledExclusionsNotFound  %+v", 404, o.Payload)
}

func (o *DeleteScheduledExclusionsNotFound) String() string {
	return fmt.Sprintf("[DELETE /filevantage/entities/policy-scheduled-exclusions/v1][%d] deleteScheduledExclusionsNotFound  %+v", 404, o.Payload)
}

func (o *DeleteScheduledExclusionsNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DeleteScheduledExclusionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScheduledExclusionsTooManyRequests creates a DeleteScheduledExclusionsTooManyRequests with default headers values
func NewDeleteScheduledExclusionsTooManyRequests() *DeleteScheduledExclusionsTooManyRequests {
	return &DeleteScheduledExclusionsTooManyRequests{}
}

/*
DeleteScheduledExclusionsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type DeleteScheduledExclusionsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete scheduled exclusions too many requests response has a 2xx status code
func (o *DeleteScheduledExclusionsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete scheduled exclusions too many requests response has a 3xx status code
func (o *DeleteScheduledExclusionsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete scheduled exclusions too many requests response has a 4xx status code
func (o *DeleteScheduledExclusionsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete scheduled exclusions too many requests response has a 5xx status code
func (o *DeleteScheduledExclusionsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete scheduled exclusions too many requests response a status code equal to that given
func (o *DeleteScheduledExclusionsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete scheduled exclusions too many requests response
func (o *DeleteScheduledExclusionsTooManyRequests) Code() int {
	return 429
}

func (o *DeleteScheduledExclusionsTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /filevantage/entities/policy-scheduled-exclusions/v1][%d] deleteScheduledExclusionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteScheduledExclusionsTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /filevantage/entities/policy-scheduled-exclusions/v1][%d] deleteScheduledExclusionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteScheduledExclusionsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeleteScheduledExclusionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScheduledExclusionsInternalServerError creates a DeleteScheduledExclusionsInternalServerError with default headers values
func NewDeleteScheduledExclusionsInternalServerError() *DeleteScheduledExclusionsInternalServerError {
	return &DeleteScheduledExclusionsInternalServerError{}
}

/*
DeleteScheduledExclusionsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteScheduledExclusionsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this delete scheduled exclusions internal server error response has a 2xx status code
func (o *DeleteScheduledExclusionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete scheduled exclusions internal server error response has a 3xx status code
func (o *DeleteScheduledExclusionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete scheduled exclusions internal server error response has a 4xx status code
func (o *DeleteScheduledExclusionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete scheduled exclusions internal server error response has a 5xx status code
func (o *DeleteScheduledExclusionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete scheduled exclusions internal server error response a status code equal to that given
func (o *DeleteScheduledExclusionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete scheduled exclusions internal server error response
func (o *DeleteScheduledExclusionsInternalServerError) Code() int {
	return 500
}

func (o *DeleteScheduledExclusionsInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /filevantage/entities/policy-scheduled-exclusions/v1][%d] deleteScheduledExclusionsInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteScheduledExclusionsInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /filevantage/entities/policy-scheduled-exclusions/v1][%d] deleteScheduledExclusionsInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteScheduledExclusionsInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DeleteScheduledExclusionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
