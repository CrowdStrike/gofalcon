// Code generated by go-swagger; DO NOT EDIT.

package filevantage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// UpdateScheduledExclusionsReader is a Reader for the UpdateScheduledExclusions structure.
type UpdateScheduledExclusionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateScheduledExclusionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateScheduledExclusionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateScheduledExclusionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateScheduledExclusionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateScheduledExclusionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateScheduledExclusionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateScheduledExclusionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /filevantage/entities/policy-scheduled-exclusions/v1] updateScheduledExclusions", response, response.Code())
	}
}

// NewUpdateScheduledExclusionsOK creates a UpdateScheduledExclusionsOK with default headers values
func NewUpdateScheduledExclusionsOK() *UpdateScheduledExclusionsOK {
	return &UpdateScheduledExclusionsOK{}
}

/*
UpdateScheduledExclusionsOK describes a response with status code 200, with default header values.

OK
*/
type UpdateScheduledExclusionsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ScheduledexclusionsResponse
}

// IsSuccess returns true when this update scheduled exclusions o k response has a 2xx status code
func (o *UpdateScheduledExclusionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update scheduled exclusions o k response has a 3xx status code
func (o *UpdateScheduledExclusionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update scheduled exclusions o k response has a 4xx status code
func (o *UpdateScheduledExclusionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update scheduled exclusions o k response has a 5xx status code
func (o *UpdateScheduledExclusionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update scheduled exclusions o k response a status code equal to that given
func (o *UpdateScheduledExclusionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update scheduled exclusions o k response
func (o *UpdateScheduledExclusionsOK) Code() int {
	return 200
}

func (o *UpdateScheduledExclusionsOK) Error() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/policy-scheduled-exclusions/v1][%d] updateScheduledExclusionsOK  %+v", 200, o.Payload)
}

func (o *UpdateScheduledExclusionsOK) String() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/policy-scheduled-exclusions/v1][%d] updateScheduledExclusionsOK  %+v", 200, o.Payload)
}

func (o *UpdateScheduledExclusionsOK) GetPayload() *models.ScheduledexclusionsResponse {
	return o.Payload
}

func (o *UpdateScheduledExclusionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ScheduledexclusionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScheduledExclusionsBadRequest creates a UpdateScheduledExclusionsBadRequest with default headers values
func NewUpdateScheduledExclusionsBadRequest() *UpdateScheduledExclusionsBadRequest {
	return &UpdateScheduledExclusionsBadRequest{}
}

/*
UpdateScheduledExclusionsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateScheduledExclusionsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update scheduled exclusions bad request response has a 2xx status code
func (o *UpdateScheduledExclusionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update scheduled exclusions bad request response has a 3xx status code
func (o *UpdateScheduledExclusionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update scheduled exclusions bad request response has a 4xx status code
func (o *UpdateScheduledExclusionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update scheduled exclusions bad request response has a 5xx status code
func (o *UpdateScheduledExclusionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update scheduled exclusions bad request response a status code equal to that given
func (o *UpdateScheduledExclusionsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update scheduled exclusions bad request response
func (o *UpdateScheduledExclusionsBadRequest) Code() int {
	return 400
}

func (o *UpdateScheduledExclusionsBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/policy-scheduled-exclusions/v1][%d] updateScheduledExclusionsBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateScheduledExclusionsBadRequest) String() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/policy-scheduled-exclusions/v1][%d] updateScheduledExclusionsBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateScheduledExclusionsBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateScheduledExclusionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScheduledExclusionsForbidden creates a UpdateScheduledExclusionsForbidden with default headers values
func NewUpdateScheduledExclusionsForbidden() *UpdateScheduledExclusionsForbidden {
	return &UpdateScheduledExclusionsForbidden{}
}

/*
UpdateScheduledExclusionsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateScheduledExclusionsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this update scheduled exclusions forbidden response has a 2xx status code
func (o *UpdateScheduledExclusionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update scheduled exclusions forbidden response has a 3xx status code
func (o *UpdateScheduledExclusionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update scheduled exclusions forbidden response has a 4xx status code
func (o *UpdateScheduledExclusionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update scheduled exclusions forbidden response has a 5xx status code
func (o *UpdateScheduledExclusionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update scheduled exclusions forbidden response a status code equal to that given
func (o *UpdateScheduledExclusionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update scheduled exclusions forbidden response
func (o *UpdateScheduledExclusionsForbidden) Code() int {
	return 403
}

func (o *UpdateScheduledExclusionsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/policy-scheduled-exclusions/v1][%d] updateScheduledExclusionsForbidden  %+v", 403, o.Payload)
}

func (o *UpdateScheduledExclusionsForbidden) String() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/policy-scheduled-exclusions/v1][%d] updateScheduledExclusionsForbidden  %+v", 403, o.Payload)
}

func (o *UpdateScheduledExclusionsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpdateScheduledExclusionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScheduledExclusionsNotFound creates a UpdateScheduledExclusionsNotFound with default headers values
func NewUpdateScheduledExclusionsNotFound() *UpdateScheduledExclusionsNotFound {
	return &UpdateScheduledExclusionsNotFound{}
}

/*
UpdateScheduledExclusionsNotFound describes a response with status code 404, with default header values.

The provided scheduled exclusion does not exist.
*/
type UpdateScheduledExclusionsNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update scheduled exclusions not found response has a 2xx status code
func (o *UpdateScheduledExclusionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update scheduled exclusions not found response has a 3xx status code
func (o *UpdateScheduledExclusionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update scheduled exclusions not found response has a 4xx status code
func (o *UpdateScheduledExclusionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update scheduled exclusions not found response has a 5xx status code
func (o *UpdateScheduledExclusionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update scheduled exclusions not found response a status code equal to that given
func (o *UpdateScheduledExclusionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update scheduled exclusions not found response
func (o *UpdateScheduledExclusionsNotFound) Code() int {
	return 404
}

func (o *UpdateScheduledExclusionsNotFound) Error() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/policy-scheduled-exclusions/v1][%d] updateScheduledExclusionsNotFound  %+v", 404, o.Payload)
}

func (o *UpdateScheduledExclusionsNotFound) String() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/policy-scheduled-exclusions/v1][%d] updateScheduledExclusionsNotFound  %+v", 404, o.Payload)
}

func (o *UpdateScheduledExclusionsNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateScheduledExclusionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScheduledExclusionsTooManyRequests creates a UpdateScheduledExclusionsTooManyRequests with default headers values
func NewUpdateScheduledExclusionsTooManyRequests() *UpdateScheduledExclusionsTooManyRequests {
	return &UpdateScheduledExclusionsTooManyRequests{}
}

/*
UpdateScheduledExclusionsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type UpdateScheduledExclusionsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this update scheduled exclusions too many requests response has a 2xx status code
func (o *UpdateScheduledExclusionsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update scheduled exclusions too many requests response has a 3xx status code
func (o *UpdateScheduledExclusionsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update scheduled exclusions too many requests response has a 4xx status code
func (o *UpdateScheduledExclusionsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update scheduled exclusions too many requests response has a 5xx status code
func (o *UpdateScheduledExclusionsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update scheduled exclusions too many requests response a status code equal to that given
func (o *UpdateScheduledExclusionsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update scheduled exclusions too many requests response
func (o *UpdateScheduledExclusionsTooManyRequests) Code() int {
	return 429
}

func (o *UpdateScheduledExclusionsTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/policy-scheduled-exclusions/v1][%d] updateScheduledExclusionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateScheduledExclusionsTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/policy-scheduled-exclusions/v1][%d] updateScheduledExclusionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateScheduledExclusionsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpdateScheduledExclusionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScheduledExclusionsInternalServerError creates a UpdateScheduledExclusionsInternalServerError with default headers values
func NewUpdateScheduledExclusionsInternalServerError() *UpdateScheduledExclusionsInternalServerError {
	return &UpdateScheduledExclusionsInternalServerError{}
}

/*
UpdateScheduledExclusionsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateScheduledExclusionsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update scheduled exclusions internal server error response has a 2xx status code
func (o *UpdateScheduledExclusionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update scheduled exclusions internal server error response has a 3xx status code
func (o *UpdateScheduledExclusionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update scheduled exclusions internal server error response has a 4xx status code
func (o *UpdateScheduledExclusionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update scheduled exclusions internal server error response has a 5xx status code
func (o *UpdateScheduledExclusionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update scheduled exclusions internal server error response a status code equal to that given
func (o *UpdateScheduledExclusionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update scheduled exclusions internal server error response
func (o *UpdateScheduledExclusionsInternalServerError) Code() int {
	return 500
}

func (o *UpdateScheduledExclusionsInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/policy-scheduled-exclusions/v1][%d] updateScheduledExclusionsInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateScheduledExclusionsInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/policy-scheduled-exclusions/v1][%d] updateScheduledExclusionsInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateScheduledExclusionsInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateScheduledExclusionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
