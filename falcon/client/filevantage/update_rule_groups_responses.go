// Code generated by go-swagger; DO NOT EDIT.

package filevantage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// UpdateRuleGroupsReader is a Reader for the UpdateRuleGroups structure.
type UpdateRuleGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRuleGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRuleGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRuleGroupsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRuleGroupsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateRuleGroupsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateRuleGroupsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateRuleGroupsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /filevantage/entities/rule-groups/v1] updateRuleGroups", response, response.Code())
	}
}

// NewUpdateRuleGroupsOK creates a UpdateRuleGroupsOK with default headers values
func NewUpdateRuleGroupsOK() *UpdateRuleGroupsOK {
	return &UpdateRuleGroupsOK{}
}

/*
UpdateRuleGroupsOK describes a response with status code 200, with default header values.

Rule group has been updated
*/
type UpdateRuleGroupsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RulegroupsResponse
}

// IsSuccess returns true when this update rule groups o k response has a 2xx status code
func (o *UpdateRuleGroupsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update rule groups o k response has a 3xx status code
func (o *UpdateRuleGroupsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update rule groups o k response has a 4xx status code
func (o *UpdateRuleGroupsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update rule groups o k response has a 5xx status code
func (o *UpdateRuleGroupsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update rule groups o k response a status code equal to that given
func (o *UpdateRuleGroupsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update rule groups o k response
func (o *UpdateRuleGroupsOK) Code() int {
	return 200
}

func (o *UpdateRuleGroupsOK) Error() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/rule-groups/v1][%d] updateRuleGroupsOK  %+v", 200, o.Payload)
}

func (o *UpdateRuleGroupsOK) String() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/rule-groups/v1][%d] updateRuleGroupsOK  %+v", 200, o.Payload)
}

func (o *UpdateRuleGroupsOK) GetPayload() *models.RulegroupsResponse {
	return o.Payload
}

func (o *UpdateRuleGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RulegroupsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRuleGroupsBadRequest creates a UpdateRuleGroupsBadRequest with default headers values
func NewUpdateRuleGroupsBadRequest() *UpdateRuleGroupsBadRequest {
	return &UpdateRuleGroupsBadRequest{}
}

/*
UpdateRuleGroupsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateRuleGroupsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update rule groups bad request response has a 2xx status code
func (o *UpdateRuleGroupsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update rule groups bad request response has a 3xx status code
func (o *UpdateRuleGroupsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update rule groups bad request response has a 4xx status code
func (o *UpdateRuleGroupsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update rule groups bad request response has a 5xx status code
func (o *UpdateRuleGroupsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update rule groups bad request response a status code equal to that given
func (o *UpdateRuleGroupsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update rule groups bad request response
func (o *UpdateRuleGroupsBadRequest) Code() int {
	return 400
}

func (o *UpdateRuleGroupsBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/rule-groups/v1][%d] updateRuleGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateRuleGroupsBadRequest) String() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/rule-groups/v1][%d] updateRuleGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateRuleGroupsBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateRuleGroupsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRuleGroupsForbidden creates a UpdateRuleGroupsForbidden with default headers values
func NewUpdateRuleGroupsForbidden() *UpdateRuleGroupsForbidden {
	return &UpdateRuleGroupsForbidden{}
}

/*
UpdateRuleGroupsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateRuleGroupsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this update rule groups forbidden response has a 2xx status code
func (o *UpdateRuleGroupsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update rule groups forbidden response has a 3xx status code
func (o *UpdateRuleGroupsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update rule groups forbidden response has a 4xx status code
func (o *UpdateRuleGroupsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update rule groups forbidden response has a 5xx status code
func (o *UpdateRuleGroupsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update rule groups forbidden response a status code equal to that given
func (o *UpdateRuleGroupsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update rule groups forbidden response
func (o *UpdateRuleGroupsForbidden) Code() int {
	return 403
}

func (o *UpdateRuleGroupsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/rule-groups/v1][%d] updateRuleGroupsForbidden  %+v", 403, o.Payload)
}

func (o *UpdateRuleGroupsForbidden) String() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/rule-groups/v1][%d] updateRuleGroupsForbidden  %+v", 403, o.Payload)
}

func (o *UpdateRuleGroupsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpdateRuleGroupsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRuleGroupsNotFound creates a UpdateRuleGroupsNotFound with default headers values
func NewUpdateRuleGroupsNotFound() *UpdateRuleGroupsNotFound {
	return &UpdateRuleGroupsNotFound{}
}

/*
UpdateRuleGroupsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateRuleGroupsNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update rule groups not found response has a 2xx status code
func (o *UpdateRuleGroupsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update rule groups not found response has a 3xx status code
func (o *UpdateRuleGroupsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update rule groups not found response has a 4xx status code
func (o *UpdateRuleGroupsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update rule groups not found response has a 5xx status code
func (o *UpdateRuleGroupsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update rule groups not found response a status code equal to that given
func (o *UpdateRuleGroupsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update rule groups not found response
func (o *UpdateRuleGroupsNotFound) Code() int {
	return 404
}

func (o *UpdateRuleGroupsNotFound) Error() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/rule-groups/v1][%d] updateRuleGroupsNotFound  %+v", 404, o.Payload)
}

func (o *UpdateRuleGroupsNotFound) String() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/rule-groups/v1][%d] updateRuleGroupsNotFound  %+v", 404, o.Payload)
}

func (o *UpdateRuleGroupsNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateRuleGroupsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRuleGroupsTooManyRequests creates a UpdateRuleGroupsTooManyRequests with default headers values
func NewUpdateRuleGroupsTooManyRequests() *UpdateRuleGroupsTooManyRequests {
	return &UpdateRuleGroupsTooManyRequests{}
}

/*
UpdateRuleGroupsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type UpdateRuleGroupsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this update rule groups too many requests response has a 2xx status code
func (o *UpdateRuleGroupsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update rule groups too many requests response has a 3xx status code
func (o *UpdateRuleGroupsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update rule groups too many requests response has a 4xx status code
func (o *UpdateRuleGroupsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update rule groups too many requests response has a 5xx status code
func (o *UpdateRuleGroupsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update rule groups too many requests response a status code equal to that given
func (o *UpdateRuleGroupsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update rule groups too many requests response
func (o *UpdateRuleGroupsTooManyRequests) Code() int {
	return 429
}

func (o *UpdateRuleGroupsTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/rule-groups/v1][%d] updateRuleGroupsTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateRuleGroupsTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/rule-groups/v1][%d] updateRuleGroupsTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateRuleGroupsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpdateRuleGroupsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRuleGroupsInternalServerError creates a UpdateRuleGroupsInternalServerError with default headers values
func NewUpdateRuleGroupsInternalServerError() *UpdateRuleGroupsInternalServerError {
	return &UpdateRuleGroupsInternalServerError{}
}

/*
UpdateRuleGroupsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateRuleGroupsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update rule groups internal server error response has a 2xx status code
func (o *UpdateRuleGroupsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update rule groups internal server error response has a 3xx status code
func (o *UpdateRuleGroupsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update rule groups internal server error response has a 4xx status code
func (o *UpdateRuleGroupsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update rule groups internal server error response has a 5xx status code
func (o *UpdateRuleGroupsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update rule groups internal server error response a status code equal to that given
func (o *UpdateRuleGroupsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update rule groups internal server error response
func (o *UpdateRuleGroupsInternalServerError) Code() int {
	return 500
}

func (o *UpdateRuleGroupsInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/rule-groups/v1][%d] updateRuleGroupsInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateRuleGroupsInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /filevantage/entities/rule-groups/v1][%d] updateRuleGroupsInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateRuleGroupsInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateRuleGroupsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
