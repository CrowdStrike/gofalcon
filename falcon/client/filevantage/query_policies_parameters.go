// Code generated by go-swagger; DO NOT EDIT.

package filevantage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewQueryPoliciesParams creates a new QueryPoliciesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewQueryPoliciesParams() *QueryPoliciesParams {
	return &QueryPoliciesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewQueryPoliciesParamsWithTimeout creates a new QueryPoliciesParams object
// with the ability to set a timeout on a request.
func NewQueryPoliciesParamsWithTimeout(timeout time.Duration) *QueryPoliciesParams {
	return &QueryPoliciesParams{
		timeout: timeout,
	}
}

// NewQueryPoliciesParamsWithContext creates a new QueryPoliciesParams object
// with the ability to set a context for a request.
func NewQueryPoliciesParamsWithContext(ctx context.Context) *QueryPoliciesParams {
	return &QueryPoliciesParams{
		Context: ctx,
	}
}

// NewQueryPoliciesParamsWithHTTPClient creates a new QueryPoliciesParams object
// with the ability to set a custom HTTPClient for a request.
func NewQueryPoliciesParamsWithHTTPClient(client *http.Client) *QueryPoliciesParams {
	return &QueryPoliciesParams{
		HTTPClient: client,
	}
}

/*
QueryPoliciesParams contains all the parameters to send to the API endpoint

	for the query policies operation.

	Typically these are written to a http.Request.
*/
type QueryPoliciesParams struct {

	/* Limit.

	   The maximum number of ids to return. Defaults to 100 if not specified. The maximum number of results that can be returned in a single call is 500.
	*/
	Limit *int64

	/* Offset.

	   The offset to start retrieving records from. Defaults to 0 if not specified.
	*/
	Offset *int64

	/* Sort.

	     Sort the returned ids based on one of the following properties:

	`precedence`, `created_timestamp` or `modified_timestamp`

	 Sort either `asc` (ascending) or `desc` (descending);  for example: `precedence|asc`.
	*/
	Sort *string

	/* Type.

	    The types of policies to retrieve.

	Allowed values are: `Windows`, `Linux` or `Mac`.
	*/
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the query policies params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryPoliciesParams) WithDefaults() *QueryPoliciesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the query policies params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryPoliciesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the query policies params
func (o *QueryPoliciesParams) WithTimeout(timeout time.Duration) *QueryPoliciesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query policies params
func (o *QueryPoliciesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query policies params
func (o *QueryPoliciesParams) WithContext(ctx context.Context) *QueryPoliciesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query policies params
func (o *QueryPoliciesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query policies params
func (o *QueryPoliciesParams) WithHTTPClient(client *http.Client) *QueryPoliciesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query policies params
func (o *QueryPoliciesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the query policies params
func (o *QueryPoliciesParams) WithLimit(limit *int64) *QueryPoliciesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the query policies params
func (o *QueryPoliciesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the query policies params
func (o *QueryPoliciesParams) WithOffset(offset *int64) *QueryPoliciesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the query policies params
func (o *QueryPoliciesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithSort adds the sort to the query policies params
func (o *QueryPoliciesParams) WithSort(sort *string) *QueryPoliciesParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the query policies params
func (o *QueryPoliciesParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithType adds the typeVar to the query policies params
func (o *QueryPoliciesParams) WithType(typeVar string) *QueryPoliciesParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the query policies params
func (o *QueryPoliciesParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *QueryPoliciesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	// query param type
	qrType := o.Type
	qType := qrType
	if qType != "" {

		if err := r.SetQueryParam("type", qType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
