// Code generated by go-swagger; DO NOT EDIT.

package filevantage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewHighVolumeQueryChangesParams creates a new HighVolumeQueryChangesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewHighVolumeQueryChangesParams() *HighVolumeQueryChangesParams {
	return &HighVolumeQueryChangesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewHighVolumeQueryChangesParamsWithTimeout creates a new HighVolumeQueryChangesParams object
// with the ability to set a timeout on a request.
func NewHighVolumeQueryChangesParamsWithTimeout(timeout time.Duration) *HighVolumeQueryChangesParams {
	return &HighVolumeQueryChangesParams{
		timeout: timeout,
	}
}

// NewHighVolumeQueryChangesParamsWithContext creates a new HighVolumeQueryChangesParams object
// with the ability to set a context for a request.
func NewHighVolumeQueryChangesParamsWithContext(ctx context.Context) *HighVolumeQueryChangesParams {
	return &HighVolumeQueryChangesParams{
		Context: ctx,
	}
}

// NewHighVolumeQueryChangesParamsWithHTTPClient creates a new HighVolumeQueryChangesParams object
// with the ability to set a custom HTTPClient for a request.
func NewHighVolumeQueryChangesParamsWithHTTPClient(client *http.Client) *HighVolumeQueryChangesParams {
	return &HighVolumeQueryChangesParams{
		HTTPClient: client,
	}
}

/*
HighVolumeQueryChangesParams contains all the parameters to send to the API endpoint

	for the high volume query changes operation.

	Typically these are written to a http.Request.
*/
type HighVolumeQueryChangesParams struct {

	/* After.

	   A pagination token used with the `limit` parameter to manage pagination of results. On your first request don't provide a value for the `after` token. On subsequent requests provide the `after` token value from the previous response to continue pagination from where you left. If the response returns an empty `after` token it means there are no more results to return.
	*/
	After *string

	/* Filter.

	     Filter changes using a query in Falcon Query Language (FQL).

	Common filter options include:

	 - `host.name`
	 - `action_timestamp`

	 The full list of allowed filter parameters can be reviewed in our API documentation.
	*/
	Filter *string

	/* Limit.

	   The maximum number of ids to return. Defaults to `100` if not specified. The maximum number of results that can be returned in a single call is `5000`.

	   Default: 100
	*/
	Limit *int64

	/* Sort.

	     Sort results using options like:

	- `action_timestamp` (timestamp of the change occurrence)

	Sort either `asc` (ascending) or `desc` (descending). For example: `action_timestamp|asc`. Defaults to `action_timestamp|desc` no value is specified.
	The full list of allowed sorting options can be reviewed in our API documentation.

	     Default: "action_timestamp|desc"
	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the high volume query changes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *HighVolumeQueryChangesParams) WithDefaults() *HighVolumeQueryChangesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the high volume query changes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *HighVolumeQueryChangesParams) SetDefaults() {
	var (
		limitDefault = int64(100)

		sortDefault = string("action_timestamp|desc")
	)

	val := HighVolumeQueryChangesParams{
		Limit: &limitDefault,
		Sort:  &sortDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the high volume query changes params
func (o *HighVolumeQueryChangesParams) WithTimeout(timeout time.Duration) *HighVolumeQueryChangesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the high volume query changes params
func (o *HighVolumeQueryChangesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the high volume query changes params
func (o *HighVolumeQueryChangesParams) WithContext(ctx context.Context) *HighVolumeQueryChangesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the high volume query changes params
func (o *HighVolumeQueryChangesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the high volume query changes params
func (o *HighVolumeQueryChangesParams) WithHTTPClient(client *http.Client) *HighVolumeQueryChangesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the high volume query changes params
func (o *HighVolumeQueryChangesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the high volume query changes params
func (o *HighVolumeQueryChangesParams) WithAfter(after *string) *HighVolumeQueryChangesParams {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the high volume query changes params
func (o *HighVolumeQueryChangesParams) SetAfter(after *string) {
	o.After = after
}

// WithFilter adds the filter to the high volume query changes params
func (o *HighVolumeQueryChangesParams) WithFilter(filter *string) *HighVolumeQueryChangesParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the high volume query changes params
func (o *HighVolumeQueryChangesParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithLimit adds the limit to the high volume query changes params
func (o *HighVolumeQueryChangesParams) WithLimit(limit *int64) *HighVolumeQueryChangesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the high volume query changes params
func (o *HighVolumeQueryChangesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithSort adds the sort to the high volume query changes params
func (o *HighVolumeQueryChangesParams) WithSort(sort *string) *HighVolumeQueryChangesParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the high volume query changes params
func (o *HighVolumeQueryChangesParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *HighVolumeQueryChangesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter string

		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := qrAfter
		if qAfter != "" {

			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
