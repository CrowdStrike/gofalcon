// Code generated by go-swagger; DO NOT EDIT.

package filevantage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetPoliciesReader is a Reader for the GetPolicies structure.
type GetPoliciesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPoliciesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPoliciesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPoliciesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPoliciesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetPoliciesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPoliciesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /filevantage/entities/policies/v1] getPolicies", response, response.Code())
	}
}

// NewGetPoliciesOK creates a GetPoliciesOK with default headers values
func NewGetPoliciesOK() *GetPoliciesOK {
	return &GetPoliciesOK{}
}

/*
GetPoliciesOK describes a response with status code 200, with default header values.

OK
*/
type GetPoliciesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.PoliciesResponse
}

// IsSuccess returns true when this get policies o k response has a 2xx status code
func (o *GetPoliciesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get policies o k response has a 3xx status code
func (o *GetPoliciesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get policies o k response has a 4xx status code
func (o *GetPoliciesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get policies o k response has a 5xx status code
func (o *GetPoliciesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get policies o k response a status code equal to that given
func (o *GetPoliciesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get policies o k response
func (o *GetPoliciesOK) Code() int {
	return 200
}

func (o *GetPoliciesOK) Error() string {
	return fmt.Sprintf("[GET /filevantage/entities/policies/v1][%d] getPoliciesOK  %+v", 200, o.Payload)
}

func (o *GetPoliciesOK) String() string {
	return fmt.Sprintf("[GET /filevantage/entities/policies/v1][%d] getPoliciesOK  %+v", 200, o.Payload)
}

func (o *GetPoliciesOK) GetPayload() *models.PoliciesResponse {
	return o.Payload
}

func (o *GetPoliciesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.PoliciesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPoliciesBadRequest creates a GetPoliciesBadRequest with default headers values
func NewGetPoliciesBadRequest() *GetPoliciesBadRequest {
	return &GetPoliciesBadRequest{}
}

/*
GetPoliciesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetPoliciesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get policies bad request response has a 2xx status code
func (o *GetPoliciesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get policies bad request response has a 3xx status code
func (o *GetPoliciesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get policies bad request response has a 4xx status code
func (o *GetPoliciesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get policies bad request response has a 5xx status code
func (o *GetPoliciesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get policies bad request response a status code equal to that given
func (o *GetPoliciesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get policies bad request response
func (o *GetPoliciesBadRequest) Code() int {
	return 400
}

func (o *GetPoliciesBadRequest) Error() string {
	return fmt.Sprintf("[GET /filevantage/entities/policies/v1][%d] getPoliciesBadRequest  %+v", 400, o.Payload)
}

func (o *GetPoliciesBadRequest) String() string {
	return fmt.Sprintf("[GET /filevantage/entities/policies/v1][%d] getPoliciesBadRequest  %+v", 400, o.Payload)
}

func (o *GetPoliciesBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetPoliciesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPoliciesForbidden creates a GetPoliciesForbidden with default headers values
func NewGetPoliciesForbidden() *GetPoliciesForbidden {
	return &GetPoliciesForbidden{}
}

/*
GetPoliciesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetPoliciesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get policies forbidden response has a 2xx status code
func (o *GetPoliciesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get policies forbidden response has a 3xx status code
func (o *GetPoliciesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get policies forbidden response has a 4xx status code
func (o *GetPoliciesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get policies forbidden response has a 5xx status code
func (o *GetPoliciesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get policies forbidden response a status code equal to that given
func (o *GetPoliciesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get policies forbidden response
func (o *GetPoliciesForbidden) Code() int {
	return 403
}

func (o *GetPoliciesForbidden) Error() string {
	return fmt.Sprintf("[GET /filevantage/entities/policies/v1][%d] getPoliciesForbidden  %+v", 403, o.Payload)
}

func (o *GetPoliciesForbidden) String() string {
	return fmt.Sprintf("[GET /filevantage/entities/policies/v1][%d] getPoliciesForbidden  %+v", 403, o.Payload)
}

func (o *GetPoliciesForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetPoliciesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPoliciesTooManyRequests creates a GetPoliciesTooManyRequests with default headers values
func NewGetPoliciesTooManyRequests() *GetPoliciesTooManyRequests {
	return &GetPoliciesTooManyRequests{}
}

/*
GetPoliciesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetPoliciesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get policies too many requests response has a 2xx status code
func (o *GetPoliciesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get policies too many requests response has a 3xx status code
func (o *GetPoliciesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get policies too many requests response has a 4xx status code
func (o *GetPoliciesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get policies too many requests response has a 5xx status code
func (o *GetPoliciesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get policies too many requests response a status code equal to that given
func (o *GetPoliciesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get policies too many requests response
func (o *GetPoliciesTooManyRequests) Code() int {
	return 429
}

func (o *GetPoliciesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /filevantage/entities/policies/v1][%d] getPoliciesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetPoliciesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /filevantage/entities/policies/v1][%d] getPoliciesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetPoliciesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetPoliciesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPoliciesInternalServerError creates a GetPoliciesInternalServerError with default headers values
func NewGetPoliciesInternalServerError() *GetPoliciesInternalServerError {
	return &GetPoliciesInternalServerError{}
}

/*
GetPoliciesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetPoliciesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get policies internal server error response has a 2xx status code
func (o *GetPoliciesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get policies internal server error response has a 3xx status code
func (o *GetPoliciesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get policies internal server error response has a 4xx status code
func (o *GetPoliciesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get policies internal server error response has a 5xx status code
func (o *GetPoliciesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get policies internal server error response a status code equal to that given
func (o *GetPoliciesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get policies internal server error response
func (o *GetPoliciesInternalServerError) Code() int {
	return 500
}

func (o *GetPoliciesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /filevantage/entities/policies/v1][%d] getPoliciesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPoliciesInternalServerError) String() string {
	return fmt.Sprintf("[GET /filevantage/entities/policies/v1][%d] getPoliciesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPoliciesInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetPoliciesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
