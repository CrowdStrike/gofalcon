// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ListLookupFilesReader is a Reader for the ListLookupFiles structure.
type ListLookupFilesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListLookupFilesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListLookupFilesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListLookupFilesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListLookupFilesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListLookupFilesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListLookupFilesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListLookupFilesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListLookupFilesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /ngsiem-content/queries/lookupfiles/v1] ListLookupFiles", response, response.Code())
	}
}

// NewListLookupFilesOK creates a ListLookupFilesOK with default headers values
func NewListLookupFilesOK() *ListLookupFilesOK {
	return &ListLookupFilesOK{}
}

/*
ListLookupFilesOK describes a response with status code 200, with default header values.

ListLookupFilesOK list lookup files o k
*/
type ListLookupFilesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIListLookupFilesResponseV1
}

// IsSuccess returns true when this list lookup files o k response has a 2xx status code
func (o *ListLookupFilesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list lookup files o k response has a 3xx status code
func (o *ListLookupFilesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list lookup files o k response has a 4xx status code
func (o *ListLookupFilesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list lookup files o k response has a 5xx status code
func (o *ListLookupFilesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list lookup files o k response a status code equal to that given
func (o *ListLookupFilesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list lookup files o k response
func (o *ListLookupFilesOK) Code() int {
	return 200
}

func (o *ListLookupFilesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/lookupfiles/v1][%d] listLookupFilesOK %s", 200, payload)
}

func (o *ListLookupFilesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/lookupfiles/v1][%d] listLookupFilesOK %s", 200, payload)
}

func (o *ListLookupFilesOK) GetPayload() *models.APIListLookupFilesResponseV1 {
	return o.Payload
}

func (o *ListLookupFilesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIListLookupFilesResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLookupFilesBadRequest creates a ListLookupFilesBadRequest with default headers values
func NewListLookupFilesBadRequest() *ListLookupFilesBadRequest {
	return &ListLookupFilesBadRequest{}
}

/*
ListLookupFilesBadRequest describes a response with status code 400, with default header values.

Bad request for content operations
*/
type ListLookupFilesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this list lookup files bad request response has a 2xx status code
func (o *ListLookupFilesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list lookup files bad request response has a 3xx status code
func (o *ListLookupFilesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list lookup files bad request response has a 4xx status code
func (o *ListLookupFilesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list lookup files bad request response has a 5xx status code
func (o *ListLookupFilesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list lookup files bad request response a status code equal to that given
func (o *ListLookupFilesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list lookup files bad request response
func (o *ListLookupFilesBadRequest) Code() int {
	return 400
}

func (o *ListLookupFilesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/lookupfiles/v1][%d] listLookupFilesBadRequest %s", 400, payload)
}

func (o *ListLookupFilesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/lookupfiles/v1][%d] listLookupFilesBadRequest %s", 400, payload)
}

func (o *ListLookupFilesBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ListLookupFilesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLookupFilesUnauthorized creates a ListLookupFilesUnauthorized with default headers values
func NewListLookupFilesUnauthorized() *ListLookupFilesUnauthorized {
	return &ListLookupFilesUnauthorized{}
}

/*
ListLookupFilesUnauthorized describes a response with status code 401, with default header values.

Requestor is not authorized to access resource
*/
type ListLookupFilesUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this list lookup files unauthorized response has a 2xx status code
func (o *ListLookupFilesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list lookup files unauthorized response has a 3xx status code
func (o *ListLookupFilesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list lookup files unauthorized response has a 4xx status code
func (o *ListLookupFilesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list lookup files unauthorized response has a 5xx status code
func (o *ListLookupFilesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list lookup files unauthorized response a status code equal to that given
func (o *ListLookupFilesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list lookup files unauthorized response
func (o *ListLookupFilesUnauthorized) Code() int {
	return 401
}

func (o *ListLookupFilesUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/lookupfiles/v1][%d] listLookupFilesUnauthorized %s", 401, payload)
}

func (o *ListLookupFilesUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/lookupfiles/v1][%d] listLookupFilesUnauthorized %s", 401, payload)
}

func (o *ListLookupFilesUnauthorized) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ListLookupFilesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLookupFilesForbidden creates a ListLookupFilesForbidden with default headers values
func NewListLookupFilesForbidden() *ListLookupFilesForbidden {
	return &ListLookupFilesForbidden{}
}

/*
ListLookupFilesForbidden describes a response with status code 403, with default header values.

Content access is not allowed
*/
type ListLookupFilesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this list lookup files forbidden response has a 2xx status code
func (o *ListLookupFilesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list lookup files forbidden response has a 3xx status code
func (o *ListLookupFilesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list lookup files forbidden response has a 4xx status code
func (o *ListLookupFilesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list lookup files forbidden response has a 5xx status code
func (o *ListLookupFilesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list lookup files forbidden response a status code equal to that given
func (o *ListLookupFilesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list lookup files forbidden response
func (o *ListLookupFilesForbidden) Code() int {
	return 403
}

func (o *ListLookupFilesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/lookupfiles/v1][%d] listLookupFilesForbidden %s", 403, payload)
}

func (o *ListLookupFilesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/lookupfiles/v1][%d] listLookupFilesForbidden %s", 403, payload)
}

func (o *ListLookupFilesForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ListLookupFilesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLookupFilesNotFound creates a ListLookupFilesNotFound with default headers values
func NewListLookupFilesNotFound() *ListLookupFilesNotFound {
	return &ListLookupFilesNotFound{}
}

/*
ListLookupFilesNotFound describes a response with status code 404, with default header values.

Content resource does not exist
*/
type ListLookupFilesNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this list lookup files not found response has a 2xx status code
func (o *ListLookupFilesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list lookup files not found response has a 3xx status code
func (o *ListLookupFilesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list lookup files not found response has a 4xx status code
func (o *ListLookupFilesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list lookup files not found response has a 5xx status code
func (o *ListLookupFilesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list lookup files not found response a status code equal to that given
func (o *ListLookupFilesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list lookup files not found response
func (o *ListLookupFilesNotFound) Code() int {
	return 404
}

func (o *ListLookupFilesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/lookupfiles/v1][%d] listLookupFilesNotFound %s", 404, payload)
}

func (o *ListLookupFilesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/lookupfiles/v1][%d] listLookupFilesNotFound %s", 404, payload)
}

func (o *ListLookupFilesNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ListLookupFilesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLookupFilesTooManyRequests creates a ListLookupFilesTooManyRequests with default headers values
func NewListLookupFilesTooManyRequests() *ListLookupFilesTooManyRequests {
	return &ListLookupFilesTooManyRequests{}
}

/*
ListLookupFilesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ListLookupFilesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this list lookup files too many requests response has a 2xx status code
func (o *ListLookupFilesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list lookup files too many requests response has a 3xx status code
func (o *ListLookupFilesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list lookup files too many requests response has a 4xx status code
func (o *ListLookupFilesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list lookup files too many requests response has a 5xx status code
func (o *ListLookupFilesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list lookup files too many requests response a status code equal to that given
func (o *ListLookupFilesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list lookup files too many requests response
func (o *ListLookupFilesTooManyRequests) Code() int {
	return 429
}

func (o *ListLookupFilesTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/lookupfiles/v1][%d] listLookupFilesTooManyRequests %s", 429, payload)
}

func (o *ListLookupFilesTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/lookupfiles/v1][%d] listLookupFilesTooManyRequests %s", 429, payload)
}

func (o *ListLookupFilesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ListLookupFilesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLookupFilesInternalServerError creates a ListLookupFilesInternalServerError with default headers values
func NewListLookupFilesInternalServerError() *ListLookupFilesInternalServerError {
	return &ListLookupFilesInternalServerError{}
}

/*
ListLookupFilesInternalServerError describes a response with status code 500, with default header values.

Unexpected error occurred
*/
type ListLookupFilesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this list lookup files internal server error response has a 2xx status code
func (o *ListLookupFilesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list lookup files internal server error response has a 3xx status code
func (o *ListLookupFilesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list lookup files internal server error response has a 4xx status code
func (o *ListLookupFilesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list lookup files internal server error response has a 5xx status code
func (o *ListLookupFilesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list lookup files internal server error response a status code equal to that given
func (o *ListLookupFilesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list lookup files internal server error response
func (o *ListLookupFilesInternalServerError) Code() int {
	return 500
}

func (o *ListLookupFilesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/lookupfiles/v1][%d] listLookupFilesInternalServerError %s", 500, payload)
}

func (o *ListLookupFilesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/lookupfiles/v1][%d] listLookupFilesInternalServerError %s", 500, payload)
}

func (o *ListLookupFilesInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ListLookupFilesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
