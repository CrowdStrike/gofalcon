// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ListParsersReader is a Reader for the ListParsers structure.
type ListParsersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListParsersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListParsersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListParsersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListParsersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListParsersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListParsersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListParsersTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListParsersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /ngsiem-content/queries/parsers/v1] ListParsers", response, response.Code())
	}
}

// NewListParsersOK creates a ListParsersOK with default headers values
func NewListParsersOK() *ListParsersOK {
	return &ListParsersOK{}
}

/*
ListParsersOK describes a response with status code 200, with default header values.

ListParsersOK list parsers o k
*/
type ListParsersOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIListParsersResponseV1
}

// IsSuccess returns true when this list parsers o k response has a 2xx status code
func (o *ListParsersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list parsers o k response has a 3xx status code
func (o *ListParsersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list parsers o k response has a 4xx status code
func (o *ListParsersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list parsers o k response has a 5xx status code
func (o *ListParsersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list parsers o k response a status code equal to that given
func (o *ListParsersOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list parsers o k response
func (o *ListParsersOK) Code() int {
	return 200
}

func (o *ListParsersOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/parsers/v1][%d] listParsersOK %s", 200, payload)
}

func (o *ListParsersOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/parsers/v1][%d] listParsersOK %s", 200, payload)
}

func (o *ListParsersOK) GetPayload() *models.APIListParsersResponseV1 {
	return o.Payload
}

func (o *ListParsersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIListParsersResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListParsersBadRequest creates a ListParsersBadRequest with default headers values
func NewListParsersBadRequest() *ListParsersBadRequest {
	return &ListParsersBadRequest{}
}

/*
ListParsersBadRequest describes a response with status code 400, with default header values.

Bad request for content operations
*/
type ListParsersBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this list parsers bad request response has a 2xx status code
func (o *ListParsersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list parsers bad request response has a 3xx status code
func (o *ListParsersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list parsers bad request response has a 4xx status code
func (o *ListParsersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list parsers bad request response has a 5xx status code
func (o *ListParsersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list parsers bad request response a status code equal to that given
func (o *ListParsersBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list parsers bad request response
func (o *ListParsersBadRequest) Code() int {
	return 400
}

func (o *ListParsersBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/parsers/v1][%d] listParsersBadRequest %s", 400, payload)
}

func (o *ListParsersBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/parsers/v1][%d] listParsersBadRequest %s", 400, payload)
}

func (o *ListParsersBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ListParsersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListParsersUnauthorized creates a ListParsersUnauthorized with default headers values
func NewListParsersUnauthorized() *ListParsersUnauthorized {
	return &ListParsersUnauthorized{}
}

/*
ListParsersUnauthorized describes a response with status code 401, with default header values.

Requestor is not authorized to access resource
*/
type ListParsersUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this list parsers unauthorized response has a 2xx status code
func (o *ListParsersUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list parsers unauthorized response has a 3xx status code
func (o *ListParsersUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list parsers unauthorized response has a 4xx status code
func (o *ListParsersUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list parsers unauthorized response has a 5xx status code
func (o *ListParsersUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list parsers unauthorized response a status code equal to that given
func (o *ListParsersUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list parsers unauthorized response
func (o *ListParsersUnauthorized) Code() int {
	return 401
}

func (o *ListParsersUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/parsers/v1][%d] listParsersUnauthorized %s", 401, payload)
}

func (o *ListParsersUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/parsers/v1][%d] listParsersUnauthorized %s", 401, payload)
}

func (o *ListParsersUnauthorized) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ListParsersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListParsersForbidden creates a ListParsersForbidden with default headers values
func NewListParsersForbidden() *ListParsersForbidden {
	return &ListParsersForbidden{}
}

/*
ListParsersForbidden describes a response with status code 403, with default header values.

Content access is not allowed
*/
type ListParsersForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this list parsers forbidden response has a 2xx status code
func (o *ListParsersForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list parsers forbidden response has a 3xx status code
func (o *ListParsersForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list parsers forbidden response has a 4xx status code
func (o *ListParsersForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list parsers forbidden response has a 5xx status code
func (o *ListParsersForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list parsers forbidden response a status code equal to that given
func (o *ListParsersForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list parsers forbidden response
func (o *ListParsersForbidden) Code() int {
	return 403
}

func (o *ListParsersForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/parsers/v1][%d] listParsersForbidden %s", 403, payload)
}

func (o *ListParsersForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/parsers/v1][%d] listParsersForbidden %s", 403, payload)
}

func (o *ListParsersForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ListParsersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListParsersNotFound creates a ListParsersNotFound with default headers values
func NewListParsersNotFound() *ListParsersNotFound {
	return &ListParsersNotFound{}
}

/*
ListParsersNotFound describes a response with status code 404, with default header values.

Content resource does not exist
*/
type ListParsersNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this list parsers not found response has a 2xx status code
func (o *ListParsersNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list parsers not found response has a 3xx status code
func (o *ListParsersNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list parsers not found response has a 4xx status code
func (o *ListParsersNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list parsers not found response has a 5xx status code
func (o *ListParsersNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list parsers not found response a status code equal to that given
func (o *ListParsersNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list parsers not found response
func (o *ListParsersNotFound) Code() int {
	return 404
}

func (o *ListParsersNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/parsers/v1][%d] listParsersNotFound %s", 404, payload)
}

func (o *ListParsersNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/parsers/v1][%d] listParsersNotFound %s", 404, payload)
}

func (o *ListParsersNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ListParsersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListParsersTooManyRequests creates a ListParsersTooManyRequests with default headers values
func NewListParsersTooManyRequests() *ListParsersTooManyRequests {
	return &ListParsersTooManyRequests{}
}

/*
ListParsersTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ListParsersTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this list parsers too many requests response has a 2xx status code
func (o *ListParsersTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list parsers too many requests response has a 3xx status code
func (o *ListParsersTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list parsers too many requests response has a 4xx status code
func (o *ListParsersTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list parsers too many requests response has a 5xx status code
func (o *ListParsersTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list parsers too many requests response a status code equal to that given
func (o *ListParsersTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list parsers too many requests response
func (o *ListParsersTooManyRequests) Code() int {
	return 429
}

func (o *ListParsersTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/parsers/v1][%d] listParsersTooManyRequests %s", 429, payload)
}

func (o *ListParsersTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/parsers/v1][%d] listParsersTooManyRequests %s", 429, payload)
}

func (o *ListParsersTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ListParsersTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListParsersInternalServerError creates a ListParsersInternalServerError with default headers values
func NewListParsersInternalServerError() *ListParsersInternalServerError {
	return &ListParsersInternalServerError{}
}

/*
ListParsersInternalServerError describes a response with status code 500, with default header values.

Unexpected error occurred
*/
type ListParsersInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this list parsers internal server error response has a 2xx status code
func (o *ListParsersInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list parsers internal server error response has a 3xx status code
func (o *ListParsersInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list parsers internal server error response has a 4xx status code
func (o *ListParsersInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list parsers internal server error response has a 5xx status code
func (o *ListParsersInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list parsers internal server error response a status code equal to that given
func (o *ListParsersInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list parsers internal server error response
func (o *ListParsersInternalServerError) Code() int {
	return 500
}

func (o *ListParsersInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/parsers/v1][%d] listParsersInternalServerError %s", 500, payload)
}

func (o *ListParsersInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/queries/parsers/v1][%d] listParsersInternalServerError %s", 500, payload)
}

func (o *ListParsersInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ListParsersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
