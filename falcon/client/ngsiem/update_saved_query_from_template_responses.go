// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// UpdateSavedQueryFromTemplateReader is a Reader for the UpdateSavedQueryFromTemplate structure.
type UpdateSavedQueryFromTemplateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSavedQueryFromTemplateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSavedQueryFromTemplateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSavedQueryFromTemplateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateSavedQueryFromTemplateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateSavedQueryFromTemplateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateSavedQueryFromTemplateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateSavedQueryFromTemplateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateSavedQueryFromTemplateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /ngsiem-content/entities/savedqueries-template/v1] UpdateSavedQueryFromTemplate", response, response.Code())
	}
}

// NewUpdateSavedQueryFromTemplateOK creates a UpdateSavedQueryFromTemplateOK with default headers values
func NewUpdateSavedQueryFromTemplateOK() *UpdateSavedQueryFromTemplateOK {
	return &UpdateSavedQueryFromTemplateOK{}
}

/*
UpdateSavedQueryFromTemplateOK describes a response with status code 200, with default header values.

UpdateSavedQueryFromTemplateOK update saved query from template o k
*/
type UpdateSavedQueryFromTemplateOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIUpdateSavedQueryResponseV1
}

// IsSuccess returns true when this update saved query from template o k response has a 2xx status code
func (o *UpdateSavedQueryFromTemplateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update saved query from template o k response has a 3xx status code
func (o *UpdateSavedQueryFromTemplateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update saved query from template o k response has a 4xx status code
func (o *UpdateSavedQueryFromTemplateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update saved query from template o k response has a 5xx status code
func (o *UpdateSavedQueryFromTemplateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update saved query from template o k response a status code equal to that given
func (o *UpdateSavedQueryFromTemplateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update saved query from template o k response
func (o *UpdateSavedQueryFromTemplateOK) Code() int {
	return 200
}

func (o *UpdateSavedQueryFromTemplateOK) Error() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/savedqueries-template/v1][%d] updateSavedQueryFromTemplateOK  %+v", 200, o.Payload)
}

func (o *UpdateSavedQueryFromTemplateOK) String() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/savedqueries-template/v1][%d] updateSavedQueryFromTemplateOK  %+v", 200, o.Payload)
}

func (o *UpdateSavedQueryFromTemplateOK) GetPayload() *models.APIUpdateSavedQueryResponseV1 {
	return o.Payload
}

func (o *UpdateSavedQueryFromTemplateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIUpdateSavedQueryResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSavedQueryFromTemplateBadRequest creates a UpdateSavedQueryFromTemplateBadRequest with default headers values
func NewUpdateSavedQueryFromTemplateBadRequest() *UpdateSavedQueryFromTemplateBadRequest {
	return &UpdateSavedQueryFromTemplateBadRequest{}
}

/*
UpdateSavedQueryFromTemplateBadRequest describes a response with status code 400, with default header values.

Bad request for content operations
*/
type UpdateSavedQueryFromTemplateBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update saved query from template bad request response has a 2xx status code
func (o *UpdateSavedQueryFromTemplateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update saved query from template bad request response has a 3xx status code
func (o *UpdateSavedQueryFromTemplateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update saved query from template bad request response has a 4xx status code
func (o *UpdateSavedQueryFromTemplateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update saved query from template bad request response has a 5xx status code
func (o *UpdateSavedQueryFromTemplateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update saved query from template bad request response a status code equal to that given
func (o *UpdateSavedQueryFromTemplateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update saved query from template bad request response
func (o *UpdateSavedQueryFromTemplateBadRequest) Code() int {
	return 400
}

func (o *UpdateSavedQueryFromTemplateBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/savedqueries-template/v1][%d] updateSavedQueryFromTemplateBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateSavedQueryFromTemplateBadRequest) String() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/savedqueries-template/v1][%d] updateSavedQueryFromTemplateBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateSavedQueryFromTemplateBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateSavedQueryFromTemplateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSavedQueryFromTemplateUnauthorized creates a UpdateSavedQueryFromTemplateUnauthorized with default headers values
func NewUpdateSavedQueryFromTemplateUnauthorized() *UpdateSavedQueryFromTemplateUnauthorized {
	return &UpdateSavedQueryFromTemplateUnauthorized{}
}

/*
UpdateSavedQueryFromTemplateUnauthorized describes a response with status code 401, with default header values.

Requestor is not authorized to access resource
*/
type UpdateSavedQueryFromTemplateUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update saved query from template unauthorized response has a 2xx status code
func (o *UpdateSavedQueryFromTemplateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update saved query from template unauthorized response has a 3xx status code
func (o *UpdateSavedQueryFromTemplateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update saved query from template unauthorized response has a 4xx status code
func (o *UpdateSavedQueryFromTemplateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update saved query from template unauthorized response has a 5xx status code
func (o *UpdateSavedQueryFromTemplateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update saved query from template unauthorized response a status code equal to that given
func (o *UpdateSavedQueryFromTemplateUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update saved query from template unauthorized response
func (o *UpdateSavedQueryFromTemplateUnauthorized) Code() int {
	return 401
}

func (o *UpdateSavedQueryFromTemplateUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/savedqueries-template/v1][%d] updateSavedQueryFromTemplateUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateSavedQueryFromTemplateUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/savedqueries-template/v1][%d] updateSavedQueryFromTemplateUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateSavedQueryFromTemplateUnauthorized) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateSavedQueryFromTemplateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSavedQueryFromTemplateForbidden creates a UpdateSavedQueryFromTemplateForbidden with default headers values
func NewUpdateSavedQueryFromTemplateForbidden() *UpdateSavedQueryFromTemplateForbidden {
	return &UpdateSavedQueryFromTemplateForbidden{}
}

/*
UpdateSavedQueryFromTemplateForbidden describes a response with status code 403, with default header values.

Content access is not allowed
*/
type UpdateSavedQueryFromTemplateForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update saved query from template forbidden response has a 2xx status code
func (o *UpdateSavedQueryFromTemplateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update saved query from template forbidden response has a 3xx status code
func (o *UpdateSavedQueryFromTemplateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update saved query from template forbidden response has a 4xx status code
func (o *UpdateSavedQueryFromTemplateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update saved query from template forbidden response has a 5xx status code
func (o *UpdateSavedQueryFromTemplateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update saved query from template forbidden response a status code equal to that given
func (o *UpdateSavedQueryFromTemplateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update saved query from template forbidden response
func (o *UpdateSavedQueryFromTemplateForbidden) Code() int {
	return 403
}

func (o *UpdateSavedQueryFromTemplateForbidden) Error() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/savedqueries-template/v1][%d] updateSavedQueryFromTemplateForbidden  %+v", 403, o.Payload)
}

func (o *UpdateSavedQueryFromTemplateForbidden) String() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/savedqueries-template/v1][%d] updateSavedQueryFromTemplateForbidden  %+v", 403, o.Payload)
}

func (o *UpdateSavedQueryFromTemplateForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateSavedQueryFromTemplateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSavedQueryFromTemplateNotFound creates a UpdateSavedQueryFromTemplateNotFound with default headers values
func NewUpdateSavedQueryFromTemplateNotFound() *UpdateSavedQueryFromTemplateNotFound {
	return &UpdateSavedQueryFromTemplateNotFound{}
}

/*
UpdateSavedQueryFromTemplateNotFound describes a response with status code 404, with default header values.

Content resource does not exist
*/
type UpdateSavedQueryFromTemplateNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update saved query from template not found response has a 2xx status code
func (o *UpdateSavedQueryFromTemplateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update saved query from template not found response has a 3xx status code
func (o *UpdateSavedQueryFromTemplateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update saved query from template not found response has a 4xx status code
func (o *UpdateSavedQueryFromTemplateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update saved query from template not found response has a 5xx status code
func (o *UpdateSavedQueryFromTemplateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update saved query from template not found response a status code equal to that given
func (o *UpdateSavedQueryFromTemplateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update saved query from template not found response
func (o *UpdateSavedQueryFromTemplateNotFound) Code() int {
	return 404
}

func (o *UpdateSavedQueryFromTemplateNotFound) Error() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/savedqueries-template/v1][%d] updateSavedQueryFromTemplateNotFound  %+v", 404, o.Payload)
}

func (o *UpdateSavedQueryFromTemplateNotFound) String() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/savedqueries-template/v1][%d] updateSavedQueryFromTemplateNotFound  %+v", 404, o.Payload)
}

func (o *UpdateSavedQueryFromTemplateNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateSavedQueryFromTemplateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSavedQueryFromTemplateTooManyRequests creates a UpdateSavedQueryFromTemplateTooManyRequests with default headers values
func NewUpdateSavedQueryFromTemplateTooManyRequests() *UpdateSavedQueryFromTemplateTooManyRequests {
	return &UpdateSavedQueryFromTemplateTooManyRequests{}
}

/*
UpdateSavedQueryFromTemplateTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type UpdateSavedQueryFromTemplateTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this update saved query from template too many requests response has a 2xx status code
func (o *UpdateSavedQueryFromTemplateTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update saved query from template too many requests response has a 3xx status code
func (o *UpdateSavedQueryFromTemplateTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update saved query from template too many requests response has a 4xx status code
func (o *UpdateSavedQueryFromTemplateTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update saved query from template too many requests response has a 5xx status code
func (o *UpdateSavedQueryFromTemplateTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update saved query from template too many requests response a status code equal to that given
func (o *UpdateSavedQueryFromTemplateTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update saved query from template too many requests response
func (o *UpdateSavedQueryFromTemplateTooManyRequests) Code() int {
	return 429
}

func (o *UpdateSavedQueryFromTemplateTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/savedqueries-template/v1][%d] updateSavedQueryFromTemplateTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateSavedQueryFromTemplateTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/savedqueries-template/v1][%d] updateSavedQueryFromTemplateTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateSavedQueryFromTemplateTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpdateSavedQueryFromTemplateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSavedQueryFromTemplateInternalServerError creates a UpdateSavedQueryFromTemplateInternalServerError with default headers values
func NewUpdateSavedQueryFromTemplateInternalServerError() *UpdateSavedQueryFromTemplateInternalServerError {
	return &UpdateSavedQueryFromTemplateInternalServerError{}
}

/*
UpdateSavedQueryFromTemplateInternalServerError describes a response with status code 500, with default header values.

Unexpected error occurred
*/
type UpdateSavedQueryFromTemplateInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update saved query from template internal server error response has a 2xx status code
func (o *UpdateSavedQueryFromTemplateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update saved query from template internal server error response has a 3xx status code
func (o *UpdateSavedQueryFromTemplateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update saved query from template internal server error response has a 4xx status code
func (o *UpdateSavedQueryFromTemplateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update saved query from template internal server error response has a 5xx status code
func (o *UpdateSavedQueryFromTemplateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update saved query from template internal server error response a status code equal to that given
func (o *UpdateSavedQueryFromTemplateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update saved query from template internal server error response
func (o *UpdateSavedQueryFromTemplateInternalServerError) Code() int {
	return 500
}

func (o *UpdateSavedQueryFromTemplateInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/savedqueries-template/v1][%d] updateSavedQueryFromTemplateInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateSavedQueryFromTemplateInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/savedqueries-template/v1][%d] updateSavedQueryFromTemplateInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateSavedQueryFromTemplateInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateSavedQueryFromTemplateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
