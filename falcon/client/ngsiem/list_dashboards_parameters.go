// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListDashboardsParams creates a new ListDashboardsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListDashboardsParams() *ListDashboardsParams {
	return &ListDashboardsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListDashboardsParamsWithTimeout creates a new ListDashboardsParams object
// with the ability to set a timeout on a request.
func NewListDashboardsParamsWithTimeout(timeout time.Duration) *ListDashboardsParams {
	return &ListDashboardsParams{
		timeout: timeout,
	}
}

// NewListDashboardsParamsWithContext creates a new ListDashboardsParams object
// with the ability to set a context for a request.
func NewListDashboardsParamsWithContext(ctx context.Context) *ListDashboardsParams {
	return &ListDashboardsParams{
		Context: ctx,
	}
}

// NewListDashboardsParamsWithHTTPClient creates a new ListDashboardsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListDashboardsParamsWithHTTPClient(client *http.Client) *ListDashboardsParams {
	return &ListDashboardsParams{
		HTTPClient: client,
	}
}

/*
ListDashboardsParams contains all the parameters to send to the API endpoint

	for the list dashboards operation.

	Typically these are written to a http.Request.
*/
type ListDashboardsParams struct {

	/* Filter.

	   FQL filter to apply to the name of the content, only currently support text match on name field: name:~'value'
	*/
	Filter *string

	/* Limit.

	   maximum number of results to return

	   Default: "50"
	*/
	Limit *string

	/* Offset.

	   number of results to offset the returned results by

	   Default: "0"
	*/
	Offset *string

	/* SearchDomain.

	   name of search domain (view or repo), options; all, falcon, third-party, dashboards
	*/
	SearchDomain *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list dashboards params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListDashboardsParams) WithDefaults() *ListDashboardsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list dashboards params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListDashboardsParams) SetDefaults() {
	var (
		limitDefault = string("50")

		offsetDefault = string("0")
	)

	val := ListDashboardsParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list dashboards params
func (o *ListDashboardsParams) WithTimeout(timeout time.Duration) *ListDashboardsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list dashboards params
func (o *ListDashboardsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list dashboards params
func (o *ListDashboardsParams) WithContext(ctx context.Context) *ListDashboardsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list dashboards params
func (o *ListDashboardsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list dashboards params
func (o *ListDashboardsParams) WithHTTPClient(client *http.Client) *ListDashboardsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list dashboards params
func (o *ListDashboardsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the list dashboards params
func (o *ListDashboardsParams) WithFilter(filter *string) *ListDashboardsParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the list dashboards params
func (o *ListDashboardsParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithLimit adds the limit to the list dashboards params
func (o *ListDashboardsParams) WithLimit(limit *string) *ListDashboardsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list dashboards params
func (o *ListDashboardsParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithOffset adds the offset to the list dashboards params
func (o *ListDashboardsParams) WithOffset(offset *string) *ListDashboardsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the list dashboards params
func (o *ListDashboardsParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithSearchDomain adds the searchDomain to the list dashboards params
func (o *ListDashboardsParams) WithSearchDomain(searchDomain *string) *ListDashboardsParams {
	o.SetSearchDomain(searchDomain)
	return o
}

// SetSearchDomain adds the searchDomain to the list dashboards params
func (o *ListDashboardsParams) SetSearchDomain(searchDomain *string) {
	o.SearchDomain = searchDomain
}

// WriteToRequest writes these params to a swagger request
func (o *ListDashboardsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.SearchDomain != nil {

		// query param search_domain
		var qrSearchDomain string

		if o.SearchDomain != nil {
			qrSearchDomain = *o.SearchDomain
		}
		qSearchDomain := qrSearchDomain
		if qSearchDomain != "" {

			if err := r.SetQueryParam("search_domain", qSearchDomain); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
