// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// DeleteLookupFileReader is a Reader for the DeleteLookupFile structure.
type DeleteLookupFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteLookupFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteLookupFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteLookupFileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteLookupFileUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteLookupFileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteLookupFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteLookupFileTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteLookupFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /ngsiem-content/entities/lookupfiles/v1] DeleteLookupFile", response, response.Code())
	}
}

// NewDeleteLookupFileOK creates a DeleteLookupFileOK with default headers values
func NewDeleteLookupFileOK() *DeleteLookupFileOK {
	return &DeleteLookupFileOK{}
}

/*
DeleteLookupFileOK describes a response with status code 200, with default header values.

DeleteLookupFileOK delete lookup file o k
*/
type DeleteLookupFileOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIDeleteLookupFileResponseV1
}

// IsSuccess returns true when this delete lookup file o k response has a 2xx status code
func (o *DeleteLookupFileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete lookup file o k response has a 3xx status code
func (o *DeleteLookupFileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete lookup file o k response has a 4xx status code
func (o *DeleteLookupFileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete lookup file o k response has a 5xx status code
func (o *DeleteLookupFileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete lookup file o k response a status code equal to that given
func (o *DeleteLookupFileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete lookup file o k response
func (o *DeleteLookupFileOK) Code() int {
	return 200
}

func (o *DeleteLookupFileOK) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/lookupfiles/v1][%d] deleteLookupFileOK  %+v", 200, o.Payload)
}

func (o *DeleteLookupFileOK) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/lookupfiles/v1][%d] deleteLookupFileOK  %+v", 200, o.Payload)
}

func (o *DeleteLookupFileOK) GetPayload() *models.APIDeleteLookupFileResponseV1 {
	return o.Payload
}

func (o *DeleteLookupFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIDeleteLookupFileResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLookupFileBadRequest creates a DeleteLookupFileBadRequest with default headers values
func NewDeleteLookupFileBadRequest() *DeleteLookupFileBadRequest {
	return &DeleteLookupFileBadRequest{}
}

/*
DeleteLookupFileBadRequest describes a response with status code 400, with default header values.

Bad request for content operations
*/
type DeleteLookupFileBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this delete lookup file bad request response has a 2xx status code
func (o *DeleteLookupFileBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete lookup file bad request response has a 3xx status code
func (o *DeleteLookupFileBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete lookup file bad request response has a 4xx status code
func (o *DeleteLookupFileBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete lookup file bad request response has a 5xx status code
func (o *DeleteLookupFileBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete lookup file bad request response a status code equal to that given
func (o *DeleteLookupFileBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete lookup file bad request response
func (o *DeleteLookupFileBadRequest) Code() int {
	return 400
}

func (o *DeleteLookupFileBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/lookupfiles/v1][%d] deleteLookupFileBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteLookupFileBadRequest) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/lookupfiles/v1][%d] deleteLookupFileBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteLookupFileBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DeleteLookupFileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLookupFileUnauthorized creates a DeleteLookupFileUnauthorized with default headers values
func NewDeleteLookupFileUnauthorized() *DeleteLookupFileUnauthorized {
	return &DeleteLookupFileUnauthorized{}
}

/*
DeleteLookupFileUnauthorized describes a response with status code 401, with default header values.

Requestor is not authorized to access resource
*/
type DeleteLookupFileUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this delete lookup file unauthorized response has a 2xx status code
func (o *DeleteLookupFileUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete lookup file unauthorized response has a 3xx status code
func (o *DeleteLookupFileUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete lookup file unauthorized response has a 4xx status code
func (o *DeleteLookupFileUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete lookup file unauthorized response has a 5xx status code
func (o *DeleteLookupFileUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete lookup file unauthorized response a status code equal to that given
func (o *DeleteLookupFileUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete lookup file unauthorized response
func (o *DeleteLookupFileUnauthorized) Code() int {
	return 401
}

func (o *DeleteLookupFileUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/lookupfiles/v1][%d] deleteLookupFileUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteLookupFileUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/lookupfiles/v1][%d] deleteLookupFileUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteLookupFileUnauthorized) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DeleteLookupFileUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLookupFileForbidden creates a DeleteLookupFileForbidden with default headers values
func NewDeleteLookupFileForbidden() *DeleteLookupFileForbidden {
	return &DeleteLookupFileForbidden{}
}

/*
DeleteLookupFileForbidden describes a response with status code 403, with default header values.

Content access is not allowed
*/
type DeleteLookupFileForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this delete lookup file forbidden response has a 2xx status code
func (o *DeleteLookupFileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete lookup file forbidden response has a 3xx status code
func (o *DeleteLookupFileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete lookup file forbidden response has a 4xx status code
func (o *DeleteLookupFileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete lookup file forbidden response has a 5xx status code
func (o *DeleteLookupFileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete lookup file forbidden response a status code equal to that given
func (o *DeleteLookupFileForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete lookup file forbidden response
func (o *DeleteLookupFileForbidden) Code() int {
	return 403
}

func (o *DeleteLookupFileForbidden) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/lookupfiles/v1][%d] deleteLookupFileForbidden  %+v", 403, o.Payload)
}

func (o *DeleteLookupFileForbidden) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/lookupfiles/v1][%d] deleteLookupFileForbidden  %+v", 403, o.Payload)
}

func (o *DeleteLookupFileForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DeleteLookupFileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLookupFileNotFound creates a DeleteLookupFileNotFound with default headers values
func NewDeleteLookupFileNotFound() *DeleteLookupFileNotFound {
	return &DeleteLookupFileNotFound{}
}

/*
DeleteLookupFileNotFound describes a response with status code 404, with default header values.

Content resource does not exist
*/
type DeleteLookupFileNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this delete lookup file not found response has a 2xx status code
func (o *DeleteLookupFileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete lookup file not found response has a 3xx status code
func (o *DeleteLookupFileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete lookup file not found response has a 4xx status code
func (o *DeleteLookupFileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete lookup file not found response has a 5xx status code
func (o *DeleteLookupFileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete lookup file not found response a status code equal to that given
func (o *DeleteLookupFileNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete lookup file not found response
func (o *DeleteLookupFileNotFound) Code() int {
	return 404
}

func (o *DeleteLookupFileNotFound) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/lookupfiles/v1][%d] deleteLookupFileNotFound  %+v", 404, o.Payload)
}

func (o *DeleteLookupFileNotFound) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/lookupfiles/v1][%d] deleteLookupFileNotFound  %+v", 404, o.Payload)
}

func (o *DeleteLookupFileNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DeleteLookupFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLookupFileTooManyRequests creates a DeleteLookupFileTooManyRequests with default headers values
func NewDeleteLookupFileTooManyRequests() *DeleteLookupFileTooManyRequests {
	return &DeleteLookupFileTooManyRequests{}
}

/*
DeleteLookupFileTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type DeleteLookupFileTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete lookup file too many requests response has a 2xx status code
func (o *DeleteLookupFileTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete lookup file too many requests response has a 3xx status code
func (o *DeleteLookupFileTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete lookup file too many requests response has a 4xx status code
func (o *DeleteLookupFileTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete lookup file too many requests response has a 5xx status code
func (o *DeleteLookupFileTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete lookup file too many requests response a status code equal to that given
func (o *DeleteLookupFileTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete lookup file too many requests response
func (o *DeleteLookupFileTooManyRequests) Code() int {
	return 429
}

func (o *DeleteLookupFileTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/lookupfiles/v1][%d] deleteLookupFileTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteLookupFileTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/lookupfiles/v1][%d] deleteLookupFileTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteLookupFileTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeleteLookupFileTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLookupFileInternalServerError creates a DeleteLookupFileInternalServerError with default headers values
func NewDeleteLookupFileInternalServerError() *DeleteLookupFileInternalServerError {
	return &DeleteLookupFileInternalServerError{}
}

/*
DeleteLookupFileInternalServerError describes a response with status code 500, with default header values.

Unexpected error occurred
*/
type DeleteLookupFileInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this delete lookup file internal server error response has a 2xx status code
func (o *DeleteLookupFileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete lookup file internal server error response has a 3xx status code
func (o *DeleteLookupFileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete lookup file internal server error response has a 4xx status code
func (o *DeleteLookupFileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete lookup file internal server error response has a 5xx status code
func (o *DeleteLookupFileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete lookup file internal server error response a status code equal to that given
func (o *DeleteLookupFileInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete lookup file internal server error response
func (o *DeleteLookupFileInternalServerError) Code() int {
	return 500
}

func (o *DeleteLookupFileInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/lookupfiles/v1][%d] deleteLookupFileInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteLookupFileInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/lookupfiles/v1][%d] deleteLookupFileInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteLookupFileInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DeleteLookupFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
