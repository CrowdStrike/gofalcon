// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCreateParserFromTemplateParams creates a new CreateParserFromTemplateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateParserFromTemplateParams() *CreateParserFromTemplateParams {
	return &CreateParserFromTemplateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateParserFromTemplateParamsWithTimeout creates a new CreateParserFromTemplateParams object
// with the ability to set a timeout on a request.
func NewCreateParserFromTemplateParamsWithTimeout(timeout time.Duration) *CreateParserFromTemplateParams {
	return &CreateParserFromTemplateParams{
		timeout: timeout,
	}
}

// NewCreateParserFromTemplateParamsWithContext creates a new CreateParserFromTemplateParams object
// with the ability to set a context for a request.
func NewCreateParserFromTemplateParamsWithContext(ctx context.Context) *CreateParserFromTemplateParams {
	return &CreateParserFromTemplateParams{
		Context: ctx,
	}
}

// NewCreateParserFromTemplateParamsWithHTTPClient creates a new CreateParserFromTemplateParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateParserFromTemplateParamsWithHTTPClient(client *http.Client) *CreateParserFromTemplateParams {
	return &CreateParserFromTemplateParams{
		HTTPClient: client,
	}
}

/*
CreateParserFromTemplateParams contains all the parameters to send to the API endpoint

	for the create parser from template operation.

	Typically these are written to a http.Request.
*/
type CreateParserFromTemplateParams struct {

	/* Name.

	   name of the parser
	*/
	Name *string

	/* Repository.

	   name of repository, options; parsers-repository
	*/
	Repository *string

	/* YamlTemplate.

	   LogScale Parser YAML template content, see schema at https://schemas.humio.com/
	*/
	YamlTemplate *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create parser from template params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateParserFromTemplateParams) WithDefaults() *CreateParserFromTemplateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create parser from template params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateParserFromTemplateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create parser from template params
func (o *CreateParserFromTemplateParams) WithTimeout(timeout time.Duration) *CreateParserFromTemplateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create parser from template params
func (o *CreateParserFromTemplateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create parser from template params
func (o *CreateParserFromTemplateParams) WithContext(ctx context.Context) *CreateParserFromTemplateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create parser from template params
func (o *CreateParserFromTemplateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create parser from template params
func (o *CreateParserFromTemplateParams) WithHTTPClient(client *http.Client) *CreateParserFromTemplateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create parser from template params
func (o *CreateParserFromTemplateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the create parser from template params
func (o *CreateParserFromTemplateParams) WithName(name *string) *CreateParserFromTemplateParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the create parser from template params
func (o *CreateParserFromTemplateParams) SetName(name *string) {
	o.Name = name
}

// WithRepository adds the repository to the create parser from template params
func (o *CreateParserFromTemplateParams) WithRepository(repository *string) *CreateParserFromTemplateParams {
	o.SetRepository(repository)
	return o
}

// SetRepository adds the repository to the create parser from template params
func (o *CreateParserFromTemplateParams) SetRepository(repository *string) {
	o.Repository = repository
}

// WithYamlTemplate adds the yamlTemplate to the create parser from template params
func (o *CreateParserFromTemplateParams) WithYamlTemplate(yamlTemplate *string) *CreateParserFromTemplateParams {
	o.SetYamlTemplate(yamlTemplate)
	return o
}

// SetYamlTemplate adds the yamlTemplate to the create parser from template params
func (o *CreateParserFromTemplateParams) SetYamlTemplate(yamlTemplate *string) {
	o.YamlTemplate = yamlTemplate
}

// WriteToRequest writes these params to a swagger request
func (o *CreateParserFromTemplateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Name != nil {

		// form param name
		var frName string
		if o.Name != nil {
			frName = *o.Name
		}
		fName := frName
		if fName != "" {
			if err := r.SetFormParam("name", fName); err != nil {
				return err
			}
		}
	}

	if o.Repository != nil {

		// form param repository
		var frRepository string
		if o.Repository != nil {
			frRepository = *o.Repository
		}
		fRepository := frRepository
		if fRepository != "" {
			if err := r.SetFormParam("repository", fRepository); err != nil {
				return err
			}
		}
	}

	if o.YamlTemplate != nil {

		// form param yaml_template
		var frYamlTemplate string
		if o.YamlTemplate != nil {
			frYamlTemplate = *o.YamlTemplate
		}
		fYamlTemplate := frYamlTemplate
		if fYamlTemplate != "" {
			if err := r.SetFormParam("yaml_template", fYamlTemplate); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
