// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CreateParserFromTemplateReader is a Reader for the CreateParserFromTemplate structure.
type CreateParserFromTemplateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateParserFromTemplateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateParserFromTemplateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateParserFromTemplateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateParserFromTemplateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateParserFromTemplateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateParserFromTemplateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateParserFromTemplateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateParserFromTemplateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /ngsiem-content/entities/parsers-template/v1] CreateParserFromTemplate", response, response.Code())
	}
}

// NewCreateParserFromTemplateOK creates a CreateParserFromTemplateOK with default headers values
func NewCreateParserFromTemplateOK() *CreateParserFromTemplateOK {
	return &CreateParserFromTemplateOK{}
}

/*
CreateParserFromTemplateOK describes a response with status code 200, with default header values.

CreateParserFromTemplateOK create parser from template o k
*/
type CreateParserFromTemplateOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APICreateParserFromTemplateResponseV1
}

// IsSuccess returns true when this create parser from template o k response has a 2xx status code
func (o *CreateParserFromTemplateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create parser from template o k response has a 3xx status code
func (o *CreateParserFromTemplateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create parser from template o k response has a 4xx status code
func (o *CreateParserFromTemplateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create parser from template o k response has a 5xx status code
func (o *CreateParserFromTemplateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create parser from template o k response a status code equal to that given
func (o *CreateParserFromTemplateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create parser from template o k response
func (o *CreateParserFromTemplateOK) Code() int {
	return 200
}

func (o *CreateParserFromTemplateOK) Error() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers-template/v1][%d] createParserFromTemplateOK  %+v", 200, o.Payload)
}

func (o *CreateParserFromTemplateOK) String() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers-template/v1][%d] createParserFromTemplateOK  %+v", 200, o.Payload)
}

func (o *CreateParserFromTemplateOK) GetPayload() *models.APICreateParserFromTemplateResponseV1 {
	return o.Payload
}

func (o *CreateParserFromTemplateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APICreateParserFromTemplateResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateParserFromTemplateBadRequest creates a CreateParserFromTemplateBadRequest with default headers values
func NewCreateParserFromTemplateBadRequest() *CreateParserFromTemplateBadRequest {
	return &CreateParserFromTemplateBadRequest{}
}

/*
CreateParserFromTemplateBadRequest describes a response with status code 400, with default header values.

Bad request for content operations
*/
type CreateParserFromTemplateBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create parser from template bad request response has a 2xx status code
func (o *CreateParserFromTemplateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create parser from template bad request response has a 3xx status code
func (o *CreateParserFromTemplateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create parser from template bad request response has a 4xx status code
func (o *CreateParserFromTemplateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create parser from template bad request response has a 5xx status code
func (o *CreateParserFromTemplateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create parser from template bad request response a status code equal to that given
func (o *CreateParserFromTemplateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create parser from template bad request response
func (o *CreateParserFromTemplateBadRequest) Code() int {
	return 400
}

func (o *CreateParserFromTemplateBadRequest) Error() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers-template/v1][%d] createParserFromTemplateBadRequest  %+v", 400, o.Payload)
}

func (o *CreateParserFromTemplateBadRequest) String() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers-template/v1][%d] createParserFromTemplateBadRequest  %+v", 400, o.Payload)
}

func (o *CreateParserFromTemplateBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateParserFromTemplateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateParserFromTemplateUnauthorized creates a CreateParserFromTemplateUnauthorized with default headers values
func NewCreateParserFromTemplateUnauthorized() *CreateParserFromTemplateUnauthorized {
	return &CreateParserFromTemplateUnauthorized{}
}

/*
CreateParserFromTemplateUnauthorized describes a response with status code 401, with default header values.

Requestor is not authorized to access resource
*/
type CreateParserFromTemplateUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create parser from template unauthorized response has a 2xx status code
func (o *CreateParserFromTemplateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create parser from template unauthorized response has a 3xx status code
func (o *CreateParserFromTemplateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create parser from template unauthorized response has a 4xx status code
func (o *CreateParserFromTemplateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create parser from template unauthorized response has a 5xx status code
func (o *CreateParserFromTemplateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create parser from template unauthorized response a status code equal to that given
func (o *CreateParserFromTemplateUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create parser from template unauthorized response
func (o *CreateParserFromTemplateUnauthorized) Code() int {
	return 401
}

func (o *CreateParserFromTemplateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers-template/v1][%d] createParserFromTemplateUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateParserFromTemplateUnauthorized) String() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers-template/v1][%d] createParserFromTemplateUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateParserFromTemplateUnauthorized) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateParserFromTemplateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateParserFromTemplateForbidden creates a CreateParserFromTemplateForbidden with default headers values
func NewCreateParserFromTemplateForbidden() *CreateParserFromTemplateForbidden {
	return &CreateParserFromTemplateForbidden{}
}

/*
CreateParserFromTemplateForbidden describes a response with status code 403, with default header values.

Content access is not allowed
*/
type CreateParserFromTemplateForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create parser from template forbidden response has a 2xx status code
func (o *CreateParserFromTemplateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create parser from template forbidden response has a 3xx status code
func (o *CreateParserFromTemplateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create parser from template forbidden response has a 4xx status code
func (o *CreateParserFromTemplateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create parser from template forbidden response has a 5xx status code
func (o *CreateParserFromTemplateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create parser from template forbidden response a status code equal to that given
func (o *CreateParserFromTemplateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create parser from template forbidden response
func (o *CreateParserFromTemplateForbidden) Code() int {
	return 403
}

func (o *CreateParserFromTemplateForbidden) Error() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers-template/v1][%d] createParserFromTemplateForbidden  %+v", 403, o.Payload)
}

func (o *CreateParserFromTemplateForbidden) String() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers-template/v1][%d] createParserFromTemplateForbidden  %+v", 403, o.Payload)
}

func (o *CreateParserFromTemplateForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateParserFromTemplateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateParserFromTemplateNotFound creates a CreateParserFromTemplateNotFound with default headers values
func NewCreateParserFromTemplateNotFound() *CreateParserFromTemplateNotFound {
	return &CreateParserFromTemplateNotFound{}
}

/*
CreateParserFromTemplateNotFound describes a response with status code 404, with default header values.

Content resource does not exist
*/
type CreateParserFromTemplateNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create parser from template not found response has a 2xx status code
func (o *CreateParserFromTemplateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create parser from template not found response has a 3xx status code
func (o *CreateParserFromTemplateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create parser from template not found response has a 4xx status code
func (o *CreateParserFromTemplateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create parser from template not found response has a 5xx status code
func (o *CreateParserFromTemplateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create parser from template not found response a status code equal to that given
func (o *CreateParserFromTemplateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create parser from template not found response
func (o *CreateParserFromTemplateNotFound) Code() int {
	return 404
}

func (o *CreateParserFromTemplateNotFound) Error() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers-template/v1][%d] createParserFromTemplateNotFound  %+v", 404, o.Payload)
}

func (o *CreateParserFromTemplateNotFound) String() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers-template/v1][%d] createParserFromTemplateNotFound  %+v", 404, o.Payload)
}

func (o *CreateParserFromTemplateNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateParserFromTemplateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateParserFromTemplateTooManyRequests creates a CreateParserFromTemplateTooManyRequests with default headers values
func NewCreateParserFromTemplateTooManyRequests() *CreateParserFromTemplateTooManyRequests {
	return &CreateParserFromTemplateTooManyRequests{}
}

/*
CreateParserFromTemplateTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CreateParserFromTemplateTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this create parser from template too many requests response has a 2xx status code
func (o *CreateParserFromTemplateTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create parser from template too many requests response has a 3xx status code
func (o *CreateParserFromTemplateTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create parser from template too many requests response has a 4xx status code
func (o *CreateParserFromTemplateTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create parser from template too many requests response has a 5xx status code
func (o *CreateParserFromTemplateTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create parser from template too many requests response a status code equal to that given
func (o *CreateParserFromTemplateTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create parser from template too many requests response
func (o *CreateParserFromTemplateTooManyRequests) Code() int {
	return 429
}

func (o *CreateParserFromTemplateTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers-template/v1][%d] createParserFromTemplateTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateParserFromTemplateTooManyRequests) String() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers-template/v1][%d] createParserFromTemplateTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateParserFromTemplateTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateParserFromTemplateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateParserFromTemplateInternalServerError creates a CreateParserFromTemplateInternalServerError with default headers values
func NewCreateParserFromTemplateInternalServerError() *CreateParserFromTemplateInternalServerError {
	return &CreateParserFromTemplateInternalServerError{}
}

/*
CreateParserFromTemplateInternalServerError describes a response with status code 500, with default header values.

Unexpected error occurred
*/
type CreateParserFromTemplateInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create parser from template internal server error response has a 2xx status code
func (o *CreateParserFromTemplateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create parser from template internal server error response has a 3xx status code
func (o *CreateParserFromTemplateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create parser from template internal server error response has a 4xx status code
func (o *CreateParserFromTemplateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create parser from template internal server error response has a 5xx status code
func (o *CreateParserFromTemplateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create parser from template internal server error response a status code equal to that given
func (o *CreateParserFromTemplateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create parser from template internal server error response
func (o *CreateParserFromTemplateInternalServerError) Code() int {
	return 500
}

func (o *CreateParserFromTemplateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers-template/v1][%d] createParserFromTemplateInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateParserFromTemplateInternalServerError) String() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers-template/v1][%d] createParserFromTemplateInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateParserFromTemplateInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateParserFromTemplateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
