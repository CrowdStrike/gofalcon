// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CreateSavedQueryReader is a Reader for the CreateSavedQuery structure.
type CreateSavedQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateSavedQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateSavedQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateSavedQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateSavedQueryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateSavedQueryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateSavedQueryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateSavedQueryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateSavedQueryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /ngsiem-content/entities/savedqueries-template/v1] CreateSavedQuery", response, response.Code())
	}
}

// NewCreateSavedQueryOK creates a CreateSavedQueryOK with default headers values
func NewCreateSavedQueryOK() *CreateSavedQueryOK {
	return &CreateSavedQueryOK{}
}

/*
CreateSavedQueryOK describes a response with status code 200, with default header values.

CreateSavedQueryOK create saved query o k
*/
type CreateSavedQueryOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APICreateSavedQueryResponseV1
}

// IsSuccess returns true when this create saved query o k response has a 2xx status code
func (o *CreateSavedQueryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create saved query o k response has a 3xx status code
func (o *CreateSavedQueryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create saved query o k response has a 4xx status code
func (o *CreateSavedQueryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create saved query o k response has a 5xx status code
func (o *CreateSavedQueryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create saved query o k response a status code equal to that given
func (o *CreateSavedQueryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create saved query o k response
func (o *CreateSavedQueryOK) Code() int {
	return 200
}

func (o *CreateSavedQueryOK) Error() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/savedqueries-template/v1][%d] createSavedQueryOK  %+v", 200, o.Payload)
}

func (o *CreateSavedQueryOK) String() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/savedqueries-template/v1][%d] createSavedQueryOK  %+v", 200, o.Payload)
}

func (o *CreateSavedQueryOK) GetPayload() *models.APICreateSavedQueryResponseV1 {
	return o.Payload
}

func (o *CreateSavedQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APICreateSavedQueryResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSavedQueryBadRequest creates a CreateSavedQueryBadRequest with default headers values
func NewCreateSavedQueryBadRequest() *CreateSavedQueryBadRequest {
	return &CreateSavedQueryBadRequest{}
}

/*
CreateSavedQueryBadRequest describes a response with status code 400, with default header values.

Bad request for content operations
*/
type CreateSavedQueryBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create saved query bad request response has a 2xx status code
func (o *CreateSavedQueryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create saved query bad request response has a 3xx status code
func (o *CreateSavedQueryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create saved query bad request response has a 4xx status code
func (o *CreateSavedQueryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create saved query bad request response has a 5xx status code
func (o *CreateSavedQueryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create saved query bad request response a status code equal to that given
func (o *CreateSavedQueryBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create saved query bad request response
func (o *CreateSavedQueryBadRequest) Code() int {
	return 400
}

func (o *CreateSavedQueryBadRequest) Error() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/savedqueries-template/v1][%d] createSavedQueryBadRequest  %+v", 400, o.Payload)
}

func (o *CreateSavedQueryBadRequest) String() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/savedqueries-template/v1][%d] createSavedQueryBadRequest  %+v", 400, o.Payload)
}

func (o *CreateSavedQueryBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateSavedQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSavedQueryUnauthorized creates a CreateSavedQueryUnauthorized with default headers values
func NewCreateSavedQueryUnauthorized() *CreateSavedQueryUnauthorized {
	return &CreateSavedQueryUnauthorized{}
}

/*
CreateSavedQueryUnauthorized describes a response with status code 401, with default header values.

Requestor is not authorized to access resource
*/
type CreateSavedQueryUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create saved query unauthorized response has a 2xx status code
func (o *CreateSavedQueryUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create saved query unauthorized response has a 3xx status code
func (o *CreateSavedQueryUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create saved query unauthorized response has a 4xx status code
func (o *CreateSavedQueryUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create saved query unauthorized response has a 5xx status code
func (o *CreateSavedQueryUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create saved query unauthorized response a status code equal to that given
func (o *CreateSavedQueryUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create saved query unauthorized response
func (o *CreateSavedQueryUnauthorized) Code() int {
	return 401
}

func (o *CreateSavedQueryUnauthorized) Error() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/savedqueries-template/v1][%d] createSavedQueryUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateSavedQueryUnauthorized) String() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/savedqueries-template/v1][%d] createSavedQueryUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateSavedQueryUnauthorized) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateSavedQueryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSavedQueryForbidden creates a CreateSavedQueryForbidden with default headers values
func NewCreateSavedQueryForbidden() *CreateSavedQueryForbidden {
	return &CreateSavedQueryForbidden{}
}

/*
CreateSavedQueryForbidden describes a response with status code 403, with default header values.

Content access is not allowed
*/
type CreateSavedQueryForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create saved query forbidden response has a 2xx status code
func (o *CreateSavedQueryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create saved query forbidden response has a 3xx status code
func (o *CreateSavedQueryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create saved query forbidden response has a 4xx status code
func (o *CreateSavedQueryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create saved query forbidden response has a 5xx status code
func (o *CreateSavedQueryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create saved query forbidden response a status code equal to that given
func (o *CreateSavedQueryForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create saved query forbidden response
func (o *CreateSavedQueryForbidden) Code() int {
	return 403
}

func (o *CreateSavedQueryForbidden) Error() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/savedqueries-template/v1][%d] createSavedQueryForbidden  %+v", 403, o.Payload)
}

func (o *CreateSavedQueryForbidden) String() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/savedqueries-template/v1][%d] createSavedQueryForbidden  %+v", 403, o.Payload)
}

func (o *CreateSavedQueryForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateSavedQueryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSavedQueryNotFound creates a CreateSavedQueryNotFound with default headers values
func NewCreateSavedQueryNotFound() *CreateSavedQueryNotFound {
	return &CreateSavedQueryNotFound{}
}

/*
CreateSavedQueryNotFound describes a response with status code 404, with default header values.

Content resource does not exist
*/
type CreateSavedQueryNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create saved query not found response has a 2xx status code
func (o *CreateSavedQueryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create saved query not found response has a 3xx status code
func (o *CreateSavedQueryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create saved query not found response has a 4xx status code
func (o *CreateSavedQueryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create saved query not found response has a 5xx status code
func (o *CreateSavedQueryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create saved query not found response a status code equal to that given
func (o *CreateSavedQueryNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create saved query not found response
func (o *CreateSavedQueryNotFound) Code() int {
	return 404
}

func (o *CreateSavedQueryNotFound) Error() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/savedqueries-template/v1][%d] createSavedQueryNotFound  %+v", 404, o.Payload)
}

func (o *CreateSavedQueryNotFound) String() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/savedqueries-template/v1][%d] createSavedQueryNotFound  %+v", 404, o.Payload)
}

func (o *CreateSavedQueryNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateSavedQueryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSavedQueryTooManyRequests creates a CreateSavedQueryTooManyRequests with default headers values
func NewCreateSavedQueryTooManyRequests() *CreateSavedQueryTooManyRequests {
	return &CreateSavedQueryTooManyRequests{}
}

/*
CreateSavedQueryTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CreateSavedQueryTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this create saved query too many requests response has a 2xx status code
func (o *CreateSavedQueryTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create saved query too many requests response has a 3xx status code
func (o *CreateSavedQueryTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create saved query too many requests response has a 4xx status code
func (o *CreateSavedQueryTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create saved query too many requests response has a 5xx status code
func (o *CreateSavedQueryTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create saved query too many requests response a status code equal to that given
func (o *CreateSavedQueryTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create saved query too many requests response
func (o *CreateSavedQueryTooManyRequests) Code() int {
	return 429
}

func (o *CreateSavedQueryTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/savedqueries-template/v1][%d] createSavedQueryTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateSavedQueryTooManyRequests) String() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/savedqueries-template/v1][%d] createSavedQueryTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateSavedQueryTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateSavedQueryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSavedQueryInternalServerError creates a CreateSavedQueryInternalServerError with default headers values
func NewCreateSavedQueryInternalServerError() *CreateSavedQueryInternalServerError {
	return &CreateSavedQueryInternalServerError{}
}

/*
CreateSavedQueryInternalServerError describes a response with status code 500, with default header values.

Unexpected error occurred
*/
type CreateSavedQueryInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create saved query internal server error response has a 2xx status code
func (o *CreateSavedQueryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create saved query internal server error response has a 3xx status code
func (o *CreateSavedQueryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create saved query internal server error response has a 4xx status code
func (o *CreateSavedQueryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create saved query internal server error response has a 5xx status code
func (o *CreateSavedQueryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create saved query internal server error response a status code equal to that given
func (o *CreateSavedQueryInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create saved query internal server error response
func (o *CreateSavedQueryInternalServerError) Code() int {
	return 500
}

func (o *CreateSavedQueryInternalServerError) Error() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/savedqueries-template/v1][%d] createSavedQueryInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateSavedQueryInternalServerError) String() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/savedqueries-template/v1][%d] createSavedQueryInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateSavedQueryInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateSavedQueryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
