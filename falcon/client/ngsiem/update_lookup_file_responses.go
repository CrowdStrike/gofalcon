// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// UpdateLookupFileReader is a Reader for the UpdateLookupFile structure.
type UpdateLookupFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateLookupFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateLookupFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateLookupFileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateLookupFileUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateLookupFileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateLookupFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateLookupFileTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateLookupFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /ngsiem-content/entities/lookupfiles/v1] UpdateLookupFile", response, response.Code())
	}
}

// NewUpdateLookupFileOK creates a UpdateLookupFileOK with default headers values
func NewUpdateLookupFileOK() *UpdateLookupFileOK {
	return &UpdateLookupFileOK{}
}

/*
UpdateLookupFileOK describes a response with status code 200, with default header values.

UpdateLookupFileOK update lookup file o k
*/
type UpdateLookupFileOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIUpdateLookupFileResponseV1
}

// IsSuccess returns true when this update lookup file o k response has a 2xx status code
func (o *UpdateLookupFileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update lookup file o k response has a 3xx status code
func (o *UpdateLookupFileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update lookup file o k response has a 4xx status code
func (o *UpdateLookupFileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update lookup file o k response has a 5xx status code
func (o *UpdateLookupFileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update lookup file o k response a status code equal to that given
func (o *UpdateLookupFileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update lookup file o k response
func (o *UpdateLookupFileOK) Code() int {
	return 200
}

func (o *UpdateLookupFileOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/lookupfiles/v1][%d] updateLookupFileOK %s", 200, payload)
}

func (o *UpdateLookupFileOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/lookupfiles/v1][%d] updateLookupFileOK %s", 200, payload)
}

func (o *UpdateLookupFileOK) GetPayload() *models.APIUpdateLookupFileResponseV1 {
	return o.Payload
}

func (o *UpdateLookupFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIUpdateLookupFileResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLookupFileBadRequest creates a UpdateLookupFileBadRequest with default headers values
func NewUpdateLookupFileBadRequest() *UpdateLookupFileBadRequest {
	return &UpdateLookupFileBadRequest{}
}

/*
UpdateLookupFileBadRequest describes a response with status code 400, with default header values.

Bad request for content operations
*/
type UpdateLookupFileBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update lookup file bad request response has a 2xx status code
func (o *UpdateLookupFileBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update lookup file bad request response has a 3xx status code
func (o *UpdateLookupFileBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update lookup file bad request response has a 4xx status code
func (o *UpdateLookupFileBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update lookup file bad request response has a 5xx status code
func (o *UpdateLookupFileBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update lookup file bad request response a status code equal to that given
func (o *UpdateLookupFileBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update lookup file bad request response
func (o *UpdateLookupFileBadRequest) Code() int {
	return 400
}

func (o *UpdateLookupFileBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/lookupfiles/v1][%d] updateLookupFileBadRequest %s", 400, payload)
}

func (o *UpdateLookupFileBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/lookupfiles/v1][%d] updateLookupFileBadRequest %s", 400, payload)
}

func (o *UpdateLookupFileBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateLookupFileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLookupFileUnauthorized creates a UpdateLookupFileUnauthorized with default headers values
func NewUpdateLookupFileUnauthorized() *UpdateLookupFileUnauthorized {
	return &UpdateLookupFileUnauthorized{}
}

/*
UpdateLookupFileUnauthorized describes a response with status code 401, with default header values.

Requestor is not authorized to access resource
*/
type UpdateLookupFileUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update lookup file unauthorized response has a 2xx status code
func (o *UpdateLookupFileUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update lookup file unauthorized response has a 3xx status code
func (o *UpdateLookupFileUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update lookup file unauthorized response has a 4xx status code
func (o *UpdateLookupFileUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update lookup file unauthorized response has a 5xx status code
func (o *UpdateLookupFileUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update lookup file unauthorized response a status code equal to that given
func (o *UpdateLookupFileUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update lookup file unauthorized response
func (o *UpdateLookupFileUnauthorized) Code() int {
	return 401
}

func (o *UpdateLookupFileUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/lookupfiles/v1][%d] updateLookupFileUnauthorized %s", 401, payload)
}

func (o *UpdateLookupFileUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/lookupfiles/v1][%d] updateLookupFileUnauthorized %s", 401, payload)
}

func (o *UpdateLookupFileUnauthorized) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateLookupFileUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLookupFileForbidden creates a UpdateLookupFileForbidden with default headers values
func NewUpdateLookupFileForbidden() *UpdateLookupFileForbidden {
	return &UpdateLookupFileForbidden{}
}

/*
UpdateLookupFileForbidden describes a response with status code 403, with default header values.

Content access is not allowed
*/
type UpdateLookupFileForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update lookup file forbidden response has a 2xx status code
func (o *UpdateLookupFileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update lookup file forbidden response has a 3xx status code
func (o *UpdateLookupFileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update lookup file forbidden response has a 4xx status code
func (o *UpdateLookupFileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update lookup file forbidden response has a 5xx status code
func (o *UpdateLookupFileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update lookup file forbidden response a status code equal to that given
func (o *UpdateLookupFileForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update lookup file forbidden response
func (o *UpdateLookupFileForbidden) Code() int {
	return 403
}

func (o *UpdateLookupFileForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/lookupfiles/v1][%d] updateLookupFileForbidden %s", 403, payload)
}

func (o *UpdateLookupFileForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/lookupfiles/v1][%d] updateLookupFileForbidden %s", 403, payload)
}

func (o *UpdateLookupFileForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateLookupFileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLookupFileNotFound creates a UpdateLookupFileNotFound with default headers values
func NewUpdateLookupFileNotFound() *UpdateLookupFileNotFound {
	return &UpdateLookupFileNotFound{}
}

/*
UpdateLookupFileNotFound describes a response with status code 404, with default header values.

Content resource does not exist
*/
type UpdateLookupFileNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update lookup file not found response has a 2xx status code
func (o *UpdateLookupFileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update lookup file not found response has a 3xx status code
func (o *UpdateLookupFileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update lookup file not found response has a 4xx status code
func (o *UpdateLookupFileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update lookup file not found response has a 5xx status code
func (o *UpdateLookupFileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update lookup file not found response a status code equal to that given
func (o *UpdateLookupFileNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update lookup file not found response
func (o *UpdateLookupFileNotFound) Code() int {
	return 404
}

func (o *UpdateLookupFileNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/lookupfiles/v1][%d] updateLookupFileNotFound %s", 404, payload)
}

func (o *UpdateLookupFileNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/lookupfiles/v1][%d] updateLookupFileNotFound %s", 404, payload)
}

func (o *UpdateLookupFileNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateLookupFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLookupFileTooManyRequests creates a UpdateLookupFileTooManyRequests with default headers values
func NewUpdateLookupFileTooManyRequests() *UpdateLookupFileTooManyRequests {
	return &UpdateLookupFileTooManyRequests{}
}

/*
UpdateLookupFileTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type UpdateLookupFileTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this update lookup file too many requests response has a 2xx status code
func (o *UpdateLookupFileTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update lookup file too many requests response has a 3xx status code
func (o *UpdateLookupFileTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update lookup file too many requests response has a 4xx status code
func (o *UpdateLookupFileTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update lookup file too many requests response has a 5xx status code
func (o *UpdateLookupFileTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update lookup file too many requests response a status code equal to that given
func (o *UpdateLookupFileTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update lookup file too many requests response
func (o *UpdateLookupFileTooManyRequests) Code() int {
	return 429
}

func (o *UpdateLookupFileTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/lookupfiles/v1][%d] updateLookupFileTooManyRequests %s", 429, payload)
}

func (o *UpdateLookupFileTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/lookupfiles/v1][%d] updateLookupFileTooManyRequests %s", 429, payload)
}

func (o *UpdateLookupFileTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpdateLookupFileTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLookupFileInternalServerError creates a UpdateLookupFileInternalServerError with default headers values
func NewUpdateLookupFileInternalServerError() *UpdateLookupFileInternalServerError {
	return &UpdateLookupFileInternalServerError{}
}

/*
UpdateLookupFileInternalServerError describes a response with status code 500, with default header values.

Unexpected error occurred
*/
type UpdateLookupFileInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update lookup file internal server error response has a 2xx status code
func (o *UpdateLookupFileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update lookup file internal server error response has a 3xx status code
func (o *UpdateLookupFileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update lookup file internal server error response has a 4xx status code
func (o *UpdateLookupFileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update lookup file internal server error response has a 5xx status code
func (o *UpdateLookupFileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update lookup file internal server error response a status code equal to that given
func (o *UpdateLookupFileInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update lookup file internal server error response
func (o *UpdateLookupFileInternalServerError) Code() int {
	return 500
}

func (o *UpdateLookupFileInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/lookupfiles/v1][%d] updateLookupFileInternalServerError %s", 500, payload)
}

func (o *UpdateLookupFileInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/lookupfiles/v1][%d] updateLookupFileInternalServerError %s", 500, payload)
}

func (o *UpdateLookupFileInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateLookupFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
