// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// DeleteParserReader is a Reader for the DeleteParser structure.
type DeleteParserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteParserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteParserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteParserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteParserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteParserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteParserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteParserTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteParserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /ngsiem-content/entities/parsers/v1] DeleteParser", response, response.Code())
	}
}

// NewDeleteParserOK creates a DeleteParserOK with default headers values
func NewDeleteParserOK() *DeleteParserOK {
	return &DeleteParserOK{}
}

/*
DeleteParserOK describes a response with status code 200, with default header values.

DeleteParserOK delete parser o k
*/
type DeleteParserOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIDeleteParserResponseV1
}

// IsSuccess returns true when this delete parser o k response has a 2xx status code
func (o *DeleteParserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete parser o k response has a 3xx status code
func (o *DeleteParserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete parser o k response has a 4xx status code
func (o *DeleteParserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete parser o k response has a 5xx status code
func (o *DeleteParserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete parser o k response a status code equal to that given
func (o *DeleteParserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete parser o k response
func (o *DeleteParserOK) Code() int {
	return 200
}

func (o *DeleteParserOK) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/parsers/v1][%d] deleteParserOK  %+v", 200, o.Payload)
}

func (o *DeleteParserOK) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/parsers/v1][%d] deleteParserOK  %+v", 200, o.Payload)
}

func (o *DeleteParserOK) GetPayload() *models.APIDeleteParserResponseV1 {
	return o.Payload
}

func (o *DeleteParserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIDeleteParserResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteParserBadRequest creates a DeleteParserBadRequest with default headers values
func NewDeleteParserBadRequest() *DeleteParserBadRequest {
	return &DeleteParserBadRequest{}
}

/*
DeleteParserBadRequest describes a response with status code 400, with default header values.

Bad request for content operations
*/
type DeleteParserBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this delete parser bad request response has a 2xx status code
func (o *DeleteParserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete parser bad request response has a 3xx status code
func (o *DeleteParserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete parser bad request response has a 4xx status code
func (o *DeleteParserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete parser bad request response has a 5xx status code
func (o *DeleteParserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete parser bad request response a status code equal to that given
func (o *DeleteParserBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete parser bad request response
func (o *DeleteParserBadRequest) Code() int {
	return 400
}

func (o *DeleteParserBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/parsers/v1][%d] deleteParserBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteParserBadRequest) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/parsers/v1][%d] deleteParserBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteParserBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DeleteParserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteParserUnauthorized creates a DeleteParserUnauthorized with default headers values
func NewDeleteParserUnauthorized() *DeleteParserUnauthorized {
	return &DeleteParserUnauthorized{}
}

/*
DeleteParserUnauthorized describes a response with status code 401, with default header values.

Requestor is not authorized to access resource
*/
type DeleteParserUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this delete parser unauthorized response has a 2xx status code
func (o *DeleteParserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete parser unauthorized response has a 3xx status code
func (o *DeleteParserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete parser unauthorized response has a 4xx status code
func (o *DeleteParserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete parser unauthorized response has a 5xx status code
func (o *DeleteParserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete parser unauthorized response a status code equal to that given
func (o *DeleteParserUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete parser unauthorized response
func (o *DeleteParserUnauthorized) Code() int {
	return 401
}

func (o *DeleteParserUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/parsers/v1][%d] deleteParserUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteParserUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/parsers/v1][%d] deleteParserUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteParserUnauthorized) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DeleteParserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteParserForbidden creates a DeleteParserForbidden with default headers values
func NewDeleteParserForbidden() *DeleteParserForbidden {
	return &DeleteParserForbidden{}
}

/*
DeleteParserForbidden describes a response with status code 403, with default header values.

Content access is not allowed
*/
type DeleteParserForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this delete parser forbidden response has a 2xx status code
func (o *DeleteParserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete parser forbidden response has a 3xx status code
func (o *DeleteParserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete parser forbidden response has a 4xx status code
func (o *DeleteParserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete parser forbidden response has a 5xx status code
func (o *DeleteParserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete parser forbidden response a status code equal to that given
func (o *DeleteParserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete parser forbidden response
func (o *DeleteParserForbidden) Code() int {
	return 403
}

func (o *DeleteParserForbidden) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/parsers/v1][%d] deleteParserForbidden  %+v", 403, o.Payload)
}

func (o *DeleteParserForbidden) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/parsers/v1][%d] deleteParserForbidden  %+v", 403, o.Payload)
}

func (o *DeleteParserForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DeleteParserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteParserNotFound creates a DeleteParserNotFound with default headers values
func NewDeleteParserNotFound() *DeleteParserNotFound {
	return &DeleteParserNotFound{}
}

/*
DeleteParserNotFound describes a response with status code 404, with default header values.

Content resource does not exist
*/
type DeleteParserNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this delete parser not found response has a 2xx status code
func (o *DeleteParserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete parser not found response has a 3xx status code
func (o *DeleteParserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete parser not found response has a 4xx status code
func (o *DeleteParserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete parser not found response has a 5xx status code
func (o *DeleteParserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete parser not found response a status code equal to that given
func (o *DeleteParserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete parser not found response
func (o *DeleteParserNotFound) Code() int {
	return 404
}

func (o *DeleteParserNotFound) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/parsers/v1][%d] deleteParserNotFound  %+v", 404, o.Payload)
}

func (o *DeleteParserNotFound) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/parsers/v1][%d] deleteParserNotFound  %+v", 404, o.Payload)
}

func (o *DeleteParserNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DeleteParserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteParserTooManyRequests creates a DeleteParserTooManyRequests with default headers values
func NewDeleteParserTooManyRequests() *DeleteParserTooManyRequests {
	return &DeleteParserTooManyRequests{}
}

/*
DeleteParserTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type DeleteParserTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete parser too many requests response has a 2xx status code
func (o *DeleteParserTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete parser too many requests response has a 3xx status code
func (o *DeleteParserTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete parser too many requests response has a 4xx status code
func (o *DeleteParserTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete parser too many requests response has a 5xx status code
func (o *DeleteParserTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete parser too many requests response a status code equal to that given
func (o *DeleteParserTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete parser too many requests response
func (o *DeleteParserTooManyRequests) Code() int {
	return 429
}

func (o *DeleteParserTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/parsers/v1][%d] deleteParserTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteParserTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/parsers/v1][%d] deleteParserTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteParserTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeleteParserTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteParserInternalServerError creates a DeleteParserInternalServerError with default headers values
func NewDeleteParserInternalServerError() *DeleteParserInternalServerError {
	return &DeleteParserInternalServerError{}
}

/*
DeleteParserInternalServerError describes a response with status code 500, with default header values.

Unexpected error occurred
*/
type DeleteParserInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this delete parser internal server error response has a 2xx status code
func (o *DeleteParserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete parser internal server error response has a 3xx status code
func (o *DeleteParserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete parser internal server error response has a 4xx status code
func (o *DeleteParserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete parser internal server error response has a 5xx status code
func (o *DeleteParserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete parser internal server error response a status code equal to that given
func (o *DeleteParserInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete parser internal server error response
func (o *DeleteParserInternalServerError) Code() int {
	return 500
}

func (o *DeleteParserInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/parsers/v1][%d] deleteParserInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteParserInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/parsers/v1][%d] deleteParserInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteParserInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DeleteParserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
