// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetParserTemplateReader is a Reader for the GetParserTemplate structure.
type GetParserTemplateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetParserTemplateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetParserTemplateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetParserTemplateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetParserTemplateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetParserTemplateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetParserTemplateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetParserTemplateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetParserTemplateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /ngsiem-content/entities/parsers-template/v1] GetParserTemplate", response, response.Code())
	}
}

// NewGetParserTemplateOK creates a GetParserTemplateOK with default headers values
func NewGetParserTemplateOK() *GetParserTemplateOK {
	return &GetParserTemplateOK{}
}

/*
GetParserTemplateOK describes a response with status code 200, with default header values.

GetParserTemplateOK get parser template o k
*/
type GetParserTemplateOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIGetParserTemplateResponseV1
}

// IsSuccess returns true when this get parser template o k response has a 2xx status code
func (o *GetParserTemplateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get parser template o k response has a 3xx status code
func (o *GetParserTemplateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get parser template o k response has a 4xx status code
func (o *GetParserTemplateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get parser template o k response has a 5xx status code
func (o *GetParserTemplateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get parser template o k response a status code equal to that given
func (o *GetParserTemplateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get parser template o k response
func (o *GetParserTemplateOK) Code() int {
	return 200
}

func (o *GetParserTemplateOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers-template/v1][%d] getParserTemplateOK %s", 200, payload)
}

func (o *GetParserTemplateOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers-template/v1][%d] getParserTemplateOK %s", 200, payload)
}

func (o *GetParserTemplateOK) GetPayload() *models.APIGetParserTemplateResponseV1 {
	return o.Payload
}

func (o *GetParserTemplateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIGetParserTemplateResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetParserTemplateBadRequest creates a GetParserTemplateBadRequest with default headers values
func NewGetParserTemplateBadRequest() *GetParserTemplateBadRequest {
	return &GetParserTemplateBadRequest{}
}

/*
GetParserTemplateBadRequest describes a response with status code 400, with default header values.

Bad request for content operations
*/
type GetParserTemplateBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get parser template bad request response has a 2xx status code
func (o *GetParserTemplateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get parser template bad request response has a 3xx status code
func (o *GetParserTemplateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get parser template bad request response has a 4xx status code
func (o *GetParserTemplateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get parser template bad request response has a 5xx status code
func (o *GetParserTemplateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get parser template bad request response a status code equal to that given
func (o *GetParserTemplateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get parser template bad request response
func (o *GetParserTemplateBadRequest) Code() int {
	return 400
}

func (o *GetParserTemplateBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers-template/v1][%d] getParserTemplateBadRequest %s", 400, payload)
}

func (o *GetParserTemplateBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers-template/v1][%d] getParserTemplateBadRequest %s", 400, payload)
}

func (o *GetParserTemplateBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetParserTemplateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetParserTemplateUnauthorized creates a GetParserTemplateUnauthorized with default headers values
func NewGetParserTemplateUnauthorized() *GetParserTemplateUnauthorized {
	return &GetParserTemplateUnauthorized{}
}

/*
GetParserTemplateUnauthorized describes a response with status code 401, with default header values.

Requestor is not authorized to access resource
*/
type GetParserTemplateUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get parser template unauthorized response has a 2xx status code
func (o *GetParserTemplateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get parser template unauthorized response has a 3xx status code
func (o *GetParserTemplateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get parser template unauthorized response has a 4xx status code
func (o *GetParserTemplateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get parser template unauthorized response has a 5xx status code
func (o *GetParserTemplateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get parser template unauthorized response a status code equal to that given
func (o *GetParserTemplateUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get parser template unauthorized response
func (o *GetParserTemplateUnauthorized) Code() int {
	return 401
}

func (o *GetParserTemplateUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers-template/v1][%d] getParserTemplateUnauthorized %s", 401, payload)
}

func (o *GetParserTemplateUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers-template/v1][%d] getParserTemplateUnauthorized %s", 401, payload)
}

func (o *GetParserTemplateUnauthorized) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetParserTemplateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetParserTemplateForbidden creates a GetParserTemplateForbidden with default headers values
func NewGetParserTemplateForbidden() *GetParserTemplateForbidden {
	return &GetParserTemplateForbidden{}
}

/*
GetParserTemplateForbidden describes a response with status code 403, with default header values.

Content access is not allowed
*/
type GetParserTemplateForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get parser template forbidden response has a 2xx status code
func (o *GetParserTemplateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get parser template forbidden response has a 3xx status code
func (o *GetParserTemplateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get parser template forbidden response has a 4xx status code
func (o *GetParserTemplateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get parser template forbidden response has a 5xx status code
func (o *GetParserTemplateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get parser template forbidden response a status code equal to that given
func (o *GetParserTemplateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get parser template forbidden response
func (o *GetParserTemplateForbidden) Code() int {
	return 403
}

func (o *GetParserTemplateForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers-template/v1][%d] getParserTemplateForbidden %s", 403, payload)
}

func (o *GetParserTemplateForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers-template/v1][%d] getParserTemplateForbidden %s", 403, payload)
}

func (o *GetParserTemplateForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetParserTemplateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetParserTemplateNotFound creates a GetParserTemplateNotFound with default headers values
func NewGetParserTemplateNotFound() *GetParserTemplateNotFound {
	return &GetParserTemplateNotFound{}
}

/*
GetParserTemplateNotFound describes a response with status code 404, with default header values.

Content resource does not exist
*/
type GetParserTemplateNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get parser template not found response has a 2xx status code
func (o *GetParserTemplateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get parser template not found response has a 3xx status code
func (o *GetParserTemplateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get parser template not found response has a 4xx status code
func (o *GetParserTemplateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get parser template not found response has a 5xx status code
func (o *GetParserTemplateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get parser template not found response a status code equal to that given
func (o *GetParserTemplateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get parser template not found response
func (o *GetParserTemplateNotFound) Code() int {
	return 404
}

func (o *GetParserTemplateNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers-template/v1][%d] getParserTemplateNotFound %s", 404, payload)
}

func (o *GetParserTemplateNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers-template/v1][%d] getParserTemplateNotFound %s", 404, payload)
}

func (o *GetParserTemplateNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetParserTemplateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetParserTemplateTooManyRequests creates a GetParserTemplateTooManyRequests with default headers values
func NewGetParserTemplateTooManyRequests() *GetParserTemplateTooManyRequests {
	return &GetParserTemplateTooManyRequests{}
}

/*
GetParserTemplateTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetParserTemplateTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get parser template too many requests response has a 2xx status code
func (o *GetParserTemplateTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get parser template too many requests response has a 3xx status code
func (o *GetParserTemplateTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get parser template too many requests response has a 4xx status code
func (o *GetParserTemplateTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get parser template too many requests response has a 5xx status code
func (o *GetParserTemplateTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get parser template too many requests response a status code equal to that given
func (o *GetParserTemplateTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get parser template too many requests response
func (o *GetParserTemplateTooManyRequests) Code() int {
	return 429
}

func (o *GetParserTemplateTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers-template/v1][%d] getParserTemplateTooManyRequests %s", 429, payload)
}

func (o *GetParserTemplateTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers-template/v1][%d] getParserTemplateTooManyRequests %s", 429, payload)
}

func (o *GetParserTemplateTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetParserTemplateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetParserTemplateInternalServerError creates a GetParserTemplateInternalServerError with default headers values
func NewGetParserTemplateInternalServerError() *GetParserTemplateInternalServerError {
	return &GetParserTemplateInternalServerError{}
}

/*
GetParserTemplateInternalServerError describes a response with status code 500, with default header values.

Unexpected error occurred
*/
type GetParserTemplateInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get parser template internal server error response has a 2xx status code
func (o *GetParserTemplateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get parser template internal server error response has a 3xx status code
func (o *GetParserTemplateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get parser template internal server error response has a 4xx status code
func (o *GetParserTemplateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get parser template internal server error response has a 5xx status code
func (o *GetParserTemplateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get parser template internal server error response a status code equal to that given
func (o *GetParserTemplateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get parser template internal server error response
func (o *GetParserTemplateInternalServerError) Code() int {
	return 500
}

func (o *GetParserTemplateInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers-template/v1][%d] getParserTemplateInternalServerError %s", 500, payload)
}

func (o *GetParserTemplateInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers-template/v1][%d] getParserTemplateInternalServerError %s", 500, payload)
}

func (o *GetParserTemplateInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetParserTemplateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
