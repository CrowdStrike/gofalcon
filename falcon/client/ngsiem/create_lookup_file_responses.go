// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CreateLookupFileReader is a Reader for the CreateLookupFile structure.
type CreateLookupFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateLookupFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateLookupFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateLookupFileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateLookupFileUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateLookupFileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateLookupFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateLookupFileTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateLookupFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /ngsiem-content/entities/lookupfiles/v1] CreateLookupFile", response, response.Code())
	}
}

// NewCreateLookupFileOK creates a CreateLookupFileOK with default headers values
func NewCreateLookupFileOK() *CreateLookupFileOK {
	return &CreateLookupFileOK{}
}

/*
CreateLookupFileOK describes a response with status code 200, with default header values.

CreateLookupFileOK create lookup file o k
*/
type CreateLookupFileOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APICreateLookupFileResponseV1
}

// IsSuccess returns true when this create lookup file o k response has a 2xx status code
func (o *CreateLookupFileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create lookup file o k response has a 3xx status code
func (o *CreateLookupFileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create lookup file o k response has a 4xx status code
func (o *CreateLookupFileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create lookup file o k response has a 5xx status code
func (o *CreateLookupFileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create lookup file o k response a status code equal to that given
func (o *CreateLookupFileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create lookup file o k response
func (o *CreateLookupFileOK) Code() int {
	return 200
}

func (o *CreateLookupFileOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/lookupfiles/v1][%d] createLookupFileOK %s", 200, payload)
}

func (o *CreateLookupFileOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/lookupfiles/v1][%d] createLookupFileOK %s", 200, payload)
}

func (o *CreateLookupFileOK) GetPayload() *models.APICreateLookupFileResponseV1 {
	return o.Payload
}

func (o *CreateLookupFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APICreateLookupFileResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLookupFileBadRequest creates a CreateLookupFileBadRequest with default headers values
func NewCreateLookupFileBadRequest() *CreateLookupFileBadRequest {
	return &CreateLookupFileBadRequest{}
}

/*
CreateLookupFileBadRequest describes a response with status code 400, with default header values.

Bad request for content operations
*/
type CreateLookupFileBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create lookup file bad request response has a 2xx status code
func (o *CreateLookupFileBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create lookup file bad request response has a 3xx status code
func (o *CreateLookupFileBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create lookup file bad request response has a 4xx status code
func (o *CreateLookupFileBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create lookup file bad request response has a 5xx status code
func (o *CreateLookupFileBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create lookup file bad request response a status code equal to that given
func (o *CreateLookupFileBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create lookup file bad request response
func (o *CreateLookupFileBadRequest) Code() int {
	return 400
}

func (o *CreateLookupFileBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/lookupfiles/v1][%d] createLookupFileBadRequest %s", 400, payload)
}

func (o *CreateLookupFileBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/lookupfiles/v1][%d] createLookupFileBadRequest %s", 400, payload)
}

func (o *CreateLookupFileBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateLookupFileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLookupFileUnauthorized creates a CreateLookupFileUnauthorized with default headers values
func NewCreateLookupFileUnauthorized() *CreateLookupFileUnauthorized {
	return &CreateLookupFileUnauthorized{}
}

/*
CreateLookupFileUnauthorized describes a response with status code 401, with default header values.

Requestor is not authorized to access resource
*/
type CreateLookupFileUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create lookup file unauthorized response has a 2xx status code
func (o *CreateLookupFileUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create lookup file unauthorized response has a 3xx status code
func (o *CreateLookupFileUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create lookup file unauthorized response has a 4xx status code
func (o *CreateLookupFileUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create lookup file unauthorized response has a 5xx status code
func (o *CreateLookupFileUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create lookup file unauthorized response a status code equal to that given
func (o *CreateLookupFileUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create lookup file unauthorized response
func (o *CreateLookupFileUnauthorized) Code() int {
	return 401
}

func (o *CreateLookupFileUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/lookupfiles/v1][%d] createLookupFileUnauthorized %s", 401, payload)
}

func (o *CreateLookupFileUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/lookupfiles/v1][%d] createLookupFileUnauthorized %s", 401, payload)
}

func (o *CreateLookupFileUnauthorized) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateLookupFileUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLookupFileForbidden creates a CreateLookupFileForbidden with default headers values
func NewCreateLookupFileForbidden() *CreateLookupFileForbidden {
	return &CreateLookupFileForbidden{}
}

/*
CreateLookupFileForbidden describes a response with status code 403, with default header values.

Content access is not allowed
*/
type CreateLookupFileForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create lookup file forbidden response has a 2xx status code
func (o *CreateLookupFileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create lookup file forbidden response has a 3xx status code
func (o *CreateLookupFileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create lookup file forbidden response has a 4xx status code
func (o *CreateLookupFileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create lookup file forbidden response has a 5xx status code
func (o *CreateLookupFileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create lookup file forbidden response a status code equal to that given
func (o *CreateLookupFileForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create lookup file forbidden response
func (o *CreateLookupFileForbidden) Code() int {
	return 403
}

func (o *CreateLookupFileForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/lookupfiles/v1][%d] createLookupFileForbidden %s", 403, payload)
}

func (o *CreateLookupFileForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/lookupfiles/v1][%d] createLookupFileForbidden %s", 403, payload)
}

func (o *CreateLookupFileForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateLookupFileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLookupFileNotFound creates a CreateLookupFileNotFound with default headers values
func NewCreateLookupFileNotFound() *CreateLookupFileNotFound {
	return &CreateLookupFileNotFound{}
}

/*
CreateLookupFileNotFound describes a response with status code 404, with default header values.

Content resource does not exist
*/
type CreateLookupFileNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create lookup file not found response has a 2xx status code
func (o *CreateLookupFileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create lookup file not found response has a 3xx status code
func (o *CreateLookupFileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create lookup file not found response has a 4xx status code
func (o *CreateLookupFileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create lookup file not found response has a 5xx status code
func (o *CreateLookupFileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create lookup file not found response a status code equal to that given
func (o *CreateLookupFileNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create lookup file not found response
func (o *CreateLookupFileNotFound) Code() int {
	return 404
}

func (o *CreateLookupFileNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/lookupfiles/v1][%d] createLookupFileNotFound %s", 404, payload)
}

func (o *CreateLookupFileNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/lookupfiles/v1][%d] createLookupFileNotFound %s", 404, payload)
}

func (o *CreateLookupFileNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateLookupFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLookupFileTooManyRequests creates a CreateLookupFileTooManyRequests with default headers values
func NewCreateLookupFileTooManyRequests() *CreateLookupFileTooManyRequests {
	return &CreateLookupFileTooManyRequests{}
}

/*
CreateLookupFileTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CreateLookupFileTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this create lookup file too many requests response has a 2xx status code
func (o *CreateLookupFileTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create lookup file too many requests response has a 3xx status code
func (o *CreateLookupFileTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create lookup file too many requests response has a 4xx status code
func (o *CreateLookupFileTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create lookup file too many requests response has a 5xx status code
func (o *CreateLookupFileTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create lookup file too many requests response a status code equal to that given
func (o *CreateLookupFileTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create lookup file too many requests response
func (o *CreateLookupFileTooManyRequests) Code() int {
	return 429
}

func (o *CreateLookupFileTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/lookupfiles/v1][%d] createLookupFileTooManyRequests %s", 429, payload)
}

func (o *CreateLookupFileTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/lookupfiles/v1][%d] createLookupFileTooManyRequests %s", 429, payload)
}

func (o *CreateLookupFileTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateLookupFileTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateLookupFileInternalServerError creates a CreateLookupFileInternalServerError with default headers values
func NewCreateLookupFileInternalServerError() *CreateLookupFileInternalServerError {
	return &CreateLookupFileInternalServerError{}
}

/*
CreateLookupFileInternalServerError describes a response with status code 500, with default header values.

Unexpected error occurred
*/
type CreateLookupFileInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create lookup file internal server error response has a 2xx status code
func (o *CreateLookupFileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create lookup file internal server error response has a 3xx status code
func (o *CreateLookupFileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create lookup file internal server error response has a 4xx status code
func (o *CreateLookupFileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create lookup file internal server error response has a 5xx status code
func (o *CreateLookupFileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create lookup file internal server error response a status code equal to that given
func (o *CreateLookupFileInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create lookup file internal server error response
func (o *CreateLookupFileInternalServerError) Code() int {
	return 500
}

func (o *CreateLookupFileInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/lookupfiles/v1][%d] createLookupFileInternalServerError %s", 500, payload)
}

func (o *CreateLookupFileInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/lookupfiles/v1][%d] createLookupFileInternalServerError %s", 500, payload)
}

func (o *CreateLookupFileInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateLookupFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
