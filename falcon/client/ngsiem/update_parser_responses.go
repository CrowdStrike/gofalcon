// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// UpdateParserReader is a Reader for the UpdateParser structure.
type UpdateParserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateParserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateParserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateParserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateParserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateParserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateParserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateParserTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateParserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /ngsiem-content/entities/parsers/v1] UpdateParser", response, response.Code())
	}
}

// NewUpdateParserOK creates a UpdateParserOK with default headers values
func NewUpdateParserOK() *UpdateParserOK {
	return &UpdateParserOK{}
}

/*
UpdateParserOK describes a response with status code 200, with default header values.

UpdateParserOK update parser o k
*/
type UpdateParserOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIUpdateParserResponseV1
}

// IsSuccess returns true when this update parser o k response has a 2xx status code
func (o *UpdateParserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update parser o k response has a 3xx status code
func (o *UpdateParserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update parser o k response has a 4xx status code
func (o *UpdateParserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update parser o k response has a 5xx status code
func (o *UpdateParserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update parser o k response a status code equal to that given
func (o *UpdateParserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update parser o k response
func (o *UpdateParserOK) Code() int {
	return 200
}

func (o *UpdateParserOK) Error() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/parsers/v1][%d] updateParserOK  %+v", 200, o.Payload)
}

func (o *UpdateParserOK) String() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/parsers/v1][%d] updateParserOK  %+v", 200, o.Payload)
}

func (o *UpdateParserOK) GetPayload() *models.APIUpdateParserResponseV1 {
	return o.Payload
}

func (o *UpdateParserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIUpdateParserResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateParserBadRequest creates a UpdateParserBadRequest with default headers values
func NewUpdateParserBadRequest() *UpdateParserBadRequest {
	return &UpdateParserBadRequest{}
}

/*
UpdateParserBadRequest describes a response with status code 400, with default header values.

Bad request for content operations
*/
type UpdateParserBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update parser bad request response has a 2xx status code
func (o *UpdateParserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update parser bad request response has a 3xx status code
func (o *UpdateParserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update parser bad request response has a 4xx status code
func (o *UpdateParserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update parser bad request response has a 5xx status code
func (o *UpdateParserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update parser bad request response a status code equal to that given
func (o *UpdateParserBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update parser bad request response
func (o *UpdateParserBadRequest) Code() int {
	return 400
}

func (o *UpdateParserBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/parsers/v1][%d] updateParserBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateParserBadRequest) String() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/parsers/v1][%d] updateParserBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateParserBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateParserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateParserUnauthorized creates a UpdateParserUnauthorized with default headers values
func NewUpdateParserUnauthorized() *UpdateParserUnauthorized {
	return &UpdateParserUnauthorized{}
}

/*
UpdateParserUnauthorized describes a response with status code 401, with default header values.

Requestor is not authorized to access resource
*/
type UpdateParserUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update parser unauthorized response has a 2xx status code
func (o *UpdateParserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update parser unauthorized response has a 3xx status code
func (o *UpdateParserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update parser unauthorized response has a 4xx status code
func (o *UpdateParserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update parser unauthorized response has a 5xx status code
func (o *UpdateParserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update parser unauthorized response a status code equal to that given
func (o *UpdateParserUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update parser unauthorized response
func (o *UpdateParserUnauthorized) Code() int {
	return 401
}

func (o *UpdateParserUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/parsers/v1][%d] updateParserUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateParserUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/parsers/v1][%d] updateParserUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateParserUnauthorized) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateParserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateParserForbidden creates a UpdateParserForbidden with default headers values
func NewUpdateParserForbidden() *UpdateParserForbidden {
	return &UpdateParserForbidden{}
}

/*
UpdateParserForbidden describes a response with status code 403, with default header values.

Content access is not allowed
*/
type UpdateParserForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update parser forbidden response has a 2xx status code
func (o *UpdateParserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update parser forbidden response has a 3xx status code
func (o *UpdateParserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update parser forbidden response has a 4xx status code
func (o *UpdateParserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update parser forbidden response has a 5xx status code
func (o *UpdateParserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update parser forbidden response a status code equal to that given
func (o *UpdateParserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update parser forbidden response
func (o *UpdateParserForbidden) Code() int {
	return 403
}

func (o *UpdateParserForbidden) Error() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/parsers/v1][%d] updateParserForbidden  %+v", 403, o.Payload)
}

func (o *UpdateParserForbidden) String() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/parsers/v1][%d] updateParserForbidden  %+v", 403, o.Payload)
}

func (o *UpdateParserForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateParserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateParserNotFound creates a UpdateParserNotFound with default headers values
func NewUpdateParserNotFound() *UpdateParserNotFound {
	return &UpdateParserNotFound{}
}

/*
UpdateParserNotFound describes a response with status code 404, with default header values.

Content resource does not exist
*/
type UpdateParserNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update parser not found response has a 2xx status code
func (o *UpdateParserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update parser not found response has a 3xx status code
func (o *UpdateParserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update parser not found response has a 4xx status code
func (o *UpdateParserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update parser not found response has a 5xx status code
func (o *UpdateParserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update parser not found response a status code equal to that given
func (o *UpdateParserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update parser not found response
func (o *UpdateParserNotFound) Code() int {
	return 404
}

func (o *UpdateParserNotFound) Error() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/parsers/v1][%d] updateParserNotFound  %+v", 404, o.Payload)
}

func (o *UpdateParserNotFound) String() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/parsers/v1][%d] updateParserNotFound  %+v", 404, o.Payload)
}

func (o *UpdateParserNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateParserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateParserTooManyRequests creates a UpdateParserTooManyRequests with default headers values
func NewUpdateParserTooManyRequests() *UpdateParserTooManyRequests {
	return &UpdateParserTooManyRequests{}
}

/*
UpdateParserTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type UpdateParserTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this update parser too many requests response has a 2xx status code
func (o *UpdateParserTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update parser too many requests response has a 3xx status code
func (o *UpdateParserTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update parser too many requests response has a 4xx status code
func (o *UpdateParserTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update parser too many requests response has a 5xx status code
func (o *UpdateParserTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update parser too many requests response a status code equal to that given
func (o *UpdateParserTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update parser too many requests response
func (o *UpdateParserTooManyRequests) Code() int {
	return 429
}

func (o *UpdateParserTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/parsers/v1][%d] updateParserTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateParserTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/parsers/v1][%d] updateParserTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateParserTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpdateParserTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateParserInternalServerError creates a UpdateParserInternalServerError with default headers values
func NewUpdateParserInternalServerError() *UpdateParserInternalServerError {
	return &UpdateParserInternalServerError{}
}

/*
UpdateParserInternalServerError describes a response with status code 500, with default header values.

Unexpected error occurred
*/
type UpdateParserInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update parser internal server error response has a 2xx status code
func (o *UpdateParserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update parser internal server error response has a 3xx status code
func (o *UpdateParserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update parser internal server error response has a 4xx status code
func (o *UpdateParserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update parser internal server error response has a 5xx status code
func (o *UpdateParserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update parser internal server error response a status code equal to that given
func (o *UpdateParserInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update parser internal server error response
func (o *UpdateParserInternalServerError) Code() int {
	return 500
}

func (o *UpdateParserInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/parsers/v1][%d] updateParserInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateParserInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/parsers/v1][%d] updateParserInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateParserInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateParserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
