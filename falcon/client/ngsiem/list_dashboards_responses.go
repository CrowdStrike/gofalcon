// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ListDashboardsReader is a Reader for the ListDashboards structure.
type ListDashboardsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListDashboardsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListDashboardsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListDashboardsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListDashboardsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListDashboardsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListDashboardsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListDashboardsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListDashboardsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /ngsiem-content/queries/dashboards/v1] ListDashboards", response, response.Code())
	}
}

// NewListDashboardsOK creates a ListDashboardsOK with default headers values
func NewListDashboardsOK() *ListDashboardsOK {
	return &ListDashboardsOK{}
}

/*
ListDashboardsOK describes a response with status code 200, with default header values.

ListDashboardsOK list dashboards o k
*/
type ListDashboardsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIListDashboardsResponseV1
}

// IsSuccess returns true when this list dashboards o k response has a 2xx status code
func (o *ListDashboardsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list dashboards o k response has a 3xx status code
func (o *ListDashboardsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list dashboards o k response has a 4xx status code
func (o *ListDashboardsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list dashboards o k response has a 5xx status code
func (o *ListDashboardsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list dashboards o k response a status code equal to that given
func (o *ListDashboardsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list dashboards o k response
func (o *ListDashboardsOK) Code() int {
	return 200
}

func (o *ListDashboardsOK) Error() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/dashboards/v1][%d] listDashboardsOK  %+v", 200, o.Payload)
}

func (o *ListDashboardsOK) String() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/dashboards/v1][%d] listDashboardsOK  %+v", 200, o.Payload)
}

func (o *ListDashboardsOK) GetPayload() *models.APIListDashboardsResponseV1 {
	return o.Payload
}

func (o *ListDashboardsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIListDashboardsResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDashboardsBadRequest creates a ListDashboardsBadRequest with default headers values
func NewListDashboardsBadRequest() *ListDashboardsBadRequest {
	return &ListDashboardsBadRequest{}
}

/*
ListDashboardsBadRequest describes a response with status code 400, with default header values.

Bad request for content operations
*/
type ListDashboardsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this list dashboards bad request response has a 2xx status code
func (o *ListDashboardsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list dashboards bad request response has a 3xx status code
func (o *ListDashboardsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list dashboards bad request response has a 4xx status code
func (o *ListDashboardsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list dashboards bad request response has a 5xx status code
func (o *ListDashboardsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list dashboards bad request response a status code equal to that given
func (o *ListDashboardsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list dashboards bad request response
func (o *ListDashboardsBadRequest) Code() int {
	return 400
}

func (o *ListDashboardsBadRequest) Error() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/dashboards/v1][%d] listDashboardsBadRequest  %+v", 400, o.Payload)
}

func (o *ListDashboardsBadRequest) String() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/dashboards/v1][%d] listDashboardsBadRequest  %+v", 400, o.Payload)
}

func (o *ListDashboardsBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ListDashboardsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDashboardsUnauthorized creates a ListDashboardsUnauthorized with default headers values
func NewListDashboardsUnauthorized() *ListDashboardsUnauthorized {
	return &ListDashboardsUnauthorized{}
}

/*
ListDashboardsUnauthorized describes a response with status code 401, with default header values.

Requestor is not authorized to access resource
*/
type ListDashboardsUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this list dashboards unauthorized response has a 2xx status code
func (o *ListDashboardsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list dashboards unauthorized response has a 3xx status code
func (o *ListDashboardsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list dashboards unauthorized response has a 4xx status code
func (o *ListDashboardsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list dashboards unauthorized response has a 5xx status code
func (o *ListDashboardsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list dashboards unauthorized response a status code equal to that given
func (o *ListDashboardsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list dashboards unauthorized response
func (o *ListDashboardsUnauthorized) Code() int {
	return 401
}

func (o *ListDashboardsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/dashboards/v1][%d] listDashboardsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListDashboardsUnauthorized) String() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/dashboards/v1][%d] listDashboardsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListDashboardsUnauthorized) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ListDashboardsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDashboardsForbidden creates a ListDashboardsForbidden with default headers values
func NewListDashboardsForbidden() *ListDashboardsForbidden {
	return &ListDashboardsForbidden{}
}

/*
ListDashboardsForbidden describes a response with status code 403, with default header values.

Content access is not allowed
*/
type ListDashboardsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this list dashboards forbidden response has a 2xx status code
func (o *ListDashboardsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list dashboards forbidden response has a 3xx status code
func (o *ListDashboardsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list dashboards forbidden response has a 4xx status code
func (o *ListDashboardsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list dashboards forbidden response has a 5xx status code
func (o *ListDashboardsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list dashboards forbidden response a status code equal to that given
func (o *ListDashboardsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list dashboards forbidden response
func (o *ListDashboardsForbidden) Code() int {
	return 403
}

func (o *ListDashboardsForbidden) Error() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/dashboards/v1][%d] listDashboardsForbidden  %+v", 403, o.Payload)
}

func (o *ListDashboardsForbidden) String() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/dashboards/v1][%d] listDashboardsForbidden  %+v", 403, o.Payload)
}

func (o *ListDashboardsForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ListDashboardsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDashboardsNotFound creates a ListDashboardsNotFound with default headers values
func NewListDashboardsNotFound() *ListDashboardsNotFound {
	return &ListDashboardsNotFound{}
}

/*
ListDashboardsNotFound describes a response with status code 404, with default header values.

Content resource does not exist
*/
type ListDashboardsNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this list dashboards not found response has a 2xx status code
func (o *ListDashboardsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list dashboards not found response has a 3xx status code
func (o *ListDashboardsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list dashboards not found response has a 4xx status code
func (o *ListDashboardsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list dashboards not found response has a 5xx status code
func (o *ListDashboardsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list dashboards not found response a status code equal to that given
func (o *ListDashboardsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list dashboards not found response
func (o *ListDashboardsNotFound) Code() int {
	return 404
}

func (o *ListDashboardsNotFound) Error() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/dashboards/v1][%d] listDashboardsNotFound  %+v", 404, o.Payload)
}

func (o *ListDashboardsNotFound) String() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/dashboards/v1][%d] listDashboardsNotFound  %+v", 404, o.Payload)
}

func (o *ListDashboardsNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ListDashboardsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDashboardsTooManyRequests creates a ListDashboardsTooManyRequests with default headers values
func NewListDashboardsTooManyRequests() *ListDashboardsTooManyRequests {
	return &ListDashboardsTooManyRequests{}
}

/*
ListDashboardsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ListDashboardsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this list dashboards too many requests response has a 2xx status code
func (o *ListDashboardsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list dashboards too many requests response has a 3xx status code
func (o *ListDashboardsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list dashboards too many requests response has a 4xx status code
func (o *ListDashboardsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list dashboards too many requests response has a 5xx status code
func (o *ListDashboardsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list dashboards too many requests response a status code equal to that given
func (o *ListDashboardsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list dashboards too many requests response
func (o *ListDashboardsTooManyRequests) Code() int {
	return 429
}

func (o *ListDashboardsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/dashboards/v1][%d] listDashboardsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListDashboardsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/dashboards/v1][%d] listDashboardsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListDashboardsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ListDashboardsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDashboardsInternalServerError creates a ListDashboardsInternalServerError with default headers values
func NewListDashboardsInternalServerError() *ListDashboardsInternalServerError {
	return &ListDashboardsInternalServerError{}
}

/*
ListDashboardsInternalServerError describes a response with status code 500, with default header values.

Unexpected error occurred
*/
type ListDashboardsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this list dashboards internal server error response has a 2xx status code
func (o *ListDashboardsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list dashboards internal server error response has a 3xx status code
func (o *ListDashboardsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list dashboards internal server error response has a 4xx status code
func (o *ListDashboardsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list dashboards internal server error response has a 5xx status code
func (o *ListDashboardsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list dashboards internal server error response a status code equal to that given
func (o *ListDashboardsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list dashboards internal server error response
func (o *ListDashboardsInternalServerError) Code() int {
	return 500
}

func (o *ListDashboardsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/dashboards/v1][%d] listDashboardsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListDashboardsInternalServerError) String() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/dashboards/v1][%d] listDashboardsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListDashboardsInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ListDashboardsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
