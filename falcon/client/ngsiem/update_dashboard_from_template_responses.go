// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// UpdateDashboardFromTemplateReader is a Reader for the UpdateDashboardFromTemplate structure.
type UpdateDashboardFromTemplateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDashboardFromTemplateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDashboardFromTemplateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateDashboardFromTemplateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateDashboardFromTemplateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateDashboardFromTemplateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateDashboardFromTemplateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateDashboardFromTemplateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateDashboardFromTemplateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /ngsiem-content/entities/dashboards-template/v1] UpdateDashboardFromTemplate", response, response.Code())
	}
}

// NewUpdateDashboardFromTemplateOK creates a UpdateDashboardFromTemplateOK with default headers values
func NewUpdateDashboardFromTemplateOK() *UpdateDashboardFromTemplateOK {
	return &UpdateDashboardFromTemplateOK{}
}

/*
UpdateDashboardFromTemplateOK describes a response with status code 200, with default header values.

UpdateDashboardFromTemplateOK update dashboard from template o k
*/
type UpdateDashboardFromTemplateOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIUpdateDashboardFromTemplateResponseV1
}

// IsSuccess returns true when this update dashboard from template o k response has a 2xx status code
func (o *UpdateDashboardFromTemplateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update dashboard from template o k response has a 3xx status code
func (o *UpdateDashboardFromTemplateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update dashboard from template o k response has a 4xx status code
func (o *UpdateDashboardFromTemplateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update dashboard from template o k response has a 5xx status code
func (o *UpdateDashboardFromTemplateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update dashboard from template o k response a status code equal to that given
func (o *UpdateDashboardFromTemplateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update dashboard from template o k response
func (o *UpdateDashboardFromTemplateOK) Code() int {
	return 200
}

func (o *UpdateDashboardFromTemplateOK) Error() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/dashboards-template/v1][%d] updateDashboardFromTemplateOK  %+v", 200, o.Payload)
}

func (o *UpdateDashboardFromTemplateOK) String() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/dashboards-template/v1][%d] updateDashboardFromTemplateOK  %+v", 200, o.Payload)
}

func (o *UpdateDashboardFromTemplateOK) GetPayload() *models.APIUpdateDashboardFromTemplateResponseV1 {
	return o.Payload
}

func (o *UpdateDashboardFromTemplateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIUpdateDashboardFromTemplateResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDashboardFromTemplateBadRequest creates a UpdateDashboardFromTemplateBadRequest with default headers values
func NewUpdateDashboardFromTemplateBadRequest() *UpdateDashboardFromTemplateBadRequest {
	return &UpdateDashboardFromTemplateBadRequest{}
}

/*
UpdateDashboardFromTemplateBadRequest describes a response with status code 400, with default header values.

Bad request for content operations
*/
type UpdateDashboardFromTemplateBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update dashboard from template bad request response has a 2xx status code
func (o *UpdateDashboardFromTemplateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update dashboard from template bad request response has a 3xx status code
func (o *UpdateDashboardFromTemplateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update dashboard from template bad request response has a 4xx status code
func (o *UpdateDashboardFromTemplateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update dashboard from template bad request response has a 5xx status code
func (o *UpdateDashboardFromTemplateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update dashboard from template bad request response a status code equal to that given
func (o *UpdateDashboardFromTemplateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update dashboard from template bad request response
func (o *UpdateDashboardFromTemplateBadRequest) Code() int {
	return 400
}

func (o *UpdateDashboardFromTemplateBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/dashboards-template/v1][%d] updateDashboardFromTemplateBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateDashboardFromTemplateBadRequest) String() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/dashboards-template/v1][%d] updateDashboardFromTemplateBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateDashboardFromTemplateBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateDashboardFromTemplateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDashboardFromTemplateUnauthorized creates a UpdateDashboardFromTemplateUnauthorized with default headers values
func NewUpdateDashboardFromTemplateUnauthorized() *UpdateDashboardFromTemplateUnauthorized {
	return &UpdateDashboardFromTemplateUnauthorized{}
}

/*
UpdateDashboardFromTemplateUnauthorized describes a response with status code 401, with default header values.

Requestor is not authorized to access resource
*/
type UpdateDashboardFromTemplateUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update dashboard from template unauthorized response has a 2xx status code
func (o *UpdateDashboardFromTemplateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update dashboard from template unauthorized response has a 3xx status code
func (o *UpdateDashboardFromTemplateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update dashboard from template unauthorized response has a 4xx status code
func (o *UpdateDashboardFromTemplateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update dashboard from template unauthorized response has a 5xx status code
func (o *UpdateDashboardFromTemplateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update dashboard from template unauthorized response a status code equal to that given
func (o *UpdateDashboardFromTemplateUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update dashboard from template unauthorized response
func (o *UpdateDashboardFromTemplateUnauthorized) Code() int {
	return 401
}

func (o *UpdateDashboardFromTemplateUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/dashboards-template/v1][%d] updateDashboardFromTemplateUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateDashboardFromTemplateUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/dashboards-template/v1][%d] updateDashboardFromTemplateUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateDashboardFromTemplateUnauthorized) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateDashboardFromTemplateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDashboardFromTemplateForbidden creates a UpdateDashboardFromTemplateForbidden with default headers values
func NewUpdateDashboardFromTemplateForbidden() *UpdateDashboardFromTemplateForbidden {
	return &UpdateDashboardFromTemplateForbidden{}
}

/*
UpdateDashboardFromTemplateForbidden describes a response with status code 403, with default header values.

Content access is not allowed
*/
type UpdateDashboardFromTemplateForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update dashboard from template forbidden response has a 2xx status code
func (o *UpdateDashboardFromTemplateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update dashboard from template forbidden response has a 3xx status code
func (o *UpdateDashboardFromTemplateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update dashboard from template forbidden response has a 4xx status code
func (o *UpdateDashboardFromTemplateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update dashboard from template forbidden response has a 5xx status code
func (o *UpdateDashboardFromTemplateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update dashboard from template forbidden response a status code equal to that given
func (o *UpdateDashboardFromTemplateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update dashboard from template forbidden response
func (o *UpdateDashboardFromTemplateForbidden) Code() int {
	return 403
}

func (o *UpdateDashboardFromTemplateForbidden) Error() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/dashboards-template/v1][%d] updateDashboardFromTemplateForbidden  %+v", 403, o.Payload)
}

func (o *UpdateDashboardFromTemplateForbidden) String() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/dashboards-template/v1][%d] updateDashboardFromTemplateForbidden  %+v", 403, o.Payload)
}

func (o *UpdateDashboardFromTemplateForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateDashboardFromTemplateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDashboardFromTemplateNotFound creates a UpdateDashboardFromTemplateNotFound with default headers values
func NewUpdateDashboardFromTemplateNotFound() *UpdateDashboardFromTemplateNotFound {
	return &UpdateDashboardFromTemplateNotFound{}
}

/*
UpdateDashboardFromTemplateNotFound describes a response with status code 404, with default header values.

Content resource does not exist
*/
type UpdateDashboardFromTemplateNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update dashboard from template not found response has a 2xx status code
func (o *UpdateDashboardFromTemplateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update dashboard from template not found response has a 3xx status code
func (o *UpdateDashboardFromTemplateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update dashboard from template not found response has a 4xx status code
func (o *UpdateDashboardFromTemplateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update dashboard from template not found response has a 5xx status code
func (o *UpdateDashboardFromTemplateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update dashboard from template not found response a status code equal to that given
func (o *UpdateDashboardFromTemplateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update dashboard from template not found response
func (o *UpdateDashboardFromTemplateNotFound) Code() int {
	return 404
}

func (o *UpdateDashboardFromTemplateNotFound) Error() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/dashboards-template/v1][%d] updateDashboardFromTemplateNotFound  %+v", 404, o.Payload)
}

func (o *UpdateDashboardFromTemplateNotFound) String() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/dashboards-template/v1][%d] updateDashboardFromTemplateNotFound  %+v", 404, o.Payload)
}

func (o *UpdateDashboardFromTemplateNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateDashboardFromTemplateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDashboardFromTemplateTooManyRequests creates a UpdateDashboardFromTemplateTooManyRequests with default headers values
func NewUpdateDashboardFromTemplateTooManyRequests() *UpdateDashboardFromTemplateTooManyRequests {
	return &UpdateDashboardFromTemplateTooManyRequests{}
}

/*
UpdateDashboardFromTemplateTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type UpdateDashboardFromTemplateTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this update dashboard from template too many requests response has a 2xx status code
func (o *UpdateDashboardFromTemplateTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update dashboard from template too many requests response has a 3xx status code
func (o *UpdateDashboardFromTemplateTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update dashboard from template too many requests response has a 4xx status code
func (o *UpdateDashboardFromTemplateTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update dashboard from template too many requests response has a 5xx status code
func (o *UpdateDashboardFromTemplateTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update dashboard from template too many requests response a status code equal to that given
func (o *UpdateDashboardFromTemplateTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update dashboard from template too many requests response
func (o *UpdateDashboardFromTemplateTooManyRequests) Code() int {
	return 429
}

func (o *UpdateDashboardFromTemplateTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/dashboards-template/v1][%d] updateDashboardFromTemplateTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateDashboardFromTemplateTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/dashboards-template/v1][%d] updateDashboardFromTemplateTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateDashboardFromTemplateTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpdateDashboardFromTemplateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDashboardFromTemplateInternalServerError creates a UpdateDashboardFromTemplateInternalServerError with default headers values
func NewUpdateDashboardFromTemplateInternalServerError() *UpdateDashboardFromTemplateInternalServerError {
	return &UpdateDashboardFromTemplateInternalServerError{}
}

/*
UpdateDashboardFromTemplateInternalServerError describes a response with status code 500, with default header values.

Unexpected error occurred
*/
type UpdateDashboardFromTemplateInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this update dashboard from template internal server error response has a 2xx status code
func (o *UpdateDashboardFromTemplateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update dashboard from template internal server error response has a 3xx status code
func (o *UpdateDashboardFromTemplateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update dashboard from template internal server error response has a 4xx status code
func (o *UpdateDashboardFromTemplateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update dashboard from template internal server error response has a 5xx status code
func (o *UpdateDashboardFromTemplateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update dashboard from template internal server error response a status code equal to that given
func (o *UpdateDashboardFromTemplateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update dashboard from template internal server error response
func (o *UpdateDashboardFromTemplateInternalServerError) Code() int {
	return 500
}

func (o *UpdateDashboardFromTemplateInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/dashboards-template/v1][%d] updateDashboardFromTemplateInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateDashboardFromTemplateInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /ngsiem-content/entities/dashboards-template/v1][%d] updateDashboardFromTemplateInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateDashboardFromTemplateInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *UpdateDashboardFromTemplateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
