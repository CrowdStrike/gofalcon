// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetDashboardTemplateReader is a Reader for the GetDashboardTemplate structure.
type GetDashboardTemplateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDashboardTemplateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDashboardTemplateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDashboardTemplateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetDashboardTemplateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDashboardTemplateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDashboardTemplateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetDashboardTemplateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDashboardTemplateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /ngsiem-content/entities/dashboards-template/v1] GetDashboardTemplate", response, response.Code())
	}
}

// NewGetDashboardTemplateOK creates a GetDashboardTemplateOK with default headers values
func NewGetDashboardTemplateOK() *GetDashboardTemplateOK {
	return &GetDashboardTemplateOK{}
}

/*
GetDashboardTemplateOK describes a response with status code 200, with default header values.

GetDashboardTemplateOK get dashboard template o k
*/
type GetDashboardTemplateOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIGetDashboardTemplateResponseV1
}

// IsSuccess returns true when this get dashboard template o k response has a 2xx status code
func (o *GetDashboardTemplateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get dashboard template o k response has a 3xx status code
func (o *GetDashboardTemplateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get dashboard template o k response has a 4xx status code
func (o *GetDashboardTemplateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get dashboard template o k response has a 5xx status code
func (o *GetDashboardTemplateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get dashboard template o k response a status code equal to that given
func (o *GetDashboardTemplateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get dashboard template o k response
func (o *GetDashboardTemplateOK) Code() int {
	return 200
}

func (o *GetDashboardTemplateOK) Error() string {
	return fmt.Sprintf("[GET /ngsiem-content/entities/dashboards-template/v1][%d] getDashboardTemplateOK  %+v", 200, o.Payload)
}

func (o *GetDashboardTemplateOK) String() string {
	return fmt.Sprintf("[GET /ngsiem-content/entities/dashboards-template/v1][%d] getDashboardTemplateOK  %+v", 200, o.Payload)
}

func (o *GetDashboardTemplateOK) GetPayload() *models.APIGetDashboardTemplateResponseV1 {
	return o.Payload
}

func (o *GetDashboardTemplateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIGetDashboardTemplateResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDashboardTemplateBadRequest creates a GetDashboardTemplateBadRequest with default headers values
func NewGetDashboardTemplateBadRequest() *GetDashboardTemplateBadRequest {
	return &GetDashboardTemplateBadRequest{}
}

/*
GetDashboardTemplateBadRequest describes a response with status code 400, with default header values.

Bad request for content operations
*/
type GetDashboardTemplateBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get dashboard template bad request response has a 2xx status code
func (o *GetDashboardTemplateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get dashboard template bad request response has a 3xx status code
func (o *GetDashboardTemplateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get dashboard template bad request response has a 4xx status code
func (o *GetDashboardTemplateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get dashboard template bad request response has a 5xx status code
func (o *GetDashboardTemplateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get dashboard template bad request response a status code equal to that given
func (o *GetDashboardTemplateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get dashboard template bad request response
func (o *GetDashboardTemplateBadRequest) Code() int {
	return 400
}

func (o *GetDashboardTemplateBadRequest) Error() string {
	return fmt.Sprintf("[GET /ngsiem-content/entities/dashboards-template/v1][%d] getDashboardTemplateBadRequest  %+v", 400, o.Payload)
}

func (o *GetDashboardTemplateBadRequest) String() string {
	return fmt.Sprintf("[GET /ngsiem-content/entities/dashboards-template/v1][%d] getDashboardTemplateBadRequest  %+v", 400, o.Payload)
}

func (o *GetDashboardTemplateBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetDashboardTemplateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDashboardTemplateUnauthorized creates a GetDashboardTemplateUnauthorized with default headers values
func NewGetDashboardTemplateUnauthorized() *GetDashboardTemplateUnauthorized {
	return &GetDashboardTemplateUnauthorized{}
}

/*
GetDashboardTemplateUnauthorized describes a response with status code 401, with default header values.

Requestor is not authorized to access resource
*/
type GetDashboardTemplateUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get dashboard template unauthorized response has a 2xx status code
func (o *GetDashboardTemplateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get dashboard template unauthorized response has a 3xx status code
func (o *GetDashboardTemplateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get dashboard template unauthorized response has a 4xx status code
func (o *GetDashboardTemplateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get dashboard template unauthorized response has a 5xx status code
func (o *GetDashboardTemplateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get dashboard template unauthorized response a status code equal to that given
func (o *GetDashboardTemplateUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get dashboard template unauthorized response
func (o *GetDashboardTemplateUnauthorized) Code() int {
	return 401
}

func (o *GetDashboardTemplateUnauthorized) Error() string {
	return fmt.Sprintf("[GET /ngsiem-content/entities/dashboards-template/v1][%d] getDashboardTemplateUnauthorized  %+v", 401, o.Payload)
}

func (o *GetDashboardTemplateUnauthorized) String() string {
	return fmt.Sprintf("[GET /ngsiem-content/entities/dashboards-template/v1][%d] getDashboardTemplateUnauthorized  %+v", 401, o.Payload)
}

func (o *GetDashboardTemplateUnauthorized) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetDashboardTemplateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDashboardTemplateForbidden creates a GetDashboardTemplateForbidden with default headers values
func NewGetDashboardTemplateForbidden() *GetDashboardTemplateForbidden {
	return &GetDashboardTemplateForbidden{}
}

/*
GetDashboardTemplateForbidden describes a response with status code 403, with default header values.

Content access is not allowed
*/
type GetDashboardTemplateForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get dashboard template forbidden response has a 2xx status code
func (o *GetDashboardTemplateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get dashboard template forbidden response has a 3xx status code
func (o *GetDashboardTemplateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get dashboard template forbidden response has a 4xx status code
func (o *GetDashboardTemplateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get dashboard template forbidden response has a 5xx status code
func (o *GetDashboardTemplateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get dashboard template forbidden response a status code equal to that given
func (o *GetDashboardTemplateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get dashboard template forbidden response
func (o *GetDashboardTemplateForbidden) Code() int {
	return 403
}

func (o *GetDashboardTemplateForbidden) Error() string {
	return fmt.Sprintf("[GET /ngsiem-content/entities/dashboards-template/v1][%d] getDashboardTemplateForbidden  %+v", 403, o.Payload)
}

func (o *GetDashboardTemplateForbidden) String() string {
	return fmt.Sprintf("[GET /ngsiem-content/entities/dashboards-template/v1][%d] getDashboardTemplateForbidden  %+v", 403, o.Payload)
}

func (o *GetDashboardTemplateForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetDashboardTemplateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDashboardTemplateNotFound creates a GetDashboardTemplateNotFound with default headers values
func NewGetDashboardTemplateNotFound() *GetDashboardTemplateNotFound {
	return &GetDashboardTemplateNotFound{}
}

/*
GetDashboardTemplateNotFound describes a response with status code 404, with default header values.

Content resource does not exist
*/
type GetDashboardTemplateNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get dashboard template not found response has a 2xx status code
func (o *GetDashboardTemplateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get dashboard template not found response has a 3xx status code
func (o *GetDashboardTemplateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get dashboard template not found response has a 4xx status code
func (o *GetDashboardTemplateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get dashboard template not found response has a 5xx status code
func (o *GetDashboardTemplateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get dashboard template not found response a status code equal to that given
func (o *GetDashboardTemplateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get dashboard template not found response
func (o *GetDashboardTemplateNotFound) Code() int {
	return 404
}

func (o *GetDashboardTemplateNotFound) Error() string {
	return fmt.Sprintf("[GET /ngsiem-content/entities/dashboards-template/v1][%d] getDashboardTemplateNotFound  %+v", 404, o.Payload)
}

func (o *GetDashboardTemplateNotFound) String() string {
	return fmt.Sprintf("[GET /ngsiem-content/entities/dashboards-template/v1][%d] getDashboardTemplateNotFound  %+v", 404, o.Payload)
}

func (o *GetDashboardTemplateNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetDashboardTemplateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDashboardTemplateTooManyRequests creates a GetDashboardTemplateTooManyRequests with default headers values
func NewGetDashboardTemplateTooManyRequests() *GetDashboardTemplateTooManyRequests {
	return &GetDashboardTemplateTooManyRequests{}
}

/*
GetDashboardTemplateTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetDashboardTemplateTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get dashboard template too many requests response has a 2xx status code
func (o *GetDashboardTemplateTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get dashboard template too many requests response has a 3xx status code
func (o *GetDashboardTemplateTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get dashboard template too many requests response has a 4xx status code
func (o *GetDashboardTemplateTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get dashboard template too many requests response has a 5xx status code
func (o *GetDashboardTemplateTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get dashboard template too many requests response a status code equal to that given
func (o *GetDashboardTemplateTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get dashboard template too many requests response
func (o *GetDashboardTemplateTooManyRequests) Code() int {
	return 429
}

func (o *GetDashboardTemplateTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /ngsiem-content/entities/dashboards-template/v1][%d] getDashboardTemplateTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetDashboardTemplateTooManyRequests) String() string {
	return fmt.Sprintf("[GET /ngsiem-content/entities/dashboards-template/v1][%d] getDashboardTemplateTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetDashboardTemplateTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetDashboardTemplateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDashboardTemplateInternalServerError creates a GetDashboardTemplateInternalServerError with default headers values
func NewGetDashboardTemplateInternalServerError() *GetDashboardTemplateInternalServerError {
	return &GetDashboardTemplateInternalServerError{}
}

/*
GetDashboardTemplateInternalServerError describes a response with status code 500, with default header values.

Unexpected error occurred
*/
type GetDashboardTemplateInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get dashboard template internal server error response has a 2xx status code
func (o *GetDashboardTemplateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get dashboard template internal server error response has a 3xx status code
func (o *GetDashboardTemplateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get dashboard template internal server error response has a 4xx status code
func (o *GetDashboardTemplateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get dashboard template internal server error response has a 5xx status code
func (o *GetDashboardTemplateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get dashboard template internal server error response a status code equal to that given
func (o *GetDashboardTemplateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get dashboard template internal server error response
func (o *GetDashboardTemplateInternalServerError) Code() int {
	return 500
}

func (o *GetDashboardTemplateInternalServerError) Error() string {
	return fmt.Sprintf("[GET /ngsiem-content/entities/dashboards-template/v1][%d] getDashboardTemplateInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDashboardTemplateInternalServerError) String() string {
	return fmt.Sprintf("[GET /ngsiem-content/entities/dashboards-template/v1][%d] getDashboardTemplateInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDashboardTemplateInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetDashboardTemplateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
