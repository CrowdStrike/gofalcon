// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ListSavedQueriesReader is a Reader for the ListSavedQueries structure.
type ListSavedQueriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListSavedQueriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListSavedQueriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListSavedQueriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListSavedQueriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListSavedQueriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListSavedQueriesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListSavedQueriesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListSavedQueriesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /ngsiem-content/queries/savedqueries/v1] ListSavedQueries", response, response.Code())
	}
}

// NewListSavedQueriesOK creates a ListSavedQueriesOK with default headers values
func NewListSavedQueriesOK() *ListSavedQueriesOK {
	return &ListSavedQueriesOK{}
}

/*
ListSavedQueriesOK describes a response with status code 200, with default header values.

ListSavedQueriesOK list saved queries o k
*/
type ListSavedQueriesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIListSavedQueriesResponseV1
}

// IsSuccess returns true when this list saved queries o k response has a 2xx status code
func (o *ListSavedQueriesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list saved queries o k response has a 3xx status code
func (o *ListSavedQueriesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list saved queries o k response has a 4xx status code
func (o *ListSavedQueriesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list saved queries o k response has a 5xx status code
func (o *ListSavedQueriesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list saved queries o k response a status code equal to that given
func (o *ListSavedQueriesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list saved queries o k response
func (o *ListSavedQueriesOK) Code() int {
	return 200
}

func (o *ListSavedQueriesOK) Error() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/savedqueries/v1][%d] listSavedQueriesOK  %+v", 200, o.Payload)
}

func (o *ListSavedQueriesOK) String() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/savedqueries/v1][%d] listSavedQueriesOK  %+v", 200, o.Payload)
}

func (o *ListSavedQueriesOK) GetPayload() *models.APIListSavedQueriesResponseV1 {
	return o.Payload
}

func (o *ListSavedQueriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIListSavedQueriesResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSavedQueriesBadRequest creates a ListSavedQueriesBadRequest with default headers values
func NewListSavedQueriesBadRequest() *ListSavedQueriesBadRequest {
	return &ListSavedQueriesBadRequest{}
}

/*
ListSavedQueriesBadRequest describes a response with status code 400, with default header values.

Bad request for content operations
*/
type ListSavedQueriesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this list saved queries bad request response has a 2xx status code
func (o *ListSavedQueriesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list saved queries bad request response has a 3xx status code
func (o *ListSavedQueriesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list saved queries bad request response has a 4xx status code
func (o *ListSavedQueriesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list saved queries bad request response has a 5xx status code
func (o *ListSavedQueriesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list saved queries bad request response a status code equal to that given
func (o *ListSavedQueriesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list saved queries bad request response
func (o *ListSavedQueriesBadRequest) Code() int {
	return 400
}

func (o *ListSavedQueriesBadRequest) Error() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/savedqueries/v1][%d] listSavedQueriesBadRequest  %+v", 400, o.Payload)
}

func (o *ListSavedQueriesBadRequest) String() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/savedqueries/v1][%d] listSavedQueriesBadRequest  %+v", 400, o.Payload)
}

func (o *ListSavedQueriesBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ListSavedQueriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSavedQueriesUnauthorized creates a ListSavedQueriesUnauthorized with default headers values
func NewListSavedQueriesUnauthorized() *ListSavedQueriesUnauthorized {
	return &ListSavedQueriesUnauthorized{}
}

/*
ListSavedQueriesUnauthorized describes a response with status code 401, with default header values.

Requestor is not authorized to access resource
*/
type ListSavedQueriesUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this list saved queries unauthorized response has a 2xx status code
func (o *ListSavedQueriesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list saved queries unauthorized response has a 3xx status code
func (o *ListSavedQueriesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list saved queries unauthorized response has a 4xx status code
func (o *ListSavedQueriesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list saved queries unauthorized response has a 5xx status code
func (o *ListSavedQueriesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list saved queries unauthorized response a status code equal to that given
func (o *ListSavedQueriesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list saved queries unauthorized response
func (o *ListSavedQueriesUnauthorized) Code() int {
	return 401
}

func (o *ListSavedQueriesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/savedqueries/v1][%d] listSavedQueriesUnauthorized  %+v", 401, o.Payload)
}

func (o *ListSavedQueriesUnauthorized) String() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/savedqueries/v1][%d] listSavedQueriesUnauthorized  %+v", 401, o.Payload)
}

func (o *ListSavedQueriesUnauthorized) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ListSavedQueriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSavedQueriesForbidden creates a ListSavedQueriesForbidden with default headers values
func NewListSavedQueriesForbidden() *ListSavedQueriesForbidden {
	return &ListSavedQueriesForbidden{}
}

/*
ListSavedQueriesForbidden describes a response with status code 403, with default header values.

Content access is not allowed
*/
type ListSavedQueriesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this list saved queries forbidden response has a 2xx status code
func (o *ListSavedQueriesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list saved queries forbidden response has a 3xx status code
func (o *ListSavedQueriesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list saved queries forbidden response has a 4xx status code
func (o *ListSavedQueriesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list saved queries forbidden response has a 5xx status code
func (o *ListSavedQueriesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list saved queries forbidden response a status code equal to that given
func (o *ListSavedQueriesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list saved queries forbidden response
func (o *ListSavedQueriesForbidden) Code() int {
	return 403
}

func (o *ListSavedQueriesForbidden) Error() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/savedqueries/v1][%d] listSavedQueriesForbidden  %+v", 403, o.Payload)
}

func (o *ListSavedQueriesForbidden) String() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/savedqueries/v1][%d] listSavedQueriesForbidden  %+v", 403, o.Payload)
}

func (o *ListSavedQueriesForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ListSavedQueriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSavedQueriesNotFound creates a ListSavedQueriesNotFound with default headers values
func NewListSavedQueriesNotFound() *ListSavedQueriesNotFound {
	return &ListSavedQueriesNotFound{}
}

/*
ListSavedQueriesNotFound describes a response with status code 404, with default header values.

Content resource does not exist
*/
type ListSavedQueriesNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this list saved queries not found response has a 2xx status code
func (o *ListSavedQueriesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list saved queries not found response has a 3xx status code
func (o *ListSavedQueriesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list saved queries not found response has a 4xx status code
func (o *ListSavedQueriesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list saved queries not found response has a 5xx status code
func (o *ListSavedQueriesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list saved queries not found response a status code equal to that given
func (o *ListSavedQueriesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list saved queries not found response
func (o *ListSavedQueriesNotFound) Code() int {
	return 404
}

func (o *ListSavedQueriesNotFound) Error() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/savedqueries/v1][%d] listSavedQueriesNotFound  %+v", 404, o.Payload)
}

func (o *ListSavedQueriesNotFound) String() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/savedqueries/v1][%d] listSavedQueriesNotFound  %+v", 404, o.Payload)
}

func (o *ListSavedQueriesNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ListSavedQueriesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSavedQueriesTooManyRequests creates a ListSavedQueriesTooManyRequests with default headers values
func NewListSavedQueriesTooManyRequests() *ListSavedQueriesTooManyRequests {
	return &ListSavedQueriesTooManyRequests{}
}

/*
ListSavedQueriesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ListSavedQueriesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this list saved queries too many requests response has a 2xx status code
func (o *ListSavedQueriesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list saved queries too many requests response has a 3xx status code
func (o *ListSavedQueriesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list saved queries too many requests response has a 4xx status code
func (o *ListSavedQueriesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list saved queries too many requests response has a 5xx status code
func (o *ListSavedQueriesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list saved queries too many requests response a status code equal to that given
func (o *ListSavedQueriesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list saved queries too many requests response
func (o *ListSavedQueriesTooManyRequests) Code() int {
	return 429
}

func (o *ListSavedQueriesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/savedqueries/v1][%d] listSavedQueriesTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListSavedQueriesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/savedqueries/v1][%d] listSavedQueriesTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListSavedQueriesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ListSavedQueriesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSavedQueriesInternalServerError creates a ListSavedQueriesInternalServerError with default headers values
func NewListSavedQueriesInternalServerError() *ListSavedQueriesInternalServerError {
	return &ListSavedQueriesInternalServerError{}
}

/*
ListSavedQueriesInternalServerError describes a response with status code 500, with default header values.

Unexpected error occurred
*/
type ListSavedQueriesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this list saved queries internal server error response has a 2xx status code
func (o *ListSavedQueriesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list saved queries internal server error response has a 3xx status code
func (o *ListSavedQueriesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list saved queries internal server error response has a 4xx status code
func (o *ListSavedQueriesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list saved queries internal server error response has a 5xx status code
func (o *ListSavedQueriesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list saved queries internal server error response a status code equal to that given
func (o *ListSavedQueriesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list saved queries internal server error response
func (o *ListSavedQueriesInternalServerError) Code() int {
	return 500
}

func (o *ListSavedQueriesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/savedqueries/v1][%d] listSavedQueriesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListSavedQueriesInternalServerError) String() string {
	return fmt.Sprintf("[GET /ngsiem-content/queries/savedqueries/v1][%d] listSavedQueriesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListSavedQueriesInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ListSavedQueriesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
