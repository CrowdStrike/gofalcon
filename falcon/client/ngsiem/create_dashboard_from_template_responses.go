// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CreateDashboardFromTemplateReader is a Reader for the CreateDashboardFromTemplate structure.
type CreateDashboardFromTemplateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateDashboardFromTemplateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateDashboardFromTemplateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateDashboardFromTemplateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateDashboardFromTemplateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateDashboardFromTemplateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateDashboardFromTemplateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateDashboardFromTemplateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateDashboardFromTemplateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /ngsiem-content/entities/dashboards-template/v1] CreateDashboardFromTemplate", response, response.Code())
	}
}

// NewCreateDashboardFromTemplateOK creates a CreateDashboardFromTemplateOK with default headers values
func NewCreateDashboardFromTemplateOK() *CreateDashboardFromTemplateOK {
	return &CreateDashboardFromTemplateOK{}
}

/*
CreateDashboardFromTemplateOK describes a response with status code 200, with default header values.

CreateDashboardFromTemplateOK create dashboard from template o k
*/
type CreateDashboardFromTemplateOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APICreateDashboardFromTemplateResponseV1
}

// IsSuccess returns true when this create dashboard from template o k response has a 2xx status code
func (o *CreateDashboardFromTemplateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create dashboard from template o k response has a 3xx status code
func (o *CreateDashboardFromTemplateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create dashboard from template o k response has a 4xx status code
func (o *CreateDashboardFromTemplateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create dashboard from template o k response has a 5xx status code
func (o *CreateDashboardFromTemplateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create dashboard from template o k response a status code equal to that given
func (o *CreateDashboardFromTemplateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create dashboard from template o k response
func (o *CreateDashboardFromTemplateOK) Code() int {
	return 200
}

func (o *CreateDashboardFromTemplateOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/dashboards-template/v1][%d] createDashboardFromTemplateOK %s", 200, payload)
}

func (o *CreateDashboardFromTemplateOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/dashboards-template/v1][%d] createDashboardFromTemplateOK %s", 200, payload)
}

func (o *CreateDashboardFromTemplateOK) GetPayload() *models.APICreateDashboardFromTemplateResponseV1 {
	return o.Payload
}

func (o *CreateDashboardFromTemplateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APICreateDashboardFromTemplateResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDashboardFromTemplateBadRequest creates a CreateDashboardFromTemplateBadRequest with default headers values
func NewCreateDashboardFromTemplateBadRequest() *CreateDashboardFromTemplateBadRequest {
	return &CreateDashboardFromTemplateBadRequest{}
}

/*
CreateDashboardFromTemplateBadRequest describes a response with status code 400, with default header values.

Bad request for content operations
*/
type CreateDashboardFromTemplateBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create dashboard from template bad request response has a 2xx status code
func (o *CreateDashboardFromTemplateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create dashboard from template bad request response has a 3xx status code
func (o *CreateDashboardFromTemplateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create dashboard from template bad request response has a 4xx status code
func (o *CreateDashboardFromTemplateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create dashboard from template bad request response has a 5xx status code
func (o *CreateDashboardFromTemplateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create dashboard from template bad request response a status code equal to that given
func (o *CreateDashboardFromTemplateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create dashboard from template bad request response
func (o *CreateDashboardFromTemplateBadRequest) Code() int {
	return 400
}

func (o *CreateDashboardFromTemplateBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/dashboards-template/v1][%d] createDashboardFromTemplateBadRequest %s", 400, payload)
}

func (o *CreateDashboardFromTemplateBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/dashboards-template/v1][%d] createDashboardFromTemplateBadRequest %s", 400, payload)
}

func (o *CreateDashboardFromTemplateBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateDashboardFromTemplateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDashboardFromTemplateUnauthorized creates a CreateDashboardFromTemplateUnauthorized with default headers values
func NewCreateDashboardFromTemplateUnauthorized() *CreateDashboardFromTemplateUnauthorized {
	return &CreateDashboardFromTemplateUnauthorized{}
}

/*
CreateDashboardFromTemplateUnauthorized describes a response with status code 401, with default header values.

Requestor is not authorized to access resource
*/
type CreateDashboardFromTemplateUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create dashboard from template unauthorized response has a 2xx status code
func (o *CreateDashboardFromTemplateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create dashboard from template unauthorized response has a 3xx status code
func (o *CreateDashboardFromTemplateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create dashboard from template unauthorized response has a 4xx status code
func (o *CreateDashboardFromTemplateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create dashboard from template unauthorized response has a 5xx status code
func (o *CreateDashboardFromTemplateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create dashboard from template unauthorized response a status code equal to that given
func (o *CreateDashboardFromTemplateUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create dashboard from template unauthorized response
func (o *CreateDashboardFromTemplateUnauthorized) Code() int {
	return 401
}

func (o *CreateDashboardFromTemplateUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/dashboards-template/v1][%d] createDashboardFromTemplateUnauthorized %s", 401, payload)
}

func (o *CreateDashboardFromTemplateUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/dashboards-template/v1][%d] createDashboardFromTemplateUnauthorized %s", 401, payload)
}

func (o *CreateDashboardFromTemplateUnauthorized) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateDashboardFromTemplateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDashboardFromTemplateForbidden creates a CreateDashboardFromTemplateForbidden with default headers values
func NewCreateDashboardFromTemplateForbidden() *CreateDashboardFromTemplateForbidden {
	return &CreateDashboardFromTemplateForbidden{}
}

/*
CreateDashboardFromTemplateForbidden describes a response with status code 403, with default header values.

Content access is not allowed
*/
type CreateDashboardFromTemplateForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create dashboard from template forbidden response has a 2xx status code
func (o *CreateDashboardFromTemplateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create dashboard from template forbidden response has a 3xx status code
func (o *CreateDashboardFromTemplateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create dashboard from template forbidden response has a 4xx status code
func (o *CreateDashboardFromTemplateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create dashboard from template forbidden response has a 5xx status code
func (o *CreateDashboardFromTemplateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create dashboard from template forbidden response a status code equal to that given
func (o *CreateDashboardFromTemplateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create dashboard from template forbidden response
func (o *CreateDashboardFromTemplateForbidden) Code() int {
	return 403
}

func (o *CreateDashboardFromTemplateForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/dashboards-template/v1][%d] createDashboardFromTemplateForbidden %s", 403, payload)
}

func (o *CreateDashboardFromTemplateForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/dashboards-template/v1][%d] createDashboardFromTemplateForbidden %s", 403, payload)
}

func (o *CreateDashboardFromTemplateForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateDashboardFromTemplateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDashboardFromTemplateNotFound creates a CreateDashboardFromTemplateNotFound with default headers values
func NewCreateDashboardFromTemplateNotFound() *CreateDashboardFromTemplateNotFound {
	return &CreateDashboardFromTemplateNotFound{}
}

/*
CreateDashboardFromTemplateNotFound describes a response with status code 404, with default header values.

Content resource does not exist
*/
type CreateDashboardFromTemplateNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create dashboard from template not found response has a 2xx status code
func (o *CreateDashboardFromTemplateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create dashboard from template not found response has a 3xx status code
func (o *CreateDashboardFromTemplateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create dashboard from template not found response has a 4xx status code
func (o *CreateDashboardFromTemplateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create dashboard from template not found response has a 5xx status code
func (o *CreateDashboardFromTemplateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create dashboard from template not found response a status code equal to that given
func (o *CreateDashboardFromTemplateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create dashboard from template not found response
func (o *CreateDashboardFromTemplateNotFound) Code() int {
	return 404
}

func (o *CreateDashboardFromTemplateNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/dashboards-template/v1][%d] createDashboardFromTemplateNotFound %s", 404, payload)
}

func (o *CreateDashboardFromTemplateNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/dashboards-template/v1][%d] createDashboardFromTemplateNotFound %s", 404, payload)
}

func (o *CreateDashboardFromTemplateNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateDashboardFromTemplateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDashboardFromTemplateTooManyRequests creates a CreateDashboardFromTemplateTooManyRequests with default headers values
func NewCreateDashboardFromTemplateTooManyRequests() *CreateDashboardFromTemplateTooManyRequests {
	return &CreateDashboardFromTemplateTooManyRequests{}
}

/*
CreateDashboardFromTemplateTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CreateDashboardFromTemplateTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this create dashboard from template too many requests response has a 2xx status code
func (o *CreateDashboardFromTemplateTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create dashboard from template too many requests response has a 3xx status code
func (o *CreateDashboardFromTemplateTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create dashboard from template too many requests response has a 4xx status code
func (o *CreateDashboardFromTemplateTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create dashboard from template too many requests response has a 5xx status code
func (o *CreateDashboardFromTemplateTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create dashboard from template too many requests response a status code equal to that given
func (o *CreateDashboardFromTemplateTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create dashboard from template too many requests response
func (o *CreateDashboardFromTemplateTooManyRequests) Code() int {
	return 429
}

func (o *CreateDashboardFromTemplateTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/dashboards-template/v1][%d] createDashboardFromTemplateTooManyRequests %s", 429, payload)
}

func (o *CreateDashboardFromTemplateTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/dashboards-template/v1][%d] createDashboardFromTemplateTooManyRequests %s", 429, payload)
}

func (o *CreateDashboardFromTemplateTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateDashboardFromTemplateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDashboardFromTemplateInternalServerError creates a CreateDashboardFromTemplateInternalServerError with default headers values
func NewCreateDashboardFromTemplateInternalServerError() *CreateDashboardFromTemplateInternalServerError {
	return &CreateDashboardFromTemplateInternalServerError{}
}

/*
CreateDashboardFromTemplateInternalServerError describes a response with status code 500, with default header values.

Unexpected error occurred
*/
type CreateDashboardFromTemplateInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create dashboard from template internal server error response has a 2xx status code
func (o *CreateDashboardFromTemplateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create dashboard from template internal server error response has a 3xx status code
func (o *CreateDashboardFromTemplateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create dashboard from template internal server error response has a 4xx status code
func (o *CreateDashboardFromTemplateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create dashboard from template internal server error response has a 5xx status code
func (o *CreateDashboardFromTemplateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create dashboard from template internal server error response a status code equal to that given
func (o *CreateDashboardFromTemplateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create dashboard from template internal server error response
func (o *CreateDashboardFromTemplateInternalServerError) Code() int {
	return 500
}

func (o *CreateDashboardFromTemplateInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/dashboards-template/v1][%d] createDashboardFromTemplateInternalServerError %s", 500, payload)
}

func (o *CreateDashboardFromTemplateInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ngsiem-content/entities/dashboards-template/v1][%d] createDashboardFromTemplateInternalServerError %s", 500, payload)
}

func (o *CreateDashboardFromTemplateInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateDashboardFromTemplateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
