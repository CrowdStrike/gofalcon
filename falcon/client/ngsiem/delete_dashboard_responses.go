// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// DeleteDashboardReader is a Reader for the DeleteDashboard structure.
type DeleteDashboardReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteDashboardReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteDashboardOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteDashboardBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteDashboardUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteDashboardForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteDashboardNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteDashboardTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteDashboardInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /ngsiem-content/entities/dashboards/v1] DeleteDashboard", response, response.Code())
	}
}

// NewDeleteDashboardOK creates a DeleteDashboardOK with default headers values
func NewDeleteDashboardOK() *DeleteDashboardOK {
	return &DeleteDashboardOK{}
}

/*
DeleteDashboardOK describes a response with status code 200, with default header values.

DeleteDashboardOK delete dashboard o k
*/
type DeleteDashboardOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIDeleteDashboardResponseV1
}

// IsSuccess returns true when this delete dashboard o k response has a 2xx status code
func (o *DeleteDashboardOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete dashboard o k response has a 3xx status code
func (o *DeleteDashboardOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete dashboard o k response has a 4xx status code
func (o *DeleteDashboardOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete dashboard o k response has a 5xx status code
func (o *DeleteDashboardOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete dashboard o k response a status code equal to that given
func (o *DeleteDashboardOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete dashboard o k response
func (o *DeleteDashboardOK) Code() int {
	return 200
}

func (o *DeleteDashboardOK) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/dashboards/v1][%d] deleteDashboardOK  %+v", 200, o.Payload)
}

func (o *DeleteDashboardOK) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/dashboards/v1][%d] deleteDashboardOK  %+v", 200, o.Payload)
}

func (o *DeleteDashboardOK) GetPayload() *models.APIDeleteDashboardResponseV1 {
	return o.Payload
}

func (o *DeleteDashboardOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIDeleteDashboardResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDashboardBadRequest creates a DeleteDashboardBadRequest with default headers values
func NewDeleteDashboardBadRequest() *DeleteDashboardBadRequest {
	return &DeleteDashboardBadRequest{}
}

/*
DeleteDashboardBadRequest describes a response with status code 400, with default header values.

Bad request for content operations
*/
type DeleteDashboardBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this delete dashboard bad request response has a 2xx status code
func (o *DeleteDashboardBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete dashboard bad request response has a 3xx status code
func (o *DeleteDashboardBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete dashboard bad request response has a 4xx status code
func (o *DeleteDashboardBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete dashboard bad request response has a 5xx status code
func (o *DeleteDashboardBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete dashboard bad request response a status code equal to that given
func (o *DeleteDashboardBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete dashboard bad request response
func (o *DeleteDashboardBadRequest) Code() int {
	return 400
}

func (o *DeleteDashboardBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/dashboards/v1][%d] deleteDashboardBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteDashboardBadRequest) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/dashboards/v1][%d] deleteDashboardBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteDashboardBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DeleteDashboardBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDashboardUnauthorized creates a DeleteDashboardUnauthorized with default headers values
func NewDeleteDashboardUnauthorized() *DeleteDashboardUnauthorized {
	return &DeleteDashboardUnauthorized{}
}

/*
DeleteDashboardUnauthorized describes a response with status code 401, with default header values.

Requestor is not authorized to access resource
*/
type DeleteDashboardUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this delete dashboard unauthorized response has a 2xx status code
func (o *DeleteDashboardUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete dashboard unauthorized response has a 3xx status code
func (o *DeleteDashboardUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete dashboard unauthorized response has a 4xx status code
func (o *DeleteDashboardUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete dashboard unauthorized response has a 5xx status code
func (o *DeleteDashboardUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete dashboard unauthorized response a status code equal to that given
func (o *DeleteDashboardUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete dashboard unauthorized response
func (o *DeleteDashboardUnauthorized) Code() int {
	return 401
}

func (o *DeleteDashboardUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/dashboards/v1][%d] deleteDashboardUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteDashboardUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/dashboards/v1][%d] deleteDashboardUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteDashboardUnauthorized) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DeleteDashboardUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDashboardForbidden creates a DeleteDashboardForbidden with default headers values
func NewDeleteDashboardForbidden() *DeleteDashboardForbidden {
	return &DeleteDashboardForbidden{}
}

/*
DeleteDashboardForbidden describes a response with status code 403, with default header values.

Content access is not allowed
*/
type DeleteDashboardForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this delete dashboard forbidden response has a 2xx status code
func (o *DeleteDashboardForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete dashboard forbidden response has a 3xx status code
func (o *DeleteDashboardForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete dashboard forbidden response has a 4xx status code
func (o *DeleteDashboardForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete dashboard forbidden response has a 5xx status code
func (o *DeleteDashboardForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete dashboard forbidden response a status code equal to that given
func (o *DeleteDashboardForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete dashboard forbidden response
func (o *DeleteDashboardForbidden) Code() int {
	return 403
}

func (o *DeleteDashboardForbidden) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/dashboards/v1][%d] deleteDashboardForbidden  %+v", 403, o.Payload)
}

func (o *DeleteDashboardForbidden) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/dashboards/v1][%d] deleteDashboardForbidden  %+v", 403, o.Payload)
}

func (o *DeleteDashboardForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DeleteDashboardForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDashboardNotFound creates a DeleteDashboardNotFound with default headers values
func NewDeleteDashboardNotFound() *DeleteDashboardNotFound {
	return &DeleteDashboardNotFound{}
}

/*
DeleteDashboardNotFound describes a response with status code 404, with default header values.

Content resource does not exist
*/
type DeleteDashboardNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this delete dashboard not found response has a 2xx status code
func (o *DeleteDashboardNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete dashboard not found response has a 3xx status code
func (o *DeleteDashboardNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete dashboard not found response has a 4xx status code
func (o *DeleteDashboardNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete dashboard not found response has a 5xx status code
func (o *DeleteDashboardNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete dashboard not found response a status code equal to that given
func (o *DeleteDashboardNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete dashboard not found response
func (o *DeleteDashboardNotFound) Code() int {
	return 404
}

func (o *DeleteDashboardNotFound) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/dashboards/v1][%d] deleteDashboardNotFound  %+v", 404, o.Payload)
}

func (o *DeleteDashboardNotFound) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/dashboards/v1][%d] deleteDashboardNotFound  %+v", 404, o.Payload)
}

func (o *DeleteDashboardNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DeleteDashboardNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDashboardTooManyRequests creates a DeleteDashboardTooManyRequests with default headers values
func NewDeleteDashboardTooManyRequests() *DeleteDashboardTooManyRequests {
	return &DeleteDashboardTooManyRequests{}
}

/*
DeleteDashboardTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type DeleteDashboardTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete dashboard too many requests response has a 2xx status code
func (o *DeleteDashboardTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete dashboard too many requests response has a 3xx status code
func (o *DeleteDashboardTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete dashboard too many requests response has a 4xx status code
func (o *DeleteDashboardTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete dashboard too many requests response has a 5xx status code
func (o *DeleteDashboardTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete dashboard too many requests response a status code equal to that given
func (o *DeleteDashboardTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete dashboard too many requests response
func (o *DeleteDashboardTooManyRequests) Code() int {
	return 429
}

func (o *DeleteDashboardTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/dashboards/v1][%d] deleteDashboardTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteDashboardTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/dashboards/v1][%d] deleteDashboardTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteDashboardTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeleteDashboardTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDashboardInternalServerError creates a DeleteDashboardInternalServerError with default headers values
func NewDeleteDashboardInternalServerError() *DeleteDashboardInternalServerError {
	return &DeleteDashboardInternalServerError{}
}

/*
DeleteDashboardInternalServerError describes a response with status code 500, with default header values.

Unexpected error occurred
*/
type DeleteDashboardInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this delete dashboard internal server error response has a 2xx status code
func (o *DeleteDashboardInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete dashboard internal server error response has a 3xx status code
func (o *DeleteDashboardInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete dashboard internal server error response has a 4xx status code
func (o *DeleteDashboardInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete dashboard internal server error response has a 5xx status code
func (o *DeleteDashboardInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete dashboard internal server error response a status code equal to that given
func (o *DeleteDashboardInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete dashboard internal server error response
func (o *DeleteDashboardInternalServerError) Code() int {
	return 500
}

func (o *DeleteDashboardInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/dashboards/v1][%d] deleteDashboardInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteDashboardInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/dashboards/v1][%d] deleteDashboardInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteDashboardInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DeleteDashboardInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
