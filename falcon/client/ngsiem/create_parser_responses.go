// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CreateParserReader is a Reader for the CreateParser structure.
type CreateParserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateParserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateParserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateParserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateParserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateParserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateParserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateParserTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateParserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /ngsiem-content/entities/parsers/v1] CreateParser", response, response.Code())
	}
}

// NewCreateParserOK creates a CreateParserOK with default headers values
func NewCreateParserOK() *CreateParserOK {
	return &CreateParserOK{}
}

/*
CreateParserOK describes a response with status code 200, with default header values.

CreateParserOK create parser o k
*/
type CreateParserOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APICreateParserResponseV1
}

// IsSuccess returns true when this create parser o k response has a 2xx status code
func (o *CreateParserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create parser o k response has a 3xx status code
func (o *CreateParserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create parser o k response has a 4xx status code
func (o *CreateParserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create parser o k response has a 5xx status code
func (o *CreateParserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create parser o k response a status code equal to that given
func (o *CreateParserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create parser o k response
func (o *CreateParserOK) Code() int {
	return 200
}

func (o *CreateParserOK) Error() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers/v1][%d] createParserOK  %+v", 200, o.Payload)
}

func (o *CreateParserOK) String() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers/v1][%d] createParserOK  %+v", 200, o.Payload)
}

func (o *CreateParserOK) GetPayload() *models.APICreateParserResponseV1 {
	return o.Payload
}

func (o *CreateParserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APICreateParserResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateParserBadRequest creates a CreateParserBadRequest with default headers values
func NewCreateParserBadRequest() *CreateParserBadRequest {
	return &CreateParserBadRequest{}
}

/*
CreateParserBadRequest describes a response with status code 400, with default header values.

Bad request for content operations
*/
type CreateParserBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create parser bad request response has a 2xx status code
func (o *CreateParserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create parser bad request response has a 3xx status code
func (o *CreateParserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create parser bad request response has a 4xx status code
func (o *CreateParserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create parser bad request response has a 5xx status code
func (o *CreateParserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create parser bad request response a status code equal to that given
func (o *CreateParserBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create parser bad request response
func (o *CreateParserBadRequest) Code() int {
	return 400
}

func (o *CreateParserBadRequest) Error() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers/v1][%d] createParserBadRequest  %+v", 400, o.Payload)
}

func (o *CreateParserBadRequest) String() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers/v1][%d] createParserBadRequest  %+v", 400, o.Payload)
}

func (o *CreateParserBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateParserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateParserUnauthorized creates a CreateParserUnauthorized with default headers values
func NewCreateParserUnauthorized() *CreateParserUnauthorized {
	return &CreateParserUnauthorized{}
}

/*
CreateParserUnauthorized describes a response with status code 401, with default header values.

Requestor is not authorized to access resource
*/
type CreateParserUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create parser unauthorized response has a 2xx status code
func (o *CreateParserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create parser unauthorized response has a 3xx status code
func (o *CreateParserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create parser unauthorized response has a 4xx status code
func (o *CreateParserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create parser unauthorized response has a 5xx status code
func (o *CreateParserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create parser unauthorized response a status code equal to that given
func (o *CreateParserUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create parser unauthorized response
func (o *CreateParserUnauthorized) Code() int {
	return 401
}

func (o *CreateParserUnauthorized) Error() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers/v1][%d] createParserUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateParserUnauthorized) String() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers/v1][%d] createParserUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateParserUnauthorized) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateParserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateParserForbidden creates a CreateParserForbidden with default headers values
func NewCreateParserForbidden() *CreateParserForbidden {
	return &CreateParserForbidden{}
}

/*
CreateParserForbidden describes a response with status code 403, with default header values.

Content access is not allowed
*/
type CreateParserForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create parser forbidden response has a 2xx status code
func (o *CreateParserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create parser forbidden response has a 3xx status code
func (o *CreateParserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create parser forbidden response has a 4xx status code
func (o *CreateParserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create parser forbidden response has a 5xx status code
func (o *CreateParserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create parser forbidden response a status code equal to that given
func (o *CreateParserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create parser forbidden response
func (o *CreateParserForbidden) Code() int {
	return 403
}

func (o *CreateParserForbidden) Error() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers/v1][%d] createParserForbidden  %+v", 403, o.Payload)
}

func (o *CreateParserForbidden) String() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers/v1][%d] createParserForbidden  %+v", 403, o.Payload)
}

func (o *CreateParserForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateParserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateParserNotFound creates a CreateParserNotFound with default headers values
func NewCreateParserNotFound() *CreateParserNotFound {
	return &CreateParserNotFound{}
}

/*
CreateParserNotFound describes a response with status code 404, with default header values.

Content resource does not exist
*/
type CreateParserNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create parser not found response has a 2xx status code
func (o *CreateParserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create parser not found response has a 3xx status code
func (o *CreateParserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create parser not found response has a 4xx status code
func (o *CreateParserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create parser not found response has a 5xx status code
func (o *CreateParserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create parser not found response a status code equal to that given
func (o *CreateParserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create parser not found response
func (o *CreateParserNotFound) Code() int {
	return 404
}

func (o *CreateParserNotFound) Error() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers/v1][%d] createParserNotFound  %+v", 404, o.Payload)
}

func (o *CreateParserNotFound) String() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers/v1][%d] createParserNotFound  %+v", 404, o.Payload)
}

func (o *CreateParserNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateParserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateParserTooManyRequests creates a CreateParserTooManyRequests with default headers values
func NewCreateParserTooManyRequests() *CreateParserTooManyRequests {
	return &CreateParserTooManyRequests{}
}

/*
CreateParserTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CreateParserTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this create parser too many requests response has a 2xx status code
func (o *CreateParserTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create parser too many requests response has a 3xx status code
func (o *CreateParserTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create parser too many requests response has a 4xx status code
func (o *CreateParserTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create parser too many requests response has a 5xx status code
func (o *CreateParserTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create parser too many requests response a status code equal to that given
func (o *CreateParserTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create parser too many requests response
func (o *CreateParserTooManyRequests) Code() int {
	return 429
}

func (o *CreateParserTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers/v1][%d] createParserTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateParserTooManyRequests) String() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers/v1][%d] createParserTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateParserTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateParserTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateParserInternalServerError creates a CreateParserInternalServerError with default headers values
func NewCreateParserInternalServerError() *CreateParserInternalServerError {
	return &CreateParserInternalServerError{}
}

/*
CreateParserInternalServerError describes a response with status code 500, with default header values.

Unexpected error occurred
*/
type CreateParserInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this create parser internal server error response has a 2xx status code
func (o *CreateParserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create parser internal server error response has a 3xx status code
func (o *CreateParserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create parser internal server error response has a 4xx status code
func (o *CreateParserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create parser internal server error response has a 5xx status code
func (o *CreateParserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create parser internal server error response a status code equal to that given
func (o *CreateParserInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create parser internal server error response
func (o *CreateParserInternalServerError) Code() int {
	return 500
}

func (o *CreateParserInternalServerError) Error() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers/v1][%d] createParserInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateParserInternalServerError) String() string {
	return fmt.Sprintf("[POST /ngsiem-content/entities/parsers/v1][%d] createParserInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateParserInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CreateParserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
