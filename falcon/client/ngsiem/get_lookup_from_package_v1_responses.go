// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetLookupFromPackageV1Reader is a Reader for the GetLookupFromPackageV1 structure.
type GetLookupFromPackageV1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLookupFromPackageV1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLookupFromPackageV1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetLookupFromPackageV1Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLookupFromPackageV1Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetLookupFromPackageV1TooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLookupFromPackageV1InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /humio/api/v1/repositories/{repository}/files/{package}/{filename}] GetLookupFromPackageV1", response, response.Code())
	}
}

// NewGetLookupFromPackageV1OK creates a GetLookupFromPackageV1OK with default headers values
func NewGetLookupFromPackageV1OK() *GetLookupFromPackageV1OK {
	return &GetLookupFromPackageV1OK{}
}

/*
GetLookupFromPackageV1OK describes a response with status code 200, with default header values.

GetLookupFromPackageV1OK get lookup from package v1 o k
*/
type GetLookupFromPackageV1OK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this get lookup from package v1 o k response has a 2xx status code
func (o *GetLookupFromPackageV1OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get lookup from package v1 o k response has a 3xx status code
func (o *GetLookupFromPackageV1OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get lookup from package v1 o k response has a 4xx status code
func (o *GetLookupFromPackageV1OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get lookup from package v1 o k response has a 5xx status code
func (o *GetLookupFromPackageV1OK) IsServerError() bool {
	return false
}

// IsCode returns true when this get lookup from package v1 o k response a status code equal to that given
func (o *GetLookupFromPackageV1OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get lookup from package v1 o k response
func (o *GetLookupFromPackageV1OK) Code() int {
	return 200
}

func (o *GetLookupFromPackageV1OK) Error() string {
	return fmt.Sprintf("[GET /humio/api/v1/repositories/{repository}/files/{package}/{filename}][%d] getLookupFromPackageV1OK", 200)
}

func (o *GetLookupFromPackageV1OK) String() string {
	return fmt.Sprintf("[GET /humio/api/v1/repositories/{repository}/files/{package}/{filename}][%d] getLookupFromPackageV1OK", 200)
}

func (o *GetLookupFromPackageV1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewGetLookupFromPackageV1Unauthorized creates a GetLookupFromPackageV1Unauthorized with default headers values
func NewGetLookupFromPackageV1Unauthorized() *GetLookupFromPackageV1Unauthorized {
	return &GetLookupFromPackageV1Unauthorized{}
}

/*
GetLookupFromPackageV1Unauthorized describes a response with status code 401, with default header values.

Requestor is not authorized to access resource
*/
type GetLookupFromPackageV1Unauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get lookup from package v1 unauthorized response has a 2xx status code
func (o *GetLookupFromPackageV1Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get lookup from package v1 unauthorized response has a 3xx status code
func (o *GetLookupFromPackageV1Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get lookup from package v1 unauthorized response has a 4xx status code
func (o *GetLookupFromPackageV1Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get lookup from package v1 unauthorized response has a 5xx status code
func (o *GetLookupFromPackageV1Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get lookup from package v1 unauthorized response a status code equal to that given
func (o *GetLookupFromPackageV1Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get lookup from package v1 unauthorized response
func (o *GetLookupFromPackageV1Unauthorized) Code() int {
	return 401
}

func (o *GetLookupFromPackageV1Unauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /humio/api/v1/repositories/{repository}/files/{package}/{filename}][%d] getLookupFromPackageV1Unauthorized %s", 401, payload)
}

func (o *GetLookupFromPackageV1Unauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /humio/api/v1/repositories/{repository}/files/{package}/{filename}][%d] getLookupFromPackageV1Unauthorized %s", 401, payload)
}

func (o *GetLookupFromPackageV1Unauthorized) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetLookupFromPackageV1Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLookupFromPackageV1Forbidden creates a GetLookupFromPackageV1Forbidden with default headers values
func NewGetLookupFromPackageV1Forbidden() *GetLookupFromPackageV1Forbidden {
	return &GetLookupFromPackageV1Forbidden{}
}

/*
GetLookupFromPackageV1Forbidden describes a response with status code 403, with default header values.

File access is not allowed
*/
type GetLookupFromPackageV1Forbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get lookup from package v1 forbidden response has a 2xx status code
func (o *GetLookupFromPackageV1Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get lookup from package v1 forbidden response has a 3xx status code
func (o *GetLookupFromPackageV1Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get lookup from package v1 forbidden response has a 4xx status code
func (o *GetLookupFromPackageV1Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get lookup from package v1 forbidden response has a 5xx status code
func (o *GetLookupFromPackageV1Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get lookup from package v1 forbidden response a status code equal to that given
func (o *GetLookupFromPackageV1Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get lookup from package v1 forbidden response
func (o *GetLookupFromPackageV1Forbidden) Code() int {
	return 403
}

func (o *GetLookupFromPackageV1Forbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /humio/api/v1/repositories/{repository}/files/{package}/{filename}][%d] getLookupFromPackageV1Forbidden %s", 403, payload)
}

func (o *GetLookupFromPackageV1Forbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /humio/api/v1/repositories/{repository}/files/{package}/{filename}][%d] getLookupFromPackageV1Forbidden %s", 403, payload)
}

func (o *GetLookupFromPackageV1Forbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetLookupFromPackageV1Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLookupFromPackageV1TooManyRequests creates a GetLookupFromPackageV1TooManyRequests with default headers values
func NewGetLookupFromPackageV1TooManyRequests() *GetLookupFromPackageV1TooManyRequests {
	return &GetLookupFromPackageV1TooManyRequests{}
}

/*
GetLookupFromPackageV1TooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetLookupFromPackageV1TooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get lookup from package v1 too many requests response has a 2xx status code
func (o *GetLookupFromPackageV1TooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get lookup from package v1 too many requests response has a 3xx status code
func (o *GetLookupFromPackageV1TooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get lookup from package v1 too many requests response has a 4xx status code
func (o *GetLookupFromPackageV1TooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get lookup from package v1 too many requests response has a 5xx status code
func (o *GetLookupFromPackageV1TooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get lookup from package v1 too many requests response a status code equal to that given
func (o *GetLookupFromPackageV1TooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get lookup from package v1 too many requests response
func (o *GetLookupFromPackageV1TooManyRequests) Code() int {
	return 429
}

func (o *GetLookupFromPackageV1TooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /humio/api/v1/repositories/{repository}/files/{package}/{filename}][%d] getLookupFromPackageV1TooManyRequests %s", 429, payload)
}

func (o *GetLookupFromPackageV1TooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /humio/api/v1/repositories/{repository}/files/{package}/{filename}][%d] getLookupFromPackageV1TooManyRequests %s", 429, payload)
}

func (o *GetLookupFromPackageV1TooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetLookupFromPackageV1TooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLookupFromPackageV1InternalServerError creates a GetLookupFromPackageV1InternalServerError with default headers values
func NewGetLookupFromPackageV1InternalServerError() *GetLookupFromPackageV1InternalServerError {
	return &GetLookupFromPackageV1InternalServerError{}
}

/*
GetLookupFromPackageV1InternalServerError describes a response with status code 500, with default header values.

Unexpected error occurred
*/
type GetLookupFromPackageV1InternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get lookup from package v1 internal server error response has a 2xx status code
func (o *GetLookupFromPackageV1InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get lookup from package v1 internal server error response has a 3xx status code
func (o *GetLookupFromPackageV1InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get lookup from package v1 internal server error response has a 4xx status code
func (o *GetLookupFromPackageV1InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get lookup from package v1 internal server error response has a 5xx status code
func (o *GetLookupFromPackageV1InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get lookup from package v1 internal server error response a status code equal to that given
func (o *GetLookupFromPackageV1InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get lookup from package v1 internal server error response
func (o *GetLookupFromPackageV1InternalServerError) Code() int {
	return 500
}

func (o *GetLookupFromPackageV1InternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /humio/api/v1/repositories/{repository}/files/{package}/{filename}][%d] getLookupFromPackageV1InternalServerError %s", 500, payload)
}

func (o *GetLookupFromPackageV1InternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /humio/api/v1/repositories/{repository}/files/{package}/{filename}][%d] getLookupFromPackageV1InternalServerError %s", 500, payload)
}

func (o *GetLookupFromPackageV1InternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetLookupFromPackageV1InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
