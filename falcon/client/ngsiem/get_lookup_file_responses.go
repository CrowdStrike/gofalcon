// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetLookupFileReader is a Reader for the GetLookupFile structure.
type GetLookupFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLookupFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLookupFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLookupFileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetLookupFileUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLookupFileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLookupFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetLookupFileTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLookupFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /ngsiem-content/entities/lookupfiles/v1] GetLookupFile", response, response.Code())
	}
}

// NewGetLookupFileOK creates a GetLookupFileOK with default headers values
func NewGetLookupFileOK() *GetLookupFileOK {
	return &GetLookupFileOK{}
}

/*
GetLookupFileOK describes a response with status code 200, with default header values.

GetLookupFileOK get lookup file o k
*/
type GetLookupFileOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this get lookup file o k response has a 2xx status code
func (o *GetLookupFileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get lookup file o k response has a 3xx status code
func (o *GetLookupFileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get lookup file o k response has a 4xx status code
func (o *GetLookupFileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get lookup file o k response has a 5xx status code
func (o *GetLookupFileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get lookup file o k response a status code equal to that given
func (o *GetLookupFileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get lookup file o k response
func (o *GetLookupFileOK) Code() int {
	return 200
}

func (o *GetLookupFileOK) Error() string {
	return fmt.Sprintf("[GET /ngsiem-content/entities/lookupfiles/v1][%d] getLookupFileOK", 200)
}

func (o *GetLookupFileOK) String() string {
	return fmt.Sprintf("[GET /ngsiem-content/entities/lookupfiles/v1][%d] getLookupFileOK", 200)
}

func (o *GetLookupFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewGetLookupFileBadRequest creates a GetLookupFileBadRequest with default headers values
func NewGetLookupFileBadRequest() *GetLookupFileBadRequest {
	return &GetLookupFileBadRequest{}
}

/*
GetLookupFileBadRequest describes a response with status code 400, with default header values.

Bad request for content operations
*/
type GetLookupFileBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get lookup file bad request response has a 2xx status code
func (o *GetLookupFileBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get lookup file bad request response has a 3xx status code
func (o *GetLookupFileBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get lookup file bad request response has a 4xx status code
func (o *GetLookupFileBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get lookup file bad request response has a 5xx status code
func (o *GetLookupFileBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get lookup file bad request response a status code equal to that given
func (o *GetLookupFileBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get lookup file bad request response
func (o *GetLookupFileBadRequest) Code() int {
	return 400
}

func (o *GetLookupFileBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/lookupfiles/v1][%d] getLookupFileBadRequest %s", 400, payload)
}

func (o *GetLookupFileBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/lookupfiles/v1][%d] getLookupFileBadRequest %s", 400, payload)
}

func (o *GetLookupFileBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetLookupFileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLookupFileUnauthorized creates a GetLookupFileUnauthorized with default headers values
func NewGetLookupFileUnauthorized() *GetLookupFileUnauthorized {
	return &GetLookupFileUnauthorized{}
}

/*
GetLookupFileUnauthorized describes a response with status code 401, with default header values.

Requestor is not authorized to access resource
*/
type GetLookupFileUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get lookup file unauthorized response has a 2xx status code
func (o *GetLookupFileUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get lookup file unauthorized response has a 3xx status code
func (o *GetLookupFileUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get lookup file unauthorized response has a 4xx status code
func (o *GetLookupFileUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get lookup file unauthorized response has a 5xx status code
func (o *GetLookupFileUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get lookup file unauthorized response a status code equal to that given
func (o *GetLookupFileUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get lookup file unauthorized response
func (o *GetLookupFileUnauthorized) Code() int {
	return 401
}

func (o *GetLookupFileUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/lookupfiles/v1][%d] getLookupFileUnauthorized %s", 401, payload)
}

func (o *GetLookupFileUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/lookupfiles/v1][%d] getLookupFileUnauthorized %s", 401, payload)
}

func (o *GetLookupFileUnauthorized) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetLookupFileUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLookupFileForbidden creates a GetLookupFileForbidden with default headers values
func NewGetLookupFileForbidden() *GetLookupFileForbidden {
	return &GetLookupFileForbidden{}
}

/*
GetLookupFileForbidden describes a response with status code 403, with default header values.

Content access is not allowed
*/
type GetLookupFileForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get lookup file forbidden response has a 2xx status code
func (o *GetLookupFileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get lookup file forbidden response has a 3xx status code
func (o *GetLookupFileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get lookup file forbidden response has a 4xx status code
func (o *GetLookupFileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get lookup file forbidden response has a 5xx status code
func (o *GetLookupFileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get lookup file forbidden response a status code equal to that given
func (o *GetLookupFileForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get lookup file forbidden response
func (o *GetLookupFileForbidden) Code() int {
	return 403
}

func (o *GetLookupFileForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/lookupfiles/v1][%d] getLookupFileForbidden %s", 403, payload)
}

func (o *GetLookupFileForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/lookupfiles/v1][%d] getLookupFileForbidden %s", 403, payload)
}

func (o *GetLookupFileForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetLookupFileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLookupFileNotFound creates a GetLookupFileNotFound with default headers values
func NewGetLookupFileNotFound() *GetLookupFileNotFound {
	return &GetLookupFileNotFound{}
}

/*
GetLookupFileNotFound describes a response with status code 404, with default header values.

Content resource does not exist
*/
type GetLookupFileNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get lookup file not found response has a 2xx status code
func (o *GetLookupFileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get lookup file not found response has a 3xx status code
func (o *GetLookupFileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get lookup file not found response has a 4xx status code
func (o *GetLookupFileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get lookup file not found response has a 5xx status code
func (o *GetLookupFileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get lookup file not found response a status code equal to that given
func (o *GetLookupFileNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get lookup file not found response
func (o *GetLookupFileNotFound) Code() int {
	return 404
}

func (o *GetLookupFileNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/lookupfiles/v1][%d] getLookupFileNotFound %s", 404, payload)
}

func (o *GetLookupFileNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/lookupfiles/v1][%d] getLookupFileNotFound %s", 404, payload)
}

func (o *GetLookupFileNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetLookupFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLookupFileTooManyRequests creates a GetLookupFileTooManyRequests with default headers values
func NewGetLookupFileTooManyRequests() *GetLookupFileTooManyRequests {
	return &GetLookupFileTooManyRequests{}
}

/*
GetLookupFileTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetLookupFileTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get lookup file too many requests response has a 2xx status code
func (o *GetLookupFileTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get lookup file too many requests response has a 3xx status code
func (o *GetLookupFileTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get lookup file too many requests response has a 4xx status code
func (o *GetLookupFileTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get lookup file too many requests response has a 5xx status code
func (o *GetLookupFileTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get lookup file too many requests response a status code equal to that given
func (o *GetLookupFileTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get lookup file too many requests response
func (o *GetLookupFileTooManyRequests) Code() int {
	return 429
}

func (o *GetLookupFileTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/lookupfiles/v1][%d] getLookupFileTooManyRequests %s", 429, payload)
}

func (o *GetLookupFileTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/lookupfiles/v1][%d] getLookupFileTooManyRequests %s", 429, payload)
}

func (o *GetLookupFileTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetLookupFileTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLookupFileInternalServerError creates a GetLookupFileInternalServerError with default headers values
func NewGetLookupFileInternalServerError() *GetLookupFileInternalServerError {
	return &GetLookupFileInternalServerError{}
}

/*
GetLookupFileInternalServerError describes a response with status code 500, with default header values.

Unexpected error occurred
*/
type GetLookupFileInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get lookup file internal server error response has a 2xx status code
func (o *GetLookupFileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get lookup file internal server error response has a 3xx status code
func (o *GetLookupFileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get lookup file internal server error response has a 4xx status code
func (o *GetLookupFileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get lookup file internal server error response has a 5xx status code
func (o *GetLookupFileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get lookup file internal server error response a status code equal to that given
func (o *GetLookupFileInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get lookup file internal server error response
func (o *GetLookupFileInternalServerError) Code() int {
	return 500
}

func (o *GetLookupFileInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/lookupfiles/v1][%d] getLookupFileInternalServerError %s", 500, payload)
}

func (o *GetLookupFileInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/lookupfiles/v1][%d] getLookupFileInternalServerError %s", 500, payload)
}

func (o *GetLookupFileInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetLookupFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
