// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetParserReader is a Reader for the GetParser structure.
type GetParserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetParserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetParserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetParserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetParserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetParserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetParserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetParserTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetParserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /ngsiem-content/entities/parsers/v1] GetParser", response, response.Code())
	}
}

// NewGetParserOK creates a GetParserOK with default headers values
func NewGetParserOK() *GetParserOK {
	return &GetParserOK{}
}

/*
GetParserOK describes a response with status code 200, with default header values.

GetParserOK get parser o k
*/
type GetParserOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIGetParserResponseV1
}

// IsSuccess returns true when this get parser o k response has a 2xx status code
func (o *GetParserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get parser o k response has a 3xx status code
func (o *GetParserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get parser o k response has a 4xx status code
func (o *GetParserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get parser o k response has a 5xx status code
func (o *GetParserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get parser o k response a status code equal to that given
func (o *GetParserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get parser o k response
func (o *GetParserOK) Code() int {
	return 200
}

func (o *GetParserOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers/v1][%d] getParserOK %s", 200, payload)
}

func (o *GetParserOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers/v1][%d] getParserOK %s", 200, payload)
}

func (o *GetParserOK) GetPayload() *models.APIGetParserResponseV1 {
	return o.Payload
}

func (o *GetParserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIGetParserResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetParserBadRequest creates a GetParserBadRequest with default headers values
func NewGetParserBadRequest() *GetParserBadRequest {
	return &GetParserBadRequest{}
}

/*
GetParserBadRequest describes a response with status code 400, with default header values.

Bad request for content operations
*/
type GetParserBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get parser bad request response has a 2xx status code
func (o *GetParserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get parser bad request response has a 3xx status code
func (o *GetParserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get parser bad request response has a 4xx status code
func (o *GetParserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get parser bad request response has a 5xx status code
func (o *GetParserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get parser bad request response a status code equal to that given
func (o *GetParserBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get parser bad request response
func (o *GetParserBadRequest) Code() int {
	return 400
}

func (o *GetParserBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers/v1][%d] getParserBadRequest %s", 400, payload)
}

func (o *GetParserBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers/v1][%d] getParserBadRequest %s", 400, payload)
}

func (o *GetParserBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetParserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetParserUnauthorized creates a GetParserUnauthorized with default headers values
func NewGetParserUnauthorized() *GetParserUnauthorized {
	return &GetParserUnauthorized{}
}

/*
GetParserUnauthorized describes a response with status code 401, with default header values.

Requestor is not authorized to access resource
*/
type GetParserUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get parser unauthorized response has a 2xx status code
func (o *GetParserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get parser unauthorized response has a 3xx status code
func (o *GetParserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get parser unauthorized response has a 4xx status code
func (o *GetParserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get parser unauthorized response has a 5xx status code
func (o *GetParserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get parser unauthorized response a status code equal to that given
func (o *GetParserUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get parser unauthorized response
func (o *GetParserUnauthorized) Code() int {
	return 401
}

func (o *GetParserUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers/v1][%d] getParserUnauthorized %s", 401, payload)
}

func (o *GetParserUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers/v1][%d] getParserUnauthorized %s", 401, payload)
}

func (o *GetParserUnauthorized) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetParserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetParserForbidden creates a GetParserForbidden with default headers values
func NewGetParserForbidden() *GetParserForbidden {
	return &GetParserForbidden{}
}

/*
GetParserForbidden describes a response with status code 403, with default header values.

Content access is not allowed
*/
type GetParserForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get parser forbidden response has a 2xx status code
func (o *GetParserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get parser forbidden response has a 3xx status code
func (o *GetParserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get parser forbidden response has a 4xx status code
func (o *GetParserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get parser forbidden response has a 5xx status code
func (o *GetParserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get parser forbidden response a status code equal to that given
func (o *GetParserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get parser forbidden response
func (o *GetParserForbidden) Code() int {
	return 403
}

func (o *GetParserForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers/v1][%d] getParserForbidden %s", 403, payload)
}

func (o *GetParserForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers/v1][%d] getParserForbidden %s", 403, payload)
}

func (o *GetParserForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetParserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetParserNotFound creates a GetParserNotFound with default headers values
func NewGetParserNotFound() *GetParserNotFound {
	return &GetParserNotFound{}
}

/*
GetParserNotFound describes a response with status code 404, with default header values.

Content resource does not exist
*/
type GetParserNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get parser not found response has a 2xx status code
func (o *GetParserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get parser not found response has a 3xx status code
func (o *GetParserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get parser not found response has a 4xx status code
func (o *GetParserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get parser not found response has a 5xx status code
func (o *GetParserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get parser not found response a status code equal to that given
func (o *GetParserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get parser not found response
func (o *GetParserNotFound) Code() int {
	return 404
}

func (o *GetParserNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers/v1][%d] getParserNotFound %s", 404, payload)
}

func (o *GetParserNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers/v1][%d] getParserNotFound %s", 404, payload)
}

func (o *GetParserNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetParserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetParserTooManyRequests creates a GetParserTooManyRequests with default headers values
func NewGetParserTooManyRequests() *GetParserTooManyRequests {
	return &GetParserTooManyRequests{}
}

/*
GetParserTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetParserTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get parser too many requests response has a 2xx status code
func (o *GetParserTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get parser too many requests response has a 3xx status code
func (o *GetParserTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get parser too many requests response has a 4xx status code
func (o *GetParserTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get parser too many requests response has a 5xx status code
func (o *GetParserTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get parser too many requests response a status code equal to that given
func (o *GetParserTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get parser too many requests response
func (o *GetParserTooManyRequests) Code() int {
	return 429
}

func (o *GetParserTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers/v1][%d] getParserTooManyRequests %s", 429, payload)
}

func (o *GetParserTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers/v1][%d] getParserTooManyRequests %s", 429, payload)
}

func (o *GetParserTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetParserTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetParserInternalServerError creates a GetParserInternalServerError with default headers values
func NewGetParserInternalServerError() *GetParserInternalServerError {
	return &GetParserInternalServerError{}
}

/*
GetParserInternalServerError describes a response with status code 500, with default header values.

Unexpected error occurred
*/
type GetParserInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get parser internal server error response has a 2xx status code
func (o *GetParserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get parser internal server error response has a 3xx status code
func (o *GetParserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get parser internal server error response has a 4xx status code
func (o *GetParserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get parser internal server error response has a 5xx status code
func (o *GetParserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get parser internal server error response a status code equal to that given
func (o *GetParserInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get parser internal server error response
func (o *GetParserInternalServerError) Code() int {
	return 500
}

func (o *GetParserInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers/v1][%d] getParserInternalServerError %s", 500, payload)
}

func (o *GetParserInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ngsiem-content/entities/parsers/v1][%d] getParserInternalServerError %s", 500, payload)
}

func (o *GetParserInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetParserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
