// Code generated by go-swagger; DO NOT EDIT.

package ngsiem

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// DeleteSavedQueryReader is a Reader for the DeleteSavedQuery structure.
type DeleteSavedQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSavedQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteSavedQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteSavedQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteSavedQueryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteSavedQueryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteSavedQueryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteSavedQueryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteSavedQueryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /ngsiem-content/entities/savedqueries/v1] DeleteSavedQuery", response, response.Code())
	}
}

// NewDeleteSavedQueryOK creates a DeleteSavedQueryOK with default headers values
func NewDeleteSavedQueryOK() *DeleteSavedQueryOK {
	return &DeleteSavedQueryOK{}
}

/*
DeleteSavedQueryOK describes a response with status code 200, with default header values.

DeleteSavedQueryOK delete saved query o k
*/
type DeleteSavedQueryOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIDeleteSavedQueryResponseV1
}

// IsSuccess returns true when this delete saved query o k response has a 2xx status code
func (o *DeleteSavedQueryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete saved query o k response has a 3xx status code
func (o *DeleteSavedQueryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete saved query o k response has a 4xx status code
func (o *DeleteSavedQueryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete saved query o k response has a 5xx status code
func (o *DeleteSavedQueryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete saved query o k response a status code equal to that given
func (o *DeleteSavedQueryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete saved query o k response
func (o *DeleteSavedQueryOK) Code() int {
	return 200
}

func (o *DeleteSavedQueryOK) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/savedqueries/v1][%d] deleteSavedQueryOK  %+v", 200, o.Payload)
}

func (o *DeleteSavedQueryOK) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/savedqueries/v1][%d] deleteSavedQueryOK  %+v", 200, o.Payload)
}

func (o *DeleteSavedQueryOK) GetPayload() *models.APIDeleteSavedQueryResponseV1 {
	return o.Payload
}

func (o *DeleteSavedQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIDeleteSavedQueryResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSavedQueryBadRequest creates a DeleteSavedQueryBadRequest with default headers values
func NewDeleteSavedQueryBadRequest() *DeleteSavedQueryBadRequest {
	return &DeleteSavedQueryBadRequest{}
}

/*
DeleteSavedQueryBadRequest describes a response with status code 400, with default header values.

Bad request for content operations
*/
type DeleteSavedQueryBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this delete saved query bad request response has a 2xx status code
func (o *DeleteSavedQueryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete saved query bad request response has a 3xx status code
func (o *DeleteSavedQueryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete saved query bad request response has a 4xx status code
func (o *DeleteSavedQueryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete saved query bad request response has a 5xx status code
func (o *DeleteSavedQueryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete saved query bad request response a status code equal to that given
func (o *DeleteSavedQueryBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete saved query bad request response
func (o *DeleteSavedQueryBadRequest) Code() int {
	return 400
}

func (o *DeleteSavedQueryBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/savedqueries/v1][%d] deleteSavedQueryBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteSavedQueryBadRequest) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/savedqueries/v1][%d] deleteSavedQueryBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteSavedQueryBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DeleteSavedQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSavedQueryUnauthorized creates a DeleteSavedQueryUnauthorized with default headers values
func NewDeleteSavedQueryUnauthorized() *DeleteSavedQueryUnauthorized {
	return &DeleteSavedQueryUnauthorized{}
}

/*
DeleteSavedQueryUnauthorized describes a response with status code 401, with default header values.

Requestor is not authorized to access resource
*/
type DeleteSavedQueryUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this delete saved query unauthorized response has a 2xx status code
func (o *DeleteSavedQueryUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete saved query unauthorized response has a 3xx status code
func (o *DeleteSavedQueryUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete saved query unauthorized response has a 4xx status code
func (o *DeleteSavedQueryUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete saved query unauthorized response has a 5xx status code
func (o *DeleteSavedQueryUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete saved query unauthorized response a status code equal to that given
func (o *DeleteSavedQueryUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete saved query unauthorized response
func (o *DeleteSavedQueryUnauthorized) Code() int {
	return 401
}

func (o *DeleteSavedQueryUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/savedqueries/v1][%d] deleteSavedQueryUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteSavedQueryUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/savedqueries/v1][%d] deleteSavedQueryUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteSavedQueryUnauthorized) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DeleteSavedQueryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSavedQueryForbidden creates a DeleteSavedQueryForbidden with default headers values
func NewDeleteSavedQueryForbidden() *DeleteSavedQueryForbidden {
	return &DeleteSavedQueryForbidden{}
}

/*
DeleteSavedQueryForbidden describes a response with status code 403, with default header values.

Content access is not allowed
*/
type DeleteSavedQueryForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this delete saved query forbidden response has a 2xx status code
func (o *DeleteSavedQueryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete saved query forbidden response has a 3xx status code
func (o *DeleteSavedQueryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete saved query forbidden response has a 4xx status code
func (o *DeleteSavedQueryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete saved query forbidden response has a 5xx status code
func (o *DeleteSavedQueryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete saved query forbidden response a status code equal to that given
func (o *DeleteSavedQueryForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete saved query forbidden response
func (o *DeleteSavedQueryForbidden) Code() int {
	return 403
}

func (o *DeleteSavedQueryForbidden) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/savedqueries/v1][%d] deleteSavedQueryForbidden  %+v", 403, o.Payload)
}

func (o *DeleteSavedQueryForbidden) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/savedqueries/v1][%d] deleteSavedQueryForbidden  %+v", 403, o.Payload)
}

func (o *DeleteSavedQueryForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DeleteSavedQueryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSavedQueryNotFound creates a DeleteSavedQueryNotFound with default headers values
func NewDeleteSavedQueryNotFound() *DeleteSavedQueryNotFound {
	return &DeleteSavedQueryNotFound{}
}

/*
DeleteSavedQueryNotFound describes a response with status code 404, with default header values.

Content resource does not exist
*/
type DeleteSavedQueryNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this delete saved query not found response has a 2xx status code
func (o *DeleteSavedQueryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete saved query not found response has a 3xx status code
func (o *DeleteSavedQueryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete saved query not found response has a 4xx status code
func (o *DeleteSavedQueryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete saved query not found response has a 5xx status code
func (o *DeleteSavedQueryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete saved query not found response a status code equal to that given
func (o *DeleteSavedQueryNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete saved query not found response
func (o *DeleteSavedQueryNotFound) Code() int {
	return 404
}

func (o *DeleteSavedQueryNotFound) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/savedqueries/v1][%d] deleteSavedQueryNotFound  %+v", 404, o.Payload)
}

func (o *DeleteSavedQueryNotFound) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/savedqueries/v1][%d] deleteSavedQueryNotFound  %+v", 404, o.Payload)
}

func (o *DeleteSavedQueryNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DeleteSavedQueryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSavedQueryTooManyRequests creates a DeleteSavedQueryTooManyRequests with default headers values
func NewDeleteSavedQueryTooManyRequests() *DeleteSavedQueryTooManyRequests {
	return &DeleteSavedQueryTooManyRequests{}
}

/*
DeleteSavedQueryTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type DeleteSavedQueryTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete saved query too many requests response has a 2xx status code
func (o *DeleteSavedQueryTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete saved query too many requests response has a 3xx status code
func (o *DeleteSavedQueryTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete saved query too many requests response has a 4xx status code
func (o *DeleteSavedQueryTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete saved query too many requests response has a 5xx status code
func (o *DeleteSavedQueryTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete saved query too many requests response a status code equal to that given
func (o *DeleteSavedQueryTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete saved query too many requests response
func (o *DeleteSavedQueryTooManyRequests) Code() int {
	return 429
}

func (o *DeleteSavedQueryTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/savedqueries/v1][%d] deleteSavedQueryTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteSavedQueryTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/savedqueries/v1][%d] deleteSavedQueryTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteSavedQueryTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeleteSavedQueryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSavedQueryInternalServerError creates a DeleteSavedQueryInternalServerError with default headers values
func NewDeleteSavedQueryInternalServerError() *DeleteSavedQueryInternalServerError {
	return &DeleteSavedQueryInternalServerError{}
}

/*
DeleteSavedQueryInternalServerError describes a response with status code 500, with default header values.

Unexpected error occurred
*/
type DeleteSavedQueryInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this delete saved query internal server error response has a 2xx status code
func (o *DeleteSavedQueryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete saved query internal server error response has a 3xx status code
func (o *DeleteSavedQueryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete saved query internal server error response has a 4xx status code
func (o *DeleteSavedQueryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete saved query internal server error response has a 5xx status code
func (o *DeleteSavedQueryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete saved query internal server error response a status code equal to that given
func (o *DeleteSavedQueryInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete saved query internal server error response
func (o *DeleteSavedQueryInternalServerError) Code() int {
	return 500
}

func (o *DeleteSavedQueryInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/savedqueries/v1][%d] deleteSavedQueryInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteSavedQueryInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /ngsiem-content/entities/savedqueries/v1][%d] deleteSavedQueryInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteSavedQueryInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DeleteSavedQueryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
