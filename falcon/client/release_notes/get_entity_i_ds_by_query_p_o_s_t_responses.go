// Code generated by go-swagger; DO NOT EDIT.

package release_notes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetEntityIDsByQueryPOSTReader is a Reader for the GetEntityIDsByQueryPOST structure.
type GetEntityIDsByQueryPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEntityIDsByQueryPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEntityIDsByQueryPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetEntityIDsByQueryPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetEntityIDsByQueryPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetEntityIDsByQueryPOSTTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetEntityIDsByQueryPOSTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /deployment-coordinator/entities/release-notes/GET/v1] GetEntityIDsByQueryPOST", response, response.Code())
	}
}

// NewGetEntityIDsByQueryPOSTOK creates a GetEntityIDsByQueryPOSTOK with default headers values
func NewGetEntityIDsByQueryPOSTOK() *GetEntityIDsByQueryPOSTOK {
	return &GetEntityIDsByQueryPOSTOK{}
}

/*
GetEntityIDsByQueryPOSTOK describes a response with status code 200, with default header values.

OK
*/
type GetEntityIDsByQueryPOSTOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ReleasenotesEntitiesGetResponseWrapper
}

// IsSuccess returns true when this get entity i ds by query p o s t o k response has a 2xx status code
func (o *GetEntityIDsByQueryPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get entity i ds by query p o s t o k response has a 3xx status code
func (o *GetEntityIDsByQueryPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get entity i ds by query p o s t o k response has a 4xx status code
func (o *GetEntityIDsByQueryPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get entity i ds by query p o s t o k response has a 5xx status code
func (o *GetEntityIDsByQueryPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get entity i ds by query p o s t o k response a status code equal to that given
func (o *GetEntityIDsByQueryPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get entity i ds by query p o s t o k response
func (o *GetEntityIDsByQueryPOSTOK) Code() int {
	return 200
}

func (o *GetEntityIDsByQueryPOSTOK) Error() string {
	return fmt.Sprintf("[POST /deployment-coordinator/entities/release-notes/GET/v1][%d] getEntityIDsByQueryPOSTOK  %+v", 200, o.Payload)
}

func (o *GetEntityIDsByQueryPOSTOK) String() string {
	return fmt.Sprintf("[POST /deployment-coordinator/entities/release-notes/GET/v1][%d] getEntityIDsByQueryPOSTOK  %+v", 200, o.Payload)
}

func (o *GetEntityIDsByQueryPOSTOK) GetPayload() *models.ReleasenotesEntitiesGetResponseWrapper {
	return o.Payload
}

func (o *GetEntityIDsByQueryPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ReleasenotesEntitiesGetResponseWrapper)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEntityIDsByQueryPOSTForbidden creates a GetEntityIDsByQueryPOSTForbidden with default headers values
func NewGetEntityIDsByQueryPOSTForbidden() *GetEntityIDsByQueryPOSTForbidden {
	return &GetEntityIDsByQueryPOSTForbidden{}
}

/*
GetEntityIDsByQueryPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetEntityIDsByQueryPOSTForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ReleasenotesReleaseNoteWrapperV1
}

// IsSuccess returns true when this get entity i ds by query p o s t forbidden response has a 2xx status code
func (o *GetEntityIDsByQueryPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get entity i ds by query p o s t forbidden response has a 3xx status code
func (o *GetEntityIDsByQueryPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get entity i ds by query p o s t forbidden response has a 4xx status code
func (o *GetEntityIDsByQueryPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get entity i ds by query p o s t forbidden response has a 5xx status code
func (o *GetEntityIDsByQueryPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get entity i ds by query p o s t forbidden response a status code equal to that given
func (o *GetEntityIDsByQueryPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get entity i ds by query p o s t forbidden response
func (o *GetEntityIDsByQueryPOSTForbidden) Code() int {
	return 403
}

func (o *GetEntityIDsByQueryPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /deployment-coordinator/entities/release-notes/GET/v1][%d] getEntityIDsByQueryPOSTForbidden  %+v", 403, o.Payload)
}

func (o *GetEntityIDsByQueryPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /deployment-coordinator/entities/release-notes/GET/v1][%d] getEntityIDsByQueryPOSTForbidden  %+v", 403, o.Payload)
}

func (o *GetEntityIDsByQueryPOSTForbidden) GetPayload() *models.ReleasenotesReleaseNoteWrapperV1 {
	return o.Payload
}

func (o *GetEntityIDsByQueryPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ReleasenotesReleaseNoteWrapperV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEntityIDsByQueryPOSTNotFound creates a GetEntityIDsByQueryPOSTNotFound with default headers values
func NewGetEntityIDsByQueryPOSTNotFound() *GetEntityIDsByQueryPOSTNotFound {
	return &GetEntityIDsByQueryPOSTNotFound{}
}

/*
GetEntityIDsByQueryPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetEntityIDsByQueryPOSTNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ReleasenotesReleaseNoteWrapperV1
}

// IsSuccess returns true when this get entity i ds by query p o s t not found response has a 2xx status code
func (o *GetEntityIDsByQueryPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get entity i ds by query p o s t not found response has a 3xx status code
func (o *GetEntityIDsByQueryPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get entity i ds by query p o s t not found response has a 4xx status code
func (o *GetEntityIDsByQueryPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get entity i ds by query p o s t not found response has a 5xx status code
func (o *GetEntityIDsByQueryPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get entity i ds by query p o s t not found response a status code equal to that given
func (o *GetEntityIDsByQueryPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get entity i ds by query p o s t not found response
func (o *GetEntityIDsByQueryPOSTNotFound) Code() int {
	return 404
}

func (o *GetEntityIDsByQueryPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /deployment-coordinator/entities/release-notes/GET/v1][%d] getEntityIDsByQueryPOSTNotFound  %+v", 404, o.Payload)
}

func (o *GetEntityIDsByQueryPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /deployment-coordinator/entities/release-notes/GET/v1][%d] getEntityIDsByQueryPOSTNotFound  %+v", 404, o.Payload)
}

func (o *GetEntityIDsByQueryPOSTNotFound) GetPayload() *models.ReleasenotesReleaseNoteWrapperV1 {
	return o.Payload
}

func (o *GetEntityIDsByQueryPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ReleasenotesReleaseNoteWrapperV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEntityIDsByQueryPOSTTooManyRequests creates a GetEntityIDsByQueryPOSTTooManyRequests with default headers values
func NewGetEntityIDsByQueryPOSTTooManyRequests() *GetEntityIDsByQueryPOSTTooManyRequests {
	return &GetEntityIDsByQueryPOSTTooManyRequests{}
}

/*
GetEntityIDsByQueryPOSTTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetEntityIDsByQueryPOSTTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get entity i ds by query p o s t too many requests response has a 2xx status code
func (o *GetEntityIDsByQueryPOSTTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get entity i ds by query p o s t too many requests response has a 3xx status code
func (o *GetEntityIDsByQueryPOSTTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get entity i ds by query p o s t too many requests response has a 4xx status code
func (o *GetEntityIDsByQueryPOSTTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get entity i ds by query p o s t too many requests response has a 5xx status code
func (o *GetEntityIDsByQueryPOSTTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get entity i ds by query p o s t too many requests response a status code equal to that given
func (o *GetEntityIDsByQueryPOSTTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get entity i ds by query p o s t too many requests response
func (o *GetEntityIDsByQueryPOSTTooManyRequests) Code() int {
	return 429
}

func (o *GetEntityIDsByQueryPOSTTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /deployment-coordinator/entities/release-notes/GET/v1][%d] getEntityIDsByQueryPOSTTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetEntityIDsByQueryPOSTTooManyRequests) String() string {
	return fmt.Sprintf("[POST /deployment-coordinator/entities/release-notes/GET/v1][%d] getEntityIDsByQueryPOSTTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetEntityIDsByQueryPOSTTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetEntityIDsByQueryPOSTTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEntityIDsByQueryPOSTInternalServerError creates a GetEntityIDsByQueryPOSTInternalServerError with default headers values
func NewGetEntityIDsByQueryPOSTInternalServerError() *GetEntityIDsByQueryPOSTInternalServerError {
	return &GetEntityIDsByQueryPOSTInternalServerError{}
}

/*
GetEntityIDsByQueryPOSTInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetEntityIDsByQueryPOSTInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ReleasenotesReleaseNoteWrapperV1
}

// IsSuccess returns true when this get entity i ds by query p o s t internal server error response has a 2xx status code
func (o *GetEntityIDsByQueryPOSTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get entity i ds by query p o s t internal server error response has a 3xx status code
func (o *GetEntityIDsByQueryPOSTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get entity i ds by query p o s t internal server error response has a 4xx status code
func (o *GetEntityIDsByQueryPOSTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get entity i ds by query p o s t internal server error response has a 5xx status code
func (o *GetEntityIDsByQueryPOSTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get entity i ds by query p o s t internal server error response a status code equal to that given
func (o *GetEntityIDsByQueryPOSTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get entity i ds by query p o s t internal server error response
func (o *GetEntityIDsByQueryPOSTInternalServerError) Code() int {
	return 500
}

func (o *GetEntityIDsByQueryPOSTInternalServerError) Error() string {
	return fmt.Sprintf("[POST /deployment-coordinator/entities/release-notes/GET/v1][%d] getEntityIDsByQueryPOSTInternalServerError  %+v", 500, o.Payload)
}

func (o *GetEntityIDsByQueryPOSTInternalServerError) String() string {
	return fmt.Sprintf("[POST /deployment-coordinator/entities/release-notes/GET/v1][%d] getEntityIDsByQueryPOSTInternalServerError  %+v", 500, o.Payload)
}

func (o *GetEntityIDsByQueryPOSTInternalServerError) GetPayload() *models.ReleasenotesReleaseNoteWrapperV1 {
	return o.Payload
}

func (o *GetEntityIDsByQueryPOSTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ReleasenotesReleaseNoteWrapperV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
