// Code generated by go-swagger; DO NOT EDIT.

package alerts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewQueryV2Params creates a new QueryV2Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewQueryV2Params() *QueryV2Params {
	return &QueryV2Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewQueryV2ParamsWithTimeout creates a new QueryV2Params object
// with the ability to set a timeout on a request.
func NewQueryV2ParamsWithTimeout(timeout time.Duration) *QueryV2Params {
	return &QueryV2Params{
		timeout: timeout,
	}
}

// NewQueryV2ParamsWithContext creates a new QueryV2Params object
// with the ability to set a context for a request.
func NewQueryV2ParamsWithContext(ctx context.Context) *QueryV2Params {
	return &QueryV2Params{
		Context: ctx,
	}
}

// NewQueryV2ParamsWithHTTPClient creates a new QueryV2Params object
// with the ability to set a custom HTTPClient for a request.
func NewQueryV2ParamsWithHTTPClient(client *http.Client) *QueryV2Params {
	return &QueryV2Params{
		HTTPClient: client,
	}
}

/*
QueryV2Params contains all the parameters to send to the API endpoint

	for the query v2 operation.

	Typically these are written to a http.Request.
*/
type QueryV2Params struct {

	/* Filter.

	     Filter Alerts using a query in Falcon Query Language (FQL).Filter fields can be any keyword field that is part of #domain.Alert
	An asterisk wildcard `*` includes all results.
	Empty value means to not filter on anything.
	Most commonly used filter fields that supports exact match: cid, id, aggregate_id, product, type, pattern_id, platform ...
	Most commonly used filter fields that supports wildcard (*): assigned_to_name, assigned_to_uuid, tactic_id, technique ...
	Most commonly filter fields that supports range comparisons (>, <, >=, <=): severity, created_timestamp, timestamp, updated_timestamp...
	All filter fields and operations support negation (!).


	The full list of valid filter options is extensive. Review it in our [documentation inside the Falcon console](https://falcon.crowdstrike.com/documentation/45/falcon-query-language-fql).
	*/
	Filter *string

	/* IncludeHidden.

	   allows previously hidden alerts to be retrieved

	   Default: true
	*/
	IncludeHidden *bool

	/* Limit.

	   The maximum number of detections to return in this response (default: 100; max: 10000). Use with the `offset` parameter to manage pagination of results.
	*/
	Limit *int64

	/* Offset.

	   The first detection to return, where `0` is the latest detection. Use with the `offset` parameter to manage pagination of results.
	*/
	Offset *int64

	/* Q.

	   Search all detection metadata for the provided string
	*/
	Q *string

	/* Sort.

	     Sort parameter takes the form <field|direction>. Direction can be either `asc` (ascending) or `desc` (descending) order. For example: `status|asc` or `status|desc`.

	The sorting fields can be any keyword field that is part of #domain.Alert except for the text based fields. Most commonly used fields are status, cid, aggregate_id, timestamp, created_timestamp, updated_timestamp, assigned_to_name, assigned_to_uid, assigned_to_uuid, show_in_ui, tactic_id, tactic, technique, technique_id, pattern_id, product, comment, tags
	If the fields are missing from the Alerts, the service will fallback to its default ordering
	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the query v2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryV2Params) WithDefaults() *QueryV2Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the query v2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryV2Params) SetDefaults() {
	var (
		includeHiddenDefault = bool(true)
	)

	val := QueryV2Params{
		IncludeHidden: &includeHiddenDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the query v2 params
func (o *QueryV2Params) WithTimeout(timeout time.Duration) *QueryV2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query v2 params
func (o *QueryV2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query v2 params
func (o *QueryV2Params) WithContext(ctx context.Context) *QueryV2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query v2 params
func (o *QueryV2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query v2 params
func (o *QueryV2Params) WithHTTPClient(client *http.Client) *QueryV2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query v2 params
func (o *QueryV2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the query v2 params
func (o *QueryV2Params) WithFilter(filter *string) *QueryV2Params {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the query v2 params
func (o *QueryV2Params) SetFilter(filter *string) {
	o.Filter = filter
}

// WithIncludeHidden adds the includeHidden to the query v2 params
func (o *QueryV2Params) WithIncludeHidden(includeHidden *bool) *QueryV2Params {
	o.SetIncludeHidden(includeHidden)
	return o
}

// SetIncludeHidden adds the includeHidden to the query v2 params
func (o *QueryV2Params) SetIncludeHidden(includeHidden *bool) {
	o.IncludeHidden = includeHidden
}

// WithLimit adds the limit to the query v2 params
func (o *QueryV2Params) WithLimit(limit *int64) *QueryV2Params {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the query v2 params
func (o *QueryV2Params) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the query v2 params
func (o *QueryV2Params) WithOffset(offset *int64) *QueryV2Params {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the query v2 params
func (o *QueryV2Params) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithQ adds the q to the query v2 params
func (o *QueryV2Params) WithQ(q *string) *QueryV2Params {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the query v2 params
func (o *QueryV2Params) SetQ(q *string) {
	o.Q = q
}

// WithSort adds the sort to the query v2 params
func (o *QueryV2Params) WithSort(sort *string) *QueryV2Params {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the query v2 params
func (o *QueryV2Params) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *QueryV2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.IncludeHidden != nil {

		// query param include_hidden
		var qrIncludeHidden bool

		if o.IncludeHidden != nil {
			qrIncludeHidden = *o.IncludeHidden
		}
		qIncludeHidden := swag.FormatBool(qrIncludeHidden)
		if qIncludeHidden != "" {

			if err := r.SetQueryParam("include_hidden", qIncludeHidden); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Q != nil {

		// query param q
		var qrQ string

		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {

			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
