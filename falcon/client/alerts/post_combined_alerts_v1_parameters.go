// Code generated by go-swagger; DO NOT EDIT.

package alerts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// NewPostCombinedAlertsV1Params creates a new PostCombinedAlertsV1Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostCombinedAlertsV1Params() *PostCombinedAlertsV1Params {
	return &PostCombinedAlertsV1Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostCombinedAlertsV1ParamsWithTimeout creates a new PostCombinedAlertsV1Params object
// with the ability to set a timeout on a request.
func NewPostCombinedAlertsV1ParamsWithTimeout(timeout time.Duration) *PostCombinedAlertsV1Params {
	return &PostCombinedAlertsV1Params{
		timeout: timeout,
	}
}

// NewPostCombinedAlertsV1ParamsWithContext creates a new PostCombinedAlertsV1Params object
// with the ability to set a context for a request.
func NewPostCombinedAlertsV1ParamsWithContext(ctx context.Context) *PostCombinedAlertsV1Params {
	return &PostCombinedAlertsV1Params{
		Context: ctx,
	}
}

// NewPostCombinedAlertsV1ParamsWithHTTPClient creates a new PostCombinedAlertsV1Params object
// with the ability to set a custom HTTPClient for a request.
func NewPostCombinedAlertsV1ParamsWithHTTPClient(client *http.Client) *PostCombinedAlertsV1Params {
	return &PostCombinedAlertsV1Params{
		HTTPClient: client,
	}
}

/*
PostCombinedAlertsV1Params contains all the parameters to send to the API endpoint

	for the post combined alerts v1 operation.

	Typically these are written to a http.Request.
*/
type PostCombinedAlertsV1Params struct {

	/* Body.

	     `after`
	- The `after` token is used for pagination of results.
	The `after` token is present when more results are available on the next page.
	To retrieve all Alerts:
	  - Use the `after` token in subsequent requests to fetch the next page.
	  - Continue this process until you reach a page without an `after` token, indicating the last page.

	This value is highly dependant on the `sort` parameter, so if you plan to change the sort order, you will have to re-start your search from the first page (without `after` parameter).

	`filter`
	- Filter Alerts using a query in Falcon Query Language (FQL).Filter fields can be any keyword field that is part of #domain.Alert
	An asterisk wildcard `*` includes all results.
	Empty value means to not filter on anything.
	Most commonly used filter fields that supports exact match: cid, id, aggregate_id, product, type, pattern_id, platform ...
	Most commonly used filter fields that supports wildcard (*): assigned_to_name, assigned_to_uuid, tactic_id, technique ...
	Most commonly filter fields that supports range comparisons (>, <, >=, <=): severity, created_timestamp, timestamp, updated_timestamp...
	All filter fields and operations support negation (!).


	The full list of valid filter options is extensive. Review it in our [documentation inside the Falcon console](https://falcon.crowdstrike.com/documentation/45/falcon-query-language-fql).

	`limit`
	- The maximum number of detections to return in this response (default: 100; max: 1000). Use this parameter together with the `after` parameter to manage pagination of the results.

	`sort`
	- Sort parameter takes the form of `<field|direction>`.

	The sorting fields can be any keyword field that is part of #domain.Alert except for the text based fields. Most commonly used fields for sorting are: timestamp, created_timestamp, updated_timestamp, status, aggregate_id, assigned_to_name, assigned_to_uid, assigned_to_uuid, tactic_id, tactic, technique, technique_id, pattern_id or product.

	By default all the results are sorted by the `created_timestamp` field in the descending order.

	**Important:** The pagination is done on live data in the order defined by the `sort` field parameter (default: `created_timestamp|desc`), so if you want to avoid inconsistent results where the same record might appear on multiple pages (or none), sort only on the fields that do not change over time (e.g. created_timestamp, composite_id, ...).


	*/
	Body *models.DetectsapiPostCombinedAlertsV1RequestSwagger

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post combined alerts v1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostCombinedAlertsV1Params) WithDefaults() *PostCombinedAlertsV1Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post combined alerts v1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostCombinedAlertsV1Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post combined alerts v1 params
func (o *PostCombinedAlertsV1Params) WithTimeout(timeout time.Duration) *PostCombinedAlertsV1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post combined alerts v1 params
func (o *PostCombinedAlertsV1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post combined alerts v1 params
func (o *PostCombinedAlertsV1Params) WithContext(ctx context.Context) *PostCombinedAlertsV1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post combined alerts v1 params
func (o *PostCombinedAlertsV1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post combined alerts v1 params
func (o *PostCombinedAlertsV1Params) WithHTTPClient(client *http.Client) *PostCombinedAlertsV1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post combined alerts v1 params
func (o *PostCombinedAlertsV1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the post combined alerts v1 params
func (o *PostCombinedAlertsV1Params) WithBody(body *models.DetectsapiPostCombinedAlertsV1RequestSwagger) *PostCombinedAlertsV1Params {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the post combined alerts v1 params
func (o *PostCombinedAlertsV1Params) SetBody(body *models.DetectsapiPostCombinedAlertsV1RequestSwagger) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *PostCombinedAlertsV1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
