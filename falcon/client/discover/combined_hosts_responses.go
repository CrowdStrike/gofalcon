// Code generated by go-swagger; DO NOT EDIT.

package discover

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CombinedHostsReader is a Reader for the CombinedHosts structure.
type CombinedHostsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CombinedHostsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCombinedHostsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCombinedHostsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCombinedHostsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCombinedHostsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCombinedHostsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /discover/combined/hosts/v1] combined-hosts", response, response.Code())
	}
}

// NewCombinedHostsOK creates a CombinedHostsOK with default headers values
func NewCombinedHostsOK() *CombinedHostsOK {
	return &CombinedHostsOK{}
}

/*
CombinedHostsOK describes a response with status code 200, with default header values.

OK
*/
type CombinedHostsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainDiscoverAPICombinedHostsResponse
}

// IsSuccess returns true when this combined hosts o k response has a 2xx status code
func (o *CombinedHostsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this combined hosts o k response has a 3xx status code
func (o *CombinedHostsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined hosts o k response has a 4xx status code
func (o *CombinedHostsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this combined hosts o k response has a 5xx status code
func (o *CombinedHostsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this combined hosts o k response a status code equal to that given
func (o *CombinedHostsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the combined hosts o k response
func (o *CombinedHostsOK) Code() int {
	return 200
}

func (o *CombinedHostsOK) Error() string {
	return fmt.Sprintf("[GET /discover/combined/hosts/v1][%d] combinedHostsOK  %+v", 200, o.Payload)
}

func (o *CombinedHostsOK) String() string {
	return fmt.Sprintf("[GET /discover/combined/hosts/v1][%d] combinedHostsOK  %+v", 200, o.Payload)
}

func (o *CombinedHostsOK) GetPayload() *models.DomainDiscoverAPICombinedHostsResponse {
	return o.Payload
}

func (o *CombinedHostsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainDiscoverAPICombinedHostsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedHostsBadRequest creates a CombinedHostsBadRequest with default headers values
func NewCombinedHostsBadRequest() *CombinedHostsBadRequest {
	return &CombinedHostsBadRequest{}
}

/*
CombinedHostsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CombinedHostsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this combined hosts bad request response has a 2xx status code
func (o *CombinedHostsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined hosts bad request response has a 3xx status code
func (o *CombinedHostsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined hosts bad request response has a 4xx status code
func (o *CombinedHostsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this combined hosts bad request response has a 5xx status code
func (o *CombinedHostsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this combined hosts bad request response a status code equal to that given
func (o *CombinedHostsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the combined hosts bad request response
func (o *CombinedHostsBadRequest) Code() int {
	return 400
}

func (o *CombinedHostsBadRequest) Error() string {
	return fmt.Sprintf("[GET /discover/combined/hosts/v1][%d] combinedHostsBadRequest  %+v", 400, o.Payload)
}

func (o *CombinedHostsBadRequest) String() string {
	return fmt.Sprintf("[GET /discover/combined/hosts/v1][%d] combinedHostsBadRequest  %+v", 400, o.Payload)
}

func (o *CombinedHostsBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CombinedHostsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedHostsForbidden creates a CombinedHostsForbidden with default headers values
func NewCombinedHostsForbidden() *CombinedHostsForbidden {
	return &CombinedHostsForbidden{}
}

/*
CombinedHostsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CombinedHostsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this combined hosts forbidden response has a 2xx status code
func (o *CombinedHostsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined hosts forbidden response has a 3xx status code
func (o *CombinedHostsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined hosts forbidden response has a 4xx status code
func (o *CombinedHostsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this combined hosts forbidden response has a 5xx status code
func (o *CombinedHostsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this combined hosts forbidden response a status code equal to that given
func (o *CombinedHostsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the combined hosts forbidden response
func (o *CombinedHostsForbidden) Code() int {
	return 403
}

func (o *CombinedHostsForbidden) Error() string {
	return fmt.Sprintf("[GET /discover/combined/hosts/v1][%d] combinedHostsForbidden  %+v", 403, o.Payload)
}

func (o *CombinedHostsForbidden) String() string {
	return fmt.Sprintf("[GET /discover/combined/hosts/v1][%d] combinedHostsForbidden  %+v", 403, o.Payload)
}

func (o *CombinedHostsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CombinedHostsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedHostsTooManyRequests creates a CombinedHostsTooManyRequests with default headers values
func NewCombinedHostsTooManyRequests() *CombinedHostsTooManyRequests {
	return &CombinedHostsTooManyRequests{}
}

/*
CombinedHostsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CombinedHostsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this combined hosts too many requests response has a 2xx status code
func (o *CombinedHostsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined hosts too many requests response has a 3xx status code
func (o *CombinedHostsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined hosts too many requests response has a 4xx status code
func (o *CombinedHostsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this combined hosts too many requests response has a 5xx status code
func (o *CombinedHostsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this combined hosts too many requests response a status code equal to that given
func (o *CombinedHostsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the combined hosts too many requests response
func (o *CombinedHostsTooManyRequests) Code() int {
	return 429
}

func (o *CombinedHostsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /discover/combined/hosts/v1][%d] combinedHostsTooManyRequests  %+v", 429, o.Payload)
}

func (o *CombinedHostsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /discover/combined/hosts/v1][%d] combinedHostsTooManyRequests  %+v", 429, o.Payload)
}

func (o *CombinedHostsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CombinedHostsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCombinedHostsInternalServerError creates a CombinedHostsInternalServerError with default headers values
func NewCombinedHostsInternalServerError() *CombinedHostsInternalServerError {
	return &CombinedHostsInternalServerError{}
}

/*
CombinedHostsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CombinedHostsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this combined hosts internal server error response has a 2xx status code
func (o *CombinedHostsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this combined hosts internal server error response has a 3xx status code
func (o *CombinedHostsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this combined hosts internal server error response has a 4xx status code
func (o *CombinedHostsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this combined hosts internal server error response has a 5xx status code
func (o *CombinedHostsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this combined hosts internal server error response a status code equal to that given
func (o *CombinedHostsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the combined hosts internal server error response
func (o *CombinedHostsInternalServerError) Code() int {
	return 500
}

func (o *CombinedHostsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /discover/combined/hosts/v1][%d] combinedHostsInternalServerError  %+v", 500, o.Payload)
}

func (o *CombinedHostsInternalServerError) String() string {
	return fmt.Sprintf("[GET /discover/combined/hosts/v1][%d] combinedHostsInternalServerError  %+v", 500, o.Payload)
}

func (o *CombinedHostsInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CombinedHostsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
