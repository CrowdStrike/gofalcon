// Code generated by go-swagger; DO NOT EDIT.

package discover

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCombinedApplicationsParams creates a new CombinedApplicationsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCombinedApplicationsParams() *CombinedApplicationsParams {
	return &CombinedApplicationsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCombinedApplicationsParamsWithTimeout creates a new CombinedApplicationsParams object
// with the ability to set a timeout on a request.
func NewCombinedApplicationsParamsWithTimeout(timeout time.Duration) *CombinedApplicationsParams {
	return &CombinedApplicationsParams{
		timeout: timeout,
	}
}

// NewCombinedApplicationsParamsWithContext creates a new CombinedApplicationsParams object
// with the ability to set a context for a request.
func NewCombinedApplicationsParamsWithContext(ctx context.Context) *CombinedApplicationsParams {
	return &CombinedApplicationsParams{
		Context: ctx,
	}
}

// NewCombinedApplicationsParamsWithHTTPClient creates a new CombinedApplicationsParams object
// with the ability to set a custom HTTPClient for a request.
func NewCombinedApplicationsParamsWithHTTPClient(client *http.Client) *CombinedApplicationsParams {
	return &CombinedApplicationsParams{
		HTTPClient: client,
	}
}

/*
CombinedApplicationsParams contains all the parameters to send to the API endpoint

	for the combined applications operation.

	Typically these are written to a http.Request.
*/
type CombinedApplicationsParams struct {

	/* After.

	   A pagination token used with the `limit` parameter to manage pagination of results. On your first request, don't provide an `after` token. On subsequent requests, provide the `after` token from the previous response to continue from that place in the results.
	*/
	After *string

	/* Facet.

	     Select various details blocks to be returned for each application entity. Supported values:

	<ul><li>browser_extension</li><li>host_info</li><li>install_usage</li><li>package</li><li>ide_extension</li></ul>
	*/
	Facet []string

	/* Filter.

	     Search for applications in your environment by providing an FQL filter.
					Available filter fields that support exact match: name, version, vendor, name_vendor, name_vendor_version, first_seen_timestamp, installation_timestamp, architectures, installation_paths, versioning_scheme, groups, is_normalized, last_used_user_sid, last_used_user_name, last_used_file_name, last_used_file_hash, last_used_timestamp, last_updated_timestamp, is_suspicious, host.id, host.platform_name, host.hostname, cid, host.os_version, host.machine_domain, host.ou, host.site_name, host.country, host.current_mac_address, host.current_network_prefix, host.tags, host.groups, host.product_type_desc, host.kernel_version, host.system_manufacturer, host.internet_exposure, host.agent_version, host.external_ip, host.aid
					Available filter fields that supports wildcard (*): name, version, vendor, name_vendor, name_vendor_version, architectures, installation_paths, groups, last_used_user_sid, last_used_user_name, last_used_file_name, last_used_file_hash, host.platform_name, host.hostname, cid, host.os_version, host.machine_domain, host.ou, host.site_name, host.country, host.current_mac_address, host.current_network_prefix, host.tags, host.groups, host.product_type_desc, host.kernel_version, host.system_manufacturer, host.internet_exposure, host.agent_version, host.external_ip, host.aid
					Available filter fields that supports range comparisons (>, <, >=, <=): first_seen_timestamp, installation_timestamp, last_used_timestamp, last_updated_timestamp
					All filter fields and operations supports negation (!).
	*/
	Filter string

	/* Limit.

	   The number of application ids to return in this response (Min: 1, Max: 1000, Default: 100). Use with the `after` parameter to manage pagination of results.
	*/
	Limit *int64

	/* Sort.

	   Sort applications by their properties. A single sort field is allowed.
	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the combined applications params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CombinedApplicationsParams) WithDefaults() *CombinedApplicationsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the combined applications params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CombinedApplicationsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the combined applications params
func (o *CombinedApplicationsParams) WithTimeout(timeout time.Duration) *CombinedApplicationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the combined applications params
func (o *CombinedApplicationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the combined applications params
func (o *CombinedApplicationsParams) WithContext(ctx context.Context) *CombinedApplicationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the combined applications params
func (o *CombinedApplicationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the combined applications params
func (o *CombinedApplicationsParams) WithHTTPClient(client *http.Client) *CombinedApplicationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the combined applications params
func (o *CombinedApplicationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the combined applications params
func (o *CombinedApplicationsParams) WithAfter(after *string) *CombinedApplicationsParams {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the combined applications params
func (o *CombinedApplicationsParams) SetAfter(after *string) {
	o.After = after
}

// WithFacet adds the facet to the combined applications params
func (o *CombinedApplicationsParams) WithFacet(facet []string) *CombinedApplicationsParams {
	o.SetFacet(facet)
	return o
}

// SetFacet adds the facet to the combined applications params
func (o *CombinedApplicationsParams) SetFacet(facet []string) {
	o.Facet = facet
}

// WithFilter adds the filter to the combined applications params
func (o *CombinedApplicationsParams) WithFilter(filter string) *CombinedApplicationsParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the combined applications params
func (o *CombinedApplicationsParams) SetFilter(filter string) {
	o.Filter = filter
}

// WithLimit adds the limit to the combined applications params
func (o *CombinedApplicationsParams) WithLimit(limit *int64) *CombinedApplicationsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the combined applications params
func (o *CombinedApplicationsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithSort adds the sort to the combined applications params
func (o *CombinedApplicationsParams) WithSort(sort *string) *CombinedApplicationsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the combined applications params
func (o *CombinedApplicationsParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *CombinedApplicationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter string

		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := qrAfter
		if qAfter != "" {

			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}
	}

	if o.Facet != nil {

		// binding items for facet
		joinedFacet := o.bindParamFacet(reg)

		// query array param facet
		if err := r.SetQueryParam("facet", joinedFacet...); err != nil {
			return err
		}
	}

	// query param filter
	qrFilter := o.Filter
	qFilter := qrFilter
	if qFilter != "" {

		if err := r.SetQueryParam("filter", qFilter); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamCombinedApplications binds the parameter facet
func (o *CombinedApplicationsParams) bindParamFacet(formats strfmt.Registry) []string {
	facetIR := o.Facet

	var facetIC []string
	for _, facetIIR := range facetIR { // explode []string

		facetIIV := facetIIR // string as string
		facetIC = append(facetIC, facetIIV)
	}

	// items.CollectionFormat: "multi"
	facetIS := swag.JoinByFormat(facetIC, "multi")

	return facetIS
}
