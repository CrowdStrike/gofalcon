// Code generated by go-swagger; DO NOT EDIT.

package cloud_security_detections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCspmEvaluationsIomQueriesParams creates a new CspmEvaluationsIomQueriesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCspmEvaluationsIomQueriesParams() *CspmEvaluationsIomQueriesParams {
	return &CspmEvaluationsIomQueriesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCspmEvaluationsIomQueriesParamsWithTimeout creates a new CspmEvaluationsIomQueriesParams object
// with the ability to set a timeout on a request.
func NewCspmEvaluationsIomQueriesParamsWithTimeout(timeout time.Duration) *CspmEvaluationsIomQueriesParams {
	return &CspmEvaluationsIomQueriesParams{
		timeout: timeout,
	}
}

// NewCspmEvaluationsIomQueriesParamsWithContext creates a new CspmEvaluationsIomQueriesParams object
// with the ability to set a context for a request.
func NewCspmEvaluationsIomQueriesParamsWithContext(ctx context.Context) *CspmEvaluationsIomQueriesParams {
	return &CspmEvaluationsIomQueriesParams{
		Context: ctx,
	}
}

// NewCspmEvaluationsIomQueriesParamsWithHTTPClient creates a new CspmEvaluationsIomQueriesParams object
// with the ability to set a custom HTTPClient for a request.
func NewCspmEvaluationsIomQueriesParamsWithHTTPClient(client *http.Client) *CspmEvaluationsIomQueriesParams {
	return &CspmEvaluationsIomQueriesParams{
		HTTPClient: client,
	}
}

/*
CspmEvaluationsIomQueriesParams contains all the parameters to send to the API endpoint

	for the cspm evaluations iom queries operation.

	Typically these are written to a http.Request.
*/
type CspmEvaluationsIomQueriesParams struct {

	/* After.

	   token-based pagination. Use for paginating through an entire result set. Use only one of 'offset' and 'after' parameters for paginating
	*/
	After *string

	/* Filter.

	     FQL string to filter results in Falcon Query Language (FQL). Supported fields:
	- `account_id`
	- `account_name`
	- `applicable_profile`
	- `attack_type`
	- `benchmark_name`
	- `benchmark_version`
	- `business_impact`
	- `cid`
	- `cloud_group`
	- `cloud_label`
	- `cloud_label_id`
	- `cloud_provider`
	- `cloud_scope`
	- `created_at`
	- `environment`
	- `extension_status`
	- `first_detected`
	- `framework`
	- `last_detected`
	- `policy_id`
	- `policy_name`
	- `policy_uuid`
	- `region`
	- `requirement`
	- `requirement_name`
	- `resource_gcrn`
	- `resource_id`
	- `resource_status`
	- `resource_type`
	- `resource_type_name`
	- `rule_group`
	- `rule_id`
	- `rule_name`
	- `rule_origin`
	- `rule_remediation`
	- `section`
	- `service`
	- `service_category`
	- `severity`
	- `status`
	- `suppressed_by`
	- `suppression_reason`
	- `tactic_id`
	- `tactic_name`
	- `tag_key`
	- `tag_value`
	- `tags`
	- `technique_id`
	- `technique_name`
	*/
	Filter *string

	/* Limit.

	   The maximum number of items to return. When not specified or 0, 500 is used. When larger than 1000, 1000 is used.

	   Default: 500
	*/
	Limit *int64

	/* Offset.

	   Offset returned assets
	*/
	Offset *int64

	/* Sort.

	     The field to sort on. Use `|asc` or `|desc` suffix to specify sort direction.Supported fields:
	- `account_id`
	- `account_name`
	- `applicable_profile`
	- `attack_type`
	- `benchmark_name`
	- `benchmark_version`
	- `business_impact`
	- `cid`
	- `cloud_group`
	- `cloud_label`
	- `cloud_label_id`
	- `cloud_provider`
	- `cloud_scope`
	- `created_at`
	- `environment`
	- `extension_status`
	- `first_detected`
	- `framework`
	- `last_detected`
	- `policy_id`
	- `policy_name`
	- `policy_uuid`
	- `region`
	- `requirement`
	- `requirement_name`
	- `resource_gcrn`
	- `resource_id`
	- `resource_status`
	- `resource_type`
	- `resource_type_name`
	- `rule_group`
	- `rule_id`
	- `rule_name`
	- `rule_origin`
	- `rule_remediation`
	- `section`
	- `service`
	- `service_category`
	- `severity`
	- `status`
	- `suppressed_by`
	- `suppression_reason`
	- `tactic_id`
	- `tactic_name`
	- `tag_key`
	- `tag_value`
	- `tags`
	- `technique_id`
	- `technique_name`
	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cspm evaluations iom queries params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CspmEvaluationsIomQueriesParams) WithDefaults() *CspmEvaluationsIomQueriesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cspm evaluations iom queries params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CspmEvaluationsIomQueriesParams) SetDefaults() {
	var (
		limitDefault = int64(500)
	)

	val := CspmEvaluationsIomQueriesParams{
		Limit: &limitDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the cspm evaluations iom queries params
func (o *CspmEvaluationsIomQueriesParams) WithTimeout(timeout time.Duration) *CspmEvaluationsIomQueriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cspm evaluations iom queries params
func (o *CspmEvaluationsIomQueriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cspm evaluations iom queries params
func (o *CspmEvaluationsIomQueriesParams) WithContext(ctx context.Context) *CspmEvaluationsIomQueriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cspm evaluations iom queries params
func (o *CspmEvaluationsIomQueriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cspm evaluations iom queries params
func (o *CspmEvaluationsIomQueriesParams) WithHTTPClient(client *http.Client) *CspmEvaluationsIomQueriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cspm evaluations iom queries params
func (o *CspmEvaluationsIomQueriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the cspm evaluations iom queries params
func (o *CspmEvaluationsIomQueriesParams) WithAfter(after *string) *CspmEvaluationsIomQueriesParams {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the cspm evaluations iom queries params
func (o *CspmEvaluationsIomQueriesParams) SetAfter(after *string) {
	o.After = after
}

// WithFilter adds the filter to the cspm evaluations iom queries params
func (o *CspmEvaluationsIomQueriesParams) WithFilter(filter *string) *CspmEvaluationsIomQueriesParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the cspm evaluations iom queries params
func (o *CspmEvaluationsIomQueriesParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithLimit adds the limit to the cspm evaluations iom queries params
func (o *CspmEvaluationsIomQueriesParams) WithLimit(limit *int64) *CspmEvaluationsIomQueriesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the cspm evaluations iom queries params
func (o *CspmEvaluationsIomQueriesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the cspm evaluations iom queries params
func (o *CspmEvaluationsIomQueriesParams) WithOffset(offset *int64) *CspmEvaluationsIomQueriesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the cspm evaluations iom queries params
func (o *CspmEvaluationsIomQueriesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithSort adds the sort to the cspm evaluations iom queries params
func (o *CspmEvaluationsIomQueriesParams) WithSort(sort *string) *CspmEvaluationsIomQueriesParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the cspm evaluations iom queries params
func (o *CspmEvaluationsIomQueriesParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *CspmEvaluationsIomQueriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter string

		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := qrAfter
		if qAfter != "" {

			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
