// Code generated by go-swagger; DO NOT EDIT.

package cloud_security_detections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CspmEvaluationsIomQueriesReader is a Reader for the CspmEvaluationsIomQueries structure.
type CspmEvaluationsIomQueriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CspmEvaluationsIomQueriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCspmEvaluationsIomQueriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCspmEvaluationsIomQueriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCspmEvaluationsIomQueriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewCspmEvaluationsIomQueriesRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCspmEvaluationsIomQueriesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCspmEvaluationsIomQueriesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cloud-security-evaluations/queries/ioms/v1] cspm-evaluations-iom-queries", response, response.Code())
	}
}

// NewCspmEvaluationsIomQueriesOK creates a CspmEvaluationsIomQueriesOK with default headers values
func NewCspmEvaluationsIomQueriesOK() *CspmEvaluationsIomQueriesOK {
	return &CspmEvaluationsIomQueriesOK{}
}

/*
CspmEvaluationsIomQueriesOK describes a response with status code 200, with default header values.

OK
*/
type CspmEvaluationsIomQueriesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.EvaluationsQueryIOMsResponse
}

// IsSuccess returns true when this cspm evaluations iom queries o k response has a 2xx status code
func (o *CspmEvaluationsIomQueriesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cspm evaluations iom queries o k response has a 3xx status code
func (o *CspmEvaluationsIomQueriesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cspm evaluations iom queries o k response has a 4xx status code
func (o *CspmEvaluationsIomQueriesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cspm evaluations iom queries o k response has a 5xx status code
func (o *CspmEvaluationsIomQueriesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cspm evaluations iom queries o k response a status code equal to that given
func (o *CspmEvaluationsIomQueriesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the cspm evaluations iom queries o k response
func (o *CspmEvaluationsIomQueriesOK) Code() int {
	return 200
}

func (o *CspmEvaluationsIomQueriesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/queries/ioms/v1][%d] cspmEvaluationsIomQueriesOK %s", 200, payload)
}

func (o *CspmEvaluationsIomQueriesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/queries/ioms/v1][%d] cspmEvaluationsIomQueriesOK %s", 200, payload)
}

func (o *CspmEvaluationsIomQueriesOK) GetPayload() *models.EvaluationsQueryIOMsResponse {
	return o.Payload
}

func (o *CspmEvaluationsIomQueriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.EvaluationsQueryIOMsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCspmEvaluationsIomQueriesBadRequest creates a CspmEvaluationsIomQueriesBadRequest with default headers values
func NewCspmEvaluationsIomQueriesBadRequest() *CspmEvaluationsIomQueriesBadRequest {
	return &CspmEvaluationsIomQueriesBadRequest{}
}

/*
CspmEvaluationsIomQueriesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CspmEvaluationsIomQueriesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RestCursorResponseFields
}

// IsSuccess returns true when this cspm evaluations iom queries bad request response has a 2xx status code
func (o *CspmEvaluationsIomQueriesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cspm evaluations iom queries bad request response has a 3xx status code
func (o *CspmEvaluationsIomQueriesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cspm evaluations iom queries bad request response has a 4xx status code
func (o *CspmEvaluationsIomQueriesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cspm evaluations iom queries bad request response has a 5xx status code
func (o *CspmEvaluationsIomQueriesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cspm evaluations iom queries bad request response a status code equal to that given
func (o *CspmEvaluationsIomQueriesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the cspm evaluations iom queries bad request response
func (o *CspmEvaluationsIomQueriesBadRequest) Code() int {
	return 400
}

func (o *CspmEvaluationsIomQueriesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/queries/ioms/v1][%d] cspmEvaluationsIomQueriesBadRequest %s", 400, payload)
}

func (o *CspmEvaluationsIomQueriesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/queries/ioms/v1][%d] cspmEvaluationsIomQueriesBadRequest %s", 400, payload)
}

func (o *CspmEvaluationsIomQueriesBadRequest) GetPayload() *models.RestCursorResponseFields {
	return o.Payload
}

func (o *CspmEvaluationsIomQueriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RestCursorResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCspmEvaluationsIomQueriesForbidden creates a CspmEvaluationsIomQueriesForbidden with default headers values
func NewCspmEvaluationsIomQueriesForbidden() *CspmEvaluationsIomQueriesForbidden {
	return &CspmEvaluationsIomQueriesForbidden{}
}

/*
CspmEvaluationsIomQueriesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CspmEvaluationsIomQueriesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this cspm evaluations iom queries forbidden response has a 2xx status code
func (o *CspmEvaluationsIomQueriesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cspm evaluations iom queries forbidden response has a 3xx status code
func (o *CspmEvaluationsIomQueriesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cspm evaluations iom queries forbidden response has a 4xx status code
func (o *CspmEvaluationsIomQueriesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cspm evaluations iom queries forbidden response has a 5xx status code
func (o *CspmEvaluationsIomQueriesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cspm evaluations iom queries forbidden response a status code equal to that given
func (o *CspmEvaluationsIomQueriesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the cspm evaluations iom queries forbidden response
func (o *CspmEvaluationsIomQueriesForbidden) Code() int {
	return 403
}

func (o *CspmEvaluationsIomQueriesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/queries/ioms/v1][%d] cspmEvaluationsIomQueriesForbidden %s", 403, payload)
}

func (o *CspmEvaluationsIomQueriesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/queries/ioms/v1][%d] cspmEvaluationsIomQueriesForbidden %s", 403, payload)
}

func (o *CspmEvaluationsIomQueriesForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CspmEvaluationsIomQueriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCspmEvaluationsIomQueriesRequestTimeout creates a CspmEvaluationsIomQueriesRequestTimeout with default headers values
func NewCspmEvaluationsIomQueriesRequestTimeout() *CspmEvaluationsIomQueriesRequestTimeout {
	return &CspmEvaluationsIomQueriesRequestTimeout{}
}

/*
CspmEvaluationsIomQueriesRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type CspmEvaluationsIomQueriesRequestTimeout struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RestCursorResponseFields
}

// IsSuccess returns true when this cspm evaluations iom queries request timeout response has a 2xx status code
func (o *CspmEvaluationsIomQueriesRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cspm evaluations iom queries request timeout response has a 3xx status code
func (o *CspmEvaluationsIomQueriesRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cspm evaluations iom queries request timeout response has a 4xx status code
func (o *CspmEvaluationsIomQueriesRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this cspm evaluations iom queries request timeout response has a 5xx status code
func (o *CspmEvaluationsIomQueriesRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this cspm evaluations iom queries request timeout response a status code equal to that given
func (o *CspmEvaluationsIomQueriesRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the cspm evaluations iom queries request timeout response
func (o *CspmEvaluationsIomQueriesRequestTimeout) Code() int {
	return 408
}

func (o *CspmEvaluationsIomQueriesRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/queries/ioms/v1][%d] cspmEvaluationsIomQueriesRequestTimeout %s", 408, payload)
}

func (o *CspmEvaluationsIomQueriesRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/queries/ioms/v1][%d] cspmEvaluationsIomQueriesRequestTimeout %s", 408, payload)
}

func (o *CspmEvaluationsIomQueriesRequestTimeout) GetPayload() *models.RestCursorResponseFields {
	return o.Payload
}

func (o *CspmEvaluationsIomQueriesRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RestCursorResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCspmEvaluationsIomQueriesTooManyRequests creates a CspmEvaluationsIomQueriesTooManyRequests with default headers values
func NewCspmEvaluationsIomQueriesTooManyRequests() *CspmEvaluationsIomQueriesTooManyRequests {
	return &CspmEvaluationsIomQueriesTooManyRequests{}
}

/*
CspmEvaluationsIomQueriesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CspmEvaluationsIomQueriesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this cspm evaluations iom queries too many requests response has a 2xx status code
func (o *CspmEvaluationsIomQueriesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cspm evaluations iom queries too many requests response has a 3xx status code
func (o *CspmEvaluationsIomQueriesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cspm evaluations iom queries too many requests response has a 4xx status code
func (o *CspmEvaluationsIomQueriesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this cspm evaluations iom queries too many requests response has a 5xx status code
func (o *CspmEvaluationsIomQueriesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this cspm evaluations iom queries too many requests response a status code equal to that given
func (o *CspmEvaluationsIomQueriesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the cspm evaluations iom queries too many requests response
func (o *CspmEvaluationsIomQueriesTooManyRequests) Code() int {
	return 429
}

func (o *CspmEvaluationsIomQueriesTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/queries/ioms/v1][%d] cspmEvaluationsIomQueriesTooManyRequests %s", 429, payload)
}

func (o *CspmEvaluationsIomQueriesTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/queries/ioms/v1][%d] cspmEvaluationsIomQueriesTooManyRequests %s", 429, payload)
}

func (o *CspmEvaluationsIomQueriesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CspmEvaluationsIomQueriesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCspmEvaluationsIomQueriesInternalServerError creates a CspmEvaluationsIomQueriesInternalServerError with default headers values
func NewCspmEvaluationsIomQueriesInternalServerError() *CspmEvaluationsIomQueriesInternalServerError {
	return &CspmEvaluationsIomQueriesInternalServerError{}
}

/*
CspmEvaluationsIomQueriesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CspmEvaluationsIomQueriesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RestCursorResponseFields
}

// IsSuccess returns true when this cspm evaluations iom queries internal server error response has a 2xx status code
func (o *CspmEvaluationsIomQueriesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cspm evaluations iom queries internal server error response has a 3xx status code
func (o *CspmEvaluationsIomQueriesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cspm evaluations iom queries internal server error response has a 4xx status code
func (o *CspmEvaluationsIomQueriesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cspm evaluations iom queries internal server error response has a 5xx status code
func (o *CspmEvaluationsIomQueriesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cspm evaluations iom queries internal server error response a status code equal to that given
func (o *CspmEvaluationsIomQueriesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the cspm evaluations iom queries internal server error response
func (o *CspmEvaluationsIomQueriesInternalServerError) Code() int {
	return 500
}

func (o *CspmEvaluationsIomQueriesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/queries/ioms/v1][%d] cspmEvaluationsIomQueriesInternalServerError %s", 500, payload)
}

func (o *CspmEvaluationsIomQueriesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/queries/ioms/v1][%d] cspmEvaluationsIomQueriesInternalServerError %s", 500, payload)
}

func (o *CspmEvaluationsIomQueriesInternalServerError) GetPayload() *models.RestCursorResponseFields {
	return o.Payload
}

func (o *CspmEvaluationsIomQueriesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RestCursorResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
