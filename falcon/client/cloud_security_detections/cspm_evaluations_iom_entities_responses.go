// Code generated by go-swagger; DO NOT EDIT.

package cloud_security_detections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CspmEvaluationsIomEntitiesReader is a Reader for the CspmEvaluationsIomEntities structure.
type CspmEvaluationsIomEntitiesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CspmEvaluationsIomEntitiesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCspmEvaluationsIomEntitiesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCspmEvaluationsIomEntitiesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCspmEvaluationsIomEntitiesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCspmEvaluationsIomEntitiesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewCspmEvaluationsIomEntitiesRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCspmEvaluationsIomEntitiesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCspmEvaluationsIomEntitiesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cloud-security-evaluations/entities/ioms/v1] cspm-evaluations-iom-entities", response, response.Code())
	}
}

// NewCspmEvaluationsIomEntitiesOK creates a CspmEvaluationsIomEntitiesOK with default headers values
func NewCspmEvaluationsIomEntitiesOK() *CspmEvaluationsIomEntitiesOK {
	return &CspmEvaluationsIomEntitiesOK{}
}

/*
CspmEvaluationsIomEntitiesOK describes a response with status code 200, with default header values.

OK
*/
type CspmEvaluationsIomEntitiesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.EvaluationsGetIOMsResponse
}

// IsSuccess returns true when this cspm evaluations iom entities o k response has a 2xx status code
func (o *CspmEvaluationsIomEntitiesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cspm evaluations iom entities o k response has a 3xx status code
func (o *CspmEvaluationsIomEntitiesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cspm evaluations iom entities o k response has a 4xx status code
func (o *CspmEvaluationsIomEntitiesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cspm evaluations iom entities o k response has a 5xx status code
func (o *CspmEvaluationsIomEntitiesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cspm evaluations iom entities o k response a status code equal to that given
func (o *CspmEvaluationsIomEntitiesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the cspm evaluations iom entities o k response
func (o *CspmEvaluationsIomEntitiesOK) Code() int {
	return 200
}

func (o *CspmEvaluationsIomEntitiesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/entities/ioms/v1][%d] cspmEvaluationsIomEntitiesOK %s", 200, payload)
}

func (o *CspmEvaluationsIomEntitiesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/entities/ioms/v1][%d] cspmEvaluationsIomEntitiesOK %s", 200, payload)
}

func (o *CspmEvaluationsIomEntitiesOK) GetPayload() *models.EvaluationsGetIOMsResponse {
	return o.Payload
}

func (o *CspmEvaluationsIomEntitiesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.EvaluationsGetIOMsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCspmEvaluationsIomEntitiesBadRequest creates a CspmEvaluationsIomEntitiesBadRequest with default headers values
func NewCspmEvaluationsIomEntitiesBadRequest() *CspmEvaluationsIomEntitiesBadRequest {
	return &CspmEvaluationsIomEntitiesBadRequest{}
}

/*
CspmEvaluationsIomEntitiesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CspmEvaluationsIomEntitiesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RestCursorResponseFields
}

// IsSuccess returns true when this cspm evaluations iom entities bad request response has a 2xx status code
func (o *CspmEvaluationsIomEntitiesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cspm evaluations iom entities bad request response has a 3xx status code
func (o *CspmEvaluationsIomEntitiesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cspm evaluations iom entities bad request response has a 4xx status code
func (o *CspmEvaluationsIomEntitiesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cspm evaluations iom entities bad request response has a 5xx status code
func (o *CspmEvaluationsIomEntitiesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cspm evaluations iom entities bad request response a status code equal to that given
func (o *CspmEvaluationsIomEntitiesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the cspm evaluations iom entities bad request response
func (o *CspmEvaluationsIomEntitiesBadRequest) Code() int {
	return 400
}

func (o *CspmEvaluationsIomEntitiesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/entities/ioms/v1][%d] cspmEvaluationsIomEntitiesBadRequest %s", 400, payload)
}

func (o *CspmEvaluationsIomEntitiesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/entities/ioms/v1][%d] cspmEvaluationsIomEntitiesBadRequest %s", 400, payload)
}

func (o *CspmEvaluationsIomEntitiesBadRequest) GetPayload() *models.RestCursorResponseFields {
	return o.Payload
}

func (o *CspmEvaluationsIomEntitiesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RestCursorResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCspmEvaluationsIomEntitiesForbidden creates a CspmEvaluationsIomEntitiesForbidden with default headers values
func NewCspmEvaluationsIomEntitiesForbidden() *CspmEvaluationsIomEntitiesForbidden {
	return &CspmEvaluationsIomEntitiesForbidden{}
}

/*
CspmEvaluationsIomEntitiesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CspmEvaluationsIomEntitiesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this cspm evaluations iom entities forbidden response has a 2xx status code
func (o *CspmEvaluationsIomEntitiesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cspm evaluations iom entities forbidden response has a 3xx status code
func (o *CspmEvaluationsIomEntitiesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cspm evaluations iom entities forbidden response has a 4xx status code
func (o *CspmEvaluationsIomEntitiesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cspm evaluations iom entities forbidden response has a 5xx status code
func (o *CspmEvaluationsIomEntitiesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cspm evaluations iom entities forbidden response a status code equal to that given
func (o *CspmEvaluationsIomEntitiesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the cspm evaluations iom entities forbidden response
func (o *CspmEvaluationsIomEntitiesForbidden) Code() int {
	return 403
}

func (o *CspmEvaluationsIomEntitiesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/entities/ioms/v1][%d] cspmEvaluationsIomEntitiesForbidden %s", 403, payload)
}

func (o *CspmEvaluationsIomEntitiesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/entities/ioms/v1][%d] cspmEvaluationsIomEntitiesForbidden %s", 403, payload)
}

func (o *CspmEvaluationsIomEntitiesForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CspmEvaluationsIomEntitiesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCspmEvaluationsIomEntitiesNotFound creates a CspmEvaluationsIomEntitiesNotFound with default headers values
func NewCspmEvaluationsIomEntitiesNotFound() *CspmEvaluationsIomEntitiesNotFound {
	return &CspmEvaluationsIomEntitiesNotFound{}
}

/*
CspmEvaluationsIomEntitiesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CspmEvaluationsIomEntitiesNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RestCursorQueryResponse
}

// IsSuccess returns true when this cspm evaluations iom entities not found response has a 2xx status code
func (o *CspmEvaluationsIomEntitiesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cspm evaluations iom entities not found response has a 3xx status code
func (o *CspmEvaluationsIomEntitiesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cspm evaluations iom entities not found response has a 4xx status code
func (o *CspmEvaluationsIomEntitiesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this cspm evaluations iom entities not found response has a 5xx status code
func (o *CspmEvaluationsIomEntitiesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this cspm evaluations iom entities not found response a status code equal to that given
func (o *CspmEvaluationsIomEntitiesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the cspm evaluations iom entities not found response
func (o *CspmEvaluationsIomEntitiesNotFound) Code() int {
	return 404
}

func (o *CspmEvaluationsIomEntitiesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/entities/ioms/v1][%d] cspmEvaluationsIomEntitiesNotFound %s", 404, payload)
}

func (o *CspmEvaluationsIomEntitiesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/entities/ioms/v1][%d] cspmEvaluationsIomEntitiesNotFound %s", 404, payload)
}

func (o *CspmEvaluationsIomEntitiesNotFound) GetPayload() *models.RestCursorQueryResponse {
	return o.Payload
}

func (o *CspmEvaluationsIomEntitiesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RestCursorQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCspmEvaluationsIomEntitiesRequestTimeout creates a CspmEvaluationsIomEntitiesRequestTimeout with default headers values
func NewCspmEvaluationsIomEntitiesRequestTimeout() *CspmEvaluationsIomEntitiesRequestTimeout {
	return &CspmEvaluationsIomEntitiesRequestTimeout{}
}

/*
CspmEvaluationsIomEntitiesRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type CspmEvaluationsIomEntitiesRequestTimeout struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RestCursorResponseFields
}

// IsSuccess returns true when this cspm evaluations iom entities request timeout response has a 2xx status code
func (o *CspmEvaluationsIomEntitiesRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cspm evaluations iom entities request timeout response has a 3xx status code
func (o *CspmEvaluationsIomEntitiesRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cspm evaluations iom entities request timeout response has a 4xx status code
func (o *CspmEvaluationsIomEntitiesRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this cspm evaluations iom entities request timeout response has a 5xx status code
func (o *CspmEvaluationsIomEntitiesRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this cspm evaluations iom entities request timeout response a status code equal to that given
func (o *CspmEvaluationsIomEntitiesRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the cspm evaluations iom entities request timeout response
func (o *CspmEvaluationsIomEntitiesRequestTimeout) Code() int {
	return 408
}

func (o *CspmEvaluationsIomEntitiesRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/entities/ioms/v1][%d] cspmEvaluationsIomEntitiesRequestTimeout %s", 408, payload)
}

func (o *CspmEvaluationsIomEntitiesRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/entities/ioms/v1][%d] cspmEvaluationsIomEntitiesRequestTimeout %s", 408, payload)
}

func (o *CspmEvaluationsIomEntitiesRequestTimeout) GetPayload() *models.RestCursorResponseFields {
	return o.Payload
}

func (o *CspmEvaluationsIomEntitiesRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RestCursorResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCspmEvaluationsIomEntitiesTooManyRequests creates a CspmEvaluationsIomEntitiesTooManyRequests with default headers values
func NewCspmEvaluationsIomEntitiesTooManyRequests() *CspmEvaluationsIomEntitiesTooManyRequests {
	return &CspmEvaluationsIomEntitiesTooManyRequests{}
}

/*
CspmEvaluationsIomEntitiesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CspmEvaluationsIomEntitiesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this cspm evaluations iom entities too many requests response has a 2xx status code
func (o *CspmEvaluationsIomEntitiesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cspm evaluations iom entities too many requests response has a 3xx status code
func (o *CspmEvaluationsIomEntitiesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cspm evaluations iom entities too many requests response has a 4xx status code
func (o *CspmEvaluationsIomEntitiesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this cspm evaluations iom entities too many requests response has a 5xx status code
func (o *CspmEvaluationsIomEntitiesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this cspm evaluations iom entities too many requests response a status code equal to that given
func (o *CspmEvaluationsIomEntitiesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the cspm evaluations iom entities too many requests response
func (o *CspmEvaluationsIomEntitiesTooManyRequests) Code() int {
	return 429
}

func (o *CspmEvaluationsIomEntitiesTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/entities/ioms/v1][%d] cspmEvaluationsIomEntitiesTooManyRequests %s", 429, payload)
}

func (o *CspmEvaluationsIomEntitiesTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/entities/ioms/v1][%d] cspmEvaluationsIomEntitiesTooManyRequests %s", 429, payload)
}

func (o *CspmEvaluationsIomEntitiesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CspmEvaluationsIomEntitiesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCspmEvaluationsIomEntitiesInternalServerError creates a CspmEvaluationsIomEntitiesInternalServerError with default headers values
func NewCspmEvaluationsIomEntitiesInternalServerError() *CspmEvaluationsIomEntitiesInternalServerError {
	return &CspmEvaluationsIomEntitiesInternalServerError{}
}

/*
CspmEvaluationsIomEntitiesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CspmEvaluationsIomEntitiesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RestCursorResponseFields
}

// IsSuccess returns true when this cspm evaluations iom entities internal server error response has a 2xx status code
func (o *CspmEvaluationsIomEntitiesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cspm evaluations iom entities internal server error response has a 3xx status code
func (o *CspmEvaluationsIomEntitiesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cspm evaluations iom entities internal server error response has a 4xx status code
func (o *CspmEvaluationsIomEntitiesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cspm evaluations iom entities internal server error response has a 5xx status code
func (o *CspmEvaluationsIomEntitiesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cspm evaluations iom entities internal server error response a status code equal to that given
func (o *CspmEvaluationsIomEntitiesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the cspm evaluations iom entities internal server error response
func (o *CspmEvaluationsIomEntitiesInternalServerError) Code() int {
	return 500
}

func (o *CspmEvaluationsIomEntitiesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/entities/ioms/v1][%d] cspmEvaluationsIomEntitiesInternalServerError %s", 500, payload)
}

func (o *CspmEvaluationsIomEntitiesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cloud-security-evaluations/entities/ioms/v1][%d] cspmEvaluationsIomEntitiesInternalServerError %s", 500, payload)
}

func (o *CspmEvaluationsIomEntitiesInternalServerError) GetPayload() *models.RestCursorResponseFields {
	return o.Payload
}

func (o *CspmEvaluationsIomEntitiesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RestCursorResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
