// Code generated by go-swagger; DO NOT EDIT.

package data_protection_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// EntitiesEnterpriseAccountPatchReader is a Reader for the EntitiesEnterpriseAccountPatch structure.
type EntitiesEnterpriseAccountPatchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EntitiesEnterpriseAccountPatchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEntitiesEnterpriseAccountPatchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEntitiesEnterpriseAccountPatchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEntitiesEnterpriseAccountPatchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewEntitiesEnterpriseAccountPatchTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEntitiesEnterpriseAccountPatchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /data-protection/entities/enterprise-accounts/v1] entities.enterprise-account.patch", response, response.Code())
	}
}

// NewEntitiesEnterpriseAccountPatchOK creates a EntitiesEnterpriseAccountPatchOK with default headers values
func NewEntitiesEnterpriseAccountPatchOK() *EntitiesEnterpriseAccountPatchOK {
	return &EntitiesEnterpriseAccountPatchOK{}
}

/*
EntitiesEnterpriseAccountPatchOK describes a response with status code 200, with default header values.

OK
*/
type EntitiesEnterpriseAccountPatchOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIEnterpriseAccountMSAResponseV1
}

// IsSuccess returns true when this entities enterprise account patch o k response has a 2xx status code
func (o *EntitiesEnterpriseAccountPatchOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this entities enterprise account patch o k response has a 3xx status code
func (o *EntitiesEnterpriseAccountPatchOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities enterprise account patch o k response has a 4xx status code
func (o *EntitiesEnterpriseAccountPatchOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this entities enterprise account patch o k response has a 5xx status code
func (o *EntitiesEnterpriseAccountPatchOK) IsServerError() bool {
	return false
}

// IsCode returns true when this entities enterprise account patch o k response a status code equal to that given
func (o *EntitiesEnterpriseAccountPatchOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the entities enterprise account patch o k response
func (o *EntitiesEnterpriseAccountPatchOK) Code() int {
	return 200
}

func (o *EntitiesEnterpriseAccountPatchOK) Error() string {
	return fmt.Sprintf("[PATCH /data-protection/entities/enterprise-accounts/v1][%d] entitiesEnterpriseAccountPatchOK  %+v", 200, o.Payload)
}

func (o *EntitiesEnterpriseAccountPatchOK) String() string {
	return fmt.Sprintf("[PATCH /data-protection/entities/enterprise-accounts/v1][%d] entitiesEnterpriseAccountPatchOK  %+v", 200, o.Payload)
}

func (o *EntitiesEnterpriseAccountPatchOK) GetPayload() *models.APIEnterpriseAccountMSAResponseV1 {
	return o.Payload
}

func (o *EntitiesEnterpriseAccountPatchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIEnterpriseAccountMSAResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesEnterpriseAccountPatchBadRequest creates a EntitiesEnterpriseAccountPatchBadRequest with default headers values
func NewEntitiesEnterpriseAccountPatchBadRequest() *EntitiesEnterpriseAccountPatchBadRequest {
	return &EntitiesEnterpriseAccountPatchBadRequest{}
}

/*
EntitiesEnterpriseAccountPatchBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type EntitiesEnterpriseAccountPatchBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this entities enterprise account patch bad request response has a 2xx status code
func (o *EntitiesEnterpriseAccountPatchBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities enterprise account patch bad request response has a 3xx status code
func (o *EntitiesEnterpriseAccountPatchBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities enterprise account patch bad request response has a 4xx status code
func (o *EntitiesEnterpriseAccountPatchBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities enterprise account patch bad request response has a 5xx status code
func (o *EntitiesEnterpriseAccountPatchBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this entities enterprise account patch bad request response a status code equal to that given
func (o *EntitiesEnterpriseAccountPatchBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the entities enterprise account patch bad request response
func (o *EntitiesEnterpriseAccountPatchBadRequest) Code() int {
	return 400
}

func (o *EntitiesEnterpriseAccountPatchBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /data-protection/entities/enterprise-accounts/v1][%d] entitiesEnterpriseAccountPatchBadRequest  %+v", 400, o.Payload)
}

func (o *EntitiesEnterpriseAccountPatchBadRequest) String() string {
	return fmt.Sprintf("[PATCH /data-protection/entities/enterprise-accounts/v1][%d] entitiesEnterpriseAccountPatchBadRequest  %+v", 400, o.Payload)
}

func (o *EntitiesEnterpriseAccountPatchBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *EntitiesEnterpriseAccountPatchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesEnterpriseAccountPatchForbidden creates a EntitiesEnterpriseAccountPatchForbidden with default headers values
func NewEntitiesEnterpriseAccountPatchForbidden() *EntitiesEnterpriseAccountPatchForbidden {
	return &EntitiesEnterpriseAccountPatchForbidden{}
}

/*
EntitiesEnterpriseAccountPatchForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type EntitiesEnterpriseAccountPatchForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this entities enterprise account patch forbidden response has a 2xx status code
func (o *EntitiesEnterpriseAccountPatchForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities enterprise account patch forbidden response has a 3xx status code
func (o *EntitiesEnterpriseAccountPatchForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities enterprise account patch forbidden response has a 4xx status code
func (o *EntitiesEnterpriseAccountPatchForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities enterprise account patch forbidden response has a 5xx status code
func (o *EntitiesEnterpriseAccountPatchForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this entities enterprise account patch forbidden response a status code equal to that given
func (o *EntitiesEnterpriseAccountPatchForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the entities enterprise account patch forbidden response
func (o *EntitiesEnterpriseAccountPatchForbidden) Code() int {
	return 403
}

func (o *EntitiesEnterpriseAccountPatchForbidden) Error() string {
	return fmt.Sprintf("[PATCH /data-protection/entities/enterprise-accounts/v1][%d] entitiesEnterpriseAccountPatchForbidden  %+v", 403, o.Payload)
}

func (o *EntitiesEnterpriseAccountPatchForbidden) String() string {
	return fmt.Sprintf("[PATCH /data-protection/entities/enterprise-accounts/v1][%d] entitiesEnterpriseAccountPatchForbidden  %+v", 403, o.Payload)
}

func (o *EntitiesEnterpriseAccountPatchForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *EntitiesEnterpriseAccountPatchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesEnterpriseAccountPatchTooManyRequests creates a EntitiesEnterpriseAccountPatchTooManyRequests with default headers values
func NewEntitiesEnterpriseAccountPatchTooManyRequests() *EntitiesEnterpriseAccountPatchTooManyRequests {
	return &EntitiesEnterpriseAccountPatchTooManyRequests{}
}

/*
EntitiesEnterpriseAccountPatchTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type EntitiesEnterpriseAccountPatchTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this entities enterprise account patch too many requests response has a 2xx status code
func (o *EntitiesEnterpriseAccountPatchTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities enterprise account patch too many requests response has a 3xx status code
func (o *EntitiesEnterpriseAccountPatchTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities enterprise account patch too many requests response has a 4xx status code
func (o *EntitiesEnterpriseAccountPatchTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities enterprise account patch too many requests response has a 5xx status code
func (o *EntitiesEnterpriseAccountPatchTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this entities enterprise account patch too many requests response a status code equal to that given
func (o *EntitiesEnterpriseAccountPatchTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the entities enterprise account patch too many requests response
func (o *EntitiesEnterpriseAccountPatchTooManyRequests) Code() int {
	return 429
}

func (o *EntitiesEnterpriseAccountPatchTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /data-protection/entities/enterprise-accounts/v1][%d] entitiesEnterpriseAccountPatchTooManyRequests  %+v", 429, o.Payload)
}

func (o *EntitiesEnterpriseAccountPatchTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /data-protection/entities/enterprise-accounts/v1][%d] entitiesEnterpriseAccountPatchTooManyRequests  %+v", 429, o.Payload)
}

func (o *EntitiesEnterpriseAccountPatchTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *EntitiesEnterpriseAccountPatchTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesEnterpriseAccountPatchInternalServerError creates a EntitiesEnterpriseAccountPatchInternalServerError with default headers values
func NewEntitiesEnterpriseAccountPatchInternalServerError() *EntitiesEnterpriseAccountPatchInternalServerError {
	return &EntitiesEnterpriseAccountPatchInternalServerError{}
}

/*
EntitiesEnterpriseAccountPatchInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type EntitiesEnterpriseAccountPatchInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this entities enterprise account patch internal server error response has a 2xx status code
func (o *EntitiesEnterpriseAccountPatchInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities enterprise account patch internal server error response has a 3xx status code
func (o *EntitiesEnterpriseAccountPatchInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities enterprise account patch internal server error response has a 4xx status code
func (o *EntitiesEnterpriseAccountPatchInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this entities enterprise account patch internal server error response has a 5xx status code
func (o *EntitiesEnterpriseAccountPatchInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this entities enterprise account patch internal server error response a status code equal to that given
func (o *EntitiesEnterpriseAccountPatchInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the entities enterprise account patch internal server error response
func (o *EntitiesEnterpriseAccountPatchInternalServerError) Code() int {
	return 500
}

func (o *EntitiesEnterpriseAccountPatchInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /data-protection/entities/enterprise-accounts/v1][%d] entitiesEnterpriseAccountPatchInternalServerError  %+v", 500, o.Payload)
}

func (o *EntitiesEnterpriseAccountPatchInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /data-protection/entities/enterprise-accounts/v1][%d] entitiesEnterpriseAccountPatchInternalServerError  %+v", 500, o.Payload)
}

func (o *EntitiesEnterpriseAccountPatchInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *EntitiesEnterpriseAccountPatchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
