// Code generated by go-swagger; DO NOT EDIT.

package data_protection_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new data protection configuration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for data protection configuration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	EntitiesClassificationDeleteV2(params *EntitiesClassificationDeleteV2Params, opts ...ClientOption) (*EntitiesClassificationDeleteV2OK, error)

	EntitiesClassificationGetV2(params *EntitiesClassificationGetV2Params, opts ...ClientOption) (*EntitiesClassificationGetV2OK, error)

	EntitiesClassificationPatchV2(params *EntitiesClassificationPatchV2Params, opts ...ClientOption) (*EntitiesClassificationPatchV2OK, error)

	EntitiesClassificationPostV2(params *EntitiesClassificationPostV2Params, opts ...ClientOption) (*EntitiesClassificationPostV2Created, error)

	EntitiesCloudApplicationCreate(params *EntitiesCloudApplicationCreateParams, opts ...ClientOption) (*EntitiesCloudApplicationCreateOK, error)

	EntitiesCloudApplicationDelete(params *EntitiesCloudApplicationDeleteParams, opts ...ClientOption) (*EntitiesCloudApplicationDeleteOK, error)

	EntitiesCloudApplicationGet(params *EntitiesCloudApplicationGetParams, opts ...ClientOption) (*EntitiesCloudApplicationGetOK, error)

	EntitiesCloudApplicationPatch(params *EntitiesCloudApplicationPatchParams, opts ...ClientOption) (*EntitiesCloudApplicationPatchOK, error)

	EntitiesContentPatternCreate(params *EntitiesContentPatternCreateParams, opts ...ClientOption) (*EntitiesContentPatternCreateOK, error)

	EntitiesContentPatternDelete(params *EntitiesContentPatternDeleteParams, opts ...ClientOption) (*EntitiesContentPatternDeleteOK, error)

	EntitiesContentPatternGet(params *EntitiesContentPatternGetParams, opts ...ClientOption) (*EntitiesContentPatternGetOK, error)

	EntitiesContentPatternPatch(params *EntitiesContentPatternPatchParams, opts ...ClientOption) (*EntitiesContentPatternPatchOK, error)

	EntitiesEnterpriseAccountCreate(params *EntitiesEnterpriseAccountCreateParams, opts ...ClientOption) (*EntitiesEnterpriseAccountCreateOK, error)

	EntitiesEnterpriseAccountDelete(params *EntitiesEnterpriseAccountDeleteParams, opts ...ClientOption) (*EntitiesEnterpriseAccountDeleteOK, error)

	EntitiesEnterpriseAccountGet(params *EntitiesEnterpriseAccountGetParams, opts ...ClientOption) (*EntitiesEnterpriseAccountGetOK, error)

	EntitiesEnterpriseAccountPatch(params *EntitiesEnterpriseAccountPatchParams, opts ...ClientOption) (*EntitiesEnterpriseAccountPatchOK, error)

	EntitiesFileTypeGet(params *EntitiesFileTypeGetParams, opts ...ClientOption) (*EntitiesFileTypeGetOK, error)

	EntitiesPolicyDeleteV2(params *EntitiesPolicyDeleteV2Params, opts ...ClientOption) (*EntitiesPolicyDeleteV2OK, error)

	EntitiesPolicyGetV2(params *EntitiesPolicyGetV2Params, opts ...ClientOption) (*EntitiesPolicyGetV2OK, error)

	EntitiesPolicyPatchV2(params *EntitiesPolicyPatchV2Params, opts ...ClientOption) (*EntitiesPolicyPatchV2OK, error)

	EntitiesPolicyPostV2(params *EntitiesPolicyPostV2Params, opts ...ClientOption) (*EntitiesPolicyPostV2Created, error)

	EntitiesSensitivityLabelCreateV2(params *EntitiesSensitivityLabelCreateV2Params, opts ...ClientOption) (*EntitiesSensitivityLabelCreateV2OK, error)

	EntitiesSensitivityLabelDeleteV2(params *EntitiesSensitivityLabelDeleteV2Params, opts ...ClientOption) (*EntitiesSensitivityLabelDeleteV2OK, error)

	EntitiesSensitivityLabelGetV2(params *EntitiesSensitivityLabelGetV2Params, opts ...ClientOption) (*EntitiesSensitivityLabelGetV2OK, error)

	EntitiesWebLocationCreateV2(params *EntitiesWebLocationCreateV2Params, opts ...ClientOption) (*EntitiesWebLocationCreateV2OK, error)

	EntitiesWebLocationDeleteV2(params *EntitiesWebLocationDeleteV2Params, opts ...ClientOption) (*EntitiesWebLocationDeleteV2OK, error)

	EntitiesWebLocationGetV2(params *EntitiesWebLocationGetV2Params, opts ...ClientOption) (*EntitiesWebLocationGetV2OK, error)

	EntitiesWebLocationPatchV2(params *EntitiesWebLocationPatchV2Params, opts ...ClientOption) (*EntitiesWebLocationPatchV2OK, error)

	QueriesClassificationGetV2(params *QueriesClassificationGetV2Params, opts ...ClientOption) (*QueriesClassificationGetV2OK, error)

	QueriesCloudApplicationGetV2(params *QueriesCloudApplicationGetV2Params, opts ...ClientOption) (*QueriesCloudApplicationGetV2OK, error)

	QueriesContentPatternGetV2(params *QueriesContentPatternGetV2Params, opts ...ClientOption) (*QueriesContentPatternGetV2OK, error)

	QueriesEnterpriseAccountGetV2(params *QueriesEnterpriseAccountGetV2Params, opts ...ClientOption) (*QueriesEnterpriseAccountGetV2OK, error)

	QueriesFileTypeGetV2(params *QueriesFileTypeGetV2Params, opts ...ClientOption) (*QueriesFileTypeGetV2OK, error)

	QueriesPolicyGetV2(params *QueriesPolicyGetV2Params, opts ...ClientOption) (*QueriesPolicyGetV2OK, error)

	QueriesSensitivityLabelGetV2(params *QueriesSensitivityLabelGetV2Params, opts ...ClientOption) (*QueriesSensitivityLabelGetV2OK, error)

	QueriesWebLocationGetV2(params *QueriesWebLocationGetV2Params, opts ...ClientOption) (*QueriesWebLocationGetV2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
EntitiesClassificationDeleteV2 deletes classifications that match the provided ids
*/
func (a *Client) EntitiesClassificationDeleteV2(params *EntitiesClassificationDeleteV2Params, opts ...ClientOption) (*EntitiesClassificationDeleteV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesClassificationDeleteV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.classification.delete.v2",
		Method:             "DELETE",
		PathPattern:        "/data-protection/entities/classifications/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesClassificationDeleteV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesClassificationDeleteV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.classification.delete.v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesClassificationGetV2 gets the classifications that match the provided ids
*/
func (a *Client) EntitiesClassificationGetV2(params *EntitiesClassificationGetV2Params, opts ...ClientOption) (*EntitiesClassificationGetV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesClassificationGetV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.classification.get.v2",
		Method:             "GET",
		PathPattern:        "/data-protection/entities/classifications/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesClassificationGetV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesClassificationGetV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.classification.get.v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesClassificationPatchV2 updates classifications
*/
func (a *Client) EntitiesClassificationPatchV2(params *EntitiesClassificationPatchV2Params, opts ...ClientOption) (*EntitiesClassificationPatchV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesClassificationPatchV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.classification.patch.v2",
		Method:             "PATCH",
		PathPattern:        "/data-protection/entities/classifications/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesClassificationPatchV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesClassificationPatchV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.classification.patch.v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesClassificationPostV2 creates classifications
*/
func (a *Client) EntitiesClassificationPostV2(params *EntitiesClassificationPostV2Params, opts ...ClientOption) (*EntitiesClassificationPostV2Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesClassificationPostV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.classification.post.v2",
		Method:             "POST",
		PathPattern:        "/data-protection/entities/classifications/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesClassificationPostV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesClassificationPostV2Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.classification.post.v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesCloudApplicationCreate persists the given cloud application for the provided entity instance
*/
func (a *Client) EntitiesCloudApplicationCreate(params *EntitiesCloudApplicationCreateParams, opts ...ClientOption) (*EntitiesCloudApplicationCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesCloudApplicationCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.cloud-application.create",
		Method:             "POST",
		PathPattern:        "/data-protection/entities/cloud-applications/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesCloudApplicationCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesCloudApplicationCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.cloud-application.create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesCloudApplicationDelete deletes cloud application
*/
func (a *Client) EntitiesCloudApplicationDelete(params *EntitiesCloudApplicationDeleteParams, opts ...ClientOption) (*EntitiesCloudApplicationDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesCloudApplicationDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.cloud-application.delete",
		Method:             "DELETE",
		PathPattern:        "/data-protection/entities/cloud-applications/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesCloudApplicationDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesCloudApplicationDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.cloud-application.delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesCloudApplicationGet gets a particular cloud application
*/
func (a *Client) EntitiesCloudApplicationGet(params *EntitiesCloudApplicationGetParams, opts ...ClientOption) (*EntitiesCloudApplicationGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesCloudApplicationGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.cloud-application.get",
		Method:             "GET",
		PathPattern:        "/data-protection/entities/cloud-applications/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesCloudApplicationGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesCloudApplicationGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.cloud-application.get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesCloudApplicationPatch updates a cloud application
*/
func (a *Client) EntitiesCloudApplicationPatch(params *EntitiesCloudApplicationPatchParams, opts ...ClientOption) (*EntitiesCloudApplicationPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesCloudApplicationPatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.cloud-application.patch",
		Method:             "PATCH",
		PathPattern:        "/data-protection/entities/cloud-applications/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesCloudApplicationPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesCloudApplicationPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.cloud-application.patch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesContentPatternCreate persists the given content pattern for the provided entity instance
*/
func (a *Client) EntitiesContentPatternCreate(params *EntitiesContentPatternCreateParams, opts ...ClientOption) (*EntitiesContentPatternCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesContentPatternCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.content-pattern.create",
		Method:             "POST",
		PathPattern:        "/data-protection/entities/content-patterns/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesContentPatternCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesContentPatternCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.content-pattern.create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesContentPatternDelete deletes content pattern
*/
func (a *Client) EntitiesContentPatternDelete(params *EntitiesContentPatternDeleteParams, opts ...ClientOption) (*EntitiesContentPatternDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesContentPatternDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.content-pattern.delete",
		Method:             "DELETE",
		PathPattern:        "/data-protection/entities/content-patterns/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesContentPatternDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesContentPatternDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.content-pattern.delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesContentPatternGet gets a particular content pattern s
*/
func (a *Client) EntitiesContentPatternGet(params *EntitiesContentPatternGetParams, opts ...ClientOption) (*EntitiesContentPatternGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesContentPatternGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.content-pattern.get",
		Method:             "GET",
		PathPattern:        "/data-protection/entities/content-patterns/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesContentPatternGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesContentPatternGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.content-pattern.get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesContentPatternPatch updates a content pattern
*/
func (a *Client) EntitiesContentPatternPatch(params *EntitiesContentPatternPatchParams, opts ...ClientOption) (*EntitiesContentPatternPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesContentPatternPatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.content-pattern.patch",
		Method:             "PATCH",
		PathPattern:        "/data-protection/entities/content-patterns/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesContentPatternPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesContentPatternPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.content-pattern.patch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesEnterpriseAccountCreate persists the given enterprise account for the provided entity instance
*/
func (a *Client) EntitiesEnterpriseAccountCreate(params *EntitiesEnterpriseAccountCreateParams, opts ...ClientOption) (*EntitiesEnterpriseAccountCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesEnterpriseAccountCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.enterprise-account.create",
		Method:             "POST",
		PathPattern:        "/data-protection/entities/enterprise-accounts/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesEnterpriseAccountCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesEnterpriseAccountCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.enterprise-account.create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesEnterpriseAccountDelete deletes enterprise account
*/
func (a *Client) EntitiesEnterpriseAccountDelete(params *EntitiesEnterpriseAccountDeleteParams, opts ...ClientOption) (*EntitiesEnterpriseAccountDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesEnterpriseAccountDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.enterprise-account.delete",
		Method:             "DELETE",
		PathPattern:        "/data-protection/entities/enterprise-accounts/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesEnterpriseAccountDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesEnterpriseAccountDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.enterprise-account.delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesEnterpriseAccountGet gets a particular enterprise account s
*/
func (a *Client) EntitiesEnterpriseAccountGet(params *EntitiesEnterpriseAccountGetParams, opts ...ClientOption) (*EntitiesEnterpriseAccountGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesEnterpriseAccountGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.enterprise-account.get",
		Method:             "GET",
		PathPattern:        "/data-protection/entities/enterprise-accounts/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesEnterpriseAccountGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesEnterpriseAccountGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.enterprise-account.get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesEnterpriseAccountPatch updates a enterprise account
*/
func (a *Client) EntitiesEnterpriseAccountPatch(params *EntitiesEnterpriseAccountPatchParams, opts ...ClientOption) (*EntitiesEnterpriseAccountPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesEnterpriseAccountPatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.enterprise-account.patch",
		Method:             "PATCH",
		PathPattern:        "/data-protection/entities/enterprise-accounts/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesEnterpriseAccountPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesEnterpriseAccountPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.enterprise-account.patch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesFileTypeGet gets a particular file type
*/
func (a *Client) EntitiesFileTypeGet(params *EntitiesFileTypeGetParams, opts ...ClientOption) (*EntitiesFileTypeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesFileTypeGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.file-type.get",
		Method:             "GET",
		PathPattern:        "/data-protection/entities/file-types/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesFileTypeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesFileTypeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.file-type.get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesPolicyDeleteV2 deletes policies that match the provided ids
*/
func (a *Client) EntitiesPolicyDeleteV2(params *EntitiesPolicyDeleteV2Params, opts ...ClientOption) (*EntitiesPolicyDeleteV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesPolicyDeleteV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.policy.delete.v2",
		Method:             "DELETE",
		PathPattern:        "/data-protection/entities/policies/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesPolicyDeleteV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesPolicyDeleteV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.policy.delete.v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesPolicyGetV2 gets policies that match the provided ids
*/
func (a *Client) EntitiesPolicyGetV2(params *EntitiesPolicyGetV2Params, opts ...ClientOption) (*EntitiesPolicyGetV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesPolicyGetV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.policy.get.v2",
		Method:             "GET",
		PathPattern:        "/data-protection/entities/policies/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesPolicyGetV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesPolicyGetV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.policy.get.v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesPolicyPatchV2 updates policies
*/
func (a *Client) EntitiesPolicyPatchV2(params *EntitiesPolicyPatchV2Params, opts ...ClientOption) (*EntitiesPolicyPatchV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesPolicyPatchV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.policy.patch.v2",
		Method:             "PATCH",
		PathPattern:        "/data-protection/entities/policies/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesPolicyPatchV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesPolicyPatchV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.policy.patch.v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesPolicyPostV2 creates policies
*/
func (a *Client) EntitiesPolicyPostV2(params *EntitiesPolicyPostV2Params, opts ...ClientOption) (*EntitiesPolicyPostV2Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesPolicyPostV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.policy.post.v2",
		Method:             "POST",
		PathPattern:        "/data-protection/entities/policies/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesPolicyPostV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesPolicyPostV2Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.policy.post.v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesSensitivityLabelCreateV2 creates new sensitivity label v2
*/
func (a *Client) EntitiesSensitivityLabelCreateV2(params *EntitiesSensitivityLabelCreateV2Params, opts ...ClientOption) (*EntitiesSensitivityLabelCreateV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesSensitivityLabelCreateV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.sensitivity-label.create-v2",
		Method:             "POST",
		PathPattern:        "/data-protection/entities/labels/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesSensitivityLabelCreateV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesSensitivityLabelCreateV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.sensitivity-label.create-v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesSensitivityLabelDeleteV2 deletes sensitivity labels matching the i ds v2
*/
func (a *Client) EntitiesSensitivityLabelDeleteV2(params *EntitiesSensitivityLabelDeleteV2Params, opts ...ClientOption) (*EntitiesSensitivityLabelDeleteV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesSensitivityLabelDeleteV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.sensitivity-label.delete-v2",
		Method:             "DELETE",
		PathPattern:        "/data-protection/entities/labels/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesSensitivityLabelDeleteV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesSensitivityLabelDeleteV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.sensitivity-label.delete-v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesSensitivityLabelGetV2 gets sensitivity label matching the i ds v2
*/
func (a *Client) EntitiesSensitivityLabelGetV2(params *EntitiesSensitivityLabelGetV2Params, opts ...ClientOption) (*EntitiesSensitivityLabelGetV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesSensitivityLabelGetV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.sensitivity-label.get-v2",
		Method:             "GET",
		PathPattern:        "/data-protection/entities/labels/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesSensitivityLabelGetV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesSensitivityLabelGetV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.sensitivity-label.get-v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesWebLocationCreateV2 persists the given web locations
*/
func (a *Client) EntitiesWebLocationCreateV2(params *EntitiesWebLocationCreateV2Params, opts ...ClientOption) (*EntitiesWebLocationCreateV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesWebLocationCreateV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.web-location.create-v2",
		Method:             "POST",
		PathPattern:        "/data-protection/entities/web-locations/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesWebLocationCreateV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesWebLocationCreateV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.web-location.create-v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesWebLocationDeleteV2 deletes web location
*/
func (a *Client) EntitiesWebLocationDeleteV2(params *EntitiesWebLocationDeleteV2Params, opts ...ClientOption) (*EntitiesWebLocationDeleteV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesWebLocationDeleteV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.web-location.delete-v2",
		Method:             "DELETE",
		PathPattern:        "/data-protection/entities/web-locations/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesWebLocationDeleteV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesWebLocationDeleteV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.web-location.delete-v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesWebLocationGetV2 gets web location entities matching the provided ID s
*/
func (a *Client) EntitiesWebLocationGetV2(params *EntitiesWebLocationGetV2Params, opts ...ClientOption) (*EntitiesWebLocationGetV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesWebLocationGetV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.web-location.get-v2",
		Method:             "GET",
		PathPattern:        "/data-protection/entities/web-locations/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesWebLocationGetV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesWebLocationGetV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.web-location.get-v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesWebLocationPatchV2 updates a web location
*/
func (a *Client) EntitiesWebLocationPatchV2(params *EntitiesWebLocationPatchV2Params, opts ...ClientOption) (*EntitiesWebLocationPatchV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesWebLocationPatchV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.web-location.patch-v2",
		Method:             "PATCH",
		PathPattern:        "/data-protection/entities/web-locations/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesWebLocationPatchV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesWebLocationPatchV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.web-location.patch-v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueriesClassificationGetV2 searches for classifications that match the provided criteria
*/
func (a *Client) QueriesClassificationGetV2(params *QueriesClassificationGetV2Params, opts ...ClientOption) (*QueriesClassificationGetV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueriesClassificationGetV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "queries.classification.get.v2",
		Method:             "GET",
		PathPattern:        "/data-protection/queries/classifications/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueriesClassificationGetV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueriesClassificationGetV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queries.classification.get.v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueriesCloudApplicationGetV2 gets all cloud application i ds matching the query with filter
*/
func (a *Client) QueriesCloudApplicationGetV2(params *QueriesCloudApplicationGetV2Params, opts ...ClientOption) (*QueriesCloudApplicationGetV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueriesCloudApplicationGetV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "queries.cloud-application.get-v2",
		Method:             "GET",
		PathPattern:        "/data-protection/queries/cloud-applications/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueriesCloudApplicationGetV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueriesCloudApplicationGetV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queries.cloud-application.get-v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueriesContentPatternGetV2 gets all content pattern i ds matching the query with filter
*/
func (a *Client) QueriesContentPatternGetV2(params *QueriesContentPatternGetV2Params, opts ...ClientOption) (*QueriesContentPatternGetV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueriesContentPatternGetV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "queries.content-pattern.get-v2",
		Method:             "GET",
		PathPattern:        "/data-protection/queries/content-patterns/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueriesContentPatternGetV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueriesContentPatternGetV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queries.content-pattern.get-v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueriesEnterpriseAccountGetV2 gets all enterprise account i ds matching the query with filter
*/
func (a *Client) QueriesEnterpriseAccountGetV2(params *QueriesEnterpriseAccountGetV2Params, opts ...ClientOption) (*QueriesEnterpriseAccountGetV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueriesEnterpriseAccountGetV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "queries.enterprise-account.get-v2",
		Method:             "GET",
		PathPattern:        "/data-protection/queries/enterprise-accounts/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueriesEnterpriseAccountGetV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueriesEnterpriseAccountGetV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queries.enterprise-account.get-v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueriesFileTypeGetV2 gets all file type i ds matching the query with filter
*/
func (a *Client) QueriesFileTypeGetV2(params *QueriesFileTypeGetV2Params, opts ...ClientOption) (*QueriesFileTypeGetV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueriesFileTypeGetV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "queries.file-type.get-v2",
		Method:             "GET",
		PathPattern:        "/data-protection/queries/file-types/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueriesFileTypeGetV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueriesFileTypeGetV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queries.file-type.get-v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueriesPolicyGetV2 searches for policies that match the provided criteria
*/
func (a *Client) QueriesPolicyGetV2(params *QueriesPolicyGetV2Params, opts ...ClientOption) (*QueriesPolicyGetV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueriesPolicyGetV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "queries.policy.get.v2",
		Method:             "GET",
		PathPattern:        "/data-protection/queries/policies/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueriesPolicyGetV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueriesPolicyGetV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queries.policy.get.v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueriesSensitivityLabelGetV2 gets all sensitivity label i ds matching the query with filter
*/
func (a *Client) QueriesSensitivityLabelGetV2(params *QueriesSensitivityLabelGetV2Params, opts ...ClientOption) (*QueriesSensitivityLabelGetV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueriesSensitivityLabelGetV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "queries.sensitivity-label.get-v2",
		Method:             "GET",
		PathPattern:        "/data-protection/queries/labels/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueriesSensitivityLabelGetV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueriesSensitivityLabelGetV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queries.sensitivity-label.get-v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueriesWebLocationGetV2 gets web location i ds matching the query with filter
*/
func (a *Client) QueriesWebLocationGetV2(params *QueriesWebLocationGetV2Params, opts ...ClientOption) (*QueriesWebLocationGetV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueriesWebLocationGetV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "queries.web-location.get-v2",
		Method:             "GET",
		PathPattern:        "/data-protection/queries/web-locations/v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueriesWebLocationGetV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueriesWebLocationGetV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queries.web-location.get-v2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
