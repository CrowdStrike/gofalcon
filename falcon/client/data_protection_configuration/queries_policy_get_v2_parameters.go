// Code generated by go-swagger; DO NOT EDIT.

package data_protection_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewQueriesPolicyGetV2Params creates a new QueriesPolicyGetV2Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewQueriesPolicyGetV2Params() *QueriesPolicyGetV2Params {
	return &QueriesPolicyGetV2Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewQueriesPolicyGetV2ParamsWithTimeout creates a new QueriesPolicyGetV2Params object
// with the ability to set a timeout on a request.
func NewQueriesPolicyGetV2ParamsWithTimeout(timeout time.Duration) *QueriesPolicyGetV2Params {
	return &QueriesPolicyGetV2Params{
		timeout: timeout,
	}
}

// NewQueriesPolicyGetV2ParamsWithContext creates a new QueriesPolicyGetV2Params object
// with the ability to set a context for a request.
func NewQueriesPolicyGetV2ParamsWithContext(ctx context.Context) *QueriesPolicyGetV2Params {
	return &QueriesPolicyGetV2Params{
		Context: ctx,
	}
}

// NewQueriesPolicyGetV2ParamsWithHTTPClient creates a new QueriesPolicyGetV2Params object
// with the ability to set a custom HTTPClient for a request.
func NewQueriesPolicyGetV2ParamsWithHTTPClient(client *http.Client) *QueriesPolicyGetV2Params {
	return &QueriesPolicyGetV2Params{
		HTTPClient: client,
	}
}

/*
QueriesPolicyGetV2Params contains all the parameters to send to the API endpoint

	for the queries policy get v2 operation.

	Typically these are written to a http.Request.
*/
type QueriesPolicyGetV2Params struct {

	/* Filter.

	   Filter results by specific attributes , allowed attributes are [properties.max_file_size_to_inspect description is_default properties.be_upload_timeout_duration_seconds created_by modified_at properties.enable_content_inspection properties.similarity_threshold properties.block_notifications properties.custom_allow_notification properties.evidence_duplication_enabled_default properties.be_paste_timeout_response properties.inspection_depth properties.classifications properties.be_paste_clipboard_max_size properties.be_paste_clipboard_over_size_behaviour_block properties.evidence_storage_free_disk_perc properties.min_confidence_level properties.browsers_without_active_extension properties.besplash_enabled created_at modified_by properties.enable_context_inspection properties.enable_network_inspection properties.besplash_message_source properties.besplash_custom_message properties.be_paste_clipboard_min_size_unit properties.be_paste_clipboard_max_size_unit name properties.max_file_size_to_inspect_unit properties.similarity_detection properties.enable_end_user_notifications_unsupported_browser properties.allow_notifications properties.evidence_encrypted_enabled properties.be_exclude_domains properties.be_paste_timeout_duration_milliseconds properties.unsupported_browsers_action properties.enable_clipboard_inspection properties.custom_block_notification properties.evidence_download_enabled properties.network_inspection_files_exceeding_size_limit properties.be_upload_timeout_response properties.be_paste_clipboard_min_size precedence is_enabled properties.block_all_data_access properties.evidence_storage_max_size]
	*/
	Filter *string

	/* Limit.

	   The maximum records to return

	   Default: 100
	*/
	Limit *int64

	/* Offset.

	   The offset to start retrieving records from
	*/
	Offset *int64

	/* PlatformName.

	   platform name of the policies to search, either 'win' or 'mac'
	*/
	PlatformName string

	/* Sort.

	   The property to sort by, allowed fields are :[name precedence created_at modified_at]
	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the queries policy get v2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueriesPolicyGetV2Params) WithDefaults() *QueriesPolicyGetV2Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the queries policy get v2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueriesPolicyGetV2Params) SetDefaults() {
	var (
		limitDefault = int64(100)
	)

	val := QueriesPolicyGetV2Params{
		Limit: &limitDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the queries policy get v2 params
func (o *QueriesPolicyGetV2Params) WithTimeout(timeout time.Duration) *QueriesPolicyGetV2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the queries policy get v2 params
func (o *QueriesPolicyGetV2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the queries policy get v2 params
func (o *QueriesPolicyGetV2Params) WithContext(ctx context.Context) *QueriesPolicyGetV2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the queries policy get v2 params
func (o *QueriesPolicyGetV2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the queries policy get v2 params
func (o *QueriesPolicyGetV2Params) WithHTTPClient(client *http.Client) *QueriesPolicyGetV2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the queries policy get v2 params
func (o *QueriesPolicyGetV2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the queries policy get v2 params
func (o *QueriesPolicyGetV2Params) WithFilter(filter *string) *QueriesPolicyGetV2Params {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the queries policy get v2 params
func (o *QueriesPolicyGetV2Params) SetFilter(filter *string) {
	o.Filter = filter
}

// WithLimit adds the limit to the queries policy get v2 params
func (o *QueriesPolicyGetV2Params) WithLimit(limit *int64) *QueriesPolicyGetV2Params {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the queries policy get v2 params
func (o *QueriesPolicyGetV2Params) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the queries policy get v2 params
func (o *QueriesPolicyGetV2Params) WithOffset(offset *int64) *QueriesPolicyGetV2Params {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the queries policy get v2 params
func (o *QueriesPolicyGetV2Params) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithPlatformName adds the platformName to the queries policy get v2 params
func (o *QueriesPolicyGetV2Params) WithPlatformName(platformName string) *QueriesPolicyGetV2Params {
	o.SetPlatformName(platformName)
	return o
}

// SetPlatformName adds the platformName to the queries policy get v2 params
func (o *QueriesPolicyGetV2Params) SetPlatformName(platformName string) {
	o.PlatformName = platformName
}

// WithSort adds the sort to the queries policy get v2 params
func (o *QueriesPolicyGetV2Params) WithSort(sort *string) *QueriesPolicyGetV2Params {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the queries policy get v2 params
func (o *QueriesPolicyGetV2Params) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *QueriesPolicyGetV2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	// query param platform_name
	qrPlatformName := o.PlatformName
	qPlatformName := qrPlatformName
	if qPlatformName != "" {

		if err := r.SetQueryParam("platform_name", qPlatformName); err != nil {
			return err
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
