// Code generated by go-swagger; DO NOT EDIT.

package data_protection_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// EntitiesCloudApplicationGetReader is a Reader for the EntitiesCloudApplicationGet structure.
type EntitiesCloudApplicationGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EntitiesCloudApplicationGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEntitiesCloudApplicationGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEntitiesCloudApplicationGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEntitiesCloudApplicationGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEntitiesCloudApplicationGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewEntitiesCloudApplicationGetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEntitiesCloudApplicationGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /data-protection/entities/cloud-applications/v1] entities.cloud-application.get", response, response.Code())
	}
}

// NewEntitiesCloudApplicationGetOK creates a EntitiesCloudApplicationGetOK with default headers values
func NewEntitiesCloudApplicationGetOK() *EntitiesCloudApplicationGetOK {
	return &EntitiesCloudApplicationGetOK{}
}

/*
EntitiesCloudApplicationGetOK describes a response with status code 200, with default header values.

OK
*/
type EntitiesCloudApplicationGetOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APICloudApplicationMSAResponseV1
}

// IsSuccess returns true when this entities cloud application get o k response has a 2xx status code
func (o *EntitiesCloudApplicationGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this entities cloud application get o k response has a 3xx status code
func (o *EntitiesCloudApplicationGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities cloud application get o k response has a 4xx status code
func (o *EntitiesCloudApplicationGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this entities cloud application get o k response has a 5xx status code
func (o *EntitiesCloudApplicationGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this entities cloud application get o k response a status code equal to that given
func (o *EntitiesCloudApplicationGetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the entities cloud application get o k response
func (o *EntitiesCloudApplicationGetOK) Code() int {
	return 200
}

func (o *EntitiesCloudApplicationGetOK) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/cloud-applications/v1][%d] entitiesCloudApplicationGetOK  %+v", 200, o.Payload)
}

func (o *EntitiesCloudApplicationGetOK) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/cloud-applications/v1][%d] entitiesCloudApplicationGetOK  %+v", 200, o.Payload)
}

func (o *EntitiesCloudApplicationGetOK) GetPayload() *models.APICloudApplicationMSAResponseV1 {
	return o.Payload
}

func (o *EntitiesCloudApplicationGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APICloudApplicationMSAResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesCloudApplicationGetBadRequest creates a EntitiesCloudApplicationGetBadRequest with default headers values
func NewEntitiesCloudApplicationGetBadRequest() *EntitiesCloudApplicationGetBadRequest {
	return &EntitiesCloudApplicationGetBadRequest{}
}

/*
EntitiesCloudApplicationGetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type EntitiesCloudApplicationGetBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this entities cloud application get bad request response has a 2xx status code
func (o *EntitiesCloudApplicationGetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities cloud application get bad request response has a 3xx status code
func (o *EntitiesCloudApplicationGetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities cloud application get bad request response has a 4xx status code
func (o *EntitiesCloudApplicationGetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities cloud application get bad request response has a 5xx status code
func (o *EntitiesCloudApplicationGetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this entities cloud application get bad request response a status code equal to that given
func (o *EntitiesCloudApplicationGetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the entities cloud application get bad request response
func (o *EntitiesCloudApplicationGetBadRequest) Code() int {
	return 400
}

func (o *EntitiesCloudApplicationGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/cloud-applications/v1][%d] entitiesCloudApplicationGetBadRequest  %+v", 400, o.Payload)
}

func (o *EntitiesCloudApplicationGetBadRequest) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/cloud-applications/v1][%d] entitiesCloudApplicationGetBadRequest  %+v", 400, o.Payload)
}

func (o *EntitiesCloudApplicationGetBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *EntitiesCloudApplicationGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesCloudApplicationGetForbidden creates a EntitiesCloudApplicationGetForbidden with default headers values
func NewEntitiesCloudApplicationGetForbidden() *EntitiesCloudApplicationGetForbidden {
	return &EntitiesCloudApplicationGetForbidden{}
}

/*
EntitiesCloudApplicationGetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type EntitiesCloudApplicationGetForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this entities cloud application get forbidden response has a 2xx status code
func (o *EntitiesCloudApplicationGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities cloud application get forbidden response has a 3xx status code
func (o *EntitiesCloudApplicationGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities cloud application get forbidden response has a 4xx status code
func (o *EntitiesCloudApplicationGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities cloud application get forbidden response has a 5xx status code
func (o *EntitiesCloudApplicationGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this entities cloud application get forbidden response a status code equal to that given
func (o *EntitiesCloudApplicationGetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the entities cloud application get forbidden response
func (o *EntitiesCloudApplicationGetForbidden) Code() int {
	return 403
}

func (o *EntitiesCloudApplicationGetForbidden) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/cloud-applications/v1][%d] entitiesCloudApplicationGetForbidden  %+v", 403, o.Payload)
}

func (o *EntitiesCloudApplicationGetForbidden) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/cloud-applications/v1][%d] entitiesCloudApplicationGetForbidden  %+v", 403, o.Payload)
}

func (o *EntitiesCloudApplicationGetForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *EntitiesCloudApplicationGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesCloudApplicationGetNotFound creates a EntitiesCloudApplicationGetNotFound with default headers values
func NewEntitiesCloudApplicationGetNotFound() *EntitiesCloudApplicationGetNotFound {
	return &EntitiesCloudApplicationGetNotFound{}
}

/*
EntitiesCloudApplicationGetNotFound describes a response with status code 404, with default header values.

Not Found
*/
type EntitiesCloudApplicationGetNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this entities cloud application get not found response has a 2xx status code
func (o *EntitiesCloudApplicationGetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities cloud application get not found response has a 3xx status code
func (o *EntitiesCloudApplicationGetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities cloud application get not found response has a 4xx status code
func (o *EntitiesCloudApplicationGetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities cloud application get not found response has a 5xx status code
func (o *EntitiesCloudApplicationGetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this entities cloud application get not found response a status code equal to that given
func (o *EntitiesCloudApplicationGetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the entities cloud application get not found response
func (o *EntitiesCloudApplicationGetNotFound) Code() int {
	return 404
}

func (o *EntitiesCloudApplicationGetNotFound) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/cloud-applications/v1][%d] entitiesCloudApplicationGetNotFound  %+v", 404, o.Payload)
}

func (o *EntitiesCloudApplicationGetNotFound) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/cloud-applications/v1][%d] entitiesCloudApplicationGetNotFound  %+v", 404, o.Payload)
}

func (o *EntitiesCloudApplicationGetNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *EntitiesCloudApplicationGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesCloudApplicationGetTooManyRequests creates a EntitiesCloudApplicationGetTooManyRequests with default headers values
func NewEntitiesCloudApplicationGetTooManyRequests() *EntitiesCloudApplicationGetTooManyRequests {
	return &EntitiesCloudApplicationGetTooManyRequests{}
}

/*
EntitiesCloudApplicationGetTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type EntitiesCloudApplicationGetTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this entities cloud application get too many requests response has a 2xx status code
func (o *EntitiesCloudApplicationGetTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities cloud application get too many requests response has a 3xx status code
func (o *EntitiesCloudApplicationGetTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities cloud application get too many requests response has a 4xx status code
func (o *EntitiesCloudApplicationGetTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities cloud application get too many requests response has a 5xx status code
func (o *EntitiesCloudApplicationGetTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this entities cloud application get too many requests response a status code equal to that given
func (o *EntitiesCloudApplicationGetTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the entities cloud application get too many requests response
func (o *EntitiesCloudApplicationGetTooManyRequests) Code() int {
	return 429
}

func (o *EntitiesCloudApplicationGetTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/cloud-applications/v1][%d] entitiesCloudApplicationGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *EntitiesCloudApplicationGetTooManyRequests) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/cloud-applications/v1][%d] entitiesCloudApplicationGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *EntitiesCloudApplicationGetTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *EntitiesCloudApplicationGetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesCloudApplicationGetInternalServerError creates a EntitiesCloudApplicationGetInternalServerError with default headers values
func NewEntitiesCloudApplicationGetInternalServerError() *EntitiesCloudApplicationGetInternalServerError {
	return &EntitiesCloudApplicationGetInternalServerError{}
}

/*
EntitiesCloudApplicationGetInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type EntitiesCloudApplicationGetInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this entities cloud application get internal server error response has a 2xx status code
func (o *EntitiesCloudApplicationGetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities cloud application get internal server error response has a 3xx status code
func (o *EntitiesCloudApplicationGetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities cloud application get internal server error response has a 4xx status code
func (o *EntitiesCloudApplicationGetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this entities cloud application get internal server error response has a 5xx status code
func (o *EntitiesCloudApplicationGetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this entities cloud application get internal server error response a status code equal to that given
func (o *EntitiesCloudApplicationGetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the entities cloud application get internal server error response
func (o *EntitiesCloudApplicationGetInternalServerError) Code() int {
	return 500
}

func (o *EntitiesCloudApplicationGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/cloud-applications/v1][%d] entitiesCloudApplicationGetInternalServerError  %+v", 500, o.Payload)
}

func (o *EntitiesCloudApplicationGetInternalServerError) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/cloud-applications/v1][%d] entitiesCloudApplicationGetInternalServerError  %+v", 500, o.Payload)
}

func (o *EntitiesCloudApplicationGetInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *EntitiesCloudApplicationGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
