// Code generated by go-swagger; DO NOT EDIT.

package data_protection_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// EntitiesEnterpriseAccountGetReader is a Reader for the EntitiesEnterpriseAccountGet structure.
type EntitiesEnterpriseAccountGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EntitiesEnterpriseAccountGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEntitiesEnterpriseAccountGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEntitiesEnterpriseAccountGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEntitiesEnterpriseAccountGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEntitiesEnterpriseAccountGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewEntitiesEnterpriseAccountGetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEntitiesEnterpriseAccountGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /data-protection/entities/enterprise-accounts/v1] entities.enterprise-account.get", response, response.Code())
	}
}

// NewEntitiesEnterpriseAccountGetOK creates a EntitiesEnterpriseAccountGetOK with default headers values
func NewEntitiesEnterpriseAccountGetOK() *EntitiesEnterpriseAccountGetOK {
	return &EntitiesEnterpriseAccountGetOK{}
}

/*
EntitiesEnterpriseAccountGetOK describes a response with status code 200, with default header values.

OK
*/
type EntitiesEnterpriseAccountGetOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIEnterpriseAccountMSAResponseV1
}

// IsSuccess returns true when this entities enterprise account get o k response has a 2xx status code
func (o *EntitiesEnterpriseAccountGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this entities enterprise account get o k response has a 3xx status code
func (o *EntitiesEnterpriseAccountGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities enterprise account get o k response has a 4xx status code
func (o *EntitiesEnterpriseAccountGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this entities enterprise account get o k response has a 5xx status code
func (o *EntitiesEnterpriseAccountGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this entities enterprise account get o k response a status code equal to that given
func (o *EntitiesEnterpriseAccountGetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the entities enterprise account get o k response
func (o *EntitiesEnterpriseAccountGetOK) Code() int {
	return 200
}

func (o *EntitiesEnterpriseAccountGetOK) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/enterprise-accounts/v1][%d] entitiesEnterpriseAccountGetOK  %+v", 200, o.Payload)
}

func (o *EntitiesEnterpriseAccountGetOK) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/enterprise-accounts/v1][%d] entitiesEnterpriseAccountGetOK  %+v", 200, o.Payload)
}

func (o *EntitiesEnterpriseAccountGetOK) GetPayload() *models.APIEnterpriseAccountMSAResponseV1 {
	return o.Payload
}

func (o *EntitiesEnterpriseAccountGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIEnterpriseAccountMSAResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesEnterpriseAccountGetBadRequest creates a EntitiesEnterpriseAccountGetBadRequest with default headers values
func NewEntitiesEnterpriseAccountGetBadRequest() *EntitiesEnterpriseAccountGetBadRequest {
	return &EntitiesEnterpriseAccountGetBadRequest{}
}

/*
EntitiesEnterpriseAccountGetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type EntitiesEnterpriseAccountGetBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this entities enterprise account get bad request response has a 2xx status code
func (o *EntitiesEnterpriseAccountGetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities enterprise account get bad request response has a 3xx status code
func (o *EntitiesEnterpriseAccountGetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities enterprise account get bad request response has a 4xx status code
func (o *EntitiesEnterpriseAccountGetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities enterprise account get bad request response has a 5xx status code
func (o *EntitiesEnterpriseAccountGetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this entities enterprise account get bad request response a status code equal to that given
func (o *EntitiesEnterpriseAccountGetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the entities enterprise account get bad request response
func (o *EntitiesEnterpriseAccountGetBadRequest) Code() int {
	return 400
}

func (o *EntitiesEnterpriseAccountGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/enterprise-accounts/v1][%d] entitiesEnterpriseAccountGetBadRequest  %+v", 400, o.Payload)
}

func (o *EntitiesEnterpriseAccountGetBadRequest) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/enterprise-accounts/v1][%d] entitiesEnterpriseAccountGetBadRequest  %+v", 400, o.Payload)
}

func (o *EntitiesEnterpriseAccountGetBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *EntitiesEnterpriseAccountGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesEnterpriseAccountGetForbidden creates a EntitiesEnterpriseAccountGetForbidden with default headers values
func NewEntitiesEnterpriseAccountGetForbidden() *EntitiesEnterpriseAccountGetForbidden {
	return &EntitiesEnterpriseAccountGetForbidden{}
}

/*
EntitiesEnterpriseAccountGetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type EntitiesEnterpriseAccountGetForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this entities enterprise account get forbidden response has a 2xx status code
func (o *EntitiesEnterpriseAccountGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities enterprise account get forbidden response has a 3xx status code
func (o *EntitiesEnterpriseAccountGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities enterprise account get forbidden response has a 4xx status code
func (o *EntitiesEnterpriseAccountGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities enterprise account get forbidden response has a 5xx status code
func (o *EntitiesEnterpriseAccountGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this entities enterprise account get forbidden response a status code equal to that given
func (o *EntitiesEnterpriseAccountGetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the entities enterprise account get forbidden response
func (o *EntitiesEnterpriseAccountGetForbidden) Code() int {
	return 403
}

func (o *EntitiesEnterpriseAccountGetForbidden) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/enterprise-accounts/v1][%d] entitiesEnterpriseAccountGetForbidden  %+v", 403, o.Payload)
}

func (o *EntitiesEnterpriseAccountGetForbidden) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/enterprise-accounts/v1][%d] entitiesEnterpriseAccountGetForbidden  %+v", 403, o.Payload)
}

func (o *EntitiesEnterpriseAccountGetForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *EntitiesEnterpriseAccountGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesEnterpriseAccountGetNotFound creates a EntitiesEnterpriseAccountGetNotFound with default headers values
func NewEntitiesEnterpriseAccountGetNotFound() *EntitiesEnterpriseAccountGetNotFound {
	return &EntitiesEnterpriseAccountGetNotFound{}
}

/*
EntitiesEnterpriseAccountGetNotFound describes a response with status code 404, with default header values.

Not Found
*/
type EntitiesEnterpriseAccountGetNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this entities enterprise account get not found response has a 2xx status code
func (o *EntitiesEnterpriseAccountGetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities enterprise account get not found response has a 3xx status code
func (o *EntitiesEnterpriseAccountGetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities enterprise account get not found response has a 4xx status code
func (o *EntitiesEnterpriseAccountGetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities enterprise account get not found response has a 5xx status code
func (o *EntitiesEnterpriseAccountGetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this entities enterprise account get not found response a status code equal to that given
func (o *EntitiesEnterpriseAccountGetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the entities enterprise account get not found response
func (o *EntitiesEnterpriseAccountGetNotFound) Code() int {
	return 404
}

func (o *EntitiesEnterpriseAccountGetNotFound) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/enterprise-accounts/v1][%d] entitiesEnterpriseAccountGetNotFound  %+v", 404, o.Payload)
}

func (o *EntitiesEnterpriseAccountGetNotFound) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/enterprise-accounts/v1][%d] entitiesEnterpriseAccountGetNotFound  %+v", 404, o.Payload)
}

func (o *EntitiesEnterpriseAccountGetNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *EntitiesEnterpriseAccountGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesEnterpriseAccountGetTooManyRequests creates a EntitiesEnterpriseAccountGetTooManyRequests with default headers values
func NewEntitiesEnterpriseAccountGetTooManyRequests() *EntitiesEnterpriseAccountGetTooManyRequests {
	return &EntitiesEnterpriseAccountGetTooManyRequests{}
}

/*
EntitiesEnterpriseAccountGetTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type EntitiesEnterpriseAccountGetTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this entities enterprise account get too many requests response has a 2xx status code
func (o *EntitiesEnterpriseAccountGetTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities enterprise account get too many requests response has a 3xx status code
func (o *EntitiesEnterpriseAccountGetTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities enterprise account get too many requests response has a 4xx status code
func (o *EntitiesEnterpriseAccountGetTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities enterprise account get too many requests response has a 5xx status code
func (o *EntitiesEnterpriseAccountGetTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this entities enterprise account get too many requests response a status code equal to that given
func (o *EntitiesEnterpriseAccountGetTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the entities enterprise account get too many requests response
func (o *EntitiesEnterpriseAccountGetTooManyRequests) Code() int {
	return 429
}

func (o *EntitiesEnterpriseAccountGetTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/enterprise-accounts/v1][%d] entitiesEnterpriseAccountGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *EntitiesEnterpriseAccountGetTooManyRequests) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/enterprise-accounts/v1][%d] entitiesEnterpriseAccountGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *EntitiesEnterpriseAccountGetTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *EntitiesEnterpriseAccountGetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesEnterpriseAccountGetInternalServerError creates a EntitiesEnterpriseAccountGetInternalServerError with default headers values
func NewEntitiesEnterpriseAccountGetInternalServerError() *EntitiesEnterpriseAccountGetInternalServerError {
	return &EntitiesEnterpriseAccountGetInternalServerError{}
}

/*
EntitiesEnterpriseAccountGetInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type EntitiesEnterpriseAccountGetInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this entities enterprise account get internal server error response has a 2xx status code
func (o *EntitiesEnterpriseAccountGetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities enterprise account get internal server error response has a 3xx status code
func (o *EntitiesEnterpriseAccountGetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities enterprise account get internal server error response has a 4xx status code
func (o *EntitiesEnterpriseAccountGetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this entities enterprise account get internal server error response has a 5xx status code
func (o *EntitiesEnterpriseAccountGetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this entities enterprise account get internal server error response a status code equal to that given
func (o *EntitiesEnterpriseAccountGetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the entities enterprise account get internal server error response
func (o *EntitiesEnterpriseAccountGetInternalServerError) Code() int {
	return 500
}

func (o *EntitiesEnterpriseAccountGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/enterprise-accounts/v1][%d] entitiesEnterpriseAccountGetInternalServerError  %+v", 500, o.Payload)
}

func (o *EntitiesEnterpriseAccountGetInternalServerError) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/enterprise-accounts/v1][%d] entitiesEnterpriseAccountGetInternalServerError  %+v", 500, o.Payload)
}

func (o *EntitiesEnterpriseAccountGetInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *EntitiesEnterpriseAccountGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
