// Code generated by go-swagger; DO NOT EDIT.

package data_protection_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// EntitiesFileTypeGetReader is a Reader for the EntitiesFileTypeGet structure.
type EntitiesFileTypeGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EntitiesFileTypeGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEntitiesFileTypeGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEntitiesFileTypeGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEntitiesFileTypeGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEntitiesFileTypeGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewEntitiesFileTypeGetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEntitiesFileTypeGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /data-protection/entities/file-types/v1] entities.file-type.get", response, response.Code())
	}
}

// NewEntitiesFileTypeGetOK creates a EntitiesFileTypeGetOK with default headers values
func NewEntitiesFileTypeGetOK() *EntitiesFileTypeGetOK {
	return &EntitiesFileTypeGetOK{}
}

/*
EntitiesFileTypeGetOK describes a response with status code 200, with default header values.

OK
*/
type EntitiesFileTypeGetOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIFileTypeMSAResponseV1
}

// IsSuccess returns true when this entities file type get o k response has a 2xx status code
func (o *EntitiesFileTypeGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this entities file type get o k response has a 3xx status code
func (o *EntitiesFileTypeGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities file type get o k response has a 4xx status code
func (o *EntitiesFileTypeGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this entities file type get o k response has a 5xx status code
func (o *EntitiesFileTypeGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this entities file type get o k response a status code equal to that given
func (o *EntitiesFileTypeGetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the entities file type get o k response
func (o *EntitiesFileTypeGetOK) Code() int {
	return 200
}

func (o *EntitiesFileTypeGetOK) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/file-types/v1][%d] entitiesFileTypeGetOK  %+v", 200, o.Payload)
}

func (o *EntitiesFileTypeGetOK) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/file-types/v1][%d] entitiesFileTypeGetOK  %+v", 200, o.Payload)
}

func (o *EntitiesFileTypeGetOK) GetPayload() *models.APIFileTypeMSAResponseV1 {
	return o.Payload
}

func (o *EntitiesFileTypeGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIFileTypeMSAResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesFileTypeGetBadRequest creates a EntitiesFileTypeGetBadRequest with default headers values
func NewEntitiesFileTypeGetBadRequest() *EntitiesFileTypeGetBadRequest {
	return &EntitiesFileTypeGetBadRequest{}
}

/*
EntitiesFileTypeGetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type EntitiesFileTypeGetBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this entities file type get bad request response has a 2xx status code
func (o *EntitiesFileTypeGetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities file type get bad request response has a 3xx status code
func (o *EntitiesFileTypeGetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities file type get bad request response has a 4xx status code
func (o *EntitiesFileTypeGetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities file type get bad request response has a 5xx status code
func (o *EntitiesFileTypeGetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this entities file type get bad request response a status code equal to that given
func (o *EntitiesFileTypeGetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the entities file type get bad request response
func (o *EntitiesFileTypeGetBadRequest) Code() int {
	return 400
}

func (o *EntitiesFileTypeGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/file-types/v1][%d] entitiesFileTypeGetBadRequest  %+v", 400, o.Payload)
}

func (o *EntitiesFileTypeGetBadRequest) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/file-types/v1][%d] entitiesFileTypeGetBadRequest  %+v", 400, o.Payload)
}

func (o *EntitiesFileTypeGetBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *EntitiesFileTypeGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesFileTypeGetForbidden creates a EntitiesFileTypeGetForbidden with default headers values
func NewEntitiesFileTypeGetForbidden() *EntitiesFileTypeGetForbidden {
	return &EntitiesFileTypeGetForbidden{}
}

/*
EntitiesFileTypeGetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type EntitiesFileTypeGetForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this entities file type get forbidden response has a 2xx status code
func (o *EntitiesFileTypeGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities file type get forbidden response has a 3xx status code
func (o *EntitiesFileTypeGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities file type get forbidden response has a 4xx status code
func (o *EntitiesFileTypeGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities file type get forbidden response has a 5xx status code
func (o *EntitiesFileTypeGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this entities file type get forbidden response a status code equal to that given
func (o *EntitiesFileTypeGetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the entities file type get forbidden response
func (o *EntitiesFileTypeGetForbidden) Code() int {
	return 403
}

func (o *EntitiesFileTypeGetForbidden) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/file-types/v1][%d] entitiesFileTypeGetForbidden  %+v", 403, o.Payload)
}

func (o *EntitiesFileTypeGetForbidden) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/file-types/v1][%d] entitiesFileTypeGetForbidden  %+v", 403, o.Payload)
}

func (o *EntitiesFileTypeGetForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *EntitiesFileTypeGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesFileTypeGetNotFound creates a EntitiesFileTypeGetNotFound with default headers values
func NewEntitiesFileTypeGetNotFound() *EntitiesFileTypeGetNotFound {
	return &EntitiesFileTypeGetNotFound{}
}

/*
EntitiesFileTypeGetNotFound describes a response with status code 404, with default header values.

Not Found
*/
type EntitiesFileTypeGetNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this entities file type get not found response has a 2xx status code
func (o *EntitiesFileTypeGetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities file type get not found response has a 3xx status code
func (o *EntitiesFileTypeGetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities file type get not found response has a 4xx status code
func (o *EntitiesFileTypeGetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities file type get not found response has a 5xx status code
func (o *EntitiesFileTypeGetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this entities file type get not found response a status code equal to that given
func (o *EntitiesFileTypeGetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the entities file type get not found response
func (o *EntitiesFileTypeGetNotFound) Code() int {
	return 404
}

func (o *EntitiesFileTypeGetNotFound) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/file-types/v1][%d] entitiesFileTypeGetNotFound  %+v", 404, o.Payload)
}

func (o *EntitiesFileTypeGetNotFound) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/file-types/v1][%d] entitiesFileTypeGetNotFound  %+v", 404, o.Payload)
}

func (o *EntitiesFileTypeGetNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *EntitiesFileTypeGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesFileTypeGetTooManyRequests creates a EntitiesFileTypeGetTooManyRequests with default headers values
func NewEntitiesFileTypeGetTooManyRequests() *EntitiesFileTypeGetTooManyRequests {
	return &EntitiesFileTypeGetTooManyRequests{}
}

/*
EntitiesFileTypeGetTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type EntitiesFileTypeGetTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this entities file type get too many requests response has a 2xx status code
func (o *EntitiesFileTypeGetTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities file type get too many requests response has a 3xx status code
func (o *EntitiesFileTypeGetTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities file type get too many requests response has a 4xx status code
func (o *EntitiesFileTypeGetTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities file type get too many requests response has a 5xx status code
func (o *EntitiesFileTypeGetTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this entities file type get too many requests response a status code equal to that given
func (o *EntitiesFileTypeGetTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the entities file type get too many requests response
func (o *EntitiesFileTypeGetTooManyRequests) Code() int {
	return 429
}

func (o *EntitiesFileTypeGetTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/file-types/v1][%d] entitiesFileTypeGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *EntitiesFileTypeGetTooManyRequests) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/file-types/v1][%d] entitiesFileTypeGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *EntitiesFileTypeGetTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *EntitiesFileTypeGetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesFileTypeGetInternalServerError creates a EntitiesFileTypeGetInternalServerError with default headers values
func NewEntitiesFileTypeGetInternalServerError() *EntitiesFileTypeGetInternalServerError {
	return &EntitiesFileTypeGetInternalServerError{}
}

/*
EntitiesFileTypeGetInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type EntitiesFileTypeGetInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this entities file type get internal server error response has a 2xx status code
func (o *EntitiesFileTypeGetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities file type get internal server error response has a 3xx status code
func (o *EntitiesFileTypeGetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities file type get internal server error response has a 4xx status code
func (o *EntitiesFileTypeGetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this entities file type get internal server error response has a 5xx status code
func (o *EntitiesFileTypeGetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this entities file type get internal server error response a status code equal to that given
func (o *EntitiesFileTypeGetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the entities file type get internal server error response
func (o *EntitiesFileTypeGetInternalServerError) Code() int {
	return 500
}

func (o *EntitiesFileTypeGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/file-types/v1][%d] entitiesFileTypeGetInternalServerError  %+v", 500, o.Payload)
}

func (o *EntitiesFileTypeGetInternalServerError) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/file-types/v1][%d] entitiesFileTypeGetInternalServerError  %+v", 500, o.Payload)
}

func (o *EntitiesFileTypeGetInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *EntitiesFileTypeGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
