// Code generated by go-swagger; DO NOT EDIT.

package data_protection_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// EntitiesCloudApplicationPatchReader is a Reader for the EntitiesCloudApplicationPatch structure.
type EntitiesCloudApplicationPatchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EntitiesCloudApplicationPatchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEntitiesCloudApplicationPatchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEntitiesCloudApplicationPatchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEntitiesCloudApplicationPatchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewEntitiesCloudApplicationPatchTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEntitiesCloudApplicationPatchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /data-protection/entities/cloud-applications/v1] entities.cloud-application.patch", response, response.Code())
	}
}

// NewEntitiesCloudApplicationPatchOK creates a EntitiesCloudApplicationPatchOK with default headers values
func NewEntitiesCloudApplicationPatchOK() *EntitiesCloudApplicationPatchOK {
	return &EntitiesCloudApplicationPatchOK{}
}

/*
EntitiesCloudApplicationPatchOK describes a response with status code 200, with default header values.

OK
*/
type EntitiesCloudApplicationPatchOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APICloudApplicationMSAResponseV1
}

// IsSuccess returns true when this entities cloud application patch o k response has a 2xx status code
func (o *EntitiesCloudApplicationPatchOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this entities cloud application patch o k response has a 3xx status code
func (o *EntitiesCloudApplicationPatchOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities cloud application patch o k response has a 4xx status code
func (o *EntitiesCloudApplicationPatchOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this entities cloud application patch o k response has a 5xx status code
func (o *EntitiesCloudApplicationPatchOK) IsServerError() bool {
	return false
}

// IsCode returns true when this entities cloud application patch o k response a status code equal to that given
func (o *EntitiesCloudApplicationPatchOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the entities cloud application patch o k response
func (o *EntitiesCloudApplicationPatchOK) Code() int {
	return 200
}

func (o *EntitiesCloudApplicationPatchOK) Error() string {
	return fmt.Sprintf("[PATCH /data-protection/entities/cloud-applications/v1][%d] entitiesCloudApplicationPatchOK  %+v", 200, o.Payload)
}

func (o *EntitiesCloudApplicationPatchOK) String() string {
	return fmt.Sprintf("[PATCH /data-protection/entities/cloud-applications/v1][%d] entitiesCloudApplicationPatchOK  %+v", 200, o.Payload)
}

func (o *EntitiesCloudApplicationPatchOK) GetPayload() *models.APICloudApplicationMSAResponseV1 {
	return o.Payload
}

func (o *EntitiesCloudApplicationPatchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APICloudApplicationMSAResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesCloudApplicationPatchBadRequest creates a EntitiesCloudApplicationPatchBadRequest with default headers values
func NewEntitiesCloudApplicationPatchBadRequest() *EntitiesCloudApplicationPatchBadRequest {
	return &EntitiesCloudApplicationPatchBadRequest{}
}

/*
EntitiesCloudApplicationPatchBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type EntitiesCloudApplicationPatchBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this entities cloud application patch bad request response has a 2xx status code
func (o *EntitiesCloudApplicationPatchBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities cloud application patch bad request response has a 3xx status code
func (o *EntitiesCloudApplicationPatchBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities cloud application patch bad request response has a 4xx status code
func (o *EntitiesCloudApplicationPatchBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities cloud application patch bad request response has a 5xx status code
func (o *EntitiesCloudApplicationPatchBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this entities cloud application patch bad request response a status code equal to that given
func (o *EntitiesCloudApplicationPatchBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the entities cloud application patch bad request response
func (o *EntitiesCloudApplicationPatchBadRequest) Code() int {
	return 400
}

func (o *EntitiesCloudApplicationPatchBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /data-protection/entities/cloud-applications/v1][%d] entitiesCloudApplicationPatchBadRequest  %+v", 400, o.Payload)
}

func (o *EntitiesCloudApplicationPatchBadRequest) String() string {
	return fmt.Sprintf("[PATCH /data-protection/entities/cloud-applications/v1][%d] entitiesCloudApplicationPatchBadRequest  %+v", 400, o.Payload)
}

func (o *EntitiesCloudApplicationPatchBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *EntitiesCloudApplicationPatchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesCloudApplicationPatchForbidden creates a EntitiesCloudApplicationPatchForbidden with default headers values
func NewEntitiesCloudApplicationPatchForbidden() *EntitiesCloudApplicationPatchForbidden {
	return &EntitiesCloudApplicationPatchForbidden{}
}

/*
EntitiesCloudApplicationPatchForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type EntitiesCloudApplicationPatchForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this entities cloud application patch forbidden response has a 2xx status code
func (o *EntitiesCloudApplicationPatchForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities cloud application patch forbidden response has a 3xx status code
func (o *EntitiesCloudApplicationPatchForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities cloud application patch forbidden response has a 4xx status code
func (o *EntitiesCloudApplicationPatchForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities cloud application patch forbidden response has a 5xx status code
func (o *EntitiesCloudApplicationPatchForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this entities cloud application patch forbidden response a status code equal to that given
func (o *EntitiesCloudApplicationPatchForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the entities cloud application patch forbidden response
func (o *EntitiesCloudApplicationPatchForbidden) Code() int {
	return 403
}

func (o *EntitiesCloudApplicationPatchForbidden) Error() string {
	return fmt.Sprintf("[PATCH /data-protection/entities/cloud-applications/v1][%d] entitiesCloudApplicationPatchForbidden  %+v", 403, o.Payload)
}

func (o *EntitiesCloudApplicationPatchForbidden) String() string {
	return fmt.Sprintf("[PATCH /data-protection/entities/cloud-applications/v1][%d] entitiesCloudApplicationPatchForbidden  %+v", 403, o.Payload)
}

func (o *EntitiesCloudApplicationPatchForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *EntitiesCloudApplicationPatchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesCloudApplicationPatchTooManyRequests creates a EntitiesCloudApplicationPatchTooManyRequests with default headers values
func NewEntitiesCloudApplicationPatchTooManyRequests() *EntitiesCloudApplicationPatchTooManyRequests {
	return &EntitiesCloudApplicationPatchTooManyRequests{}
}

/*
EntitiesCloudApplicationPatchTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type EntitiesCloudApplicationPatchTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this entities cloud application patch too many requests response has a 2xx status code
func (o *EntitiesCloudApplicationPatchTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities cloud application patch too many requests response has a 3xx status code
func (o *EntitiesCloudApplicationPatchTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities cloud application patch too many requests response has a 4xx status code
func (o *EntitiesCloudApplicationPatchTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities cloud application patch too many requests response has a 5xx status code
func (o *EntitiesCloudApplicationPatchTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this entities cloud application patch too many requests response a status code equal to that given
func (o *EntitiesCloudApplicationPatchTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the entities cloud application patch too many requests response
func (o *EntitiesCloudApplicationPatchTooManyRequests) Code() int {
	return 429
}

func (o *EntitiesCloudApplicationPatchTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /data-protection/entities/cloud-applications/v1][%d] entitiesCloudApplicationPatchTooManyRequests  %+v", 429, o.Payload)
}

func (o *EntitiesCloudApplicationPatchTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /data-protection/entities/cloud-applications/v1][%d] entitiesCloudApplicationPatchTooManyRequests  %+v", 429, o.Payload)
}

func (o *EntitiesCloudApplicationPatchTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *EntitiesCloudApplicationPatchTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesCloudApplicationPatchInternalServerError creates a EntitiesCloudApplicationPatchInternalServerError with default headers values
func NewEntitiesCloudApplicationPatchInternalServerError() *EntitiesCloudApplicationPatchInternalServerError {
	return &EntitiesCloudApplicationPatchInternalServerError{}
}

/*
EntitiesCloudApplicationPatchInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type EntitiesCloudApplicationPatchInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this entities cloud application patch internal server error response has a 2xx status code
func (o *EntitiesCloudApplicationPatchInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities cloud application patch internal server error response has a 3xx status code
func (o *EntitiesCloudApplicationPatchInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities cloud application patch internal server error response has a 4xx status code
func (o *EntitiesCloudApplicationPatchInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this entities cloud application patch internal server error response has a 5xx status code
func (o *EntitiesCloudApplicationPatchInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this entities cloud application patch internal server error response a status code equal to that given
func (o *EntitiesCloudApplicationPatchInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the entities cloud application patch internal server error response
func (o *EntitiesCloudApplicationPatchInternalServerError) Code() int {
	return 500
}

func (o *EntitiesCloudApplicationPatchInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /data-protection/entities/cloud-applications/v1][%d] entitiesCloudApplicationPatchInternalServerError  %+v", 500, o.Payload)
}

func (o *EntitiesCloudApplicationPatchInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /data-protection/entities/cloud-applications/v1][%d] entitiesCloudApplicationPatchInternalServerError  %+v", 500, o.Payload)
}

func (o *EntitiesCloudApplicationPatchInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *EntitiesCloudApplicationPatchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
