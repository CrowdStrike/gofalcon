// Code generated by go-swagger; DO NOT EDIT.

package data_protection_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// EntitiesPolicyGetV2Reader is a Reader for the EntitiesPolicyGetV2 structure.
type EntitiesPolicyGetV2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EntitiesPolicyGetV2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEntitiesPolicyGetV2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEntitiesPolicyGetV2BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEntitiesPolicyGetV2Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEntitiesPolicyGetV2NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewEntitiesPolicyGetV2TooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEntitiesPolicyGetV2InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /data-protection/entities/policies/v2] entities.policy.get.v2", response, response.Code())
	}
}

// NewEntitiesPolicyGetV2OK creates a EntitiesPolicyGetV2OK with default headers values
func NewEntitiesPolicyGetV2OK() *EntitiesPolicyGetV2OK {
	return &EntitiesPolicyGetV2OK{}
}

/*
EntitiesPolicyGetV2OK describes a response with status code 200, with default header values.

OK
*/
type EntitiesPolicyGetV2OK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.PolicymanagerPoliciesResponse
}

// IsSuccess returns true when this entities policy get v2 o k response has a 2xx status code
func (o *EntitiesPolicyGetV2OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this entities policy get v2 o k response has a 3xx status code
func (o *EntitiesPolicyGetV2OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities policy get v2 o k response has a 4xx status code
func (o *EntitiesPolicyGetV2OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this entities policy get v2 o k response has a 5xx status code
func (o *EntitiesPolicyGetV2OK) IsServerError() bool {
	return false
}

// IsCode returns true when this entities policy get v2 o k response a status code equal to that given
func (o *EntitiesPolicyGetV2OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the entities policy get v2 o k response
func (o *EntitiesPolicyGetV2OK) Code() int {
	return 200
}

func (o *EntitiesPolicyGetV2OK) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/policies/v2][%d] entitiesPolicyGetV2OK  %+v", 200, o.Payload)
}

func (o *EntitiesPolicyGetV2OK) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/policies/v2][%d] entitiesPolicyGetV2OK  %+v", 200, o.Payload)
}

func (o *EntitiesPolicyGetV2OK) GetPayload() *models.PolicymanagerPoliciesResponse {
	return o.Payload
}

func (o *EntitiesPolicyGetV2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.PolicymanagerPoliciesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesPolicyGetV2BadRequest creates a EntitiesPolicyGetV2BadRequest with default headers values
func NewEntitiesPolicyGetV2BadRequest() *EntitiesPolicyGetV2BadRequest {
	return &EntitiesPolicyGetV2BadRequest{}
}

/*
EntitiesPolicyGetV2BadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type EntitiesPolicyGetV2BadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.PolicymanagerPoliciesResponse
}

// IsSuccess returns true when this entities policy get v2 bad request response has a 2xx status code
func (o *EntitiesPolicyGetV2BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities policy get v2 bad request response has a 3xx status code
func (o *EntitiesPolicyGetV2BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities policy get v2 bad request response has a 4xx status code
func (o *EntitiesPolicyGetV2BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities policy get v2 bad request response has a 5xx status code
func (o *EntitiesPolicyGetV2BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this entities policy get v2 bad request response a status code equal to that given
func (o *EntitiesPolicyGetV2BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the entities policy get v2 bad request response
func (o *EntitiesPolicyGetV2BadRequest) Code() int {
	return 400
}

func (o *EntitiesPolicyGetV2BadRequest) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/policies/v2][%d] entitiesPolicyGetV2BadRequest  %+v", 400, o.Payload)
}

func (o *EntitiesPolicyGetV2BadRequest) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/policies/v2][%d] entitiesPolicyGetV2BadRequest  %+v", 400, o.Payload)
}

func (o *EntitiesPolicyGetV2BadRequest) GetPayload() *models.PolicymanagerPoliciesResponse {
	return o.Payload
}

func (o *EntitiesPolicyGetV2BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.PolicymanagerPoliciesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesPolicyGetV2Forbidden creates a EntitiesPolicyGetV2Forbidden with default headers values
func NewEntitiesPolicyGetV2Forbidden() *EntitiesPolicyGetV2Forbidden {
	return &EntitiesPolicyGetV2Forbidden{}
}

/*
EntitiesPolicyGetV2Forbidden describes a response with status code 403, with default header values.

Forbidden
*/
type EntitiesPolicyGetV2Forbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.PolicymanagerPoliciesResponse
}

// IsSuccess returns true when this entities policy get v2 forbidden response has a 2xx status code
func (o *EntitiesPolicyGetV2Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities policy get v2 forbidden response has a 3xx status code
func (o *EntitiesPolicyGetV2Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities policy get v2 forbidden response has a 4xx status code
func (o *EntitiesPolicyGetV2Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities policy get v2 forbidden response has a 5xx status code
func (o *EntitiesPolicyGetV2Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this entities policy get v2 forbidden response a status code equal to that given
func (o *EntitiesPolicyGetV2Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the entities policy get v2 forbidden response
func (o *EntitiesPolicyGetV2Forbidden) Code() int {
	return 403
}

func (o *EntitiesPolicyGetV2Forbidden) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/policies/v2][%d] entitiesPolicyGetV2Forbidden  %+v", 403, o.Payload)
}

func (o *EntitiesPolicyGetV2Forbidden) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/policies/v2][%d] entitiesPolicyGetV2Forbidden  %+v", 403, o.Payload)
}

func (o *EntitiesPolicyGetV2Forbidden) GetPayload() *models.PolicymanagerPoliciesResponse {
	return o.Payload
}

func (o *EntitiesPolicyGetV2Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.PolicymanagerPoliciesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesPolicyGetV2NotFound creates a EntitiesPolicyGetV2NotFound with default headers values
func NewEntitiesPolicyGetV2NotFound() *EntitiesPolicyGetV2NotFound {
	return &EntitiesPolicyGetV2NotFound{}
}

/*
EntitiesPolicyGetV2NotFound describes a response with status code 404, with default header values.

Not Found
*/
type EntitiesPolicyGetV2NotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.PolicymanagerPoliciesResponse
}

// IsSuccess returns true when this entities policy get v2 not found response has a 2xx status code
func (o *EntitiesPolicyGetV2NotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities policy get v2 not found response has a 3xx status code
func (o *EntitiesPolicyGetV2NotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities policy get v2 not found response has a 4xx status code
func (o *EntitiesPolicyGetV2NotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities policy get v2 not found response has a 5xx status code
func (o *EntitiesPolicyGetV2NotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this entities policy get v2 not found response a status code equal to that given
func (o *EntitiesPolicyGetV2NotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the entities policy get v2 not found response
func (o *EntitiesPolicyGetV2NotFound) Code() int {
	return 404
}

func (o *EntitiesPolicyGetV2NotFound) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/policies/v2][%d] entitiesPolicyGetV2NotFound  %+v", 404, o.Payload)
}

func (o *EntitiesPolicyGetV2NotFound) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/policies/v2][%d] entitiesPolicyGetV2NotFound  %+v", 404, o.Payload)
}

func (o *EntitiesPolicyGetV2NotFound) GetPayload() *models.PolicymanagerPoliciesResponse {
	return o.Payload
}

func (o *EntitiesPolicyGetV2NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.PolicymanagerPoliciesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesPolicyGetV2TooManyRequests creates a EntitiesPolicyGetV2TooManyRequests with default headers values
func NewEntitiesPolicyGetV2TooManyRequests() *EntitiesPolicyGetV2TooManyRequests {
	return &EntitiesPolicyGetV2TooManyRequests{}
}

/*
EntitiesPolicyGetV2TooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type EntitiesPolicyGetV2TooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this entities policy get v2 too many requests response has a 2xx status code
func (o *EntitiesPolicyGetV2TooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities policy get v2 too many requests response has a 3xx status code
func (o *EntitiesPolicyGetV2TooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities policy get v2 too many requests response has a 4xx status code
func (o *EntitiesPolicyGetV2TooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities policy get v2 too many requests response has a 5xx status code
func (o *EntitiesPolicyGetV2TooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this entities policy get v2 too many requests response a status code equal to that given
func (o *EntitiesPolicyGetV2TooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the entities policy get v2 too many requests response
func (o *EntitiesPolicyGetV2TooManyRequests) Code() int {
	return 429
}

func (o *EntitiesPolicyGetV2TooManyRequests) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/policies/v2][%d] entitiesPolicyGetV2TooManyRequests  %+v", 429, o.Payload)
}

func (o *EntitiesPolicyGetV2TooManyRequests) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/policies/v2][%d] entitiesPolicyGetV2TooManyRequests  %+v", 429, o.Payload)
}

func (o *EntitiesPolicyGetV2TooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *EntitiesPolicyGetV2TooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesPolicyGetV2InternalServerError creates a EntitiesPolicyGetV2InternalServerError with default headers values
func NewEntitiesPolicyGetV2InternalServerError() *EntitiesPolicyGetV2InternalServerError {
	return &EntitiesPolicyGetV2InternalServerError{}
}

/*
EntitiesPolicyGetV2InternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type EntitiesPolicyGetV2InternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.PolicymanagerPoliciesResponse
}

// IsSuccess returns true when this entities policy get v2 internal server error response has a 2xx status code
func (o *EntitiesPolicyGetV2InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities policy get v2 internal server error response has a 3xx status code
func (o *EntitiesPolicyGetV2InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities policy get v2 internal server error response has a 4xx status code
func (o *EntitiesPolicyGetV2InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this entities policy get v2 internal server error response has a 5xx status code
func (o *EntitiesPolicyGetV2InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this entities policy get v2 internal server error response a status code equal to that given
func (o *EntitiesPolicyGetV2InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the entities policy get v2 internal server error response
func (o *EntitiesPolicyGetV2InternalServerError) Code() int {
	return 500
}

func (o *EntitiesPolicyGetV2InternalServerError) Error() string {
	return fmt.Sprintf("[GET /data-protection/entities/policies/v2][%d] entitiesPolicyGetV2InternalServerError  %+v", 500, o.Payload)
}

func (o *EntitiesPolicyGetV2InternalServerError) String() string {
	return fmt.Sprintf("[GET /data-protection/entities/policies/v2][%d] entitiesPolicyGetV2InternalServerError  %+v", 500, o.Payload)
}

func (o *EntitiesPolicyGetV2InternalServerError) GetPayload() *models.PolicymanagerPoliciesResponse {
	return o.Payload
}

func (o *EntitiesPolicyGetV2InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.PolicymanagerPoliciesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
