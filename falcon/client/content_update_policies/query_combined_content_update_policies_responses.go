// Code generated by go-swagger; DO NOT EDIT.

package content_update_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// QueryCombinedContentUpdatePoliciesReader is a Reader for the QueryCombinedContentUpdatePolicies structure.
type QueryCombinedContentUpdatePoliciesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryCombinedContentUpdatePoliciesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryCombinedContentUpdatePoliciesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryCombinedContentUpdatePoliciesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewQueryCombinedContentUpdatePoliciesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewQueryCombinedContentUpdatePoliciesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewQueryCombinedContentUpdatePoliciesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /policy/combined/content-update/v1] queryCombinedContentUpdatePolicies", response, response.Code())
	}
}

// NewQueryCombinedContentUpdatePoliciesOK creates a QueryCombinedContentUpdatePoliciesOK with default headers values
func NewQueryCombinedContentUpdatePoliciesOK() *QueryCombinedContentUpdatePoliciesOK {
	return &QueryCombinedContentUpdatePoliciesOK{}
}

/*
QueryCombinedContentUpdatePoliciesOK describes a response with status code 200, with default header values.

OK
*/
type QueryCombinedContentUpdatePoliciesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainContentUpdatePolicyRespV1
}

// IsSuccess returns true when this query combined content update policies o k response has a 2xx status code
func (o *QueryCombinedContentUpdatePoliciesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this query combined content update policies o k response has a 3xx status code
func (o *QueryCombinedContentUpdatePoliciesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query combined content update policies o k response has a 4xx status code
func (o *QueryCombinedContentUpdatePoliciesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this query combined content update policies o k response has a 5xx status code
func (o *QueryCombinedContentUpdatePoliciesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this query combined content update policies o k response a status code equal to that given
func (o *QueryCombinedContentUpdatePoliciesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the query combined content update policies o k response
func (o *QueryCombinedContentUpdatePoliciesOK) Code() int {
	return 200
}

func (o *QueryCombinedContentUpdatePoliciesOK) Error() string {
	return fmt.Sprintf("[GET /policy/combined/content-update/v1][%d] queryCombinedContentUpdatePoliciesOK  %+v", 200, o.Payload)
}

func (o *QueryCombinedContentUpdatePoliciesOK) String() string {
	return fmt.Sprintf("[GET /policy/combined/content-update/v1][%d] queryCombinedContentUpdatePoliciesOK  %+v", 200, o.Payload)
}

func (o *QueryCombinedContentUpdatePoliciesOK) GetPayload() *models.DomainContentUpdatePolicyRespV1 {
	return o.Payload
}

func (o *QueryCombinedContentUpdatePoliciesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainContentUpdatePolicyRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryCombinedContentUpdatePoliciesBadRequest creates a QueryCombinedContentUpdatePoliciesBadRequest with default headers values
func NewQueryCombinedContentUpdatePoliciesBadRequest() *QueryCombinedContentUpdatePoliciesBadRequest {
	return &QueryCombinedContentUpdatePoliciesBadRequest{}
}

/*
QueryCombinedContentUpdatePoliciesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type QueryCombinedContentUpdatePoliciesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainContentUpdatePolicyRespV1
}

// IsSuccess returns true when this query combined content update policies bad request response has a 2xx status code
func (o *QueryCombinedContentUpdatePoliciesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query combined content update policies bad request response has a 3xx status code
func (o *QueryCombinedContentUpdatePoliciesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query combined content update policies bad request response has a 4xx status code
func (o *QueryCombinedContentUpdatePoliciesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this query combined content update policies bad request response has a 5xx status code
func (o *QueryCombinedContentUpdatePoliciesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this query combined content update policies bad request response a status code equal to that given
func (o *QueryCombinedContentUpdatePoliciesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the query combined content update policies bad request response
func (o *QueryCombinedContentUpdatePoliciesBadRequest) Code() int {
	return 400
}

func (o *QueryCombinedContentUpdatePoliciesBadRequest) Error() string {
	return fmt.Sprintf("[GET /policy/combined/content-update/v1][%d] queryCombinedContentUpdatePoliciesBadRequest  %+v", 400, o.Payload)
}

func (o *QueryCombinedContentUpdatePoliciesBadRequest) String() string {
	return fmt.Sprintf("[GET /policy/combined/content-update/v1][%d] queryCombinedContentUpdatePoliciesBadRequest  %+v", 400, o.Payload)
}

func (o *QueryCombinedContentUpdatePoliciesBadRequest) GetPayload() *models.DomainContentUpdatePolicyRespV1 {
	return o.Payload
}

func (o *QueryCombinedContentUpdatePoliciesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainContentUpdatePolicyRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryCombinedContentUpdatePoliciesForbidden creates a QueryCombinedContentUpdatePoliciesForbidden with default headers values
func NewQueryCombinedContentUpdatePoliciesForbidden() *QueryCombinedContentUpdatePoliciesForbidden {
	return &QueryCombinedContentUpdatePoliciesForbidden{}
}

/*
QueryCombinedContentUpdatePoliciesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type QueryCombinedContentUpdatePoliciesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaErrorsOnly
}

// IsSuccess returns true when this query combined content update policies forbidden response has a 2xx status code
func (o *QueryCombinedContentUpdatePoliciesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query combined content update policies forbidden response has a 3xx status code
func (o *QueryCombinedContentUpdatePoliciesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query combined content update policies forbidden response has a 4xx status code
func (o *QueryCombinedContentUpdatePoliciesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this query combined content update policies forbidden response has a 5xx status code
func (o *QueryCombinedContentUpdatePoliciesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this query combined content update policies forbidden response a status code equal to that given
func (o *QueryCombinedContentUpdatePoliciesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the query combined content update policies forbidden response
func (o *QueryCombinedContentUpdatePoliciesForbidden) Code() int {
	return 403
}

func (o *QueryCombinedContentUpdatePoliciesForbidden) Error() string {
	return fmt.Sprintf("[GET /policy/combined/content-update/v1][%d] queryCombinedContentUpdatePoliciesForbidden  %+v", 403, o.Payload)
}

func (o *QueryCombinedContentUpdatePoliciesForbidden) String() string {
	return fmt.Sprintf("[GET /policy/combined/content-update/v1][%d] queryCombinedContentUpdatePoliciesForbidden  %+v", 403, o.Payload)
}

func (o *QueryCombinedContentUpdatePoliciesForbidden) GetPayload() *models.MsaErrorsOnly {
	return o.Payload
}

func (o *QueryCombinedContentUpdatePoliciesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaErrorsOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryCombinedContentUpdatePoliciesTooManyRequests creates a QueryCombinedContentUpdatePoliciesTooManyRequests with default headers values
func NewQueryCombinedContentUpdatePoliciesTooManyRequests() *QueryCombinedContentUpdatePoliciesTooManyRequests {
	return &QueryCombinedContentUpdatePoliciesTooManyRequests{}
}

/*
QueryCombinedContentUpdatePoliciesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type QueryCombinedContentUpdatePoliciesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this query combined content update policies too many requests response has a 2xx status code
func (o *QueryCombinedContentUpdatePoliciesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query combined content update policies too many requests response has a 3xx status code
func (o *QueryCombinedContentUpdatePoliciesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query combined content update policies too many requests response has a 4xx status code
func (o *QueryCombinedContentUpdatePoliciesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this query combined content update policies too many requests response has a 5xx status code
func (o *QueryCombinedContentUpdatePoliciesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this query combined content update policies too many requests response a status code equal to that given
func (o *QueryCombinedContentUpdatePoliciesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the query combined content update policies too many requests response
func (o *QueryCombinedContentUpdatePoliciesTooManyRequests) Code() int {
	return 429
}

func (o *QueryCombinedContentUpdatePoliciesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /policy/combined/content-update/v1][%d] queryCombinedContentUpdatePoliciesTooManyRequests  %+v", 429, o.Payload)
}

func (o *QueryCombinedContentUpdatePoliciesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /policy/combined/content-update/v1][%d] queryCombinedContentUpdatePoliciesTooManyRequests  %+v", 429, o.Payload)
}

func (o *QueryCombinedContentUpdatePoliciesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryCombinedContentUpdatePoliciesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryCombinedContentUpdatePoliciesInternalServerError creates a QueryCombinedContentUpdatePoliciesInternalServerError with default headers values
func NewQueryCombinedContentUpdatePoliciesInternalServerError() *QueryCombinedContentUpdatePoliciesInternalServerError {
	return &QueryCombinedContentUpdatePoliciesInternalServerError{}
}

/*
QueryCombinedContentUpdatePoliciesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type QueryCombinedContentUpdatePoliciesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainContentUpdatePolicyRespV1
}

// IsSuccess returns true when this query combined content update policies internal server error response has a 2xx status code
func (o *QueryCombinedContentUpdatePoliciesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query combined content update policies internal server error response has a 3xx status code
func (o *QueryCombinedContentUpdatePoliciesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query combined content update policies internal server error response has a 4xx status code
func (o *QueryCombinedContentUpdatePoliciesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this query combined content update policies internal server error response has a 5xx status code
func (o *QueryCombinedContentUpdatePoliciesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this query combined content update policies internal server error response a status code equal to that given
func (o *QueryCombinedContentUpdatePoliciesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the query combined content update policies internal server error response
func (o *QueryCombinedContentUpdatePoliciesInternalServerError) Code() int {
	return 500
}

func (o *QueryCombinedContentUpdatePoliciesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /policy/combined/content-update/v1][%d] queryCombinedContentUpdatePoliciesInternalServerError  %+v", 500, o.Payload)
}

func (o *QueryCombinedContentUpdatePoliciesInternalServerError) String() string {
	return fmt.Sprintf("[GET /policy/combined/content-update/v1][%d] queryCombinedContentUpdatePoliciesInternalServerError  %+v", 500, o.Payload)
}

func (o *QueryCombinedContentUpdatePoliciesInternalServerError) GetPayload() *models.DomainContentUpdatePolicyRespV1 {
	return o.Payload
}

func (o *QueryCombinedContentUpdatePoliciesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainContentUpdatePolicyRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
