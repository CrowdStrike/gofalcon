// Code generated by go-swagger; DO NOT EDIT.

package content_update_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// QueryPinnableContentVersionsReader is a Reader for the QueryPinnableContentVersions structure.
type QueryPinnableContentVersionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryPinnableContentVersionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryPinnableContentVersionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryPinnableContentVersionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewQueryPinnableContentVersionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewQueryPinnableContentVersionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewQueryPinnableContentVersionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewQueryPinnableContentVersionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /policy/queries/content-update-pin-versions/v1] queryPinnableContentVersions", response, response.Code())
	}
}

// NewQueryPinnableContentVersionsOK creates a QueryPinnableContentVersionsOK with default headers values
func NewQueryPinnableContentVersionsOK() *QueryPinnableContentVersionsOK {
	return &QueryPinnableContentVersionsOK{}
}

/*
QueryPinnableContentVersionsOK describes a response with status code 200, with default header values.

OK
*/
type QueryPinnableContentVersionsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecQueryResponse
}

// IsSuccess returns true when this query pinnable content versions o k response has a 2xx status code
func (o *QueryPinnableContentVersionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this query pinnable content versions o k response has a 3xx status code
func (o *QueryPinnableContentVersionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query pinnable content versions o k response has a 4xx status code
func (o *QueryPinnableContentVersionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this query pinnable content versions o k response has a 5xx status code
func (o *QueryPinnableContentVersionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this query pinnable content versions o k response a status code equal to that given
func (o *QueryPinnableContentVersionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the query pinnable content versions o k response
func (o *QueryPinnableContentVersionsOK) Code() int {
	return 200
}

func (o *QueryPinnableContentVersionsOK) Error() string {
	return fmt.Sprintf("[GET /policy/queries/content-update-pin-versions/v1][%d] queryPinnableContentVersionsOK  %+v", 200, o.Payload)
}

func (o *QueryPinnableContentVersionsOK) String() string {
	return fmt.Sprintf("[GET /policy/queries/content-update-pin-versions/v1][%d] queryPinnableContentVersionsOK  %+v", 200, o.Payload)
}

func (o *QueryPinnableContentVersionsOK) GetPayload() *models.MsaspecQueryResponse {
	return o.Payload
}

func (o *QueryPinnableContentVersionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryPinnableContentVersionsBadRequest creates a QueryPinnableContentVersionsBadRequest with default headers values
func NewQueryPinnableContentVersionsBadRequest() *QueryPinnableContentVersionsBadRequest {
	return &QueryPinnableContentVersionsBadRequest{}
}

/*
QueryPinnableContentVersionsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type QueryPinnableContentVersionsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecQueryResponse
}

// IsSuccess returns true when this query pinnable content versions bad request response has a 2xx status code
func (o *QueryPinnableContentVersionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query pinnable content versions bad request response has a 3xx status code
func (o *QueryPinnableContentVersionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query pinnable content versions bad request response has a 4xx status code
func (o *QueryPinnableContentVersionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this query pinnable content versions bad request response has a 5xx status code
func (o *QueryPinnableContentVersionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this query pinnable content versions bad request response a status code equal to that given
func (o *QueryPinnableContentVersionsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the query pinnable content versions bad request response
func (o *QueryPinnableContentVersionsBadRequest) Code() int {
	return 400
}

func (o *QueryPinnableContentVersionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /policy/queries/content-update-pin-versions/v1][%d] queryPinnableContentVersionsBadRequest  %+v", 400, o.Payload)
}

func (o *QueryPinnableContentVersionsBadRequest) String() string {
	return fmt.Sprintf("[GET /policy/queries/content-update-pin-versions/v1][%d] queryPinnableContentVersionsBadRequest  %+v", 400, o.Payload)
}

func (o *QueryPinnableContentVersionsBadRequest) GetPayload() *models.MsaspecQueryResponse {
	return o.Payload
}

func (o *QueryPinnableContentVersionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryPinnableContentVersionsForbidden creates a QueryPinnableContentVersionsForbidden with default headers values
func NewQueryPinnableContentVersionsForbidden() *QueryPinnableContentVersionsForbidden {
	return &QueryPinnableContentVersionsForbidden{}
}

/*
QueryPinnableContentVersionsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type QueryPinnableContentVersionsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaErrorsOnly
}

// IsSuccess returns true when this query pinnable content versions forbidden response has a 2xx status code
func (o *QueryPinnableContentVersionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query pinnable content versions forbidden response has a 3xx status code
func (o *QueryPinnableContentVersionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query pinnable content versions forbidden response has a 4xx status code
func (o *QueryPinnableContentVersionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this query pinnable content versions forbidden response has a 5xx status code
func (o *QueryPinnableContentVersionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this query pinnable content versions forbidden response a status code equal to that given
func (o *QueryPinnableContentVersionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the query pinnable content versions forbidden response
func (o *QueryPinnableContentVersionsForbidden) Code() int {
	return 403
}

func (o *QueryPinnableContentVersionsForbidden) Error() string {
	return fmt.Sprintf("[GET /policy/queries/content-update-pin-versions/v1][%d] queryPinnableContentVersionsForbidden  %+v", 403, o.Payload)
}

func (o *QueryPinnableContentVersionsForbidden) String() string {
	return fmt.Sprintf("[GET /policy/queries/content-update-pin-versions/v1][%d] queryPinnableContentVersionsForbidden  %+v", 403, o.Payload)
}

func (o *QueryPinnableContentVersionsForbidden) GetPayload() *models.MsaErrorsOnly {
	return o.Payload
}

func (o *QueryPinnableContentVersionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaErrorsOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryPinnableContentVersionsNotFound creates a QueryPinnableContentVersionsNotFound with default headers values
func NewQueryPinnableContentVersionsNotFound() *QueryPinnableContentVersionsNotFound {
	return &QueryPinnableContentVersionsNotFound{}
}

/*
QueryPinnableContentVersionsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type QueryPinnableContentVersionsNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecQueryResponse
}

// IsSuccess returns true when this query pinnable content versions not found response has a 2xx status code
func (o *QueryPinnableContentVersionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query pinnable content versions not found response has a 3xx status code
func (o *QueryPinnableContentVersionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query pinnable content versions not found response has a 4xx status code
func (o *QueryPinnableContentVersionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this query pinnable content versions not found response has a 5xx status code
func (o *QueryPinnableContentVersionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this query pinnable content versions not found response a status code equal to that given
func (o *QueryPinnableContentVersionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the query pinnable content versions not found response
func (o *QueryPinnableContentVersionsNotFound) Code() int {
	return 404
}

func (o *QueryPinnableContentVersionsNotFound) Error() string {
	return fmt.Sprintf("[GET /policy/queries/content-update-pin-versions/v1][%d] queryPinnableContentVersionsNotFound  %+v", 404, o.Payload)
}

func (o *QueryPinnableContentVersionsNotFound) String() string {
	return fmt.Sprintf("[GET /policy/queries/content-update-pin-versions/v1][%d] queryPinnableContentVersionsNotFound  %+v", 404, o.Payload)
}

func (o *QueryPinnableContentVersionsNotFound) GetPayload() *models.MsaspecQueryResponse {
	return o.Payload
}

func (o *QueryPinnableContentVersionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryPinnableContentVersionsTooManyRequests creates a QueryPinnableContentVersionsTooManyRequests with default headers values
func NewQueryPinnableContentVersionsTooManyRequests() *QueryPinnableContentVersionsTooManyRequests {
	return &QueryPinnableContentVersionsTooManyRequests{}
}

/*
QueryPinnableContentVersionsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type QueryPinnableContentVersionsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this query pinnable content versions too many requests response has a 2xx status code
func (o *QueryPinnableContentVersionsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query pinnable content versions too many requests response has a 3xx status code
func (o *QueryPinnableContentVersionsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query pinnable content versions too many requests response has a 4xx status code
func (o *QueryPinnableContentVersionsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this query pinnable content versions too many requests response has a 5xx status code
func (o *QueryPinnableContentVersionsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this query pinnable content versions too many requests response a status code equal to that given
func (o *QueryPinnableContentVersionsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the query pinnable content versions too many requests response
func (o *QueryPinnableContentVersionsTooManyRequests) Code() int {
	return 429
}

func (o *QueryPinnableContentVersionsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /policy/queries/content-update-pin-versions/v1][%d] queryPinnableContentVersionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *QueryPinnableContentVersionsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /policy/queries/content-update-pin-versions/v1][%d] queryPinnableContentVersionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *QueryPinnableContentVersionsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryPinnableContentVersionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryPinnableContentVersionsInternalServerError creates a QueryPinnableContentVersionsInternalServerError with default headers values
func NewQueryPinnableContentVersionsInternalServerError() *QueryPinnableContentVersionsInternalServerError {
	return &QueryPinnableContentVersionsInternalServerError{}
}

/*
QueryPinnableContentVersionsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type QueryPinnableContentVersionsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecQueryResponse
}

// IsSuccess returns true when this query pinnable content versions internal server error response has a 2xx status code
func (o *QueryPinnableContentVersionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query pinnable content versions internal server error response has a 3xx status code
func (o *QueryPinnableContentVersionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query pinnable content versions internal server error response has a 4xx status code
func (o *QueryPinnableContentVersionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this query pinnable content versions internal server error response has a 5xx status code
func (o *QueryPinnableContentVersionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this query pinnable content versions internal server error response a status code equal to that given
func (o *QueryPinnableContentVersionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the query pinnable content versions internal server error response
func (o *QueryPinnableContentVersionsInternalServerError) Code() int {
	return 500
}

func (o *QueryPinnableContentVersionsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /policy/queries/content-update-pin-versions/v1][%d] queryPinnableContentVersionsInternalServerError  %+v", 500, o.Payload)
}

func (o *QueryPinnableContentVersionsInternalServerError) String() string {
	return fmt.Sprintf("[GET /policy/queries/content-update-pin-versions/v1][%d] queryPinnableContentVersionsInternalServerError  %+v", 500, o.Payload)
}

func (o *QueryPinnableContentVersionsInternalServerError) GetPayload() *models.MsaspecQueryResponse {
	return o.Payload
}

func (o *QueryPinnableContentVersionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
