// Code generated by go-swagger; DO NOT EDIT.

package content_update_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CreateContentUpdatePoliciesReader is a Reader for the CreateContentUpdatePolicies structure.
type CreateContentUpdatePoliciesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateContentUpdatePoliciesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateContentUpdatePoliciesCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateContentUpdatePoliciesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateContentUpdatePoliciesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateContentUpdatePoliciesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateContentUpdatePoliciesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateContentUpdatePoliciesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /policy/entities/content-update/v1] createContentUpdatePolicies", response, response.Code())
	}
}

// NewCreateContentUpdatePoliciesCreated creates a CreateContentUpdatePoliciesCreated with default headers values
func NewCreateContentUpdatePoliciesCreated() *CreateContentUpdatePoliciesCreated {
	return &CreateContentUpdatePoliciesCreated{}
}

/*
CreateContentUpdatePoliciesCreated describes a response with status code 201, with default header values.

Created
*/
type CreateContentUpdatePoliciesCreated struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ContentUpdateRespV1
}

// IsSuccess returns true when this create content update policies created response has a 2xx status code
func (o *CreateContentUpdatePoliciesCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create content update policies created response has a 3xx status code
func (o *CreateContentUpdatePoliciesCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create content update policies created response has a 4xx status code
func (o *CreateContentUpdatePoliciesCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create content update policies created response has a 5xx status code
func (o *CreateContentUpdatePoliciesCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create content update policies created response a status code equal to that given
func (o *CreateContentUpdatePoliciesCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create content update policies created response
func (o *CreateContentUpdatePoliciesCreated) Code() int {
	return 201
}

func (o *CreateContentUpdatePoliciesCreated) Error() string {
	return fmt.Sprintf("[POST /policy/entities/content-update/v1][%d] createContentUpdatePoliciesCreated  %+v", 201, o.Payload)
}

func (o *CreateContentUpdatePoliciesCreated) String() string {
	return fmt.Sprintf("[POST /policy/entities/content-update/v1][%d] createContentUpdatePoliciesCreated  %+v", 201, o.Payload)
}

func (o *CreateContentUpdatePoliciesCreated) GetPayload() *models.ContentUpdateRespV1 {
	return o.Payload
}

func (o *CreateContentUpdatePoliciesCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ContentUpdateRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateContentUpdatePoliciesBadRequest creates a CreateContentUpdatePoliciesBadRequest with default headers values
func NewCreateContentUpdatePoliciesBadRequest() *CreateContentUpdatePoliciesBadRequest {
	return &CreateContentUpdatePoliciesBadRequest{}
}

/*
CreateContentUpdatePoliciesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateContentUpdatePoliciesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ContentUpdateRespV1
}

// IsSuccess returns true when this create content update policies bad request response has a 2xx status code
func (o *CreateContentUpdatePoliciesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create content update policies bad request response has a 3xx status code
func (o *CreateContentUpdatePoliciesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create content update policies bad request response has a 4xx status code
func (o *CreateContentUpdatePoliciesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create content update policies bad request response has a 5xx status code
func (o *CreateContentUpdatePoliciesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create content update policies bad request response a status code equal to that given
func (o *CreateContentUpdatePoliciesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create content update policies bad request response
func (o *CreateContentUpdatePoliciesBadRequest) Code() int {
	return 400
}

func (o *CreateContentUpdatePoliciesBadRequest) Error() string {
	return fmt.Sprintf("[POST /policy/entities/content-update/v1][%d] createContentUpdatePoliciesBadRequest  %+v", 400, o.Payload)
}

func (o *CreateContentUpdatePoliciesBadRequest) String() string {
	return fmt.Sprintf("[POST /policy/entities/content-update/v1][%d] createContentUpdatePoliciesBadRequest  %+v", 400, o.Payload)
}

func (o *CreateContentUpdatePoliciesBadRequest) GetPayload() *models.ContentUpdateRespV1 {
	return o.Payload
}

func (o *CreateContentUpdatePoliciesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ContentUpdateRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateContentUpdatePoliciesForbidden creates a CreateContentUpdatePoliciesForbidden with default headers values
func NewCreateContentUpdatePoliciesForbidden() *CreateContentUpdatePoliciesForbidden {
	return &CreateContentUpdatePoliciesForbidden{}
}

/*
CreateContentUpdatePoliciesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateContentUpdatePoliciesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaErrorsOnly
}

// IsSuccess returns true when this create content update policies forbidden response has a 2xx status code
func (o *CreateContentUpdatePoliciesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create content update policies forbidden response has a 3xx status code
func (o *CreateContentUpdatePoliciesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create content update policies forbidden response has a 4xx status code
func (o *CreateContentUpdatePoliciesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create content update policies forbidden response has a 5xx status code
func (o *CreateContentUpdatePoliciesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create content update policies forbidden response a status code equal to that given
func (o *CreateContentUpdatePoliciesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create content update policies forbidden response
func (o *CreateContentUpdatePoliciesForbidden) Code() int {
	return 403
}

func (o *CreateContentUpdatePoliciesForbidden) Error() string {
	return fmt.Sprintf("[POST /policy/entities/content-update/v1][%d] createContentUpdatePoliciesForbidden  %+v", 403, o.Payload)
}

func (o *CreateContentUpdatePoliciesForbidden) String() string {
	return fmt.Sprintf("[POST /policy/entities/content-update/v1][%d] createContentUpdatePoliciesForbidden  %+v", 403, o.Payload)
}

func (o *CreateContentUpdatePoliciesForbidden) GetPayload() *models.MsaErrorsOnly {
	return o.Payload
}

func (o *CreateContentUpdatePoliciesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaErrorsOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateContentUpdatePoliciesNotFound creates a CreateContentUpdatePoliciesNotFound with default headers values
func NewCreateContentUpdatePoliciesNotFound() *CreateContentUpdatePoliciesNotFound {
	return &CreateContentUpdatePoliciesNotFound{}
}

/*
CreateContentUpdatePoliciesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateContentUpdatePoliciesNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ContentUpdateRespV1
}

// IsSuccess returns true when this create content update policies not found response has a 2xx status code
func (o *CreateContentUpdatePoliciesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create content update policies not found response has a 3xx status code
func (o *CreateContentUpdatePoliciesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create content update policies not found response has a 4xx status code
func (o *CreateContentUpdatePoliciesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create content update policies not found response has a 5xx status code
func (o *CreateContentUpdatePoliciesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create content update policies not found response a status code equal to that given
func (o *CreateContentUpdatePoliciesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create content update policies not found response
func (o *CreateContentUpdatePoliciesNotFound) Code() int {
	return 404
}

func (o *CreateContentUpdatePoliciesNotFound) Error() string {
	return fmt.Sprintf("[POST /policy/entities/content-update/v1][%d] createContentUpdatePoliciesNotFound  %+v", 404, o.Payload)
}

func (o *CreateContentUpdatePoliciesNotFound) String() string {
	return fmt.Sprintf("[POST /policy/entities/content-update/v1][%d] createContentUpdatePoliciesNotFound  %+v", 404, o.Payload)
}

func (o *CreateContentUpdatePoliciesNotFound) GetPayload() *models.ContentUpdateRespV1 {
	return o.Payload
}

func (o *CreateContentUpdatePoliciesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ContentUpdateRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateContentUpdatePoliciesTooManyRequests creates a CreateContentUpdatePoliciesTooManyRequests with default headers values
func NewCreateContentUpdatePoliciesTooManyRequests() *CreateContentUpdatePoliciesTooManyRequests {
	return &CreateContentUpdatePoliciesTooManyRequests{}
}

/*
CreateContentUpdatePoliciesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CreateContentUpdatePoliciesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this create content update policies too many requests response has a 2xx status code
func (o *CreateContentUpdatePoliciesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create content update policies too many requests response has a 3xx status code
func (o *CreateContentUpdatePoliciesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create content update policies too many requests response has a 4xx status code
func (o *CreateContentUpdatePoliciesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create content update policies too many requests response has a 5xx status code
func (o *CreateContentUpdatePoliciesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create content update policies too many requests response a status code equal to that given
func (o *CreateContentUpdatePoliciesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create content update policies too many requests response
func (o *CreateContentUpdatePoliciesTooManyRequests) Code() int {
	return 429
}

func (o *CreateContentUpdatePoliciesTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /policy/entities/content-update/v1][%d] createContentUpdatePoliciesTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateContentUpdatePoliciesTooManyRequests) String() string {
	return fmt.Sprintf("[POST /policy/entities/content-update/v1][%d] createContentUpdatePoliciesTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateContentUpdatePoliciesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateContentUpdatePoliciesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateContentUpdatePoliciesInternalServerError creates a CreateContentUpdatePoliciesInternalServerError with default headers values
func NewCreateContentUpdatePoliciesInternalServerError() *CreateContentUpdatePoliciesInternalServerError {
	return &CreateContentUpdatePoliciesInternalServerError{}
}

/*
CreateContentUpdatePoliciesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateContentUpdatePoliciesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ContentUpdateRespV1
}

// IsSuccess returns true when this create content update policies internal server error response has a 2xx status code
func (o *CreateContentUpdatePoliciesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create content update policies internal server error response has a 3xx status code
func (o *CreateContentUpdatePoliciesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create content update policies internal server error response has a 4xx status code
func (o *CreateContentUpdatePoliciesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create content update policies internal server error response has a 5xx status code
func (o *CreateContentUpdatePoliciesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create content update policies internal server error response a status code equal to that given
func (o *CreateContentUpdatePoliciesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create content update policies internal server error response
func (o *CreateContentUpdatePoliciesInternalServerError) Code() int {
	return 500
}

func (o *CreateContentUpdatePoliciesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /policy/entities/content-update/v1][%d] createContentUpdatePoliciesInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateContentUpdatePoliciesInternalServerError) String() string {
	return fmt.Sprintf("[POST /policy/entities/content-update/v1][%d] createContentUpdatePoliciesInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateContentUpdatePoliciesInternalServerError) GetPayload() *models.ContentUpdateRespV1 {
	return o.Payload
}

func (o *CreateContentUpdatePoliciesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ContentUpdateRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
