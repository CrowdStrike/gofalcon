// Code generated by go-swagger; DO NOT EDIT.

package content_update_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// QueryContentUpdatePolicyMembersReader is a Reader for the QueryContentUpdatePolicyMembers structure.
type QueryContentUpdatePolicyMembersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryContentUpdatePolicyMembersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryContentUpdatePolicyMembersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryContentUpdatePolicyMembersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewQueryContentUpdatePolicyMembersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewQueryContentUpdatePolicyMembersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewQueryContentUpdatePolicyMembersTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewQueryContentUpdatePolicyMembersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /policy/queries/content-update-members/v1] queryContentUpdatePolicyMembers", response, response.Code())
	}
}

// NewQueryContentUpdatePolicyMembersOK creates a QueryContentUpdatePolicyMembersOK with default headers values
func NewQueryContentUpdatePolicyMembersOK() *QueryContentUpdatePolicyMembersOK {
	return &QueryContentUpdatePolicyMembersOK{}
}

/*
QueryContentUpdatePolicyMembersOK describes a response with status code 200, with default header values.

OK
*/
type QueryContentUpdatePolicyMembersOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaQueryResponse
}

// IsSuccess returns true when this query content update policy members o k response has a 2xx status code
func (o *QueryContentUpdatePolicyMembersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this query content update policy members o k response has a 3xx status code
func (o *QueryContentUpdatePolicyMembersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query content update policy members o k response has a 4xx status code
func (o *QueryContentUpdatePolicyMembersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this query content update policy members o k response has a 5xx status code
func (o *QueryContentUpdatePolicyMembersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this query content update policy members o k response a status code equal to that given
func (o *QueryContentUpdatePolicyMembersOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the query content update policy members o k response
func (o *QueryContentUpdatePolicyMembersOK) Code() int {
	return 200
}

func (o *QueryContentUpdatePolicyMembersOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/queries/content-update-members/v1][%d] queryContentUpdatePolicyMembersOK %s", 200, payload)
}

func (o *QueryContentUpdatePolicyMembersOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/queries/content-update-members/v1][%d] queryContentUpdatePolicyMembersOK %s", 200, payload)
}

func (o *QueryContentUpdatePolicyMembersOK) GetPayload() *models.MsaQueryResponse {
	return o.Payload
}

func (o *QueryContentUpdatePolicyMembersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryContentUpdatePolicyMembersBadRequest creates a QueryContentUpdatePolicyMembersBadRequest with default headers values
func NewQueryContentUpdatePolicyMembersBadRequest() *QueryContentUpdatePolicyMembersBadRequest {
	return &QueryContentUpdatePolicyMembersBadRequest{}
}

/*
QueryContentUpdatePolicyMembersBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type QueryContentUpdatePolicyMembersBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaQueryResponse
}

// IsSuccess returns true when this query content update policy members bad request response has a 2xx status code
func (o *QueryContentUpdatePolicyMembersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query content update policy members bad request response has a 3xx status code
func (o *QueryContentUpdatePolicyMembersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query content update policy members bad request response has a 4xx status code
func (o *QueryContentUpdatePolicyMembersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this query content update policy members bad request response has a 5xx status code
func (o *QueryContentUpdatePolicyMembersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this query content update policy members bad request response a status code equal to that given
func (o *QueryContentUpdatePolicyMembersBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the query content update policy members bad request response
func (o *QueryContentUpdatePolicyMembersBadRequest) Code() int {
	return 400
}

func (o *QueryContentUpdatePolicyMembersBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/queries/content-update-members/v1][%d] queryContentUpdatePolicyMembersBadRequest %s", 400, payload)
}

func (o *QueryContentUpdatePolicyMembersBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/queries/content-update-members/v1][%d] queryContentUpdatePolicyMembersBadRequest %s", 400, payload)
}

func (o *QueryContentUpdatePolicyMembersBadRequest) GetPayload() *models.MsaQueryResponse {
	return o.Payload
}

func (o *QueryContentUpdatePolicyMembersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryContentUpdatePolicyMembersForbidden creates a QueryContentUpdatePolicyMembersForbidden with default headers values
func NewQueryContentUpdatePolicyMembersForbidden() *QueryContentUpdatePolicyMembersForbidden {
	return &QueryContentUpdatePolicyMembersForbidden{}
}

/*
QueryContentUpdatePolicyMembersForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type QueryContentUpdatePolicyMembersForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaErrorsOnly
}

// IsSuccess returns true when this query content update policy members forbidden response has a 2xx status code
func (o *QueryContentUpdatePolicyMembersForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query content update policy members forbidden response has a 3xx status code
func (o *QueryContentUpdatePolicyMembersForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query content update policy members forbidden response has a 4xx status code
func (o *QueryContentUpdatePolicyMembersForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this query content update policy members forbidden response has a 5xx status code
func (o *QueryContentUpdatePolicyMembersForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this query content update policy members forbidden response a status code equal to that given
func (o *QueryContentUpdatePolicyMembersForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the query content update policy members forbidden response
func (o *QueryContentUpdatePolicyMembersForbidden) Code() int {
	return 403
}

func (o *QueryContentUpdatePolicyMembersForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/queries/content-update-members/v1][%d] queryContentUpdatePolicyMembersForbidden %s", 403, payload)
}

func (o *QueryContentUpdatePolicyMembersForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/queries/content-update-members/v1][%d] queryContentUpdatePolicyMembersForbidden %s", 403, payload)
}

func (o *QueryContentUpdatePolicyMembersForbidden) GetPayload() *models.MsaErrorsOnly {
	return o.Payload
}

func (o *QueryContentUpdatePolicyMembersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaErrorsOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryContentUpdatePolicyMembersNotFound creates a QueryContentUpdatePolicyMembersNotFound with default headers values
func NewQueryContentUpdatePolicyMembersNotFound() *QueryContentUpdatePolicyMembersNotFound {
	return &QueryContentUpdatePolicyMembersNotFound{}
}

/*
QueryContentUpdatePolicyMembersNotFound describes a response with status code 404, with default header values.

Not Found
*/
type QueryContentUpdatePolicyMembersNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaQueryResponse
}

// IsSuccess returns true when this query content update policy members not found response has a 2xx status code
func (o *QueryContentUpdatePolicyMembersNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query content update policy members not found response has a 3xx status code
func (o *QueryContentUpdatePolicyMembersNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query content update policy members not found response has a 4xx status code
func (o *QueryContentUpdatePolicyMembersNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this query content update policy members not found response has a 5xx status code
func (o *QueryContentUpdatePolicyMembersNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this query content update policy members not found response a status code equal to that given
func (o *QueryContentUpdatePolicyMembersNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the query content update policy members not found response
func (o *QueryContentUpdatePolicyMembersNotFound) Code() int {
	return 404
}

func (o *QueryContentUpdatePolicyMembersNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/queries/content-update-members/v1][%d] queryContentUpdatePolicyMembersNotFound %s", 404, payload)
}

func (o *QueryContentUpdatePolicyMembersNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/queries/content-update-members/v1][%d] queryContentUpdatePolicyMembersNotFound %s", 404, payload)
}

func (o *QueryContentUpdatePolicyMembersNotFound) GetPayload() *models.MsaQueryResponse {
	return o.Payload
}

func (o *QueryContentUpdatePolicyMembersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryContentUpdatePolicyMembersTooManyRequests creates a QueryContentUpdatePolicyMembersTooManyRequests with default headers values
func NewQueryContentUpdatePolicyMembersTooManyRequests() *QueryContentUpdatePolicyMembersTooManyRequests {
	return &QueryContentUpdatePolicyMembersTooManyRequests{}
}

/*
QueryContentUpdatePolicyMembersTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type QueryContentUpdatePolicyMembersTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this query content update policy members too many requests response has a 2xx status code
func (o *QueryContentUpdatePolicyMembersTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query content update policy members too many requests response has a 3xx status code
func (o *QueryContentUpdatePolicyMembersTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query content update policy members too many requests response has a 4xx status code
func (o *QueryContentUpdatePolicyMembersTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this query content update policy members too many requests response has a 5xx status code
func (o *QueryContentUpdatePolicyMembersTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this query content update policy members too many requests response a status code equal to that given
func (o *QueryContentUpdatePolicyMembersTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the query content update policy members too many requests response
func (o *QueryContentUpdatePolicyMembersTooManyRequests) Code() int {
	return 429
}

func (o *QueryContentUpdatePolicyMembersTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/queries/content-update-members/v1][%d] queryContentUpdatePolicyMembersTooManyRequests %s", 429, payload)
}

func (o *QueryContentUpdatePolicyMembersTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/queries/content-update-members/v1][%d] queryContentUpdatePolicyMembersTooManyRequests %s", 429, payload)
}

func (o *QueryContentUpdatePolicyMembersTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryContentUpdatePolicyMembersTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryContentUpdatePolicyMembersInternalServerError creates a QueryContentUpdatePolicyMembersInternalServerError with default headers values
func NewQueryContentUpdatePolicyMembersInternalServerError() *QueryContentUpdatePolicyMembersInternalServerError {
	return &QueryContentUpdatePolicyMembersInternalServerError{}
}

/*
QueryContentUpdatePolicyMembersInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type QueryContentUpdatePolicyMembersInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaQueryResponse
}

// IsSuccess returns true when this query content update policy members internal server error response has a 2xx status code
func (o *QueryContentUpdatePolicyMembersInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query content update policy members internal server error response has a 3xx status code
func (o *QueryContentUpdatePolicyMembersInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query content update policy members internal server error response has a 4xx status code
func (o *QueryContentUpdatePolicyMembersInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this query content update policy members internal server error response has a 5xx status code
func (o *QueryContentUpdatePolicyMembersInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this query content update policy members internal server error response a status code equal to that given
func (o *QueryContentUpdatePolicyMembersInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the query content update policy members internal server error response
func (o *QueryContentUpdatePolicyMembersInternalServerError) Code() int {
	return 500
}

func (o *QueryContentUpdatePolicyMembersInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/queries/content-update-members/v1][%d] queryContentUpdatePolicyMembersInternalServerError %s", 500, payload)
}

func (o *QueryContentUpdatePolicyMembersInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/queries/content-update-members/v1][%d] queryContentUpdatePolicyMembersInternalServerError %s", 500, payload)
}

func (o *QueryContentUpdatePolicyMembersInternalServerError) GetPayload() *models.MsaQueryResponse {
	return o.Payload
}

func (o *QueryContentUpdatePolicyMembersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
