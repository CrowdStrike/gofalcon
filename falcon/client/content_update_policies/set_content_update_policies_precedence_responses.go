// Code generated by go-swagger; DO NOT EDIT.

package content_update_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// SetContentUpdatePoliciesPrecedenceReader is a Reader for the SetContentUpdatePoliciesPrecedence structure.
type SetContentUpdatePoliciesPrecedenceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetContentUpdatePoliciesPrecedenceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSetContentUpdatePoliciesPrecedenceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSetContentUpdatePoliciesPrecedenceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSetContentUpdatePoliciesPrecedenceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSetContentUpdatePoliciesPrecedenceTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSetContentUpdatePoliciesPrecedenceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /policy/entities/content-update-precedence/v1] setContentUpdatePoliciesPrecedence", response, response.Code())
	}
}

// NewSetContentUpdatePoliciesPrecedenceOK creates a SetContentUpdatePoliciesPrecedenceOK with default headers values
func NewSetContentUpdatePoliciesPrecedenceOK() *SetContentUpdatePoliciesPrecedenceOK {
	return &SetContentUpdatePoliciesPrecedenceOK{}
}

/*
SetContentUpdatePoliciesPrecedenceOK describes a response with status code 200, with default header values.

OK
*/
type SetContentUpdatePoliciesPrecedenceOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaQueryResponse
}

// IsSuccess returns true when this set content update policies precedence o k response has a 2xx status code
func (o *SetContentUpdatePoliciesPrecedenceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this set content update policies precedence o k response has a 3xx status code
func (o *SetContentUpdatePoliciesPrecedenceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set content update policies precedence o k response has a 4xx status code
func (o *SetContentUpdatePoliciesPrecedenceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this set content update policies precedence o k response has a 5xx status code
func (o *SetContentUpdatePoliciesPrecedenceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this set content update policies precedence o k response a status code equal to that given
func (o *SetContentUpdatePoliciesPrecedenceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the set content update policies precedence o k response
func (o *SetContentUpdatePoliciesPrecedenceOK) Code() int {
	return 200
}

func (o *SetContentUpdatePoliciesPrecedenceOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /policy/entities/content-update-precedence/v1][%d] setContentUpdatePoliciesPrecedenceOK %s", 200, payload)
}

func (o *SetContentUpdatePoliciesPrecedenceOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /policy/entities/content-update-precedence/v1][%d] setContentUpdatePoliciesPrecedenceOK %s", 200, payload)
}

func (o *SetContentUpdatePoliciesPrecedenceOK) GetPayload() *models.MsaQueryResponse {
	return o.Payload
}

func (o *SetContentUpdatePoliciesPrecedenceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetContentUpdatePoliciesPrecedenceBadRequest creates a SetContentUpdatePoliciesPrecedenceBadRequest with default headers values
func NewSetContentUpdatePoliciesPrecedenceBadRequest() *SetContentUpdatePoliciesPrecedenceBadRequest {
	return &SetContentUpdatePoliciesPrecedenceBadRequest{}
}

/*
SetContentUpdatePoliciesPrecedenceBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SetContentUpdatePoliciesPrecedenceBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaQueryResponse
}

// IsSuccess returns true when this set content update policies precedence bad request response has a 2xx status code
func (o *SetContentUpdatePoliciesPrecedenceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set content update policies precedence bad request response has a 3xx status code
func (o *SetContentUpdatePoliciesPrecedenceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set content update policies precedence bad request response has a 4xx status code
func (o *SetContentUpdatePoliciesPrecedenceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this set content update policies precedence bad request response has a 5xx status code
func (o *SetContentUpdatePoliciesPrecedenceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this set content update policies precedence bad request response a status code equal to that given
func (o *SetContentUpdatePoliciesPrecedenceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the set content update policies precedence bad request response
func (o *SetContentUpdatePoliciesPrecedenceBadRequest) Code() int {
	return 400
}

func (o *SetContentUpdatePoliciesPrecedenceBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /policy/entities/content-update-precedence/v1][%d] setContentUpdatePoliciesPrecedenceBadRequest %s", 400, payload)
}

func (o *SetContentUpdatePoliciesPrecedenceBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /policy/entities/content-update-precedence/v1][%d] setContentUpdatePoliciesPrecedenceBadRequest %s", 400, payload)
}

func (o *SetContentUpdatePoliciesPrecedenceBadRequest) GetPayload() *models.MsaQueryResponse {
	return o.Payload
}

func (o *SetContentUpdatePoliciesPrecedenceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetContentUpdatePoliciesPrecedenceForbidden creates a SetContentUpdatePoliciesPrecedenceForbidden with default headers values
func NewSetContentUpdatePoliciesPrecedenceForbidden() *SetContentUpdatePoliciesPrecedenceForbidden {
	return &SetContentUpdatePoliciesPrecedenceForbidden{}
}

/*
SetContentUpdatePoliciesPrecedenceForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SetContentUpdatePoliciesPrecedenceForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaErrorsOnly
}

// IsSuccess returns true when this set content update policies precedence forbidden response has a 2xx status code
func (o *SetContentUpdatePoliciesPrecedenceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set content update policies precedence forbidden response has a 3xx status code
func (o *SetContentUpdatePoliciesPrecedenceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set content update policies precedence forbidden response has a 4xx status code
func (o *SetContentUpdatePoliciesPrecedenceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this set content update policies precedence forbidden response has a 5xx status code
func (o *SetContentUpdatePoliciesPrecedenceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this set content update policies precedence forbidden response a status code equal to that given
func (o *SetContentUpdatePoliciesPrecedenceForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the set content update policies precedence forbidden response
func (o *SetContentUpdatePoliciesPrecedenceForbidden) Code() int {
	return 403
}

func (o *SetContentUpdatePoliciesPrecedenceForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /policy/entities/content-update-precedence/v1][%d] setContentUpdatePoliciesPrecedenceForbidden %s", 403, payload)
}

func (o *SetContentUpdatePoliciesPrecedenceForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /policy/entities/content-update-precedence/v1][%d] setContentUpdatePoliciesPrecedenceForbidden %s", 403, payload)
}

func (o *SetContentUpdatePoliciesPrecedenceForbidden) GetPayload() *models.MsaErrorsOnly {
	return o.Payload
}

func (o *SetContentUpdatePoliciesPrecedenceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaErrorsOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetContentUpdatePoliciesPrecedenceTooManyRequests creates a SetContentUpdatePoliciesPrecedenceTooManyRequests with default headers values
func NewSetContentUpdatePoliciesPrecedenceTooManyRequests() *SetContentUpdatePoliciesPrecedenceTooManyRequests {
	return &SetContentUpdatePoliciesPrecedenceTooManyRequests{}
}

/*
SetContentUpdatePoliciesPrecedenceTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type SetContentUpdatePoliciesPrecedenceTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this set content update policies precedence too many requests response has a 2xx status code
func (o *SetContentUpdatePoliciesPrecedenceTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set content update policies precedence too many requests response has a 3xx status code
func (o *SetContentUpdatePoliciesPrecedenceTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set content update policies precedence too many requests response has a 4xx status code
func (o *SetContentUpdatePoliciesPrecedenceTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this set content update policies precedence too many requests response has a 5xx status code
func (o *SetContentUpdatePoliciesPrecedenceTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this set content update policies precedence too many requests response a status code equal to that given
func (o *SetContentUpdatePoliciesPrecedenceTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the set content update policies precedence too many requests response
func (o *SetContentUpdatePoliciesPrecedenceTooManyRequests) Code() int {
	return 429
}

func (o *SetContentUpdatePoliciesPrecedenceTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /policy/entities/content-update-precedence/v1][%d] setContentUpdatePoliciesPrecedenceTooManyRequests %s", 429, payload)
}

func (o *SetContentUpdatePoliciesPrecedenceTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /policy/entities/content-update-precedence/v1][%d] setContentUpdatePoliciesPrecedenceTooManyRequests %s", 429, payload)
}

func (o *SetContentUpdatePoliciesPrecedenceTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *SetContentUpdatePoliciesPrecedenceTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetContentUpdatePoliciesPrecedenceInternalServerError creates a SetContentUpdatePoliciesPrecedenceInternalServerError with default headers values
func NewSetContentUpdatePoliciesPrecedenceInternalServerError() *SetContentUpdatePoliciesPrecedenceInternalServerError {
	return &SetContentUpdatePoliciesPrecedenceInternalServerError{}
}

/*
SetContentUpdatePoliciesPrecedenceInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type SetContentUpdatePoliciesPrecedenceInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaQueryResponse
}

// IsSuccess returns true when this set content update policies precedence internal server error response has a 2xx status code
func (o *SetContentUpdatePoliciesPrecedenceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set content update policies precedence internal server error response has a 3xx status code
func (o *SetContentUpdatePoliciesPrecedenceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set content update policies precedence internal server error response has a 4xx status code
func (o *SetContentUpdatePoliciesPrecedenceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this set content update policies precedence internal server error response has a 5xx status code
func (o *SetContentUpdatePoliciesPrecedenceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this set content update policies precedence internal server error response a status code equal to that given
func (o *SetContentUpdatePoliciesPrecedenceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the set content update policies precedence internal server error response
func (o *SetContentUpdatePoliciesPrecedenceInternalServerError) Code() int {
	return 500
}

func (o *SetContentUpdatePoliciesPrecedenceInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /policy/entities/content-update-precedence/v1][%d] setContentUpdatePoliciesPrecedenceInternalServerError %s", 500, payload)
}

func (o *SetContentUpdatePoliciesPrecedenceInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /policy/entities/content-update-precedence/v1][%d] setContentUpdatePoliciesPrecedenceInternalServerError %s", 500, payload)
}

func (o *SetContentUpdatePoliciesPrecedenceInternalServerError) GetPayload() *models.MsaQueryResponse {
	return o.Payload
}

func (o *SetContentUpdatePoliciesPrecedenceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
