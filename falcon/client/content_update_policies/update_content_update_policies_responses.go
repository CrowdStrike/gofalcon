// Code generated by go-swagger; DO NOT EDIT.

package content_update_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// UpdateContentUpdatePoliciesReader is a Reader for the UpdateContentUpdatePolicies structure.
type UpdateContentUpdatePoliciesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateContentUpdatePoliciesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateContentUpdatePoliciesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateContentUpdatePoliciesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateContentUpdatePoliciesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateContentUpdatePoliciesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateContentUpdatePoliciesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateContentUpdatePoliciesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /policy/entities/content-update/v1] updateContentUpdatePolicies", response, response.Code())
	}
}

// NewUpdateContentUpdatePoliciesOK creates a UpdateContentUpdatePoliciesOK with default headers values
func NewUpdateContentUpdatePoliciesOK() *UpdateContentUpdatePoliciesOK {
	return &UpdateContentUpdatePoliciesOK{}
}

/*
UpdateContentUpdatePoliciesOK describes a response with status code 200, with default header values.

OK
*/
type UpdateContentUpdatePoliciesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ContentUpdateRespV1
}

// IsSuccess returns true when this update content update policies o k response has a 2xx status code
func (o *UpdateContentUpdatePoliciesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update content update policies o k response has a 3xx status code
func (o *UpdateContentUpdatePoliciesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update content update policies o k response has a 4xx status code
func (o *UpdateContentUpdatePoliciesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update content update policies o k response has a 5xx status code
func (o *UpdateContentUpdatePoliciesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update content update policies o k response a status code equal to that given
func (o *UpdateContentUpdatePoliciesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update content update policies o k response
func (o *UpdateContentUpdatePoliciesOK) Code() int {
	return 200
}

func (o *UpdateContentUpdatePoliciesOK) Error() string {
	return fmt.Sprintf("[PATCH /policy/entities/content-update/v1][%d] updateContentUpdatePoliciesOK  %+v", 200, o.Payload)
}

func (o *UpdateContentUpdatePoliciesOK) String() string {
	return fmt.Sprintf("[PATCH /policy/entities/content-update/v1][%d] updateContentUpdatePoliciesOK  %+v", 200, o.Payload)
}

func (o *UpdateContentUpdatePoliciesOK) GetPayload() *models.ContentUpdateRespV1 {
	return o.Payload
}

func (o *UpdateContentUpdatePoliciesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ContentUpdateRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContentUpdatePoliciesBadRequest creates a UpdateContentUpdatePoliciesBadRequest with default headers values
func NewUpdateContentUpdatePoliciesBadRequest() *UpdateContentUpdatePoliciesBadRequest {
	return &UpdateContentUpdatePoliciesBadRequest{}
}

/*
UpdateContentUpdatePoliciesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateContentUpdatePoliciesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ContentUpdateRespV1
}

// IsSuccess returns true when this update content update policies bad request response has a 2xx status code
func (o *UpdateContentUpdatePoliciesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update content update policies bad request response has a 3xx status code
func (o *UpdateContentUpdatePoliciesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update content update policies bad request response has a 4xx status code
func (o *UpdateContentUpdatePoliciesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update content update policies bad request response has a 5xx status code
func (o *UpdateContentUpdatePoliciesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update content update policies bad request response a status code equal to that given
func (o *UpdateContentUpdatePoliciesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update content update policies bad request response
func (o *UpdateContentUpdatePoliciesBadRequest) Code() int {
	return 400
}

func (o *UpdateContentUpdatePoliciesBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /policy/entities/content-update/v1][%d] updateContentUpdatePoliciesBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateContentUpdatePoliciesBadRequest) String() string {
	return fmt.Sprintf("[PATCH /policy/entities/content-update/v1][%d] updateContentUpdatePoliciesBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateContentUpdatePoliciesBadRequest) GetPayload() *models.ContentUpdateRespV1 {
	return o.Payload
}

func (o *UpdateContentUpdatePoliciesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ContentUpdateRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContentUpdatePoliciesForbidden creates a UpdateContentUpdatePoliciesForbidden with default headers values
func NewUpdateContentUpdatePoliciesForbidden() *UpdateContentUpdatePoliciesForbidden {
	return &UpdateContentUpdatePoliciesForbidden{}
}

/*
UpdateContentUpdatePoliciesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateContentUpdatePoliciesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaErrorsOnly
}

// IsSuccess returns true when this update content update policies forbidden response has a 2xx status code
func (o *UpdateContentUpdatePoliciesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update content update policies forbidden response has a 3xx status code
func (o *UpdateContentUpdatePoliciesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update content update policies forbidden response has a 4xx status code
func (o *UpdateContentUpdatePoliciesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update content update policies forbidden response has a 5xx status code
func (o *UpdateContentUpdatePoliciesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update content update policies forbidden response a status code equal to that given
func (o *UpdateContentUpdatePoliciesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update content update policies forbidden response
func (o *UpdateContentUpdatePoliciesForbidden) Code() int {
	return 403
}

func (o *UpdateContentUpdatePoliciesForbidden) Error() string {
	return fmt.Sprintf("[PATCH /policy/entities/content-update/v1][%d] updateContentUpdatePoliciesForbidden  %+v", 403, o.Payload)
}

func (o *UpdateContentUpdatePoliciesForbidden) String() string {
	return fmt.Sprintf("[PATCH /policy/entities/content-update/v1][%d] updateContentUpdatePoliciesForbidden  %+v", 403, o.Payload)
}

func (o *UpdateContentUpdatePoliciesForbidden) GetPayload() *models.MsaErrorsOnly {
	return o.Payload
}

func (o *UpdateContentUpdatePoliciesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaErrorsOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContentUpdatePoliciesNotFound creates a UpdateContentUpdatePoliciesNotFound with default headers values
func NewUpdateContentUpdatePoliciesNotFound() *UpdateContentUpdatePoliciesNotFound {
	return &UpdateContentUpdatePoliciesNotFound{}
}

/*
UpdateContentUpdatePoliciesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateContentUpdatePoliciesNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ContentUpdateRespV1
}

// IsSuccess returns true when this update content update policies not found response has a 2xx status code
func (o *UpdateContentUpdatePoliciesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update content update policies not found response has a 3xx status code
func (o *UpdateContentUpdatePoliciesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update content update policies not found response has a 4xx status code
func (o *UpdateContentUpdatePoliciesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update content update policies not found response has a 5xx status code
func (o *UpdateContentUpdatePoliciesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update content update policies not found response a status code equal to that given
func (o *UpdateContentUpdatePoliciesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update content update policies not found response
func (o *UpdateContentUpdatePoliciesNotFound) Code() int {
	return 404
}

func (o *UpdateContentUpdatePoliciesNotFound) Error() string {
	return fmt.Sprintf("[PATCH /policy/entities/content-update/v1][%d] updateContentUpdatePoliciesNotFound  %+v", 404, o.Payload)
}

func (o *UpdateContentUpdatePoliciesNotFound) String() string {
	return fmt.Sprintf("[PATCH /policy/entities/content-update/v1][%d] updateContentUpdatePoliciesNotFound  %+v", 404, o.Payload)
}

func (o *UpdateContentUpdatePoliciesNotFound) GetPayload() *models.ContentUpdateRespV1 {
	return o.Payload
}

func (o *UpdateContentUpdatePoliciesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ContentUpdateRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContentUpdatePoliciesTooManyRequests creates a UpdateContentUpdatePoliciesTooManyRequests with default headers values
func NewUpdateContentUpdatePoliciesTooManyRequests() *UpdateContentUpdatePoliciesTooManyRequests {
	return &UpdateContentUpdatePoliciesTooManyRequests{}
}

/*
UpdateContentUpdatePoliciesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type UpdateContentUpdatePoliciesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this update content update policies too many requests response has a 2xx status code
func (o *UpdateContentUpdatePoliciesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update content update policies too many requests response has a 3xx status code
func (o *UpdateContentUpdatePoliciesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update content update policies too many requests response has a 4xx status code
func (o *UpdateContentUpdatePoliciesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update content update policies too many requests response has a 5xx status code
func (o *UpdateContentUpdatePoliciesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update content update policies too many requests response a status code equal to that given
func (o *UpdateContentUpdatePoliciesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update content update policies too many requests response
func (o *UpdateContentUpdatePoliciesTooManyRequests) Code() int {
	return 429
}

func (o *UpdateContentUpdatePoliciesTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /policy/entities/content-update/v1][%d] updateContentUpdatePoliciesTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateContentUpdatePoliciesTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /policy/entities/content-update/v1][%d] updateContentUpdatePoliciesTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateContentUpdatePoliciesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *UpdateContentUpdatePoliciesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContentUpdatePoliciesInternalServerError creates a UpdateContentUpdatePoliciesInternalServerError with default headers values
func NewUpdateContentUpdatePoliciesInternalServerError() *UpdateContentUpdatePoliciesInternalServerError {
	return &UpdateContentUpdatePoliciesInternalServerError{}
}

/*
UpdateContentUpdatePoliciesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateContentUpdatePoliciesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ContentUpdateRespV1
}

// IsSuccess returns true when this update content update policies internal server error response has a 2xx status code
func (o *UpdateContentUpdatePoliciesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update content update policies internal server error response has a 3xx status code
func (o *UpdateContentUpdatePoliciesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update content update policies internal server error response has a 4xx status code
func (o *UpdateContentUpdatePoliciesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update content update policies internal server error response has a 5xx status code
func (o *UpdateContentUpdatePoliciesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update content update policies internal server error response a status code equal to that given
func (o *UpdateContentUpdatePoliciesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update content update policies internal server error response
func (o *UpdateContentUpdatePoliciesInternalServerError) Code() int {
	return 500
}

func (o *UpdateContentUpdatePoliciesInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /policy/entities/content-update/v1][%d] updateContentUpdatePoliciesInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateContentUpdatePoliciesInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /policy/entities/content-update/v1][%d] updateContentUpdatePoliciesInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateContentUpdatePoliciesInternalServerError) GetPayload() *models.ContentUpdateRespV1 {
	return o.Payload
}

func (o *UpdateContentUpdatePoliciesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ContentUpdateRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
