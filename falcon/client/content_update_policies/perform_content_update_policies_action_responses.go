// Code generated by go-swagger; DO NOT EDIT.

package content_update_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// PerformContentUpdatePoliciesActionReader is a Reader for the PerformContentUpdatePoliciesAction structure.
type PerformContentUpdatePoliciesActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PerformContentUpdatePoliciesActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPerformContentUpdatePoliciesActionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPerformContentUpdatePoliciesActionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPerformContentUpdatePoliciesActionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPerformContentUpdatePoliciesActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPerformContentUpdatePoliciesActionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPerformContentUpdatePoliciesActionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /policy/entities/content-update-actions/v1] performContentUpdatePoliciesAction", response, response.Code())
	}
}

// NewPerformContentUpdatePoliciesActionOK creates a PerformContentUpdatePoliciesActionOK with default headers values
func NewPerformContentUpdatePoliciesActionOK() *PerformContentUpdatePoliciesActionOK {
	return &PerformContentUpdatePoliciesActionOK{}
}

/*
PerformContentUpdatePoliciesActionOK describes a response with status code 200, with default header values.

OK
*/
type PerformContentUpdatePoliciesActionOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ContentUpdateRespV1
}

// IsSuccess returns true when this perform content update policies action o k response has a 2xx status code
func (o *PerformContentUpdatePoliciesActionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this perform content update policies action o k response has a 3xx status code
func (o *PerformContentUpdatePoliciesActionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this perform content update policies action o k response has a 4xx status code
func (o *PerformContentUpdatePoliciesActionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this perform content update policies action o k response has a 5xx status code
func (o *PerformContentUpdatePoliciesActionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this perform content update policies action o k response a status code equal to that given
func (o *PerformContentUpdatePoliciesActionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the perform content update policies action o k response
func (o *PerformContentUpdatePoliciesActionOK) Code() int {
	return 200
}

func (o *PerformContentUpdatePoliciesActionOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /policy/entities/content-update-actions/v1][%d] performContentUpdatePoliciesActionOK %s", 200, payload)
}

func (o *PerformContentUpdatePoliciesActionOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /policy/entities/content-update-actions/v1][%d] performContentUpdatePoliciesActionOK %s", 200, payload)
}

func (o *PerformContentUpdatePoliciesActionOK) GetPayload() *models.ContentUpdateRespV1 {
	return o.Payload
}

func (o *PerformContentUpdatePoliciesActionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ContentUpdateRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPerformContentUpdatePoliciesActionBadRequest creates a PerformContentUpdatePoliciesActionBadRequest with default headers values
func NewPerformContentUpdatePoliciesActionBadRequest() *PerformContentUpdatePoliciesActionBadRequest {
	return &PerformContentUpdatePoliciesActionBadRequest{}
}

/*
PerformContentUpdatePoliciesActionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PerformContentUpdatePoliciesActionBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ContentUpdateRespV1
}

// IsSuccess returns true when this perform content update policies action bad request response has a 2xx status code
func (o *PerformContentUpdatePoliciesActionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this perform content update policies action bad request response has a 3xx status code
func (o *PerformContentUpdatePoliciesActionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this perform content update policies action bad request response has a 4xx status code
func (o *PerformContentUpdatePoliciesActionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this perform content update policies action bad request response has a 5xx status code
func (o *PerformContentUpdatePoliciesActionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this perform content update policies action bad request response a status code equal to that given
func (o *PerformContentUpdatePoliciesActionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the perform content update policies action bad request response
func (o *PerformContentUpdatePoliciesActionBadRequest) Code() int {
	return 400
}

func (o *PerformContentUpdatePoliciesActionBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /policy/entities/content-update-actions/v1][%d] performContentUpdatePoliciesActionBadRequest %s", 400, payload)
}

func (o *PerformContentUpdatePoliciesActionBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /policy/entities/content-update-actions/v1][%d] performContentUpdatePoliciesActionBadRequest %s", 400, payload)
}

func (o *PerformContentUpdatePoliciesActionBadRequest) GetPayload() *models.ContentUpdateRespV1 {
	return o.Payload
}

func (o *PerformContentUpdatePoliciesActionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ContentUpdateRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPerformContentUpdatePoliciesActionForbidden creates a PerformContentUpdatePoliciesActionForbidden with default headers values
func NewPerformContentUpdatePoliciesActionForbidden() *PerformContentUpdatePoliciesActionForbidden {
	return &PerformContentUpdatePoliciesActionForbidden{}
}

/*
PerformContentUpdatePoliciesActionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PerformContentUpdatePoliciesActionForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaErrorsOnly
}

// IsSuccess returns true when this perform content update policies action forbidden response has a 2xx status code
func (o *PerformContentUpdatePoliciesActionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this perform content update policies action forbidden response has a 3xx status code
func (o *PerformContentUpdatePoliciesActionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this perform content update policies action forbidden response has a 4xx status code
func (o *PerformContentUpdatePoliciesActionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this perform content update policies action forbidden response has a 5xx status code
func (o *PerformContentUpdatePoliciesActionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this perform content update policies action forbidden response a status code equal to that given
func (o *PerformContentUpdatePoliciesActionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the perform content update policies action forbidden response
func (o *PerformContentUpdatePoliciesActionForbidden) Code() int {
	return 403
}

func (o *PerformContentUpdatePoliciesActionForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /policy/entities/content-update-actions/v1][%d] performContentUpdatePoliciesActionForbidden %s", 403, payload)
}

func (o *PerformContentUpdatePoliciesActionForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /policy/entities/content-update-actions/v1][%d] performContentUpdatePoliciesActionForbidden %s", 403, payload)
}

func (o *PerformContentUpdatePoliciesActionForbidden) GetPayload() *models.MsaErrorsOnly {
	return o.Payload
}

func (o *PerformContentUpdatePoliciesActionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaErrorsOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPerformContentUpdatePoliciesActionNotFound creates a PerformContentUpdatePoliciesActionNotFound with default headers values
func NewPerformContentUpdatePoliciesActionNotFound() *PerformContentUpdatePoliciesActionNotFound {
	return &PerformContentUpdatePoliciesActionNotFound{}
}

/*
PerformContentUpdatePoliciesActionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PerformContentUpdatePoliciesActionNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ContentUpdateRespV1
}

// IsSuccess returns true when this perform content update policies action not found response has a 2xx status code
func (o *PerformContentUpdatePoliciesActionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this perform content update policies action not found response has a 3xx status code
func (o *PerformContentUpdatePoliciesActionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this perform content update policies action not found response has a 4xx status code
func (o *PerformContentUpdatePoliciesActionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this perform content update policies action not found response has a 5xx status code
func (o *PerformContentUpdatePoliciesActionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this perform content update policies action not found response a status code equal to that given
func (o *PerformContentUpdatePoliciesActionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the perform content update policies action not found response
func (o *PerformContentUpdatePoliciesActionNotFound) Code() int {
	return 404
}

func (o *PerformContentUpdatePoliciesActionNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /policy/entities/content-update-actions/v1][%d] performContentUpdatePoliciesActionNotFound %s", 404, payload)
}

func (o *PerformContentUpdatePoliciesActionNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /policy/entities/content-update-actions/v1][%d] performContentUpdatePoliciesActionNotFound %s", 404, payload)
}

func (o *PerformContentUpdatePoliciesActionNotFound) GetPayload() *models.ContentUpdateRespV1 {
	return o.Payload
}

func (o *PerformContentUpdatePoliciesActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ContentUpdateRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPerformContentUpdatePoliciesActionTooManyRequests creates a PerformContentUpdatePoliciesActionTooManyRequests with default headers values
func NewPerformContentUpdatePoliciesActionTooManyRequests() *PerformContentUpdatePoliciesActionTooManyRequests {
	return &PerformContentUpdatePoliciesActionTooManyRequests{}
}

/*
PerformContentUpdatePoliciesActionTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type PerformContentUpdatePoliciesActionTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this perform content update policies action too many requests response has a 2xx status code
func (o *PerformContentUpdatePoliciesActionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this perform content update policies action too many requests response has a 3xx status code
func (o *PerformContentUpdatePoliciesActionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this perform content update policies action too many requests response has a 4xx status code
func (o *PerformContentUpdatePoliciesActionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this perform content update policies action too many requests response has a 5xx status code
func (o *PerformContentUpdatePoliciesActionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this perform content update policies action too many requests response a status code equal to that given
func (o *PerformContentUpdatePoliciesActionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the perform content update policies action too many requests response
func (o *PerformContentUpdatePoliciesActionTooManyRequests) Code() int {
	return 429
}

func (o *PerformContentUpdatePoliciesActionTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /policy/entities/content-update-actions/v1][%d] performContentUpdatePoliciesActionTooManyRequests %s", 429, payload)
}

func (o *PerformContentUpdatePoliciesActionTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /policy/entities/content-update-actions/v1][%d] performContentUpdatePoliciesActionTooManyRequests %s", 429, payload)
}

func (o *PerformContentUpdatePoliciesActionTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *PerformContentUpdatePoliciesActionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPerformContentUpdatePoliciesActionInternalServerError creates a PerformContentUpdatePoliciesActionInternalServerError with default headers values
func NewPerformContentUpdatePoliciesActionInternalServerError() *PerformContentUpdatePoliciesActionInternalServerError {
	return &PerformContentUpdatePoliciesActionInternalServerError{}
}

/*
PerformContentUpdatePoliciesActionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PerformContentUpdatePoliciesActionInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ContentUpdateRespV1
}

// IsSuccess returns true when this perform content update policies action internal server error response has a 2xx status code
func (o *PerformContentUpdatePoliciesActionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this perform content update policies action internal server error response has a 3xx status code
func (o *PerformContentUpdatePoliciesActionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this perform content update policies action internal server error response has a 4xx status code
func (o *PerformContentUpdatePoliciesActionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this perform content update policies action internal server error response has a 5xx status code
func (o *PerformContentUpdatePoliciesActionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this perform content update policies action internal server error response a status code equal to that given
func (o *PerformContentUpdatePoliciesActionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the perform content update policies action internal server error response
func (o *PerformContentUpdatePoliciesActionInternalServerError) Code() int {
	return 500
}

func (o *PerformContentUpdatePoliciesActionInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /policy/entities/content-update-actions/v1][%d] performContentUpdatePoliciesActionInternalServerError %s", 500, payload)
}

func (o *PerformContentUpdatePoliciesActionInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /policy/entities/content-update-actions/v1][%d] performContentUpdatePoliciesActionInternalServerError %s", 500, payload)
}

func (o *PerformContentUpdatePoliciesActionInternalServerError) GetPayload() *models.ContentUpdateRespV1 {
	return o.Payload
}

func (o *PerformContentUpdatePoliciesActionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ContentUpdateRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
