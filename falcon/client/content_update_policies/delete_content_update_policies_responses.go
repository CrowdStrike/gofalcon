// Code generated by go-swagger; DO NOT EDIT.

package content_update_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// DeleteContentUpdatePoliciesReader is a Reader for the DeleteContentUpdatePolicies structure.
type DeleteContentUpdatePoliciesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteContentUpdatePoliciesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteContentUpdatePoliciesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteContentUpdatePoliciesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteContentUpdatePoliciesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteContentUpdatePoliciesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteContentUpdatePoliciesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /policy/entities/content-update/v1] deleteContentUpdatePolicies", response, response.Code())
	}
}

// NewDeleteContentUpdatePoliciesOK creates a DeleteContentUpdatePoliciesOK with default headers values
func NewDeleteContentUpdatePoliciesOK() *DeleteContentUpdatePoliciesOK {
	return &DeleteContentUpdatePoliciesOK{}
}

/*
DeleteContentUpdatePoliciesOK describes a response with status code 200, with default header values.

OK
*/
type DeleteContentUpdatePoliciesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaQueryResponse
}

// IsSuccess returns true when this delete content update policies o k response has a 2xx status code
func (o *DeleteContentUpdatePoliciesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete content update policies o k response has a 3xx status code
func (o *DeleteContentUpdatePoliciesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete content update policies o k response has a 4xx status code
func (o *DeleteContentUpdatePoliciesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete content update policies o k response has a 5xx status code
func (o *DeleteContentUpdatePoliciesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete content update policies o k response a status code equal to that given
func (o *DeleteContentUpdatePoliciesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete content update policies o k response
func (o *DeleteContentUpdatePoliciesOK) Code() int {
	return 200
}

func (o *DeleteContentUpdatePoliciesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /policy/entities/content-update/v1][%d] deleteContentUpdatePoliciesOK %s", 200, payload)
}

func (o *DeleteContentUpdatePoliciesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /policy/entities/content-update/v1][%d] deleteContentUpdatePoliciesOK %s", 200, payload)
}

func (o *DeleteContentUpdatePoliciesOK) GetPayload() *models.MsaQueryResponse {
	return o.Payload
}

func (o *DeleteContentUpdatePoliciesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteContentUpdatePoliciesForbidden creates a DeleteContentUpdatePoliciesForbidden with default headers values
func NewDeleteContentUpdatePoliciesForbidden() *DeleteContentUpdatePoliciesForbidden {
	return &DeleteContentUpdatePoliciesForbidden{}
}

/*
DeleteContentUpdatePoliciesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteContentUpdatePoliciesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaErrorsOnly
}

// IsSuccess returns true when this delete content update policies forbidden response has a 2xx status code
func (o *DeleteContentUpdatePoliciesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete content update policies forbidden response has a 3xx status code
func (o *DeleteContentUpdatePoliciesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete content update policies forbidden response has a 4xx status code
func (o *DeleteContentUpdatePoliciesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete content update policies forbidden response has a 5xx status code
func (o *DeleteContentUpdatePoliciesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete content update policies forbidden response a status code equal to that given
func (o *DeleteContentUpdatePoliciesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete content update policies forbidden response
func (o *DeleteContentUpdatePoliciesForbidden) Code() int {
	return 403
}

func (o *DeleteContentUpdatePoliciesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /policy/entities/content-update/v1][%d] deleteContentUpdatePoliciesForbidden %s", 403, payload)
}

func (o *DeleteContentUpdatePoliciesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /policy/entities/content-update/v1][%d] deleteContentUpdatePoliciesForbidden %s", 403, payload)
}

func (o *DeleteContentUpdatePoliciesForbidden) GetPayload() *models.MsaErrorsOnly {
	return o.Payload
}

func (o *DeleteContentUpdatePoliciesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaErrorsOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteContentUpdatePoliciesNotFound creates a DeleteContentUpdatePoliciesNotFound with default headers values
func NewDeleteContentUpdatePoliciesNotFound() *DeleteContentUpdatePoliciesNotFound {
	return &DeleteContentUpdatePoliciesNotFound{}
}

/*
DeleteContentUpdatePoliciesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteContentUpdatePoliciesNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaQueryResponse
}

// IsSuccess returns true when this delete content update policies not found response has a 2xx status code
func (o *DeleteContentUpdatePoliciesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete content update policies not found response has a 3xx status code
func (o *DeleteContentUpdatePoliciesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete content update policies not found response has a 4xx status code
func (o *DeleteContentUpdatePoliciesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete content update policies not found response has a 5xx status code
func (o *DeleteContentUpdatePoliciesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete content update policies not found response a status code equal to that given
func (o *DeleteContentUpdatePoliciesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete content update policies not found response
func (o *DeleteContentUpdatePoliciesNotFound) Code() int {
	return 404
}

func (o *DeleteContentUpdatePoliciesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /policy/entities/content-update/v1][%d] deleteContentUpdatePoliciesNotFound %s", 404, payload)
}

func (o *DeleteContentUpdatePoliciesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /policy/entities/content-update/v1][%d] deleteContentUpdatePoliciesNotFound %s", 404, payload)
}

func (o *DeleteContentUpdatePoliciesNotFound) GetPayload() *models.MsaQueryResponse {
	return o.Payload
}

func (o *DeleteContentUpdatePoliciesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteContentUpdatePoliciesTooManyRequests creates a DeleteContentUpdatePoliciesTooManyRequests with default headers values
func NewDeleteContentUpdatePoliciesTooManyRequests() *DeleteContentUpdatePoliciesTooManyRequests {
	return &DeleteContentUpdatePoliciesTooManyRequests{}
}

/*
DeleteContentUpdatePoliciesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type DeleteContentUpdatePoliciesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete content update policies too many requests response has a 2xx status code
func (o *DeleteContentUpdatePoliciesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete content update policies too many requests response has a 3xx status code
func (o *DeleteContentUpdatePoliciesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete content update policies too many requests response has a 4xx status code
func (o *DeleteContentUpdatePoliciesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete content update policies too many requests response has a 5xx status code
func (o *DeleteContentUpdatePoliciesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete content update policies too many requests response a status code equal to that given
func (o *DeleteContentUpdatePoliciesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete content update policies too many requests response
func (o *DeleteContentUpdatePoliciesTooManyRequests) Code() int {
	return 429
}

func (o *DeleteContentUpdatePoliciesTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /policy/entities/content-update/v1][%d] deleteContentUpdatePoliciesTooManyRequests %s", 429, payload)
}

func (o *DeleteContentUpdatePoliciesTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /policy/entities/content-update/v1][%d] deleteContentUpdatePoliciesTooManyRequests %s", 429, payload)
}

func (o *DeleteContentUpdatePoliciesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeleteContentUpdatePoliciesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteContentUpdatePoliciesInternalServerError creates a DeleteContentUpdatePoliciesInternalServerError with default headers values
func NewDeleteContentUpdatePoliciesInternalServerError() *DeleteContentUpdatePoliciesInternalServerError {
	return &DeleteContentUpdatePoliciesInternalServerError{}
}

/*
DeleteContentUpdatePoliciesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteContentUpdatePoliciesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaQueryResponse
}

// IsSuccess returns true when this delete content update policies internal server error response has a 2xx status code
func (o *DeleteContentUpdatePoliciesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete content update policies internal server error response has a 3xx status code
func (o *DeleteContentUpdatePoliciesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete content update policies internal server error response has a 4xx status code
func (o *DeleteContentUpdatePoliciesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete content update policies internal server error response has a 5xx status code
func (o *DeleteContentUpdatePoliciesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete content update policies internal server error response a status code equal to that given
func (o *DeleteContentUpdatePoliciesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete content update policies internal server error response
func (o *DeleteContentUpdatePoliciesInternalServerError) Code() int {
	return 500
}

func (o *DeleteContentUpdatePoliciesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /policy/entities/content-update/v1][%d] deleteContentUpdatePoliciesInternalServerError %s", 500, payload)
}

func (o *DeleteContentUpdatePoliciesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /policy/entities/content-update/v1][%d] deleteContentUpdatePoliciesInternalServerError %s", 500, payload)
}

func (o *DeleteContentUpdatePoliciesInternalServerError) GetPayload() *models.MsaQueryResponse {
	return o.Payload
}

func (o *DeleteContentUpdatePoliciesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
