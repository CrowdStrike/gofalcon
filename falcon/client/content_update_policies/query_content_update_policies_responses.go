// Code generated by go-swagger; DO NOT EDIT.

package content_update_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// QueryContentUpdatePoliciesReader is a Reader for the QueryContentUpdatePolicies structure.
type QueryContentUpdatePoliciesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryContentUpdatePoliciesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryContentUpdatePoliciesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryContentUpdatePoliciesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewQueryContentUpdatePoliciesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewQueryContentUpdatePoliciesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewQueryContentUpdatePoliciesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /policy/queries/content-update/v1] queryContentUpdatePolicies", response, response.Code())
	}
}

// NewQueryContentUpdatePoliciesOK creates a QueryContentUpdatePoliciesOK with default headers values
func NewQueryContentUpdatePoliciesOK() *QueryContentUpdatePoliciesOK {
	return &QueryContentUpdatePoliciesOK{}
}

/*
QueryContentUpdatePoliciesOK describes a response with status code 200, with default header values.

OK
*/
type QueryContentUpdatePoliciesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaQueryResponse
}

// IsSuccess returns true when this query content update policies o k response has a 2xx status code
func (o *QueryContentUpdatePoliciesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this query content update policies o k response has a 3xx status code
func (o *QueryContentUpdatePoliciesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query content update policies o k response has a 4xx status code
func (o *QueryContentUpdatePoliciesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this query content update policies o k response has a 5xx status code
func (o *QueryContentUpdatePoliciesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this query content update policies o k response a status code equal to that given
func (o *QueryContentUpdatePoliciesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the query content update policies o k response
func (o *QueryContentUpdatePoliciesOK) Code() int {
	return 200
}

func (o *QueryContentUpdatePoliciesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/queries/content-update/v1][%d] queryContentUpdatePoliciesOK %s", 200, payload)
}

func (o *QueryContentUpdatePoliciesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/queries/content-update/v1][%d] queryContentUpdatePoliciesOK %s", 200, payload)
}

func (o *QueryContentUpdatePoliciesOK) GetPayload() *models.MsaQueryResponse {
	return o.Payload
}

func (o *QueryContentUpdatePoliciesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryContentUpdatePoliciesBadRequest creates a QueryContentUpdatePoliciesBadRequest with default headers values
func NewQueryContentUpdatePoliciesBadRequest() *QueryContentUpdatePoliciesBadRequest {
	return &QueryContentUpdatePoliciesBadRequest{}
}

/*
QueryContentUpdatePoliciesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type QueryContentUpdatePoliciesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaQueryResponse
}

// IsSuccess returns true when this query content update policies bad request response has a 2xx status code
func (o *QueryContentUpdatePoliciesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query content update policies bad request response has a 3xx status code
func (o *QueryContentUpdatePoliciesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query content update policies bad request response has a 4xx status code
func (o *QueryContentUpdatePoliciesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this query content update policies bad request response has a 5xx status code
func (o *QueryContentUpdatePoliciesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this query content update policies bad request response a status code equal to that given
func (o *QueryContentUpdatePoliciesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the query content update policies bad request response
func (o *QueryContentUpdatePoliciesBadRequest) Code() int {
	return 400
}

func (o *QueryContentUpdatePoliciesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/queries/content-update/v1][%d] queryContentUpdatePoliciesBadRequest %s", 400, payload)
}

func (o *QueryContentUpdatePoliciesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/queries/content-update/v1][%d] queryContentUpdatePoliciesBadRequest %s", 400, payload)
}

func (o *QueryContentUpdatePoliciesBadRequest) GetPayload() *models.MsaQueryResponse {
	return o.Payload
}

func (o *QueryContentUpdatePoliciesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryContentUpdatePoliciesForbidden creates a QueryContentUpdatePoliciesForbidden with default headers values
func NewQueryContentUpdatePoliciesForbidden() *QueryContentUpdatePoliciesForbidden {
	return &QueryContentUpdatePoliciesForbidden{}
}

/*
QueryContentUpdatePoliciesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type QueryContentUpdatePoliciesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaErrorsOnly
}

// IsSuccess returns true when this query content update policies forbidden response has a 2xx status code
func (o *QueryContentUpdatePoliciesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query content update policies forbidden response has a 3xx status code
func (o *QueryContentUpdatePoliciesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query content update policies forbidden response has a 4xx status code
func (o *QueryContentUpdatePoliciesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this query content update policies forbidden response has a 5xx status code
func (o *QueryContentUpdatePoliciesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this query content update policies forbidden response a status code equal to that given
func (o *QueryContentUpdatePoliciesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the query content update policies forbidden response
func (o *QueryContentUpdatePoliciesForbidden) Code() int {
	return 403
}

func (o *QueryContentUpdatePoliciesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/queries/content-update/v1][%d] queryContentUpdatePoliciesForbidden %s", 403, payload)
}

func (o *QueryContentUpdatePoliciesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/queries/content-update/v1][%d] queryContentUpdatePoliciesForbidden %s", 403, payload)
}

func (o *QueryContentUpdatePoliciesForbidden) GetPayload() *models.MsaErrorsOnly {
	return o.Payload
}

func (o *QueryContentUpdatePoliciesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaErrorsOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryContentUpdatePoliciesTooManyRequests creates a QueryContentUpdatePoliciesTooManyRequests with default headers values
func NewQueryContentUpdatePoliciesTooManyRequests() *QueryContentUpdatePoliciesTooManyRequests {
	return &QueryContentUpdatePoliciesTooManyRequests{}
}

/*
QueryContentUpdatePoliciesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type QueryContentUpdatePoliciesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this query content update policies too many requests response has a 2xx status code
func (o *QueryContentUpdatePoliciesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query content update policies too many requests response has a 3xx status code
func (o *QueryContentUpdatePoliciesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query content update policies too many requests response has a 4xx status code
func (o *QueryContentUpdatePoliciesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this query content update policies too many requests response has a 5xx status code
func (o *QueryContentUpdatePoliciesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this query content update policies too many requests response a status code equal to that given
func (o *QueryContentUpdatePoliciesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the query content update policies too many requests response
func (o *QueryContentUpdatePoliciesTooManyRequests) Code() int {
	return 429
}

func (o *QueryContentUpdatePoliciesTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/queries/content-update/v1][%d] queryContentUpdatePoliciesTooManyRequests %s", 429, payload)
}

func (o *QueryContentUpdatePoliciesTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/queries/content-update/v1][%d] queryContentUpdatePoliciesTooManyRequests %s", 429, payload)
}

func (o *QueryContentUpdatePoliciesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryContentUpdatePoliciesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryContentUpdatePoliciesInternalServerError creates a QueryContentUpdatePoliciesInternalServerError with default headers values
func NewQueryContentUpdatePoliciesInternalServerError() *QueryContentUpdatePoliciesInternalServerError {
	return &QueryContentUpdatePoliciesInternalServerError{}
}

/*
QueryContentUpdatePoliciesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type QueryContentUpdatePoliciesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaQueryResponse
}

// IsSuccess returns true when this query content update policies internal server error response has a 2xx status code
func (o *QueryContentUpdatePoliciesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query content update policies internal server error response has a 3xx status code
func (o *QueryContentUpdatePoliciesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query content update policies internal server error response has a 4xx status code
func (o *QueryContentUpdatePoliciesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this query content update policies internal server error response has a 5xx status code
func (o *QueryContentUpdatePoliciesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this query content update policies internal server error response a status code equal to that given
func (o *QueryContentUpdatePoliciesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the query content update policies internal server error response
func (o *QueryContentUpdatePoliciesInternalServerError) Code() int {
	return 500
}

func (o *QueryContentUpdatePoliciesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/queries/content-update/v1][%d] queryContentUpdatePoliciesInternalServerError %s", 500, payload)
}

func (o *QueryContentUpdatePoliciesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/queries/content-update/v1][%d] queryContentUpdatePoliciesInternalServerError %s", 500, payload)
}

func (o *QueryContentUpdatePoliciesInternalServerError) GetPayload() *models.MsaQueryResponse {
	return o.Payload
}

func (o *QueryContentUpdatePoliciesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
