// Code generated by go-swagger; DO NOT EDIT.

package content_update_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// QueryCombinedContentUpdatePolicyMembersReader is a Reader for the QueryCombinedContentUpdatePolicyMembers structure.
type QueryCombinedContentUpdatePolicyMembersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryCombinedContentUpdatePolicyMembersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryCombinedContentUpdatePolicyMembersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryCombinedContentUpdatePolicyMembersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewQueryCombinedContentUpdatePolicyMembersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewQueryCombinedContentUpdatePolicyMembersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewQueryCombinedContentUpdatePolicyMembersTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewQueryCombinedContentUpdatePolicyMembersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /policy/combined/content-update-members/v1] queryCombinedContentUpdatePolicyMembers", response, response.Code())
	}
}

// NewQueryCombinedContentUpdatePolicyMembersOK creates a QueryCombinedContentUpdatePolicyMembersOK with default headers values
func NewQueryCombinedContentUpdatePolicyMembersOK() *QueryCombinedContentUpdatePolicyMembersOK {
	return &QueryCombinedContentUpdatePolicyMembersOK{}
}

/*
QueryCombinedContentUpdatePolicyMembersOK describes a response with status code 200, with default header values.

OK
*/
type QueryCombinedContentUpdatePolicyMembersOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.BasePolicyMembersRespV1
}

// IsSuccess returns true when this query combined content update policy members o k response has a 2xx status code
func (o *QueryCombinedContentUpdatePolicyMembersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this query combined content update policy members o k response has a 3xx status code
func (o *QueryCombinedContentUpdatePolicyMembersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query combined content update policy members o k response has a 4xx status code
func (o *QueryCombinedContentUpdatePolicyMembersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this query combined content update policy members o k response has a 5xx status code
func (o *QueryCombinedContentUpdatePolicyMembersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this query combined content update policy members o k response a status code equal to that given
func (o *QueryCombinedContentUpdatePolicyMembersOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the query combined content update policy members o k response
func (o *QueryCombinedContentUpdatePolicyMembersOK) Code() int {
	return 200
}

func (o *QueryCombinedContentUpdatePolicyMembersOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/combined/content-update-members/v1][%d] queryCombinedContentUpdatePolicyMembersOK %s", 200, payload)
}

func (o *QueryCombinedContentUpdatePolicyMembersOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/combined/content-update-members/v1][%d] queryCombinedContentUpdatePolicyMembersOK %s", 200, payload)
}

func (o *QueryCombinedContentUpdatePolicyMembersOK) GetPayload() *models.BasePolicyMembersRespV1 {
	return o.Payload
}

func (o *QueryCombinedContentUpdatePolicyMembersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.BasePolicyMembersRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryCombinedContentUpdatePolicyMembersBadRequest creates a QueryCombinedContentUpdatePolicyMembersBadRequest with default headers values
func NewQueryCombinedContentUpdatePolicyMembersBadRequest() *QueryCombinedContentUpdatePolicyMembersBadRequest {
	return &QueryCombinedContentUpdatePolicyMembersBadRequest{}
}

/*
QueryCombinedContentUpdatePolicyMembersBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type QueryCombinedContentUpdatePolicyMembersBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.BasePolicyMembersRespV1
}

// IsSuccess returns true when this query combined content update policy members bad request response has a 2xx status code
func (o *QueryCombinedContentUpdatePolicyMembersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query combined content update policy members bad request response has a 3xx status code
func (o *QueryCombinedContentUpdatePolicyMembersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query combined content update policy members bad request response has a 4xx status code
func (o *QueryCombinedContentUpdatePolicyMembersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this query combined content update policy members bad request response has a 5xx status code
func (o *QueryCombinedContentUpdatePolicyMembersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this query combined content update policy members bad request response a status code equal to that given
func (o *QueryCombinedContentUpdatePolicyMembersBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the query combined content update policy members bad request response
func (o *QueryCombinedContentUpdatePolicyMembersBadRequest) Code() int {
	return 400
}

func (o *QueryCombinedContentUpdatePolicyMembersBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/combined/content-update-members/v1][%d] queryCombinedContentUpdatePolicyMembersBadRequest %s", 400, payload)
}

func (o *QueryCombinedContentUpdatePolicyMembersBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/combined/content-update-members/v1][%d] queryCombinedContentUpdatePolicyMembersBadRequest %s", 400, payload)
}

func (o *QueryCombinedContentUpdatePolicyMembersBadRequest) GetPayload() *models.BasePolicyMembersRespV1 {
	return o.Payload
}

func (o *QueryCombinedContentUpdatePolicyMembersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.BasePolicyMembersRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryCombinedContentUpdatePolicyMembersForbidden creates a QueryCombinedContentUpdatePolicyMembersForbidden with default headers values
func NewQueryCombinedContentUpdatePolicyMembersForbidden() *QueryCombinedContentUpdatePolicyMembersForbidden {
	return &QueryCombinedContentUpdatePolicyMembersForbidden{}
}

/*
QueryCombinedContentUpdatePolicyMembersForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type QueryCombinedContentUpdatePolicyMembersForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaErrorsOnly
}

// IsSuccess returns true when this query combined content update policy members forbidden response has a 2xx status code
func (o *QueryCombinedContentUpdatePolicyMembersForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query combined content update policy members forbidden response has a 3xx status code
func (o *QueryCombinedContentUpdatePolicyMembersForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query combined content update policy members forbidden response has a 4xx status code
func (o *QueryCombinedContentUpdatePolicyMembersForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this query combined content update policy members forbidden response has a 5xx status code
func (o *QueryCombinedContentUpdatePolicyMembersForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this query combined content update policy members forbidden response a status code equal to that given
func (o *QueryCombinedContentUpdatePolicyMembersForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the query combined content update policy members forbidden response
func (o *QueryCombinedContentUpdatePolicyMembersForbidden) Code() int {
	return 403
}

func (o *QueryCombinedContentUpdatePolicyMembersForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/combined/content-update-members/v1][%d] queryCombinedContentUpdatePolicyMembersForbidden %s", 403, payload)
}

func (o *QueryCombinedContentUpdatePolicyMembersForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/combined/content-update-members/v1][%d] queryCombinedContentUpdatePolicyMembersForbidden %s", 403, payload)
}

func (o *QueryCombinedContentUpdatePolicyMembersForbidden) GetPayload() *models.MsaErrorsOnly {
	return o.Payload
}

func (o *QueryCombinedContentUpdatePolicyMembersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaErrorsOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryCombinedContentUpdatePolicyMembersNotFound creates a QueryCombinedContentUpdatePolicyMembersNotFound with default headers values
func NewQueryCombinedContentUpdatePolicyMembersNotFound() *QueryCombinedContentUpdatePolicyMembersNotFound {
	return &QueryCombinedContentUpdatePolicyMembersNotFound{}
}

/*
QueryCombinedContentUpdatePolicyMembersNotFound describes a response with status code 404, with default header values.

Not Found
*/
type QueryCombinedContentUpdatePolicyMembersNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.BasePolicyMembersRespV1
}

// IsSuccess returns true when this query combined content update policy members not found response has a 2xx status code
func (o *QueryCombinedContentUpdatePolicyMembersNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query combined content update policy members not found response has a 3xx status code
func (o *QueryCombinedContentUpdatePolicyMembersNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query combined content update policy members not found response has a 4xx status code
func (o *QueryCombinedContentUpdatePolicyMembersNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this query combined content update policy members not found response has a 5xx status code
func (o *QueryCombinedContentUpdatePolicyMembersNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this query combined content update policy members not found response a status code equal to that given
func (o *QueryCombinedContentUpdatePolicyMembersNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the query combined content update policy members not found response
func (o *QueryCombinedContentUpdatePolicyMembersNotFound) Code() int {
	return 404
}

func (o *QueryCombinedContentUpdatePolicyMembersNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/combined/content-update-members/v1][%d] queryCombinedContentUpdatePolicyMembersNotFound %s", 404, payload)
}

func (o *QueryCombinedContentUpdatePolicyMembersNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/combined/content-update-members/v1][%d] queryCombinedContentUpdatePolicyMembersNotFound %s", 404, payload)
}

func (o *QueryCombinedContentUpdatePolicyMembersNotFound) GetPayload() *models.BasePolicyMembersRespV1 {
	return o.Payload
}

func (o *QueryCombinedContentUpdatePolicyMembersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.BasePolicyMembersRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryCombinedContentUpdatePolicyMembersTooManyRequests creates a QueryCombinedContentUpdatePolicyMembersTooManyRequests with default headers values
func NewQueryCombinedContentUpdatePolicyMembersTooManyRequests() *QueryCombinedContentUpdatePolicyMembersTooManyRequests {
	return &QueryCombinedContentUpdatePolicyMembersTooManyRequests{}
}

/*
QueryCombinedContentUpdatePolicyMembersTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type QueryCombinedContentUpdatePolicyMembersTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this query combined content update policy members too many requests response has a 2xx status code
func (o *QueryCombinedContentUpdatePolicyMembersTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query combined content update policy members too many requests response has a 3xx status code
func (o *QueryCombinedContentUpdatePolicyMembersTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query combined content update policy members too many requests response has a 4xx status code
func (o *QueryCombinedContentUpdatePolicyMembersTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this query combined content update policy members too many requests response has a 5xx status code
func (o *QueryCombinedContentUpdatePolicyMembersTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this query combined content update policy members too many requests response a status code equal to that given
func (o *QueryCombinedContentUpdatePolicyMembersTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the query combined content update policy members too many requests response
func (o *QueryCombinedContentUpdatePolicyMembersTooManyRequests) Code() int {
	return 429
}

func (o *QueryCombinedContentUpdatePolicyMembersTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/combined/content-update-members/v1][%d] queryCombinedContentUpdatePolicyMembersTooManyRequests %s", 429, payload)
}

func (o *QueryCombinedContentUpdatePolicyMembersTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/combined/content-update-members/v1][%d] queryCombinedContentUpdatePolicyMembersTooManyRequests %s", 429, payload)
}

func (o *QueryCombinedContentUpdatePolicyMembersTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryCombinedContentUpdatePolicyMembersTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryCombinedContentUpdatePolicyMembersInternalServerError creates a QueryCombinedContentUpdatePolicyMembersInternalServerError with default headers values
func NewQueryCombinedContentUpdatePolicyMembersInternalServerError() *QueryCombinedContentUpdatePolicyMembersInternalServerError {
	return &QueryCombinedContentUpdatePolicyMembersInternalServerError{}
}

/*
QueryCombinedContentUpdatePolicyMembersInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type QueryCombinedContentUpdatePolicyMembersInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.BasePolicyMembersRespV1
}

// IsSuccess returns true when this query combined content update policy members internal server error response has a 2xx status code
func (o *QueryCombinedContentUpdatePolicyMembersInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query combined content update policy members internal server error response has a 3xx status code
func (o *QueryCombinedContentUpdatePolicyMembersInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query combined content update policy members internal server error response has a 4xx status code
func (o *QueryCombinedContentUpdatePolicyMembersInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this query combined content update policy members internal server error response has a 5xx status code
func (o *QueryCombinedContentUpdatePolicyMembersInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this query combined content update policy members internal server error response a status code equal to that given
func (o *QueryCombinedContentUpdatePolicyMembersInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the query combined content update policy members internal server error response
func (o *QueryCombinedContentUpdatePolicyMembersInternalServerError) Code() int {
	return 500
}

func (o *QueryCombinedContentUpdatePolicyMembersInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/combined/content-update-members/v1][%d] queryCombinedContentUpdatePolicyMembersInternalServerError %s", 500, payload)
}

func (o *QueryCombinedContentUpdatePolicyMembersInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /policy/combined/content-update-members/v1][%d] queryCombinedContentUpdatePolicyMembersInternalServerError %s", 500, payload)
}

func (o *QueryCombinedContentUpdatePolicyMembersInternalServerError) GetPayload() *models.BasePolicyMembersRespV1 {
	return o.Payload
}

func (o *QueryCombinedContentUpdatePolicyMembersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.BasePolicyMembersRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
