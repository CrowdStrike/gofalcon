// Code generated by go-swagger; DO NOT EDIT.

package kubernetes_protection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ClustersByStatusCountReader is a Reader for the ClustersByStatusCount structure.
type ClustersByStatusCountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ClustersByStatusCountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewClustersByStatusCountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewClustersByStatusCountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewClustersByStatusCountTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewClustersByStatusCountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /container-security/aggregates/clusters/count-by-status/v1] ClustersByStatusCount", response, response.Code())
	}
}

// NewClustersByStatusCountOK creates a ClustersByStatusCountOK with default headers values
func NewClustersByStatusCountOK() *ClustersByStatusCountOK {
	return &ClustersByStatusCountOK{}
}

/*
ClustersByStatusCountOK describes a response with status code 200, with default header values.

OK
*/
type ClustersByStatusCountOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ModelsAggregateValuesByFieldResponse
}

// IsSuccess returns true when this clusters by status count o k response has a 2xx status code
func (o *ClustersByStatusCountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this clusters by status count o k response has a 3xx status code
func (o *ClustersByStatusCountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this clusters by status count o k response has a 4xx status code
func (o *ClustersByStatusCountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this clusters by status count o k response has a 5xx status code
func (o *ClustersByStatusCountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this clusters by status count o k response a status code equal to that given
func (o *ClustersByStatusCountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the clusters by status count o k response
func (o *ClustersByStatusCountOK) Code() int {
	return 200
}

func (o *ClustersByStatusCountOK) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/clusters/count-by-status/v1][%d] clustersByStatusCountOK  %+v", 200, o.Payload)
}

func (o *ClustersByStatusCountOK) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/clusters/count-by-status/v1][%d] clustersByStatusCountOK  %+v", 200, o.Payload)
}

func (o *ClustersByStatusCountOK) GetPayload() *models.ModelsAggregateValuesByFieldResponse {
	return o.Payload
}

func (o *ClustersByStatusCountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ModelsAggregateValuesByFieldResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewClustersByStatusCountForbidden creates a ClustersByStatusCountForbidden with default headers values
func NewClustersByStatusCountForbidden() *ClustersByStatusCountForbidden {
	return &ClustersByStatusCountForbidden{}
}

/*
ClustersByStatusCountForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ClustersByStatusCountForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this clusters by status count forbidden response has a 2xx status code
func (o *ClustersByStatusCountForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this clusters by status count forbidden response has a 3xx status code
func (o *ClustersByStatusCountForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this clusters by status count forbidden response has a 4xx status code
func (o *ClustersByStatusCountForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this clusters by status count forbidden response has a 5xx status code
func (o *ClustersByStatusCountForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this clusters by status count forbidden response a status code equal to that given
func (o *ClustersByStatusCountForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the clusters by status count forbidden response
func (o *ClustersByStatusCountForbidden) Code() int {
	return 403
}

func (o *ClustersByStatusCountForbidden) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/clusters/count-by-status/v1][%d] clustersByStatusCountForbidden  %+v", 403, o.Payload)
}

func (o *ClustersByStatusCountForbidden) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/clusters/count-by-status/v1][%d] clustersByStatusCountForbidden  %+v", 403, o.Payload)
}

func (o *ClustersByStatusCountForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ClustersByStatusCountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewClustersByStatusCountTooManyRequests creates a ClustersByStatusCountTooManyRequests with default headers values
func NewClustersByStatusCountTooManyRequests() *ClustersByStatusCountTooManyRequests {
	return &ClustersByStatusCountTooManyRequests{}
}

/*
ClustersByStatusCountTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ClustersByStatusCountTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this clusters by status count too many requests response has a 2xx status code
func (o *ClustersByStatusCountTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this clusters by status count too many requests response has a 3xx status code
func (o *ClustersByStatusCountTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this clusters by status count too many requests response has a 4xx status code
func (o *ClustersByStatusCountTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this clusters by status count too many requests response has a 5xx status code
func (o *ClustersByStatusCountTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this clusters by status count too many requests response a status code equal to that given
func (o *ClustersByStatusCountTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the clusters by status count too many requests response
func (o *ClustersByStatusCountTooManyRequests) Code() int {
	return 429
}

func (o *ClustersByStatusCountTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/clusters/count-by-status/v1][%d] clustersByStatusCountTooManyRequests  %+v", 429, o.Payload)
}

func (o *ClustersByStatusCountTooManyRequests) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/clusters/count-by-status/v1][%d] clustersByStatusCountTooManyRequests  %+v", 429, o.Payload)
}

func (o *ClustersByStatusCountTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ClustersByStatusCountTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewClustersByStatusCountInternalServerError creates a ClustersByStatusCountInternalServerError with default headers values
func NewClustersByStatusCountInternalServerError() *ClustersByStatusCountInternalServerError {
	return &ClustersByStatusCountInternalServerError{}
}

/*
ClustersByStatusCountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ClustersByStatusCountInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CoreEntitiesResponse
}

// IsSuccess returns true when this clusters by status count internal server error response has a 2xx status code
func (o *ClustersByStatusCountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this clusters by status count internal server error response has a 3xx status code
func (o *ClustersByStatusCountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this clusters by status count internal server error response has a 4xx status code
func (o *ClustersByStatusCountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this clusters by status count internal server error response has a 5xx status code
func (o *ClustersByStatusCountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this clusters by status count internal server error response a status code equal to that given
func (o *ClustersByStatusCountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the clusters by status count internal server error response
func (o *ClustersByStatusCountInternalServerError) Code() int {
	return 500
}

func (o *ClustersByStatusCountInternalServerError) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/clusters/count-by-status/v1][%d] clustersByStatusCountInternalServerError  %+v", 500, o.Payload)
}

func (o *ClustersByStatusCountInternalServerError) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/clusters/count-by-status/v1][%d] clustersByStatusCountInternalServerError  %+v", 500, o.Payload)
}

func (o *ClustersByStatusCountInternalServerError) GetPayload() *models.CoreEntitiesResponse {
	return o.Payload
}

func (o *ClustersByStatusCountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CoreEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
