// Code generated by go-swagger; DO NOT EDIT.

package kubernetes_protection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNodeEnrichmentParams creates a new NodeEnrichmentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNodeEnrichmentParams() *NodeEnrichmentParams {
	return &NodeEnrichmentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNodeEnrichmentParamsWithTimeout creates a new NodeEnrichmentParams object
// with the ability to set a timeout on a request.
func NewNodeEnrichmentParamsWithTimeout(timeout time.Duration) *NodeEnrichmentParams {
	return &NodeEnrichmentParams{
		timeout: timeout,
	}
}

// NewNodeEnrichmentParamsWithContext creates a new NodeEnrichmentParams object
// with the ability to set a context for a request.
func NewNodeEnrichmentParamsWithContext(ctx context.Context) *NodeEnrichmentParams {
	return &NodeEnrichmentParams{
		Context: ctx,
	}
}

// NewNodeEnrichmentParamsWithHTTPClient creates a new NodeEnrichmentParams object
// with the ability to set a custom HTTPClient for a request.
func NewNodeEnrichmentParamsWithHTTPClient(client *http.Client) *NodeEnrichmentParams {
	return &NodeEnrichmentParams{
		HTTPClient: client,
	}
}

/*
NodeEnrichmentParams contains all the parameters to send to the API endpoint

	for the node enrichment operation.

	Typically these are written to a http.Request.
*/
type NodeEnrichmentParams struct {

	/* Filter.

	   Supported filters:  last_seen
	*/
	Filter *string

	/* NodeName.

	   One or more node names for which to retrieve enrichment info
	*/
	NodeName []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the node enrichment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NodeEnrichmentParams) WithDefaults() *NodeEnrichmentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the node enrichment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NodeEnrichmentParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the node enrichment params
func (o *NodeEnrichmentParams) WithTimeout(timeout time.Duration) *NodeEnrichmentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the node enrichment params
func (o *NodeEnrichmentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the node enrichment params
func (o *NodeEnrichmentParams) WithContext(ctx context.Context) *NodeEnrichmentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the node enrichment params
func (o *NodeEnrichmentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the node enrichment params
func (o *NodeEnrichmentParams) WithHTTPClient(client *http.Client) *NodeEnrichmentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the node enrichment params
func (o *NodeEnrichmentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the node enrichment params
func (o *NodeEnrichmentParams) WithFilter(filter *string) *NodeEnrichmentParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the node enrichment params
func (o *NodeEnrichmentParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithNodeName adds the nodeName to the node enrichment params
func (o *NodeEnrichmentParams) WithNodeName(nodeName []string) *NodeEnrichmentParams {
	o.SetNodeName(nodeName)
	return o
}

// SetNodeName adds the nodeName to the node enrichment params
func (o *NodeEnrichmentParams) SetNodeName(nodeName []string) {
	o.NodeName = nodeName
}

// WriteToRequest writes these params to a swagger request
func (o *NodeEnrichmentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.NodeName != nil {

		// binding items for node_name
		joinedNodeName := o.bindParamNodeName(reg)

		// query array param node_name
		if err := r.SetQueryParam("node_name", joinedNodeName...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamNodeEnrichment binds the parameter node_name
func (o *NodeEnrichmentParams) bindParamNodeName(formats strfmt.Registry) []string {
	nodeNameIR := o.NodeName

	var nodeNameIC []string
	for _, nodeNameIIR := range nodeNameIR { // explode []string

		nodeNameIIV := nodeNameIIR // string as string
		nodeNameIC = append(nodeNameIC, nodeNameIIV)
	}

	// items.CollectionFormat: "csv"
	nodeNameIS := swag.JoinByFormat(nodeNameIC, "csv")

	return nodeNameIS
}
