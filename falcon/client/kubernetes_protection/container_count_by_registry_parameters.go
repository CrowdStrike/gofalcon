// Code generated by go-swagger; DO NOT EDIT.

package kubernetes_protection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewContainerCountByRegistryParams creates a new ContainerCountByRegistryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewContainerCountByRegistryParams() *ContainerCountByRegistryParams {
	return &ContainerCountByRegistryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewContainerCountByRegistryParamsWithTimeout creates a new ContainerCountByRegistryParams object
// with the ability to set a timeout on a request.
func NewContainerCountByRegistryParamsWithTimeout(timeout time.Duration) *ContainerCountByRegistryParams {
	return &ContainerCountByRegistryParams{
		timeout: timeout,
	}
}

// NewContainerCountByRegistryParamsWithContext creates a new ContainerCountByRegistryParams object
// with the ability to set a context for a request.
func NewContainerCountByRegistryParamsWithContext(ctx context.Context) *ContainerCountByRegistryParams {
	return &ContainerCountByRegistryParams{
		Context: ctx,
	}
}

// NewContainerCountByRegistryParamsWithHTTPClient creates a new ContainerCountByRegistryParams object
// with the ability to set a custom HTTPClient for a request.
func NewContainerCountByRegistryParamsWithHTTPClient(client *http.Client) *ContainerCountByRegistryParams {
	return &ContainerCountByRegistryParams{
		HTTPClient: client,
	}
}

/*
ContainerCountByRegistryParams contains all the parameters to send to the API endpoint

	for the container count by registry operation.

	Typically these are written to a http.Request.
*/
type ContainerCountByRegistryParams struct {

	/* Filter.

	     Retrieve count of Kubernetes container image registries that match a query in Falcon Query Language (FQL). Supported filter fields:
	- `agent_id`
	- `agent_type`
	- `ai_related`
	- `allow_privilege_escalation`
	- `app_name`
	- `cid`
	- `cloud_account_id`
	- `cloud_instance_id`
	- `cloud_name`
	- `cloud_region`
	- `cloud_service`
	- `cluster_id`
	- `cluster_name`
	- `container_id`
	- `container_image_id`
	- `container_name`
	- `cve_id`
	- `detection_name`
	- `first_seen`
	- `image_detection_count`
	- `image_digest`
	- `image_has_been_assessed`
	- `image_id`
	- `image_registry`
	- `image_repository`
	- `image_tag`
	- `image_vulnerability_count`
	- `insecure_mount_source`
	- `insecure_mount_type`
	- `insecure_propagation_mode`
	- `interactive_mode`
	- `ipv4`
	- `ipv6`
	- `kac_agent_id`
	- `labels`
	- `last_seen`
	- `namespace`
	- `node_name`
	- `node_uid`
	- `package_name_version`
	- `pod_id`
	- `pod_name`
	- `port`
	- `privileged`
	- `root_write_access`
	- `run_as_root_group`
	- `run_as_root_user`
	- `running_status`
	*/
	Filter *string

	/* Limit.

	   The upper-bound on the number of records to retrieve.
	*/
	Limit *int64

	/* UnderAssessment.

	   (true/false) whether to return registries under assessment or not under assessment. If not provided all registries are considered
	*/
	UnderAssessment *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the container count by registry params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ContainerCountByRegistryParams) WithDefaults() *ContainerCountByRegistryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the container count by registry params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ContainerCountByRegistryParams) SetDefaults() {
	var (
		underAssessmentDefault = bool(false)
	)

	val := ContainerCountByRegistryParams{
		UnderAssessment: &underAssessmentDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the container count by registry params
func (o *ContainerCountByRegistryParams) WithTimeout(timeout time.Duration) *ContainerCountByRegistryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the container count by registry params
func (o *ContainerCountByRegistryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the container count by registry params
func (o *ContainerCountByRegistryParams) WithContext(ctx context.Context) *ContainerCountByRegistryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the container count by registry params
func (o *ContainerCountByRegistryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the container count by registry params
func (o *ContainerCountByRegistryParams) WithHTTPClient(client *http.Client) *ContainerCountByRegistryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the container count by registry params
func (o *ContainerCountByRegistryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the container count by registry params
func (o *ContainerCountByRegistryParams) WithFilter(filter *string) *ContainerCountByRegistryParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the container count by registry params
func (o *ContainerCountByRegistryParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithLimit adds the limit to the container count by registry params
func (o *ContainerCountByRegistryParams) WithLimit(limit *int64) *ContainerCountByRegistryParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the container count by registry params
func (o *ContainerCountByRegistryParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithUnderAssessment adds the underAssessment to the container count by registry params
func (o *ContainerCountByRegistryParams) WithUnderAssessment(underAssessment *bool) *ContainerCountByRegistryParams {
	o.SetUnderAssessment(underAssessment)
	return o
}

// SetUnderAssessment adds the underAssessment to the container count by registry params
func (o *ContainerCountByRegistryParams) SetUnderAssessment(underAssessment *bool) {
	o.UnderAssessment = underAssessment
}

// WriteToRequest writes these params to a swagger request
func (o *ContainerCountByRegistryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.UnderAssessment != nil {

		// query param under_assessment
		var qrUnderAssessment bool

		if o.UnderAssessment != nil {
			qrUnderAssessment = *o.UnderAssessment
		}
		qUnderAssessment := swag.FormatBool(qrUnderAssessment)
		if qUnderAssessment != "" {

			if err := r.SetQueryParam("under_assessment", qUnderAssessment); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
