// Code generated by go-swagger; DO NOT EDIT.

package kubernetes_protection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// NodeCountReader is a Reader for the NodeCount structure.
type NodeCountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NodeCountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewNodeCountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewNodeCountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewNodeCountTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewNodeCountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /container-security/aggregates/nodes/count/v1] NodeCount", response, response.Code())
	}
}

// NewNodeCountOK creates a NodeCountOK with default headers values
func NewNodeCountOK() *NodeCountOK {
	return &NodeCountOK{}
}

/*
NodeCountOK describes a response with status code 200, with default header values.

OK
*/
type NodeCountOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CommonCountResponse
}

// IsSuccess returns true when this node count o k response has a 2xx status code
func (o *NodeCountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this node count o k response has a 3xx status code
func (o *NodeCountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this node count o k response has a 4xx status code
func (o *NodeCountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this node count o k response has a 5xx status code
func (o *NodeCountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this node count o k response a status code equal to that given
func (o *NodeCountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the node count o k response
func (o *NodeCountOK) Code() int {
	return 200
}

func (o *NodeCountOK) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/nodes/count/v1][%d] nodeCountOK  %+v", 200, o.Payload)
}

func (o *NodeCountOK) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/nodes/count/v1][%d] nodeCountOK  %+v", 200, o.Payload)
}

func (o *NodeCountOK) GetPayload() *models.CommonCountResponse {
	return o.Payload
}

func (o *NodeCountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CommonCountResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNodeCountForbidden creates a NodeCountForbidden with default headers values
func NewNodeCountForbidden() *NodeCountForbidden {
	return &NodeCountForbidden{}
}

/*
NodeCountForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type NodeCountForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this node count forbidden response has a 2xx status code
func (o *NodeCountForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this node count forbidden response has a 3xx status code
func (o *NodeCountForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this node count forbidden response has a 4xx status code
func (o *NodeCountForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this node count forbidden response has a 5xx status code
func (o *NodeCountForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this node count forbidden response a status code equal to that given
func (o *NodeCountForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the node count forbidden response
func (o *NodeCountForbidden) Code() int {
	return 403
}

func (o *NodeCountForbidden) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/nodes/count/v1][%d] nodeCountForbidden  %+v", 403, o.Payload)
}

func (o *NodeCountForbidden) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/nodes/count/v1][%d] nodeCountForbidden  %+v", 403, o.Payload)
}

func (o *NodeCountForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *NodeCountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNodeCountTooManyRequests creates a NodeCountTooManyRequests with default headers values
func NewNodeCountTooManyRequests() *NodeCountTooManyRequests {
	return &NodeCountTooManyRequests{}
}

/*
NodeCountTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type NodeCountTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this node count too many requests response has a 2xx status code
func (o *NodeCountTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this node count too many requests response has a 3xx status code
func (o *NodeCountTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this node count too many requests response has a 4xx status code
func (o *NodeCountTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this node count too many requests response has a 5xx status code
func (o *NodeCountTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this node count too many requests response a status code equal to that given
func (o *NodeCountTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the node count too many requests response
func (o *NodeCountTooManyRequests) Code() int {
	return 429
}

func (o *NodeCountTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/nodes/count/v1][%d] nodeCountTooManyRequests  %+v", 429, o.Payload)
}

func (o *NodeCountTooManyRequests) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/nodes/count/v1][%d] nodeCountTooManyRequests  %+v", 429, o.Payload)
}

func (o *NodeCountTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *NodeCountTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNodeCountInternalServerError creates a NodeCountInternalServerError with default headers values
func NewNodeCountInternalServerError() *NodeCountInternalServerError {
	return &NodeCountInternalServerError{}
}

/*
NodeCountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type NodeCountInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CoreEntitiesResponse
}

// IsSuccess returns true when this node count internal server error response has a 2xx status code
func (o *NodeCountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this node count internal server error response has a 3xx status code
func (o *NodeCountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this node count internal server error response has a 4xx status code
func (o *NodeCountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this node count internal server error response has a 5xx status code
func (o *NodeCountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this node count internal server error response a status code equal to that given
func (o *NodeCountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the node count internal server error response
func (o *NodeCountInternalServerError) Code() int {
	return 500
}

func (o *NodeCountInternalServerError) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/nodes/count/v1][%d] nodeCountInternalServerError  %+v", 500, o.Payload)
}

func (o *NodeCountInternalServerError) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/nodes/count/v1][%d] nodeCountInternalServerError  %+v", 500, o.Payload)
}

func (o *NodeCountInternalServerError) GetPayload() *models.CoreEntitiesResponse {
	return o.Payload
}

func (o *NodeCountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CoreEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
