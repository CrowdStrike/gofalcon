// Code generated by go-swagger; DO NOT EDIT.

package kubernetes_protection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// KubernetesIomEntitiesReader is a Reader for the KubernetesIomEntities structure.
type KubernetesIomEntitiesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KubernetesIomEntitiesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewKubernetesIomEntitiesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewKubernetesIomEntitiesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewKubernetesIomEntitiesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewKubernetesIomEntitiesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /container-security/entities/kubernetes-ioms/v1] KubernetesIomEntities", response, response.Code())
	}
}

// NewKubernetesIomEntitiesOK creates a KubernetesIomEntitiesOK with default headers values
func NewKubernetesIomEntitiesOK() *KubernetesIomEntitiesOK {
	return &KubernetesIomEntitiesOK{}
}

/*
KubernetesIomEntitiesOK describes a response with status code 200, with default header values.

OK
*/
type KubernetesIomEntitiesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.K8siomsKubernetesIOMEntityResponse
}

// IsSuccess returns true when this kubernetes iom entities o k response has a 2xx status code
func (o *KubernetesIomEntitiesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this kubernetes iom entities o k response has a 3xx status code
func (o *KubernetesIomEntitiesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kubernetes iom entities o k response has a 4xx status code
func (o *KubernetesIomEntitiesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this kubernetes iom entities o k response has a 5xx status code
func (o *KubernetesIomEntitiesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this kubernetes iom entities o k response a status code equal to that given
func (o *KubernetesIomEntitiesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the kubernetes iom entities o k response
func (o *KubernetesIomEntitiesOK) Code() int {
	return 200
}

func (o *KubernetesIomEntitiesOK) Error() string {
	return fmt.Sprintf("[GET /container-security/entities/kubernetes-ioms/v1][%d] kubernetesIomEntitiesOK  %+v", 200, o.Payload)
}

func (o *KubernetesIomEntitiesOK) String() string {
	return fmt.Sprintf("[GET /container-security/entities/kubernetes-ioms/v1][%d] kubernetesIomEntitiesOK  %+v", 200, o.Payload)
}

func (o *KubernetesIomEntitiesOK) GetPayload() *models.K8siomsKubernetesIOMEntityResponse {
	return o.Payload
}

func (o *KubernetesIomEntitiesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.K8siomsKubernetesIOMEntityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKubernetesIomEntitiesForbidden creates a KubernetesIomEntitiesForbidden with default headers values
func NewKubernetesIomEntitiesForbidden() *KubernetesIomEntitiesForbidden {
	return &KubernetesIomEntitiesForbidden{}
}

/*
KubernetesIomEntitiesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type KubernetesIomEntitiesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this kubernetes iom entities forbidden response has a 2xx status code
func (o *KubernetesIomEntitiesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this kubernetes iom entities forbidden response has a 3xx status code
func (o *KubernetesIomEntitiesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kubernetes iom entities forbidden response has a 4xx status code
func (o *KubernetesIomEntitiesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this kubernetes iom entities forbidden response has a 5xx status code
func (o *KubernetesIomEntitiesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this kubernetes iom entities forbidden response a status code equal to that given
func (o *KubernetesIomEntitiesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the kubernetes iom entities forbidden response
func (o *KubernetesIomEntitiesForbidden) Code() int {
	return 403
}

func (o *KubernetesIomEntitiesForbidden) Error() string {
	return fmt.Sprintf("[GET /container-security/entities/kubernetes-ioms/v1][%d] kubernetesIomEntitiesForbidden  %+v", 403, o.Payload)
}

func (o *KubernetesIomEntitiesForbidden) String() string {
	return fmt.Sprintf("[GET /container-security/entities/kubernetes-ioms/v1][%d] kubernetesIomEntitiesForbidden  %+v", 403, o.Payload)
}

func (o *KubernetesIomEntitiesForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *KubernetesIomEntitiesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKubernetesIomEntitiesTooManyRequests creates a KubernetesIomEntitiesTooManyRequests with default headers values
func NewKubernetesIomEntitiesTooManyRequests() *KubernetesIomEntitiesTooManyRequests {
	return &KubernetesIomEntitiesTooManyRequests{}
}

/*
KubernetesIomEntitiesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type KubernetesIomEntitiesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this kubernetes iom entities too many requests response has a 2xx status code
func (o *KubernetesIomEntitiesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this kubernetes iom entities too many requests response has a 3xx status code
func (o *KubernetesIomEntitiesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kubernetes iom entities too many requests response has a 4xx status code
func (o *KubernetesIomEntitiesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this kubernetes iom entities too many requests response has a 5xx status code
func (o *KubernetesIomEntitiesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this kubernetes iom entities too many requests response a status code equal to that given
func (o *KubernetesIomEntitiesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the kubernetes iom entities too many requests response
func (o *KubernetesIomEntitiesTooManyRequests) Code() int {
	return 429
}

func (o *KubernetesIomEntitiesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /container-security/entities/kubernetes-ioms/v1][%d] kubernetesIomEntitiesTooManyRequests  %+v", 429, o.Payload)
}

func (o *KubernetesIomEntitiesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /container-security/entities/kubernetes-ioms/v1][%d] kubernetesIomEntitiesTooManyRequests  %+v", 429, o.Payload)
}

func (o *KubernetesIomEntitiesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *KubernetesIomEntitiesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKubernetesIomEntitiesInternalServerError creates a KubernetesIomEntitiesInternalServerError with default headers values
func NewKubernetesIomEntitiesInternalServerError() *KubernetesIomEntitiesInternalServerError {
	return &KubernetesIomEntitiesInternalServerError{}
}

/*
KubernetesIomEntitiesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type KubernetesIomEntitiesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CoreEntitiesResponse
}

// IsSuccess returns true when this kubernetes iom entities internal server error response has a 2xx status code
func (o *KubernetesIomEntitiesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this kubernetes iom entities internal server error response has a 3xx status code
func (o *KubernetesIomEntitiesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kubernetes iom entities internal server error response has a 4xx status code
func (o *KubernetesIomEntitiesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this kubernetes iom entities internal server error response has a 5xx status code
func (o *KubernetesIomEntitiesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this kubernetes iom entities internal server error response a status code equal to that given
func (o *KubernetesIomEntitiesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the kubernetes iom entities internal server error response
func (o *KubernetesIomEntitiesInternalServerError) Code() int {
	return 500
}

func (o *KubernetesIomEntitiesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /container-security/entities/kubernetes-ioms/v1][%d] kubernetesIomEntitiesInternalServerError  %+v", 500, o.Payload)
}

func (o *KubernetesIomEntitiesInternalServerError) String() string {
	return fmt.Sprintf("[GET /container-security/entities/kubernetes-ioms/v1][%d] kubernetesIomEntitiesInternalServerError  %+v", 500, o.Payload)
}

func (o *KubernetesIomEntitiesInternalServerError) GetPayload() *models.CoreEntitiesResponse {
	return o.Payload
}

func (o *KubernetesIomEntitiesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CoreEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
