// Code generated by go-swagger; DO NOT EDIT.

package kubernetes_protection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ContainerImageDetectionsCountByDateReader is a Reader for the ContainerImageDetectionsCountByDate structure.
type ContainerImageDetectionsCountByDateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ContainerImageDetectionsCountByDateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewContainerImageDetectionsCountByDateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewContainerImageDetectionsCountByDateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewContainerImageDetectionsCountByDateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewContainerImageDetectionsCountByDateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /container-security/aggregates/containers/image-detections-count-by-date/v1] ContainerImageDetectionsCountByDate", response, response.Code())
	}
}

// NewContainerImageDetectionsCountByDateOK creates a ContainerImageDetectionsCountByDateOK with default headers values
func NewContainerImageDetectionsCountByDateOK() *ContainerImageDetectionsCountByDateOK {
	return &ContainerImageDetectionsCountByDateOK{}
}

/*
ContainerImageDetectionsCountByDateOK describes a response with status code 200, with default header values.

OK
*/
type ContainerImageDetectionsCountByDateOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ModelsAPIFilterResponse
}

// IsSuccess returns true when this container image detections count by date o k response has a 2xx status code
func (o *ContainerImageDetectionsCountByDateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this container image detections count by date o k response has a 3xx status code
func (o *ContainerImageDetectionsCountByDateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this container image detections count by date o k response has a 4xx status code
func (o *ContainerImageDetectionsCountByDateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this container image detections count by date o k response has a 5xx status code
func (o *ContainerImageDetectionsCountByDateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this container image detections count by date o k response a status code equal to that given
func (o *ContainerImageDetectionsCountByDateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the container image detections count by date o k response
func (o *ContainerImageDetectionsCountByDateOK) Code() int {
	return 200
}

func (o *ContainerImageDetectionsCountByDateOK) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/containers/image-detections-count-by-date/v1][%d] containerImageDetectionsCountByDateOK  %+v", 200, o.Payload)
}

func (o *ContainerImageDetectionsCountByDateOK) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/containers/image-detections-count-by-date/v1][%d] containerImageDetectionsCountByDateOK  %+v", 200, o.Payload)
}

func (o *ContainerImageDetectionsCountByDateOK) GetPayload() *models.ModelsAPIFilterResponse {
	return o.Payload
}

func (o *ContainerImageDetectionsCountByDateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ModelsAPIFilterResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContainerImageDetectionsCountByDateForbidden creates a ContainerImageDetectionsCountByDateForbidden with default headers values
func NewContainerImageDetectionsCountByDateForbidden() *ContainerImageDetectionsCountByDateForbidden {
	return &ContainerImageDetectionsCountByDateForbidden{}
}

/*
ContainerImageDetectionsCountByDateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ContainerImageDetectionsCountByDateForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this container image detections count by date forbidden response has a 2xx status code
func (o *ContainerImageDetectionsCountByDateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this container image detections count by date forbidden response has a 3xx status code
func (o *ContainerImageDetectionsCountByDateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this container image detections count by date forbidden response has a 4xx status code
func (o *ContainerImageDetectionsCountByDateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this container image detections count by date forbidden response has a 5xx status code
func (o *ContainerImageDetectionsCountByDateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this container image detections count by date forbidden response a status code equal to that given
func (o *ContainerImageDetectionsCountByDateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the container image detections count by date forbidden response
func (o *ContainerImageDetectionsCountByDateForbidden) Code() int {
	return 403
}

func (o *ContainerImageDetectionsCountByDateForbidden) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/containers/image-detections-count-by-date/v1][%d] containerImageDetectionsCountByDateForbidden  %+v", 403, o.Payload)
}

func (o *ContainerImageDetectionsCountByDateForbidden) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/containers/image-detections-count-by-date/v1][%d] containerImageDetectionsCountByDateForbidden  %+v", 403, o.Payload)
}

func (o *ContainerImageDetectionsCountByDateForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ContainerImageDetectionsCountByDateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContainerImageDetectionsCountByDateTooManyRequests creates a ContainerImageDetectionsCountByDateTooManyRequests with default headers values
func NewContainerImageDetectionsCountByDateTooManyRequests() *ContainerImageDetectionsCountByDateTooManyRequests {
	return &ContainerImageDetectionsCountByDateTooManyRequests{}
}

/*
ContainerImageDetectionsCountByDateTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ContainerImageDetectionsCountByDateTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this container image detections count by date too many requests response has a 2xx status code
func (o *ContainerImageDetectionsCountByDateTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this container image detections count by date too many requests response has a 3xx status code
func (o *ContainerImageDetectionsCountByDateTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this container image detections count by date too many requests response has a 4xx status code
func (o *ContainerImageDetectionsCountByDateTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this container image detections count by date too many requests response has a 5xx status code
func (o *ContainerImageDetectionsCountByDateTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this container image detections count by date too many requests response a status code equal to that given
func (o *ContainerImageDetectionsCountByDateTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the container image detections count by date too many requests response
func (o *ContainerImageDetectionsCountByDateTooManyRequests) Code() int {
	return 429
}

func (o *ContainerImageDetectionsCountByDateTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/containers/image-detections-count-by-date/v1][%d] containerImageDetectionsCountByDateTooManyRequests  %+v", 429, o.Payload)
}

func (o *ContainerImageDetectionsCountByDateTooManyRequests) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/containers/image-detections-count-by-date/v1][%d] containerImageDetectionsCountByDateTooManyRequests  %+v", 429, o.Payload)
}

func (o *ContainerImageDetectionsCountByDateTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ContainerImageDetectionsCountByDateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContainerImageDetectionsCountByDateInternalServerError creates a ContainerImageDetectionsCountByDateInternalServerError with default headers values
func NewContainerImageDetectionsCountByDateInternalServerError() *ContainerImageDetectionsCountByDateInternalServerError {
	return &ContainerImageDetectionsCountByDateInternalServerError{}
}

/*
ContainerImageDetectionsCountByDateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ContainerImageDetectionsCountByDateInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CoreEntitiesResponse
}

// IsSuccess returns true when this container image detections count by date internal server error response has a 2xx status code
func (o *ContainerImageDetectionsCountByDateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this container image detections count by date internal server error response has a 3xx status code
func (o *ContainerImageDetectionsCountByDateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this container image detections count by date internal server error response has a 4xx status code
func (o *ContainerImageDetectionsCountByDateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this container image detections count by date internal server error response has a 5xx status code
func (o *ContainerImageDetectionsCountByDateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this container image detections count by date internal server error response a status code equal to that given
func (o *ContainerImageDetectionsCountByDateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the container image detections count by date internal server error response
func (o *ContainerImageDetectionsCountByDateInternalServerError) Code() int {
	return 500
}

func (o *ContainerImageDetectionsCountByDateInternalServerError) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/containers/image-detections-count-by-date/v1][%d] containerImageDetectionsCountByDateInternalServerError  %+v", 500, o.Payload)
}

func (o *ContainerImageDetectionsCountByDateInternalServerError) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/containers/image-detections-count-by-date/v1][%d] containerImageDetectionsCountByDateInternalServerError  %+v", 500, o.Payload)
}

func (o *ContainerImageDetectionsCountByDateInternalServerError) GetPayload() *models.CoreEntitiesResponse {
	return o.Payload
}

func (o *ContainerImageDetectionsCountByDateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CoreEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
