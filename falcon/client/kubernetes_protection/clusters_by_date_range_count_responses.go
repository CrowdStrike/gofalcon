// Code generated by go-swagger; DO NOT EDIT.

package kubernetes_protection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ClustersByDateRangeCountReader is a Reader for the ClustersByDateRangeCount structure.
type ClustersByDateRangeCountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ClustersByDateRangeCountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewClustersByDateRangeCountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewClustersByDateRangeCountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewClustersByDateRangeCountTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewClustersByDateRangeCountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /container-security/aggregates/clusters/count-by-date/v1] ClustersByDateRangeCount", response, response.Code())
	}
}

// NewClustersByDateRangeCountOK creates a ClustersByDateRangeCountOK with default headers values
func NewClustersByDateRangeCountOK() *ClustersByDateRangeCountOK {
	return &ClustersByDateRangeCountOK{}
}

/*
ClustersByDateRangeCountOK describes a response with status code 200, with default header values.

OK
*/
type ClustersByDateRangeCountOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ModelsAggregateValuesByFieldResponse
}

// IsSuccess returns true when this clusters by date range count o k response has a 2xx status code
func (o *ClustersByDateRangeCountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this clusters by date range count o k response has a 3xx status code
func (o *ClustersByDateRangeCountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this clusters by date range count o k response has a 4xx status code
func (o *ClustersByDateRangeCountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this clusters by date range count o k response has a 5xx status code
func (o *ClustersByDateRangeCountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this clusters by date range count o k response a status code equal to that given
func (o *ClustersByDateRangeCountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the clusters by date range count o k response
func (o *ClustersByDateRangeCountOK) Code() int {
	return 200
}

func (o *ClustersByDateRangeCountOK) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/clusters/count-by-date/v1][%d] clustersByDateRangeCountOK  %+v", 200, o.Payload)
}

func (o *ClustersByDateRangeCountOK) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/clusters/count-by-date/v1][%d] clustersByDateRangeCountOK  %+v", 200, o.Payload)
}

func (o *ClustersByDateRangeCountOK) GetPayload() *models.ModelsAggregateValuesByFieldResponse {
	return o.Payload
}

func (o *ClustersByDateRangeCountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ModelsAggregateValuesByFieldResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewClustersByDateRangeCountForbidden creates a ClustersByDateRangeCountForbidden with default headers values
func NewClustersByDateRangeCountForbidden() *ClustersByDateRangeCountForbidden {
	return &ClustersByDateRangeCountForbidden{}
}

/*
ClustersByDateRangeCountForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ClustersByDateRangeCountForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this clusters by date range count forbidden response has a 2xx status code
func (o *ClustersByDateRangeCountForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this clusters by date range count forbidden response has a 3xx status code
func (o *ClustersByDateRangeCountForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this clusters by date range count forbidden response has a 4xx status code
func (o *ClustersByDateRangeCountForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this clusters by date range count forbidden response has a 5xx status code
func (o *ClustersByDateRangeCountForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this clusters by date range count forbidden response a status code equal to that given
func (o *ClustersByDateRangeCountForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the clusters by date range count forbidden response
func (o *ClustersByDateRangeCountForbidden) Code() int {
	return 403
}

func (o *ClustersByDateRangeCountForbidden) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/clusters/count-by-date/v1][%d] clustersByDateRangeCountForbidden  %+v", 403, o.Payload)
}

func (o *ClustersByDateRangeCountForbidden) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/clusters/count-by-date/v1][%d] clustersByDateRangeCountForbidden  %+v", 403, o.Payload)
}

func (o *ClustersByDateRangeCountForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ClustersByDateRangeCountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewClustersByDateRangeCountTooManyRequests creates a ClustersByDateRangeCountTooManyRequests with default headers values
func NewClustersByDateRangeCountTooManyRequests() *ClustersByDateRangeCountTooManyRequests {
	return &ClustersByDateRangeCountTooManyRequests{}
}

/*
ClustersByDateRangeCountTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ClustersByDateRangeCountTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this clusters by date range count too many requests response has a 2xx status code
func (o *ClustersByDateRangeCountTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this clusters by date range count too many requests response has a 3xx status code
func (o *ClustersByDateRangeCountTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this clusters by date range count too many requests response has a 4xx status code
func (o *ClustersByDateRangeCountTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this clusters by date range count too many requests response has a 5xx status code
func (o *ClustersByDateRangeCountTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this clusters by date range count too many requests response a status code equal to that given
func (o *ClustersByDateRangeCountTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the clusters by date range count too many requests response
func (o *ClustersByDateRangeCountTooManyRequests) Code() int {
	return 429
}

func (o *ClustersByDateRangeCountTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/clusters/count-by-date/v1][%d] clustersByDateRangeCountTooManyRequests  %+v", 429, o.Payload)
}

func (o *ClustersByDateRangeCountTooManyRequests) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/clusters/count-by-date/v1][%d] clustersByDateRangeCountTooManyRequests  %+v", 429, o.Payload)
}

func (o *ClustersByDateRangeCountTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ClustersByDateRangeCountTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewClustersByDateRangeCountInternalServerError creates a ClustersByDateRangeCountInternalServerError with default headers values
func NewClustersByDateRangeCountInternalServerError() *ClustersByDateRangeCountInternalServerError {
	return &ClustersByDateRangeCountInternalServerError{}
}

/*
ClustersByDateRangeCountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ClustersByDateRangeCountInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CoreEntitiesResponse
}

// IsSuccess returns true when this clusters by date range count internal server error response has a 2xx status code
func (o *ClustersByDateRangeCountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this clusters by date range count internal server error response has a 3xx status code
func (o *ClustersByDateRangeCountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this clusters by date range count internal server error response has a 4xx status code
func (o *ClustersByDateRangeCountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this clusters by date range count internal server error response has a 5xx status code
func (o *ClustersByDateRangeCountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this clusters by date range count internal server error response a status code equal to that given
func (o *ClustersByDateRangeCountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the clusters by date range count internal server error response
func (o *ClustersByDateRangeCountInternalServerError) Code() int {
	return 500
}

func (o *ClustersByDateRangeCountInternalServerError) Error() string {
	return fmt.Sprintf("[GET /container-security/aggregates/clusters/count-by-date/v1][%d] clustersByDateRangeCountInternalServerError  %+v", 500, o.Payload)
}

func (o *ClustersByDateRangeCountInternalServerError) String() string {
	return fmt.Sprintf("[GET /container-security/aggregates/clusters/count-by-date/v1][%d] clustersByDateRangeCountInternalServerError  %+v", 500, o.Payload)
}

func (o *ClustersByDateRangeCountInternalServerError) GetPayload() *models.CoreEntitiesResponse {
	return o.Payload
}

func (o *ClustersByDateRangeCountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CoreEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
