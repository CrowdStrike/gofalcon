// Code generated by go-swagger; DO NOT EDIT.

package kubernetes_protection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewReadClusterCombinedV2Params creates a new ReadClusterCombinedV2Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewReadClusterCombinedV2Params() *ReadClusterCombinedV2Params {
	return &ReadClusterCombinedV2Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewReadClusterCombinedV2ParamsWithTimeout creates a new ReadClusterCombinedV2Params object
// with the ability to set a timeout on a request.
func NewReadClusterCombinedV2ParamsWithTimeout(timeout time.Duration) *ReadClusterCombinedV2Params {
	return &ReadClusterCombinedV2Params{
		timeout: timeout,
	}
}

// NewReadClusterCombinedV2ParamsWithContext creates a new ReadClusterCombinedV2Params object
// with the ability to set a context for a request.
func NewReadClusterCombinedV2ParamsWithContext(ctx context.Context) *ReadClusterCombinedV2Params {
	return &ReadClusterCombinedV2Params{
		Context: ctx,
	}
}

// NewReadClusterCombinedV2ParamsWithHTTPClient creates a new ReadClusterCombinedV2Params object
// with the ability to set a custom HTTPClient for a request.
func NewReadClusterCombinedV2ParamsWithHTTPClient(client *http.Client) *ReadClusterCombinedV2Params {
	return &ReadClusterCombinedV2Params{
		HTTPClient: client,
	}
}

/*
ReadClusterCombinedV2Params contains all the parameters to send to the API endpoint

	for the read cluster combined v2 operation.

	Typically these are written to a http.Request.
*/
type ReadClusterCombinedV2Params struct {

	/* Filter.

	     Search Kubernetes clusters using a query in Falcon Query Language (FQL). Supported filter fields:
	- `access`
	- `agent_id`
	- `agent_status`
	- `agent_type`
	- `cid`
	- `cloud_account_id`
	- `cloud_name`
	- `cloud_region`
	- `cloud_service`
	- `cluster_id`
	- `cluster_name`
	- `cluster_status`
	- `container_count`
	- `iar_coverage`
	- `kac_agent_id`
	- `kubernetes_version`
	- `last_seen`
	- `management_status`
	- `node_count`
	- `pod_count`
	- `tags`
	*/
	Filter *string

	/* IncludeCounts.

	   Flag to include node, pod and container counts in the response
	*/
	IncludeCounts *bool

	/* Limit.

	   The upper-bound on the number of records to retrieve.

	   Default: 200
	*/
	Limit *int64

	/* Offset.

	   The offset from where to begin.
	*/
	Offset *int64

	/* Sort.

	   The fields to sort the records on.
	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the read cluster combined v2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReadClusterCombinedV2Params) WithDefaults() *ReadClusterCombinedV2Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the read cluster combined v2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReadClusterCombinedV2Params) SetDefaults() {
	var (
		limitDefault = int64(200)
	)

	val := ReadClusterCombinedV2Params{
		Limit: &limitDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the read cluster combined v2 params
func (o *ReadClusterCombinedV2Params) WithTimeout(timeout time.Duration) *ReadClusterCombinedV2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the read cluster combined v2 params
func (o *ReadClusterCombinedV2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the read cluster combined v2 params
func (o *ReadClusterCombinedV2Params) WithContext(ctx context.Context) *ReadClusterCombinedV2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the read cluster combined v2 params
func (o *ReadClusterCombinedV2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the read cluster combined v2 params
func (o *ReadClusterCombinedV2Params) WithHTTPClient(client *http.Client) *ReadClusterCombinedV2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the read cluster combined v2 params
func (o *ReadClusterCombinedV2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the read cluster combined v2 params
func (o *ReadClusterCombinedV2Params) WithFilter(filter *string) *ReadClusterCombinedV2Params {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the read cluster combined v2 params
func (o *ReadClusterCombinedV2Params) SetFilter(filter *string) {
	o.Filter = filter
}

// WithIncludeCounts adds the includeCounts to the read cluster combined v2 params
func (o *ReadClusterCombinedV2Params) WithIncludeCounts(includeCounts *bool) *ReadClusterCombinedV2Params {
	o.SetIncludeCounts(includeCounts)
	return o
}

// SetIncludeCounts adds the includeCounts to the read cluster combined v2 params
func (o *ReadClusterCombinedV2Params) SetIncludeCounts(includeCounts *bool) {
	o.IncludeCounts = includeCounts
}

// WithLimit adds the limit to the read cluster combined v2 params
func (o *ReadClusterCombinedV2Params) WithLimit(limit *int64) *ReadClusterCombinedV2Params {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the read cluster combined v2 params
func (o *ReadClusterCombinedV2Params) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the read cluster combined v2 params
func (o *ReadClusterCombinedV2Params) WithOffset(offset *int64) *ReadClusterCombinedV2Params {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the read cluster combined v2 params
func (o *ReadClusterCombinedV2Params) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithSort adds the sort to the read cluster combined v2 params
func (o *ReadClusterCombinedV2Params) WithSort(sort *string) *ReadClusterCombinedV2Params {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the read cluster combined v2 params
func (o *ReadClusterCombinedV2Params) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *ReadClusterCombinedV2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.IncludeCounts != nil {

		// query param include_counts
		var qrIncludeCounts bool

		if o.IncludeCounts != nil {
			qrIncludeCounts = *o.IncludeCounts
		}
		qIncludeCounts := swag.FormatBool(qrIncludeCounts)
		if qIncludeCounts != "" {

			if err := r.SetQueryParam("include_counts", qIncludeCounts); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
