// Code generated by go-swagger; DO NOT EDIT.

package real_time_response

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRTRCheckCommandStatusParams creates a new RTRCheckCommandStatusParams object
// with the default values initialized.
func NewRTRCheckCommandStatusParams() *RTRCheckCommandStatusParams {
	var (
		sequenceIDDefault = int64(0)
	)
	return &RTRCheckCommandStatusParams{
		SequenceID: sequenceIDDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewRTRCheckCommandStatusParamsWithTimeout creates a new RTRCheckCommandStatusParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRTRCheckCommandStatusParamsWithTimeout(timeout time.Duration) *RTRCheckCommandStatusParams {
	var (
		sequenceIDDefault = int64(0)
	)
	return &RTRCheckCommandStatusParams{
		SequenceID: sequenceIDDefault,

		timeout: timeout,
	}
}

// NewRTRCheckCommandStatusParamsWithContext creates a new RTRCheckCommandStatusParams object
// with the default values initialized, and the ability to set a context for a request
func NewRTRCheckCommandStatusParamsWithContext(ctx context.Context) *RTRCheckCommandStatusParams {
	var (
		sequenceIdDefault = int64(0)
	)
	return &RTRCheckCommandStatusParams{
		SequenceID: sequenceIdDefault,

		Context: ctx,
	}
}

// NewRTRCheckCommandStatusParamsWithHTTPClient creates a new RTRCheckCommandStatusParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRTRCheckCommandStatusParamsWithHTTPClient(client *http.Client) *RTRCheckCommandStatusParams {
	var (
		sequenceIdDefault = int64(0)
	)
	return &RTRCheckCommandStatusParams{
		SequenceID: sequenceIdDefault,
		HTTPClient: client,
	}
}

/*RTRCheckCommandStatusParams contains all the parameters to send to the API endpoint
for the r t r check command status operation typically these are written to a http.Request
*/
type RTRCheckCommandStatusParams struct {

	/*CloudRequestID
	  Cloud Request ID of the executed command to query

	*/
	CloudRequestID string
	/*SequenceID
	  Sequence ID that we want to retrieve. Command responses are chunked across sequences

	*/
	SequenceID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the r t r check command status params
func (o *RTRCheckCommandStatusParams) WithTimeout(timeout time.Duration) *RTRCheckCommandStatusParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the r t r check command status params
func (o *RTRCheckCommandStatusParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the r t r check command status params
func (o *RTRCheckCommandStatusParams) WithContext(ctx context.Context) *RTRCheckCommandStatusParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the r t r check command status params
func (o *RTRCheckCommandStatusParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the r t r check command status params
func (o *RTRCheckCommandStatusParams) WithHTTPClient(client *http.Client) *RTRCheckCommandStatusParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the r t r check command status params
func (o *RTRCheckCommandStatusParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCloudRequestID adds the cloudRequestID to the r t r check command status params
func (o *RTRCheckCommandStatusParams) WithCloudRequestID(cloudRequestID string) *RTRCheckCommandStatusParams {
	o.SetCloudRequestID(cloudRequestID)
	return o
}

// SetCloudRequestID adds the cloudRequestId to the r t r check command status params
func (o *RTRCheckCommandStatusParams) SetCloudRequestID(cloudRequestID string) {
	o.CloudRequestID = cloudRequestID
}

// WithSequenceID adds the sequenceID to the r t r check command status params
func (o *RTRCheckCommandStatusParams) WithSequenceID(sequenceID int64) *RTRCheckCommandStatusParams {
	o.SetSequenceID(sequenceID)
	return o
}

// SetSequenceID adds the sequenceId to the r t r check command status params
func (o *RTRCheckCommandStatusParams) SetSequenceID(sequenceID int64) {
	o.SequenceID = sequenceID
}

// WriteToRequest writes these params to a swagger request
func (o *RTRCheckCommandStatusParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param cloud_request_id
	qrCloudRequestID := o.CloudRequestID
	qCloudRequestID := qrCloudRequestID
	if qCloudRequestID != "" {
		if err := r.SetQueryParam("cloud_request_id", qCloudRequestID); err != nil {
			return err
		}
	}

	// query param sequence_id
	qrSequenceID := o.SequenceID
	qSequenceID := swag.FormatInt64(qrSequenceID)
	if qSequenceID != "" {
		if err := r.SetQueryParam("sequence_id", qSequenceID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
