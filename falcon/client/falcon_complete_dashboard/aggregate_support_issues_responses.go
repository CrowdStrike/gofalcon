// Code generated by go-swagger; DO NOT EDIT.

package falcon_complete_dashboard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// AggregateSupportIssuesReader is a Reader for the AggregateSupportIssues structure.
type AggregateSupportIssuesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AggregateSupportIssuesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAggregateSupportIssuesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAggregateSupportIssuesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAggregateSupportIssuesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAggregateSupportIssuesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAggregateSupportIssuesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /falcon-complete-dashboards/aggregates/support-issues/v1] AggregateSupportIssues", response, response.Code())
	}
}

// NewAggregateSupportIssuesOK creates a AggregateSupportIssuesOK with default headers values
func NewAggregateSupportIssuesOK() *AggregateSupportIssuesOK {
	return &AggregateSupportIssuesOK{}
}

/*
AggregateSupportIssuesOK describes a response with status code 200, with default header values.

OK
*/
type AggregateSupportIssuesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaAggregatesResponse
}

// IsSuccess returns true when this aggregate support issues o k response has a 2xx status code
func (o *AggregateSupportIssuesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this aggregate support issues o k response has a 3xx status code
func (o *AggregateSupportIssuesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate support issues o k response has a 4xx status code
func (o *AggregateSupportIssuesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this aggregate support issues o k response has a 5xx status code
func (o *AggregateSupportIssuesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate support issues o k response a status code equal to that given
func (o *AggregateSupportIssuesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the aggregate support issues o k response
func (o *AggregateSupportIssuesOK) Code() int {
	return 200
}

func (o *AggregateSupportIssuesOK) Error() string {
	return fmt.Sprintf("[POST /falcon-complete-dashboards/aggregates/support-issues/v1][%d] aggregateSupportIssuesOK  %+v", 200, o.Payload)
}

func (o *AggregateSupportIssuesOK) String() string {
	return fmt.Sprintf("[POST /falcon-complete-dashboards/aggregates/support-issues/v1][%d] aggregateSupportIssuesOK  %+v", 200, o.Payload)
}

func (o *AggregateSupportIssuesOK) GetPayload() *models.MsaAggregatesResponse {
	return o.Payload
}

func (o *AggregateSupportIssuesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaAggregatesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateSupportIssuesBadRequest creates a AggregateSupportIssuesBadRequest with default headers values
func NewAggregateSupportIssuesBadRequest() *AggregateSupportIssuesBadRequest {
	return &AggregateSupportIssuesBadRequest{}
}

/*
AggregateSupportIssuesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AggregateSupportIssuesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this aggregate support issues bad request response has a 2xx status code
func (o *AggregateSupportIssuesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate support issues bad request response has a 3xx status code
func (o *AggregateSupportIssuesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate support issues bad request response has a 4xx status code
func (o *AggregateSupportIssuesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate support issues bad request response has a 5xx status code
func (o *AggregateSupportIssuesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate support issues bad request response a status code equal to that given
func (o *AggregateSupportIssuesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the aggregate support issues bad request response
func (o *AggregateSupportIssuesBadRequest) Code() int {
	return 400
}

func (o *AggregateSupportIssuesBadRequest) Error() string {
	return fmt.Sprintf("[POST /falcon-complete-dashboards/aggregates/support-issues/v1][%d] aggregateSupportIssuesBadRequest  %+v", 400, o.Payload)
}

func (o *AggregateSupportIssuesBadRequest) String() string {
	return fmt.Sprintf("[POST /falcon-complete-dashboards/aggregates/support-issues/v1][%d] aggregateSupportIssuesBadRequest  %+v", 400, o.Payload)
}

func (o *AggregateSupportIssuesBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *AggregateSupportIssuesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateSupportIssuesForbidden creates a AggregateSupportIssuesForbidden with default headers values
func NewAggregateSupportIssuesForbidden() *AggregateSupportIssuesForbidden {
	return &AggregateSupportIssuesForbidden{}
}

/*
AggregateSupportIssuesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AggregateSupportIssuesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this aggregate support issues forbidden response has a 2xx status code
func (o *AggregateSupportIssuesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate support issues forbidden response has a 3xx status code
func (o *AggregateSupportIssuesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate support issues forbidden response has a 4xx status code
func (o *AggregateSupportIssuesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate support issues forbidden response has a 5xx status code
func (o *AggregateSupportIssuesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate support issues forbidden response a status code equal to that given
func (o *AggregateSupportIssuesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the aggregate support issues forbidden response
func (o *AggregateSupportIssuesForbidden) Code() int {
	return 403
}

func (o *AggregateSupportIssuesForbidden) Error() string {
	return fmt.Sprintf("[POST /falcon-complete-dashboards/aggregates/support-issues/v1][%d] aggregateSupportIssuesForbidden  %+v", 403, o.Payload)
}

func (o *AggregateSupportIssuesForbidden) String() string {
	return fmt.Sprintf("[POST /falcon-complete-dashboards/aggregates/support-issues/v1][%d] aggregateSupportIssuesForbidden  %+v", 403, o.Payload)
}

func (o *AggregateSupportIssuesForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *AggregateSupportIssuesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateSupportIssuesTooManyRequests creates a AggregateSupportIssuesTooManyRequests with default headers values
func NewAggregateSupportIssuesTooManyRequests() *AggregateSupportIssuesTooManyRequests {
	return &AggregateSupportIssuesTooManyRequests{}
}

/*
AggregateSupportIssuesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type AggregateSupportIssuesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this aggregate support issues too many requests response has a 2xx status code
func (o *AggregateSupportIssuesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate support issues too many requests response has a 3xx status code
func (o *AggregateSupportIssuesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate support issues too many requests response has a 4xx status code
func (o *AggregateSupportIssuesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate support issues too many requests response has a 5xx status code
func (o *AggregateSupportIssuesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate support issues too many requests response a status code equal to that given
func (o *AggregateSupportIssuesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the aggregate support issues too many requests response
func (o *AggregateSupportIssuesTooManyRequests) Code() int {
	return 429
}

func (o *AggregateSupportIssuesTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /falcon-complete-dashboards/aggregates/support-issues/v1][%d] aggregateSupportIssuesTooManyRequests  %+v", 429, o.Payload)
}

func (o *AggregateSupportIssuesTooManyRequests) String() string {
	return fmt.Sprintf("[POST /falcon-complete-dashboards/aggregates/support-issues/v1][%d] aggregateSupportIssuesTooManyRequests  %+v", 429, o.Payload)
}

func (o *AggregateSupportIssuesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *AggregateSupportIssuesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateSupportIssuesInternalServerError creates a AggregateSupportIssuesInternalServerError with default headers values
func NewAggregateSupportIssuesInternalServerError() *AggregateSupportIssuesInternalServerError {
	return &AggregateSupportIssuesInternalServerError{}
}

/*
AggregateSupportIssuesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AggregateSupportIssuesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this aggregate support issues internal server error response has a 2xx status code
func (o *AggregateSupportIssuesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate support issues internal server error response has a 3xx status code
func (o *AggregateSupportIssuesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate support issues internal server error response has a 4xx status code
func (o *AggregateSupportIssuesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this aggregate support issues internal server error response has a 5xx status code
func (o *AggregateSupportIssuesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this aggregate support issues internal server error response a status code equal to that given
func (o *AggregateSupportIssuesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the aggregate support issues internal server error response
func (o *AggregateSupportIssuesInternalServerError) Code() int {
	return 500
}

func (o *AggregateSupportIssuesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /falcon-complete-dashboards/aggregates/support-issues/v1][%d] aggregateSupportIssuesInternalServerError  %+v", 500, o.Payload)
}

func (o *AggregateSupportIssuesInternalServerError) String() string {
	return fmt.Sprintf("[POST /falcon-complete-dashboards/aggregates/support-issues/v1][%d] aggregateSupportIssuesInternalServerError  %+v", 500, o.Payload)
}

func (o *AggregateSupportIssuesInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *AggregateSupportIssuesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
