// Code generated by go-swagger; DO NOT EDIT.

package falcon_complete_dashboard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// AggregateTotalDeviceCountsReader is a Reader for the AggregateTotalDeviceCounts structure.
type AggregateTotalDeviceCountsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AggregateTotalDeviceCountsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAggregateTotalDeviceCountsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAggregateTotalDeviceCountsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAggregateTotalDeviceCountsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAggregateTotalDeviceCountsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAggregateTotalDeviceCountsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /falcon-complete-dashboards/aggregates/total-device-counts/v1] AggregateTotalDeviceCounts", response, response.Code())
	}
}

// NewAggregateTotalDeviceCountsOK creates a AggregateTotalDeviceCountsOK with default headers values
func NewAggregateTotalDeviceCountsOK() *AggregateTotalDeviceCountsOK {
	return &AggregateTotalDeviceCountsOK{}
}

/*
AggregateTotalDeviceCountsOK describes a response with status code 200, with default header values.

OK
*/
type AggregateTotalDeviceCountsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaAggregatesResponse
}

// IsSuccess returns true when this aggregate total device counts o k response has a 2xx status code
func (o *AggregateTotalDeviceCountsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this aggregate total device counts o k response has a 3xx status code
func (o *AggregateTotalDeviceCountsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate total device counts o k response has a 4xx status code
func (o *AggregateTotalDeviceCountsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this aggregate total device counts o k response has a 5xx status code
func (o *AggregateTotalDeviceCountsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate total device counts o k response a status code equal to that given
func (o *AggregateTotalDeviceCountsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the aggregate total device counts o k response
func (o *AggregateTotalDeviceCountsOK) Code() int {
	return 200
}

func (o *AggregateTotalDeviceCountsOK) Error() string {
	return fmt.Sprintf("[POST /falcon-complete-dashboards/aggregates/total-device-counts/v1][%d] aggregateTotalDeviceCountsOK  %+v", 200, o.Payload)
}

func (o *AggregateTotalDeviceCountsOK) String() string {
	return fmt.Sprintf("[POST /falcon-complete-dashboards/aggregates/total-device-counts/v1][%d] aggregateTotalDeviceCountsOK  %+v", 200, o.Payload)
}

func (o *AggregateTotalDeviceCountsOK) GetPayload() *models.MsaAggregatesResponse {
	return o.Payload
}

func (o *AggregateTotalDeviceCountsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaAggregatesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateTotalDeviceCountsBadRequest creates a AggregateTotalDeviceCountsBadRequest with default headers values
func NewAggregateTotalDeviceCountsBadRequest() *AggregateTotalDeviceCountsBadRequest {
	return &AggregateTotalDeviceCountsBadRequest{}
}

/*
AggregateTotalDeviceCountsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AggregateTotalDeviceCountsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this aggregate total device counts bad request response has a 2xx status code
func (o *AggregateTotalDeviceCountsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate total device counts bad request response has a 3xx status code
func (o *AggregateTotalDeviceCountsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate total device counts bad request response has a 4xx status code
func (o *AggregateTotalDeviceCountsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate total device counts bad request response has a 5xx status code
func (o *AggregateTotalDeviceCountsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate total device counts bad request response a status code equal to that given
func (o *AggregateTotalDeviceCountsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the aggregate total device counts bad request response
func (o *AggregateTotalDeviceCountsBadRequest) Code() int {
	return 400
}

func (o *AggregateTotalDeviceCountsBadRequest) Error() string {
	return fmt.Sprintf("[POST /falcon-complete-dashboards/aggregates/total-device-counts/v1][%d] aggregateTotalDeviceCountsBadRequest  %+v", 400, o.Payload)
}

func (o *AggregateTotalDeviceCountsBadRequest) String() string {
	return fmt.Sprintf("[POST /falcon-complete-dashboards/aggregates/total-device-counts/v1][%d] aggregateTotalDeviceCountsBadRequest  %+v", 400, o.Payload)
}

func (o *AggregateTotalDeviceCountsBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *AggregateTotalDeviceCountsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateTotalDeviceCountsForbidden creates a AggregateTotalDeviceCountsForbidden with default headers values
func NewAggregateTotalDeviceCountsForbidden() *AggregateTotalDeviceCountsForbidden {
	return &AggregateTotalDeviceCountsForbidden{}
}

/*
AggregateTotalDeviceCountsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AggregateTotalDeviceCountsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this aggregate total device counts forbidden response has a 2xx status code
func (o *AggregateTotalDeviceCountsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate total device counts forbidden response has a 3xx status code
func (o *AggregateTotalDeviceCountsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate total device counts forbidden response has a 4xx status code
func (o *AggregateTotalDeviceCountsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate total device counts forbidden response has a 5xx status code
func (o *AggregateTotalDeviceCountsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate total device counts forbidden response a status code equal to that given
func (o *AggregateTotalDeviceCountsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the aggregate total device counts forbidden response
func (o *AggregateTotalDeviceCountsForbidden) Code() int {
	return 403
}

func (o *AggregateTotalDeviceCountsForbidden) Error() string {
	return fmt.Sprintf("[POST /falcon-complete-dashboards/aggregates/total-device-counts/v1][%d] aggregateTotalDeviceCountsForbidden  %+v", 403, o.Payload)
}

func (o *AggregateTotalDeviceCountsForbidden) String() string {
	return fmt.Sprintf("[POST /falcon-complete-dashboards/aggregates/total-device-counts/v1][%d] aggregateTotalDeviceCountsForbidden  %+v", 403, o.Payload)
}

func (o *AggregateTotalDeviceCountsForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *AggregateTotalDeviceCountsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateTotalDeviceCountsTooManyRequests creates a AggregateTotalDeviceCountsTooManyRequests with default headers values
func NewAggregateTotalDeviceCountsTooManyRequests() *AggregateTotalDeviceCountsTooManyRequests {
	return &AggregateTotalDeviceCountsTooManyRequests{}
}

/*
AggregateTotalDeviceCountsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type AggregateTotalDeviceCountsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this aggregate total device counts too many requests response has a 2xx status code
func (o *AggregateTotalDeviceCountsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate total device counts too many requests response has a 3xx status code
func (o *AggregateTotalDeviceCountsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate total device counts too many requests response has a 4xx status code
func (o *AggregateTotalDeviceCountsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this aggregate total device counts too many requests response has a 5xx status code
func (o *AggregateTotalDeviceCountsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this aggregate total device counts too many requests response a status code equal to that given
func (o *AggregateTotalDeviceCountsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the aggregate total device counts too many requests response
func (o *AggregateTotalDeviceCountsTooManyRequests) Code() int {
	return 429
}

func (o *AggregateTotalDeviceCountsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /falcon-complete-dashboards/aggregates/total-device-counts/v1][%d] aggregateTotalDeviceCountsTooManyRequests  %+v", 429, o.Payload)
}

func (o *AggregateTotalDeviceCountsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /falcon-complete-dashboards/aggregates/total-device-counts/v1][%d] aggregateTotalDeviceCountsTooManyRequests  %+v", 429, o.Payload)
}

func (o *AggregateTotalDeviceCountsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *AggregateTotalDeviceCountsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateTotalDeviceCountsInternalServerError creates a AggregateTotalDeviceCountsInternalServerError with default headers values
func NewAggregateTotalDeviceCountsInternalServerError() *AggregateTotalDeviceCountsInternalServerError {
	return &AggregateTotalDeviceCountsInternalServerError{}
}

/*
AggregateTotalDeviceCountsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AggregateTotalDeviceCountsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this aggregate total device counts internal server error response has a 2xx status code
func (o *AggregateTotalDeviceCountsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this aggregate total device counts internal server error response has a 3xx status code
func (o *AggregateTotalDeviceCountsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this aggregate total device counts internal server error response has a 4xx status code
func (o *AggregateTotalDeviceCountsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this aggregate total device counts internal server error response has a 5xx status code
func (o *AggregateTotalDeviceCountsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this aggregate total device counts internal server error response a status code equal to that given
func (o *AggregateTotalDeviceCountsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the aggregate total device counts internal server error response
func (o *AggregateTotalDeviceCountsInternalServerError) Code() int {
	return 500
}

func (o *AggregateTotalDeviceCountsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /falcon-complete-dashboards/aggregates/total-device-counts/v1][%d] aggregateTotalDeviceCountsInternalServerError  %+v", 500, o.Payload)
}

func (o *AggregateTotalDeviceCountsInternalServerError) String() string {
	return fmt.Sprintf("[POST /falcon-complete-dashboards/aggregates/total-device-counts/v1][%d] aggregateTotalDeviceCountsInternalServerError  %+v", 500, o.Payload)
}

func (o *AggregateTotalDeviceCountsInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *AggregateTotalDeviceCountsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
