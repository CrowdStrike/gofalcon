// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewWorkflowDefinitionsExportParams creates a new WorkflowDefinitionsExportParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewWorkflowDefinitionsExportParams() *WorkflowDefinitionsExportParams {
	return &WorkflowDefinitionsExportParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewWorkflowDefinitionsExportParamsWithTimeout creates a new WorkflowDefinitionsExportParams object
// with the ability to set a timeout on a request.
func NewWorkflowDefinitionsExportParamsWithTimeout(timeout time.Duration) *WorkflowDefinitionsExportParams {
	return &WorkflowDefinitionsExportParams{
		timeout: timeout,
	}
}

// NewWorkflowDefinitionsExportParamsWithContext creates a new WorkflowDefinitionsExportParams object
// with the ability to set a context for a request.
func NewWorkflowDefinitionsExportParamsWithContext(ctx context.Context) *WorkflowDefinitionsExportParams {
	return &WorkflowDefinitionsExportParams{
		Context: ctx,
	}
}

// NewWorkflowDefinitionsExportParamsWithHTTPClient creates a new WorkflowDefinitionsExportParams object
// with the ability to set a custom HTTPClient for a request.
func NewWorkflowDefinitionsExportParamsWithHTTPClient(client *http.Client) *WorkflowDefinitionsExportParams {
	return &WorkflowDefinitionsExportParams{
		HTTPClient: client,
	}
}

/*
WorkflowDefinitionsExportParams contains all the parameters to send to the API endpoint

	for the workflow definitions export operation.

	Typically these are written to a http.Request.
*/
type WorkflowDefinitionsExportParams struct {

	/* ID.

	   ID of workflow definitions to return details for
	*/
	ID string

	/* Sanitize.

	   whether or not to sanitize PII from workflow before it's exported

	   Default: true
	*/
	Sanitize *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the workflow definitions export params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *WorkflowDefinitionsExportParams) WithDefaults() *WorkflowDefinitionsExportParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the workflow definitions export params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *WorkflowDefinitionsExportParams) SetDefaults() {
	var (
		sanitizeDefault = bool(true)
	)

	val := WorkflowDefinitionsExportParams{
		Sanitize: &sanitizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the workflow definitions export params
func (o *WorkflowDefinitionsExportParams) WithTimeout(timeout time.Duration) *WorkflowDefinitionsExportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the workflow definitions export params
func (o *WorkflowDefinitionsExportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the workflow definitions export params
func (o *WorkflowDefinitionsExportParams) WithContext(ctx context.Context) *WorkflowDefinitionsExportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the workflow definitions export params
func (o *WorkflowDefinitionsExportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the workflow definitions export params
func (o *WorkflowDefinitionsExportParams) WithHTTPClient(client *http.Client) *WorkflowDefinitionsExportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the workflow definitions export params
func (o *WorkflowDefinitionsExportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the workflow definitions export params
func (o *WorkflowDefinitionsExportParams) WithID(id string) *WorkflowDefinitionsExportParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the workflow definitions export params
func (o *WorkflowDefinitionsExportParams) SetID(id string) {
	o.ID = id
}

// WithSanitize adds the sanitize to the workflow definitions export params
func (o *WorkflowDefinitionsExportParams) WithSanitize(sanitize *bool) *WorkflowDefinitionsExportParams {
	o.SetSanitize(sanitize)
	return o
}

// SetSanitize adds the sanitize to the workflow definitions export params
func (o *WorkflowDefinitionsExportParams) SetSanitize(sanitize *bool) {
	o.Sanitize = sanitize
}

// WriteToRequest writes these params to a swagger request
func (o *WorkflowDefinitionsExportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param id
	qrID := o.ID
	qID := qrID
	if qID != "" {

		if err := r.SetQueryParam("id", qID); err != nil {
			return err
		}
	}

	if o.Sanitize != nil {

		// query param sanitize
		var qrSanitize bool

		if o.Sanitize != nil {
			qrSanitize = *o.Sanitize
		}
		qSanitize := swag.FormatBool(qrSanitize)
		if qSanitize != "" {

			if err := r.SetQueryParam("sanitize", qSanitize); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
