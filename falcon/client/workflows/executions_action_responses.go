// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExecutionsActionReader is a Reader for the ExecutionsAction structure.
type ExecutionsActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecutionsActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecutionsActionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExecutionsActionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExecutionsActionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExecutionsActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExecutionsActionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExecutionsActionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /workflows/entities/execution-actions/v1] executions.action", response, response.Code())
	}
}

// NewExecutionsActionOK creates a ExecutionsActionOK with default headers values
func NewExecutionsActionOK() *ExecutionsActionOK {
	return &ExecutionsActionOK{}
}

/* ExecutionsActionOK describes a response with status code 200, with default header values.

OK
*/
type ExecutionsActionOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DefinitionsDefinitionEntitiesResponse
}

// IsSuccess returns true when this executions action o k response has a 2xx status code
func (o *ExecutionsActionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this executions action o k response has a 3xx status code
func (o *ExecutionsActionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this executions action o k response has a 4xx status code
func (o *ExecutionsActionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this executions action o k response has a 5xx status code
func (o *ExecutionsActionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this executions action o k response a status code equal to that given
func (o *ExecutionsActionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the executions action o k response
func (o *ExecutionsActionOK) Code() int {
	return 200
}

func (o *ExecutionsActionOK) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionsActionOK  %+v", 200, o.Payload)
}

func (o *ExecutionsActionOK) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionsActionOK  %+v", 200, o.Payload)
}

func (o *ExecutionsActionOK) GetPayload() *models.DefinitionsDefinitionEntitiesResponse {
	return o.Payload
}

func (o *ExecutionsActionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DefinitionsDefinitionEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutionsActionBadRequest creates a ExecutionsActionBadRequest with default headers values
func NewExecutionsActionBadRequest() *ExecutionsActionBadRequest {
	return &ExecutionsActionBadRequest{}
}

/* ExecutionsActionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExecutionsActionBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DefinitionsDefinitionEntitiesResponse
}

// IsSuccess returns true when this executions action bad request response has a 2xx status code
func (o *ExecutionsActionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this executions action bad request response has a 3xx status code
func (o *ExecutionsActionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this executions action bad request response has a 4xx status code
func (o *ExecutionsActionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this executions action bad request response has a 5xx status code
func (o *ExecutionsActionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this executions action bad request response a status code equal to that given
func (o *ExecutionsActionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the executions action bad request response
func (o *ExecutionsActionBadRequest) Code() int {
	return 400
}

func (o *ExecutionsActionBadRequest) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionsActionBadRequest  %+v", 400, o.Payload)
}

func (o *ExecutionsActionBadRequest) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionsActionBadRequest  %+v", 400, o.Payload)
}

func (o *ExecutionsActionBadRequest) GetPayload() *models.DefinitionsDefinitionEntitiesResponse {
	return o.Payload
}

func (o *ExecutionsActionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DefinitionsDefinitionEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutionsActionForbidden creates a ExecutionsActionForbidden with default headers values
func NewExecutionsActionForbidden() *ExecutionsActionForbidden {
	return &ExecutionsActionForbidden{}
}

/* ExecutionsActionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExecutionsActionForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this executions action forbidden response has a 2xx status code
func (o *ExecutionsActionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this executions action forbidden response has a 3xx status code
func (o *ExecutionsActionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this executions action forbidden response has a 4xx status code
func (o *ExecutionsActionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this executions action forbidden response has a 5xx status code
func (o *ExecutionsActionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this executions action forbidden response a status code equal to that given
func (o *ExecutionsActionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the executions action forbidden response
func (o *ExecutionsActionForbidden) Code() int {
	return 403
}

func (o *ExecutionsActionForbidden) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionsActionForbidden  %+v", 403, o.Payload)
}

func (o *ExecutionsActionForbidden) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionsActionForbidden  %+v", 403, o.Payload)
}

func (o *ExecutionsActionForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecutionsActionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutionsActionNotFound creates a ExecutionsActionNotFound with default headers values
func NewExecutionsActionNotFound() *ExecutionsActionNotFound {
	return &ExecutionsActionNotFound{}
}

/* ExecutionsActionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ExecutionsActionNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DefinitionsDefinitionEntitiesResponse
}

// IsSuccess returns true when this executions action not found response has a 2xx status code
func (o *ExecutionsActionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this executions action not found response has a 3xx status code
func (o *ExecutionsActionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this executions action not found response has a 4xx status code
func (o *ExecutionsActionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this executions action not found response has a 5xx status code
func (o *ExecutionsActionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this executions action not found response a status code equal to that given
func (o *ExecutionsActionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the executions action not found response
func (o *ExecutionsActionNotFound) Code() int {
	return 404
}

func (o *ExecutionsActionNotFound) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionsActionNotFound  %+v", 404, o.Payload)
}

func (o *ExecutionsActionNotFound) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionsActionNotFound  %+v", 404, o.Payload)
}

func (o *ExecutionsActionNotFound) GetPayload() *models.DefinitionsDefinitionEntitiesResponse {
	return o.Payload
}

func (o *ExecutionsActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DefinitionsDefinitionEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutionsActionTooManyRequests creates a ExecutionsActionTooManyRequests with default headers values
func NewExecutionsActionTooManyRequests() *ExecutionsActionTooManyRequests {
	return &ExecutionsActionTooManyRequests{}
}

/* ExecutionsActionTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExecutionsActionTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this executions action too many requests response has a 2xx status code
func (o *ExecutionsActionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this executions action too many requests response has a 3xx status code
func (o *ExecutionsActionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this executions action too many requests response has a 4xx status code
func (o *ExecutionsActionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this executions action too many requests response has a 5xx status code
func (o *ExecutionsActionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this executions action too many requests response a status code equal to that given
func (o *ExecutionsActionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the executions action too many requests response
func (o *ExecutionsActionTooManyRequests) Code() int {
	return 429
}

func (o *ExecutionsActionTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionsActionTooManyRequests  %+v", 429, o.Payload)
}

func (o *ExecutionsActionTooManyRequests) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionsActionTooManyRequests  %+v", 429, o.Payload)
}

func (o *ExecutionsActionTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecutionsActionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutionsActionInternalServerError creates a ExecutionsActionInternalServerError with default headers values
func NewExecutionsActionInternalServerError() *ExecutionsActionInternalServerError {
	return &ExecutionsActionInternalServerError{}
}

/* ExecutionsActionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ExecutionsActionInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DefinitionsDefinitionEntitiesResponse
}

// IsSuccess returns true when this executions action internal server error response has a 2xx status code
func (o *ExecutionsActionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this executions action internal server error response has a 3xx status code
func (o *ExecutionsActionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this executions action internal server error response has a 4xx status code
func (o *ExecutionsActionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this executions action internal server error response has a 5xx status code
func (o *ExecutionsActionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this executions action internal server error response a status code equal to that given
func (o *ExecutionsActionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the executions action internal server error response
func (o *ExecutionsActionInternalServerError) Code() int {
	return 500
}

func (o *ExecutionsActionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionsActionInternalServerError  %+v", 500, o.Payload)
}

func (o *ExecutionsActionInternalServerError) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionsActionInternalServerError  %+v", 500, o.Payload)
}

func (o *ExecutionsActionInternalServerError) GetPayload() *models.DefinitionsDefinitionEntitiesResponse {
	return o.Payload
}

func (o *ExecutionsActionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DefinitionsDefinitionEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
