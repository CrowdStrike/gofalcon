// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// V1ExecuteReader is a Reader for the V1Execute structure.
type V1ExecuteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1ExecuteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1ExecuteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1ExecuteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1ExecuteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewV1ExecuteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewV1ExecuteTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1ExecuteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /workflows/entities/execute/v1] v1.execute", response, response.Code())
	}
}

// NewV1ExecuteOK creates a V1ExecuteOK with default headers values
func NewV1ExecuteOK() *V1ExecuteOK {
	return &V1ExecuteOK{}
}

/*
V1ExecuteOK describes a response with status code 200, with default header values.

OK
*/
type V1ExecuteOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIResourceIDsResponse
}

// IsSuccess returns true when this v1 execute o k response has a 2xx status code
func (o *V1ExecuteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 execute o k response has a 3xx status code
func (o *V1ExecuteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 execute o k response has a 4xx status code
func (o *V1ExecuteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 execute o k response has a 5xx status code
func (o *V1ExecuteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 execute o k response a status code equal to that given
func (o *V1ExecuteOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 execute o k response
func (o *V1ExecuteOK) Code() int {
	return 200
}

func (o *V1ExecuteOK) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execute/v1][%d] v1ExecuteOK  %+v", 200, o.Payload)
}

func (o *V1ExecuteOK) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execute/v1][%d] v1ExecuteOK  %+v", 200, o.Payload)
}

func (o *V1ExecuteOK) GetPayload() *models.APIResourceIDsResponse {
	return o.Payload
}

func (o *V1ExecuteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIResourceIDsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1ExecuteBadRequest creates a V1ExecuteBadRequest with default headers values
func NewV1ExecuteBadRequest() *V1ExecuteBadRequest {
	return &V1ExecuteBadRequest{}
}

/*
V1ExecuteBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1ExecuteBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIResourceIDsResponse
}

// IsSuccess returns true when this v1 execute bad request response has a 2xx status code
func (o *V1ExecuteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 execute bad request response has a 3xx status code
func (o *V1ExecuteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 execute bad request response has a 4xx status code
func (o *V1ExecuteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 execute bad request response has a 5xx status code
func (o *V1ExecuteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 execute bad request response a status code equal to that given
func (o *V1ExecuteBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 execute bad request response
func (o *V1ExecuteBadRequest) Code() int {
	return 400
}

func (o *V1ExecuteBadRequest) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execute/v1][%d] v1ExecuteBadRequest  %+v", 400, o.Payload)
}

func (o *V1ExecuteBadRequest) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execute/v1][%d] v1ExecuteBadRequest  %+v", 400, o.Payload)
}

func (o *V1ExecuteBadRequest) GetPayload() *models.APIResourceIDsResponse {
	return o.Payload
}

func (o *V1ExecuteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIResourceIDsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1ExecuteForbidden creates a V1ExecuteForbidden with default headers values
func NewV1ExecuteForbidden() *V1ExecuteForbidden {
	return &V1ExecuteForbidden{}
}

/*
V1ExecuteForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1ExecuteForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this v1 execute forbidden response has a 2xx status code
func (o *V1ExecuteForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 execute forbidden response has a 3xx status code
func (o *V1ExecuteForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 execute forbidden response has a 4xx status code
func (o *V1ExecuteForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 execute forbidden response has a 5xx status code
func (o *V1ExecuteForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 execute forbidden response a status code equal to that given
func (o *V1ExecuteForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 execute forbidden response
func (o *V1ExecuteForbidden) Code() int {
	return 403
}

func (o *V1ExecuteForbidden) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execute/v1][%d] v1ExecuteForbidden  %+v", 403, o.Payload)
}

func (o *V1ExecuteForbidden) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execute/v1][%d] v1ExecuteForbidden  %+v", 403, o.Payload)
}

func (o *V1ExecuteForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *V1ExecuteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1ExecuteNotFound creates a V1ExecuteNotFound with default headers values
func NewV1ExecuteNotFound() *V1ExecuteNotFound {
	return &V1ExecuteNotFound{}
}

/*
V1ExecuteNotFound describes a response with status code 404, with default header values.

Not Found
*/
type V1ExecuteNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIResourceIDsResponse
}

// IsSuccess returns true when this v1 execute not found response has a 2xx status code
func (o *V1ExecuteNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 execute not found response has a 3xx status code
func (o *V1ExecuteNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 execute not found response has a 4xx status code
func (o *V1ExecuteNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 execute not found response has a 5xx status code
func (o *V1ExecuteNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 execute not found response a status code equal to that given
func (o *V1ExecuteNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the v1 execute not found response
func (o *V1ExecuteNotFound) Code() int {
	return 404
}

func (o *V1ExecuteNotFound) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execute/v1][%d] v1ExecuteNotFound  %+v", 404, o.Payload)
}

func (o *V1ExecuteNotFound) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execute/v1][%d] v1ExecuteNotFound  %+v", 404, o.Payload)
}

func (o *V1ExecuteNotFound) GetPayload() *models.APIResourceIDsResponse {
	return o.Payload
}

func (o *V1ExecuteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIResourceIDsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1ExecuteTooManyRequests creates a V1ExecuteTooManyRequests with default headers values
func NewV1ExecuteTooManyRequests() *V1ExecuteTooManyRequests {
	return &V1ExecuteTooManyRequests{}
}

/*
V1ExecuteTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type V1ExecuteTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this v1 execute too many requests response has a 2xx status code
func (o *V1ExecuteTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 execute too many requests response has a 3xx status code
func (o *V1ExecuteTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 execute too many requests response has a 4xx status code
func (o *V1ExecuteTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 execute too many requests response has a 5xx status code
func (o *V1ExecuteTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 execute too many requests response a status code equal to that given
func (o *V1ExecuteTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the v1 execute too many requests response
func (o *V1ExecuteTooManyRequests) Code() int {
	return 429
}

func (o *V1ExecuteTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execute/v1][%d] v1ExecuteTooManyRequests  %+v", 429, o.Payload)
}

func (o *V1ExecuteTooManyRequests) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execute/v1][%d] v1ExecuteTooManyRequests  %+v", 429, o.Payload)
}

func (o *V1ExecuteTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *V1ExecuteTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1ExecuteInternalServerError creates a V1ExecuteInternalServerError with default headers values
func NewV1ExecuteInternalServerError() *V1ExecuteInternalServerError {
	return &V1ExecuteInternalServerError{}
}

/*
V1ExecuteInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1ExecuteInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIResourceIDsResponse
}

// IsSuccess returns true when this v1 execute internal server error response has a 2xx status code
func (o *V1ExecuteInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 execute internal server error response has a 3xx status code
func (o *V1ExecuteInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 execute internal server error response has a 4xx status code
func (o *V1ExecuteInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 execute internal server error response has a 5xx status code
func (o *V1ExecuteInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 execute internal server error response a status code equal to that given
func (o *V1ExecuteInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 execute internal server error response
func (o *V1ExecuteInternalServerError) Code() int {
	return 500
}

func (o *V1ExecuteInternalServerError) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execute/v1][%d] v1ExecuteInternalServerError  %+v", 500, o.Payload)
}

func (o *V1ExecuteInternalServerError) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execute/v1][%d] v1ExecuteInternalServerError  %+v", 500, o.Payload)
}

func (o *V1ExecuteInternalServerError) GetPayload() *models.APIResourceIDsResponse {
	return o.Payload
}

func (o *V1ExecuteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIResourceIDsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
