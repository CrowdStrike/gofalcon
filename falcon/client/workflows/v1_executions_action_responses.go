// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// V1ExecutionsActionReader is a Reader for the V1ExecutionsAction structure.
type V1ExecutionsActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1ExecutionsActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1ExecutionsActionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1ExecutionsActionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1ExecutionsActionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewV1ExecutionsActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewV1ExecutionsActionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1ExecutionsActionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /workflows/entities/execution-actions/v1] v1.executions.action", response, response.Code())
	}
}

// NewV1ExecutionsActionOK creates a V1ExecutionsActionOK with default headers values
func NewV1ExecutionsActionOK() *V1ExecutionsActionOK {
	return &V1ExecutionsActionOK{}
}

/*
V1ExecutionsActionOK describes a response with status code 200, with default header values.

OK
*/
type V1ExecutionsActionOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DefinitionsDefinitionEntitiesResponse
}

// IsSuccess returns true when this v1 executions action o k response has a 2xx status code
func (o *V1ExecutionsActionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 executions action o k response has a 3xx status code
func (o *V1ExecutionsActionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 executions action o k response has a 4xx status code
func (o *V1ExecutionsActionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 executions action o k response has a 5xx status code
func (o *V1ExecutionsActionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 executions action o k response a status code equal to that given
func (o *V1ExecutionsActionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 executions action o k response
func (o *V1ExecutionsActionOK) Code() int {
	return 200
}

func (o *V1ExecutionsActionOK) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] v1ExecutionsActionOK  %+v", 200, o.Payload)
}

func (o *V1ExecutionsActionOK) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] v1ExecutionsActionOK  %+v", 200, o.Payload)
}

func (o *V1ExecutionsActionOK) GetPayload() *models.DefinitionsDefinitionEntitiesResponse {
	return o.Payload
}

func (o *V1ExecutionsActionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DefinitionsDefinitionEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1ExecutionsActionBadRequest creates a V1ExecutionsActionBadRequest with default headers values
func NewV1ExecutionsActionBadRequest() *V1ExecutionsActionBadRequest {
	return &V1ExecutionsActionBadRequest{}
}

/*
V1ExecutionsActionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1ExecutionsActionBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DefinitionsDefinitionEntitiesResponse
}

// IsSuccess returns true when this v1 executions action bad request response has a 2xx status code
func (o *V1ExecutionsActionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 executions action bad request response has a 3xx status code
func (o *V1ExecutionsActionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 executions action bad request response has a 4xx status code
func (o *V1ExecutionsActionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 executions action bad request response has a 5xx status code
func (o *V1ExecutionsActionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 executions action bad request response a status code equal to that given
func (o *V1ExecutionsActionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 executions action bad request response
func (o *V1ExecutionsActionBadRequest) Code() int {
	return 400
}

func (o *V1ExecutionsActionBadRequest) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] v1ExecutionsActionBadRequest  %+v", 400, o.Payload)
}

func (o *V1ExecutionsActionBadRequest) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] v1ExecutionsActionBadRequest  %+v", 400, o.Payload)
}

func (o *V1ExecutionsActionBadRequest) GetPayload() *models.DefinitionsDefinitionEntitiesResponse {
	return o.Payload
}

func (o *V1ExecutionsActionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DefinitionsDefinitionEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1ExecutionsActionForbidden creates a V1ExecutionsActionForbidden with default headers values
func NewV1ExecutionsActionForbidden() *V1ExecutionsActionForbidden {
	return &V1ExecutionsActionForbidden{}
}

/*
V1ExecutionsActionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1ExecutionsActionForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this v1 executions action forbidden response has a 2xx status code
func (o *V1ExecutionsActionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 executions action forbidden response has a 3xx status code
func (o *V1ExecutionsActionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 executions action forbidden response has a 4xx status code
func (o *V1ExecutionsActionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 executions action forbidden response has a 5xx status code
func (o *V1ExecutionsActionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 executions action forbidden response a status code equal to that given
func (o *V1ExecutionsActionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 executions action forbidden response
func (o *V1ExecutionsActionForbidden) Code() int {
	return 403
}

func (o *V1ExecutionsActionForbidden) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] v1ExecutionsActionForbidden  %+v", 403, o.Payload)
}

func (o *V1ExecutionsActionForbidden) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] v1ExecutionsActionForbidden  %+v", 403, o.Payload)
}

func (o *V1ExecutionsActionForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *V1ExecutionsActionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1ExecutionsActionNotFound creates a V1ExecutionsActionNotFound with default headers values
func NewV1ExecutionsActionNotFound() *V1ExecutionsActionNotFound {
	return &V1ExecutionsActionNotFound{}
}

/*
V1ExecutionsActionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type V1ExecutionsActionNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DefinitionsDefinitionEntitiesResponse
}

// IsSuccess returns true when this v1 executions action not found response has a 2xx status code
func (o *V1ExecutionsActionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 executions action not found response has a 3xx status code
func (o *V1ExecutionsActionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 executions action not found response has a 4xx status code
func (o *V1ExecutionsActionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 executions action not found response has a 5xx status code
func (o *V1ExecutionsActionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 executions action not found response a status code equal to that given
func (o *V1ExecutionsActionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the v1 executions action not found response
func (o *V1ExecutionsActionNotFound) Code() int {
	return 404
}

func (o *V1ExecutionsActionNotFound) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] v1ExecutionsActionNotFound  %+v", 404, o.Payload)
}

func (o *V1ExecutionsActionNotFound) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] v1ExecutionsActionNotFound  %+v", 404, o.Payload)
}

func (o *V1ExecutionsActionNotFound) GetPayload() *models.DefinitionsDefinitionEntitiesResponse {
	return o.Payload
}

func (o *V1ExecutionsActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DefinitionsDefinitionEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1ExecutionsActionTooManyRequests creates a V1ExecutionsActionTooManyRequests with default headers values
func NewV1ExecutionsActionTooManyRequests() *V1ExecutionsActionTooManyRequests {
	return &V1ExecutionsActionTooManyRequests{}
}

/*
V1ExecutionsActionTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type V1ExecutionsActionTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this v1 executions action too many requests response has a 2xx status code
func (o *V1ExecutionsActionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 executions action too many requests response has a 3xx status code
func (o *V1ExecutionsActionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 executions action too many requests response has a 4xx status code
func (o *V1ExecutionsActionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 executions action too many requests response has a 5xx status code
func (o *V1ExecutionsActionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 executions action too many requests response a status code equal to that given
func (o *V1ExecutionsActionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the v1 executions action too many requests response
func (o *V1ExecutionsActionTooManyRequests) Code() int {
	return 429
}

func (o *V1ExecutionsActionTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] v1ExecutionsActionTooManyRequests  %+v", 429, o.Payload)
}

func (o *V1ExecutionsActionTooManyRequests) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] v1ExecutionsActionTooManyRequests  %+v", 429, o.Payload)
}

func (o *V1ExecutionsActionTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *V1ExecutionsActionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1ExecutionsActionInternalServerError creates a V1ExecutionsActionInternalServerError with default headers values
func NewV1ExecutionsActionInternalServerError() *V1ExecutionsActionInternalServerError {
	return &V1ExecutionsActionInternalServerError{}
}

/*
V1ExecutionsActionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1ExecutionsActionInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DefinitionsDefinitionEntitiesResponse
}

// IsSuccess returns true when this v1 executions action internal server error response has a 2xx status code
func (o *V1ExecutionsActionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 executions action internal server error response has a 3xx status code
func (o *V1ExecutionsActionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 executions action internal server error response has a 4xx status code
func (o *V1ExecutionsActionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 executions action internal server error response has a 5xx status code
func (o *V1ExecutionsActionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 executions action internal server error response a status code equal to that given
func (o *V1ExecutionsActionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 executions action internal server error response
func (o *V1ExecutionsActionInternalServerError) Code() int {
	return 500
}

func (o *V1ExecutionsActionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] v1ExecutionsActionInternalServerError  %+v", 500, o.Payload)
}

func (o *V1ExecutionsActionInternalServerError) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] v1ExecutionsActionInternalServerError  %+v", 500, o.Payload)
}

func (o *V1ExecutionsActionInternalServerError) GetPayload() *models.DefinitionsDefinitionEntitiesResponse {
	return o.Payload
}

func (o *V1ExecutionsActionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DefinitionsDefinitionEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
