// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// WorkflowMockExecuteReader is a Reader for the WorkflowMockExecute structure.
type WorkflowMockExecuteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WorkflowMockExecuteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewWorkflowMockExecuteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewWorkflowMockExecuteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewWorkflowMockExecuteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewWorkflowMockExecuteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewWorkflowMockExecuteTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewWorkflowMockExecuteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /workflows/entities/mock-executions/v1] WorkflowMockExecute", response, response.Code())
	}
}

// NewWorkflowMockExecuteOK creates a WorkflowMockExecuteOK with default headers values
func NewWorkflowMockExecuteOK() *WorkflowMockExecuteOK {
	return &WorkflowMockExecuteOK{}
}

/*
WorkflowMockExecuteOK describes a response with status code 200, with default header values.

OK
*/
type WorkflowMockExecuteOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIResourceIDsResponse
}

// IsSuccess returns true when this workflow mock execute o k response has a 2xx status code
func (o *WorkflowMockExecuteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this workflow mock execute o k response has a 3xx status code
func (o *WorkflowMockExecuteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow mock execute o k response has a 4xx status code
func (o *WorkflowMockExecuteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this workflow mock execute o k response has a 5xx status code
func (o *WorkflowMockExecuteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow mock execute o k response a status code equal to that given
func (o *WorkflowMockExecuteOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the workflow mock execute o k response
func (o *WorkflowMockExecuteOK) Code() int {
	return 200
}

func (o *WorkflowMockExecuteOK) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/mock-executions/v1][%d] workflowMockExecuteOK  %+v", 200, o.Payload)
}

func (o *WorkflowMockExecuteOK) String() string {
	return fmt.Sprintf("[POST /workflows/entities/mock-executions/v1][%d] workflowMockExecuteOK  %+v", 200, o.Payload)
}

func (o *WorkflowMockExecuteOK) GetPayload() *models.APIResourceIDsResponse {
	return o.Payload
}

func (o *WorkflowMockExecuteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIResourceIDsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowMockExecuteBadRequest creates a WorkflowMockExecuteBadRequest with default headers values
func NewWorkflowMockExecuteBadRequest() *WorkflowMockExecuteBadRequest {
	return &WorkflowMockExecuteBadRequest{}
}

/*
WorkflowMockExecuteBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type WorkflowMockExecuteBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIResourceIDsResponse
}

// IsSuccess returns true when this workflow mock execute bad request response has a 2xx status code
func (o *WorkflowMockExecuteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow mock execute bad request response has a 3xx status code
func (o *WorkflowMockExecuteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow mock execute bad request response has a 4xx status code
func (o *WorkflowMockExecuteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow mock execute bad request response has a 5xx status code
func (o *WorkflowMockExecuteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow mock execute bad request response a status code equal to that given
func (o *WorkflowMockExecuteBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the workflow mock execute bad request response
func (o *WorkflowMockExecuteBadRequest) Code() int {
	return 400
}

func (o *WorkflowMockExecuteBadRequest) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/mock-executions/v1][%d] workflowMockExecuteBadRequest  %+v", 400, o.Payload)
}

func (o *WorkflowMockExecuteBadRequest) String() string {
	return fmt.Sprintf("[POST /workflows/entities/mock-executions/v1][%d] workflowMockExecuteBadRequest  %+v", 400, o.Payload)
}

func (o *WorkflowMockExecuteBadRequest) GetPayload() *models.APIResourceIDsResponse {
	return o.Payload
}

func (o *WorkflowMockExecuteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIResourceIDsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowMockExecuteForbidden creates a WorkflowMockExecuteForbidden with default headers values
func NewWorkflowMockExecuteForbidden() *WorkflowMockExecuteForbidden {
	return &WorkflowMockExecuteForbidden{}
}

/*
WorkflowMockExecuteForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type WorkflowMockExecuteForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this workflow mock execute forbidden response has a 2xx status code
func (o *WorkflowMockExecuteForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow mock execute forbidden response has a 3xx status code
func (o *WorkflowMockExecuteForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow mock execute forbidden response has a 4xx status code
func (o *WorkflowMockExecuteForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow mock execute forbidden response has a 5xx status code
func (o *WorkflowMockExecuteForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow mock execute forbidden response a status code equal to that given
func (o *WorkflowMockExecuteForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the workflow mock execute forbidden response
func (o *WorkflowMockExecuteForbidden) Code() int {
	return 403
}

func (o *WorkflowMockExecuteForbidden) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/mock-executions/v1][%d] workflowMockExecuteForbidden  %+v", 403, o.Payload)
}

func (o *WorkflowMockExecuteForbidden) String() string {
	return fmt.Sprintf("[POST /workflows/entities/mock-executions/v1][%d] workflowMockExecuteForbidden  %+v", 403, o.Payload)
}

func (o *WorkflowMockExecuteForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *WorkflowMockExecuteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowMockExecuteNotFound creates a WorkflowMockExecuteNotFound with default headers values
func NewWorkflowMockExecuteNotFound() *WorkflowMockExecuteNotFound {
	return &WorkflowMockExecuteNotFound{}
}

/*
WorkflowMockExecuteNotFound describes a response with status code 404, with default header values.

Not Found
*/
type WorkflowMockExecuteNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIResourceIDsResponse
}

// IsSuccess returns true when this workflow mock execute not found response has a 2xx status code
func (o *WorkflowMockExecuteNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow mock execute not found response has a 3xx status code
func (o *WorkflowMockExecuteNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow mock execute not found response has a 4xx status code
func (o *WorkflowMockExecuteNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow mock execute not found response has a 5xx status code
func (o *WorkflowMockExecuteNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow mock execute not found response a status code equal to that given
func (o *WorkflowMockExecuteNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the workflow mock execute not found response
func (o *WorkflowMockExecuteNotFound) Code() int {
	return 404
}

func (o *WorkflowMockExecuteNotFound) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/mock-executions/v1][%d] workflowMockExecuteNotFound  %+v", 404, o.Payload)
}

func (o *WorkflowMockExecuteNotFound) String() string {
	return fmt.Sprintf("[POST /workflows/entities/mock-executions/v1][%d] workflowMockExecuteNotFound  %+v", 404, o.Payload)
}

func (o *WorkflowMockExecuteNotFound) GetPayload() *models.APIResourceIDsResponse {
	return o.Payload
}

func (o *WorkflowMockExecuteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIResourceIDsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowMockExecuteTooManyRequests creates a WorkflowMockExecuteTooManyRequests with default headers values
func NewWorkflowMockExecuteTooManyRequests() *WorkflowMockExecuteTooManyRequests {
	return &WorkflowMockExecuteTooManyRequests{}
}

/*
WorkflowMockExecuteTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type WorkflowMockExecuteTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this workflow mock execute too many requests response has a 2xx status code
func (o *WorkflowMockExecuteTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow mock execute too many requests response has a 3xx status code
func (o *WorkflowMockExecuteTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow mock execute too many requests response has a 4xx status code
func (o *WorkflowMockExecuteTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow mock execute too many requests response has a 5xx status code
func (o *WorkflowMockExecuteTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow mock execute too many requests response a status code equal to that given
func (o *WorkflowMockExecuteTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the workflow mock execute too many requests response
func (o *WorkflowMockExecuteTooManyRequests) Code() int {
	return 429
}

func (o *WorkflowMockExecuteTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/mock-executions/v1][%d] workflowMockExecuteTooManyRequests  %+v", 429, o.Payload)
}

func (o *WorkflowMockExecuteTooManyRequests) String() string {
	return fmt.Sprintf("[POST /workflows/entities/mock-executions/v1][%d] workflowMockExecuteTooManyRequests  %+v", 429, o.Payload)
}

func (o *WorkflowMockExecuteTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *WorkflowMockExecuteTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowMockExecuteInternalServerError creates a WorkflowMockExecuteInternalServerError with default headers values
func NewWorkflowMockExecuteInternalServerError() *WorkflowMockExecuteInternalServerError {
	return &WorkflowMockExecuteInternalServerError{}
}

/*
WorkflowMockExecuteInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type WorkflowMockExecuteInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIResourceIDsResponse
}

// IsSuccess returns true when this workflow mock execute internal server error response has a 2xx status code
func (o *WorkflowMockExecuteInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow mock execute internal server error response has a 3xx status code
func (o *WorkflowMockExecuteInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow mock execute internal server error response has a 4xx status code
func (o *WorkflowMockExecuteInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this workflow mock execute internal server error response has a 5xx status code
func (o *WorkflowMockExecuteInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this workflow mock execute internal server error response a status code equal to that given
func (o *WorkflowMockExecuteInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the workflow mock execute internal server error response
func (o *WorkflowMockExecuteInternalServerError) Code() int {
	return 500
}

func (o *WorkflowMockExecuteInternalServerError) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/mock-executions/v1][%d] workflowMockExecuteInternalServerError  %+v", 500, o.Payload)
}

func (o *WorkflowMockExecuteInternalServerError) String() string {
	return fmt.Sprintf("[POST /workflows/entities/mock-executions/v1][%d] workflowMockExecuteInternalServerError  %+v", 500, o.Payload)
}

func (o *WorkflowMockExecuteInternalServerError) GetPayload() *models.APIResourceIDsResponse {
	return o.Payload
}

func (o *WorkflowMockExecuteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIResourceIDsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
