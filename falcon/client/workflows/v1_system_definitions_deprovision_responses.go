// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// V1SystemDefinitionsDeprovisionReader is a Reader for the V1SystemDefinitionsDeprovision structure.
type V1SystemDefinitionsDeprovisionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1SystemDefinitionsDeprovisionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1SystemDefinitionsDeprovisionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1SystemDefinitionsDeprovisionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1SystemDefinitionsDeprovisionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewV1SystemDefinitionsDeprovisionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewV1SystemDefinitionsDeprovisionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1SystemDefinitionsDeprovisionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /workflows/system-definitions/deprovision/v1] v1.system-definitions.deprovision", response, response.Code())
	}
}

// NewV1SystemDefinitionsDeprovisionOK creates a V1SystemDefinitionsDeprovisionOK with default headers values
func NewV1SystemDefinitionsDeprovisionOK() *V1SystemDefinitionsDeprovisionOK {
	return &V1SystemDefinitionsDeprovisionOK{}
}

/*
V1SystemDefinitionsDeprovisionOK describes a response with status code 200, with default header values.

OK
*/
type V1SystemDefinitionsDeprovisionOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this v1 system definitions deprovision o k response has a 2xx status code
func (o *V1SystemDefinitionsDeprovisionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 system definitions deprovision o k response has a 3xx status code
func (o *V1SystemDefinitionsDeprovisionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 system definitions deprovision o k response has a 4xx status code
func (o *V1SystemDefinitionsDeprovisionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 system definitions deprovision o k response has a 5xx status code
func (o *V1SystemDefinitionsDeprovisionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 system definitions deprovision o k response a status code equal to that given
func (o *V1SystemDefinitionsDeprovisionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 system definitions deprovision o k response
func (o *V1SystemDefinitionsDeprovisionOK) Code() int {
	return 200
}

func (o *V1SystemDefinitionsDeprovisionOK) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] v1SystemDefinitionsDeprovisionOK  %+v", 200, o.Payload)
}

func (o *V1SystemDefinitionsDeprovisionOK) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] v1SystemDefinitionsDeprovisionOK  %+v", 200, o.Payload)
}

func (o *V1SystemDefinitionsDeprovisionOK) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *V1SystemDefinitionsDeprovisionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SystemDefinitionsDeprovisionBadRequest creates a V1SystemDefinitionsDeprovisionBadRequest with default headers values
func NewV1SystemDefinitionsDeprovisionBadRequest() *V1SystemDefinitionsDeprovisionBadRequest {
	return &V1SystemDefinitionsDeprovisionBadRequest{}
}

/*
V1SystemDefinitionsDeprovisionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1SystemDefinitionsDeprovisionBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this v1 system definitions deprovision bad request response has a 2xx status code
func (o *V1SystemDefinitionsDeprovisionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 system definitions deprovision bad request response has a 3xx status code
func (o *V1SystemDefinitionsDeprovisionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 system definitions deprovision bad request response has a 4xx status code
func (o *V1SystemDefinitionsDeprovisionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 system definitions deprovision bad request response has a 5xx status code
func (o *V1SystemDefinitionsDeprovisionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 system definitions deprovision bad request response a status code equal to that given
func (o *V1SystemDefinitionsDeprovisionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 system definitions deprovision bad request response
func (o *V1SystemDefinitionsDeprovisionBadRequest) Code() int {
	return 400
}

func (o *V1SystemDefinitionsDeprovisionBadRequest) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] v1SystemDefinitionsDeprovisionBadRequest  %+v", 400, o.Payload)
}

func (o *V1SystemDefinitionsDeprovisionBadRequest) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] v1SystemDefinitionsDeprovisionBadRequest  %+v", 400, o.Payload)
}

func (o *V1SystemDefinitionsDeprovisionBadRequest) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *V1SystemDefinitionsDeprovisionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SystemDefinitionsDeprovisionForbidden creates a V1SystemDefinitionsDeprovisionForbidden with default headers values
func NewV1SystemDefinitionsDeprovisionForbidden() *V1SystemDefinitionsDeprovisionForbidden {
	return &V1SystemDefinitionsDeprovisionForbidden{}
}

/*
V1SystemDefinitionsDeprovisionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1SystemDefinitionsDeprovisionForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this v1 system definitions deprovision forbidden response has a 2xx status code
func (o *V1SystemDefinitionsDeprovisionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 system definitions deprovision forbidden response has a 3xx status code
func (o *V1SystemDefinitionsDeprovisionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 system definitions deprovision forbidden response has a 4xx status code
func (o *V1SystemDefinitionsDeprovisionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 system definitions deprovision forbidden response has a 5xx status code
func (o *V1SystemDefinitionsDeprovisionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 system definitions deprovision forbidden response a status code equal to that given
func (o *V1SystemDefinitionsDeprovisionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 system definitions deprovision forbidden response
func (o *V1SystemDefinitionsDeprovisionForbidden) Code() int {
	return 403
}

func (o *V1SystemDefinitionsDeprovisionForbidden) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] v1SystemDefinitionsDeprovisionForbidden  %+v", 403, o.Payload)
}

func (o *V1SystemDefinitionsDeprovisionForbidden) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] v1SystemDefinitionsDeprovisionForbidden  %+v", 403, o.Payload)
}

func (o *V1SystemDefinitionsDeprovisionForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *V1SystemDefinitionsDeprovisionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SystemDefinitionsDeprovisionNotFound creates a V1SystemDefinitionsDeprovisionNotFound with default headers values
func NewV1SystemDefinitionsDeprovisionNotFound() *V1SystemDefinitionsDeprovisionNotFound {
	return &V1SystemDefinitionsDeprovisionNotFound{}
}

/*
V1SystemDefinitionsDeprovisionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type V1SystemDefinitionsDeprovisionNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this v1 system definitions deprovision not found response has a 2xx status code
func (o *V1SystemDefinitionsDeprovisionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 system definitions deprovision not found response has a 3xx status code
func (o *V1SystemDefinitionsDeprovisionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 system definitions deprovision not found response has a 4xx status code
func (o *V1SystemDefinitionsDeprovisionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 system definitions deprovision not found response has a 5xx status code
func (o *V1SystemDefinitionsDeprovisionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 system definitions deprovision not found response a status code equal to that given
func (o *V1SystemDefinitionsDeprovisionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the v1 system definitions deprovision not found response
func (o *V1SystemDefinitionsDeprovisionNotFound) Code() int {
	return 404
}

func (o *V1SystemDefinitionsDeprovisionNotFound) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] v1SystemDefinitionsDeprovisionNotFound  %+v", 404, o.Payload)
}

func (o *V1SystemDefinitionsDeprovisionNotFound) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] v1SystemDefinitionsDeprovisionNotFound  %+v", 404, o.Payload)
}

func (o *V1SystemDefinitionsDeprovisionNotFound) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *V1SystemDefinitionsDeprovisionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SystemDefinitionsDeprovisionTooManyRequests creates a V1SystemDefinitionsDeprovisionTooManyRequests with default headers values
func NewV1SystemDefinitionsDeprovisionTooManyRequests() *V1SystemDefinitionsDeprovisionTooManyRequests {
	return &V1SystemDefinitionsDeprovisionTooManyRequests{}
}

/*
V1SystemDefinitionsDeprovisionTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type V1SystemDefinitionsDeprovisionTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this v1 system definitions deprovision too many requests response has a 2xx status code
func (o *V1SystemDefinitionsDeprovisionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 system definitions deprovision too many requests response has a 3xx status code
func (o *V1SystemDefinitionsDeprovisionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 system definitions deprovision too many requests response has a 4xx status code
func (o *V1SystemDefinitionsDeprovisionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 system definitions deprovision too many requests response has a 5xx status code
func (o *V1SystemDefinitionsDeprovisionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 system definitions deprovision too many requests response a status code equal to that given
func (o *V1SystemDefinitionsDeprovisionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the v1 system definitions deprovision too many requests response
func (o *V1SystemDefinitionsDeprovisionTooManyRequests) Code() int {
	return 429
}

func (o *V1SystemDefinitionsDeprovisionTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] v1SystemDefinitionsDeprovisionTooManyRequests  %+v", 429, o.Payload)
}

func (o *V1SystemDefinitionsDeprovisionTooManyRequests) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] v1SystemDefinitionsDeprovisionTooManyRequests  %+v", 429, o.Payload)
}

func (o *V1SystemDefinitionsDeprovisionTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *V1SystemDefinitionsDeprovisionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SystemDefinitionsDeprovisionInternalServerError creates a V1SystemDefinitionsDeprovisionInternalServerError with default headers values
func NewV1SystemDefinitionsDeprovisionInternalServerError() *V1SystemDefinitionsDeprovisionInternalServerError {
	return &V1SystemDefinitionsDeprovisionInternalServerError{}
}

/*
V1SystemDefinitionsDeprovisionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1SystemDefinitionsDeprovisionInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this v1 system definitions deprovision internal server error response has a 2xx status code
func (o *V1SystemDefinitionsDeprovisionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 system definitions deprovision internal server error response has a 3xx status code
func (o *V1SystemDefinitionsDeprovisionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 system definitions deprovision internal server error response has a 4xx status code
func (o *V1SystemDefinitionsDeprovisionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 system definitions deprovision internal server error response has a 5xx status code
func (o *V1SystemDefinitionsDeprovisionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 system definitions deprovision internal server error response a status code equal to that given
func (o *V1SystemDefinitionsDeprovisionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 system definitions deprovision internal server error response
func (o *V1SystemDefinitionsDeprovisionInternalServerError) Code() int {
	return 500
}

func (o *V1SystemDefinitionsDeprovisionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] v1SystemDefinitionsDeprovisionInternalServerError  %+v", 500, o.Payload)
}

func (o *V1SystemDefinitionsDeprovisionInternalServerError) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] v1SystemDefinitionsDeprovisionInternalServerError  %+v", 500, o.Payload)
}

func (o *V1SystemDefinitionsDeprovisionInternalServerError) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *V1SystemDefinitionsDeprovisionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
