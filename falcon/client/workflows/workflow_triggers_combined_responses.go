// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// WorkflowTriggersCombinedReader is a Reader for the WorkflowTriggersCombined structure.
type WorkflowTriggersCombinedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WorkflowTriggersCombinedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewWorkflowTriggersCombinedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewWorkflowTriggersCombinedBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewWorkflowTriggersCombinedForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewWorkflowTriggersCombinedNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewWorkflowTriggersCombinedTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewWorkflowTriggersCombinedInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /workflows/combined/triggers/v1] WorkflowTriggersCombined", response, response.Code())
	}
}

// NewWorkflowTriggersCombinedOK creates a WorkflowTriggersCombinedOK with default headers values
func NewWorkflowTriggersCombinedOK() *WorkflowTriggersCombinedOK {
	return &WorkflowTriggersCombinedOK{}
}

/*
WorkflowTriggersCombinedOK describes a response with status code 200, with default header values.

OK
*/
type WorkflowTriggersCombinedOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TriggersTriggerExternalResponse
}

// IsSuccess returns true when this workflow triggers combined o k response has a 2xx status code
func (o *WorkflowTriggersCombinedOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this workflow triggers combined o k response has a 3xx status code
func (o *WorkflowTriggersCombinedOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow triggers combined o k response has a 4xx status code
func (o *WorkflowTriggersCombinedOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this workflow triggers combined o k response has a 5xx status code
func (o *WorkflowTriggersCombinedOK) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow triggers combined o k response a status code equal to that given
func (o *WorkflowTriggersCombinedOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the workflow triggers combined o k response
func (o *WorkflowTriggersCombinedOK) Code() int {
	return 200
}

func (o *WorkflowTriggersCombinedOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/triggers/v1][%d] workflowTriggersCombinedOK %s", 200, payload)
}

func (o *WorkflowTriggersCombinedOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/triggers/v1][%d] workflowTriggersCombinedOK %s", 200, payload)
}

func (o *WorkflowTriggersCombinedOK) GetPayload() *models.TriggersTriggerExternalResponse {
	return o.Payload
}

func (o *WorkflowTriggersCombinedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TriggersTriggerExternalResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowTriggersCombinedBadRequest creates a WorkflowTriggersCombinedBadRequest with default headers values
func NewWorkflowTriggersCombinedBadRequest() *WorkflowTriggersCombinedBadRequest {
	return &WorkflowTriggersCombinedBadRequest{}
}

/*
WorkflowTriggersCombinedBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type WorkflowTriggersCombinedBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TriggersTriggerExternalResponse
}

// IsSuccess returns true when this workflow triggers combined bad request response has a 2xx status code
func (o *WorkflowTriggersCombinedBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow triggers combined bad request response has a 3xx status code
func (o *WorkflowTriggersCombinedBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow triggers combined bad request response has a 4xx status code
func (o *WorkflowTriggersCombinedBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow triggers combined bad request response has a 5xx status code
func (o *WorkflowTriggersCombinedBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow triggers combined bad request response a status code equal to that given
func (o *WorkflowTriggersCombinedBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the workflow triggers combined bad request response
func (o *WorkflowTriggersCombinedBadRequest) Code() int {
	return 400
}

func (o *WorkflowTriggersCombinedBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/triggers/v1][%d] workflowTriggersCombinedBadRequest %s", 400, payload)
}

func (o *WorkflowTriggersCombinedBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/triggers/v1][%d] workflowTriggersCombinedBadRequest %s", 400, payload)
}

func (o *WorkflowTriggersCombinedBadRequest) GetPayload() *models.TriggersTriggerExternalResponse {
	return o.Payload
}

func (o *WorkflowTriggersCombinedBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TriggersTriggerExternalResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowTriggersCombinedForbidden creates a WorkflowTriggersCombinedForbidden with default headers values
func NewWorkflowTriggersCombinedForbidden() *WorkflowTriggersCombinedForbidden {
	return &WorkflowTriggersCombinedForbidden{}
}

/*
WorkflowTriggersCombinedForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type WorkflowTriggersCombinedForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this workflow triggers combined forbidden response has a 2xx status code
func (o *WorkflowTriggersCombinedForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow triggers combined forbidden response has a 3xx status code
func (o *WorkflowTriggersCombinedForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow triggers combined forbidden response has a 4xx status code
func (o *WorkflowTriggersCombinedForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow triggers combined forbidden response has a 5xx status code
func (o *WorkflowTriggersCombinedForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow triggers combined forbidden response a status code equal to that given
func (o *WorkflowTriggersCombinedForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the workflow triggers combined forbidden response
func (o *WorkflowTriggersCombinedForbidden) Code() int {
	return 403
}

func (o *WorkflowTriggersCombinedForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/triggers/v1][%d] workflowTriggersCombinedForbidden %s", 403, payload)
}

func (o *WorkflowTriggersCombinedForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/triggers/v1][%d] workflowTriggersCombinedForbidden %s", 403, payload)
}

func (o *WorkflowTriggersCombinedForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *WorkflowTriggersCombinedForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowTriggersCombinedNotFound creates a WorkflowTriggersCombinedNotFound with default headers values
func NewWorkflowTriggersCombinedNotFound() *WorkflowTriggersCombinedNotFound {
	return &WorkflowTriggersCombinedNotFound{}
}

/*
WorkflowTriggersCombinedNotFound describes a response with status code 404, with default header values.

Not Found
*/
type WorkflowTriggersCombinedNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TriggersTriggerExternalResponse
}

// IsSuccess returns true when this workflow triggers combined not found response has a 2xx status code
func (o *WorkflowTriggersCombinedNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow triggers combined not found response has a 3xx status code
func (o *WorkflowTriggersCombinedNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow triggers combined not found response has a 4xx status code
func (o *WorkflowTriggersCombinedNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow triggers combined not found response has a 5xx status code
func (o *WorkflowTriggersCombinedNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow triggers combined not found response a status code equal to that given
func (o *WorkflowTriggersCombinedNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the workflow triggers combined not found response
func (o *WorkflowTriggersCombinedNotFound) Code() int {
	return 404
}

func (o *WorkflowTriggersCombinedNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/triggers/v1][%d] workflowTriggersCombinedNotFound %s", 404, payload)
}

func (o *WorkflowTriggersCombinedNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/triggers/v1][%d] workflowTriggersCombinedNotFound %s", 404, payload)
}

func (o *WorkflowTriggersCombinedNotFound) GetPayload() *models.TriggersTriggerExternalResponse {
	return o.Payload
}

func (o *WorkflowTriggersCombinedNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TriggersTriggerExternalResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowTriggersCombinedTooManyRequests creates a WorkflowTriggersCombinedTooManyRequests with default headers values
func NewWorkflowTriggersCombinedTooManyRequests() *WorkflowTriggersCombinedTooManyRequests {
	return &WorkflowTriggersCombinedTooManyRequests{}
}

/*
WorkflowTriggersCombinedTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type WorkflowTriggersCombinedTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this workflow triggers combined too many requests response has a 2xx status code
func (o *WorkflowTriggersCombinedTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow triggers combined too many requests response has a 3xx status code
func (o *WorkflowTriggersCombinedTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow triggers combined too many requests response has a 4xx status code
func (o *WorkflowTriggersCombinedTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow triggers combined too many requests response has a 5xx status code
func (o *WorkflowTriggersCombinedTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow triggers combined too many requests response a status code equal to that given
func (o *WorkflowTriggersCombinedTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the workflow triggers combined too many requests response
func (o *WorkflowTriggersCombinedTooManyRequests) Code() int {
	return 429
}

func (o *WorkflowTriggersCombinedTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/triggers/v1][%d] workflowTriggersCombinedTooManyRequests %s", 429, payload)
}

func (o *WorkflowTriggersCombinedTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/triggers/v1][%d] workflowTriggersCombinedTooManyRequests %s", 429, payload)
}

func (o *WorkflowTriggersCombinedTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *WorkflowTriggersCombinedTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowTriggersCombinedInternalServerError creates a WorkflowTriggersCombinedInternalServerError with default headers values
func NewWorkflowTriggersCombinedInternalServerError() *WorkflowTriggersCombinedInternalServerError {
	return &WorkflowTriggersCombinedInternalServerError{}
}

/*
WorkflowTriggersCombinedInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type WorkflowTriggersCombinedInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.TriggersTriggerExternalResponse
}

// IsSuccess returns true when this workflow triggers combined internal server error response has a 2xx status code
func (o *WorkflowTriggersCombinedInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow triggers combined internal server error response has a 3xx status code
func (o *WorkflowTriggersCombinedInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow triggers combined internal server error response has a 4xx status code
func (o *WorkflowTriggersCombinedInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this workflow triggers combined internal server error response has a 5xx status code
func (o *WorkflowTriggersCombinedInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this workflow triggers combined internal server error response a status code equal to that given
func (o *WorkflowTriggersCombinedInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the workflow triggers combined internal server error response
func (o *WorkflowTriggersCombinedInternalServerError) Code() int {
	return 500
}

func (o *WorkflowTriggersCombinedInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/triggers/v1][%d] workflowTriggersCombinedInternalServerError %s", 500, payload)
}

func (o *WorkflowTriggersCombinedInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/triggers/v1][%d] workflowTriggersCombinedInternalServerError %s", 500, payload)
}

func (o *WorkflowTriggersCombinedInternalServerError) GetPayload() *models.TriggersTriggerExternalResponse {
	return o.Payload
}

func (o *WorkflowTriggersCombinedInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.TriggersTriggerExternalResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
