// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// NewWorkflowDefinitionsCreateParams creates a new WorkflowDefinitionsCreateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewWorkflowDefinitionsCreateParams() *WorkflowDefinitionsCreateParams {
	return &WorkflowDefinitionsCreateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewWorkflowDefinitionsCreateParamsWithTimeout creates a new WorkflowDefinitionsCreateParams object
// with the ability to set a timeout on a request.
func NewWorkflowDefinitionsCreateParamsWithTimeout(timeout time.Duration) *WorkflowDefinitionsCreateParams {
	return &WorkflowDefinitionsCreateParams{
		timeout: timeout,
	}
}

// NewWorkflowDefinitionsCreateParamsWithContext creates a new WorkflowDefinitionsCreateParams object
// with the ability to set a context for a request.
func NewWorkflowDefinitionsCreateParamsWithContext(ctx context.Context) *WorkflowDefinitionsCreateParams {
	return &WorkflowDefinitionsCreateParams{
		Context: ctx,
	}
}

// NewWorkflowDefinitionsCreateParamsWithHTTPClient creates a new WorkflowDefinitionsCreateParams object
// with the ability to set a custom HTTPClient for a request.
func NewWorkflowDefinitionsCreateParamsWithHTTPClient(client *http.Client) *WorkflowDefinitionsCreateParams {
	return &WorkflowDefinitionsCreateParams{
		HTTPClient: client,
	}
}

/*
WorkflowDefinitionsCreateParams contains all the parameters to send to the API endpoint

	for the workflow definitions create operation.

	Typically these are written to a http.Request.
*/
type WorkflowDefinitionsCreateParams struct {

	// Body.
	Body *models.ModelsDefinitionCreateRequestV2

	/* ValidateOnly.

	   When enabled, prevents saving workflow after validating
	*/
	ValidateOnly *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the workflow definitions create params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *WorkflowDefinitionsCreateParams) WithDefaults() *WorkflowDefinitionsCreateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the workflow definitions create params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *WorkflowDefinitionsCreateParams) SetDefaults() {
	var (
		validateOnlyDefault = bool(false)
	)

	val := WorkflowDefinitionsCreateParams{
		ValidateOnly: &validateOnlyDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the workflow definitions create params
func (o *WorkflowDefinitionsCreateParams) WithTimeout(timeout time.Duration) *WorkflowDefinitionsCreateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the workflow definitions create params
func (o *WorkflowDefinitionsCreateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the workflow definitions create params
func (o *WorkflowDefinitionsCreateParams) WithContext(ctx context.Context) *WorkflowDefinitionsCreateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the workflow definitions create params
func (o *WorkflowDefinitionsCreateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the workflow definitions create params
func (o *WorkflowDefinitionsCreateParams) WithHTTPClient(client *http.Client) *WorkflowDefinitionsCreateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the workflow definitions create params
func (o *WorkflowDefinitionsCreateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the workflow definitions create params
func (o *WorkflowDefinitionsCreateParams) WithBody(body *models.ModelsDefinitionCreateRequestV2) *WorkflowDefinitionsCreateParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the workflow definitions create params
func (o *WorkflowDefinitionsCreateParams) SetBody(body *models.ModelsDefinitionCreateRequestV2) {
	o.Body = body
}

// WithValidateOnly adds the validateOnly to the workflow definitions create params
func (o *WorkflowDefinitionsCreateParams) WithValidateOnly(validateOnly *bool) *WorkflowDefinitionsCreateParams {
	o.SetValidateOnly(validateOnly)
	return o
}

// SetValidateOnly adds the validateOnly to the workflow definitions create params
func (o *WorkflowDefinitionsCreateParams) SetValidateOnly(validateOnly *bool) {
	o.ValidateOnly = validateOnly
}

// WriteToRequest writes these params to a swagger request
func (o *WorkflowDefinitionsCreateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.ValidateOnly != nil {

		// query param validate_only
		var qrValidateOnly bool

		if o.ValidateOnly != nil {
			qrValidateOnly = *o.ValidateOnly
		}
		qValidateOnly := swag.FormatBool(qrValidateOnly)
		if qValidateOnly != "" {

			if err := r.SetQueryParam("validate_only", qValidateOnly); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
