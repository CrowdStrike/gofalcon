// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// V1SystemDefinitionsPromoteReader is a Reader for the V1SystemDefinitionsPromote structure.
type V1SystemDefinitionsPromoteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1SystemDefinitionsPromoteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1SystemDefinitionsPromoteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1SystemDefinitionsPromoteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1SystemDefinitionsPromoteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewV1SystemDefinitionsPromoteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewV1SystemDefinitionsPromoteTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1SystemDefinitionsPromoteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /workflows/system-definitions/promote/v1] v1.system-definitions.promote", response, response.Code())
	}
}

// NewV1SystemDefinitionsPromoteOK creates a V1SystemDefinitionsPromoteOK with default headers values
func NewV1SystemDefinitionsPromoteOK() *V1SystemDefinitionsPromoteOK {
	return &V1SystemDefinitionsPromoteOK{}
}

/*
V1SystemDefinitionsPromoteOK describes a response with status code 200, with default header values.

OK
*/
type V1SystemDefinitionsPromoteOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this v1 system definitions promote o k response has a 2xx status code
func (o *V1SystemDefinitionsPromoteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 system definitions promote o k response has a 3xx status code
func (o *V1SystemDefinitionsPromoteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 system definitions promote o k response has a 4xx status code
func (o *V1SystemDefinitionsPromoteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 system definitions promote o k response has a 5xx status code
func (o *V1SystemDefinitionsPromoteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 system definitions promote o k response a status code equal to that given
func (o *V1SystemDefinitionsPromoteOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 system definitions promote o k response
func (o *V1SystemDefinitionsPromoteOK) Code() int {
	return 200
}

func (o *V1SystemDefinitionsPromoteOK) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] v1SystemDefinitionsPromoteOK  %+v", 200, o.Payload)
}

func (o *V1SystemDefinitionsPromoteOK) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] v1SystemDefinitionsPromoteOK  %+v", 200, o.Payload)
}

func (o *V1SystemDefinitionsPromoteOK) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *V1SystemDefinitionsPromoteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SystemDefinitionsPromoteBadRequest creates a V1SystemDefinitionsPromoteBadRequest with default headers values
func NewV1SystemDefinitionsPromoteBadRequest() *V1SystemDefinitionsPromoteBadRequest {
	return &V1SystemDefinitionsPromoteBadRequest{}
}

/*
V1SystemDefinitionsPromoteBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1SystemDefinitionsPromoteBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this v1 system definitions promote bad request response has a 2xx status code
func (o *V1SystemDefinitionsPromoteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 system definitions promote bad request response has a 3xx status code
func (o *V1SystemDefinitionsPromoteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 system definitions promote bad request response has a 4xx status code
func (o *V1SystemDefinitionsPromoteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 system definitions promote bad request response has a 5xx status code
func (o *V1SystemDefinitionsPromoteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 system definitions promote bad request response a status code equal to that given
func (o *V1SystemDefinitionsPromoteBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 system definitions promote bad request response
func (o *V1SystemDefinitionsPromoteBadRequest) Code() int {
	return 400
}

func (o *V1SystemDefinitionsPromoteBadRequest) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] v1SystemDefinitionsPromoteBadRequest  %+v", 400, o.Payload)
}

func (o *V1SystemDefinitionsPromoteBadRequest) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] v1SystemDefinitionsPromoteBadRequest  %+v", 400, o.Payload)
}

func (o *V1SystemDefinitionsPromoteBadRequest) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *V1SystemDefinitionsPromoteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SystemDefinitionsPromoteForbidden creates a V1SystemDefinitionsPromoteForbidden with default headers values
func NewV1SystemDefinitionsPromoteForbidden() *V1SystemDefinitionsPromoteForbidden {
	return &V1SystemDefinitionsPromoteForbidden{}
}

/*
V1SystemDefinitionsPromoteForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1SystemDefinitionsPromoteForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this v1 system definitions promote forbidden response has a 2xx status code
func (o *V1SystemDefinitionsPromoteForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 system definitions promote forbidden response has a 3xx status code
func (o *V1SystemDefinitionsPromoteForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 system definitions promote forbidden response has a 4xx status code
func (o *V1SystemDefinitionsPromoteForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 system definitions promote forbidden response has a 5xx status code
func (o *V1SystemDefinitionsPromoteForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 system definitions promote forbidden response a status code equal to that given
func (o *V1SystemDefinitionsPromoteForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 system definitions promote forbidden response
func (o *V1SystemDefinitionsPromoteForbidden) Code() int {
	return 403
}

func (o *V1SystemDefinitionsPromoteForbidden) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] v1SystemDefinitionsPromoteForbidden  %+v", 403, o.Payload)
}

func (o *V1SystemDefinitionsPromoteForbidden) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] v1SystemDefinitionsPromoteForbidden  %+v", 403, o.Payload)
}

func (o *V1SystemDefinitionsPromoteForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *V1SystemDefinitionsPromoteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SystemDefinitionsPromoteNotFound creates a V1SystemDefinitionsPromoteNotFound with default headers values
func NewV1SystemDefinitionsPromoteNotFound() *V1SystemDefinitionsPromoteNotFound {
	return &V1SystemDefinitionsPromoteNotFound{}
}

/*
V1SystemDefinitionsPromoteNotFound describes a response with status code 404, with default header values.

Not Found
*/
type V1SystemDefinitionsPromoteNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this v1 system definitions promote not found response has a 2xx status code
func (o *V1SystemDefinitionsPromoteNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 system definitions promote not found response has a 3xx status code
func (o *V1SystemDefinitionsPromoteNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 system definitions promote not found response has a 4xx status code
func (o *V1SystemDefinitionsPromoteNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 system definitions promote not found response has a 5xx status code
func (o *V1SystemDefinitionsPromoteNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 system definitions promote not found response a status code equal to that given
func (o *V1SystemDefinitionsPromoteNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the v1 system definitions promote not found response
func (o *V1SystemDefinitionsPromoteNotFound) Code() int {
	return 404
}

func (o *V1SystemDefinitionsPromoteNotFound) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] v1SystemDefinitionsPromoteNotFound  %+v", 404, o.Payload)
}

func (o *V1SystemDefinitionsPromoteNotFound) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] v1SystemDefinitionsPromoteNotFound  %+v", 404, o.Payload)
}

func (o *V1SystemDefinitionsPromoteNotFound) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *V1SystemDefinitionsPromoteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SystemDefinitionsPromoteTooManyRequests creates a V1SystemDefinitionsPromoteTooManyRequests with default headers values
func NewV1SystemDefinitionsPromoteTooManyRequests() *V1SystemDefinitionsPromoteTooManyRequests {
	return &V1SystemDefinitionsPromoteTooManyRequests{}
}

/*
V1SystemDefinitionsPromoteTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type V1SystemDefinitionsPromoteTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this v1 system definitions promote too many requests response has a 2xx status code
func (o *V1SystemDefinitionsPromoteTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 system definitions promote too many requests response has a 3xx status code
func (o *V1SystemDefinitionsPromoteTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 system definitions promote too many requests response has a 4xx status code
func (o *V1SystemDefinitionsPromoteTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 system definitions promote too many requests response has a 5xx status code
func (o *V1SystemDefinitionsPromoteTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 system definitions promote too many requests response a status code equal to that given
func (o *V1SystemDefinitionsPromoteTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the v1 system definitions promote too many requests response
func (o *V1SystemDefinitionsPromoteTooManyRequests) Code() int {
	return 429
}

func (o *V1SystemDefinitionsPromoteTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] v1SystemDefinitionsPromoteTooManyRequests  %+v", 429, o.Payload)
}

func (o *V1SystemDefinitionsPromoteTooManyRequests) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] v1SystemDefinitionsPromoteTooManyRequests  %+v", 429, o.Payload)
}

func (o *V1SystemDefinitionsPromoteTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *V1SystemDefinitionsPromoteTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SystemDefinitionsPromoteInternalServerError creates a V1SystemDefinitionsPromoteInternalServerError with default headers values
func NewV1SystemDefinitionsPromoteInternalServerError() *V1SystemDefinitionsPromoteInternalServerError {
	return &V1SystemDefinitionsPromoteInternalServerError{}
}

/*
V1SystemDefinitionsPromoteInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1SystemDefinitionsPromoteInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this v1 system definitions promote internal server error response has a 2xx status code
func (o *V1SystemDefinitionsPromoteInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 system definitions promote internal server error response has a 3xx status code
func (o *V1SystemDefinitionsPromoteInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 system definitions promote internal server error response has a 4xx status code
func (o *V1SystemDefinitionsPromoteInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 system definitions promote internal server error response has a 5xx status code
func (o *V1SystemDefinitionsPromoteInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 system definitions promote internal server error response a status code equal to that given
func (o *V1SystemDefinitionsPromoteInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 system definitions promote internal server error response
func (o *V1SystemDefinitionsPromoteInternalServerError) Code() int {
	return 500
}

func (o *V1SystemDefinitionsPromoteInternalServerError) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] v1SystemDefinitionsPromoteInternalServerError  %+v", 500, o.Payload)
}

func (o *V1SystemDefinitionsPromoteInternalServerError) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] v1SystemDefinitionsPromoteInternalServerError  %+v", 500, o.Payload)
}

func (o *V1SystemDefinitionsPromoteInternalServerError) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *V1SystemDefinitionsPromoteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
