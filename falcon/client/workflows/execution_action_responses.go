// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExecutionActionReader is a Reader for the ExecutionAction structure.
type ExecutionActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecutionActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecutionActionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExecutionActionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExecutionActionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExecutionActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExecutionActionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExecutionActionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /workflows/entities/execution-actions/v1] ExecutionAction", response, response.Code())
	}
}

// NewExecutionActionOK creates a ExecutionActionOK with default headers values
func NewExecutionActionOK() *ExecutionActionOK {
	return &ExecutionActionOK{}
}

/*
ExecutionActionOK describes a response with status code 200, with default header values.

OK
*/
type ExecutionActionOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DefinitionsDefinitionEntitiesResponse
}

// IsSuccess returns true when this execution action o k response has a 2xx status code
func (o *ExecutionActionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this execution action o k response has a 3xx status code
func (o *ExecutionActionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execution action o k response has a 4xx status code
func (o *ExecutionActionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this execution action o k response has a 5xx status code
func (o *ExecutionActionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this execution action o k response a status code equal to that given
func (o *ExecutionActionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the execution action o k response
func (o *ExecutionActionOK) Code() int {
	return 200
}

func (o *ExecutionActionOK) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionActionOK  %+v", 200, o.Payload)
}

func (o *ExecutionActionOK) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionActionOK  %+v", 200, o.Payload)
}

func (o *ExecutionActionOK) GetPayload() *models.DefinitionsDefinitionEntitiesResponse {
	return o.Payload
}

func (o *ExecutionActionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DefinitionsDefinitionEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutionActionBadRequest creates a ExecutionActionBadRequest with default headers values
func NewExecutionActionBadRequest() *ExecutionActionBadRequest {
	return &ExecutionActionBadRequest{}
}

/*
ExecutionActionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExecutionActionBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DefinitionsDefinitionEntitiesResponse
}

// IsSuccess returns true when this execution action bad request response has a 2xx status code
func (o *ExecutionActionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execution action bad request response has a 3xx status code
func (o *ExecutionActionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execution action bad request response has a 4xx status code
func (o *ExecutionActionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this execution action bad request response has a 5xx status code
func (o *ExecutionActionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this execution action bad request response a status code equal to that given
func (o *ExecutionActionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the execution action bad request response
func (o *ExecutionActionBadRequest) Code() int {
	return 400
}

func (o *ExecutionActionBadRequest) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionActionBadRequest  %+v", 400, o.Payload)
}

func (o *ExecutionActionBadRequest) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionActionBadRequest  %+v", 400, o.Payload)
}

func (o *ExecutionActionBadRequest) GetPayload() *models.DefinitionsDefinitionEntitiesResponse {
	return o.Payload
}

func (o *ExecutionActionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DefinitionsDefinitionEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutionActionForbidden creates a ExecutionActionForbidden with default headers values
func NewExecutionActionForbidden() *ExecutionActionForbidden {
	return &ExecutionActionForbidden{}
}

/*
ExecutionActionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExecutionActionForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execution action forbidden response has a 2xx status code
func (o *ExecutionActionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execution action forbidden response has a 3xx status code
func (o *ExecutionActionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execution action forbidden response has a 4xx status code
func (o *ExecutionActionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this execution action forbidden response has a 5xx status code
func (o *ExecutionActionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this execution action forbidden response a status code equal to that given
func (o *ExecutionActionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the execution action forbidden response
func (o *ExecutionActionForbidden) Code() int {
	return 403
}

func (o *ExecutionActionForbidden) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionActionForbidden  %+v", 403, o.Payload)
}

func (o *ExecutionActionForbidden) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionActionForbidden  %+v", 403, o.Payload)
}

func (o *ExecutionActionForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecutionActionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutionActionNotFound creates a ExecutionActionNotFound with default headers values
func NewExecutionActionNotFound() *ExecutionActionNotFound {
	return &ExecutionActionNotFound{}
}

/*
ExecutionActionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ExecutionActionNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DefinitionsDefinitionEntitiesResponse
}

// IsSuccess returns true when this execution action not found response has a 2xx status code
func (o *ExecutionActionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execution action not found response has a 3xx status code
func (o *ExecutionActionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execution action not found response has a 4xx status code
func (o *ExecutionActionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this execution action not found response has a 5xx status code
func (o *ExecutionActionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this execution action not found response a status code equal to that given
func (o *ExecutionActionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the execution action not found response
func (o *ExecutionActionNotFound) Code() int {
	return 404
}

func (o *ExecutionActionNotFound) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionActionNotFound  %+v", 404, o.Payload)
}

func (o *ExecutionActionNotFound) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionActionNotFound  %+v", 404, o.Payload)
}

func (o *ExecutionActionNotFound) GetPayload() *models.DefinitionsDefinitionEntitiesResponse {
	return o.Payload
}

func (o *ExecutionActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DefinitionsDefinitionEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutionActionTooManyRequests creates a ExecutionActionTooManyRequests with default headers values
func NewExecutionActionTooManyRequests() *ExecutionActionTooManyRequests {
	return &ExecutionActionTooManyRequests{}
}

/*
ExecutionActionTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExecutionActionTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execution action too many requests response has a 2xx status code
func (o *ExecutionActionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execution action too many requests response has a 3xx status code
func (o *ExecutionActionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execution action too many requests response has a 4xx status code
func (o *ExecutionActionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this execution action too many requests response has a 5xx status code
func (o *ExecutionActionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this execution action too many requests response a status code equal to that given
func (o *ExecutionActionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the execution action too many requests response
func (o *ExecutionActionTooManyRequests) Code() int {
	return 429
}

func (o *ExecutionActionTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionActionTooManyRequests  %+v", 429, o.Payload)
}

func (o *ExecutionActionTooManyRequests) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionActionTooManyRequests  %+v", 429, o.Payload)
}

func (o *ExecutionActionTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecutionActionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutionActionInternalServerError creates a ExecutionActionInternalServerError with default headers values
func NewExecutionActionInternalServerError() *ExecutionActionInternalServerError {
	return &ExecutionActionInternalServerError{}
}

/*
ExecutionActionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ExecutionActionInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DefinitionsDefinitionEntitiesResponse
}

// IsSuccess returns true when this execution action internal server error response has a 2xx status code
func (o *ExecutionActionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execution action internal server error response has a 3xx status code
func (o *ExecutionActionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execution action internal server error response has a 4xx status code
func (o *ExecutionActionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this execution action internal server error response has a 5xx status code
func (o *ExecutionActionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this execution action internal server error response a status code equal to that given
func (o *ExecutionActionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the execution action internal server error response
func (o *ExecutionActionInternalServerError) Code() int {
	return 500
}

func (o *ExecutionActionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionActionInternalServerError  %+v", 500, o.Payload)
}

func (o *ExecutionActionInternalServerError) String() string {
	return fmt.Sprintf("[POST /workflows/entities/execution-actions/v1][%d] executionActionInternalServerError  %+v", 500, o.Payload)
}

func (o *ExecutionActionInternalServerError) GetPayload() *models.DefinitionsDefinitionEntitiesResponse {
	return o.Payload
}

func (o *ExecutionActionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DefinitionsDefinitionEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
