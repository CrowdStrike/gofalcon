// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// NewExecuteParams creates a new ExecuteParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewExecuteParams() *ExecuteParams {
	return &ExecuteParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewExecuteParamsWithTimeout creates a new ExecuteParams object
// with the ability to set a timeout on a request.
func NewExecuteParamsWithTimeout(timeout time.Duration) *ExecuteParams {
	return &ExecuteParams{
		timeout: timeout,
	}
}

// NewExecuteParamsWithContext creates a new ExecuteParams object
// with the ability to set a context for a request.
func NewExecuteParamsWithContext(ctx context.Context) *ExecuteParams {
	return &ExecuteParams{
		Context: ctx,
	}
}

// NewExecuteParamsWithHTTPClient creates a new ExecuteParams object
// with the ability to set a custom HTTPClient for a request.
func NewExecuteParamsWithHTTPClient(client *http.Client) *ExecuteParams {
	return &ExecuteParams{
		HTTPClient: client,
	}
}

/*
ExecuteParams contains all the parameters to send to the API endpoint

	for the execute operation.

	Typically these are written to a http.Request.
*/
type ExecuteParams struct {

	// Body.
	Body models.MapStringInterface

	/* DefinitionID.

	   Definition ID to execute, either a name or an ID can be specified.
	*/
	DefinitionID []string

	/* Depth.

	   Used to record the execution depth to help limit execution loops when a workflow triggers another. The maximum depth is 4.
	*/
	Depth *int64

	/* Key.

	   Key used to help deduplicate executions, if unset a new UUID is used
	*/
	Key *string

	/* Name.

	   Workflow name to execute, either a name or an ID can be specified.
	*/
	Name *string

	/* SourceEventURL.

	   Used to record a URL to the source that led to triggering this workflow
	*/
	SourceEventURL *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the execute params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ExecuteParams) WithDefaults() *ExecuteParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the execute params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ExecuteParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the execute params
func (o *ExecuteParams) WithTimeout(timeout time.Duration) *ExecuteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the execute params
func (o *ExecuteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the execute params
func (o *ExecuteParams) WithContext(ctx context.Context) *ExecuteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the execute params
func (o *ExecuteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the execute params
func (o *ExecuteParams) WithHTTPClient(client *http.Client) *ExecuteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the execute params
func (o *ExecuteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the execute params
func (o *ExecuteParams) WithBody(body models.MapStringInterface) *ExecuteParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the execute params
func (o *ExecuteParams) SetBody(body models.MapStringInterface) {
	o.Body = body
}

// WithDefinitionID adds the definitionID to the execute params
func (o *ExecuteParams) WithDefinitionID(definitionID []string) *ExecuteParams {
	o.SetDefinitionID(definitionID)
	return o
}

// SetDefinitionID adds the definitionId to the execute params
func (o *ExecuteParams) SetDefinitionID(definitionID []string) {
	o.DefinitionID = definitionID
}

// WithDepth adds the depth to the execute params
func (o *ExecuteParams) WithDepth(depth *int64) *ExecuteParams {
	o.SetDepth(depth)
	return o
}

// SetDepth adds the depth to the execute params
func (o *ExecuteParams) SetDepth(depth *int64) {
	o.Depth = depth
}

// WithKey adds the key to the execute params
func (o *ExecuteParams) WithKey(key *string) *ExecuteParams {
	o.SetKey(key)
	return o
}

// SetKey adds the key to the execute params
func (o *ExecuteParams) SetKey(key *string) {
	o.Key = key
}

// WithName adds the name to the execute params
func (o *ExecuteParams) WithName(name *string) *ExecuteParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the execute params
func (o *ExecuteParams) SetName(name *string) {
	o.Name = name
}

// WithSourceEventURL adds the sourceEventURL to the execute params
func (o *ExecuteParams) WithSourceEventURL(sourceEventURL *string) *ExecuteParams {
	o.SetSourceEventURL(sourceEventURL)
	return o
}

// SetSourceEventURL adds the sourceEventUrl to the execute params
func (o *ExecuteParams) SetSourceEventURL(sourceEventURL *string) {
	o.SourceEventURL = sourceEventURL
}

// WriteToRequest writes these params to a swagger request
func (o *ExecuteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.DefinitionID != nil {

		// binding items for definition_id
		joinedDefinitionID := o.bindParamDefinitionID(reg)

		// query array param definition_id
		if err := r.SetQueryParam("definition_id", joinedDefinitionID...); err != nil {
			return err
		}
	}

	if o.Depth != nil {

		// query param depth
		var qrDepth int64

		if o.Depth != nil {
			qrDepth = *o.Depth
		}
		qDepth := swag.FormatInt64(qrDepth)
		if qDepth != "" {

			if err := r.SetQueryParam("depth", qDepth); err != nil {
				return err
			}
		}
	}

	if o.Key != nil {

		// query param key
		var qrKey string

		if o.Key != nil {
			qrKey = *o.Key
		}
		qKey := qrKey
		if qKey != "" {

			if err := r.SetQueryParam("key", qKey); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.SourceEventURL != nil {

		// query param source_event_url
		var qrSourceEventURL string

		if o.SourceEventURL != nil {
			qrSourceEventURL = *o.SourceEventURL
		}
		qSourceEventURL := qrSourceEventURL
		if qSourceEventURL != "" {

			if err := r.SetQueryParam("source_event_url", qSourceEventURL); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamExecute binds the parameter definition_id
func (o *ExecuteParams) bindParamDefinitionID(formats strfmt.Registry) []string {
	definitionIDIR := o.DefinitionID

	var definitionIDIC []string
	for _, definitionIDIIR := range definitionIDIR { // explode []string

		definitionIDIIV := definitionIDIIR // string as string
		definitionIDIC = append(definitionIDIC, definitionIDIIV)
	}

	// items.CollectionFormat: "csv"
	definitionIDIS := swag.JoinByFormat(definitionIDIC, "csv")

	return definitionIDIS
}
