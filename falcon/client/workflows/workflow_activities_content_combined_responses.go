// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// WorkflowActivitiesContentCombinedReader is a Reader for the WorkflowActivitiesContentCombined structure.
type WorkflowActivitiesContentCombinedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WorkflowActivitiesContentCombinedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewWorkflowActivitiesContentCombinedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewWorkflowActivitiesContentCombinedBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewWorkflowActivitiesContentCombinedForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewWorkflowActivitiesContentCombinedNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewWorkflowActivitiesContentCombinedTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewWorkflowActivitiesContentCombinedInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /workflows/combined/activity-content/v1] WorkflowActivitiesContentCombined", response, response.Code())
	}
}

// NewWorkflowActivitiesContentCombinedOK creates a WorkflowActivitiesContentCombinedOK with default headers values
func NewWorkflowActivitiesContentCombinedOK() *WorkflowActivitiesContentCombinedOK {
	return &WorkflowActivitiesContentCombinedOK{}
}

/*
WorkflowActivitiesContentCombinedOK describes a response with status code 200, with default header values.

OK
*/
type WorkflowActivitiesContentCombinedOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ActivitiesActivityExternalResponse
}

// IsSuccess returns true when this workflow activities content combined o k response has a 2xx status code
func (o *WorkflowActivitiesContentCombinedOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this workflow activities content combined o k response has a 3xx status code
func (o *WorkflowActivitiesContentCombinedOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow activities content combined o k response has a 4xx status code
func (o *WorkflowActivitiesContentCombinedOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this workflow activities content combined o k response has a 5xx status code
func (o *WorkflowActivitiesContentCombinedOK) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow activities content combined o k response a status code equal to that given
func (o *WorkflowActivitiesContentCombinedOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the workflow activities content combined o k response
func (o *WorkflowActivitiesContentCombinedOK) Code() int {
	return 200
}

func (o *WorkflowActivitiesContentCombinedOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/activity-content/v1][%d] workflowActivitiesContentCombinedOK %s", 200, payload)
}

func (o *WorkflowActivitiesContentCombinedOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/activity-content/v1][%d] workflowActivitiesContentCombinedOK %s", 200, payload)
}

func (o *WorkflowActivitiesContentCombinedOK) GetPayload() *models.ActivitiesActivityExternalResponse {
	return o.Payload
}

func (o *WorkflowActivitiesContentCombinedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ActivitiesActivityExternalResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowActivitiesContentCombinedBadRequest creates a WorkflowActivitiesContentCombinedBadRequest with default headers values
func NewWorkflowActivitiesContentCombinedBadRequest() *WorkflowActivitiesContentCombinedBadRequest {
	return &WorkflowActivitiesContentCombinedBadRequest{}
}

/*
WorkflowActivitiesContentCombinedBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type WorkflowActivitiesContentCombinedBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ActivitiesActivityExternalResponse
}

// IsSuccess returns true when this workflow activities content combined bad request response has a 2xx status code
func (o *WorkflowActivitiesContentCombinedBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow activities content combined bad request response has a 3xx status code
func (o *WorkflowActivitiesContentCombinedBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow activities content combined bad request response has a 4xx status code
func (o *WorkflowActivitiesContentCombinedBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow activities content combined bad request response has a 5xx status code
func (o *WorkflowActivitiesContentCombinedBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow activities content combined bad request response a status code equal to that given
func (o *WorkflowActivitiesContentCombinedBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the workflow activities content combined bad request response
func (o *WorkflowActivitiesContentCombinedBadRequest) Code() int {
	return 400
}

func (o *WorkflowActivitiesContentCombinedBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/activity-content/v1][%d] workflowActivitiesContentCombinedBadRequest %s", 400, payload)
}

func (o *WorkflowActivitiesContentCombinedBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/activity-content/v1][%d] workflowActivitiesContentCombinedBadRequest %s", 400, payload)
}

func (o *WorkflowActivitiesContentCombinedBadRequest) GetPayload() *models.ActivitiesActivityExternalResponse {
	return o.Payload
}

func (o *WorkflowActivitiesContentCombinedBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ActivitiesActivityExternalResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowActivitiesContentCombinedForbidden creates a WorkflowActivitiesContentCombinedForbidden with default headers values
func NewWorkflowActivitiesContentCombinedForbidden() *WorkflowActivitiesContentCombinedForbidden {
	return &WorkflowActivitiesContentCombinedForbidden{}
}

/*
WorkflowActivitiesContentCombinedForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type WorkflowActivitiesContentCombinedForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this workflow activities content combined forbidden response has a 2xx status code
func (o *WorkflowActivitiesContentCombinedForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow activities content combined forbidden response has a 3xx status code
func (o *WorkflowActivitiesContentCombinedForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow activities content combined forbidden response has a 4xx status code
func (o *WorkflowActivitiesContentCombinedForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow activities content combined forbidden response has a 5xx status code
func (o *WorkflowActivitiesContentCombinedForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow activities content combined forbidden response a status code equal to that given
func (o *WorkflowActivitiesContentCombinedForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the workflow activities content combined forbidden response
func (o *WorkflowActivitiesContentCombinedForbidden) Code() int {
	return 403
}

func (o *WorkflowActivitiesContentCombinedForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/activity-content/v1][%d] workflowActivitiesContentCombinedForbidden %s", 403, payload)
}

func (o *WorkflowActivitiesContentCombinedForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/activity-content/v1][%d] workflowActivitiesContentCombinedForbidden %s", 403, payload)
}

func (o *WorkflowActivitiesContentCombinedForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *WorkflowActivitiesContentCombinedForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowActivitiesContentCombinedNotFound creates a WorkflowActivitiesContentCombinedNotFound with default headers values
func NewWorkflowActivitiesContentCombinedNotFound() *WorkflowActivitiesContentCombinedNotFound {
	return &WorkflowActivitiesContentCombinedNotFound{}
}

/*
WorkflowActivitiesContentCombinedNotFound describes a response with status code 404, with default header values.

Not Found
*/
type WorkflowActivitiesContentCombinedNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ActivitiesActivityExternalResponse
}

// IsSuccess returns true when this workflow activities content combined not found response has a 2xx status code
func (o *WorkflowActivitiesContentCombinedNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow activities content combined not found response has a 3xx status code
func (o *WorkflowActivitiesContentCombinedNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow activities content combined not found response has a 4xx status code
func (o *WorkflowActivitiesContentCombinedNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow activities content combined not found response has a 5xx status code
func (o *WorkflowActivitiesContentCombinedNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow activities content combined not found response a status code equal to that given
func (o *WorkflowActivitiesContentCombinedNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the workflow activities content combined not found response
func (o *WorkflowActivitiesContentCombinedNotFound) Code() int {
	return 404
}

func (o *WorkflowActivitiesContentCombinedNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/activity-content/v1][%d] workflowActivitiesContentCombinedNotFound %s", 404, payload)
}

func (o *WorkflowActivitiesContentCombinedNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/activity-content/v1][%d] workflowActivitiesContentCombinedNotFound %s", 404, payload)
}

func (o *WorkflowActivitiesContentCombinedNotFound) GetPayload() *models.ActivitiesActivityExternalResponse {
	return o.Payload
}

func (o *WorkflowActivitiesContentCombinedNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ActivitiesActivityExternalResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowActivitiesContentCombinedTooManyRequests creates a WorkflowActivitiesContentCombinedTooManyRequests with default headers values
func NewWorkflowActivitiesContentCombinedTooManyRequests() *WorkflowActivitiesContentCombinedTooManyRequests {
	return &WorkflowActivitiesContentCombinedTooManyRequests{}
}

/*
WorkflowActivitiesContentCombinedTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type WorkflowActivitiesContentCombinedTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this workflow activities content combined too many requests response has a 2xx status code
func (o *WorkflowActivitiesContentCombinedTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow activities content combined too many requests response has a 3xx status code
func (o *WorkflowActivitiesContentCombinedTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow activities content combined too many requests response has a 4xx status code
func (o *WorkflowActivitiesContentCombinedTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow activities content combined too many requests response has a 5xx status code
func (o *WorkflowActivitiesContentCombinedTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow activities content combined too many requests response a status code equal to that given
func (o *WorkflowActivitiesContentCombinedTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the workflow activities content combined too many requests response
func (o *WorkflowActivitiesContentCombinedTooManyRequests) Code() int {
	return 429
}

func (o *WorkflowActivitiesContentCombinedTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/activity-content/v1][%d] workflowActivitiesContentCombinedTooManyRequests %s", 429, payload)
}

func (o *WorkflowActivitiesContentCombinedTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/activity-content/v1][%d] workflowActivitiesContentCombinedTooManyRequests %s", 429, payload)
}

func (o *WorkflowActivitiesContentCombinedTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *WorkflowActivitiesContentCombinedTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowActivitiesContentCombinedInternalServerError creates a WorkflowActivitiesContentCombinedInternalServerError with default headers values
func NewWorkflowActivitiesContentCombinedInternalServerError() *WorkflowActivitiesContentCombinedInternalServerError {
	return &WorkflowActivitiesContentCombinedInternalServerError{}
}

/*
WorkflowActivitiesContentCombinedInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type WorkflowActivitiesContentCombinedInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ActivitiesActivityExternalResponse
}

// IsSuccess returns true when this workflow activities content combined internal server error response has a 2xx status code
func (o *WorkflowActivitiesContentCombinedInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow activities content combined internal server error response has a 3xx status code
func (o *WorkflowActivitiesContentCombinedInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow activities content combined internal server error response has a 4xx status code
func (o *WorkflowActivitiesContentCombinedInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this workflow activities content combined internal server error response has a 5xx status code
func (o *WorkflowActivitiesContentCombinedInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this workflow activities content combined internal server error response a status code equal to that given
func (o *WorkflowActivitiesContentCombinedInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the workflow activities content combined internal server error response
func (o *WorkflowActivitiesContentCombinedInternalServerError) Code() int {
	return 500
}

func (o *WorkflowActivitiesContentCombinedInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/activity-content/v1][%d] workflowActivitiesContentCombinedInternalServerError %s", 500, payload)
}

func (o *WorkflowActivitiesContentCombinedInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workflows/combined/activity-content/v1][%d] workflowActivitiesContentCombinedInternalServerError %s", 500, payload)
}

func (o *WorkflowActivitiesContentCombinedInternalServerError) GetPayload() *models.ActivitiesActivityExternalResponse {
	return o.Payload
}

func (o *WorkflowActivitiesContentCombinedInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ActivitiesActivityExternalResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
