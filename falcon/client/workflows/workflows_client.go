// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new workflows API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workflows API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	V1Execute(params *V1ExecuteParams, opts ...ClientOption) (*V1ExecuteOK, error)

	V1ExecutionResultsV1(params *V1ExecutionResultsV1Params, opts ...ClientOption) (*V1ExecutionResultsV1OK, error)

	V1ExecutionsAction(params *V1ExecutionsActionParams, opts ...ClientOption) (*V1ExecutionsActionOK, error)

	V1SystemDefinitionsDeprovision(params *V1SystemDefinitionsDeprovisionParams, opts ...ClientOption) (*V1SystemDefinitionsDeprovisionOK, error)

	V1SystemDefinitionsPromote(params *V1SystemDefinitionsPromoteParams, opts ...ClientOption) (*V1SystemDefinitionsPromoteOK, error)

	V1SystemDefinitionsProvision(params *V1SystemDefinitionsProvisionParams, opts ...ClientOption) (*V1SystemDefinitionsProvisionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
V1Execute executes an on demand workflow the body is JSON used to trigger the execution the response the execution ID s
*/
func (a *Client) V1Execute(params *V1ExecuteParams, opts ...ClientOption) (*V1ExecuteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ExecuteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1.execute",
		Method:             "POST",
		PathPattern:        "/workflows/entities/execute/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1ExecuteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ExecuteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1.execute: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ExecutionResultsV1 gets execution result of a given execution
*/
func (a *Client) V1ExecutionResultsV1(params *V1ExecutionResultsV1Params, opts ...ClientOption) (*V1ExecutionResultsV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ExecutionResultsV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1.execution-results.v1",
		Method:             "GET",
		PathPattern:        "/workflows/entities/execution-results/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1ExecutionResultsV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ExecutionResultsV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1.execution-results.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1ExecutionsAction allows a user to resume retry a failed workflow execution
*/
func (a *Client) V1ExecutionsAction(params *V1ExecutionsActionParams, opts ...ClientOption) (*V1ExecutionsActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1ExecutionsActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1.executions.action",
		Method:             "POST",
		PathPattern:        "/workflows/entities/execution-actions/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1ExecutionsActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1ExecutionsActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1.executions.action: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SystemDefinitionsDeprovision deprovisions a system definition that was previously provisioned on the target c ID
*/
func (a *Client) V1SystemDefinitionsDeprovision(params *V1SystemDefinitionsDeprovisionParams, opts ...ClientOption) (*V1SystemDefinitionsDeprovisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SystemDefinitionsDeprovisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1.system-definitions.deprovision",
		Method:             "POST",
		PathPattern:        "/workflows/system-definitions/deprovision/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1SystemDefinitionsDeprovisionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SystemDefinitionsDeprovisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1.system-definitions.deprovision: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SystemDefinitionsPromote promotes a version of a system definition on a customer the customer must already have been provisioned this allows the callerto apply an updated template version to a specific cid and expects all parameters to be supplied if the template supports multi instancethe customer scope definition ID must be supplied to determine which customer workflow should be updated
*/
func (a *Client) V1SystemDefinitionsPromote(params *V1SystemDefinitionsPromoteParams, opts ...ClientOption) (*V1SystemDefinitionsPromoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SystemDefinitionsPromoteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1.system-definitions.promote",
		Method:             "POST",
		PathPattern:        "/workflows/system-definitions/promote/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1SystemDefinitionsPromoteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SystemDefinitionsPromoteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1.system-definitions.promote: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
V1SystemDefinitionsProvision provisions a system definition onto the target c ID by using the template and provided parameters
*/
func (a *Client) V1SystemDefinitionsProvision(params *V1SystemDefinitionsProvisionParams, opts ...ClientOption) (*V1SystemDefinitionsProvisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1SystemDefinitionsProvisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1.system-definitions.provision",
		Method:             "POST",
		PathPattern:        "/workflows/system-definitions/provision/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1SystemDefinitionsProvisionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1SystemDefinitionsProvisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1.system-definitions.provision: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
