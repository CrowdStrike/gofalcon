// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new workflows API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workflows API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Deprovision(params *DeprovisionParams, opts ...ClientOption) (*DeprovisionOK, error)

	Execute(params *ExecuteParams, opts ...ClientOption) (*ExecuteOK, error)

	ExecutionAction(params *ExecutionActionParams, opts ...ClientOption) (*ExecutionActionOK, error)

	ExecutionResults(params *ExecutionResultsParams, opts ...ClientOption) (*ExecutionResultsOK, error)

	Promote(params *PromoteParams, opts ...ClientOption) (*PromoteOK, error)

	Provision(params *ProvisionParams, opts ...ClientOption) (*ProvisionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
Deprovision deprovisions a system definition that was previously provisioned on the target c ID
*/
func (a *Client) Deprovision(params *DeprovisionParams, opts ...ClientOption) (*DeprovisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeprovisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Deprovision",
		Method:             "POST",
		PathPattern:        "/workflows/system-definitions/deprovision/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeprovisionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeprovisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Deprovision: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Execute executes an on demand workflow the body is JSON used to trigger the execution the response the execution ID s
*/
func (a *Client) Execute(params *ExecuteParams, opts ...ClientOption) (*ExecuteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Execute",
		Method:             "POST",
		PathPattern:        "/workflows/entities/execute/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Execute: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecutionAction allows a user to resume retry a failed workflow execution
*/
func (a *Client) ExecutionAction(params *ExecutionActionParams, opts ...ClientOption) (*ExecutionActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecutionActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecutionAction",
		Method:             "POST",
		PathPattern:        "/workflows/entities/execution-actions/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecutionActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecutionActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecutionAction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecutionResults gets execution result of a given execution
*/
func (a *Client) ExecutionResults(params *ExecutionResultsParams, opts ...ClientOption) (*ExecutionResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecutionResultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecutionResults",
		Method:             "GET",
		PathPattern:        "/workflows/entities/execution-results/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecutionResultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecutionResultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecutionResults: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Promote promotes a version of a system definition for a customer the customer must already have been provisioned this allows the caller to apply an updated template version to a specific cid and expects all parameters to be supplied if the template supports multi instance the customer scope definition ID must be supplied to determine which customer workflow should be updated
*/
func (a *Client) Promote(params *PromoteParams, opts ...ClientOption) (*PromoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPromoteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Promote",
		Method:             "POST",
		PathPattern:        "/workflows/system-definitions/promote/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PromoteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PromoteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Promote: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Provision provisions a system definition onto the target c ID by using the template and provided parameters
*/
func (a *Client) Provision(params *ProvisionParams, opts ...ClientOption) (*ProvisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Provision",
		Method:             "POST",
		PathPattern:        "/workflows/system-definitions/provision/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProvisionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Provision: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
