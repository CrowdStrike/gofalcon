// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new workflows API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new workflows API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new workflows API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for workflows API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationYaml sets the Content-Type header to "application/yaml".
func WithContentTypeApplicationYaml(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/yaml"}
}

// WithContentTypeMultipartFormData sets the Content-Type header to "multipart/form-data".
func WithContentTypeMultipartFormData(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"multipart/form-data"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationYaml sets the Accept header to "application/yaml".
func WithAcceptApplicationYaml(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/yaml"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	Deprovision(params *DeprovisionParams, opts ...ClientOption) (*DeprovisionOK, error)

	Execute(params *ExecuteParams, opts ...ClientOption) (*ExecuteOK, error)

	ExecutionAction(params *ExecutionActionParams, opts ...ClientOption) (*ExecutionActionOK, *ExecutionActionAccepted, error)

	ExecutionResults(params *ExecutionResultsParams, opts ...ClientOption) (*ExecutionResultsOK, error)

	Promote(params *PromoteParams, opts ...ClientOption) (*PromoteOK, error)

	Provision(params *ProvisionParams, opts ...ClientOption) (*ProvisionOK, error)

	WorkflowActivitiesCombined(params *WorkflowActivitiesCombinedParams, opts ...ClientOption) (*WorkflowActivitiesCombinedOK, error)

	WorkflowActivitiesContentCombined(params *WorkflowActivitiesContentCombinedParams, opts ...ClientOption) (*WorkflowActivitiesContentCombinedOK, error)

	WorkflowDefinitionsAction(params *WorkflowDefinitionsActionParams, opts ...ClientOption) (*WorkflowDefinitionsActionOK, *WorkflowDefinitionsActionAccepted, error)

	WorkflowDefinitionsCombined(params *WorkflowDefinitionsCombinedParams, opts ...ClientOption) (*WorkflowDefinitionsCombinedOK, error)

	WorkflowDefinitionsExport(params *WorkflowDefinitionsExportParams, opts ...ClientOption) (*WorkflowDefinitionsExportOK, *WorkflowDefinitionsExportStatus299, error)

	WorkflowDefinitionsImport(params *WorkflowDefinitionsImportParams, opts ...ClientOption) (*WorkflowDefinitionsImportOK, error)

	WorkflowDefinitionsUpdate(params *WorkflowDefinitionsUpdateParams, opts ...ClientOption) (*WorkflowDefinitionsUpdateOK, error)

	WorkflowExecuteInternal(params *WorkflowExecuteInternalParams, opts ...ClientOption) (*WorkflowExecuteInternalOK, error)

	WorkflowExecutionsCombined(params *WorkflowExecutionsCombinedParams, opts ...ClientOption) (*WorkflowExecutionsCombinedOK, error)

	WorkflowGetHumanInputV1(params *WorkflowGetHumanInputV1Params, opts ...ClientOption) (*WorkflowGetHumanInputV1OK, error)

	WorkflowMockExecute(params *WorkflowMockExecuteParams, opts ...ClientOption) (*WorkflowMockExecuteOK, error)

	WorkflowTriggersCombined(params *WorkflowTriggersCombinedParams, opts ...ClientOption) (*WorkflowTriggersCombinedOK, error)

	WorkflowUpdateHumanInputV1(params *WorkflowUpdateHumanInputV1Params, opts ...ClientOption) (*WorkflowUpdateHumanInputV1OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
Deprovision deprovisions a system definition that was previously provisioned on the target c ID
*/
func (a *Client) Deprovision(params *DeprovisionParams, opts ...ClientOption) (*DeprovisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeprovisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Deprovision",
		Method:             "POST",
		PathPattern:        "/workflows/system-definitions/deprovision/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeprovisionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeprovisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Deprovision: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Execute executes an on demand workflow the body is JSON used to trigger the execution the response the execution ID s
*/
func (a *Client) Execute(params *ExecuteParams, opts ...ClientOption) (*ExecuteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Execute",
		Method:             "POST",
		PathPattern:        "/workflows/entities/execute/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Execute: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecutionAction allows a user to resume retry a failed workflow execution or cancel stop a currently running workflow execution
*/
func (a *Client) ExecutionAction(params *ExecutionActionParams, opts ...ClientOption) (*ExecutionActionOK, *ExecutionActionAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecutionActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecutionAction",
		Method:             "POST",
		PathPattern:        "/workflows/entities/execution-actions/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecutionActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ExecutionActionOK:
		return value, nil, nil
	case *ExecutionActionAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for workflows: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecutionResults gets execution result of a given execution
*/
func (a *Client) ExecutionResults(params *ExecutionResultsParams, opts ...ClientOption) (*ExecutionResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecutionResultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecutionResults",
		Method:             "GET",
		PathPattern:        "/workflows/entities/execution-results/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecutionResultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecutionResultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecutionResults: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Promote promotes a version of a system definition for a customer the customer must already have been provisioned this allows the caller to apply an updated template version to a specific cid and expects all parameters to be supplied if the template supports multi instance the customer scope definition ID must be supplied to determine which customer workflow should be updated
*/
func (a *Client) Promote(params *PromoteParams, opts ...ClientOption) (*PromoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPromoteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Promote",
		Method:             "POST",
		PathPattern:        "/workflows/system-definitions/promote/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PromoteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PromoteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Promote: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Provision provisions a system definition onto the target c ID by using the template and provided parameters
*/
func (a *Client) Provision(params *ProvisionParams, opts ...ClientOption) (*ProvisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Provision",
		Method:             "POST",
		PathPattern:        "/workflows/system-definitions/provision/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProvisionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Provision: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkflowActivitiesCombined searches for activities by name returns all supported activities if no filter specified
*/
func (a *Client) WorkflowActivitiesCombined(params *WorkflowActivitiesCombinedParams, opts ...ClientOption) (*WorkflowActivitiesCombinedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowActivitiesCombinedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkflowActivitiesCombined",
		Method:             "GET",
		PathPattern:        "/workflows/combined/activities/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkflowActivitiesCombinedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkflowActivitiesCombinedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WorkflowActivitiesCombined: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkflowActivitiesContentCombined searches for activities by name returns all supported activities if no filter specified
*/
func (a *Client) WorkflowActivitiesContentCombined(params *WorkflowActivitiesContentCombinedParams, opts ...ClientOption) (*WorkflowActivitiesContentCombinedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowActivitiesContentCombinedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkflowActivitiesContentCombined",
		Method:             "GET",
		PathPattern:        "/workflows/combined/activity-content/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkflowActivitiesContentCombinedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkflowActivitiesContentCombinedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WorkflowActivitiesContentCombined: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkflowDefinitionsAction enables or disable a workflow definition or stop all executions for a definition when a definition is disabled it will not execute against any new trigger events
*/
func (a *Client) WorkflowDefinitionsAction(params *WorkflowDefinitionsActionParams, opts ...ClientOption) (*WorkflowDefinitionsActionOK, *WorkflowDefinitionsActionAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowDefinitionsActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkflowDefinitionsAction",
		Method:             "POST",
		PathPattern:        "/workflows/entities/definition-actions/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkflowDefinitionsActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *WorkflowDefinitionsActionOK:
		return value, nil, nil
	case *WorkflowDefinitionsActionAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for workflows: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkflowDefinitionsCombined searches workflow definitions based on the provided filter
*/
func (a *Client) WorkflowDefinitionsCombined(params *WorkflowDefinitionsCombinedParams, opts ...ClientOption) (*WorkflowDefinitionsCombinedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowDefinitionsCombinedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkflowDefinitionsCombined",
		Method:             "GET",
		PathPattern:        "/workflows/combined/definitions/v1",
		ProducesMediaTypes: []string{"application/json", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkflowDefinitionsCombinedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkflowDefinitionsCombinedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WorkflowDefinitionsCombined: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkflowDefinitionsExport exports a workflow definition for the given definition ID
*/
func (a *Client) WorkflowDefinitionsExport(params *WorkflowDefinitionsExportParams, opts ...ClientOption) (*WorkflowDefinitionsExportOK, *WorkflowDefinitionsExportStatus299, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowDefinitionsExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkflowDefinitionsExport",
		Method:             "GET",
		PathPattern:        "/workflows/entities/definitions/export/v1",
		ProducesMediaTypes: []string{"application/yaml", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkflowDefinitionsExportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *WorkflowDefinitionsExportOK:
		return value, nil, nil
	case *WorkflowDefinitionsExportStatus299:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for workflows: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkflowDefinitionsImport imports a workflow definition based on the provided model
*/
func (a *Client) WorkflowDefinitionsImport(params *WorkflowDefinitionsImportParams, opts ...ClientOption) (*WorkflowDefinitionsImportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowDefinitionsImportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkflowDefinitionsImport",
		Method:             "POST",
		PathPattern:        "/workflows/entities/definitions/import/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkflowDefinitionsImportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkflowDefinitionsImportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WorkflowDefinitionsImport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkflowDefinitionsUpdate updates a workflow definition based on the provided model
*/
func (a *Client) WorkflowDefinitionsUpdate(params *WorkflowDefinitionsUpdateParams, opts ...ClientOption) (*WorkflowDefinitionsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowDefinitionsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkflowDefinitionsUpdate",
		Method:             "PUT",
		PathPattern:        "/workflows/entities/definitions/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkflowDefinitionsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkflowDefinitionsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WorkflowDefinitionsUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkflowExecuteInternal executes an on demand workflow internal workflows permitted the body is JSON used to trigger the execution the response the execution ID s
*/
func (a *Client) WorkflowExecuteInternal(params *WorkflowExecuteInternalParams, opts ...ClientOption) (*WorkflowExecuteInternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowExecuteInternalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkflowExecuteInternal",
		Method:             "POST",
		PathPattern:        "/workflows/entities/execute/internal/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkflowExecuteInternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkflowExecuteInternalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WorkflowExecuteInternal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkflowExecutionsCombined searches workflow executions based on the provided filter
*/
func (a *Client) WorkflowExecutionsCombined(params *WorkflowExecutionsCombinedParams, opts ...ClientOption) (*WorkflowExecutionsCombinedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowExecutionsCombinedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkflowExecutionsCombined",
		Method:             "GET",
		PathPattern:        "/workflows/combined/executions/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkflowExecutionsCombinedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkflowExecutionsCombinedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WorkflowExecutionsCombined: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkflowGetHumanInputV1 gets one or more specific human inputs by their i ds
*/
func (a *Client) WorkflowGetHumanInputV1(params *WorkflowGetHumanInputV1Params, opts ...ClientOption) (*WorkflowGetHumanInputV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowGetHumanInputV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkflowGetHumanInputV1",
		Method:             "GET",
		PathPattern:        "/workflows/entities/human-inputs/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkflowGetHumanInputV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkflowGetHumanInputV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WorkflowGetHumanInputV1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkflowMockExecute executes a workflow definition with mocks
*/
func (a *Client) WorkflowMockExecute(params *WorkflowMockExecuteParams, opts ...ClientOption) (*WorkflowMockExecuteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowMockExecuteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkflowMockExecute",
		Method:             "POST",
		PathPattern:        "/workflows/entities/mock-executions/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkflowMockExecuteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkflowMockExecuteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WorkflowMockExecute: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkflowTriggersCombined searches for triggers by namespaced identifier i e falcon audit detection or falcon audit detection status returns all triggers if no filter specified
*/
func (a *Client) WorkflowTriggersCombined(params *WorkflowTriggersCombinedParams, opts ...ClientOption) (*WorkflowTriggersCombinedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowTriggersCombinedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkflowTriggersCombined",
		Method:             "GET",
		PathPattern:        "/workflows/combined/triggers/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkflowTriggersCombinedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkflowTriggersCombinedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WorkflowTriggersCombined: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkflowUpdateHumanInputV1 provides an input in response to a human input action depending on action configuration one or more of approve decline and or escalate are permitted
*/
func (a *Client) WorkflowUpdateHumanInputV1(params *WorkflowUpdateHumanInputV1Params, opts ...ClientOption) (*WorkflowUpdateHumanInputV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowUpdateHumanInputV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkflowUpdateHumanInputV1",
		Method:             "PATCH",
		PathPattern:        "/workflows/entities/human-inputs/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WorkflowUpdateHumanInputV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkflowUpdateHumanInputV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WorkflowUpdateHumanInputV1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
