// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new workflows API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workflows API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeprovisionSystemDefinition(params *DeprovisionSystemDefinitionParams, opts ...ClientOption) (*DeprovisionSystemDefinitionOK, error)

	Execute(params *ExecuteParams, opts ...ClientOption) (*ExecuteOK, error)

	ExecutionsAction(params *ExecutionsActionParams, opts ...ClientOption) (*ExecutionsActionOK, error)

	ExecutionsResult(params *ExecutionsResultParams, opts ...ClientOption) (*ExecutionsResultOK, error)

	PromoteSystemDefinition(params *PromoteSystemDefinitionParams, opts ...ClientOption) (*PromoteSystemDefinitionOK, error)

	ProvisionSystemDefinition(params *ProvisionSystemDefinitionParams, opts ...ClientOption) (*ProvisionSystemDefinitionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeprovisionSystemDefinition deprovisions a system definition that was previously provisioned on the target c ID
*/
func (a *Client) DeprovisionSystemDefinition(params *DeprovisionSystemDefinitionParams, opts ...ClientOption) (*DeprovisionSystemDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeprovisionSystemDefinitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deprovision.system-definition",
		Method:             "POST",
		PathPattern:        "/workflows/system-definitions/deprovision/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeprovisionSystemDefinitionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeprovisionSystemDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deprovision.system-definition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Execute executes an on demand workflow the body is JSON used to trigger the execution the response the execution ID s
*/
func (a *Client) Execute(params *ExecuteParams, opts ...ClientOption) (*ExecuteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "execute",
		Method:             "POST",
		PathPattern:        "/workflows/entities/execute/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for execute: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecutionsAction allows a user to resume retry a failed workflow execution
*/
func (a *Client) ExecutionsAction(params *ExecutionsActionParams, opts ...ClientOption) (*ExecutionsActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecutionsActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "executions.action",
		Method:             "POST",
		PathPattern:        "/workflows/entities/execution-actions/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecutionsActionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecutionsActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for executions.action: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecutionsResult gets execution result of a given execution
*/
func (a *Client) ExecutionsResult(params *ExecutionsResultParams, opts ...ClientOption) (*ExecutionsResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecutionsResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "executions.result",
		Method:             "GET",
		PathPattern:        "/workflows/entities/execution-results/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecutionsResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecutionsResultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for executions.result: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PromoteSystemDefinition promotes a version of a system definition on a customer the customer must already have been provisioned this allows the callerto apply an updated template version to a specific cid and expects all parameters to be supplied if the template supports multi instancethe customer scope definition ID must be supplied to determine which customer workflow should be updated
*/
func (a *Client) PromoteSystemDefinition(params *PromoteSystemDefinitionParams, opts ...ClientOption) (*PromoteSystemDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPromoteSystemDefinitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "promote.system-definition",
		Method:             "POST",
		PathPattern:        "/workflows/system-definitions/promote/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PromoteSystemDefinitionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PromoteSystemDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for promote.system-definition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProvisionSystemDefinition provisions a system definition onto the target c ID by using the template and provided parameters
*/
func (a *Client) ProvisionSystemDefinition(params *ProvisionSystemDefinitionParams, opts ...ClientOption) (*ProvisionSystemDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvisionSystemDefinitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "provision.system-definition",
		Method:             "POST",
		PathPattern:        "/workflows/system-definitions/provision/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProvisionSystemDefinitionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvisionSystemDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for provision.system-definition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
