// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// WorkflowDefinitionsCombinedReader is a Reader for the WorkflowDefinitionsCombined structure.
type WorkflowDefinitionsCombinedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WorkflowDefinitionsCombinedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewWorkflowDefinitionsCombinedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewWorkflowDefinitionsCombinedBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewWorkflowDefinitionsCombinedForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewWorkflowDefinitionsCombinedNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewWorkflowDefinitionsCombinedTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewWorkflowDefinitionsCombinedInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /workflows/combined/definitions/v1] WorkflowDefinitionsCombined", response, response.Code())
	}
}

// NewWorkflowDefinitionsCombinedOK creates a WorkflowDefinitionsCombinedOK with default headers values
func NewWorkflowDefinitionsCombinedOK() *WorkflowDefinitionsCombinedOK {
	return &WorkflowDefinitionsCombinedOK{}
}

/*
WorkflowDefinitionsCombinedOK describes a response with status code 200, with default header values.

OK
*/
type WorkflowDefinitionsCombinedOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DefinitionsDefinitionExternalResponse
}

// IsSuccess returns true when this workflow definitions combined o k response has a 2xx status code
func (o *WorkflowDefinitionsCombinedOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this workflow definitions combined o k response has a 3xx status code
func (o *WorkflowDefinitionsCombinedOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions combined o k response has a 4xx status code
func (o *WorkflowDefinitionsCombinedOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this workflow definitions combined o k response has a 5xx status code
func (o *WorkflowDefinitionsCombinedOK) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions combined o k response a status code equal to that given
func (o *WorkflowDefinitionsCombinedOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the workflow definitions combined o k response
func (o *WorkflowDefinitionsCombinedOK) Code() int {
	return 200
}

func (o *WorkflowDefinitionsCombinedOK) Error() string {
	return fmt.Sprintf("[GET /workflows/combined/definitions/v1][%d] workflowDefinitionsCombinedOK  %+v", 200, o.Payload)
}

func (o *WorkflowDefinitionsCombinedOK) String() string {
	return fmt.Sprintf("[GET /workflows/combined/definitions/v1][%d] workflowDefinitionsCombinedOK  %+v", 200, o.Payload)
}

func (o *WorkflowDefinitionsCombinedOK) GetPayload() *models.DefinitionsDefinitionExternalResponse {
	return o.Payload
}

func (o *WorkflowDefinitionsCombinedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DefinitionsDefinitionExternalResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsCombinedBadRequest creates a WorkflowDefinitionsCombinedBadRequest with default headers values
func NewWorkflowDefinitionsCombinedBadRequest() *WorkflowDefinitionsCombinedBadRequest {
	return &WorkflowDefinitionsCombinedBadRequest{}
}

/*
WorkflowDefinitionsCombinedBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type WorkflowDefinitionsCombinedBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DefinitionsDefinitionExternalResponse
}

// IsSuccess returns true when this workflow definitions combined bad request response has a 2xx status code
func (o *WorkflowDefinitionsCombinedBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions combined bad request response has a 3xx status code
func (o *WorkflowDefinitionsCombinedBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions combined bad request response has a 4xx status code
func (o *WorkflowDefinitionsCombinedBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow definitions combined bad request response has a 5xx status code
func (o *WorkflowDefinitionsCombinedBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions combined bad request response a status code equal to that given
func (o *WorkflowDefinitionsCombinedBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the workflow definitions combined bad request response
func (o *WorkflowDefinitionsCombinedBadRequest) Code() int {
	return 400
}

func (o *WorkflowDefinitionsCombinedBadRequest) Error() string {
	return fmt.Sprintf("[GET /workflows/combined/definitions/v1][%d] workflowDefinitionsCombinedBadRequest  %+v", 400, o.Payload)
}

func (o *WorkflowDefinitionsCombinedBadRequest) String() string {
	return fmt.Sprintf("[GET /workflows/combined/definitions/v1][%d] workflowDefinitionsCombinedBadRequest  %+v", 400, o.Payload)
}

func (o *WorkflowDefinitionsCombinedBadRequest) GetPayload() *models.DefinitionsDefinitionExternalResponse {
	return o.Payload
}

func (o *WorkflowDefinitionsCombinedBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DefinitionsDefinitionExternalResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsCombinedForbidden creates a WorkflowDefinitionsCombinedForbidden with default headers values
func NewWorkflowDefinitionsCombinedForbidden() *WorkflowDefinitionsCombinedForbidden {
	return &WorkflowDefinitionsCombinedForbidden{}
}

/*
WorkflowDefinitionsCombinedForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type WorkflowDefinitionsCombinedForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this workflow definitions combined forbidden response has a 2xx status code
func (o *WorkflowDefinitionsCombinedForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions combined forbidden response has a 3xx status code
func (o *WorkflowDefinitionsCombinedForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions combined forbidden response has a 4xx status code
func (o *WorkflowDefinitionsCombinedForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow definitions combined forbidden response has a 5xx status code
func (o *WorkflowDefinitionsCombinedForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions combined forbidden response a status code equal to that given
func (o *WorkflowDefinitionsCombinedForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the workflow definitions combined forbidden response
func (o *WorkflowDefinitionsCombinedForbidden) Code() int {
	return 403
}

func (o *WorkflowDefinitionsCombinedForbidden) Error() string {
	return fmt.Sprintf("[GET /workflows/combined/definitions/v1][%d] workflowDefinitionsCombinedForbidden  %+v", 403, o.Payload)
}

func (o *WorkflowDefinitionsCombinedForbidden) String() string {
	return fmt.Sprintf("[GET /workflows/combined/definitions/v1][%d] workflowDefinitionsCombinedForbidden  %+v", 403, o.Payload)
}

func (o *WorkflowDefinitionsCombinedForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *WorkflowDefinitionsCombinedForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsCombinedNotFound creates a WorkflowDefinitionsCombinedNotFound with default headers values
func NewWorkflowDefinitionsCombinedNotFound() *WorkflowDefinitionsCombinedNotFound {
	return &WorkflowDefinitionsCombinedNotFound{}
}

/*
WorkflowDefinitionsCombinedNotFound describes a response with status code 404, with default header values.

Not Found
*/
type WorkflowDefinitionsCombinedNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DefinitionsDefinitionExternalResponse
}

// IsSuccess returns true when this workflow definitions combined not found response has a 2xx status code
func (o *WorkflowDefinitionsCombinedNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions combined not found response has a 3xx status code
func (o *WorkflowDefinitionsCombinedNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions combined not found response has a 4xx status code
func (o *WorkflowDefinitionsCombinedNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow definitions combined not found response has a 5xx status code
func (o *WorkflowDefinitionsCombinedNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions combined not found response a status code equal to that given
func (o *WorkflowDefinitionsCombinedNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the workflow definitions combined not found response
func (o *WorkflowDefinitionsCombinedNotFound) Code() int {
	return 404
}

func (o *WorkflowDefinitionsCombinedNotFound) Error() string {
	return fmt.Sprintf("[GET /workflows/combined/definitions/v1][%d] workflowDefinitionsCombinedNotFound  %+v", 404, o.Payload)
}

func (o *WorkflowDefinitionsCombinedNotFound) String() string {
	return fmt.Sprintf("[GET /workflows/combined/definitions/v1][%d] workflowDefinitionsCombinedNotFound  %+v", 404, o.Payload)
}

func (o *WorkflowDefinitionsCombinedNotFound) GetPayload() *models.DefinitionsDefinitionExternalResponse {
	return o.Payload
}

func (o *WorkflowDefinitionsCombinedNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DefinitionsDefinitionExternalResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsCombinedTooManyRequests creates a WorkflowDefinitionsCombinedTooManyRequests with default headers values
func NewWorkflowDefinitionsCombinedTooManyRequests() *WorkflowDefinitionsCombinedTooManyRequests {
	return &WorkflowDefinitionsCombinedTooManyRequests{}
}

/*
WorkflowDefinitionsCombinedTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type WorkflowDefinitionsCombinedTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this workflow definitions combined too many requests response has a 2xx status code
func (o *WorkflowDefinitionsCombinedTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions combined too many requests response has a 3xx status code
func (o *WorkflowDefinitionsCombinedTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions combined too many requests response has a 4xx status code
func (o *WorkflowDefinitionsCombinedTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow definitions combined too many requests response has a 5xx status code
func (o *WorkflowDefinitionsCombinedTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions combined too many requests response a status code equal to that given
func (o *WorkflowDefinitionsCombinedTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the workflow definitions combined too many requests response
func (o *WorkflowDefinitionsCombinedTooManyRequests) Code() int {
	return 429
}

func (o *WorkflowDefinitionsCombinedTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /workflows/combined/definitions/v1][%d] workflowDefinitionsCombinedTooManyRequests  %+v", 429, o.Payload)
}

func (o *WorkflowDefinitionsCombinedTooManyRequests) String() string {
	return fmt.Sprintf("[GET /workflows/combined/definitions/v1][%d] workflowDefinitionsCombinedTooManyRequests  %+v", 429, o.Payload)
}

func (o *WorkflowDefinitionsCombinedTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *WorkflowDefinitionsCombinedTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsCombinedInternalServerError creates a WorkflowDefinitionsCombinedInternalServerError with default headers values
func NewWorkflowDefinitionsCombinedInternalServerError() *WorkflowDefinitionsCombinedInternalServerError {
	return &WorkflowDefinitionsCombinedInternalServerError{}
}

/*
WorkflowDefinitionsCombinedInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type WorkflowDefinitionsCombinedInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DefinitionsDefinitionExternalResponse
}

// IsSuccess returns true when this workflow definitions combined internal server error response has a 2xx status code
func (o *WorkflowDefinitionsCombinedInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions combined internal server error response has a 3xx status code
func (o *WorkflowDefinitionsCombinedInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions combined internal server error response has a 4xx status code
func (o *WorkflowDefinitionsCombinedInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this workflow definitions combined internal server error response has a 5xx status code
func (o *WorkflowDefinitionsCombinedInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this workflow definitions combined internal server error response a status code equal to that given
func (o *WorkflowDefinitionsCombinedInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the workflow definitions combined internal server error response
func (o *WorkflowDefinitionsCombinedInternalServerError) Code() int {
	return 500
}

func (o *WorkflowDefinitionsCombinedInternalServerError) Error() string {
	return fmt.Sprintf("[GET /workflows/combined/definitions/v1][%d] workflowDefinitionsCombinedInternalServerError  %+v", 500, o.Payload)
}

func (o *WorkflowDefinitionsCombinedInternalServerError) String() string {
	return fmt.Sprintf("[GET /workflows/combined/definitions/v1][%d] workflowDefinitionsCombinedInternalServerError  %+v", 500, o.Payload)
}

func (o *WorkflowDefinitionsCombinedInternalServerError) GetPayload() *models.DefinitionsDefinitionExternalResponse {
	return o.Payload
}

func (o *WorkflowDefinitionsCombinedInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DefinitionsDefinitionExternalResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
