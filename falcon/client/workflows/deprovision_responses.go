// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// DeprovisionReader is a Reader for the Deprovision structure.
type DeprovisionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeprovisionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeprovisionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeprovisionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeprovisionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeprovisionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeprovisionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeprovisionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /workflows/system-definitions/deprovision/v1] Deprovision", response, response.Code())
	}
}

// NewDeprovisionOK creates a DeprovisionOK with default headers values
func NewDeprovisionOK() *DeprovisionOK {
	return &DeprovisionOK{}
}

/*
DeprovisionOK describes a response with status code 200, with default header values.

OK
*/
type DeprovisionOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this deprovision o k response has a 2xx status code
func (o *DeprovisionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this deprovision o k response has a 3xx status code
func (o *DeprovisionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this deprovision o k response has a 4xx status code
func (o *DeprovisionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this deprovision o k response has a 5xx status code
func (o *DeprovisionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this deprovision o k response a status code equal to that given
func (o *DeprovisionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the deprovision o k response
func (o *DeprovisionOK) Code() int {
	return 200
}

func (o *DeprovisionOK) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] deprovisionOK  %+v", 200, o.Payload)
}

func (o *DeprovisionOK) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] deprovisionOK  %+v", 200, o.Payload)
}

func (o *DeprovisionOK) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *DeprovisionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeprovisionBadRequest creates a DeprovisionBadRequest with default headers values
func NewDeprovisionBadRequest() *DeprovisionBadRequest {
	return &DeprovisionBadRequest{}
}

/*
DeprovisionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeprovisionBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this deprovision bad request response has a 2xx status code
func (o *DeprovisionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this deprovision bad request response has a 3xx status code
func (o *DeprovisionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this deprovision bad request response has a 4xx status code
func (o *DeprovisionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this deprovision bad request response has a 5xx status code
func (o *DeprovisionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this deprovision bad request response a status code equal to that given
func (o *DeprovisionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the deprovision bad request response
func (o *DeprovisionBadRequest) Code() int {
	return 400
}

func (o *DeprovisionBadRequest) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] deprovisionBadRequest  %+v", 400, o.Payload)
}

func (o *DeprovisionBadRequest) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] deprovisionBadRequest  %+v", 400, o.Payload)
}

func (o *DeprovisionBadRequest) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *DeprovisionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeprovisionForbidden creates a DeprovisionForbidden with default headers values
func NewDeprovisionForbidden() *DeprovisionForbidden {
	return &DeprovisionForbidden{}
}

/*
DeprovisionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeprovisionForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this deprovision forbidden response has a 2xx status code
func (o *DeprovisionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this deprovision forbidden response has a 3xx status code
func (o *DeprovisionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this deprovision forbidden response has a 4xx status code
func (o *DeprovisionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this deprovision forbidden response has a 5xx status code
func (o *DeprovisionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this deprovision forbidden response a status code equal to that given
func (o *DeprovisionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the deprovision forbidden response
func (o *DeprovisionForbidden) Code() int {
	return 403
}

func (o *DeprovisionForbidden) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] deprovisionForbidden  %+v", 403, o.Payload)
}

func (o *DeprovisionForbidden) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] deprovisionForbidden  %+v", 403, o.Payload)
}

func (o *DeprovisionForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeprovisionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeprovisionNotFound creates a DeprovisionNotFound with default headers values
func NewDeprovisionNotFound() *DeprovisionNotFound {
	return &DeprovisionNotFound{}
}

/*
DeprovisionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeprovisionNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this deprovision not found response has a 2xx status code
func (o *DeprovisionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this deprovision not found response has a 3xx status code
func (o *DeprovisionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this deprovision not found response has a 4xx status code
func (o *DeprovisionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this deprovision not found response has a 5xx status code
func (o *DeprovisionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this deprovision not found response a status code equal to that given
func (o *DeprovisionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the deprovision not found response
func (o *DeprovisionNotFound) Code() int {
	return 404
}

func (o *DeprovisionNotFound) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] deprovisionNotFound  %+v", 404, o.Payload)
}

func (o *DeprovisionNotFound) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] deprovisionNotFound  %+v", 404, o.Payload)
}

func (o *DeprovisionNotFound) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *DeprovisionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeprovisionTooManyRequests creates a DeprovisionTooManyRequests with default headers values
func NewDeprovisionTooManyRequests() *DeprovisionTooManyRequests {
	return &DeprovisionTooManyRequests{}
}

/*
DeprovisionTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type DeprovisionTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this deprovision too many requests response has a 2xx status code
func (o *DeprovisionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this deprovision too many requests response has a 3xx status code
func (o *DeprovisionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this deprovision too many requests response has a 4xx status code
func (o *DeprovisionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this deprovision too many requests response has a 5xx status code
func (o *DeprovisionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this deprovision too many requests response a status code equal to that given
func (o *DeprovisionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the deprovision too many requests response
func (o *DeprovisionTooManyRequests) Code() int {
	return 429
}

func (o *DeprovisionTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] deprovisionTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeprovisionTooManyRequests) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] deprovisionTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeprovisionTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeprovisionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeprovisionInternalServerError creates a DeprovisionInternalServerError with default headers values
func NewDeprovisionInternalServerError() *DeprovisionInternalServerError {
	return &DeprovisionInternalServerError{}
}

/*
DeprovisionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeprovisionInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this deprovision internal server error response has a 2xx status code
func (o *DeprovisionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this deprovision internal server error response has a 3xx status code
func (o *DeprovisionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this deprovision internal server error response has a 4xx status code
func (o *DeprovisionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this deprovision internal server error response has a 5xx status code
func (o *DeprovisionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this deprovision internal server error response a status code equal to that given
func (o *DeprovisionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the deprovision internal server error response
func (o *DeprovisionInternalServerError) Code() int {
	return 500
}

func (o *DeprovisionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] deprovisionInternalServerError  %+v", 500, o.Payload)
}

func (o *DeprovisionInternalServerError) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/deprovision/v1][%d] deprovisionInternalServerError  %+v", 500, o.Payload)
}

func (o *DeprovisionInternalServerError) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *DeprovisionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
