// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// V1SystemDefinitionsProvisionReader is a Reader for the V1SystemDefinitionsProvision structure.
type V1SystemDefinitionsProvisionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1SystemDefinitionsProvisionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1SystemDefinitionsProvisionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1SystemDefinitionsProvisionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1SystemDefinitionsProvisionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewV1SystemDefinitionsProvisionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewV1SystemDefinitionsProvisionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1SystemDefinitionsProvisionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /workflows/system-definitions/provision/v1] v1.system-definitions.provision", response, response.Code())
	}
}

// NewV1SystemDefinitionsProvisionOK creates a V1SystemDefinitionsProvisionOK with default headers values
func NewV1SystemDefinitionsProvisionOK() *V1SystemDefinitionsProvisionOK {
	return &V1SystemDefinitionsProvisionOK{}
}

/*
V1SystemDefinitionsProvisionOK describes a response with status code 200, with default header values.

OK
*/
type V1SystemDefinitionsProvisionOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this v1 system definitions provision o k response has a 2xx status code
func (o *V1SystemDefinitionsProvisionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 system definitions provision o k response has a 3xx status code
func (o *V1SystemDefinitionsProvisionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 system definitions provision o k response has a 4xx status code
func (o *V1SystemDefinitionsProvisionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 system definitions provision o k response has a 5xx status code
func (o *V1SystemDefinitionsProvisionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 system definitions provision o k response a status code equal to that given
func (o *V1SystemDefinitionsProvisionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 system definitions provision o k response
func (o *V1SystemDefinitionsProvisionOK) Code() int {
	return 200
}

func (o *V1SystemDefinitionsProvisionOK) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] v1SystemDefinitionsProvisionOK  %+v", 200, o.Payload)
}

func (o *V1SystemDefinitionsProvisionOK) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] v1SystemDefinitionsProvisionOK  %+v", 200, o.Payload)
}

func (o *V1SystemDefinitionsProvisionOK) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *V1SystemDefinitionsProvisionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SystemDefinitionsProvisionBadRequest creates a V1SystemDefinitionsProvisionBadRequest with default headers values
func NewV1SystemDefinitionsProvisionBadRequest() *V1SystemDefinitionsProvisionBadRequest {
	return &V1SystemDefinitionsProvisionBadRequest{}
}

/*
V1SystemDefinitionsProvisionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1SystemDefinitionsProvisionBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this v1 system definitions provision bad request response has a 2xx status code
func (o *V1SystemDefinitionsProvisionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 system definitions provision bad request response has a 3xx status code
func (o *V1SystemDefinitionsProvisionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 system definitions provision bad request response has a 4xx status code
func (o *V1SystemDefinitionsProvisionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 system definitions provision bad request response has a 5xx status code
func (o *V1SystemDefinitionsProvisionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 system definitions provision bad request response a status code equal to that given
func (o *V1SystemDefinitionsProvisionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 system definitions provision bad request response
func (o *V1SystemDefinitionsProvisionBadRequest) Code() int {
	return 400
}

func (o *V1SystemDefinitionsProvisionBadRequest) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] v1SystemDefinitionsProvisionBadRequest  %+v", 400, o.Payload)
}

func (o *V1SystemDefinitionsProvisionBadRequest) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] v1SystemDefinitionsProvisionBadRequest  %+v", 400, o.Payload)
}

func (o *V1SystemDefinitionsProvisionBadRequest) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *V1SystemDefinitionsProvisionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SystemDefinitionsProvisionForbidden creates a V1SystemDefinitionsProvisionForbidden with default headers values
func NewV1SystemDefinitionsProvisionForbidden() *V1SystemDefinitionsProvisionForbidden {
	return &V1SystemDefinitionsProvisionForbidden{}
}

/*
V1SystemDefinitionsProvisionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1SystemDefinitionsProvisionForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this v1 system definitions provision forbidden response has a 2xx status code
func (o *V1SystemDefinitionsProvisionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 system definitions provision forbidden response has a 3xx status code
func (o *V1SystemDefinitionsProvisionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 system definitions provision forbidden response has a 4xx status code
func (o *V1SystemDefinitionsProvisionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 system definitions provision forbidden response has a 5xx status code
func (o *V1SystemDefinitionsProvisionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 system definitions provision forbidden response a status code equal to that given
func (o *V1SystemDefinitionsProvisionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 system definitions provision forbidden response
func (o *V1SystemDefinitionsProvisionForbidden) Code() int {
	return 403
}

func (o *V1SystemDefinitionsProvisionForbidden) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] v1SystemDefinitionsProvisionForbidden  %+v", 403, o.Payload)
}

func (o *V1SystemDefinitionsProvisionForbidden) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] v1SystemDefinitionsProvisionForbidden  %+v", 403, o.Payload)
}

func (o *V1SystemDefinitionsProvisionForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *V1SystemDefinitionsProvisionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SystemDefinitionsProvisionNotFound creates a V1SystemDefinitionsProvisionNotFound with default headers values
func NewV1SystemDefinitionsProvisionNotFound() *V1SystemDefinitionsProvisionNotFound {
	return &V1SystemDefinitionsProvisionNotFound{}
}

/*
V1SystemDefinitionsProvisionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type V1SystemDefinitionsProvisionNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this v1 system definitions provision not found response has a 2xx status code
func (o *V1SystemDefinitionsProvisionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 system definitions provision not found response has a 3xx status code
func (o *V1SystemDefinitionsProvisionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 system definitions provision not found response has a 4xx status code
func (o *V1SystemDefinitionsProvisionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 system definitions provision not found response has a 5xx status code
func (o *V1SystemDefinitionsProvisionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 system definitions provision not found response a status code equal to that given
func (o *V1SystemDefinitionsProvisionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the v1 system definitions provision not found response
func (o *V1SystemDefinitionsProvisionNotFound) Code() int {
	return 404
}

func (o *V1SystemDefinitionsProvisionNotFound) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] v1SystemDefinitionsProvisionNotFound  %+v", 404, o.Payload)
}

func (o *V1SystemDefinitionsProvisionNotFound) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] v1SystemDefinitionsProvisionNotFound  %+v", 404, o.Payload)
}

func (o *V1SystemDefinitionsProvisionNotFound) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *V1SystemDefinitionsProvisionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SystemDefinitionsProvisionTooManyRequests creates a V1SystemDefinitionsProvisionTooManyRequests with default headers values
func NewV1SystemDefinitionsProvisionTooManyRequests() *V1SystemDefinitionsProvisionTooManyRequests {
	return &V1SystemDefinitionsProvisionTooManyRequests{}
}

/*
V1SystemDefinitionsProvisionTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type V1SystemDefinitionsProvisionTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this v1 system definitions provision too many requests response has a 2xx status code
func (o *V1SystemDefinitionsProvisionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 system definitions provision too many requests response has a 3xx status code
func (o *V1SystemDefinitionsProvisionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 system definitions provision too many requests response has a 4xx status code
func (o *V1SystemDefinitionsProvisionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 system definitions provision too many requests response has a 5xx status code
func (o *V1SystemDefinitionsProvisionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 system definitions provision too many requests response a status code equal to that given
func (o *V1SystemDefinitionsProvisionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the v1 system definitions provision too many requests response
func (o *V1SystemDefinitionsProvisionTooManyRequests) Code() int {
	return 429
}

func (o *V1SystemDefinitionsProvisionTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] v1SystemDefinitionsProvisionTooManyRequests  %+v", 429, o.Payload)
}

func (o *V1SystemDefinitionsProvisionTooManyRequests) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] v1SystemDefinitionsProvisionTooManyRequests  %+v", 429, o.Payload)
}

func (o *V1SystemDefinitionsProvisionTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *V1SystemDefinitionsProvisionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SystemDefinitionsProvisionInternalServerError creates a V1SystemDefinitionsProvisionInternalServerError with default headers values
func NewV1SystemDefinitionsProvisionInternalServerError() *V1SystemDefinitionsProvisionInternalServerError {
	return &V1SystemDefinitionsProvisionInternalServerError{}
}

/*
V1SystemDefinitionsProvisionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1SystemDefinitionsProvisionInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this v1 system definitions provision internal server error response has a 2xx status code
func (o *V1SystemDefinitionsProvisionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 system definitions provision internal server error response has a 3xx status code
func (o *V1SystemDefinitionsProvisionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 system definitions provision internal server error response has a 4xx status code
func (o *V1SystemDefinitionsProvisionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 system definitions provision internal server error response has a 5xx status code
func (o *V1SystemDefinitionsProvisionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 system definitions provision internal server error response a status code equal to that given
func (o *V1SystemDefinitionsProvisionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 system definitions provision internal server error response
func (o *V1SystemDefinitionsProvisionInternalServerError) Code() int {
	return 500
}

func (o *V1SystemDefinitionsProvisionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] v1SystemDefinitionsProvisionInternalServerError  %+v", 500, o.Payload)
}

func (o *V1SystemDefinitionsProvisionInternalServerError) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] v1SystemDefinitionsProvisionInternalServerError  %+v", 500, o.Payload)
}

func (o *V1SystemDefinitionsProvisionInternalServerError) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *V1SystemDefinitionsProvisionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
