// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// WorkflowDefinitionsExportReader is a Reader for the WorkflowDefinitionsExport structure.
type WorkflowDefinitionsExportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WorkflowDefinitionsExportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewWorkflowDefinitionsExportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 299:
		result := NewWorkflowDefinitionsExportStatus299()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewWorkflowDefinitionsExportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewWorkflowDefinitionsExportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewWorkflowDefinitionsExportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewWorkflowDefinitionsExportTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewWorkflowDefinitionsExportInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /workflows/entities/definitions/export/v1] WorkflowDefinitionsExport", response, response.Code())
	}
}

// NewWorkflowDefinitionsExportOK creates a WorkflowDefinitionsExportOK with default headers values
func NewWorkflowDefinitionsExportOK() *WorkflowDefinitionsExportOK {
	return &WorkflowDefinitionsExportOK{}
}

/*
WorkflowDefinitionsExportOK describes a response with status code 200, with default header values.

OK
*/
type WorkflowDefinitionsExportOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload []int64
}

// IsSuccess returns true when this workflow definitions export o k response has a 2xx status code
func (o *WorkflowDefinitionsExportOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this workflow definitions export o k response has a 3xx status code
func (o *WorkflowDefinitionsExportOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions export o k response has a 4xx status code
func (o *WorkflowDefinitionsExportOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this workflow definitions export o k response has a 5xx status code
func (o *WorkflowDefinitionsExportOK) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions export o k response a status code equal to that given
func (o *WorkflowDefinitionsExportOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the workflow definitions export o k response
func (o *WorkflowDefinitionsExportOK) Code() int {
	return 200
}

func (o *WorkflowDefinitionsExportOK) Error() string {
	return fmt.Sprintf("[GET /workflows/entities/definitions/export/v1][%d] workflowDefinitionsExportOK  %+v", 200, o.Payload)
}

func (o *WorkflowDefinitionsExportOK) String() string {
	return fmt.Sprintf("[GET /workflows/entities/definitions/export/v1][%d] workflowDefinitionsExportOK  %+v", 200, o.Payload)
}

func (o *WorkflowDefinitionsExportOK) GetPayload() []int64 {
	return o.Payload
}

func (o *WorkflowDefinitionsExportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsExportStatus299 creates a WorkflowDefinitionsExportStatus299 with default headers values
func NewWorkflowDefinitionsExportStatus299() *WorkflowDefinitionsExportStatus299 {
	return &WorkflowDefinitionsExportStatus299{}
}

/*
WorkflowDefinitionsExportStatus299 describes a response with status code 299, with default header values.

Miscellaneous Persistent Warning
*/
type WorkflowDefinitionsExportStatus299 struct {

	/* Warning message from workflow export

	   Format: string
	*/
	XAPIWarning string

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload []int64
}

// IsSuccess returns true when this workflow definitions export status299 response has a 2xx status code
func (o *WorkflowDefinitionsExportStatus299) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this workflow definitions export status299 response has a 3xx status code
func (o *WorkflowDefinitionsExportStatus299) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions export status299 response has a 4xx status code
func (o *WorkflowDefinitionsExportStatus299) IsClientError() bool {
	return false
}

// IsServerError returns true when this workflow definitions export status299 response has a 5xx status code
func (o *WorkflowDefinitionsExportStatus299) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions export status299 response a status code equal to that given
func (o *WorkflowDefinitionsExportStatus299) IsCode(code int) bool {
	return code == 299
}

// Code gets the status code for the workflow definitions export status299 response
func (o *WorkflowDefinitionsExportStatus299) Code() int {
	return 299
}

func (o *WorkflowDefinitionsExportStatus299) Error() string {
	return fmt.Sprintf("[GET /workflows/entities/definitions/export/v1][%d] workflowDefinitionsExportStatus299  %+v", 299, o.Payload)
}

func (o *WorkflowDefinitionsExportStatus299) String() string {
	return fmt.Sprintf("[GET /workflows/entities/definitions/export/v1][%d] workflowDefinitionsExportStatus299  %+v", 299, o.Payload)
}

func (o *WorkflowDefinitionsExportStatus299) GetPayload() []int64 {
	return o.Payload
}

func (o *WorkflowDefinitionsExportStatus299) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Api-Warning
	hdrXAPIWarning := response.GetHeader("X-Api-Warning")

	if hdrXAPIWarning != "" {
		o.XAPIWarning = hdrXAPIWarning
	}

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsExportBadRequest creates a WorkflowDefinitionsExportBadRequest with default headers values
func NewWorkflowDefinitionsExportBadRequest() *WorkflowDefinitionsExportBadRequest {
	return &WorkflowDefinitionsExportBadRequest{}
}

/*
WorkflowDefinitionsExportBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type WorkflowDefinitionsExportBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload []int64
}

// IsSuccess returns true when this workflow definitions export bad request response has a 2xx status code
func (o *WorkflowDefinitionsExportBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions export bad request response has a 3xx status code
func (o *WorkflowDefinitionsExportBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions export bad request response has a 4xx status code
func (o *WorkflowDefinitionsExportBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow definitions export bad request response has a 5xx status code
func (o *WorkflowDefinitionsExportBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions export bad request response a status code equal to that given
func (o *WorkflowDefinitionsExportBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the workflow definitions export bad request response
func (o *WorkflowDefinitionsExportBadRequest) Code() int {
	return 400
}

func (o *WorkflowDefinitionsExportBadRequest) Error() string {
	return fmt.Sprintf("[GET /workflows/entities/definitions/export/v1][%d] workflowDefinitionsExportBadRequest  %+v", 400, o.Payload)
}

func (o *WorkflowDefinitionsExportBadRequest) String() string {
	return fmt.Sprintf("[GET /workflows/entities/definitions/export/v1][%d] workflowDefinitionsExportBadRequest  %+v", 400, o.Payload)
}

func (o *WorkflowDefinitionsExportBadRequest) GetPayload() []int64 {
	return o.Payload
}

func (o *WorkflowDefinitionsExportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsExportForbidden creates a WorkflowDefinitionsExportForbidden with default headers values
func NewWorkflowDefinitionsExportForbidden() *WorkflowDefinitionsExportForbidden {
	return &WorkflowDefinitionsExportForbidden{}
}

/*
WorkflowDefinitionsExportForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type WorkflowDefinitionsExportForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this workflow definitions export forbidden response has a 2xx status code
func (o *WorkflowDefinitionsExportForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions export forbidden response has a 3xx status code
func (o *WorkflowDefinitionsExportForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions export forbidden response has a 4xx status code
func (o *WorkflowDefinitionsExportForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow definitions export forbidden response has a 5xx status code
func (o *WorkflowDefinitionsExportForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions export forbidden response a status code equal to that given
func (o *WorkflowDefinitionsExportForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the workflow definitions export forbidden response
func (o *WorkflowDefinitionsExportForbidden) Code() int {
	return 403
}

func (o *WorkflowDefinitionsExportForbidden) Error() string {
	return fmt.Sprintf("[GET /workflows/entities/definitions/export/v1][%d] workflowDefinitionsExportForbidden  %+v", 403, o.Payload)
}

func (o *WorkflowDefinitionsExportForbidden) String() string {
	return fmt.Sprintf("[GET /workflows/entities/definitions/export/v1][%d] workflowDefinitionsExportForbidden  %+v", 403, o.Payload)
}

func (o *WorkflowDefinitionsExportForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *WorkflowDefinitionsExportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsExportNotFound creates a WorkflowDefinitionsExportNotFound with default headers values
func NewWorkflowDefinitionsExportNotFound() *WorkflowDefinitionsExportNotFound {
	return &WorkflowDefinitionsExportNotFound{}
}

/*
WorkflowDefinitionsExportNotFound describes a response with status code 404, with default header values.

Not Found
*/
type WorkflowDefinitionsExportNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload []int64
}

// IsSuccess returns true when this workflow definitions export not found response has a 2xx status code
func (o *WorkflowDefinitionsExportNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions export not found response has a 3xx status code
func (o *WorkflowDefinitionsExportNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions export not found response has a 4xx status code
func (o *WorkflowDefinitionsExportNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow definitions export not found response has a 5xx status code
func (o *WorkflowDefinitionsExportNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions export not found response a status code equal to that given
func (o *WorkflowDefinitionsExportNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the workflow definitions export not found response
func (o *WorkflowDefinitionsExportNotFound) Code() int {
	return 404
}

func (o *WorkflowDefinitionsExportNotFound) Error() string {
	return fmt.Sprintf("[GET /workflows/entities/definitions/export/v1][%d] workflowDefinitionsExportNotFound  %+v", 404, o.Payload)
}

func (o *WorkflowDefinitionsExportNotFound) String() string {
	return fmt.Sprintf("[GET /workflows/entities/definitions/export/v1][%d] workflowDefinitionsExportNotFound  %+v", 404, o.Payload)
}

func (o *WorkflowDefinitionsExportNotFound) GetPayload() []int64 {
	return o.Payload
}

func (o *WorkflowDefinitionsExportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsExportTooManyRequests creates a WorkflowDefinitionsExportTooManyRequests with default headers values
func NewWorkflowDefinitionsExportTooManyRequests() *WorkflowDefinitionsExportTooManyRequests {
	return &WorkflowDefinitionsExportTooManyRequests{}
}

/*
WorkflowDefinitionsExportTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type WorkflowDefinitionsExportTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this workflow definitions export too many requests response has a 2xx status code
func (o *WorkflowDefinitionsExportTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions export too many requests response has a 3xx status code
func (o *WorkflowDefinitionsExportTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions export too many requests response has a 4xx status code
func (o *WorkflowDefinitionsExportTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow definitions export too many requests response has a 5xx status code
func (o *WorkflowDefinitionsExportTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions export too many requests response a status code equal to that given
func (o *WorkflowDefinitionsExportTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the workflow definitions export too many requests response
func (o *WorkflowDefinitionsExportTooManyRequests) Code() int {
	return 429
}

func (o *WorkflowDefinitionsExportTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /workflows/entities/definitions/export/v1][%d] workflowDefinitionsExportTooManyRequests  %+v", 429, o.Payload)
}

func (o *WorkflowDefinitionsExportTooManyRequests) String() string {
	return fmt.Sprintf("[GET /workflows/entities/definitions/export/v1][%d] workflowDefinitionsExportTooManyRequests  %+v", 429, o.Payload)
}

func (o *WorkflowDefinitionsExportTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *WorkflowDefinitionsExportTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsExportInternalServerError creates a WorkflowDefinitionsExportInternalServerError with default headers values
func NewWorkflowDefinitionsExportInternalServerError() *WorkflowDefinitionsExportInternalServerError {
	return &WorkflowDefinitionsExportInternalServerError{}
}

/*
WorkflowDefinitionsExportInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type WorkflowDefinitionsExportInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload []int64
}

// IsSuccess returns true when this workflow definitions export internal server error response has a 2xx status code
func (o *WorkflowDefinitionsExportInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions export internal server error response has a 3xx status code
func (o *WorkflowDefinitionsExportInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions export internal server error response has a 4xx status code
func (o *WorkflowDefinitionsExportInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this workflow definitions export internal server error response has a 5xx status code
func (o *WorkflowDefinitionsExportInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this workflow definitions export internal server error response a status code equal to that given
func (o *WorkflowDefinitionsExportInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the workflow definitions export internal server error response
func (o *WorkflowDefinitionsExportInternalServerError) Code() int {
	return 500
}

func (o *WorkflowDefinitionsExportInternalServerError) Error() string {
	return fmt.Sprintf("[GET /workflows/entities/definitions/export/v1][%d] workflowDefinitionsExportInternalServerError  %+v", 500, o.Payload)
}

func (o *WorkflowDefinitionsExportInternalServerError) String() string {
	return fmt.Sprintf("[GET /workflows/entities/definitions/export/v1][%d] workflowDefinitionsExportInternalServerError  %+v", 500, o.Payload)
}

func (o *WorkflowDefinitionsExportInternalServerError) GetPayload() []int64 {
	return o.Payload
}

func (o *WorkflowDefinitionsExportInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
