// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewWorkflowDefinitionsImportParams creates a new WorkflowDefinitionsImportParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewWorkflowDefinitionsImportParams() *WorkflowDefinitionsImportParams {
	return &WorkflowDefinitionsImportParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewWorkflowDefinitionsImportParamsWithTimeout creates a new WorkflowDefinitionsImportParams object
// with the ability to set a timeout on a request.
func NewWorkflowDefinitionsImportParamsWithTimeout(timeout time.Duration) *WorkflowDefinitionsImportParams {
	return &WorkflowDefinitionsImportParams{
		timeout: timeout,
	}
}

// NewWorkflowDefinitionsImportParamsWithContext creates a new WorkflowDefinitionsImportParams object
// with the ability to set a context for a request.
func NewWorkflowDefinitionsImportParamsWithContext(ctx context.Context) *WorkflowDefinitionsImportParams {
	return &WorkflowDefinitionsImportParams{
		Context: ctx,
	}
}

// NewWorkflowDefinitionsImportParamsWithHTTPClient creates a new WorkflowDefinitionsImportParams object
// with the ability to set a custom HTTPClient for a request.
func NewWorkflowDefinitionsImportParamsWithHTTPClient(client *http.Client) *WorkflowDefinitionsImportParams {
	return &WorkflowDefinitionsImportParams{
		HTTPClient: client,
	}
}

/*
WorkflowDefinitionsImportParams contains all the parameters to send to the API endpoint

	for the workflow definitions import operation.

	Typically these are written to a http.Request.
*/
type WorkflowDefinitionsImportParams struct {

	/* DataFile.

	   A workflow definition in YAML format to import
	*/
	DataFile runtime.NamedReadCloser

	/* Name.

	   Workflow name to override
	*/
	Name *string

	/* ValidateOnly.

	   When enabled, prevents saving workflow after validating
	*/
	ValidateOnly *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the workflow definitions import params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *WorkflowDefinitionsImportParams) WithDefaults() *WorkflowDefinitionsImportParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the workflow definitions import params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *WorkflowDefinitionsImportParams) SetDefaults() {
	var (
		validateOnlyDefault = bool(false)
	)

	val := WorkflowDefinitionsImportParams{
		ValidateOnly: &validateOnlyDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the workflow definitions import params
func (o *WorkflowDefinitionsImportParams) WithTimeout(timeout time.Duration) *WorkflowDefinitionsImportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the workflow definitions import params
func (o *WorkflowDefinitionsImportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the workflow definitions import params
func (o *WorkflowDefinitionsImportParams) WithContext(ctx context.Context) *WorkflowDefinitionsImportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the workflow definitions import params
func (o *WorkflowDefinitionsImportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the workflow definitions import params
func (o *WorkflowDefinitionsImportParams) WithHTTPClient(client *http.Client) *WorkflowDefinitionsImportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the workflow definitions import params
func (o *WorkflowDefinitionsImportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDataFile adds the dataFile to the workflow definitions import params
func (o *WorkflowDefinitionsImportParams) WithDataFile(dataFile runtime.NamedReadCloser) *WorkflowDefinitionsImportParams {
	o.SetDataFile(dataFile)
	return o
}

// SetDataFile adds the dataFile to the workflow definitions import params
func (o *WorkflowDefinitionsImportParams) SetDataFile(dataFile runtime.NamedReadCloser) {
	o.DataFile = dataFile
}

// WithName adds the name to the workflow definitions import params
func (o *WorkflowDefinitionsImportParams) WithName(name *string) *WorkflowDefinitionsImportParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the workflow definitions import params
func (o *WorkflowDefinitionsImportParams) SetName(name *string) {
	o.Name = name
}

// WithValidateOnly adds the validateOnly to the workflow definitions import params
func (o *WorkflowDefinitionsImportParams) WithValidateOnly(validateOnly *bool) *WorkflowDefinitionsImportParams {
	o.SetValidateOnly(validateOnly)
	return o
}

// SetValidateOnly adds the validateOnly to the workflow definitions import params
func (o *WorkflowDefinitionsImportParams) SetValidateOnly(validateOnly *bool) {
	o.ValidateOnly = validateOnly
}

// WriteToRequest writes these params to a swagger request
func (o *WorkflowDefinitionsImportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	// form file param data_file
	if err := r.SetFileParam("data_file", o.DataFile); err != nil {
		return err
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.ValidateOnly != nil {

		// query param validate_only
		var qrValidateOnly bool

		if o.ValidateOnly != nil {
			qrValidateOnly = *o.ValidateOnly
		}
		qValidateOnly := swag.FormatBool(qrValidateOnly)
		if qValidateOnly != "" {

			if err := r.SetQueryParam("validate_only", qValidateOnly); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
