// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// WorkflowDefinitionsActionReader is a Reader for the WorkflowDefinitionsAction structure.
type WorkflowDefinitionsActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WorkflowDefinitionsActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewWorkflowDefinitionsActionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewWorkflowDefinitionsActionAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewWorkflowDefinitionsActionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewWorkflowDefinitionsActionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewWorkflowDefinitionsActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewWorkflowDefinitionsActionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewWorkflowDefinitionsActionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /workflows/entities/definition-actions/v1] WorkflowDefinitionsAction", response, response.Code())
	}
}

// NewWorkflowDefinitionsActionOK creates a WorkflowDefinitionsActionOK with default headers values
func NewWorkflowDefinitionsActionOK() *WorkflowDefinitionsActionOK {
	return &WorkflowDefinitionsActionOK{}
}

/*
WorkflowDefinitionsActionOK describes a response with status code 200, with default header values.

OK
*/
type WorkflowDefinitionsActionOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DefinitionsDefinitionEntitiesResponse
}

// IsSuccess returns true when this workflow definitions action o k response has a 2xx status code
func (o *WorkflowDefinitionsActionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this workflow definitions action o k response has a 3xx status code
func (o *WorkflowDefinitionsActionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions action o k response has a 4xx status code
func (o *WorkflowDefinitionsActionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this workflow definitions action o k response has a 5xx status code
func (o *WorkflowDefinitionsActionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions action o k response a status code equal to that given
func (o *WorkflowDefinitionsActionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the workflow definitions action o k response
func (o *WorkflowDefinitionsActionOK) Code() int {
	return 200
}

func (o *WorkflowDefinitionsActionOK) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/definition-actions/v1][%d] workflowDefinitionsActionOK  %+v", 200, o.Payload)
}

func (o *WorkflowDefinitionsActionOK) String() string {
	return fmt.Sprintf("[POST /workflows/entities/definition-actions/v1][%d] workflowDefinitionsActionOK  %+v", 200, o.Payload)
}

func (o *WorkflowDefinitionsActionOK) GetPayload() *models.DefinitionsDefinitionEntitiesResponse {
	return o.Payload
}

func (o *WorkflowDefinitionsActionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DefinitionsDefinitionEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsActionAccepted creates a WorkflowDefinitionsActionAccepted with default headers values
func NewWorkflowDefinitionsActionAccepted() *WorkflowDefinitionsActionAccepted {
	return &WorkflowDefinitionsActionAccepted{}
}

/*
WorkflowDefinitionsActionAccepted describes a response with status code 202, with default header values.

Accepted
*/
type WorkflowDefinitionsActionAccepted struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DefinitionsDefinitionEntitiesResponse
}

// IsSuccess returns true when this workflow definitions action accepted response has a 2xx status code
func (o *WorkflowDefinitionsActionAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this workflow definitions action accepted response has a 3xx status code
func (o *WorkflowDefinitionsActionAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions action accepted response has a 4xx status code
func (o *WorkflowDefinitionsActionAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this workflow definitions action accepted response has a 5xx status code
func (o *WorkflowDefinitionsActionAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions action accepted response a status code equal to that given
func (o *WorkflowDefinitionsActionAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the workflow definitions action accepted response
func (o *WorkflowDefinitionsActionAccepted) Code() int {
	return 202
}

func (o *WorkflowDefinitionsActionAccepted) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/definition-actions/v1][%d] workflowDefinitionsActionAccepted  %+v", 202, o.Payload)
}

func (o *WorkflowDefinitionsActionAccepted) String() string {
	return fmt.Sprintf("[POST /workflows/entities/definition-actions/v1][%d] workflowDefinitionsActionAccepted  %+v", 202, o.Payload)
}

func (o *WorkflowDefinitionsActionAccepted) GetPayload() *models.DefinitionsDefinitionEntitiesResponse {
	return o.Payload
}

func (o *WorkflowDefinitionsActionAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DefinitionsDefinitionEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsActionBadRequest creates a WorkflowDefinitionsActionBadRequest with default headers values
func NewWorkflowDefinitionsActionBadRequest() *WorkflowDefinitionsActionBadRequest {
	return &WorkflowDefinitionsActionBadRequest{}
}

/*
WorkflowDefinitionsActionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type WorkflowDefinitionsActionBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DefinitionsDefinitionEntitiesResponse
}

// IsSuccess returns true when this workflow definitions action bad request response has a 2xx status code
func (o *WorkflowDefinitionsActionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions action bad request response has a 3xx status code
func (o *WorkflowDefinitionsActionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions action bad request response has a 4xx status code
func (o *WorkflowDefinitionsActionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow definitions action bad request response has a 5xx status code
func (o *WorkflowDefinitionsActionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions action bad request response a status code equal to that given
func (o *WorkflowDefinitionsActionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the workflow definitions action bad request response
func (o *WorkflowDefinitionsActionBadRequest) Code() int {
	return 400
}

func (o *WorkflowDefinitionsActionBadRequest) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/definition-actions/v1][%d] workflowDefinitionsActionBadRequest  %+v", 400, o.Payload)
}

func (o *WorkflowDefinitionsActionBadRequest) String() string {
	return fmt.Sprintf("[POST /workflows/entities/definition-actions/v1][%d] workflowDefinitionsActionBadRequest  %+v", 400, o.Payload)
}

func (o *WorkflowDefinitionsActionBadRequest) GetPayload() *models.DefinitionsDefinitionEntitiesResponse {
	return o.Payload
}

func (o *WorkflowDefinitionsActionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DefinitionsDefinitionEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsActionForbidden creates a WorkflowDefinitionsActionForbidden with default headers values
func NewWorkflowDefinitionsActionForbidden() *WorkflowDefinitionsActionForbidden {
	return &WorkflowDefinitionsActionForbidden{}
}

/*
WorkflowDefinitionsActionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type WorkflowDefinitionsActionForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this workflow definitions action forbidden response has a 2xx status code
func (o *WorkflowDefinitionsActionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions action forbidden response has a 3xx status code
func (o *WorkflowDefinitionsActionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions action forbidden response has a 4xx status code
func (o *WorkflowDefinitionsActionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow definitions action forbidden response has a 5xx status code
func (o *WorkflowDefinitionsActionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions action forbidden response a status code equal to that given
func (o *WorkflowDefinitionsActionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the workflow definitions action forbidden response
func (o *WorkflowDefinitionsActionForbidden) Code() int {
	return 403
}

func (o *WorkflowDefinitionsActionForbidden) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/definition-actions/v1][%d] workflowDefinitionsActionForbidden  %+v", 403, o.Payload)
}

func (o *WorkflowDefinitionsActionForbidden) String() string {
	return fmt.Sprintf("[POST /workflows/entities/definition-actions/v1][%d] workflowDefinitionsActionForbidden  %+v", 403, o.Payload)
}

func (o *WorkflowDefinitionsActionForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *WorkflowDefinitionsActionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsActionNotFound creates a WorkflowDefinitionsActionNotFound with default headers values
func NewWorkflowDefinitionsActionNotFound() *WorkflowDefinitionsActionNotFound {
	return &WorkflowDefinitionsActionNotFound{}
}

/*
WorkflowDefinitionsActionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type WorkflowDefinitionsActionNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DefinitionsDefinitionEntitiesResponse
}

// IsSuccess returns true when this workflow definitions action not found response has a 2xx status code
func (o *WorkflowDefinitionsActionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions action not found response has a 3xx status code
func (o *WorkflowDefinitionsActionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions action not found response has a 4xx status code
func (o *WorkflowDefinitionsActionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow definitions action not found response has a 5xx status code
func (o *WorkflowDefinitionsActionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions action not found response a status code equal to that given
func (o *WorkflowDefinitionsActionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the workflow definitions action not found response
func (o *WorkflowDefinitionsActionNotFound) Code() int {
	return 404
}

func (o *WorkflowDefinitionsActionNotFound) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/definition-actions/v1][%d] workflowDefinitionsActionNotFound  %+v", 404, o.Payload)
}

func (o *WorkflowDefinitionsActionNotFound) String() string {
	return fmt.Sprintf("[POST /workflows/entities/definition-actions/v1][%d] workflowDefinitionsActionNotFound  %+v", 404, o.Payload)
}

func (o *WorkflowDefinitionsActionNotFound) GetPayload() *models.DefinitionsDefinitionEntitiesResponse {
	return o.Payload
}

func (o *WorkflowDefinitionsActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DefinitionsDefinitionEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsActionTooManyRequests creates a WorkflowDefinitionsActionTooManyRequests with default headers values
func NewWorkflowDefinitionsActionTooManyRequests() *WorkflowDefinitionsActionTooManyRequests {
	return &WorkflowDefinitionsActionTooManyRequests{}
}

/*
WorkflowDefinitionsActionTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type WorkflowDefinitionsActionTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this workflow definitions action too many requests response has a 2xx status code
func (o *WorkflowDefinitionsActionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions action too many requests response has a 3xx status code
func (o *WorkflowDefinitionsActionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions action too many requests response has a 4xx status code
func (o *WorkflowDefinitionsActionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow definitions action too many requests response has a 5xx status code
func (o *WorkflowDefinitionsActionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions action too many requests response a status code equal to that given
func (o *WorkflowDefinitionsActionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the workflow definitions action too many requests response
func (o *WorkflowDefinitionsActionTooManyRequests) Code() int {
	return 429
}

func (o *WorkflowDefinitionsActionTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/definition-actions/v1][%d] workflowDefinitionsActionTooManyRequests  %+v", 429, o.Payload)
}

func (o *WorkflowDefinitionsActionTooManyRequests) String() string {
	return fmt.Sprintf("[POST /workflows/entities/definition-actions/v1][%d] workflowDefinitionsActionTooManyRequests  %+v", 429, o.Payload)
}

func (o *WorkflowDefinitionsActionTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *WorkflowDefinitionsActionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsActionInternalServerError creates a WorkflowDefinitionsActionInternalServerError with default headers values
func NewWorkflowDefinitionsActionInternalServerError() *WorkflowDefinitionsActionInternalServerError {
	return &WorkflowDefinitionsActionInternalServerError{}
}

/*
WorkflowDefinitionsActionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type WorkflowDefinitionsActionInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DefinitionsDefinitionEntitiesResponse
}

// IsSuccess returns true when this workflow definitions action internal server error response has a 2xx status code
func (o *WorkflowDefinitionsActionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions action internal server error response has a 3xx status code
func (o *WorkflowDefinitionsActionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions action internal server error response has a 4xx status code
func (o *WorkflowDefinitionsActionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this workflow definitions action internal server error response has a 5xx status code
func (o *WorkflowDefinitionsActionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this workflow definitions action internal server error response a status code equal to that given
func (o *WorkflowDefinitionsActionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the workflow definitions action internal server error response
func (o *WorkflowDefinitionsActionInternalServerError) Code() int {
	return 500
}

func (o *WorkflowDefinitionsActionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/definition-actions/v1][%d] workflowDefinitionsActionInternalServerError  %+v", 500, o.Payload)
}

func (o *WorkflowDefinitionsActionInternalServerError) String() string {
	return fmt.Sprintf("[POST /workflows/entities/definition-actions/v1][%d] workflowDefinitionsActionInternalServerError  %+v", 500, o.Payload)
}

func (o *WorkflowDefinitionsActionInternalServerError) GetPayload() *models.DefinitionsDefinitionEntitiesResponse {
	return o.Payload
}

func (o *WorkflowDefinitionsActionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DefinitionsDefinitionEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
