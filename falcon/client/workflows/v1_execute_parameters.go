// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// NewV1ExecuteParams creates a new V1ExecuteParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewV1ExecuteParams() *V1ExecuteParams {
	return &V1ExecuteParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewV1ExecuteParamsWithTimeout creates a new V1ExecuteParams object
// with the ability to set a timeout on a request.
func NewV1ExecuteParamsWithTimeout(timeout time.Duration) *V1ExecuteParams {
	return &V1ExecuteParams{
		timeout: timeout,
	}
}

// NewV1ExecuteParamsWithContext creates a new V1ExecuteParams object
// with the ability to set a context for a request.
func NewV1ExecuteParamsWithContext(ctx context.Context) *V1ExecuteParams {
	return &V1ExecuteParams{
		Context: ctx,
	}
}

// NewV1ExecuteParamsWithHTTPClient creates a new V1ExecuteParams object
// with the ability to set a custom HTTPClient for a request.
func NewV1ExecuteParamsWithHTTPClient(client *http.Client) *V1ExecuteParams {
	return &V1ExecuteParams{
		HTTPClient: client,
	}
}

/*
V1ExecuteParams contains all the parameters to send to the API endpoint

	for the v1 execute operation.

	Typically these are written to a http.Request.
*/
type V1ExecuteParams struct {

	// Body.
	Body models.MapStringInterface

	/* DefinitionID.

	   Definition ID to execute, either a name or an ID can be specified.
	*/
	DefinitionID []string

	/* Depth.

	   Used to record the execution depth to help limit execution loops when a workflow triggers another. The maximum depth is 4.
	*/
	Depth *int64

	/* Key.

	   Key used to help deduplicate executions, if unset a new UUID is used
	*/
	Key *string

	/* Name.

	   Workflow name to execute, either a name or an ID can be specified.
	*/
	Name *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the v1 execute params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *V1ExecuteParams) WithDefaults() *V1ExecuteParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the v1 execute params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *V1ExecuteParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the v1 execute params
func (o *V1ExecuteParams) WithTimeout(timeout time.Duration) *V1ExecuteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v1 execute params
func (o *V1ExecuteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v1 execute params
func (o *V1ExecuteParams) WithContext(ctx context.Context) *V1ExecuteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v1 execute params
func (o *V1ExecuteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v1 execute params
func (o *V1ExecuteParams) WithHTTPClient(client *http.Client) *V1ExecuteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v1 execute params
func (o *V1ExecuteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the v1 execute params
func (o *V1ExecuteParams) WithBody(body models.MapStringInterface) *V1ExecuteParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the v1 execute params
func (o *V1ExecuteParams) SetBody(body models.MapStringInterface) {
	o.Body = body
}

// WithDefinitionID adds the definitionID to the v1 execute params
func (o *V1ExecuteParams) WithDefinitionID(definitionID []string) *V1ExecuteParams {
	o.SetDefinitionID(definitionID)
	return o
}

// SetDefinitionID adds the definitionId to the v1 execute params
func (o *V1ExecuteParams) SetDefinitionID(definitionID []string) {
	o.DefinitionID = definitionID
}

// WithDepth adds the depth to the v1 execute params
func (o *V1ExecuteParams) WithDepth(depth *int64) *V1ExecuteParams {
	o.SetDepth(depth)
	return o
}

// SetDepth adds the depth to the v1 execute params
func (o *V1ExecuteParams) SetDepth(depth *int64) {
	o.Depth = depth
}

// WithKey adds the key to the v1 execute params
func (o *V1ExecuteParams) WithKey(key *string) *V1ExecuteParams {
	o.SetKey(key)
	return o
}

// SetKey adds the key to the v1 execute params
func (o *V1ExecuteParams) SetKey(key *string) {
	o.Key = key
}

// WithName adds the name to the v1 execute params
func (o *V1ExecuteParams) WithName(name *string) *V1ExecuteParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the v1 execute params
func (o *V1ExecuteParams) SetName(name *string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *V1ExecuteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.DefinitionID != nil {

		// binding items for definition_id
		joinedDefinitionID := o.bindParamDefinitionID(reg)

		// query array param definition_id
		if err := r.SetQueryParam("definition_id", joinedDefinitionID...); err != nil {
			return err
		}
	}

	if o.Depth != nil {

		// query param depth
		var qrDepth int64

		if o.Depth != nil {
			qrDepth = *o.Depth
		}
		qDepth := swag.FormatInt64(qrDepth)
		if qDepth != "" {

			if err := r.SetQueryParam("depth", qDepth); err != nil {
				return err
			}
		}
	}

	if o.Key != nil {

		// query param key
		var qrKey string

		if o.Key != nil {
			qrKey = *o.Key
		}
		qKey := qrKey
		if qKey != "" {

			if err := r.SetQueryParam("key", qKey); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamV1Execute binds the parameter definition_id
func (o *V1ExecuteParams) bindParamDefinitionID(formats strfmt.Registry) []string {
	definitionIDIR := o.DefinitionID

	var definitionIDIC []string
	for _, definitionIDIIR := range definitionIDIR { // explode []string

		definitionIDIIV := definitionIDIIR // string as string
		definitionIDIC = append(definitionIDIC, definitionIDIIV)
	}

	// items.CollectionFormat: "csv"
	definitionIDIS := swag.JoinByFormat(definitionIDIC, "csv")

	return definitionIDIS
}
