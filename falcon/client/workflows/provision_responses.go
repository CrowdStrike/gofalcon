// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ProvisionReader is a Reader for the Provision structure.
type ProvisionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProvisionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProvisionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewProvisionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewProvisionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProvisionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewProvisionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewProvisionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /workflows/system-definitions/provision/v1] Provision", response, response.Code())
	}
}

// NewProvisionOK creates a ProvisionOK with default headers values
func NewProvisionOK() *ProvisionOK {
	return &ProvisionOK{}
}

/*
ProvisionOK describes a response with status code 200, with default header values.

OK
*/
type ProvisionOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this provision o k response has a 2xx status code
func (o *ProvisionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this provision o k response has a 3xx status code
func (o *ProvisionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this provision o k response has a 4xx status code
func (o *ProvisionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this provision o k response has a 5xx status code
func (o *ProvisionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this provision o k response a status code equal to that given
func (o *ProvisionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the provision o k response
func (o *ProvisionOK) Code() int {
	return 200
}

func (o *ProvisionOK) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] provisionOK  %+v", 200, o.Payload)
}

func (o *ProvisionOK) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] provisionOK  %+v", 200, o.Payload)
}

func (o *ProvisionOK) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *ProvisionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProvisionBadRequest creates a ProvisionBadRequest with default headers values
func NewProvisionBadRequest() *ProvisionBadRequest {
	return &ProvisionBadRequest{}
}

/*
ProvisionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ProvisionBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this provision bad request response has a 2xx status code
func (o *ProvisionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this provision bad request response has a 3xx status code
func (o *ProvisionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this provision bad request response has a 4xx status code
func (o *ProvisionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this provision bad request response has a 5xx status code
func (o *ProvisionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this provision bad request response a status code equal to that given
func (o *ProvisionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the provision bad request response
func (o *ProvisionBadRequest) Code() int {
	return 400
}

func (o *ProvisionBadRequest) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] provisionBadRequest  %+v", 400, o.Payload)
}

func (o *ProvisionBadRequest) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] provisionBadRequest  %+v", 400, o.Payload)
}

func (o *ProvisionBadRequest) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *ProvisionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProvisionForbidden creates a ProvisionForbidden with default headers values
func NewProvisionForbidden() *ProvisionForbidden {
	return &ProvisionForbidden{}
}

/*
ProvisionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ProvisionForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this provision forbidden response has a 2xx status code
func (o *ProvisionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this provision forbidden response has a 3xx status code
func (o *ProvisionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this provision forbidden response has a 4xx status code
func (o *ProvisionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this provision forbidden response has a 5xx status code
func (o *ProvisionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this provision forbidden response a status code equal to that given
func (o *ProvisionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the provision forbidden response
func (o *ProvisionForbidden) Code() int {
	return 403
}

func (o *ProvisionForbidden) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] provisionForbidden  %+v", 403, o.Payload)
}

func (o *ProvisionForbidden) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] provisionForbidden  %+v", 403, o.Payload)
}

func (o *ProvisionForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ProvisionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProvisionNotFound creates a ProvisionNotFound with default headers values
func NewProvisionNotFound() *ProvisionNotFound {
	return &ProvisionNotFound{}
}

/*
ProvisionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ProvisionNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this provision not found response has a 2xx status code
func (o *ProvisionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this provision not found response has a 3xx status code
func (o *ProvisionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this provision not found response has a 4xx status code
func (o *ProvisionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this provision not found response has a 5xx status code
func (o *ProvisionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this provision not found response a status code equal to that given
func (o *ProvisionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the provision not found response
func (o *ProvisionNotFound) Code() int {
	return 404
}

func (o *ProvisionNotFound) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] provisionNotFound  %+v", 404, o.Payload)
}

func (o *ProvisionNotFound) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] provisionNotFound  %+v", 404, o.Payload)
}

func (o *ProvisionNotFound) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *ProvisionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProvisionTooManyRequests creates a ProvisionTooManyRequests with default headers values
func NewProvisionTooManyRequests() *ProvisionTooManyRequests {
	return &ProvisionTooManyRequests{}
}

/*
ProvisionTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ProvisionTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this provision too many requests response has a 2xx status code
func (o *ProvisionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this provision too many requests response has a 3xx status code
func (o *ProvisionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this provision too many requests response has a 4xx status code
func (o *ProvisionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this provision too many requests response has a 5xx status code
func (o *ProvisionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this provision too many requests response a status code equal to that given
func (o *ProvisionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the provision too many requests response
func (o *ProvisionTooManyRequests) Code() int {
	return 429
}

func (o *ProvisionTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] provisionTooManyRequests  %+v", 429, o.Payload)
}

func (o *ProvisionTooManyRequests) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] provisionTooManyRequests  %+v", 429, o.Payload)
}

func (o *ProvisionTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ProvisionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProvisionInternalServerError creates a ProvisionInternalServerError with default headers values
func NewProvisionInternalServerError() *ProvisionInternalServerError {
	return &ProvisionInternalServerError{}
}

/*
ProvisionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ProvisionInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this provision internal server error response has a 2xx status code
func (o *ProvisionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this provision internal server error response has a 3xx status code
func (o *ProvisionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this provision internal server error response has a 4xx status code
func (o *ProvisionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this provision internal server error response has a 5xx status code
func (o *ProvisionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this provision internal server error response a status code equal to that given
func (o *ProvisionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the provision internal server error response
func (o *ProvisionInternalServerError) Code() int {
	return 500
}

func (o *ProvisionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] provisionInternalServerError  %+v", 500, o.Payload)
}

func (o *ProvisionInternalServerError) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/provision/v1][%d] provisionInternalServerError  %+v", 500, o.Payload)
}

func (o *ProvisionInternalServerError) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *ProvisionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
