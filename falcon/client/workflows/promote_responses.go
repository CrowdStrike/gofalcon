// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// PromoteReader is a Reader for the Promote structure.
type PromoteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PromoteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPromoteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPromoteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPromoteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPromoteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPromoteTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPromoteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /workflows/system-definitions/promote/v1] Promote", response, response.Code())
	}
}

// NewPromoteOK creates a PromoteOK with default headers values
func NewPromoteOK() *PromoteOK {
	return &PromoteOK{}
}

/*
PromoteOK describes a response with status code 200, with default header values.

OK
*/
type PromoteOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this promote o k response has a 2xx status code
func (o *PromoteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this promote o k response has a 3xx status code
func (o *PromoteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this promote o k response has a 4xx status code
func (o *PromoteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this promote o k response has a 5xx status code
func (o *PromoteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this promote o k response a status code equal to that given
func (o *PromoteOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the promote o k response
func (o *PromoteOK) Code() int {
	return 200
}

func (o *PromoteOK) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] promoteOK  %+v", 200, o.Payload)
}

func (o *PromoteOK) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] promoteOK  %+v", 200, o.Payload)
}

func (o *PromoteOK) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *PromoteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPromoteBadRequest creates a PromoteBadRequest with default headers values
func NewPromoteBadRequest() *PromoteBadRequest {
	return &PromoteBadRequest{}
}

/*
PromoteBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PromoteBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this promote bad request response has a 2xx status code
func (o *PromoteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this promote bad request response has a 3xx status code
func (o *PromoteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this promote bad request response has a 4xx status code
func (o *PromoteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this promote bad request response has a 5xx status code
func (o *PromoteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this promote bad request response a status code equal to that given
func (o *PromoteBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the promote bad request response
func (o *PromoteBadRequest) Code() int {
	return 400
}

func (o *PromoteBadRequest) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] promoteBadRequest  %+v", 400, o.Payload)
}

func (o *PromoteBadRequest) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] promoteBadRequest  %+v", 400, o.Payload)
}

func (o *PromoteBadRequest) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *PromoteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPromoteForbidden creates a PromoteForbidden with default headers values
func NewPromoteForbidden() *PromoteForbidden {
	return &PromoteForbidden{}
}

/*
PromoteForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PromoteForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this promote forbidden response has a 2xx status code
func (o *PromoteForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this promote forbidden response has a 3xx status code
func (o *PromoteForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this promote forbidden response has a 4xx status code
func (o *PromoteForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this promote forbidden response has a 5xx status code
func (o *PromoteForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this promote forbidden response a status code equal to that given
func (o *PromoteForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the promote forbidden response
func (o *PromoteForbidden) Code() int {
	return 403
}

func (o *PromoteForbidden) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] promoteForbidden  %+v", 403, o.Payload)
}

func (o *PromoteForbidden) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] promoteForbidden  %+v", 403, o.Payload)
}

func (o *PromoteForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *PromoteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPromoteNotFound creates a PromoteNotFound with default headers values
func NewPromoteNotFound() *PromoteNotFound {
	return &PromoteNotFound{}
}

/*
PromoteNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PromoteNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this promote not found response has a 2xx status code
func (o *PromoteNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this promote not found response has a 3xx status code
func (o *PromoteNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this promote not found response has a 4xx status code
func (o *PromoteNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this promote not found response has a 5xx status code
func (o *PromoteNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this promote not found response a status code equal to that given
func (o *PromoteNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the promote not found response
func (o *PromoteNotFound) Code() int {
	return 404
}

func (o *PromoteNotFound) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] promoteNotFound  %+v", 404, o.Payload)
}

func (o *PromoteNotFound) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] promoteNotFound  %+v", 404, o.Payload)
}

func (o *PromoteNotFound) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *PromoteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPromoteTooManyRequests creates a PromoteTooManyRequests with default headers values
func NewPromoteTooManyRequests() *PromoteTooManyRequests {
	return &PromoteTooManyRequests{}
}

/*
PromoteTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type PromoteTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this promote too many requests response has a 2xx status code
func (o *PromoteTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this promote too many requests response has a 3xx status code
func (o *PromoteTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this promote too many requests response has a 4xx status code
func (o *PromoteTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this promote too many requests response has a 5xx status code
func (o *PromoteTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this promote too many requests response a status code equal to that given
func (o *PromoteTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the promote too many requests response
func (o *PromoteTooManyRequests) Code() int {
	return 429
}

func (o *PromoteTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] promoteTooManyRequests  %+v", 429, o.Payload)
}

func (o *PromoteTooManyRequests) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] promoteTooManyRequests  %+v", 429, o.Payload)
}

func (o *PromoteTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *PromoteTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPromoteInternalServerError creates a PromoteInternalServerError with default headers values
func NewPromoteInternalServerError() *PromoteInternalServerError {
	return &PromoteInternalServerError{}
}

/*
PromoteInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PromoteInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientSystemDefinitionCreateResponse
}

// IsSuccess returns true when this promote internal server error response has a 2xx status code
func (o *PromoteInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this promote internal server error response has a 3xx status code
func (o *PromoteInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this promote internal server error response has a 4xx status code
func (o *PromoteInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this promote internal server error response has a 5xx status code
func (o *PromoteInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this promote internal server error response a status code equal to that given
func (o *PromoteInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the promote internal server error response
func (o *PromoteInternalServerError) Code() int {
	return 500
}

func (o *PromoteInternalServerError) Error() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] promoteInternalServerError  %+v", 500, o.Payload)
}

func (o *PromoteInternalServerError) String() string {
	return fmt.Sprintf("[POST /workflows/system-definitions/promote/v1][%d] promoteInternalServerError  %+v", 500, o.Payload)
}

func (o *PromoteInternalServerError) GetPayload() *models.ClientSystemDefinitionCreateResponse {
	return o.Payload
}

func (o *PromoteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientSystemDefinitionCreateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
