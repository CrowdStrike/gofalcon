// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// WorkflowDefinitionsCreateReader is a Reader for the WorkflowDefinitionsCreate structure.
type WorkflowDefinitionsCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WorkflowDefinitionsCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewWorkflowDefinitionsCreateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewWorkflowDefinitionsCreateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewWorkflowDefinitionsCreateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewWorkflowDefinitionsCreateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewWorkflowDefinitionsCreateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewWorkflowDefinitionsCreateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /workflows/entities/definitions/v1] WorkflowDefinitionsCreate", response, response.Code())
	}
}

// NewWorkflowDefinitionsCreateOK creates a WorkflowDefinitionsCreateOK with default headers values
func NewWorkflowDefinitionsCreateOK() *WorkflowDefinitionsCreateOK {
	return &WorkflowDefinitionsCreateOK{}
}

/*
WorkflowDefinitionsCreateOK describes a response with status code 200, with default header values.

OK
*/
type WorkflowDefinitionsCreateOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIResourceIDsResponse
}

// IsSuccess returns true when this workflow definitions create o k response has a 2xx status code
func (o *WorkflowDefinitionsCreateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this workflow definitions create o k response has a 3xx status code
func (o *WorkflowDefinitionsCreateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions create o k response has a 4xx status code
func (o *WorkflowDefinitionsCreateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this workflow definitions create o k response has a 5xx status code
func (o *WorkflowDefinitionsCreateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions create o k response a status code equal to that given
func (o *WorkflowDefinitionsCreateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the workflow definitions create o k response
func (o *WorkflowDefinitionsCreateOK) Code() int {
	return 200
}

func (o *WorkflowDefinitionsCreateOK) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/definitions/v1][%d] workflowDefinitionsCreateOK  %+v", 200, o.Payload)
}

func (o *WorkflowDefinitionsCreateOK) String() string {
	return fmt.Sprintf("[POST /workflows/entities/definitions/v1][%d] workflowDefinitionsCreateOK  %+v", 200, o.Payload)
}

func (o *WorkflowDefinitionsCreateOK) GetPayload() *models.APIResourceIDsResponse {
	return o.Payload
}

func (o *WorkflowDefinitionsCreateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIResourceIDsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsCreateBadRequest creates a WorkflowDefinitionsCreateBadRequest with default headers values
func NewWorkflowDefinitionsCreateBadRequest() *WorkflowDefinitionsCreateBadRequest {
	return &WorkflowDefinitionsCreateBadRequest{}
}

/*
WorkflowDefinitionsCreateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type WorkflowDefinitionsCreateBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIResourceIDsResponse
}

// IsSuccess returns true when this workflow definitions create bad request response has a 2xx status code
func (o *WorkflowDefinitionsCreateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions create bad request response has a 3xx status code
func (o *WorkflowDefinitionsCreateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions create bad request response has a 4xx status code
func (o *WorkflowDefinitionsCreateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow definitions create bad request response has a 5xx status code
func (o *WorkflowDefinitionsCreateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions create bad request response a status code equal to that given
func (o *WorkflowDefinitionsCreateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the workflow definitions create bad request response
func (o *WorkflowDefinitionsCreateBadRequest) Code() int {
	return 400
}

func (o *WorkflowDefinitionsCreateBadRequest) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/definitions/v1][%d] workflowDefinitionsCreateBadRequest  %+v", 400, o.Payload)
}

func (o *WorkflowDefinitionsCreateBadRequest) String() string {
	return fmt.Sprintf("[POST /workflows/entities/definitions/v1][%d] workflowDefinitionsCreateBadRequest  %+v", 400, o.Payload)
}

func (o *WorkflowDefinitionsCreateBadRequest) GetPayload() *models.APIResourceIDsResponse {
	return o.Payload
}

func (o *WorkflowDefinitionsCreateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIResourceIDsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsCreateForbidden creates a WorkflowDefinitionsCreateForbidden with default headers values
func NewWorkflowDefinitionsCreateForbidden() *WorkflowDefinitionsCreateForbidden {
	return &WorkflowDefinitionsCreateForbidden{}
}

/*
WorkflowDefinitionsCreateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type WorkflowDefinitionsCreateForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this workflow definitions create forbidden response has a 2xx status code
func (o *WorkflowDefinitionsCreateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions create forbidden response has a 3xx status code
func (o *WorkflowDefinitionsCreateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions create forbidden response has a 4xx status code
func (o *WorkflowDefinitionsCreateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow definitions create forbidden response has a 5xx status code
func (o *WorkflowDefinitionsCreateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions create forbidden response a status code equal to that given
func (o *WorkflowDefinitionsCreateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the workflow definitions create forbidden response
func (o *WorkflowDefinitionsCreateForbidden) Code() int {
	return 403
}

func (o *WorkflowDefinitionsCreateForbidden) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/definitions/v1][%d] workflowDefinitionsCreateForbidden  %+v", 403, o.Payload)
}

func (o *WorkflowDefinitionsCreateForbidden) String() string {
	return fmt.Sprintf("[POST /workflows/entities/definitions/v1][%d] workflowDefinitionsCreateForbidden  %+v", 403, o.Payload)
}

func (o *WorkflowDefinitionsCreateForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *WorkflowDefinitionsCreateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsCreateNotFound creates a WorkflowDefinitionsCreateNotFound with default headers values
func NewWorkflowDefinitionsCreateNotFound() *WorkflowDefinitionsCreateNotFound {
	return &WorkflowDefinitionsCreateNotFound{}
}

/*
WorkflowDefinitionsCreateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type WorkflowDefinitionsCreateNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIResourceIDsResponse
}

// IsSuccess returns true when this workflow definitions create not found response has a 2xx status code
func (o *WorkflowDefinitionsCreateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions create not found response has a 3xx status code
func (o *WorkflowDefinitionsCreateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions create not found response has a 4xx status code
func (o *WorkflowDefinitionsCreateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow definitions create not found response has a 5xx status code
func (o *WorkflowDefinitionsCreateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions create not found response a status code equal to that given
func (o *WorkflowDefinitionsCreateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the workflow definitions create not found response
func (o *WorkflowDefinitionsCreateNotFound) Code() int {
	return 404
}

func (o *WorkflowDefinitionsCreateNotFound) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/definitions/v1][%d] workflowDefinitionsCreateNotFound  %+v", 404, o.Payload)
}

func (o *WorkflowDefinitionsCreateNotFound) String() string {
	return fmt.Sprintf("[POST /workflows/entities/definitions/v1][%d] workflowDefinitionsCreateNotFound  %+v", 404, o.Payload)
}

func (o *WorkflowDefinitionsCreateNotFound) GetPayload() *models.APIResourceIDsResponse {
	return o.Payload
}

func (o *WorkflowDefinitionsCreateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIResourceIDsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsCreateTooManyRequests creates a WorkflowDefinitionsCreateTooManyRequests with default headers values
func NewWorkflowDefinitionsCreateTooManyRequests() *WorkflowDefinitionsCreateTooManyRequests {
	return &WorkflowDefinitionsCreateTooManyRequests{}
}

/*
WorkflowDefinitionsCreateTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type WorkflowDefinitionsCreateTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this workflow definitions create too many requests response has a 2xx status code
func (o *WorkflowDefinitionsCreateTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions create too many requests response has a 3xx status code
func (o *WorkflowDefinitionsCreateTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions create too many requests response has a 4xx status code
func (o *WorkflowDefinitionsCreateTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow definitions create too many requests response has a 5xx status code
func (o *WorkflowDefinitionsCreateTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions create too many requests response a status code equal to that given
func (o *WorkflowDefinitionsCreateTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the workflow definitions create too many requests response
func (o *WorkflowDefinitionsCreateTooManyRequests) Code() int {
	return 429
}

func (o *WorkflowDefinitionsCreateTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/definitions/v1][%d] workflowDefinitionsCreateTooManyRequests  %+v", 429, o.Payload)
}

func (o *WorkflowDefinitionsCreateTooManyRequests) String() string {
	return fmt.Sprintf("[POST /workflows/entities/definitions/v1][%d] workflowDefinitionsCreateTooManyRequests  %+v", 429, o.Payload)
}

func (o *WorkflowDefinitionsCreateTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *WorkflowDefinitionsCreateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsCreateInternalServerError creates a WorkflowDefinitionsCreateInternalServerError with default headers values
func NewWorkflowDefinitionsCreateInternalServerError() *WorkflowDefinitionsCreateInternalServerError {
	return &WorkflowDefinitionsCreateInternalServerError{}
}

/*
WorkflowDefinitionsCreateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type WorkflowDefinitionsCreateInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIResourceIDsResponse
}

// IsSuccess returns true when this workflow definitions create internal server error response has a 2xx status code
func (o *WorkflowDefinitionsCreateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions create internal server error response has a 3xx status code
func (o *WorkflowDefinitionsCreateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions create internal server error response has a 4xx status code
func (o *WorkflowDefinitionsCreateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this workflow definitions create internal server error response has a 5xx status code
func (o *WorkflowDefinitionsCreateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this workflow definitions create internal server error response a status code equal to that given
func (o *WorkflowDefinitionsCreateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the workflow definitions create internal server error response
func (o *WorkflowDefinitionsCreateInternalServerError) Code() int {
	return 500
}

func (o *WorkflowDefinitionsCreateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /workflows/entities/definitions/v1][%d] workflowDefinitionsCreateInternalServerError  %+v", 500, o.Payload)
}

func (o *WorkflowDefinitionsCreateInternalServerError) String() string {
	return fmt.Sprintf("[POST /workflows/entities/definitions/v1][%d] workflowDefinitionsCreateInternalServerError  %+v", 500, o.Payload)
}

func (o *WorkflowDefinitionsCreateInternalServerError) GetPayload() *models.APIResourceIDsResponse {
	return o.Payload
}

func (o *WorkflowDefinitionsCreateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIResourceIDsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
