// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExecutionResultsReader is a Reader for the ExecutionResults structure.
type ExecutionResultsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecutionResultsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecutionResultsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExecutionResultsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExecutionResultsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExecutionResultsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExecutionResultsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExecutionResultsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /workflows/entities/execution-results/v1] ExecutionResults", response, response.Code())
	}
}

// NewExecutionResultsOK creates a ExecutionResultsOK with default headers values
func NewExecutionResultsOK() *ExecutionResultsOK {
	return &ExecutionResultsOK{}
}

/*
ExecutionResultsOK describes a response with status code 200, with default header values.

OK
*/
type ExecutionResultsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIExecutionResultsResponse
}

// IsSuccess returns true when this execution results o k response has a 2xx status code
func (o *ExecutionResultsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this execution results o k response has a 3xx status code
func (o *ExecutionResultsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execution results o k response has a 4xx status code
func (o *ExecutionResultsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this execution results o k response has a 5xx status code
func (o *ExecutionResultsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this execution results o k response a status code equal to that given
func (o *ExecutionResultsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the execution results o k response
func (o *ExecutionResultsOK) Code() int {
	return 200
}

func (o *ExecutionResultsOK) Error() string {
	return fmt.Sprintf("[GET /workflows/entities/execution-results/v1][%d] executionResultsOK  %+v", 200, o.Payload)
}

func (o *ExecutionResultsOK) String() string {
	return fmt.Sprintf("[GET /workflows/entities/execution-results/v1][%d] executionResultsOK  %+v", 200, o.Payload)
}

func (o *ExecutionResultsOK) GetPayload() *models.APIExecutionResultsResponse {
	return o.Payload
}

func (o *ExecutionResultsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIExecutionResultsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutionResultsBadRequest creates a ExecutionResultsBadRequest with default headers values
func NewExecutionResultsBadRequest() *ExecutionResultsBadRequest {
	return &ExecutionResultsBadRequest{}
}

/*
ExecutionResultsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExecutionResultsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIExecutionResultsResponse
}

// IsSuccess returns true when this execution results bad request response has a 2xx status code
func (o *ExecutionResultsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execution results bad request response has a 3xx status code
func (o *ExecutionResultsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execution results bad request response has a 4xx status code
func (o *ExecutionResultsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this execution results bad request response has a 5xx status code
func (o *ExecutionResultsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this execution results bad request response a status code equal to that given
func (o *ExecutionResultsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the execution results bad request response
func (o *ExecutionResultsBadRequest) Code() int {
	return 400
}

func (o *ExecutionResultsBadRequest) Error() string {
	return fmt.Sprintf("[GET /workflows/entities/execution-results/v1][%d] executionResultsBadRequest  %+v", 400, o.Payload)
}

func (o *ExecutionResultsBadRequest) String() string {
	return fmt.Sprintf("[GET /workflows/entities/execution-results/v1][%d] executionResultsBadRequest  %+v", 400, o.Payload)
}

func (o *ExecutionResultsBadRequest) GetPayload() *models.APIExecutionResultsResponse {
	return o.Payload
}

func (o *ExecutionResultsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIExecutionResultsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutionResultsForbidden creates a ExecutionResultsForbidden with default headers values
func NewExecutionResultsForbidden() *ExecutionResultsForbidden {
	return &ExecutionResultsForbidden{}
}

/*
ExecutionResultsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExecutionResultsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execution results forbidden response has a 2xx status code
func (o *ExecutionResultsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execution results forbidden response has a 3xx status code
func (o *ExecutionResultsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execution results forbidden response has a 4xx status code
func (o *ExecutionResultsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this execution results forbidden response has a 5xx status code
func (o *ExecutionResultsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this execution results forbidden response a status code equal to that given
func (o *ExecutionResultsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the execution results forbidden response
func (o *ExecutionResultsForbidden) Code() int {
	return 403
}

func (o *ExecutionResultsForbidden) Error() string {
	return fmt.Sprintf("[GET /workflows/entities/execution-results/v1][%d] executionResultsForbidden  %+v", 403, o.Payload)
}

func (o *ExecutionResultsForbidden) String() string {
	return fmt.Sprintf("[GET /workflows/entities/execution-results/v1][%d] executionResultsForbidden  %+v", 403, o.Payload)
}

func (o *ExecutionResultsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecutionResultsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutionResultsNotFound creates a ExecutionResultsNotFound with default headers values
func NewExecutionResultsNotFound() *ExecutionResultsNotFound {
	return &ExecutionResultsNotFound{}
}

/*
ExecutionResultsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ExecutionResultsNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIExecutionResultsResponse
}

// IsSuccess returns true when this execution results not found response has a 2xx status code
func (o *ExecutionResultsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execution results not found response has a 3xx status code
func (o *ExecutionResultsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execution results not found response has a 4xx status code
func (o *ExecutionResultsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this execution results not found response has a 5xx status code
func (o *ExecutionResultsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this execution results not found response a status code equal to that given
func (o *ExecutionResultsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the execution results not found response
func (o *ExecutionResultsNotFound) Code() int {
	return 404
}

func (o *ExecutionResultsNotFound) Error() string {
	return fmt.Sprintf("[GET /workflows/entities/execution-results/v1][%d] executionResultsNotFound  %+v", 404, o.Payload)
}

func (o *ExecutionResultsNotFound) String() string {
	return fmt.Sprintf("[GET /workflows/entities/execution-results/v1][%d] executionResultsNotFound  %+v", 404, o.Payload)
}

func (o *ExecutionResultsNotFound) GetPayload() *models.APIExecutionResultsResponse {
	return o.Payload
}

func (o *ExecutionResultsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIExecutionResultsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutionResultsTooManyRequests creates a ExecutionResultsTooManyRequests with default headers values
func NewExecutionResultsTooManyRequests() *ExecutionResultsTooManyRequests {
	return &ExecutionResultsTooManyRequests{}
}

/*
ExecutionResultsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExecutionResultsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execution results too many requests response has a 2xx status code
func (o *ExecutionResultsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execution results too many requests response has a 3xx status code
func (o *ExecutionResultsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execution results too many requests response has a 4xx status code
func (o *ExecutionResultsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this execution results too many requests response has a 5xx status code
func (o *ExecutionResultsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this execution results too many requests response a status code equal to that given
func (o *ExecutionResultsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the execution results too many requests response
func (o *ExecutionResultsTooManyRequests) Code() int {
	return 429
}

func (o *ExecutionResultsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /workflows/entities/execution-results/v1][%d] executionResultsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ExecutionResultsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /workflows/entities/execution-results/v1][%d] executionResultsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ExecutionResultsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecutionResultsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecutionResultsInternalServerError creates a ExecutionResultsInternalServerError with default headers values
func NewExecutionResultsInternalServerError() *ExecutionResultsInternalServerError {
	return &ExecutionResultsInternalServerError{}
}

/*
ExecutionResultsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ExecutionResultsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIExecutionResultsResponse
}

// IsSuccess returns true when this execution results internal server error response has a 2xx status code
func (o *ExecutionResultsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execution results internal server error response has a 3xx status code
func (o *ExecutionResultsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execution results internal server error response has a 4xx status code
func (o *ExecutionResultsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this execution results internal server error response has a 5xx status code
func (o *ExecutionResultsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this execution results internal server error response a status code equal to that given
func (o *ExecutionResultsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the execution results internal server error response
func (o *ExecutionResultsInternalServerError) Code() int {
	return 500
}

func (o *ExecutionResultsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /workflows/entities/execution-results/v1][%d] executionResultsInternalServerError  %+v", 500, o.Payload)
}

func (o *ExecutionResultsInternalServerError) String() string {
	return fmt.Sprintf("[GET /workflows/entities/execution-results/v1][%d] executionResultsInternalServerError  %+v", 500, o.Payload)
}

func (o *ExecutionResultsInternalServerError) GetPayload() *models.APIExecutionResultsResponse {
	return o.Payload
}

func (o *ExecutionResultsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIExecutionResultsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
