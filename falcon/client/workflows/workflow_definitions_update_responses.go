// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// WorkflowDefinitionsUpdateReader is a Reader for the WorkflowDefinitionsUpdate structure.
type WorkflowDefinitionsUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WorkflowDefinitionsUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewWorkflowDefinitionsUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewWorkflowDefinitionsUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewWorkflowDefinitionsUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewWorkflowDefinitionsUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewWorkflowDefinitionsUpdateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewWorkflowDefinitionsUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /workflows/entities/definitions/v1] WorkflowDefinitionsUpdate", response, response.Code())
	}
}

// NewWorkflowDefinitionsUpdateOK creates a WorkflowDefinitionsUpdateOK with default headers values
func NewWorkflowDefinitionsUpdateOK() *WorkflowDefinitionsUpdateOK {
	return &WorkflowDefinitionsUpdateOK{}
}

/*
WorkflowDefinitionsUpdateOK describes a response with status code 200, with default header values.

OK
*/
type WorkflowDefinitionsUpdateOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIResourceIDsResponse
}

// IsSuccess returns true when this workflow definitions update o k response has a 2xx status code
func (o *WorkflowDefinitionsUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this workflow definitions update o k response has a 3xx status code
func (o *WorkflowDefinitionsUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions update o k response has a 4xx status code
func (o *WorkflowDefinitionsUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this workflow definitions update o k response has a 5xx status code
func (o *WorkflowDefinitionsUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions update o k response a status code equal to that given
func (o *WorkflowDefinitionsUpdateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the workflow definitions update o k response
func (o *WorkflowDefinitionsUpdateOK) Code() int {
	return 200
}

func (o *WorkflowDefinitionsUpdateOK) Error() string {
	return fmt.Sprintf("[PUT /workflows/entities/definitions/v1][%d] workflowDefinitionsUpdateOK  %+v", 200, o.Payload)
}

func (o *WorkflowDefinitionsUpdateOK) String() string {
	return fmt.Sprintf("[PUT /workflows/entities/definitions/v1][%d] workflowDefinitionsUpdateOK  %+v", 200, o.Payload)
}

func (o *WorkflowDefinitionsUpdateOK) GetPayload() *models.APIResourceIDsResponse {
	return o.Payload
}

func (o *WorkflowDefinitionsUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIResourceIDsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsUpdateBadRequest creates a WorkflowDefinitionsUpdateBadRequest with default headers values
func NewWorkflowDefinitionsUpdateBadRequest() *WorkflowDefinitionsUpdateBadRequest {
	return &WorkflowDefinitionsUpdateBadRequest{}
}

/*
WorkflowDefinitionsUpdateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type WorkflowDefinitionsUpdateBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIResourceIDsResponse
}

// IsSuccess returns true when this workflow definitions update bad request response has a 2xx status code
func (o *WorkflowDefinitionsUpdateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions update bad request response has a 3xx status code
func (o *WorkflowDefinitionsUpdateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions update bad request response has a 4xx status code
func (o *WorkflowDefinitionsUpdateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow definitions update bad request response has a 5xx status code
func (o *WorkflowDefinitionsUpdateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions update bad request response a status code equal to that given
func (o *WorkflowDefinitionsUpdateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the workflow definitions update bad request response
func (o *WorkflowDefinitionsUpdateBadRequest) Code() int {
	return 400
}

func (o *WorkflowDefinitionsUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /workflows/entities/definitions/v1][%d] workflowDefinitionsUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *WorkflowDefinitionsUpdateBadRequest) String() string {
	return fmt.Sprintf("[PUT /workflows/entities/definitions/v1][%d] workflowDefinitionsUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *WorkflowDefinitionsUpdateBadRequest) GetPayload() *models.APIResourceIDsResponse {
	return o.Payload
}

func (o *WorkflowDefinitionsUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIResourceIDsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsUpdateForbidden creates a WorkflowDefinitionsUpdateForbidden with default headers values
func NewWorkflowDefinitionsUpdateForbidden() *WorkflowDefinitionsUpdateForbidden {
	return &WorkflowDefinitionsUpdateForbidden{}
}

/*
WorkflowDefinitionsUpdateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type WorkflowDefinitionsUpdateForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this workflow definitions update forbidden response has a 2xx status code
func (o *WorkflowDefinitionsUpdateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions update forbidden response has a 3xx status code
func (o *WorkflowDefinitionsUpdateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions update forbidden response has a 4xx status code
func (o *WorkflowDefinitionsUpdateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow definitions update forbidden response has a 5xx status code
func (o *WorkflowDefinitionsUpdateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions update forbidden response a status code equal to that given
func (o *WorkflowDefinitionsUpdateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the workflow definitions update forbidden response
func (o *WorkflowDefinitionsUpdateForbidden) Code() int {
	return 403
}

func (o *WorkflowDefinitionsUpdateForbidden) Error() string {
	return fmt.Sprintf("[PUT /workflows/entities/definitions/v1][%d] workflowDefinitionsUpdateForbidden  %+v", 403, o.Payload)
}

func (o *WorkflowDefinitionsUpdateForbidden) String() string {
	return fmt.Sprintf("[PUT /workflows/entities/definitions/v1][%d] workflowDefinitionsUpdateForbidden  %+v", 403, o.Payload)
}

func (o *WorkflowDefinitionsUpdateForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *WorkflowDefinitionsUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsUpdateNotFound creates a WorkflowDefinitionsUpdateNotFound with default headers values
func NewWorkflowDefinitionsUpdateNotFound() *WorkflowDefinitionsUpdateNotFound {
	return &WorkflowDefinitionsUpdateNotFound{}
}

/*
WorkflowDefinitionsUpdateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type WorkflowDefinitionsUpdateNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIResourceIDsResponse
}

// IsSuccess returns true when this workflow definitions update not found response has a 2xx status code
func (o *WorkflowDefinitionsUpdateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions update not found response has a 3xx status code
func (o *WorkflowDefinitionsUpdateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions update not found response has a 4xx status code
func (o *WorkflowDefinitionsUpdateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow definitions update not found response has a 5xx status code
func (o *WorkflowDefinitionsUpdateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions update not found response a status code equal to that given
func (o *WorkflowDefinitionsUpdateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the workflow definitions update not found response
func (o *WorkflowDefinitionsUpdateNotFound) Code() int {
	return 404
}

func (o *WorkflowDefinitionsUpdateNotFound) Error() string {
	return fmt.Sprintf("[PUT /workflows/entities/definitions/v1][%d] workflowDefinitionsUpdateNotFound  %+v", 404, o.Payload)
}

func (o *WorkflowDefinitionsUpdateNotFound) String() string {
	return fmt.Sprintf("[PUT /workflows/entities/definitions/v1][%d] workflowDefinitionsUpdateNotFound  %+v", 404, o.Payload)
}

func (o *WorkflowDefinitionsUpdateNotFound) GetPayload() *models.APIResourceIDsResponse {
	return o.Payload
}

func (o *WorkflowDefinitionsUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIResourceIDsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsUpdateTooManyRequests creates a WorkflowDefinitionsUpdateTooManyRequests with default headers values
func NewWorkflowDefinitionsUpdateTooManyRequests() *WorkflowDefinitionsUpdateTooManyRequests {
	return &WorkflowDefinitionsUpdateTooManyRequests{}
}

/*
WorkflowDefinitionsUpdateTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type WorkflowDefinitionsUpdateTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this workflow definitions update too many requests response has a 2xx status code
func (o *WorkflowDefinitionsUpdateTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions update too many requests response has a 3xx status code
func (o *WorkflowDefinitionsUpdateTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions update too many requests response has a 4xx status code
func (o *WorkflowDefinitionsUpdateTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this workflow definitions update too many requests response has a 5xx status code
func (o *WorkflowDefinitionsUpdateTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this workflow definitions update too many requests response a status code equal to that given
func (o *WorkflowDefinitionsUpdateTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the workflow definitions update too many requests response
func (o *WorkflowDefinitionsUpdateTooManyRequests) Code() int {
	return 429
}

func (o *WorkflowDefinitionsUpdateTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /workflows/entities/definitions/v1][%d] workflowDefinitionsUpdateTooManyRequests  %+v", 429, o.Payload)
}

func (o *WorkflowDefinitionsUpdateTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /workflows/entities/definitions/v1][%d] workflowDefinitionsUpdateTooManyRequests  %+v", 429, o.Payload)
}

func (o *WorkflowDefinitionsUpdateTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *WorkflowDefinitionsUpdateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWorkflowDefinitionsUpdateInternalServerError creates a WorkflowDefinitionsUpdateInternalServerError with default headers values
func NewWorkflowDefinitionsUpdateInternalServerError() *WorkflowDefinitionsUpdateInternalServerError {
	return &WorkflowDefinitionsUpdateInternalServerError{}
}

/*
WorkflowDefinitionsUpdateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type WorkflowDefinitionsUpdateInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIResourceIDsResponse
}

// IsSuccess returns true when this workflow definitions update internal server error response has a 2xx status code
func (o *WorkflowDefinitionsUpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this workflow definitions update internal server error response has a 3xx status code
func (o *WorkflowDefinitionsUpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this workflow definitions update internal server error response has a 4xx status code
func (o *WorkflowDefinitionsUpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this workflow definitions update internal server error response has a 5xx status code
func (o *WorkflowDefinitionsUpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this workflow definitions update internal server error response a status code equal to that given
func (o *WorkflowDefinitionsUpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the workflow definitions update internal server error response
func (o *WorkflowDefinitionsUpdateInternalServerError) Code() int {
	return 500
}

func (o *WorkflowDefinitionsUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /workflows/entities/definitions/v1][%d] workflowDefinitionsUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *WorkflowDefinitionsUpdateInternalServerError) String() string {
	return fmt.Sprintf("[PUT /workflows/entities/definitions/v1][%d] workflowDefinitionsUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *WorkflowDefinitionsUpdateInternalServerError) GetPayload() *models.APIResourceIDsResponse {
	return o.Payload
}

func (o *WorkflowDefinitionsUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIResourceIDsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
