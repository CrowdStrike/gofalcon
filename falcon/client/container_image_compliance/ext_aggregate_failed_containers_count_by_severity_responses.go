// Code generated by go-swagger; DO NOT EDIT.

package container_image_compliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExtAggregateFailedContainersCountBySeverityReader is a Reader for the ExtAggregateFailedContainersCountBySeverity structure.
type ExtAggregateFailedContainersCountBySeverityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExtAggregateFailedContainersCountBySeverityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExtAggregateFailedContainersCountBySeverityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExtAggregateFailedContainersCountBySeverityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExtAggregateFailedContainersCountBySeverityUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExtAggregateFailedContainersCountBySeverityForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExtAggregateFailedContainersCountBySeverityTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExtAggregateFailedContainersCountBySeverityInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /container-compliance/aggregates/failed-containers-count-by-severity/v2] extAggregateFailedContainersCountBySeverity", response, response.Code())
	}
}

// NewExtAggregateFailedContainersCountBySeverityOK creates a ExtAggregateFailedContainersCountBySeverityOK with default headers values
func NewExtAggregateFailedContainersCountBySeverityOK() *ExtAggregateFailedContainersCountBySeverityOK {
	return &ExtAggregateFailedContainersCountBySeverityOK{}
}

/*
ExtAggregateFailedContainersCountBySeverityOK describes a response with status code 200, with default header values.

OK
*/
type ExtAggregateFailedContainersCountBySeverityOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateFailedAssetCountBySeverityResponse
}

// IsSuccess returns true when this ext aggregate failed containers count by severity o k response has a 2xx status code
func (o *ExtAggregateFailedContainersCountBySeverityOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this ext aggregate failed containers count by severity o k response has a 3xx status code
func (o *ExtAggregateFailedContainersCountBySeverityOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed containers count by severity o k response has a 4xx status code
func (o *ExtAggregateFailedContainersCountBySeverityOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this ext aggregate failed containers count by severity o k response has a 5xx status code
func (o *ExtAggregateFailedContainersCountBySeverityOK) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate failed containers count by severity o k response a status code equal to that given
func (o *ExtAggregateFailedContainersCountBySeverityOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the ext aggregate failed containers count by severity o k response
func (o *ExtAggregateFailedContainersCountBySeverityOK) Code() int {
	return 200
}

func (o *ExtAggregateFailedContainersCountBySeverityOK) Error() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-containers-count-by-severity/v2][%d] extAggregateFailedContainersCountBySeverityOK  %+v", 200, o.Payload)
}

func (o *ExtAggregateFailedContainersCountBySeverityOK) String() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-containers-count-by-severity/v2][%d] extAggregateFailedContainersCountBySeverityOK  %+v", 200, o.Payload)
}

func (o *ExtAggregateFailedContainersCountBySeverityOK) GetPayload() *models.DomainAggregateFailedAssetCountBySeverityResponse {
	return o.Payload
}

func (o *ExtAggregateFailedContainersCountBySeverityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateFailedAssetCountBySeverityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateFailedContainersCountBySeverityBadRequest creates a ExtAggregateFailedContainersCountBySeverityBadRequest with default headers values
func NewExtAggregateFailedContainersCountBySeverityBadRequest() *ExtAggregateFailedContainersCountBySeverityBadRequest {
	return &ExtAggregateFailedContainersCountBySeverityBadRequest{}
}

/*
ExtAggregateFailedContainersCountBySeverityBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExtAggregateFailedContainersCountBySeverityBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateFailedAssetCountBySeverityResponse
}

// IsSuccess returns true when this ext aggregate failed containers count by severity bad request response has a 2xx status code
func (o *ExtAggregateFailedContainersCountBySeverityBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate failed containers count by severity bad request response has a 3xx status code
func (o *ExtAggregateFailedContainersCountBySeverityBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed containers count by severity bad request response has a 4xx status code
func (o *ExtAggregateFailedContainersCountBySeverityBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate failed containers count by severity bad request response has a 5xx status code
func (o *ExtAggregateFailedContainersCountBySeverityBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate failed containers count by severity bad request response a status code equal to that given
func (o *ExtAggregateFailedContainersCountBySeverityBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the ext aggregate failed containers count by severity bad request response
func (o *ExtAggregateFailedContainersCountBySeverityBadRequest) Code() int {
	return 400
}

func (o *ExtAggregateFailedContainersCountBySeverityBadRequest) Error() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-containers-count-by-severity/v2][%d] extAggregateFailedContainersCountBySeverityBadRequest  %+v", 400, o.Payload)
}

func (o *ExtAggregateFailedContainersCountBySeverityBadRequest) String() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-containers-count-by-severity/v2][%d] extAggregateFailedContainersCountBySeverityBadRequest  %+v", 400, o.Payload)
}

func (o *ExtAggregateFailedContainersCountBySeverityBadRequest) GetPayload() *models.DomainAggregateFailedAssetCountBySeverityResponse {
	return o.Payload
}

func (o *ExtAggregateFailedContainersCountBySeverityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateFailedAssetCountBySeverityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateFailedContainersCountBySeverityUnauthorized creates a ExtAggregateFailedContainersCountBySeverityUnauthorized with default headers values
func NewExtAggregateFailedContainersCountBySeverityUnauthorized() *ExtAggregateFailedContainersCountBySeverityUnauthorized {
	return &ExtAggregateFailedContainersCountBySeverityUnauthorized{}
}

/*
ExtAggregateFailedContainersCountBySeverityUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExtAggregateFailedContainersCountBySeverityUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateFailedAssetCountBySeverityResponse
}

// IsSuccess returns true when this ext aggregate failed containers count by severity unauthorized response has a 2xx status code
func (o *ExtAggregateFailedContainersCountBySeverityUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate failed containers count by severity unauthorized response has a 3xx status code
func (o *ExtAggregateFailedContainersCountBySeverityUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed containers count by severity unauthorized response has a 4xx status code
func (o *ExtAggregateFailedContainersCountBySeverityUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate failed containers count by severity unauthorized response has a 5xx status code
func (o *ExtAggregateFailedContainersCountBySeverityUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate failed containers count by severity unauthorized response a status code equal to that given
func (o *ExtAggregateFailedContainersCountBySeverityUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the ext aggregate failed containers count by severity unauthorized response
func (o *ExtAggregateFailedContainersCountBySeverityUnauthorized) Code() int {
	return 401
}

func (o *ExtAggregateFailedContainersCountBySeverityUnauthorized) Error() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-containers-count-by-severity/v2][%d] extAggregateFailedContainersCountBySeverityUnauthorized  %+v", 401, o.Payload)
}

func (o *ExtAggregateFailedContainersCountBySeverityUnauthorized) String() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-containers-count-by-severity/v2][%d] extAggregateFailedContainersCountBySeverityUnauthorized  %+v", 401, o.Payload)
}

func (o *ExtAggregateFailedContainersCountBySeverityUnauthorized) GetPayload() *models.DomainAggregateFailedAssetCountBySeverityResponse {
	return o.Payload
}

func (o *ExtAggregateFailedContainersCountBySeverityUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateFailedAssetCountBySeverityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateFailedContainersCountBySeverityForbidden creates a ExtAggregateFailedContainersCountBySeverityForbidden with default headers values
func NewExtAggregateFailedContainersCountBySeverityForbidden() *ExtAggregateFailedContainersCountBySeverityForbidden {
	return &ExtAggregateFailedContainersCountBySeverityForbidden{}
}

/*
ExtAggregateFailedContainersCountBySeverityForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExtAggregateFailedContainersCountBySeverityForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateFailedAssetCountBySeverityResponse
}

// IsSuccess returns true when this ext aggregate failed containers count by severity forbidden response has a 2xx status code
func (o *ExtAggregateFailedContainersCountBySeverityForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate failed containers count by severity forbidden response has a 3xx status code
func (o *ExtAggregateFailedContainersCountBySeverityForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed containers count by severity forbidden response has a 4xx status code
func (o *ExtAggregateFailedContainersCountBySeverityForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate failed containers count by severity forbidden response has a 5xx status code
func (o *ExtAggregateFailedContainersCountBySeverityForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate failed containers count by severity forbidden response a status code equal to that given
func (o *ExtAggregateFailedContainersCountBySeverityForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the ext aggregate failed containers count by severity forbidden response
func (o *ExtAggregateFailedContainersCountBySeverityForbidden) Code() int {
	return 403
}

func (o *ExtAggregateFailedContainersCountBySeverityForbidden) Error() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-containers-count-by-severity/v2][%d] extAggregateFailedContainersCountBySeverityForbidden  %+v", 403, o.Payload)
}

func (o *ExtAggregateFailedContainersCountBySeverityForbidden) String() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-containers-count-by-severity/v2][%d] extAggregateFailedContainersCountBySeverityForbidden  %+v", 403, o.Payload)
}

func (o *ExtAggregateFailedContainersCountBySeverityForbidden) GetPayload() *models.DomainAggregateFailedAssetCountBySeverityResponse {
	return o.Payload
}

func (o *ExtAggregateFailedContainersCountBySeverityForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateFailedAssetCountBySeverityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateFailedContainersCountBySeverityTooManyRequests creates a ExtAggregateFailedContainersCountBySeverityTooManyRequests with default headers values
func NewExtAggregateFailedContainersCountBySeverityTooManyRequests() *ExtAggregateFailedContainersCountBySeverityTooManyRequests {
	return &ExtAggregateFailedContainersCountBySeverityTooManyRequests{}
}

/*
ExtAggregateFailedContainersCountBySeverityTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExtAggregateFailedContainersCountBySeverityTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this ext aggregate failed containers count by severity too many requests response has a 2xx status code
func (o *ExtAggregateFailedContainersCountBySeverityTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate failed containers count by severity too many requests response has a 3xx status code
func (o *ExtAggregateFailedContainersCountBySeverityTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed containers count by severity too many requests response has a 4xx status code
func (o *ExtAggregateFailedContainersCountBySeverityTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate failed containers count by severity too many requests response has a 5xx status code
func (o *ExtAggregateFailedContainersCountBySeverityTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate failed containers count by severity too many requests response a status code equal to that given
func (o *ExtAggregateFailedContainersCountBySeverityTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the ext aggregate failed containers count by severity too many requests response
func (o *ExtAggregateFailedContainersCountBySeverityTooManyRequests) Code() int {
	return 429
}

func (o *ExtAggregateFailedContainersCountBySeverityTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-containers-count-by-severity/v2][%d] extAggregateFailedContainersCountBySeverityTooManyRequests  %+v", 429, o.Payload)
}

func (o *ExtAggregateFailedContainersCountBySeverityTooManyRequests) String() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-containers-count-by-severity/v2][%d] extAggregateFailedContainersCountBySeverityTooManyRequests  %+v", 429, o.Payload)
}

func (o *ExtAggregateFailedContainersCountBySeverityTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExtAggregateFailedContainersCountBySeverityTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateFailedContainersCountBySeverityInternalServerError creates a ExtAggregateFailedContainersCountBySeverityInternalServerError with default headers values
func NewExtAggregateFailedContainersCountBySeverityInternalServerError() *ExtAggregateFailedContainersCountBySeverityInternalServerError {
	return &ExtAggregateFailedContainersCountBySeverityInternalServerError{}
}

/*
ExtAggregateFailedContainersCountBySeverityInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ExtAggregateFailedContainersCountBySeverityInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateFailedAssetCountBySeverityResponse
}

// IsSuccess returns true when this ext aggregate failed containers count by severity internal server error response has a 2xx status code
func (o *ExtAggregateFailedContainersCountBySeverityInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate failed containers count by severity internal server error response has a 3xx status code
func (o *ExtAggregateFailedContainersCountBySeverityInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed containers count by severity internal server error response has a 4xx status code
func (o *ExtAggregateFailedContainersCountBySeverityInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this ext aggregate failed containers count by severity internal server error response has a 5xx status code
func (o *ExtAggregateFailedContainersCountBySeverityInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this ext aggregate failed containers count by severity internal server error response a status code equal to that given
func (o *ExtAggregateFailedContainersCountBySeverityInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the ext aggregate failed containers count by severity internal server error response
func (o *ExtAggregateFailedContainersCountBySeverityInternalServerError) Code() int {
	return 500
}

func (o *ExtAggregateFailedContainersCountBySeverityInternalServerError) Error() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-containers-count-by-severity/v2][%d] extAggregateFailedContainersCountBySeverityInternalServerError  %+v", 500, o.Payload)
}

func (o *ExtAggregateFailedContainersCountBySeverityInternalServerError) String() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-containers-count-by-severity/v2][%d] extAggregateFailedContainersCountBySeverityInternalServerError  %+v", 500, o.Payload)
}

func (o *ExtAggregateFailedContainersCountBySeverityInternalServerError) GetPayload() *models.DomainAggregateFailedAssetCountBySeverityResponse {
	return o.Payload
}

func (o *ExtAggregateFailedContainersCountBySeverityInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateFailedAssetCountBySeverityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
