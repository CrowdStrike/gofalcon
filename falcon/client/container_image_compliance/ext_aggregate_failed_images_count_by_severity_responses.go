// Code generated by go-swagger; DO NOT EDIT.

package container_image_compliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExtAggregateFailedImagesCountBySeverityReader is a Reader for the ExtAggregateFailedImagesCountBySeverity structure.
type ExtAggregateFailedImagesCountBySeverityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExtAggregateFailedImagesCountBySeverityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExtAggregateFailedImagesCountBySeverityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExtAggregateFailedImagesCountBySeverityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExtAggregateFailedImagesCountBySeverityUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExtAggregateFailedImagesCountBySeverityForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExtAggregateFailedImagesCountBySeverityTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExtAggregateFailedImagesCountBySeverityInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /container-compliance/aggregates/failed-images-count-by-severity/v2] extAggregateFailedImagesCountBySeverity", response, response.Code())
	}
}

// NewExtAggregateFailedImagesCountBySeverityOK creates a ExtAggregateFailedImagesCountBySeverityOK with default headers values
func NewExtAggregateFailedImagesCountBySeverityOK() *ExtAggregateFailedImagesCountBySeverityOK {
	return &ExtAggregateFailedImagesCountBySeverityOK{}
}

/*
ExtAggregateFailedImagesCountBySeverityOK describes a response with status code 200, with default header values.

OK
*/
type ExtAggregateFailedImagesCountBySeverityOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateFailedAssetCountBySeverityResponse
}

// IsSuccess returns true when this ext aggregate failed images count by severity o k response has a 2xx status code
func (o *ExtAggregateFailedImagesCountBySeverityOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this ext aggregate failed images count by severity o k response has a 3xx status code
func (o *ExtAggregateFailedImagesCountBySeverityOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed images count by severity o k response has a 4xx status code
func (o *ExtAggregateFailedImagesCountBySeverityOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this ext aggregate failed images count by severity o k response has a 5xx status code
func (o *ExtAggregateFailedImagesCountBySeverityOK) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate failed images count by severity o k response a status code equal to that given
func (o *ExtAggregateFailedImagesCountBySeverityOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the ext aggregate failed images count by severity o k response
func (o *ExtAggregateFailedImagesCountBySeverityOK) Code() int {
	return 200
}

func (o *ExtAggregateFailedImagesCountBySeverityOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-images-count-by-severity/v2][%d] extAggregateFailedImagesCountBySeverityOK %s", 200, payload)
}

func (o *ExtAggregateFailedImagesCountBySeverityOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-images-count-by-severity/v2][%d] extAggregateFailedImagesCountBySeverityOK %s", 200, payload)
}

func (o *ExtAggregateFailedImagesCountBySeverityOK) GetPayload() *models.DomainAggregateFailedAssetCountBySeverityResponse {
	return o.Payload
}

func (o *ExtAggregateFailedImagesCountBySeverityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateFailedAssetCountBySeverityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateFailedImagesCountBySeverityBadRequest creates a ExtAggregateFailedImagesCountBySeverityBadRequest with default headers values
func NewExtAggregateFailedImagesCountBySeverityBadRequest() *ExtAggregateFailedImagesCountBySeverityBadRequest {
	return &ExtAggregateFailedImagesCountBySeverityBadRequest{}
}

/*
ExtAggregateFailedImagesCountBySeverityBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExtAggregateFailedImagesCountBySeverityBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateFailedAssetCountBySeverityResponse
}

// IsSuccess returns true when this ext aggregate failed images count by severity bad request response has a 2xx status code
func (o *ExtAggregateFailedImagesCountBySeverityBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate failed images count by severity bad request response has a 3xx status code
func (o *ExtAggregateFailedImagesCountBySeverityBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed images count by severity bad request response has a 4xx status code
func (o *ExtAggregateFailedImagesCountBySeverityBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate failed images count by severity bad request response has a 5xx status code
func (o *ExtAggregateFailedImagesCountBySeverityBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate failed images count by severity bad request response a status code equal to that given
func (o *ExtAggregateFailedImagesCountBySeverityBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the ext aggregate failed images count by severity bad request response
func (o *ExtAggregateFailedImagesCountBySeverityBadRequest) Code() int {
	return 400
}

func (o *ExtAggregateFailedImagesCountBySeverityBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-images-count-by-severity/v2][%d] extAggregateFailedImagesCountBySeverityBadRequest %s", 400, payload)
}

func (o *ExtAggregateFailedImagesCountBySeverityBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-images-count-by-severity/v2][%d] extAggregateFailedImagesCountBySeverityBadRequest %s", 400, payload)
}

func (o *ExtAggregateFailedImagesCountBySeverityBadRequest) GetPayload() *models.DomainAggregateFailedAssetCountBySeverityResponse {
	return o.Payload
}

func (o *ExtAggregateFailedImagesCountBySeverityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateFailedAssetCountBySeverityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateFailedImagesCountBySeverityUnauthorized creates a ExtAggregateFailedImagesCountBySeverityUnauthorized with default headers values
func NewExtAggregateFailedImagesCountBySeverityUnauthorized() *ExtAggregateFailedImagesCountBySeverityUnauthorized {
	return &ExtAggregateFailedImagesCountBySeverityUnauthorized{}
}

/*
ExtAggregateFailedImagesCountBySeverityUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExtAggregateFailedImagesCountBySeverityUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateFailedAssetCountBySeverityResponse
}

// IsSuccess returns true when this ext aggregate failed images count by severity unauthorized response has a 2xx status code
func (o *ExtAggregateFailedImagesCountBySeverityUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate failed images count by severity unauthorized response has a 3xx status code
func (o *ExtAggregateFailedImagesCountBySeverityUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed images count by severity unauthorized response has a 4xx status code
func (o *ExtAggregateFailedImagesCountBySeverityUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate failed images count by severity unauthorized response has a 5xx status code
func (o *ExtAggregateFailedImagesCountBySeverityUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate failed images count by severity unauthorized response a status code equal to that given
func (o *ExtAggregateFailedImagesCountBySeverityUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the ext aggregate failed images count by severity unauthorized response
func (o *ExtAggregateFailedImagesCountBySeverityUnauthorized) Code() int {
	return 401
}

func (o *ExtAggregateFailedImagesCountBySeverityUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-images-count-by-severity/v2][%d] extAggregateFailedImagesCountBySeverityUnauthorized %s", 401, payload)
}

func (o *ExtAggregateFailedImagesCountBySeverityUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-images-count-by-severity/v2][%d] extAggregateFailedImagesCountBySeverityUnauthorized %s", 401, payload)
}

func (o *ExtAggregateFailedImagesCountBySeverityUnauthorized) GetPayload() *models.DomainAggregateFailedAssetCountBySeverityResponse {
	return o.Payload
}

func (o *ExtAggregateFailedImagesCountBySeverityUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateFailedAssetCountBySeverityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateFailedImagesCountBySeverityForbidden creates a ExtAggregateFailedImagesCountBySeverityForbidden with default headers values
func NewExtAggregateFailedImagesCountBySeverityForbidden() *ExtAggregateFailedImagesCountBySeverityForbidden {
	return &ExtAggregateFailedImagesCountBySeverityForbidden{}
}

/*
ExtAggregateFailedImagesCountBySeverityForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExtAggregateFailedImagesCountBySeverityForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateFailedAssetCountBySeverityResponse
}

// IsSuccess returns true when this ext aggregate failed images count by severity forbidden response has a 2xx status code
func (o *ExtAggregateFailedImagesCountBySeverityForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate failed images count by severity forbidden response has a 3xx status code
func (o *ExtAggregateFailedImagesCountBySeverityForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed images count by severity forbidden response has a 4xx status code
func (o *ExtAggregateFailedImagesCountBySeverityForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate failed images count by severity forbidden response has a 5xx status code
func (o *ExtAggregateFailedImagesCountBySeverityForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate failed images count by severity forbidden response a status code equal to that given
func (o *ExtAggregateFailedImagesCountBySeverityForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the ext aggregate failed images count by severity forbidden response
func (o *ExtAggregateFailedImagesCountBySeverityForbidden) Code() int {
	return 403
}

func (o *ExtAggregateFailedImagesCountBySeverityForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-images-count-by-severity/v2][%d] extAggregateFailedImagesCountBySeverityForbidden %s", 403, payload)
}

func (o *ExtAggregateFailedImagesCountBySeverityForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-images-count-by-severity/v2][%d] extAggregateFailedImagesCountBySeverityForbidden %s", 403, payload)
}

func (o *ExtAggregateFailedImagesCountBySeverityForbidden) GetPayload() *models.DomainAggregateFailedAssetCountBySeverityResponse {
	return o.Payload
}

func (o *ExtAggregateFailedImagesCountBySeverityForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateFailedAssetCountBySeverityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateFailedImagesCountBySeverityTooManyRequests creates a ExtAggregateFailedImagesCountBySeverityTooManyRequests with default headers values
func NewExtAggregateFailedImagesCountBySeverityTooManyRequests() *ExtAggregateFailedImagesCountBySeverityTooManyRequests {
	return &ExtAggregateFailedImagesCountBySeverityTooManyRequests{}
}

/*
ExtAggregateFailedImagesCountBySeverityTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExtAggregateFailedImagesCountBySeverityTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this ext aggregate failed images count by severity too many requests response has a 2xx status code
func (o *ExtAggregateFailedImagesCountBySeverityTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate failed images count by severity too many requests response has a 3xx status code
func (o *ExtAggregateFailedImagesCountBySeverityTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed images count by severity too many requests response has a 4xx status code
func (o *ExtAggregateFailedImagesCountBySeverityTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate failed images count by severity too many requests response has a 5xx status code
func (o *ExtAggregateFailedImagesCountBySeverityTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate failed images count by severity too many requests response a status code equal to that given
func (o *ExtAggregateFailedImagesCountBySeverityTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the ext aggregate failed images count by severity too many requests response
func (o *ExtAggregateFailedImagesCountBySeverityTooManyRequests) Code() int {
	return 429
}

func (o *ExtAggregateFailedImagesCountBySeverityTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-images-count-by-severity/v2][%d] extAggregateFailedImagesCountBySeverityTooManyRequests %s", 429, payload)
}

func (o *ExtAggregateFailedImagesCountBySeverityTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-images-count-by-severity/v2][%d] extAggregateFailedImagesCountBySeverityTooManyRequests %s", 429, payload)
}

func (o *ExtAggregateFailedImagesCountBySeverityTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExtAggregateFailedImagesCountBySeverityTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateFailedImagesCountBySeverityInternalServerError creates a ExtAggregateFailedImagesCountBySeverityInternalServerError with default headers values
func NewExtAggregateFailedImagesCountBySeverityInternalServerError() *ExtAggregateFailedImagesCountBySeverityInternalServerError {
	return &ExtAggregateFailedImagesCountBySeverityInternalServerError{}
}

/*
ExtAggregateFailedImagesCountBySeverityInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ExtAggregateFailedImagesCountBySeverityInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateFailedAssetCountBySeverityResponse
}

// IsSuccess returns true when this ext aggregate failed images count by severity internal server error response has a 2xx status code
func (o *ExtAggregateFailedImagesCountBySeverityInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate failed images count by severity internal server error response has a 3xx status code
func (o *ExtAggregateFailedImagesCountBySeverityInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed images count by severity internal server error response has a 4xx status code
func (o *ExtAggregateFailedImagesCountBySeverityInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this ext aggregate failed images count by severity internal server error response has a 5xx status code
func (o *ExtAggregateFailedImagesCountBySeverityInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this ext aggregate failed images count by severity internal server error response a status code equal to that given
func (o *ExtAggregateFailedImagesCountBySeverityInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the ext aggregate failed images count by severity internal server error response
func (o *ExtAggregateFailedImagesCountBySeverityInternalServerError) Code() int {
	return 500
}

func (o *ExtAggregateFailedImagesCountBySeverityInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-images-count-by-severity/v2][%d] extAggregateFailedImagesCountBySeverityInternalServerError %s", 500, payload)
}

func (o *ExtAggregateFailedImagesCountBySeverityInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-images-count-by-severity/v2][%d] extAggregateFailedImagesCountBySeverityInternalServerError %s", 500, payload)
}

func (o *ExtAggregateFailedImagesCountBySeverityInternalServerError) GetPayload() *models.DomainAggregateFailedAssetCountBySeverityResponse {
	return o.Payload
}

func (o *ExtAggregateFailedImagesCountBySeverityInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateFailedAssetCountBySeverityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
