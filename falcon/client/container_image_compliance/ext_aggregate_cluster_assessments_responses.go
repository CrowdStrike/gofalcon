// Code generated by go-swagger; DO NOT EDIT.

package container_image_compliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExtAggregateClusterAssessmentsReader is a Reader for the ExtAggregateClusterAssessments structure.
type ExtAggregateClusterAssessmentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExtAggregateClusterAssessmentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExtAggregateClusterAssessmentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExtAggregateClusterAssessmentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExtAggregateClusterAssessmentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExtAggregateClusterAssessmentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExtAggregateClusterAssessmentsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExtAggregateClusterAssessmentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /container-compliance/aggregates/compliance-by-clusters/v2] extAggregateClusterAssessments", response, response.Code())
	}
}

// NewExtAggregateClusterAssessmentsOK creates a ExtAggregateClusterAssessmentsOK with default headers values
func NewExtAggregateClusterAssessmentsOK() *ExtAggregateClusterAssessmentsOK {
	return &ExtAggregateClusterAssessmentsOK{}
}

/*
ExtAggregateClusterAssessmentsOK describes a response with status code 200, with default header values.

OK
*/
type ExtAggregateClusterAssessmentsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateClusterAssessmentsResponse
}

// IsSuccess returns true when this ext aggregate cluster assessments o k response has a 2xx status code
func (o *ExtAggregateClusterAssessmentsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this ext aggregate cluster assessments o k response has a 3xx status code
func (o *ExtAggregateClusterAssessmentsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate cluster assessments o k response has a 4xx status code
func (o *ExtAggregateClusterAssessmentsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this ext aggregate cluster assessments o k response has a 5xx status code
func (o *ExtAggregateClusterAssessmentsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate cluster assessments o k response a status code equal to that given
func (o *ExtAggregateClusterAssessmentsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the ext aggregate cluster assessments o k response
func (o *ExtAggregateClusterAssessmentsOK) Code() int {
	return 200
}

func (o *ExtAggregateClusterAssessmentsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-clusters/v2][%d] extAggregateClusterAssessmentsOK %s", 200, payload)
}

func (o *ExtAggregateClusterAssessmentsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-clusters/v2][%d] extAggregateClusterAssessmentsOK %s", 200, payload)
}

func (o *ExtAggregateClusterAssessmentsOK) GetPayload() *models.DomainAggregateClusterAssessmentsResponse {
	return o.Payload
}

func (o *ExtAggregateClusterAssessmentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateClusterAssessmentsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateClusterAssessmentsBadRequest creates a ExtAggregateClusterAssessmentsBadRequest with default headers values
func NewExtAggregateClusterAssessmentsBadRequest() *ExtAggregateClusterAssessmentsBadRequest {
	return &ExtAggregateClusterAssessmentsBadRequest{}
}

/*
ExtAggregateClusterAssessmentsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExtAggregateClusterAssessmentsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateClusterAssessmentsResponse
}

// IsSuccess returns true when this ext aggregate cluster assessments bad request response has a 2xx status code
func (o *ExtAggregateClusterAssessmentsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate cluster assessments bad request response has a 3xx status code
func (o *ExtAggregateClusterAssessmentsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate cluster assessments bad request response has a 4xx status code
func (o *ExtAggregateClusterAssessmentsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate cluster assessments bad request response has a 5xx status code
func (o *ExtAggregateClusterAssessmentsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate cluster assessments bad request response a status code equal to that given
func (o *ExtAggregateClusterAssessmentsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the ext aggregate cluster assessments bad request response
func (o *ExtAggregateClusterAssessmentsBadRequest) Code() int {
	return 400
}

func (o *ExtAggregateClusterAssessmentsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-clusters/v2][%d] extAggregateClusterAssessmentsBadRequest %s", 400, payload)
}

func (o *ExtAggregateClusterAssessmentsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-clusters/v2][%d] extAggregateClusterAssessmentsBadRequest %s", 400, payload)
}

func (o *ExtAggregateClusterAssessmentsBadRequest) GetPayload() *models.DomainAggregateClusterAssessmentsResponse {
	return o.Payload
}

func (o *ExtAggregateClusterAssessmentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateClusterAssessmentsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateClusterAssessmentsUnauthorized creates a ExtAggregateClusterAssessmentsUnauthorized with default headers values
func NewExtAggregateClusterAssessmentsUnauthorized() *ExtAggregateClusterAssessmentsUnauthorized {
	return &ExtAggregateClusterAssessmentsUnauthorized{}
}

/*
ExtAggregateClusterAssessmentsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExtAggregateClusterAssessmentsUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateClusterAssessmentsResponse
}

// IsSuccess returns true when this ext aggregate cluster assessments unauthorized response has a 2xx status code
func (o *ExtAggregateClusterAssessmentsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate cluster assessments unauthorized response has a 3xx status code
func (o *ExtAggregateClusterAssessmentsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate cluster assessments unauthorized response has a 4xx status code
func (o *ExtAggregateClusterAssessmentsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate cluster assessments unauthorized response has a 5xx status code
func (o *ExtAggregateClusterAssessmentsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate cluster assessments unauthorized response a status code equal to that given
func (o *ExtAggregateClusterAssessmentsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the ext aggregate cluster assessments unauthorized response
func (o *ExtAggregateClusterAssessmentsUnauthorized) Code() int {
	return 401
}

func (o *ExtAggregateClusterAssessmentsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-clusters/v2][%d] extAggregateClusterAssessmentsUnauthorized %s", 401, payload)
}

func (o *ExtAggregateClusterAssessmentsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-clusters/v2][%d] extAggregateClusterAssessmentsUnauthorized %s", 401, payload)
}

func (o *ExtAggregateClusterAssessmentsUnauthorized) GetPayload() *models.DomainAggregateClusterAssessmentsResponse {
	return o.Payload
}

func (o *ExtAggregateClusterAssessmentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateClusterAssessmentsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateClusterAssessmentsForbidden creates a ExtAggregateClusterAssessmentsForbidden with default headers values
func NewExtAggregateClusterAssessmentsForbidden() *ExtAggregateClusterAssessmentsForbidden {
	return &ExtAggregateClusterAssessmentsForbidden{}
}

/*
ExtAggregateClusterAssessmentsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExtAggregateClusterAssessmentsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateClusterAssessmentsResponse
}

// IsSuccess returns true when this ext aggregate cluster assessments forbidden response has a 2xx status code
func (o *ExtAggregateClusterAssessmentsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate cluster assessments forbidden response has a 3xx status code
func (o *ExtAggregateClusterAssessmentsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate cluster assessments forbidden response has a 4xx status code
func (o *ExtAggregateClusterAssessmentsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate cluster assessments forbidden response has a 5xx status code
func (o *ExtAggregateClusterAssessmentsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate cluster assessments forbidden response a status code equal to that given
func (o *ExtAggregateClusterAssessmentsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the ext aggregate cluster assessments forbidden response
func (o *ExtAggregateClusterAssessmentsForbidden) Code() int {
	return 403
}

func (o *ExtAggregateClusterAssessmentsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-clusters/v2][%d] extAggregateClusterAssessmentsForbidden %s", 403, payload)
}

func (o *ExtAggregateClusterAssessmentsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-clusters/v2][%d] extAggregateClusterAssessmentsForbidden %s", 403, payload)
}

func (o *ExtAggregateClusterAssessmentsForbidden) GetPayload() *models.DomainAggregateClusterAssessmentsResponse {
	return o.Payload
}

func (o *ExtAggregateClusterAssessmentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateClusterAssessmentsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateClusterAssessmentsTooManyRequests creates a ExtAggregateClusterAssessmentsTooManyRequests with default headers values
func NewExtAggregateClusterAssessmentsTooManyRequests() *ExtAggregateClusterAssessmentsTooManyRequests {
	return &ExtAggregateClusterAssessmentsTooManyRequests{}
}

/*
ExtAggregateClusterAssessmentsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExtAggregateClusterAssessmentsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this ext aggregate cluster assessments too many requests response has a 2xx status code
func (o *ExtAggregateClusterAssessmentsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate cluster assessments too many requests response has a 3xx status code
func (o *ExtAggregateClusterAssessmentsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate cluster assessments too many requests response has a 4xx status code
func (o *ExtAggregateClusterAssessmentsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate cluster assessments too many requests response has a 5xx status code
func (o *ExtAggregateClusterAssessmentsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate cluster assessments too many requests response a status code equal to that given
func (o *ExtAggregateClusterAssessmentsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the ext aggregate cluster assessments too many requests response
func (o *ExtAggregateClusterAssessmentsTooManyRequests) Code() int {
	return 429
}

func (o *ExtAggregateClusterAssessmentsTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-clusters/v2][%d] extAggregateClusterAssessmentsTooManyRequests %s", 429, payload)
}

func (o *ExtAggregateClusterAssessmentsTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-clusters/v2][%d] extAggregateClusterAssessmentsTooManyRequests %s", 429, payload)
}

func (o *ExtAggregateClusterAssessmentsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExtAggregateClusterAssessmentsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateClusterAssessmentsInternalServerError creates a ExtAggregateClusterAssessmentsInternalServerError with default headers values
func NewExtAggregateClusterAssessmentsInternalServerError() *ExtAggregateClusterAssessmentsInternalServerError {
	return &ExtAggregateClusterAssessmentsInternalServerError{}
}

/*
ExtAggregateClusterAssessmentsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ExtAggregateClusterAssessmentsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateClusterAssessmentsResponse
}

// IsSuccess returns true when this ext aggregate cluster assessments internal server error response has a 2xx status code
func (o *ExtAggregateClusterAssessmentsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate cluster assessments internal server error response has a 3xx status code
func (o *ExtAggregateClusterAssessmentsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate cluster assessments internal server error response has a 4xx status code
func (o *ExtAggregateClusterAssessmentsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this ext aggregate cluster assessments internal server error response has a 5xx status code
func (o *ExtAggregateClusterAssessmentsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this ext aggregate cluster assessments internal server error response a status code equal to that given
func (o *ExtAggregateClusterAssessmentsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the ext aggregate cluster assessments internal server error response
func (o *ExtAggregateClusterAssessmentsInternalServerError) Code() int {
	return 500
}

func (o *ExtAggregateClusterAssessmentsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-clusters/v2][%d] extAggregateClusterAssessmentsInternalServerError %s", 500, payload)
}

func (o *ExtAggregateClusterAssessmentsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-clusters/v2][%d] extAggregateClusterAssessmentsInternalServerError %s", 500, payload)
}

func (o *ExtAggregateClusterAssessmentsInternalServerError) GetPayload() *models.DomainAggregateClusterAssessmentsResponse {
	return o.Payload
}

func (o *ExtAggregateClusterAssessmentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateClusterAssessmentsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
