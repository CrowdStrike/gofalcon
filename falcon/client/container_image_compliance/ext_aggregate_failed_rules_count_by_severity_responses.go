// Code generated by go-swagger; DO NOT EDIT.

package container_image_compliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExtAggregateFailedRulesCountBySeverityReader is a Reader for the ExtAggregateFailedRulesCountBySeverity structure.
type ExtAggregateFailedRulesCountBySeverityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExtAggregateFailedRulesCountBySeverityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExtAggregateFailedRulesCountBySeverityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExtAggregateFailedRulesCountBySeverityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExtAggregateFailedRulesCountBySeverityUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExtAggregateFailedRulesCountBySeverityForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExtAggregateFailedRulesCountBySeverityTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExtAggregateFailedRulesCountBySeverityInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /container-compliance/aggregates/failed-rules-count-by-severity/v2] extAggregateFailedRulesCountBySeverity", response, response.Code())
	}
}

// NewExtAggregateFailedRulesCountBySeverityOK creates a ExtAggregateFailedRulesCountBySeverityOK with default headers values
func NewExtAggregateFailedRulesCountBySeverityOK() *ExtAggregateFailedRulesCountBySeverityOK {
	return &ExtAggregateFailedRulesCountBySeverityOK{}
}

/*
ExtAggregateFailedRulesCountBySeverityOK describes a response with status code 200, with default header values.

OK
*/
type ExtAggregateFailedRulesCountBySeverityOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateFailedRulesCountBySeverityResponse
}

// IsSuccess returns true when this ext aggregate failed rules count by severity o k response has a 2xx status code
func (o *ExtAggregateFailedRulesCountBySeverityOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this ext aggregate failed rules count by severity o k response has a 3xx status code
func (o *ExtAggregateFailedRulesCountBySeverityOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed rules count by severity o k response has a 4xx status code
func (o *ExtAggregateFailedRulesCountBySeverityOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this ext aggregate failed rules count by severity o k response has a 5xx status code
func (o *ExtAggregateFailedRulesCountBySeverityOK) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate failed rules count by severity o k response a status code equal to that given
func (o *ExtAggregateFailedRulesCountBySeverityOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the ext aggregate failed rules count by severity o k response
func (o *ExtAggregateFailedRulesCountBySeverityOK) Code() int {
	return 200
}

func (o *ExtAggregateFailedRulesCountBySeverityOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-count-by-severity/v2][%d] extAggregateFailedRulesCountBySeverityOK %s", 200, payload)
}

func (o *ExtAggregateFailedRulesCountBySeverityOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-count-by-severity/v2][%d] extAggregateFailedRulesCountBySeverityOK %s", 200, payload)
}

func (o *ExtAggregateFailedRulesCountBySeverityOK) GetPayload() *models.DomainAggregateFailedRulesCountBySeverityResponse {
	return o.Payload
}

func (o *ExtAggregateFailedRulesCountBySeverityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateFailedRulesCountBySeverityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateFailedRulesCountBySeverityBadRequest creates a ExtAggregateFailedRulesCountBySeverityBadRequest with default headers values
func NewExtAggregateFailedRulesCountBySeverityBadRequest() *ExtAggregateFailedRulesCountBySeverityBadRequest {
	return &ExtAggregateFailedRulesCountBySeverityBadRequest{}
}

/*
ExtAggregateFailedRulesCountBySeverityBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExtAggregateFailedRulesCountBySeverityBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateFailedRulesCountBySeverityResponse
}

// IsSuccess returns true when this ext aggregate failed rules count by severity bad request response has a 2xx status code
func (o *ExtAggregateFailedRulesCountBySeverityBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate failed rules count by severity bad request response has a 3xx status code
func (o *ExtAggregateFailedRulesCountBySeverityBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed rules count by severity bad request response has a 4xx status code
func (o *ExtAggregateFailedRulesCountBySeverityBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate failed rules count by severity bad request response has a 5xx status code
func (o *ExtAggregateFailedRulesCountBySeverityBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate failed rules count by severity bad request response a status code equal to that given
func (o *ExtAggregateFailedRulesCountBySeverityBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the ext aggregate failed rules count by severity bad request response
func (o *ExtAggregateFailedRulesCountBySeverityBadRequest) Code() int {
	return 400
}

func (o *ExtAggregateFailedRulesCountBySeverityBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-count-by-severity/v2][%d] extAggregateFailedRulesCountBySeverityBadRequest %s", 400, payload)
}

func (o *ExtAggregateFailedRulesCountBySeverityBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-count-by-severity/v2][%d] extAggregateFailedRulesCountBySeverityBadRequest %s", 400, payload)
}

func (o *ExtAggregateFailedRulesCountBySeverityBadRequest) GetPayload() *models.DomainAggregateFailedRulesCountBySeverityResponse {
	return o.Payload
}

func (o *ExtAggregateFailedRulesCountBySeverityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateFailedRulesCountBySeverityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateFailedRulesCountBySeverityUnauthorized creates a ExtAggregateFailedRulesCountBySeverityUnauthorized with default headers values
func NewExtAggregateFailedRulesCountBySeverityUnauthorized() *ExtAggregateFailedRulesCountBySeverityUnauthorized {
	return &ExtAggregateFailedRulesCountBySeverityUnauthorized{}
}

/*
ExtAggregateFailedRulesCountBySeverityUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExtAggregateFailedRulesCountBySeverityUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateFailedRulesCountBySeverityResponse
}

// IsSuccess returns true when this ext aggregate failed rules count by severity unauthorized response has a 2xx status code
func (o *ExtAggregateFailedRulesCountBySeverityUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate failed rules count by severity unauthorized response has a 3xx status code
func (o *ExtAggregateFailedRulesCountBySeverityUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed rules count by severity unauthorized response has a 4xx status code
func (o *ExtAggregateFailedRulesCountBySeverityUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate failed rules count by severity unauthorized response has a 5xx status code
func (o *ExtAggregateFailedRulesCountBySeverityUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate failed rules count by severity unauthorized response a status code equal to that given
func (o *ExtAggregateFailedRulesCountBySeverityUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the ext aggregate failed rules count by severity unauthorized response
func (o *ExtAggregateFailedRulesCountBySeverityUnauthorized) Code() int {
	return 401
}

func (o *ExtAggregateFailedRulesCountBySeverityUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-count-by-severity/v2][%d] extAggregateFailedRulesCountBySeverityUnauthorized %s", 401, payload)
}

func (o *ExtAggregateFailedRulesCountBySeverityUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-count-by-severity/v2][%d] extAggregateFailedRulesCountBySeverityUnauthorized %s", 401, payload)
}

func (o *ExtAggregateFailedRulesCountBySeverityUnauthorized) GetPayload() *models.DomainAggregateFailedRulesCountBySeverityResponse {
	return o.Payload
}

func (o *ExtAggregateFailedRulesCountBySeverityUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateFailedRulesCountBySeverityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateFailedRulesCountBySeverityForbidden creates a ExtAggregateFailedRulesCountBySeverityForbidden with default headers values
func NewExtAggregateFailedRulesCountBySeverityForbidden() *ExtAggregateFailedRulesCountBySeverityForbidden {
	return &ExtAggregateFailedRulesCountBySeverityForbidden{}
}

/*
ExtAggregateFailedRulesCountBySeverityForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExtAggregateFailedRulesCountBySeverityForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateFailedRulesCountBySeverityResponse
}

// IsSuccess returns true when this ext aggregate failed rules count by severity forbidden response has a 2xx status code
func (o *ExtAggregateFailedRulesCountBySeverityForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate failed rules count by severity forbidden response has a 3xx status code
func (o *ExtAggregateFailedRulesCountBySeverityForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed rules count by severity forbidden response has a 4xx status code
func (o *ExtAggregateFailedRulesCountBySeverityForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate failed rules count by severity forbidden response has a 5xx status code
func (o *ExtAggregateFailedRulesCountBySeverityForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate failed rules count by severity forbidden response a status code equal to that given
func (o *ExtAggregateFailedRulesCountBySeverityForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the ext aggregate failed rules count by severity forbidden response
func (o *ExtAggregateFailedRulesCountBySeverityForbidden) Code() int {
	return 403
}

func (o *ExtAggregateFailedRulesCountBySeverityForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-count-by-severity/v2][%d] extAggregateFailedRulesCountBySeverityForbidden %s", 403, payload)
}

func (o *ExtAggregateFailedRulesCountBySeverityForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-count-by-severity/v2][%d] extAggregateFailedRulesCountBySeverityForbidden %s", 403, payload)
}

func (o *ExtAggregateFailedRulesCountBySeverityForbidden) GetPayload() *models.DomainAggregateFailedRulesCountBySeverityResponse {
	return o.Payload
}

func (o *ExtAggregateFailedRulesCountBySeverityForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateFailedRulesCountBySeverityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateFailedRulesCountBySeverityTooManyRequests creates a ExtAggregateFailedRulesCountBySeverityTooManyRequests with default headers values
func NewExtAggregateFailedRulesCountBySeverityTooManyRequests() *ExtAggregateFailedRulesCountBySeverityTooManyRequests {
	return &ExtAggregateFailedRulesCountBySeverityTooManyRequests{}
}

/*
ExtAggregateFailedRulesCountBySeverityTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExtAggregateFailedRulesCountBySeverityTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this ext aggregate failed rules count by severity too many requests response has a 2xx status code
func (o *ExtAggregateFailedRulesCountBySeverityTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate failed rules count by severity too many requests response has a 3xx status code
func (o *ExtAggregateFailedRulesCountBySeverityTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed rules count by severity too many requests response has a 4xx status code
func (o *ExtAggregateFailedRulesCountBySeverityTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate failed rules count by severity too many requests response has a 5xx status code
func (o *ExtAggregateFailedRulesCountBySeverityTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate failed rules count by severity too many requests response a status code equal to that given
func (o *ExtAggregateFailedRulesCountBySeverityTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the ext aggregate failed rules count by severity too many requests response
func (o *ExtAggregateFailedRulesCountBySeverityTooManyRequests) Code() int {
	return 429
}

func (o *ExtAggregateFailedRulesCountBySeverityTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-count-by-severity/v2][%d] extAggregateFailedRulesCountBySeverityTooManyRequests %s", 429, payload)
}

func (o *ExtAggregateFailedRulesCountBySeverityTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-count-by-severity/v2][%d] extAggregateFailedRulesCountBySeverityTooManyRequests %s", 429, payload)
}

func (o *ExtAggregateFailedRulesCountBySeverityTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExtAggregateFailedRulesCountBySeverityTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateFailedRulesCountBySeverityInternalServerError creates a ExtAggregateFailedRulesCountBySeverityInternalServerError with default headers values
func NewExtAggregateFailedRulesCountBySeverityInternalServerError() *ExtAggregateFailedRulesCountBySeverityInternalServerError {
	return &ExtAggregateFailedRulesCountBySeverityInternalServerError{}
}

/*
ExtAggregateFailedRulesCountBySeverityInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ExtAggregateFailedRulesCountBySeverityInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateFailedRulesCountBySeverityResponse
}

// IsSuccess returns true when this ext aggregate failed rules count by severity internal server error response has a 2xx status code
func (o *ExtAggregateFailedRulesCountBySeverityInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate failed rules count by severity internal server error response has a 3xx status code
func (o *ExtAggregateFailedRulesCountBySeverityInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed rules count by severity internal server error response has a 4xx status code
func (o *ExtAggregateFailedRulesCountBySeverityInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this ext aggregate failed rules count by severity internal server error response has a 5xx status code
func (o *ExtAggregateFailedRulesCountBySeverityInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this ext aggregate failed rules count by severity internal server error response a status code equal to that given
func (o *ExtAggregateFailedRulesCountBySeverityInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the ext aggregate failed rules count by severity internal server error response
func (o *ExtAggregateFailedRulesCountBySeverityInternalServerError) Code() int {
	return 500
}

func (o *ExtAggregateFailedRulesCountBySeverityInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-count-by-severity/v2][%d] extAggregateFailedRulesCountBySeverityInternalServerError %s", 500, payload)
}

func (o *ExtAggregateFailedRulesCountBySeverityInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-count-by-severity/v2][%d] extAggregateFailedRulesCountBySeverityInternalServerError %s", 500, payload)
}

func (o *ExtAggregateFailedRulesCountBySeverityInternalServerError) GetPayload() *models.DomainAggregateFailedRulesCountBySeverityResponse {
	return o.Payload
}

func (o *ExtAggregateFailedRulesCountBySeverityInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateFailedRulesCountBySeverityResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
