// Code generated by go-swagger; DO NOT EDIT.

package container_image_compliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExtAggregateImageAssessmentsReader is a Reader for the ExtAggregateImageAssessments structure.
type ExtAggregateImageAssessmentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExtAggregateImageAssessmentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExtAggregateImageAssessmentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExtAggregateImageAssessmentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExtAggregateImageAssessmentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExtAggregateImageAssessmentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExtAggregateImageAssessmentsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExtAggregateImageAssessmentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /container-compliance/aggregates/compliance-by-images/v2] extAggregateImageAssessments", response, response.Code())
	}
}

// NewExtAggregateImageAssessmentsOK creates a ExtAggregateImageAssessmentsOK with default headers values
func NewExtAggregateImageAssessmentsOK() *ExtAggregateImageAssessmentsOK {
	return &ExtAggregateImageAssessmentsOK{}
}

/*
ExtAggregateImageAssessmentsOK describes a response with status code 200, with default header values.

OK
*/
type ExtAggregateImageAssessmentsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateImageAssessmentsResponse
}

// IsSuccess returns true when this ext aggregate image assessments o k response has a 2xx status code
func (o *ExtAggregateImageAssessmentsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this ext aggregate image assessments o k response has a 3xx status code
func (o *ExtAggregateImageAssessmentsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate image assessments o k response has a 4xx status code
func (o *ExtAggregateImageAssessmentsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this ext aggregate image assessments o k response has a 5xx status code
func (o *ExtAggregateImageAssessmentsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate image assessments o k response a status code equal to that given
func (o *ExtAggregateImageAssessmentsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the ext aggregate image assessments o k response
func (o *ExtAggregateImageAssessmentsOK) Code() int {
	return 200
}

func (o *ExtAggregateImageAssessmentsOK) Error() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-images/v2][%d] extAggregateImageAssessmentsOK  %+v", 200, o.Payload)
}

func (o *ExtAggregateImageAssessmentsOK) String() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-images/v2][%d] extAggregateImageAssessmentsOK  %+v", 200, o.Payload)
}

func (o *ExtAggregateImageAssessmentsOK) GetPayload() *models.DomainAggregateImageAssessmentsResponse {
	return o.Payload
}

func (o *ExtAggregateImageAssessmentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateImageAssessmentsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateImageAssessmentsBadRequest creates a ExtAggregateImageAssessmentsBadRequest with default headers values
func NewExtAggregateImageAssessmentsBadRequest() *ExtAggregateImageAssessmentsBadRequest {
	return &ExtAggregateImageAssessmentsBadRequest{}
}

/*
ExtAggregateImageAssessmentsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExtAggregateImageAssessmentsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateImageAssessmentsResponse
}

// IsSuccess returns true when this ext aggregate image assessments bad request response has a 2xx status code
func (o *ExtAggregateImageAssessmentsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate image assessments bad request response has a 3xx status code
func (o *ExtAggregateImageAssessmentsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate image assessments bad request response has a 4xx status code
func (o *ExtAggregateImageAssessmentsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate image assessments bad request response has a 5xx status code
func (o *ExtAggregateImageAssessmentsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate image assessments bad request response a status code equal to that given
func (o *ExtAggregateImageAssessmentsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the ext aggregate image assessments bad request response
func (o *ExtAggregateImageAssessmentsBadRequest) Code() int {
	return 400
}

func (o *ExtAggregateImageAssessmentsBadRequest) Error() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-images/v2][%d] extAggregateImageAssessmentsBadRequest  %+v", 400, o.Payload)
}

func (o *ExtAggregateImageAssessmentsBadRequest) String() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-images/v2][%d] extAggregateImageAssessmentsBadRequest  %+v", 400, o.Payload)
}

func (o *ExtAggregateImageAssessmentsBadRequest) GetPayload() *models.DomainAggregateImageAssessmentsResponse {
	return o.Payload
}

func (o *ExtAggregateImageAssessmentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateImageAssessmentsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateImageAssessmentsUnauthorized creates a ExtAggregateImageAssessmentsUnauthorized with default headers values
func NewExtAggregateImageAssessmentsUnauthorized() *ExtAggregateImageAssessmentsUnauthorized {
	return &ExtAggregateImageAssessmentsUnauthorized{}
}

/*
ExtAggregateImageAssessmentsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExtAggregateImageAssessmentsUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateImageAssessmentsResponse
}

// IsSuccess returns true when this ext aggregate image assessments unauthorized response has a 2xx status code
func (o *ExtAggregateImageAssessmentsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate image assessments unauthorized response has a 3xx status code
func (o *ExtAggregateImageAssessmentsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate image assessments unauthorized response has a 4xx status code
func (o *ExtAggregateImageAssessmentsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate image assessments unauthorized response has a 5xx status code
func (o *ExtAggregateImageAssessmentsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate image assessments unauthorized response a status code equal to that given
func (o *ExtAggregateImageAssessmentsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the ext aggregate image assessments unauthorized response
func (o *ExtAggregateImageAssessmentsUnauthorized) Code() int {
	return 401
}

func (o *ExtAggregateImageAssessmentsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-images/v2][%d] extAggregateImageAssessmentsUnauthorized  %+v", 401, o.Payload)
}

func (o *ExtAggregateImageAssessmentsUnauthorized) String() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-images/v2][%d] extAggregateImageAssessmentsUnauthorized  %+v", 401, o.Payload)
}

func (o *ExtAggregateImageAssessmentsUnauthorized) GetPayload() *models.DomainAggregateImageAssessmentsResponse {
	return o.Payload
}

func (o *ExtAggregateImageAssessmentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateImageAssessmentsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateImageAssessmentsForbidden creates a ExtAggregateImageAssessmentsForbidden with default headers values
func NewExtAggregateImageAssessmentsForbidden() *ExtAggregateImageAssessmentsForbidden {
	return &ExtAggregateImageAssessmentsForbidden{}
}

/*
ExtAggregateImageAssessmentsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExtAggregateImageAssessmentsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateImageAssessmentsResponse
}

// IsSuccess returns true when this ext aggregate image assessments forbidden response has a 2xx status code
func (o *ExtAggregateImageAssessmentsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate image assessments forbidden response has a 3xx status code
func (o *ExtAggregateImageAssessmentsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate image assessments forbidden response has a 4xx status code
func (o *ExtAggregateImageAssessmentsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate image assessments forbidden response has a 5xx status code
func (o *ExtAggregateImageAssessmentsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate image assessments forbidden response a status code equal to that given
func (o *ExtAggregateImageAssessmentsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the ext aggregate image assessments forbidden response
func (o *ExtAggregateImageAssessmentsForbidden) Code() int {
	return 403
}

func (o *ExtAggregateImageAssessmentsForbidden) Error() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-images/v2][%d] extAggregateImageAssessmentsForbidden  %+v", 403, o.Payload)
}

func (o *ExtAggregateImageAssessmentsForbidden) String() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-images/v2][%d] extAggregateImageAssessmentsForbidden  %+v", 403, o.Payload)
}

func (o *ExtAggregateImageAssessmentsForbidden) GetPayload() *models.DomainAggregateImageAssessmentsResponse {
	return o.Payload
}

func (o *ExtAggregateImageAssessmentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateImageAssessmentsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateImageAssessmentsTooManyRequests creates a ExtAggregateImageAssessmentsTooManyRequests with default headers values
func NewExtAggregateImageAssessmentsTooManyRequests() *ExtAggregateImageAssessmentsTooManyRequests {
	return &ExtAggregateImageAssessmentsTooManyRequests{}
}

/*
ExtAggregateImageAssessmentsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExtAggregateImageAssessmentsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this ext aggregate image assessments too many requests response has a 2xx status code
func (o *ExtAggregateImageAssessmentsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate image assessments too many requests response has a 3xx status code
func (o *ExtAggregateImageAssessmentsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate image assessments too many requests response has a 4xx status code
func (o *ExtAggregateImageAssessmentsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate image assessments too many requests response has a 5xx status code
func (o *ExtAggregateImageAssessmentsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate image assessments too many requests response a status code equal to that given
func (o *ExtAggregateImageAssessmentsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the ext aggregate image assessments too many requests response
func (o *ExtAggregateImageAssessmentsTooManyRequests) Code() int {
	return 429
}

func (o *ExtAggregateImageAssessmentsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-images/v2][%d] extAggregateImageAssessmentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ExtAggregateImageAssessmentsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-images/v2][%d] extAggregateImageAssessmentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ExtAggregateImageAssessmentsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExtAggregateImageAssessmentsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateImageAssessmentsInternalServerError creates a ExtAggregateImageAssessmentsInternalServerError with default headers values
func NewExtAggregateImageAssessmentsInternalServerError() *ExtAggregateImageAssessmentsInternalServerError {
	return &ExtAggregateImageAssessmentsInternalServerError{}
}

/*
ExtAggregateImageAssessmentsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ExtAggregateImageAssessmentsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateImageAssessmentsResponse
}

// IsSuccess returns true when this ext aggregate image assessments internal server error response has a 2xx status code
func (o *ExtAggregateImageAssessmentsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate image assessments internal server error response has a 3xx status code
func (o *ExtAggregateImageAssessmentsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate image assessments internal server error response has a 4xx status code
func (o *ExtAggregateImageAssessmentsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this ext aggregate image assessments internal server error response has a 5xx status code
func (o *ExtAggregateImageAssessmentsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this ext aggregate image assessments internal server error response a status code equal to that given
func (o *ExtAggregateImageAssessmentsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the ext aggregate image assessments internal server error response
func (o *ExtAggregateImageAssessmentsInternalServerError) Code() int {
	return 500
}

func (o *ExtAggregateImageAssessmentsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-images/v2][%d] extAggregateImageAssessmentsInternalServerError  %+v", 500, o.Payload)
}

func (o *ExtAggregateImageAssessmentsInternalServerError) String() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-images/v2][%d] extAggregateImageAssessmentsInternalServerError  %+v", 500, o.Payload)
}

func (o *ExtAggregateImageAssessmentsInternalServerError) GetPayload() *models.DomainAggregateImageAssessmentsResponse {
	return o.Payload
}

func (o *ExtAggregateImageAssessmentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateImageAssessmentsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
