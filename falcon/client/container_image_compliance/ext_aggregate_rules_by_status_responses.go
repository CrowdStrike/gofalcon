// Code generated by go-swagger; DO NOT EDIT.

package container_image_compliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExtAggregateRulesByStatusReader is a Reader for the ExtAggregateRulesByStatus structure.
type ExtAggregateRulesByStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExtAggregateRulesByStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExtAggregateRulesByStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExtAggregateRulesByStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExtAggregateRulesByStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExtAggregateRulesByStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExtAggregateRulesByStatusTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExtAggregateRulesByStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /container-compliance/aggregates/rules-by-status/v2] extAggregateRulesByStatus", response, response.Code())
	}
}

// NewExtAggregateRulesByStatusOK creates a ExtAggregateRulesByStatusOK with default headers values
func NewExtAggregateRulesByStatusOK() *ExtAggregateRulesByStatusOK {
	return &ExtAggregateRulesByStatusOK{}
}

/*
ExtAggregateRulesByStatusOK describes a response with status code 200, with default header values.

OK
*/
type ExtAggregateRulesByStatusOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateRulesByStatusResponse
}

// IsSuccess returns true when this ext aggregate rules by status o k response has a 2xx status code
func (o *ExtAggregateRulesByStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this ext aggregate rules by status o k response has a 3xx status code
func (o *ExtAggregateRulesByStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate rules by status o k response has a 4xx status code
func (o *ExtAggregateRulesByStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this ext aggregate rules by status o k response has a 5xx status code
func (o *ExtAggregateRulesByStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate rules by status o k response a status code equal to that given
func (o *ExtAggregateRulesByStatusOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the ext aggregate rules by status o k response
func (o *ExtAggregateRulesByStatusOK) Code() int {
	return 200
}

func (o *ExtAggregateRulesByStatusOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/rules-by-status/v2][%d] extAggregateRulesByStatusOK %s", 200, payload)
}

func (o *ExtAggregateRulesByStatusOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/rules-by-status/v2][%d] extAggregateRulesByStatusOK %s", 200, payload)
}

func (o *ExtAggregateRulesByStatusOK) GetPayload() *models.DomainAggregateRulesByStatusResponse {
	return o.Payload
}

func (o *ExtAggregateRulesByStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateRulesByStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateRulesByStatusBadRequest creates a ExtAggregateRulesByStatusBadRequest with default headers values
func NewExtAggregateRulesByStatusBadRequest() *ExtAggregateRulesByStatusBadRequest {
	return &ExtAggregateRulesByStatusBadRequest{}
}

/*
ExtAggregateRulesByStatusBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExtAggregateRulesByStatusBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateRulesByStatusResponse
}

// IsSuccess returns true when this ext aggregate rules by status bad request response has a 2xx status code
func (o *ExtAggregateRulesByStatusBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate rules by status bad request response has a 3xx status code
func (o *ExtAggregateRulesByStatusBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate rules by status bad request response has a 4xx status code
func (o *ExtAggregateRulesByStatusBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate rules by status bad request response has a 5xx status code
func (o *ExtAggregateRulesByStatusBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate rules by status bad request response a status code equal to that given
func (o *ExtAggregateRulesByStatusBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the ext aggregate rules by status bad request response
func (o *ExtAggregateRulesByStatusBadRequest) Code() int {
	return 400
}

func (o *ExtAggregateRulesByStatusBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/rules-by-status/v2][%d] extAggregateRulesByStatusBadRequest %s", 400, payload)
}

func (o *ExtAggregateRulesByStatusBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/rules-by-status/v2][%d] extAggregateRulesByStatusBadRequest %s", 400, payload)
}

func (o *ExtAggregateRulesByStatusBadRequest) GetPayload() *models.DomainAggregateRulesByStatusResponse {
	return o.Payload
}

func (o *ExtAggregateRulesByStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateRulesByStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateRulesByStatusUnauthorized creates a ExtAggregateRulesByStatusUnauthorized with default headers values
func NewExtAggregateRulesByStatusUnauthorized() *ExtAggregateRulesByStatusUnauthorized {
	return &ExtAggregateRulesByStatusUnauthorized{}
}

/*
ExtAggregateRulesByStatusUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExtAggregateRulesByStatusUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateRulesByStatusResponse
}

// IsSuccess returns true when this ext aggregate rules by status unauthorized response has a 2xx status code
func (o *ExtAggregateRulesByStatusUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate rules by status unauthorized response has a 3xx status code
func (o *ExtAggregateRulesByStatusUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate rules by status unauthorized response has a 4xx status code
func (o *ExtAggregateRulesByStatusUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate rules by status unauthorized response has a 5xx status code
func (o *ExtAggregateRulesByStatusUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate rules by status unauthorized response a status code equal to that given
func (o *ExtAggregateRulesByStatusUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the ext aggregate rules by status unauthorized response
func (o *ExtAggregateRulesByStatusUnauthorized) Code() int {
	return 401
}

func (o *ExtAggregateRulesByStatusUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/rules-by-status/v2][%d] extAggregateRulesByStatusUnauthorized %s", 401, payload)
}

func (o *ExtAggregateRulesByStatusUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/rules-by-status/v2][%d] extAggregateRulesByStatusUnauthorized %s", 401, payload)
}

func (o *ExtAggregateRulesByStatusUnauthorized) GetPayload() *models.DomainAggregateRulesByStatusResponse {
	return o.Payload
}

func (o *ExtAggregateRulesByStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateRulesByStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateRulesByStatusForbidden creates a ExtAggregateRulesByStatusForbidden with default headers values
func NewExtAggregateRulesByStatusForbidden() *ExtAggregateRulesByStatusForbidden {
	return &ExtAggregateRulesByStatusForbidden{}
}

/*
ExtAggregateRulesByStatusForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExtAggregateRulesByStatusForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateRulesByStatusResponse
}

// IsSuccess returns true when this ext aggregate rules by status forbidden response has a 2xx status code
func (o *ExtAggregateRulesByStatusForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate rules by status forbidden response has a 3xx status code
func (o *ExtAggregateRulesByStatusForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate rules by status forbidden response has a 4xx status code
func (o *ExtAggregateRulesByStatusForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate rules by status forbidden response has a 5xx status code
func (o *ExtAggregateRulesByStatusForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate rules by status forbidden response a status code equal to that given
func (o *ExtAggregateRulesByStatusForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the ext aggregate rules by status forbidden response
func (o *ExtAggregateRulesByStatusForbidden) Code() int {
	return 403
}

func (o *ExtAggregateRulesByStatusForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/rules-by-status/v2][%d] extAggregateRulesByStatusForbidden %s", 403, payload)
}

func (o *ExtAggregateRulesByStatusForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/rules-by-status/v2][%d] extAggregateRulesByStatusForbidden %s", 403, payload)
}

func (o *ExtAggregateRulesByStatusForbidden) GetPayload() *models.DomainAggregateRulesByStatusResponse {
	return o.Payload
}

func (o *ExtAggregateRulesByStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateRulesByStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateRulesByStatusTooManyRequests creates a ExtAggregateRulesByStatusTooManyRequests with default headers values
func NewExtAggregateRulesByStatusTooManyRequests() *ExtAggregateRulesByStatusTooManyRequests {
	return &ExtAggregateRulesByStatusTooManyRequests{}
}

/*
ExtAggregateRulesByStatusTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExtAggregateRulesByStatusTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this ext aggregate rules by status too many requests response has a 2xx status code
func (o *ExtAggregateRulesByStatusTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate rules by status too many requests response has a 3xx status code
func (o *ExtAggregateRulesByStatusTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate rules by status too many requests response has a 4xx status code
func (o *ExtAggregateRulesByStatusTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate rules by status too many requests response has a 5xx status code
func (o *ExtAggregateRulesByStatusTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate rules by status too many requests response a status code equal to that given
func (o *ExtAggregateRulesByStatusTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the ext aggregate rules by status too many requests response
func (o *ExtAggregateRulesByStatusTooManyRequests) Code() int {
	return 429
}

func (o *ExtAggregateRulesByStatusTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/rules-by-status/v2][%d] extAggregateRulesByStatusTooManyRequests %s", 429, payload)
}

func (o *ExtAggregateRulesByStatusTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/rules-by-status/v2][%d] extAggregateRulesByStatusTooManyRequests %s", 429, payload)
}

func (o *ExtAggregateRulesByStatusTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExtAggregateRulesByStatusTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateRulesByStatusInternalServerError creates a ExtAggregateRulesByStatusInternalServerError with default headers values
func NewExtAggregateRulesByStatusInternalServerError() *ExtAggregateRulesByStatusInternalServerError {
	return &ExtAggregateRulesByStatusInternalServerError{}
}

/*
ExtAggregateRulesByStatusInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ExtAggregateRulesByStatusInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateRulesByStatusResponse
}

// IsSuccess returns true when this ext aggregate rules by status internal server error response has a 2xx status code
func (o *ExtAggregateRulesByStatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate rules by status internal server error response has a 3xx status code
func (o *ExtAggregateRulesByStatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate rules by status internal server error response has a 4xx status code
func (o *ExtAggregateRulesByStatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this ext aggregate rules by status internal server error response has a 5xx status code
func (o *ExtAggregateRulesByStatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this ext aggregate rules by status internal server error response a status code equal to that given
func (o *ExtAggregateRulesByStatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the ext aggregate rules by status internal server error response
func (o *ExtAggregateRulesByStatusInternalServerError) Code() int {
	return 500
}

func (o *ExtAggregateRulesByStatusInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/rules-by-status/v2][%d] extAggregateRulesByStatusInternalServerError %s", 500, payload)
}

func (o *ExtAggregateRulesByStatusInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/rules-by-status/v2][%d] extAggregateRulesByStatusInternalServerError %s", 500, payload)
}

func (o *ExtAggregateRulesByStatusInternalServerError) GetPayload() *models.DomainAggregateRulesByStatusResponse {
	return o.Payload
}

func (o *ExtAggregateRulesByStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateRulesByStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
