// Code generated by go-swagger; DO NOT EDIT.

package container_image_compliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExtAggregateRulesAssessmentsReader is a Reader for the ExtAggregateRulesAssessments structure.
type ExtAggregateRulesAssessmentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExtAggregateRulesAssessmentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExtAggregateRulesAssessmentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExtAggregateRulesAssessmentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExtAggregateRulesAssessmentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExtAggregateRulesAssessmentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExtAggregateRulesAssessmentsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExtAggregateRulesAssessmentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /container-compliance/aggregates/compliance-by-rules/v2] extAggregateRulesAssessments", response, response.Code())
	}
}

// NewExtAggregateRulesAssessmentsOK creates a ExtAggregateRulesAssessmentsOK with default headers values
func NewExtAggregateRulesAssessmentsOK() *ExtAggregateRulesAssessmentsOK {
	return &ExtAggregateRulesAssessmentsOK{}
}

/*
ExtAggregateRulesAssessmentsOK describes a response with status code 200, with default header values.

OK
*/
type ExtAggregateRulesAssessmentsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateRulesAssessmentsResponse
}

// IsSuccess returns true when this ext aggregate rules assessments o k response has a 2xx status code
func (o *ExtAggregateRulesAssessmentsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this ext aggregate rules assessments o k response has a 3xx status code
func (o *ExtAggregateRulesAssessmentsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate rules assessments o k response has a 4xx status code
func (o *ExtAggregateRulesAssessmentsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this ext aggregate rules assessments o k response has a 5xx status code
func (o *ExtAggregateRulesAssessmentsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate rules assessments o k response a status code equal to that given
func (o *ExtAggregateRulesAssessmentsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the ext aggregate rules assessments o k response
func (o *ExtAggregateRulesAssessmentsOK) Code() int {
	return 200
}

func (o *ExtAggregateRulesAssessmentsOK) Error() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-rules/v2][%d] extAggregateRulesAssessmentsOK  %+v", 200, o.Payload)
}

func (o *ExtAggregateRulesAssessmentsOK) String() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-rules/v2][%d] extAggregateRulesAssessmentsOK  %+v", 200, o.Payload)
}

func (o *ExtAggregateRulesAssessmentsOK) GetPayload() *models.DomainAggregateRulesAssessmentsResponse {
	return o.Payload
}

func (o *ExtAggregateRulesAssessmentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateRulesAssessmentsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateRulesAssessmentsBadRequest creates a ExtAggregateRulesAssessmentsBadRequest with default headers values
func NewExtAggregateRulesAssessmentsBadRequest() *ExtAggregateRulesAssessmentsBadRequest {
	return &ExtAggregateRulesAssessmentsBadRequest{}
}

/*
ExtAggregateRulesAssessmentsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExtAggregateRulesAssessmentsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateRulesAssessmentsResponse
}

// IsSuccess returns true when this ext aggregate rules assessments bad request response has a 2xx status code
func (o *ExtAggregateRulesAssessmentsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate rules assessments bad request response has a 3xx status code
func (o *ExtAggregateRulesAssessmentsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate rules assessments bad request response has a 4xx status code
func (o *ExtAggregateRulesAssessmentsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate rules assessments bad request response has a 5xx status code
func (o *ExtAggregateRulesAssessmentsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate rules assessments bad request response a status code equal to that given
func (o *ExtAggregateRulesAssessmentsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the ext aggregate rules assessments bad request response
func (o *ExtAggregateRulesAssessmentsBadRequest) Code() int {
	return 400
}

func (o *ExtAggregateRulesAssessmentsBadRequest) Error() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-rules/v2][%d] extAggregateRulesAssessmentsBadRequest  %+v", 400, o.Payload)
}

func (o *ExtAggregateRulesAssessmentsBadRequest) String() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-rules/v2][%d] extAggregateRulesAssessmentsBadRequest  %+v", 400, o.Payload)
}

func (o *ExtAggregateRulesAssessmentsBadRequest) GetPayload() *models.DomainAggregateRulesAssessmentsResponse {
	return o.Payload
}

func (o *ExtAggregateRulesAssessmentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateRulesAssessmentsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateRulesAssessmentsUnauthorized creates a ExtAggregateRulesAssessmentsUnauthorized with default headers values
func NewExtAggregateRulesAssessmentsUnauthorized() *ExtAggregateRulesAssessmentsUnauthorized {
	return &ExtAggregateRulesAssessmentsUnauthorized{}
}

/*
ExtAggregateRulesAssessmentsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExtAggregateRulesAssessmentsUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateRulesAssessmentsResponse
}

// IsSuccess returns true when this ext aggregate rules assessments unauthorized response has a 2xx status code
func (o *ExtAggregateRulesAssessmentsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate rules assessments unauthorized response has a 3xx status code
func (o *ExtAggregateRulesAssessmentsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate rules assessments unauthorized response has a 4xx status code
func (o *ExtAggregateRulesAssessmentsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate rules assessments unauthorized response has a 5xx status code
func (o *ExtAggregateRulesAssessmentsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate rules assessments unauthorized response a status code equal to that given
func (o *ExtAggregateRulesAssessmentsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the ext aggregate rules assessments unauthorized response
func (o *ExtAggregateRulesAssessmentsUnauthorized) Code() int {
	return 401
}

func (o *ExtAggregateRulesAssessmentsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-rules/v2][%d] extAggregateRulesAssessmentsUnauthorized  %+v", 401, o.Payload)
}

func (o *ExtAggregateRulesAssessmentsUnauthorized) String() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-rules/v2][%d] extAggregateRulesAssessmentsUnauthorized  %+v", 401, o.Payload)
}

func (o *ExtAggregateRulesAssessmentsUnauthorized) GetPayload() *models.DomainAggregateRulesAssessmentsResponse {
	return o.Payload
}

func (o *ExtAggregateRulesAssessmentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateRulesAssessmentsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateRulesAssessmentsForbidden creates a ExtAggregateRulesAssessmentsForbidden with default headers values
func NewExtAggregateRulesAssessmentsForbidden() *ExtAggregateRulesAssessmentsForbidden {
	return &ExtAggregateRulesAssessmentsForbidden{}
}

/*
ExtAggregateRulesAssessmentsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExtAggregateRulesAssessmentsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateRulesAssessmentsResponse
}

// IsSuccess returns true when this ext aggregate rules assessments forbidden response has a 2xx status code
func (o *ExtAggregateRulesAssessmentsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate rules assessments forbidden response has a 3xx status code
func (o *ExtAggregateRulesAssessmentsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate rules assessments forbidden response has a 4xx status code
func (o *ExtAggregateRulesAssessmentsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate rules assessments forbidden response has a 5xx status code
func (o *ExtAggregateRulesAssessmentsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate rules assessments forbidden response a status code equal to that given
func (o *ExtAggregateRulesAssessmentsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the ext aggregate rules assessments forbidden response
func (o *ExtAggregateRulesAssessmentsForbidden) Code() int {
	return 403
}

func (o *ExtAggregateRulesAssessmentsForbidden) Error() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-rules/v2][%d] extAggregateRulesAssessmentsForbidden  %+v", 403, o.Payload)
}

func (o *ExtAggregateRulesAssessmentsForbidden) String() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-rules/v2][%d] extAggregateRulesAssessmentsForbidden  %+v", 403, o.Payload)
}

func (o *ExtAggregateRulesAssessmentsForbidden) GetPayload() *models.DomainAggregateRulesAssessmentsResponse {
	return o.Payload
}

func (o *ExtAggregateRulesAssessmentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateRulesAssessmentsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateRulesAssessmentsTooManyRequests creates a ExtAggregateRulesAssessmentsTooManyRequests with default headers values
func NewExtAggregateRulesAssessmentsTooManyRequests() *ExtAggregateRulesAssessmentsTooManyRequests {
	return &ExtAggregateRulesAssessmentsTooManyRequests{}
}

/*
ExtAggregateRulesAssessmentsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExtAggregateRulesAssessmentsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this ext aggregate rules assessments too many requests response has a 2xx status code
func (o *ExtAggregateRulesAssessmentsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate rules assessments too many requests response has a 3xx status code
func (o *ExtAggregateRulesAssessmentsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate rules assessments too many requests response has a 4xx status code
func (o *ExtAggregateRulesAssessmentsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate rules assessments too many requests response has a 5xx status code
func (o *ExtAggregateRulesAssessmentsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate rules assessments too many requests response a status code equal to that given
func (o *ExtAggregateRulesAssessmentsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the ext aggregate rules assessments too many requests response
func (o *ExtAggregateRulesAssessmentsTooManyRequests) Code() int {
	return 429
}

func (o *ExtAggregateRulesAssessmentsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-rules/v2][%d] extAggregateRulesAssessmentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ExtAggregateRulesAssessmentsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-rules/v2][%d] extAggregateRulesAssessmentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ExtAggregateRulesAssessmentsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExtAggregateRulesAssessmentsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateRulesAssessmentsInternalServerError creates a ExtAggregateRulesAssessmentsInternalServerError with default headers values
func NewExtAggregateRulesAssessmentsInternalServerError() *ExtAggregateRulesAssessmentsInternalServerError {
	return &ExtAggregateRulesAssessmentsInternalServerError{}
}

/*
ExtAggregateRulesAssessmentsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ExtAggregateRulesAssessmentsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateRulesAssessmentsResponse
}

// IsSuccess returns true when this ext aggregate rules assessments internal server error response has a 2xx status code
func (o *ExtAggregateRulesAssessmentsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate rules assessments internal server error response has a 3xx status code
func (o *ExtAggregateRulesAssessmentsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate rules assessments internal server error response has a 4xx status code
func (o *ExtAggregateRulesAssessmentsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this ext aggregate rules assessments internal server error response has a 5xx status code
func (o *ExtAggregateRulesAssessmentsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this ext aggregate rules assessments internal server error response a status code equal to that given
func (o *ExtAggregateRulesAssessmentsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the ext aggregate rules assessments internal server error response
func (o *ExtAggregateRulesAssessmentsInternalServerError) Code() int {
	return 500
}

func (o *ExtAggregateRulesAssessmentsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-rules/v2][%d] extAggregateRulesAssessmentsInternalServerError  %+v", 500, o.Payload)
}

func (o *ExtAggregateRulesAssessmentsInternalServerError) String() string {
	return fmt.Sprintf("[GET /container-compliance/aggregates/compliance-by-rules/v2][%d] extAggregateRulesAssessmentsInternalServerError  %+v", 500, o.Payload)
}

func (o *ExtAggregateRulesAssessmentsInternalServerError) GetPayload() *models.DomainAggregateRulesAssessmentsResponse {
	return o.Payload
}

func (o *ExtAggregateRulesAssessmentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateRulesAssessmentsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
