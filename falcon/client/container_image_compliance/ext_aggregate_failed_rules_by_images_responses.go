// Code generated by go-swagger; DO NOT EDIT.

package container_image_compliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExtAggregateFailedRulesByImagesReader is a Reader for the ExtAggregateFailedRulesByImages structure.
type ExtAggregateFailedRulesByImagesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExtAggregateFailedRulesByImagesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExtAggregateFailedRulesByImagesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExtAggregateFailedRulesByImagesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExtAggregateFailedRulesByImagesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExtAggregateFailedRulesByImagesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExtAggregateFailedRulesByImagesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExtAggregateFailedRulesByImagesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /container-compliance/aggregates/failed-rules-by-images/v2] extAggregateFailedRulesByImages", response, response.Code())
	}
}

// NewExtAggregateFailedRulesByImagesOK creates a ExtAggregateFailedRulesByImagesOK with default headers values
func NewExtAggregateFailedRulesByImagesOK() *ExtAggregateFailedRulesByImagesOK {
	return &ExtAggregateFailedRulesByImagesOK{}
}

/*
ExtAggregateFailedRulesByImagesOK describes a response with status code 200, with default header values.

OK
*/
type ExtAggregateFailedRulesByImagesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateFailedRulesByImagesResponse
}

// IsSuccess returns true when this ext aggregate failed rules by images o k response has a 2xx status code
func (o *ExtAggregateFailedRulesByImagesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this ext aggregate failed rules by images o k response has a 3xx status code
func (o *ExtAggregateFailedRulesByImagesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed rules by images o k response has a 4xx status code
func (o *ExtAggregateFailedRulesByImagesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this ext aggregate failed rules by images o k response has a 5xx status code
func (o *ExtAggregateFailedRulesByImagesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate failed rules by images o k response a status code equal to that given
func (o *ExtAggregateFailedRulesByImagesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the ext aggregate failed rules by images o k response
func (o *ExtAggregateFailedRulesByImagesOK) Code() int {
	return 200
}

func (o *ExtAggregateFailedRulesByImagesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-by-images/v2][%d] extAggregateFailedRulesByImagesOK %s", 200, payload)
}

func (o *ExtAggregateFailedRulesByImagesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-by-images/v2][%d] extAggregateFailedRulesByImagesOK %s", 200, payload)
}

func (o *ExtAggregateFailedRulesByImagesOK) GetPayload() *models.DomainAggregateFailedRulesByImagesResponse {
	return o.Payload
}

func (o *ExtAggregateFailedRulesByImagesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateFailedRulesByImagesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateFailedRulesByImagesBadRequest creates a ExtAggregateFailedRulesByImagesBadRequest with default headers values
func NewExtAggregateFailedRulesByImagesBadRequest() *ExtAggregateFailedRulesByImagesBadRequest {
	return &ExtAggregateFailedRulesByImagesBadRequest{}
}

/*
ExtAggregateFailedRulesByImagesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExtAggregateFailedRulesByImagesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateFailedRulesByImagesResponse
}

// IsSuccess returns true when this ext aggregate failed rules by images bad request response has a 2xx status code
func (o *ExtAggregateFailedRulesByImagesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate failed rules by images bad request response has a 3xx status code
func (o *ExtAggregateFailedRulesByImagesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed rules by images bad request response has a 4xx status code
func (o *ExtAggregateFailedRulesByImagesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate failed rules by images bad request response has a 5xx status code
func (o *ExtAggregateFailedRulesByImagesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate failed rules by images bad request response a status code equal to that given
func (o *ExtAggregateFailedRulesByImagesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the ext aggregate failed rules by images bad request response
func (o *ExtAggregateFailedRulesByImagesBadRequest) Code() int {
	return 400
}

func (o *ExtAggregateFailedRulesByImagesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-by-images/v2][%d] extAggregateFailedRulesByImagesBadRequest %s", 400, payload)
}

func (o *ExtAggregateFailedRulesByImagesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-by-images/v2][%d] extAggregateFailedRulesByImagesBadRequest %s", 400, payload)
}

func (o *ExtAggregateFailedRulesByImagesBadRequest) GetPayload() *models.DomainAggregateFailedRulesByImagesResponse {
	return o.Payload
}

func (o *ExtAggregateFailedRulesByImagesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateFailedRulesByImagesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateFailedRulesByImagesUnauthorized creates a ExtAggregateFailedRulesByImagesUnauthorized with default headers values
func NewExtAggregateFailedRulesByImagesUnauthorized() *ExtAggregateFailedRulesByImagesUnauthorized {
	return &ExtAggregateFailedRulesByImagesUnauthorized{}
}

/*
ExtAggregateFailedRulesByImagesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExtAggregateFailedRulesByImagesUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateFailedRulesByImagesResponse
}

// IsSuccess returns true when this ext aggregate failed rules by images unauthorized response has a 2xx status code
func (o *ExtAggregateFailedRulesByImagesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate failed rules by images unauthorized response has a 3xx status code
func (o *ExtAggregateFailedRulesByImagesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed rules by images unauthorized response has a 4xx status code
func (o *ExtAggregateFailedRulesByImagesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate failed rules by images unauthorized response has a 5xx status code
func (o *ExtAggregateFailedRulesByImagesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate failed rules by images unauthorized response a status code equal to that given
func (o *ExtAggregateFailedRulesByImagesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the ext aggregate failed rules by images unauthorized response
func (o *ExtAggregateFailedRulesByImagesUnauthorized) Code() int {
	return 401
}

func (o *ExtAggregateFailedRulesByImagesUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-by-images/v2][%d] extAggregateFailedRulesByImagesUnauthorized %s", 401, payload)
}

func (o *ExtAggregateFailedRulesByImagesUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-by-images/v2][%d] extAggregateFailedRulesByImagesUnauthorized %s", 401, payload)
}

func (o *ExtAggregateFailedRulesByImagesUnauthorized) GetPayload() *models.DomainAggregateFailedRulesByImagesResponse {
	return o.Payload
}

func (o *ExtAggregateFailedRulesByImagesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateFailedRulesByImagesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateFailedRulesByImagesForbidden creates a ExtAggregateFailedRulesByImagesForbidden with default headers values
func NewExtAggregateFailedRulesByImagesForbidden() *ExtAggregateFailedRulesByImagesForbidden {
	return &ExtAggregateFailedRulesByImagesForbidden{}
}

/*
ExtAggregateFailedRulesByImagesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExtAggregateFailedRulesByImagesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateFailedRulesByImagesResponse
}

// IsSuccess returns true when this ext aggregate failed rules by images forbidden response has a 2xx status code
func (o *ExtAggregateFailedRulesByImagesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate failed rules by images forbidden response has a 3xx status code
func (o *ExtAggregateFailedRulesByImagesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed rules by images forbidden response has a 4xx status code
func (o *ExtAggregateFailedRulesByImagesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate failed rules by images forbidden response has a 5xx status code
func (o *ExtAggregateFailedRulesByImagesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate failed rules by images forbidden response a status code equal to that given
func (o *ExtAggregateFailedRulesByImagesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the ext aggregate failed rules by images forbidden response
func (o *ExtAggregateFailedRulesByImagesForbidden) Code() int {
	return 403
}

func (o *ExtAggregateFailedRulesByImagesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-by-images/v2][%d] extAggregateFailedRulesByImagesForbidden %s", 403, payload)
}

func (o *ExtAggregateFailedRulesByImagesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-by-images/v2][%d] extAggregateFailedRulesByImagesForbidden %s", 403, payload)
}

func (o *ExtAggregateFailedRulesByImagesForbidden) GetPayload() *models.DomainAggregateFailedRulesByImagesResponse {
	return o.Payload
}

func (o *ExtAggregateFailedRulesByImagesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateFailedRulesByImagesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateFailedRulesByImagesTooManyRequests creates a ExtAggregateFailedRulesByImagesTooManyRequests with default headers values
func NewExtAggregateFailedRulesByImagesTooManyRequests() *ExtAggregateFailedRulesByImagesTooManyRequests {
	return &ExtAggregateFailedRulesByImagesTooManyRequests{}
}

/*
ExtAggregateFailedRulesByImagesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExtAggregateFailedRulesByImagesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this ext aggregate failed rules by images too many requests response has a 2xx status code
func (o *ExtAggregateFailedRulesByImagesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate failed rules by images too many requests response has a 3xx status code
func (o *ExtAggregateFailedRulesByImagesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed rules by images too many requests response has a 4xx status code
func (o *ExtAggregateFailedRulesByImagesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this ext aggregate failed rules by images too many requests response has a 5xx status code
func (o *ExtAggregateFailedRulesByImagesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this ext aggregate failed rules by images too many requests response a status code equal to that given
func (o *ExtAggregateFailedRulesByImagesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the ext aggregate failed rules by images too many requests response
func (o *ExtAggregateFailedRulesByImagesTooManyRequests) Code() int {
	return 429
}

func (o *ExtAggregateFailedRulesByImagesTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-by-images/v2][%d] extAggregateFailedRulesByImagesTooManyRequests %s", 429, payload)
}

func (o *ExtAggregateFailedRulesByImagesTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-by-images/v2][%d] extAggregateFailedRulesByImagesTooManyRequests %s", 429, payload)
}

func (o *ExtAggregateFailedRulesByImagesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExtAggregateFailedRulesByImagesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtAggregateFailedRulesByImagesInternalServerError creates a ExtAggregateFailedRulesByImagesInternalServerError with default headers values
func NewExtAggregateFailedRulesByImagesInternalServerError() *ExtAggregateFailedRulesByImagesInternalServerError {
	return &ExtAggregateFailedRulesByImagesInternalServerError{}
}

/*
ExtAggregateFailedRulesByImagesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ExtAggregateFailedRulesByImagesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAggregateFailedRulesByImagesResponse
}

// IsSuccess returns true when this ext aggregate failed rules by images internal server error response has a 2xx status code
func (o *ExtAggregateFailedRulesByImagesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ext aggregate failed rules by images internal server error response has a 3xx status code
func (o *ExtAggregateFailedRulesByImagesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ext aggregate failed rules by images internal server error response has a 4xx status code
func (o *ExtAggregateFailedRulesByImagesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this ext aggregate failed rules by images internal server error response has a 5xx status code
func (o *ExtAggregateFailedRulesByImagesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this ext aggregate failed rules by images internal server error response a status code equal to that given
func (o *ExtAggregateFailedRulesByImagesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the ext aggregate failed rules by images internal server error response
func (o *ExtAggregateFailedRulesByImagesInternalServerError) Code() int {
	return 500
}

func (o *ExtAggregateFailedRulesByImagesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-by-images/v2][%d] extAggregateFailedRulesByImagesInternalServerError %s", 500, payload)
}

func (o *ExtAggregateFailedRulesByImagesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /container-compliance/aggregates/failed-rules-by-images/v2][%d] extAggregateFailedRulesByImagesInternalServerError %s", 500, payload)
}

func (o *ExtAggregateFailedRulesByImagesInternalServerError) GetPayload() *models.DomainAggregateFailedRulesByImagesResponse {
	return o.Payload
}

func (o *ExtAggregateFailedRulesByImagesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAggregateFailedRulesByImagesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
