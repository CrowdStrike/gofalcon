// Code generated by go-swagger; DO NOT EDIT.

package overwatch

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new overwatch API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for overwatch API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AggregatesDetectionsGlobalCounts(params *AggregatesDetectionsGlobalCountsParams, opts ...ClientOption) (*AggregatesDetectionsGlobalCountsOK, error)

	AggregatesEvents(params *AggregatesEventsParams, opts ...ClientOption) (*AggregatesEventsOK, error)

	AggregatesEventsCollections(params *AggregatesEventsCollectionsParams, opts ...ClientOption) (*AggregatesEventsCollectionsOK, error)

	AggregatesIncidentsGlobalCounts(params *AggregatesIncidentsGlobalCountsParams, opts ...ClientOption) (*AggregatesIncidentsGlobalCountsOK, error)

	AggregatesOWEventsGlobalCounts(params *AggregatesOWEventsGlobalCountsParams, opts ...ClientOption) (*AggregatesOWEventsGlobalCountsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AggregatesDetectionsGlobalCounts gets the total number of detections pushed across all customers
*/
func (a *Client) AggregatesDetectionsGlobalCounts(params *AggregatesDetectionsGlobalCountsParams, opts ...ClientOption) (*AggregatesDetectionsGlobalCountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAggregatesDetectionsGlobalCountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AggregatesDetectionsGlobalCounts",
		Method:             "GET",
		PathPattern:        "/overwatch-dashboards/aggregates/detections-global-counts/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AggregatesDetectionsGlobalCountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AggregatesDetectionsGlobalCountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AggregatesDetectionsGlobalCountsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AggregatesEvents gets aggregate over watch detection event info by providing an aggregate query
*/
func (a *Client) AggregatesEvents(params *AggregatesEventsParams, opts ...ClientOption) (*AggregatesEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAggregatesEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AggregatesEvents",
		Method:             "POST",
		PathPattern:        "/overwatch-dashboards/aggregates/events/GET/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AggregatesEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AggregatesEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AggregatesEventsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AggregatesEventsCollections gets over watch detection event collection info by providing an aggregate query
*/
func (a *Client) AggregatesEventsCollections(params *AggregatesEventsCollectionsParams, opts ...ClientOption) (*AggregatesEventsCollectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAggregatesEventsCollectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AggregatesEventsCollections",
		Method:             "POST",
		PathPattern:        "/overwatch-dashboards/aggregates/events-collections/GET/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AggregatesEventsCollectionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AggregatesEventsCollectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AggregatesEventsCollectionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AggregatesIncidentsGlobalCounts gets the total number of incidents pushed across all customers
*/
func (a *Client) AggregatesIncidentsGlobalCounts(params *AggregatesIncidentsGlobalCountsParams, opts ...ClientOption) (*AggregatesIncidentsGlobalCountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAggregatesIncidentsGlobalCountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AggregatesIncidentsGlobalCounts",
		Method:             "GET",
		PathPattern:        "/overwatch-dashboards/aggregates/incidents-global-counts/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AggregatesIncidentsGlobalCountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AggregatesIncidentsGlobalCountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AggregatesIncidentsGlobalCountsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AggregatesOWEventsGlobalCounts gets the total number of over watch events across all customers
*/
func (a *Client) AggregatesOWEventsGlobalCounts(params *AggregatesOWEventsGlobalCountsParams, opts ...ClientOption) (*AggregatesOWEventsGlobalCountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAggregatesOWEventsGlobalCountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AggregatesOWEventsGlobalCounts",
		Method:             "GET",
		PathPattern:        "/overwatch-dashboards/aggregates/ow-events-global-counts/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AggregatesOWEventsGlobalCountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AggregatesOWEventsGlobalCountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AggregatesOWEventsGlobalCountsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
