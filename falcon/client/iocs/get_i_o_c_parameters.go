// Code generated by go-swagger; DO NOT EDIT.

package iocs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetIOCParams creates a new GetIOCParams object
// with the default values initialized.
func NewGetIOCParams() *GetIOCParams {
	var ()
	return &GetIOCParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetIOCParamsWithTimeout creates a new GetIOCParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetIOCParamsWithTimeout(timeout time.Duration) *GetIOCParams {
	var ()
	return &GetIOCParams{

		timeout: timeout,
	}
}

// NewGetIOCParamsWithContext creates a new GetIOCParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetIOCParamsWithContext(ctx context.Context) *GetIOCParams {
	var ()
	return &GetIOCParams{

		Context: ctx,
	}
}

// NewGetIOCParamsWithHTTPClient creates a new GetIOCParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetIOCParamsWithHTTPClient(client *http.Client) *GetIOCParams {
	var ()
	return &GetIOCParams{
		HTTPClient: client,
	}
}

/*GetIOCParams contains all the parameters to send to the API endpoint
for the get i o c operation typically these are written to a http.Request
*/
type GetIOCParams struct {

	/*Type

	The type of the indicator. Valid types include:

	sha256: A hex-encoded sha256 hash string. Length - min: 64, max: 64.

	md5: A hex-encoded md5 hash string. Length - min 32, max: 32.

	domain: A domain name. Length - min: 1, max: 200.

	ipv4: An IPv4 address. Must be a valid IP address.

	ipv6: An IPv6 address. Must be a valid IP address.


	*/
	Type string
	/*Value
	  The string representation of the indicator

	*/
	Value string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get i o c params
func (o *GetIOCParams) WithTimeout(timeout time.Duration) *GetIOCParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get i o c params
func (o *GetIOCParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get i o c params
func (o *GetIOCParams) WithContext(ctx context.Context) *GetIOCParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get i o c params
func (o *GetIOCParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get i o c params
func (o *GetIOCParams) WithHTTPClient(client *http.Client) *GetIOCParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get i o c params
func (o *GetIOCParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithType adds the typeVar to the get i o c params
func (o *GetIOCParams) WithType(typeVar string) *GetIOCParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get i o c params
func (o *GetIOCParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WithValue adds the value to the get i o c params
func (o *GetIOCParams) WithValue(value string) *GetIOCParams {
	o.SetValue(value)
	return o
}

// SetValue adds the value to the get i o c params
func (o *GetIOCParams) SetValue(value string) {
	o.Value = value
}

// WriteToRequest writes these params to a swagger request
func (o *GetIOCParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param type
	qrType := o.Type
	qType := qrType
	if qType != "" {
		if err := r.SetQueryParam("type", qType); err != nil {
			return err
		}
	}

	// query param value
	qrValue := o.Value
	qValue := qrValue
	if qValue != "" {
		if err := r.SetQueryParam("value", qValue); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
