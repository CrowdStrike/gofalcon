// Code generated by go-swagger; DO NOT EDIT.

package user_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// RetrieveEmailsByCIDReader is a Reader for the RetrieveEmailsByCID structure.
type RetrieveEmailsByCIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RetrieveEmailsByCIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRetrieveEmailsByCIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRetrieveEmailsByCIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRetrieveEmailsByCIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewRetrieveEmailsByCIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewRetrieveEmailsByCIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRetrieveEmailsByCIDOK creates a RetrieveEmailsByCIDOK with default headers values
func NewRetrieveEmailsByCIDOK() *RetrieveEmailsByCIDOK {
	return &RetrieveEmailsByCIDOK{}
}

/*
RetrieveEmailsByCIDOK describes a response with status code 200, with default header values.

OK
*/
type RetrieveEmailsByCIDOK struct {

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaQueryResponse
}

func (o *RetrieveEmailsByCIDOK) Error() string {
	return fmt.Sprintf("[GET /users/queries/emails-by-cid/v1][%d] retrieveEmailsByCIdOK  %+v", 200, o.Payload)
}
func (o *RetrieveEmailsByCIDOK) GetPayload() *models.MsaQueryResponse {
	return o.Payload
}

func (o *RetrieveEmailsByCIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrieveEmailsByCIDBadRequest creates a RetrieveEmailsByCIDBadRequest with default headers values
func NewRetrieveEmailsByCIDBadRequest() *RetrieveEmailsByCIDBadRequest {
	return &RetrieveEmailsByCIDBadRequest{}
}

/*
RetrieveEmailsByCIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RetrieveEmailsByCIDBadRequest struct {

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaQueryResponse
}

func (o *RetrieveEmailsByCIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /users/queries/emails-by-cid/v1][%d] retrieveEmailsByCIdBadRequest  %+v", 400, o.Payload)
}
func (o *RetrieveEmailsByCIDBadRequest) GetPayload() *models.MsaQueryResponse {
	return o.Payload
}

func (o *RetrieveEmailsByCIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrieveEmailsByCIDForbidden creates a RetrieveEmailsByCIDForbidden with default headers values
func NewRetrieveEmailsByCIDForbidden() *RetrieveEmailsByCIDForbidden {
	return &RetrieveEmailsByCIDForbidden{}
}

/*
RetrieveEmailsByCIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RetrieveEmailsByCIDForbidden struct {

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaQueryResponse
}

func (o *RetrieveEmailsByCIDForbidden) Error() string {
	return fmt.Sprintf("[GET /users/queries/emails-by-cid/v1][%d] retrieveEmailsByCIdForbidden  %+v", 403, o.Payload)
}
func (o *RetrieveEmailsByCIDForbidden) GetPayload() *models.MsaQueryResponse {
	return o.Payload
}

func (o *RetrieveEmailsByCIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrieveEmailsByCIDTooManyRequests creates a RetrieveEmailsByCIDTooManyRequests with default headers values
func NewRetrieveEmailsByCIDTooManyRequests() *RetrieveEmailsByCIDTooManyRequests {
	return &RetrieveEmailsByCIDTooManyRequests{}
}

/*
RetrieveEmailsByCIDTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type RetrieveEmailsByCIDTooManyRequests struct {

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

func (o *RetrieveEmailsByCIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /users/queries/emails-by-cid/v1][%d] retrieveEmailsByCIdTooManyRequests  %+v", 429, o.Payload)
}
func (o *RetrieveEmailsByCIDTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *RetrieveEmailsByCIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrieveEmailsByCIDDefault creates a RetrieveEmailsByCIDDefault with default headers values
func NewRetrieveEmailsByCIDDefault(code int) *RetrieveEmailsByCIDDefault {
	return &RetrieveEmailsByCIDDefault{
		_statusCode: code,
	}
}

/*
RetrieveEmailsByCIDDefault describes a response with status code -1, with default header values.

OK
*/
type RetrieveEmailsByCIDDefault struct {
	_statusCode int

	Payload *models.MsaQueryResponse
}

// Code gets the status code for the retrieve emails by c ID default response
func (o *RetrieveEmailsByCIDDefault) Code() int {
	return o._statusCode
}

func (o *RetrieveEmailsByCIDDefault) Error() string {
	return fmt.Sprintf("[GET /users/queries/emails-by-cid/v1][%d] RetrieveEmailsByCID default  %+v", o._statusCode, o.Payload)
}
func (o *RetrieveEmailsByCIDDefault) GetPayload() *models.MsaQueryResponse {
	return o.Payload
}

func (o *RetrieveEmailsByCIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MsaQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
