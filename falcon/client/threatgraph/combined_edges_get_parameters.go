// Code generated by go-swagger; DO NOT EDIT.

package threatgraph

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCombinedEdgesGetParams creates a new CombinedEdgesGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCombinedEdgesGetParams() *CombinedEdgesGetParams {
	return &CombinedEdgesGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCombinedEdgesGetParamsWithTimeout creates a new CombinedEdgesGetParams object
// with the ability to set a timeout on a request.
func NewCombinedEdgesGetParamsWithTimeout(timeout time.Duration) *CombinedEdgesGetParams {
	return &CombinedEdgesGetParams{
		timeout: timeout,
	}
}

// NewCombinedEdgesGetParamsWithContext creates a new CombinedEdgesGetParams object
// with the ability to set a context for a request.
func NewCombinedEdgesGetParamsWithContext(ctx context.Context) *CombinedEdgesGetParams {
	return &CombinedEdgesGetParams{
		Context: ctx,
	}
}

// NewCombinedEdgesGetParamsWithHTTPClient creates a new CombinedEdgesGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewCombinedEdgesGetParamsWithHTTPClient(client *http.Client) *CombinedEdgesGetParams {
	return &CombinedEdgesGetParams{
		HTTPClient: client,
	}
}

/*
CombinedEdgesGetParams contains all the parameters to send to the API endpoint

	for the combined edges get operation.

	Typically these are written to a http.Request.
*/
type CombinedEdgesGetParams struct {

	/* Direction.

	   The direction of edges that you would like to retrieve.
	*/
	Direction *string

	/* EdgeType.

	   The type of edges that you would like to retrieve
	*/
	EdgeType string

	/* Ids.

	   Vertex ID to get details for.  Only one value is supported
	*/
	Ids string

	/* Limit.

	   How many edges to return in a single request [1-100]

	   Default: 100
	*/
	Limit *int64

	/* Nano.

	   Return nano-precision entity timestamps
	*/
	Nano *bool

	/* Offset.

	   The offset to use to retrieve the next page of results
	*/
	Offset *string

	/* Scope.

	   Scope of the request

	   Default: "device"
	*/
	Scope *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the combined edges get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CombinedEdgesGetParams) WithDefaults() *CombinedEdgesGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the combined edges get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CombinedEdgesGetParams) SetDefaults() {
	var (
		limitDefault = int64(100)

		nanoDefault = bool(false)

		scopeDefault = string("device")
	)

	val := CombinedEdgesGetParams{
		Limit: &limitDefault,
		Nano:  &nanoDefault,
		Scope: &scopeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the combined edges get params
func (o *CombinedEdgesGetParams) WithTimeout(timeout time.Duration) *CombinedEdgesGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the combined edges get params
func (o *CombinedEdgesGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the combined edges get params
func (o *CombinedEdgesGetParams) WithContext(ctx context.Context) *CombinedEdgesGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the combined edges get params
func (o *CombinedEdgesGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the combined edges get params
func (o *CombinedEdgesGetParams) WithHTTPClient(client *http.Client) *CombinedEdgesGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the combined edges get params
func (o *CombinedEdgesGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDirection adds the direction to the combined edges get params
func (o *CombinedEdgesGetParams) WithDirection(direction *string) *CombinedEdgesGetParams {
	o.SetDirection(direction)
	return o
}

// SetDirection adds the direction to the combined edges get params
func (o *CombinedEdgesGetParams) SetDirection(direction *string) {
	o.Direction = direction
}

// WithEdgeType adds the edgeType to the combined edges get params
func (o *CombinedEdgesGetParams) WithEdgeType(edgeType string) *CombinedEdgesGetParams {
	o.SetEdgeType(edgeType)
	return o
}

// SetEdgeType adds the edgeType to the combined edges get params
func (o *CombinedEdgesGetParams) SetEdgeType(edgeType string) {
	o.EdgeType = edgeType
}

// WithIds adds the ids to the combined edges get params
func (o *CombinedEdgesGetParams) WithIds(ids string) *CombinedEdgesGetParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the combined edges get params
func (o *CombinedEdgesGetParams) SetIds(ids string) {
	o.Ids = ids
}

// WithLimit adds the limit to the combined edges get params
func (o *CombinedEdgesGetParams) WithLimit(limit *int64) *CombinedEdgesGetParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the combined edges get params
func (o *CombinedEdgesGetParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithNano adds the nano to the combined edges get params
func (o *CombinedEdgesGetParams) WithNano(nano *bool) *CombinedEdgesGetParams {
	o.SetNano(nano)
	return o
}

// SetNano adds the nano to the combined edges get params
func (o *CombinedEdgesGetParams) SetNano(nano *bool) {
	o.Nano = nano
}

// WithOffset adds the offset to the combined edges get params
func (o *CombinedEdgesGetParams) WithOffset(offset *string) *CombinedEdgesGetParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the combined edges get params
func (o *CombinedEdgesGetParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithScope adds the scope to the combined edges get params
func (o *CombinedEdgesGetParams) WithScope(scope *string) *CombinedEdgesGetParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the combined edges get params
func (o *CombinedEdgesGetParams) SetScope(scope *string) {
	o.Scope = scope
}

// WriteToRequest writes these params to a swagger request
func (o *CombinedEdgesGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Direction != nil {

		// query param direction
		var qrDirection string

		if o.Direction != nil {
			qrDirection = *o.Direction
		}
		qDirection := qrDirection
		if qDirection != "" {

			if err := r.SetQueryParam("direction", qDirection); err != nil {
				return err
			}
		}
	}

	// query param edge_type
	qrEdgeType := o.EdgeType
	qEdgeType := qrEdgeType
	if qEdgeType != "" {

		if err := r.SetQueryParam("edge_type", qEdgeType); err != nil {
			return err
		}
	}

	// query param ids
	qrIds := o.Ids
	qIds := qrIds
	if qIds != "" {

		if err := r.SetQueryParam("ids", qIds); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Nano != nil {

		// query param nano
		var qrNano bool

		if o.Nano != nil {
			qrNano = *o.Nano
		}
		qNano := swag.FormatBool(qrNano)
		if qNano != "" {

			if err := r.SetQueryParam("nano", qNano); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Scope != nil {

		// query param scope
		var qrScope string

		if o.Scope != nil {
			qrScope = *o.Scope
		}
		qScope := qrScope
		if qScope != "" {

			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
