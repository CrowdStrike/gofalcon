// Code generated by go-swagger; DO NOT EDIT.

package threatgraph

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// EntitiesVerticesGetv2Reader is a Reader for the EntitiesVerticesGetv2 structure.
type EntitiesVerticesGetv2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EntitiesVerticesGetv2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEntitiesVerticesGetv2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEntitiesVerticesGetv2BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEntitiesVerticesGetv2Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEntitiesVerticesGetv2Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEntitiesVerticesGetv2NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewEntitiesVerticesGetv2Gone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewEntitiesVerticesGetv2TooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEntitiesVerticesGetv2InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewEntitiesVerticesGetv2BadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /threatgraph/entities/{vertex-type}/v2] entities_vertices_getv2", response, response.Code())
	}
}

// NewEntitiesVerticesGetv2OK creates a EntitiesVerticesGetv2OK with default headers values
func NewEntitiesVerticesGetv2OK() *EntitiesVerticesGetv2OK {
	return &EntitiesVerticesGetv2OK{}
}

/*
EntitiesVerticesGetv2OK describes a response with status code 200, with default header values.

OK
*/
type EntitiesVerticesGetv2OK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ThreatgraphVertexDetailsResponse
}

// IsSuccess returns true when this entities vertices getv2 o k response has a 2xx status code
func (o *EntitiesVerticesGetv2OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this entities vertices getv2 o k response has a 3xx status code
func (o *EntitiesVerticesGetv2OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities vertices getv2 o k response has a 4xx status code
func (o *EntitiesVerticesGetv2OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this entities vertices getv2 o k response has a 5xx status code
func (o *EntitiesVerticesGetv2OK) IsServerError() bool {
	return false
}

// IsCode returns true when this entities vertices getv2 o k response a status code equal to that given
func (o *EntitiesVerticesGetv2OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the entities vertices getv2 o k response
func (o *EntitiesVerticesGetv2OK) Code() int {
	return 200
}

func (o *EntitiesVerticesGetv2OK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /threatgraph/entities/{vertex-type}/v2][%d] entitiesVerticesGetv2OK %s", 200, payload)
}

func (o *EntitiesVerticesGetv2OK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /threatgraph/entities/{vertex-type}/v2][%d] entitiesVerticesGetv2OK %s", 200, payload)
}

func (o *EntitiesVerticesGetv2OK) GetPayload() *models.ThreatgraphVertexDetailsResponse {
	return o.Payload
}

func (o *EntitiesVerticesGetv2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ThreatgraphVertexDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesVerticesGetv2BadRequest creates a EntitiesVerticesGetv2BadRequest with default headers values
func NewEntitiesVerticesGetv2BadRequest() *EntitiesVerticesGetv2BadRequest {
	return &EntitiesVerticesGetv2BadRequest{}
}

/*
EntitiesVerticesGetv2BadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type EntitiesVerticesGetv2BadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ThreatgraphVertexDetailsResponse
}

// IsSuccess returns true when this entities vertices getv2 bad request response has a 2xx status code
func (o *EntitiesVerticesGetv2BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities vertices getv2 bad request response has a 3xx status code
func (o *EntitiesVerticesGetv2BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities vertices getv2 bad request response has a 4xx status code
func (o *EntitiesVerticesGetv2BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities vertices getv2 bad request response has a 5xx status code
func (o *EntitiesVerticesGetv2BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this entities vertices getv2 bad request response a status code equal to that given
func (o *EntitiesVerticesGetv2BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the entities vertices getv2 bad request response
func (o *EntitiesVerticesGetv2BadRequest) Code() int {
	return 400
}

func (o *EntitiesVerticesGetv2BadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /threatgraph/entities/{vertex-type}/v2][%d] entitiesVerticesGetv2BadRequest %s", 400, payload)
}

func (o *EntitiesVerticesGetv2BadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /threatgraph/entities/{vertex-type}/v2][%d] entitiesVerticesGetv2BadRequest %s", 400, payload)
}

func (o *EntitiesVerticesGetv2BadRequest) GetPayload() *models.ThreatgraphVertexDetailsResponse {
	return o.Payload
}

func (o *EntitiesVerticesGetv2BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ThreatgraphVertexDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesVerticesGetv2Unauthorized creates a EntitiesVerticesGetv2Unauthorized with default headers values
func NewEntitiesVerticesGetv2Unauthorized() *EntitiesVerticesGetv2Unauthorized {
	return &EntitiesVerticesGetv2Unauthorized{}
}

/*
EntitiesVerticesGetv2Unauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type EntitiesVerticesGetv2Unauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ThreatgraphVertexDetailsResponse
}

// IsSuccess returns true when this entities vertices getv2 unauthorized response has a 2xx status code
func (o *EntitiesVerticesGetv2Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities vertices getv2 unauthorized response has a 3xx status code
func (o *EntitiesVerticesGetv2Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities vertices getv2 unauthorized response has a 4xx status code
func (o *EntitiesVerticesGetv2Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities vertices getv2 unauthorized response has a 5xx status code
func (o *EntitiesVerticesGetv2Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this entities vertices getv2 unauthorized response a status code equal to that given
func (o *EntitiesVerticesGetv2Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the entities vertices getv2 unauthorized response
func (o *EntitiesVerticesGetv2Unauthorized) Code() int {
	return 401
}

func (o *EntitiesVerticesGetv2Unauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /threatgraph/entities/{vertex-type}/v2][%d] entitiesVerticesGetv2Unauthorized %s", 401, payload)
}

func (o *EntitiesVerticesGetv2Unauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /threatgraph/entities/{vertex-type}/v2][%d] entitiesVerticesGetv2Unauthorized %s", 401, payload)
}

func (o *EntitiesVerticesGetv2Unauthorized) GetPayload() *models.ThreatgraphVertexDetailsResponse {
	return o.Payload
}

func (o *EntitiesVerticesGetv2Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ThreatgraphVertexDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesVerticesGetv2Forbidden creates a EntitiesVerticesGetv2Forbidden with default headers values
func NewEntitiesVerticesGetv2Forbidden() *EntitiesVerticesGetv2Forbidden {
	return &EntitiesVerticesGetv2Forbidden{}
}

/*
EntitiesVerticesGetv2Forbidden describes a response with status code 403, with default header values.

Forbidden
*/
type EntitiesVerticesGetv2Forbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this entities vertices getv2 forbidden response has a 2xx status code
func (o *EntitiesVerticesGetv2Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities vertices getv2 forbidden response has a 3xx status code
func (o *EntitiesVerticesGetv2Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities vertices getv2 forbidden response has a 4xx status code
func (o *EntitiesVerticesGetv2Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities vertices getv2 forbidden response has a 5xx status code
func (o *EntitiesVerticesGetv2Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this entities vertices getv2 forbidden response a status code equal to that given
func (o *EntitiesVerticesGetv2Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the entities vertices getv2 forbidden response
func (o *EntitiesVerticesGetv2Forbidden) Code() int {
	return 403
}

func (o *EntitiesVerticesGetv2Forbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /threatgraph/entities/{vertex-type}/v2][%d] entitiesVerticesGetv2Forbidden %s", 403, payload)
}

func (o *EntitiesVerticesGetv2Forbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /threatgraph/entities/{vertex-type}/v2][%d] entitiesVerticesGetv2Forbidden %s", 403, payload)
}

func (o *EntitiesVerticesGetv2Forbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *EntitiesVerticesGetv2Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesVerticesGetv2NotFound creates a EntitiesVerticesGetv2NotFound with default headers values
func NewEntitiesVerticesGetv2NotFound() *EntitiesVerticesGetv2NotFound {
	return &EntitiesVerticesGetv2NotFound{}
}

/*
EntitiesVerticesGetv2NotFound describes a response with status code 404, with default header values.

Not Found
*/
type EntitiesVerticesGetv2NotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ThreatgraphVertexDetailsResponse
}

// IsSuccess returns true when this entities vertices getv2 not found response has a 2xx status code
func (o *EntitiesVerticesGetv2NotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities vertices getv2 not found response has a 3xx status code
func (o *EntitiesVerticesGetv2NotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities vertices getv2 not found response has a 4xx status code
func (o *EntitiesVerticesGetv2NotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities vertices getv2 not found response has a 5xx status code
func (o *EntitiesVerticesGetv2NotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this entities vertices getv2 not found response a status code equal to that given
func (o *EntitiesVerticesGetv2NotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the entities vertices getv2 not found response
func (o *EntitiesVerticesGetv2NotFound) Code() int {
	return 404
}

func (o *EntitiesVerticesGetv2NotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /threatgraph/entities/{vertex-type}/v2][%d] entitiesVerticesGetv2NotFound %s", 404, payload)
}

func (o *EntitiesVerticesGetv2NotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /threatgraph/entities/{vertex-type}/v2][%d] entitiesVerticesGetv2NotFound %s", 404, payload)
}

func (o *EntitiesVerticesGetv2NotFound) GetPayload() *models.ThreatgraphVertexDetailsResponse {
	return o.Payload
}

func (o *EntitiesVerticesGetv2NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ThreatgraphVertexDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesVerticesGetv2Gone creates a EntitiesVerticesGetv2Gone with default headers values
func NewEntitiesVerticesGetv2Gone() *EntitiesVerticesGetv2Gone {
	return &EntitiesVerticesGetv2Gone{}
}

/*
EntitiesVerticesGetv2Gone describes a response with status code 410, with default header values.

Gone
*/
type EntitiesVerticesGetv2Gone struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ThreatgraphVertexDetailsResponse
}

// IsSuccess returns true when this entities vertices getv2 gone response has a 2xx status code
func (o *EntitiesVerticesGetv2Gone) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities vertices getv2 gone response has a 3xx status code
func (o *EntitiesVerticesGetv2Gone) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities vertices getv2 gone response has a 4xx status code
func (o *EntitiesVerticesGetv2Gone) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities vertices getv2 gone response has a 5xx status code
func (o *EntitiesVerticesGetv2Gone) IsServerError() bool {
	return false
}

// IsCode returns true when this entities vertices getv2 gone response a status code equal to that given
func (o *EntitiesVerticesGetv2Gone) IsCode(code int) bool {
	return code == 410
}

// Code gets the status code for the entities vertices getv2 gone response
func (o *EntitiesVerticesGetv2Gone) Code() int {
	return 410
}

func (o *EntitiesVerticesGetv2Gone) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /threatgraph/entities/{vertex-type}/v2][%d] entitiesVerticesGetv2Gone %s", 410, payload)
}

func (o *EntitiesVerticesGetv2Gone) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /threatgraph/entities/{vertex-type}/v2][%d] entitiesVerticesGetv2Gone %s", 410, payload)
}

func (o *EntitiesVerticesGetv2Gone) GetPayload() *models.ThreatgraphVertexDetailsResponse {
	return o.Payload
}

func (o *EntitiesVerticesGetv2Gone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ThreatgraphVertexDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesVerticesGetv2TooManyRequests creates a EntitiesVerticesGetv2TooManyRequests with default headers values
func NewEntitiesVerticesGetv2TooManyRequests() *EntitiesVerticesGetv2TooManyRequests {
	return &EntitiesVerticesGetv2TooManyRequests{}
}

/*
EntitiesVerticesGetv2TooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type EntitiesVerticesGetv2TooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this entities vertices getv2 too many requests response has a 2xx status code
func (o *EntitiesVerticesGetv2TooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities vertices getv2 too many requests response has a 3xx status code
func (o *EntitiesVerticesGetv2TooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities vertices getv2 too many requests response has a 4xx status code
func (o *EntitiesVerticesGetv2TooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this entities vertices getv2 too many requests response has a 5xx status code
func (o *EntitiesVerticesGetv2TooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this entities vertices getv2 too many requests response a status code equal to that given
func (o *EntitiesVerticesGetv2TooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the entities vertices getv2 too many requests response
func (o *EntitiesVerticesGetv2TooManyRequests) Code() int {
	return 429
}

func (o *EntitiesVerticesGetv2TooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /threatgraph/entities/{vertex-type}/v2][%d] entitiesVerticesGetv2TooManyRequests %s", 429, payload)
}

func (o *EntitiesVerticesGetv2TooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /threatgraph/entities/{vertex-type}/v2][%d] entitiesVerticesGetv2TooManyRequests %s", 429, payload)
}

func (o *EntitiesVerticesGetv2TooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *EntitiesVerticesGetv2TooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesVerticesGetv2InternalServerError creates a EntitiesVerticesGetv2InternalServerError with default headers values
func NewEntitiesVerticesGetv2InternalServerError() *EntitiesVerticesGetv2InternalServerError {
	return &EntitiesVerticesGetv2InternalServerError{}
}

/*
EntitiesVerticesGetv2InternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type EntitiesVerticesGetv2InternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ThreatgraphVertexDetailsResponse
}

// IsSuccess returns true when this entities vertices getv2 internal server error response has a 2xx status code
func (o *EntitiesVerticesGetv2InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities vertices getv2 internal server error response has a 3xx status code
func (o *EntitiesVerticesGetv2InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities vertices getv2 internal server error response has a 4xx status code
func (o *EntitiesVerticesGetv2InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this entities vertices getv2 internal server error response has a 5xx status code
func (o *EntitiesVerticesGetv2InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this entities vertices getv2 internal server error response a status code equal to that given
func (o *EntitiesVerticesGetv2InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the entities vertices getv2 internal server error response
func (o *EntitiesVerticesGetv2InternalServerError) Code() int {
	return 500
}

func (o *EntitiesVerticesGetv2InternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /threatgraph/entities/{vertex-type}/v2][%d] entitiesVerticesGetv2InternalServerError %s", 500, payload)
}

func (o *EntitiesVerticesGetv2InternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /threatgraph/entities/{vertex-type}/v2][%d] entitiesVerticesGetv2InternalServerError %s", 500, payload)
}

func (o *EntitiesVerticesGetv2InternalServerError) GetPayload() *models.ThreatgraphVertexDetailsResponse {
	return o.Payload
}

func (o *EntitiesVerticesGetv2InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ThreatgraphVertexDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEntitiesVerticesGetv2BadGateway creates a EntitiesVerticesGetv2BadGateway with default headers values
func NewEntitiesVerticesGetv2BadGateway() *EntitiesVerticesGetv2BadGateway {
	return &EntitiesVerticesGetv2BadGateway{}
}

/*
EntitiesVerticesGetv2BadGateway describes a response with status code 502, with default header values.

Bad Gateway
*/
type EntitiesVerticesGetv2BadGateway struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ThreatgraphVertexDetailsResponse
}

// IsSuccess returns true when this entities vertices getv2 bad gateway response has a 2xx status code
func (o *EntitiesVerticesGetv2BadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this entities vertices getv2 bad gateway response has a 3xx status code
func (o *EntitiesVerticesGetv2BadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this entities vertices getv2 bad gateway response has a 4xx status code
func (o *EntitiesVerticesGetv2BadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this entities vertices getv2 bad gateway response has a 5xx status code
func (o *EntitiesVerticesGetv2BadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this entities vertices getv2 bad gateway response a status code equal to that given
func (o *EntitiesVerticesGetv2BadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the entities vertices getv2 bad gateway response
func (o *EntitiesVerticesGetv2BadGateway) Code() int {
	return 502
}

func (o *EntitiesVerticesGetv2BadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /threatgraph/entities/{vertex-type}/v2][%d] entitiesVerticesGetv2BadGateway %s", 502, payload)
}

func (o *EntitiesVerticesGetv2BadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /threatgraph/entities/{vertex-type}/v2][%d] entitiesVerticesGetv2BadGateway %s", 502, payload)
}

func (o *EntitiesVerticesGetv2BadGateway) GetPayload() *models.ThreatgraphVertexDetailsResponse {
	return o.Payload
}

func (o *EntitiesVerticesGetv2BadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ThreatgraphVertexDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
