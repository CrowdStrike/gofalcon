// Code generated by go-swagger; DO NOT EDIT.

package threatgraph

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCombinedRanOnGetParams creates a new CombinedRanOnGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCombinedRanOnGetParams() *CombinedRanOnGetParams {
	return &CombinedRanOnGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCombinedRanOnGetParamsWithTimeout creates a new CombinedRanOnGetParams object
// with the ability to set a timeout on a request.
func NewCombinedRanOnGetParamsWithTimeout(timeout time.Duration) *CombinedRanOnGetParams {
	return &CombinedRanOnGetParams{
		timeout: timeout,
	}
}

// NewCombinedRanOnGetParamsWithContext creates a new CombinedRanOnGetParams object
// with the ability to set a context for a request.
func NewCombinedRanOnGetParamsWithContext(ctx context.Context) *CombinedRanOnGetParams {
	return &CombinedRanOnGetParams{
		Context: ctx,
	}
}

// NewCombinedRanOnGetParamsWithHTTPClient creates a new CombinedRanOnGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewCombinedRanOnGetParamsWithHTTPClient(client *http.Client) *CombinedRanOnGetParams {
	return &CombinedRanOnGetParams{
		HTTPClient: client,
	}
}

/*
CombinedRanOnGetParams contains all the parameters to send to the API endpoint

	for the combined ran on get operation.

	Typically these are written to a http.Request.
*/
type CombinedRanOnGetParams struct {

	/* Limit.

	   How many edges to return in a single request [1-100]

	   Default: 100
	*/
	Limit *int64

	/* Nano.

	   Return nano-precision entity timestamps
	*/
	Nano *bool

	/* Offset.

	   The offset to use to retrieve the next page of results
	*/
	Offset *string

	/* Type.

	   The type of indicator that you would like to retrieve
	*/
	Type string

	/* Value.

	   The value of the indicator to search by.
	*/
	Value string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the combined ran on get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CombinedRanOnGetParams) WithDefaults() *CombinedRanOnGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the combined ran on get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CombinedRanOnGetParams) SetDefaults() {
	var (
		limitDefault = int64(100)

		nanoDefault = bool(false)
	)

	val := CombinedRanOnGetParams{
		Limit: &limitDefault,
		Nano:  &nanoDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the combined ran on get params
func (o *CombinedRanOnGetParams) WithTimeout(timeout time.Duration) *CombinedRanOnGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the combined ran on get params
func (o *CombinedRanOnGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the combined ran on get params
func (o *CombinedRanOnGetParams) WithContext(ctx context.Context) *CombinedRanOnGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the combined ran on get params
func (o *CombinedRanOnGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the combined ran on get params
func (o *CombinedRanOnGetParams) WithHTTPClient(client *http.Client) *CombinedRanOnGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the combined ran on get params
func (o *CombinedRanOnGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the combined ran on get params
func (o *CombinedRanOnGetParams) WithLimit(limit *int64) *CombinedRanOnGetParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the combined ran on get params
func (o *CombinedRanOnGetParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithNano adds the nano to the combined ran on get params
func (o *CombinedRanOnGetParams) WithNano(nano *bool) *CombinedRanOnGetParams {
	o.SetNano(nano)
	return o
}

// SetNano adds the nano to the combined ran on get params
func (o *CombinedRanOnGetParams) SetNano(nano *bool) {
	o.Nano = nano
}

// WithOffset adds the offset to the combined ran on get params
func (o *CombinedRanOnGetParams) WithOffset(offset *string) *CombinedRanOnGetParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the combined ran on get params
func (o *CombinedRanOnGetParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithType adds the typeVar to the combined ran on get params
func (o *CombinedRanOnGetParams) WithType(typeVar string) *CombinedRanOnGetParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the combined ran on get params
func (o *CombinedRanOnGetParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WithValue adds the value to the combined ran on get params
func (o *CombinedRanOnGetParams) WithValue(value string) *CombinedRanOnGetParams {
	o.SetValue(value)
	return o
}

// SetValue adds the value to the combined ran on get params
func (o *CombinedRanOnGetParams) SetValue(value string) {
	o.Value = value
}

// WriteToRequest writes these params to a swagger request
func (o *CombinedRanOnGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Nano != nil {

		// query param nano
		var qrNano bool

		if o.Nano != nil {
			qrNano = *o.Nano
		}
		qNano := swag.FormatBool(qrNano)
		if qNano != "" {

			if err := r.SetQueryParam("nano", qNano); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	// query param type
	qrType := o.Type
	qType := qrType
	if qType != "" {

		if err := r.SetQueryParam("type", qType); err != nil {
			return err
		}
	}

	// query param value
	qrValue := o.Value
	qValue := qrValue
	if qValue != "" {

		if err := r.SetQueryParam("value", qValue); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
