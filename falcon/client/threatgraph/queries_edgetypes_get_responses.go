// Code generated by go-swagger; DO NOT EDIT.

package threatgraph

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/aslape/gofalcon/falcon/models"
)

// QueriesEdgetypesGetReader is a Reader for the QueriesEdgetypesGet structure.
type QueriesEdgetypesGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueriesEdgetypesGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueriesEdgetypesGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewQueriesEdgetypesGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewQueriesEdgetypesGetTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /threatgraph/queries/edge-types/v1] queries_edgetypes_get", response, response.Code())
	}
}

// NewQueriesEdgetypesGetOK creates a QueriesEdgetypesGetOK with default headers values
func NewQueriesEdgetypesGetOK() *QueriesEdgetypesGetOK {
	return &QueriesEdgetypesGetOK{}
}

/*
QueriesEdgetypesGetOK describes a response with status code 200, with default header values.

OK
*/
type QueriesEdgetypesGetOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this queries edgetypes get o k response has a 2xx status code
func (o *QueriesEdgetypesGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this queries edgetypes get o k response has a 3xx status code
func (o *QueriesEdgetypesGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this queries edgetypes get o k response has a 4xx status code
func (o *QueriesEdgetypesGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this queries edgetypes get o k response has a 5xx status code
func (o *QueriesEdgetypesGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this queries edgetypes get o k response a status code equal to that given
func (o *QueriesEdgetypesGetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the queries edgetypes get o k response
func (o *QueriesEdgetypesGetOK) Code() int {
	return 200
}

func (o *QueriesEdgetypesGetOK) Error() string {
	return fmt.Sprintf("[GET /threatgraph/queries/edge-types/v1][%d] queriesEdgetypesGetOK ", 200)
}

func (o *QueriesEdgetypesGetOK) String() string {
	return fmt.Sprintf("[GET /threatgraph/queries/edge-types/v1][%d] queriesEdgetypesGetOK ", 200)
}

func (o *QueriesEdgetypesGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewQueriesEdgetypesGetForbidden creates a QueriesEdgetypesGetForbidden with default headers values
func NewQueriesEdgetypesGetForbidden() *QueriesEdgetypesGetForbidden {
	return &QueriesEdgetypesGetForbidden{}
}

/*
QueriesEdgetypesGetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type QueriesEdgetypesGetForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this queries edgetypes get forbidden response has a 2xx status code
func (o *QueriesEdgetypesGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this queries edgetypes get forbidden response has a 3xx status code
func (o *QueriesEdgetypesGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this queries edgetypes get forbidden response has a 4xx status code
func (o *QueriesEdgetypesGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this queries edgetypes get forbidden response has a 5xx status code
func (o *QueriesEdgetypesGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this queries edgetypes get forbidden response a status code equal to that given
func (o *QueriesEdgetypesGetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the queries edgetypes get forbidden response
func (o *QueriesEdgetypesGetForbidden) Code() int {
	return 403
}

func (o *QueriesEdgetypesGetForbidden) Error() string {
	return fmt.Sprintf("[GET /threatgraph/queries/edge-types/v1][%d] queriesEdgetypesGetForbidden  %+v", 403, o.Payload)
}

func (o *QueriesEdgetypesGetForbidden) String() string {
	return fmt.Sprintf("[GET /threatgraph/queries/edge-types/v1][%d] queriesEdgetypesGetForbidden  %+v", 403, o.Payload)
}

func (o *QueriesEdgetypesGetForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueriesEdgetypesGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueriesEdgetypesGetTooManyRequests creates a QueriesEdgetypesGetTooManyRequests with default headers values
func NewQueriesEdgetypesGetTooManyRequests() *QueriesEdgetypesGetTooManyRequests {
	return &QueriesEdgetypesGetTooManyRequests{}
}

/*
QueriesEdgetypesGetTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type QueriesEdgetypesGetTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this queries edgetypes get too many requests response has a 2xx status code
func (o *QueriesEdgetypesGetTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this queries edgetypes get too many requests response has a 3xx status code
func (o *QueriesEdgetypesGetTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this queries edgetypes get too many requests response has a 4xx status code
func (o *QueriesEdgetypesGetTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this queries edgetypes get too many requests response has a 5xx status code
func (o *QueriesEdgetypesGetTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this queries edgetypes get too many requests response a status code equal to that given
func (o *QueriesEdgetypesGetTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the queries edgetypes get too many requests response
func (o *QueriesEdgetypesGetTooManyRequests) Code() int {
	return 429
}

func (o *QueriesEdgetypesGetTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /threatgraph/queries/edge-types/v1][%d] queriesEdgetypesGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *QueriesEdgetypesGetTooManyRequests) String() string {
	return fmt.Sprintf("[GET /threatgraph/queries/edge-types/v1][%d] queriesEdgetypesGetTooManyRequests  %+v", 429, o.Payload)
}

func (o *QueriesEdgetypesGetTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueriesEdgetypesGetTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
