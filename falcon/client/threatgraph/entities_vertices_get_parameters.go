// Code generated by go-swagger; DO NOT EDIT.

package threatgraph

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewEntitiesVerticesGetParams creates a new EntitiesVerticesGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewEntitiesVerticesGetParams() *EntitiesVerticesGetParams {
	return &EntitiesVerticesGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewEntitiesVerticesGetParamsWithTimeout creates a new EntitiesVerticesGetParams object
// with the ability to set a timeout on a request.
func NewEntitiesVerticesGetParamsWithTimeout(timeout time.Duration) *EntitiesVerticesGetParams {
	return &EntitiesVerticesGetParams{
		timeout: timeout,
	}
}

// NewEntitiesVerticesGetParamsWithContext creates a new EntitiesVerticesGetParams object
// with the ability to set a context for a request.
func NewEntitiesVerticesGetParamsWithContext(ctx context.Context) *EntitiesVerticesGetParams {
	return &EntitiesVerticesGetParams{
		Context: ctx,
	}
}

// NewEntitiesVerticesGetParamsWithHTTPClient creates a new EntitiesVerticesGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewEntitiesVerticesGetParamsWithHTTPClient(client *http.Client) *EntitiesVerticesGetParams {
	return &EntitiesVerticesGetParams{
		HTTPClient: client,
	}
}

/*
EntitiesVerticesGetParams contains all the parameters to send to the API endpoint

	for the entities vertices get operation.

	Typically these are written to a http.Request.
*/
type EntitiesVerticesGetParams struct {

	/* Ids.

	   Vertex ID to get details for
	*/
	Ids []string

	/* Nano.

	   Return nano-precision entity timestamps
	*/
	Nano *bool

	/* Scope.

	   Scope of the request

	   Default: "device"
	*/
	Scope *string

	/* VertexType.

	   Type of vertex to get properties for
	*/
	VertexType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the entities vertices get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EntitiesVerticesGetParams) WithDefaults() *EntitiesVerticesGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the entities vertices get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EntitiesVerticesGetParams) SetDefaults() {
	var (
		nanoDefault = bool(false)

		scopeDefault = string("device")
	)

	val := EntitiesVerticesGetParams{
		Nano:  &nanoDefault,
		Scope: &scopeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the entities vertices get params
func (o *EntitiesVerticesGetParams) WithTimeout(timeout time.Duration) *EntitiesVerticesGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the entities vertices get params
func (o *EntitiesVerticesGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the entities vertices get params
func (o *EntitiesVerticesGetParams) WithContext(ctx context.Context) *EntitiesVerticesGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the entities vertices get params
func (o *EntitiesVerticesGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the entities vertices get params
func (o *EntitiesVerticesGetParams) WithHTTPClient(client *http.Client) *EntitiesVerticesGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the entities vertices get params
func (o *EntitiesVerticesGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIds adds the ids to the entities vertices get params
func (o *EntitiesVerticesGetParams) WithIds(ids []string) *EntitiesVerticesGetParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the entities vertices get params
func (o *EntitiesVerticesGetParams) SetIds(ids []string) {
	o.Ids = ids
}

// WithNano adds the nano to the entities vertices get params
func (o *EntitiesVerticesGetParams) WithNano(nano *bool) *EntitiesVerticesGetParams {
	o.SetNano(nano)
	return o
}

// SetNano adds the nano to the entities vertices get params
func (o *EntitiesVerticesGetParams) SetNano(nano *bool) {
	o.Nano = nano
}

// WithScope adds the scope to the entities vertices get params
func (o *EntitiesVerticesGetParams) WithScope(scope *string) *EntitiesVerticesGetParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the entities vertices get params
func (o *EntitiesVerticesGetParams) SetScope(scope *string) {
	o.Scope = scope
}

// WithVertexType adds the vertexType to the entities vertices get params
func (o *EntitiesVerticesGetParams) WithVertexType(vertexType string) *EntitiesVerticesGetParams {
	o.SetVertexType(vertexType)
	return o
}

// SetVertexType adds the vertexType to the entities vertices get params
func (o *EntitiesVerticesGetParams) SetVertexType(vertexType string) {
	o.VertexType = vertexType
}

// WriteToRequest writes these params to a swagger request
func (o *EntitiesVerticesGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.Nano != nil {

		// query param nano
		var qrNano bool

		if o.Nano != nil {
			qrNano = *o.Nano
		}
		qNano := swag.FormatBool(qrNano)
		if qNano != "" {

			if err := r.SetQueryParam("nano", qNano); err != nil {
				return err
			}
		}
	}

	if o.Scope != nil {

		// query param scope
		var qrScope string

		if o.Scope != nil {
			qrScope = *o.Scope
		}
		qScope := qrScope
		if qScope != "" {

			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}
	}

	// path param vertex-type
	if err := r.SetPathParam("vertex-type", o.VertexType); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamEntitiesVerticesGet binds the parameter ids
func (o *EntitiesVerticesGetParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []string

		idsIIV := idsIIR // string as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: "multi"
	idsIS := swag.JoinByFormat(idsIC, "multi")

	return idsIS
}
