// Code generated by go-swagger; DO NOT EDIT.

package host_migration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CreateMigrationV1Reader is a Reader for the CreateMigrationV1 structure.
type CreateMigrationV1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateMigrationV1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateMigrationV1Created()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateMigrationV1BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateMigrationV1Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateMigrationV1NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateMigrationV1TooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateMigrationV1InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /host-migration/entities/migrations/v1] CreateMigrationV1", response, response.Code())
	}
}

// NewCreateMigrationV1Created creates a CreateMigrationV1Created with default headers values
func NewCreateMigrationV1Created() *CreateMigrationV1Created {
	return &CreateMigrationV1Created{}
}

/*
CreateMigrationV1Created describes a response with status code 201, with default header values.

Created
*/
type CreateMigrationV1Created struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APICreateMigrationResponseV1
}

// IsSuccess returns true when this create migration v1 created response has a 2xx status code
func (o *CreateMigrationV1Created) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create migration v1 created response has a 3xx status code
func (o *CreateMigrationV1Created) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create migration v1 created response has a 4xx status code
func (o *CreateMigrationV1Created) IsClientError() bool {
	return false
}

// IsServerError returns true when this create migration v1 created response has a 5xx status code
func (o *CreateMigrationV1Created) IsServerError() bool {
	return false
}

// IsCode returns true when this create migration v1 created response a status code equal to that given
func (o *CreateMigrationV1Created) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create migration v1 created response
func (o *CreateMigrationV1Created) Code() int {
	return 201
}

func (o *CreateMigrationV1Created) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /host-migration/entities/migrations/v1][%d] createMigrationV1Created %s", 201, payload)
}

func (o *CreateMigrationV1Created) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /host-migration/entities/migrations/v1][%d] createMigrationV1Created %s", 201, payload)
}

func (o *CreateMigrationV1Created) GetPayload() *models.APICreateMigrationResponseV1 {
	return o.Payload
}

func (o *CreateMigrationV1Created) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APICreateMigrationResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMigrationV1BadRequest creates a CreateMigrationV1BadRequest with default headers values
func NewCreateMigrationV1BadRequest() *CreateMigrationV1BadRequest {
	return &CreateMigrationV1BadRequest{}
}

/*
CreateMigrationV1BadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateMigrationV1BadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APICreateMigrationResponseV1
}

// IsSuccess returns true when this create migration v1 bad request response has a 2xx status code
func (o *CreateMigrationV1BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create migration v1 bad request response has a 3xx status code
func (o *CreateMigrationV1BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create migration v1 bad request response has a 4xx status code
func (o *CreateMigrationV1BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create migration v1 bad request response has a 5xx status code
func (o *CreateMigrationV1BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create migration v1 bad request response a status code equal to that given
func (o *CreateMigrationV1BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create migration v1 bad request response
func (o *CreateMigrationV1BadRequest) Code() int {
	return 400
}

func (o *CreateMigrationV1BadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /host-migration/entities/migrations/v1][%d] createMigrationV1BadRequest %s", 400, payload)
}

func (o *CreateMigrationV1BadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /host-migration/entities/migrations/v1][%d] createMigrationV1BadRequest %s", 400, payload)
}

func (o *CreateMigrationV1BadRequest) GetPayload() *models.APICreateMigrationResponseV1 {
	return o.Payload
}

func (o *CreateMigrationV1BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APICreateMigrationResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMigrationV1Forbidden creates a CreateMigrationV1Forbidden with default headers values
func NewCreateMigrationV1Forbidden() *CreateMigrationV1Forbidden {
	return &CreateMigrationV1Forbidden{}
}

/*
CreateMigrationV1Forbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateMigrationV1Forbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this create migration v1 forbidden response has a 2xx status code
func (o *CreateMigrationV1Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create migration v1 forbidden response has a 3xx status code
func (o *CreateMigrationV1Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create migration v1 forbidden response has a 4xx status code
func (o *CreateMigrationV1Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create migration v1 forbidden response has a 5xx status code
func (o *CreateMigrationV1Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create migration v1 forbidden response a status code equal to that given
func (o *CreateMigrationV1Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create migration v1 forbidden response
func (o *CreateMigrationV1Forbidden) Code() int {
	return 403
}

func (o *CreateMigrationV1Forbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /host-migration/entities/migrations/v1][%d] createMigrationV1Forbidden %s", 403, payload)
}

func (o *CreateMigrationV1Forbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /host-migration/entities/migrations/v1][%d] createMigrationV1Forbidden %s", 403, payload)
}

func (o *CreateMigrationV1Forbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateMigrationV1Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMigrationV1NotFound creates a CreateMigrationV1NotFound with default headers values
func NewCreateMigrationV1NotFound() *CreateMigrationV1NotFound {
	return &CreateMigrationV1NotFound{}
}

/*
CreateMigrationV1NotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateMigrationV1NotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APICreateMigrationResponseV1
}

// IsSuccess returns true when this create migration v1 not found response has a 2xx status code
func (o *CreateMigrationV1NotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create migration v1 not found response has a 3xx status code
func (o *CreateMigrationV1NotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create migration v1 not found response has a 4xx status code
func (o *CreateMigrationV1NotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create migration v1 not found response has a 5xx status code
func (o *CreateMigrationV1NotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create migration v1 not found response a status code equal to that given
func (o *CreateMigrationV1NotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create migration v1 not found response
func (o *CreateMigrationV1NotFound) Code() int {
	return 404
}

func (o *CreateMigrationV1NotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /host-migration/entities/migrations/v1][%d] createMigrationV1NotFound %s", 404, payload)
}

func (o *CreateMigrationV1NotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /host-migration/entities/migrations/v1][%d] createMigrationV1NotFound %s", 404, payload)
}

func (o *CreateMigrationV1NotFound) GetPayload() *models.APICreateMigrationResponseV1 {
	return o.Payload
}

func (o *CreateMigrationV1NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APICreateMigrationResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMigrationV1TooManyRequests creates a CreateMigrationV1TooManyRequests with default headers values
func NewCreateMigrationV1TooManyRequests() *CreateMigrationV1TooManyRequests {
	return &CreateMigrationV1TooManyRequests{}
}

/*
CreateMigrationV1TooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CreateMigrationV1TooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this create migration v1 too many requests response has a 2xx status code
func (o *CreateMigrationV1TooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create migration v1 too many requests response has a 3xx status code
func (o *CreateMigrationV1TooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create migration v1 too many requests response has a 4xx status code
func (o *CreateMigrationV1TooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create migration v1 too many requests response has a 5xx status code
func (o *CreateMigrationV1TooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create migration v1 too many requests response a status code equal to that given
func (o *CreateMigrationV1TooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create migration v1 too many requests response
func (o *CreateMigrationV1TooManyRequests) Code() int {
	return 429
}

func (o *CreateMigrationV1TooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /host-migration/entities/migrations/v1][%d] createMigrationV1TooManyRequests %s", 429, payload)
}

func (o *CreateMigrationV1TooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /host-migration/entities/migrations/v1][%d] createMigrationV1TooManyRequests %s", 429, payload)
}

func (o *CreateMigrationV1TooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateMigrationV1TooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMigrationV1InternalServerError creates a CreateMigrationV1InternalServerError with default headers values
func NewCreateMigrationV1InternalServerError() *CreateMigrationV1InternalServerError {
	return &CreateMigrationV1InternalServerError{}
}

/*
CreateMigrationV1InternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateMigrationV1InternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APICreateMigrationResponseV1
}

// IsSuccess returns true when this create migration v1 internal server error response has a 2xx status code
func (o *CreateMigrationV1InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create migration v1 internal server error response has a 3xx status code
func (o *CreateMigrationV1InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create migration v1 internal server error response has a 4xx status code
func (o *CreateMigrationV1InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create migration v1 internal server error response has a 5xx status code
func (o *CreateMigrationV1InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create migration v1 internal server error response a status code equal to that given
func (o *CreateMigrationV1InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create migration v1 internal server error response
func (o *CreateMigrationV1InternalServerError) Code() int {
	return 500
}

func (o *CreateMigrationV1InternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /host-migration/entities/migrations/v1][%d] createMigrationV1InternalServerError %s", 500, payload)
}

func (o *CreateMigrationV1InternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /host-migration/entities/migrations/v1][%d] createMigrationV1InternalServerError %s", 500, payload)
}

func (o *CreateMigrationV1InternalServerError) GetPayload() *models.APICreateMigrationResponseV1 {
	return o.Payload
}

func (o *CreateMigrationV1InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APICreateMigrationResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
