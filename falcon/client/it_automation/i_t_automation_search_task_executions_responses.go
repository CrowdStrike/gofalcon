// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationSearchTaskExecutionsReader is a Reader for the ITAutomationSearchTaskExecutions structure.
type ITAutomationSearchTaskExecutionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationSearchTaskExecutionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewITAutomationSearchTaskExecutionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationSearchTaskExecutionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationSearchTaskExecutionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationSearchTaskExecutionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationSearchTaskExecutionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /it-automation/queries/task-executions/v1] ITAutomationSearchTaskExecutions", response, response.Code())
	}
}

// NewITAutomationSearchTaskExecutionsOK creates a ITAutomationSearchTaskExecutionsOK with default headers values
func NewITAutomationSearchTaskExecutionsOK() *ITAutomationSearchTaskExecutionsOK {
	return &ITAutomationSearchTaskExecutionsOK{}
}

/*
ITAutomationSearchTaskExecutionsOK describes a response with status code 200, with default header values.

OK
*/
type ITAutomationSearchTaskExecutionsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationSearchTaskExecutionResponse
}

// IsSuccess returns true when this i t automation search task executions o k response has a 2xx status code
func (o *ITAutomationSearchTaskExecutionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation search task executions o k response has a 3xx status code
func (o *ITAutomationSearchTaskExecutionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search task executions o k response has a 4xx status code
func (o *ITAutomationSearchTaskExecutionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation search task executions o k response has a 5xx status code
func (o *ITAutomationSearchTaskExecutionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation search task executions o k response a status code equal to that given
func (o *ITAutomationSearchTaskExecutionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the i t automation search task executions o k response
func (o *ITAutomationSearchTaskExecutionsOK) Code() int {
	return 200
}

func (o *ITAutomationSearchTaskExecutionsOK) Error() string {
	return fmt.Sprintf("[GET /it-automation/queries/task-executions/v1][%d] iTAutomationSearchTaskExecutionsOK  %+v", 200, o.Payload)
}

func (o *ITAutomationSearchTaskExecutionsOK) String() string {
	return fmt.Sprintf("[GET /it-automation/queries/task-executions/v1][%d] iTAutomationSearchTaskExecutionsOK  %+v", 200, o.Payload)
}

func (o *ITAutomationSearchTaskExecutionsOK) GetPayload() *models.ItautomationSearchTaskExecutionResponse {
	return o.Payload
}

func (o *ITAutomationSearchTaskExecutionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationSearchTaskExecutionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationSearchTaskExecutionsBadRequest creates a ITAutomationSearchTaskExecutionsBadRequest with default headers values
func NewITAutomationSearchTaskExecutionsBadRequest() *ITAutomationSearchTaskExecutionsBadRequest {
	return &ITAutomationSearchTaskExecutionsBadRequest{}
}

/*
ITAutomationSearchTaskExecutionsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationSearchTaskExecutionsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation search task executions bad request response has a 2xx status code
func (o *ITAutomationSearchTaskExecutionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation search task executions bad request response has a 3xx status code
func (o *ITAutomationSearchTaskExecutionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search task executions bad request response has a 4xx status code
func (o *ITAutomationSearchTaskExecutionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation search task executions bad request response has a 5xx status code
func (o *ITAutomationSearchTaskExecutionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation search task executions bad request response a status code equal to that given
func (o *ITAutomationSearchTaskExecutionsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation search task executions bad request response
func (o *ITAutomationSearchTaskExecutionsBadRequest) Code() int {
	return 400
}

func (o *ITAutomationSearchTaskExecutionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /it-automation/queries/task-executions/v1][%d] iTAutomationSearchTaskExecutionsBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationSearchTaskExecutionsBadRequest) String() string {
	return fmt.Sprintf("[GET /it-automation/queries/task-executions/v1][%d] iTAutomationSearchTaskExecutionsBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationSearchTaskExecutionsBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationSearchTaskExecutionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationSearchTaskExecutionsForbidden creates a ITAutomationSearchTaskExecutionsForbidden with default headers values
func NewITAutomationSearchTaskExecutionsForbidden() *ITAutomationSearchTaskExecutionsForbidden {
	return &ITAutomationSearchTaskExecutionsForbidden{}
}

/*
ITAutomationSearchTaskExecutionsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationSearchTaskExecutionsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation search task executions forbidden response has a 2xx status code
func (o *ITAutomationSearchTaskExecutionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation search task executions forbidden response has a 3xx status code
func (o *ITAutomationSearchTaskExecutionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search task executions forbidden response has a 4xx status code
func (o *ITAutomationSearchTaskExecutionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation search task executions forbidden response has a 5xx status code
func (o *ITAutomationSearchTaskExecutionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation search task executions forbidden response a status code equal to that given
func (o *ITAutomationSearchTaskExecutionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation search task executions forbidden response
func (o *ITAutomationSearchTaskExecutionsForbidden) Code() int {
	return 403
}

func (o *ITAutomationSearchTaskExecutionsForbidden) Error() string {
	return fmt.Sprintf("[GET /it-automation/queries/task-executions/v1][%d] iTAutomationSearchTaskExecutionsForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationSearchTaskExecutionsForbidden) String() string {
	return fmt.Sprintf("[GET /it-automation/queries/task-executions/v1][%d] iTAutomationSearchTaskExecutionsForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationSearchTaskExecutionsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationSearchTaskExecutionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationSearchTaskExecutionsTooManyRequests creates a ITAutomationSearchTaskExecutionsTooManyRequests with default headers values
func NewITAutomationSearchTaskExecutionsTooManyRequests() *ITAutomationSearchTaskExecutionsTooManyRequests {
	return &ITAutomationSearchTaskExecutionsTooManyRequests{}
}

/*
ITAutomationSearchTaskExecutionsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationSearchTaskExecutionsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation search task executions too many requests response has a 2xx status code
func (o *ITAutomationSearchTaskExecutionsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation search task executions too many requests response has a 3xx status code
func (o *ITAutomationSearchTaskExecutionsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search task executions too many requests response has a 4xx status code
func (o *ITAutomationSearchTaskExecutionsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation search task executions too many requests response has a 5xx status code
func (o *ITAutomationSearchTaskExecutionsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation search task executions too many requests response a status code equal to that given
func (o *ITAutomationSearchTaskExecutionsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation search task executions too many requests response
func (o *ITAutomationSearchTaskExecutionsTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationSearchTaskExecutionsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /it-automation/queries/task-executions/v1][%d] iTAutomationSearchTaskExecutionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationSearchTaskExecutionsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /it-automation/queries/task-executions/v1][%d] iTAutomationSearchTaskExecutionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationSearchTaskExecutionsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationSearchTaskExecutionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationSearchTaskExecutionsInternalServerError creates a ITAutomationSearchTaskExecutionsInternalServerError with default headers values
func NewITAutomationSearchTaskExecutionsInternalServerError() *ITAutomationSearchTaskExecutionsInternalServerError {
	return &ITAutomationSearchTaskExecutionsInternalServerError{}
}

/*
ITAutomationSearchTaskExecutionsInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ITAutomationSearchTaskExecutionsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation search task executions internal server error response has a 2xx status code
func (o *ITAutomationSearchTaskExecutionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation search task executions internal server error response has a 3xx status code
func (o *ITAutomationSearchTaskExecutionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search task executions internal server error response has a 4xx status code
func (o *ITAutomationSearchTaskExecutionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation search task executions internal server error response has a 5xx status code
func (o *ITAutomationSearchTaskExecutionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation search task executions internal server error response a status code equal to that given
func (o *ITAutomationSearchTaskExecutionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation search task executions internal server error response
func (o *ITAutomationSearchTaskExecutionsInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationSearchTaskExecutionsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /it-automation/queries/task-executions/v1][%d] iTAutomationSearchTaskExecutionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationSearchTaskExecutionsInternalServerError) String() string {
	return fmt.Sprintf("[GET /it-automation/queries/task-executions/v1][%d] iTAutomationSearchTaskExecutionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationSearchTaskExecutionsInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationSearchTaskExecutionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
