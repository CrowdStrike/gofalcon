// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationSearchUserGroupReader is a Reader for the ITAutomationSearchUserGroup structure.
type ITAutomationSearchUserGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationSearchUserGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewITAutomationSearchUserGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationSearchUserGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationSearchUserGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationSearchUserGroupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationSearchUserGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /it-automation/queries/it-user-groups/v1] ITAutomationSearchUserGroup", response, response.Code())
	}
}

// NewITAutomationSearchUserGroupOK creates a ITAutomationSearchUserGroupOK with default headers values
func NewITAutomationSearchUserGroupOK() *ITAutomationSearchUserGroupOK {
	return &ITAutomationSearchUserGroupOK{}
}

/*
ITAutomationSearchUserGroupOK describes a response with status code 200, with default header values.

OK
*/
type ITAutomationSearchUserGroupOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationSearchUserGroupsResponse
}

// IsSuccess returns true when this i t automation search user group o k response has a 2xx status code
func (o *ITAutomationSearchUserGroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation search user group o k response has a 3xx status code
func (o *ITAutomationSearchUserGroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search user group o k response has a 4xx status code
func (o *ITAutomationSearchUserGroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation search user group o k response has a 5xx status code
func (o *ITAutomationSearchUserGroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation search user group o k response a status code equal to that given
func (o *ITAutomationSearchUserGroupOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the i t automation search user group o k response
func (o *ITAutomationSearchUserGroupOK) Code() int {
	return 200
}

func (o *ITAutomationSearchUserGroupOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/it-user-groups/v1][%d] iTAutomationSearchUserGroupOK %s", 200, payload)
}

func (o *ITAutomationSearchUserGroupOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/it-user-groups/v1][%d] iTAutomationSearchUserGroupOK %s", 200, payload)
}

func (o *ITAutomationSearchUserGroupOK) GetPayload() *models.ItautomationSearchUserGroupsResponse {
	return o.Payload
}

func (o *ITAutomationSearchUserGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationSearchUserGroupsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationSearchUserGroupBadRequest creates a ITAutomationSearchUserGroupBadRequest with default headers values
func NewITAutomationSearchUserGroupBadRequest() *ITAutomationSearchUserGroupBadRequest {
	return &ITAutomationSearchUserGroupBadRequest{}
}

/*
ITAutomationSearchUserGroupBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationSearchUserGroupBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation search user group bad request response has a 2xx status code
func (o *ITAutomationSearchUserGroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation search user group bad request response has a 3xx status code
func (o *ITAutomationSearchUserGroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search user group bad request response has a 4xx status code
func (o *ITAutomationSearchUserGroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation search user group bad request response has a 5xx status code
func (o *ITAutomationSearchUserGroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation search user group bad request response a status code equal to that given
func (o *ITAutomationSearchUserGroupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation search user group bad request response
func (o *ITAutomationSearchUserGroupBadRequest) Code() int {
	return 400
}

func (o *ITAutomationSearchUserGroupBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/it-user-groups/v1][%d] iTAutomationSearchUserGroupBadRequest %s", 400, payload)
}

func (o *ITAutomationSearchUserGroupBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/it-user-groups/v1][%d] iTAutomationSearchUserGroupBadRequest %s", 400, payload)
}

func (o *ITAutomationSearchUserGroupBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationSearchUserGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationSearchUserGroupForbidden creates a ITAutomationSearchUserGroupForbidden with default headers values
func NewITAutomationSearchUserGroupForbidden() *ITAutomationSearchUserGroupForbidden {
	return &ITAutomationSearchUserGroupForbidden{}
}

/*
ITAutomationSearchUserGroupForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationSearchUserGroupForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation search user group forbidden response has a 2xx status code
func (o *ITAutomationSearchUserGroupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation search user group forbidden response has a 3xx status code
func (o *ITAutomationSearchUserGroupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search user group forbidden response has a 4xx status code
func (o *ITAutomationSearchUserGroupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation search user group forbidden response has a 5xx status code
func (o *ITAutomationSearchUserGroupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation search user group forbidden response a status code equal to that given
func (o *ITAutomationSearchUserGroupForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation search user group forbidden response
func (o *ITAutomationSearchUserGroupForbidden) Code() int {
	return 403
}

func (o *ITAutomationSearchUserGroupForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/it-user-groups/v1][%d] iTAutomationSearchUserGroupForbidden %s", 403, payload)
}

func (o *ITAutomationSearchUserGroupForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/it-user-groups/v1][%d] iTAutomationSearchUserGroupForbidden %s", 403, payload)
}

func (o *ITAutomationSearchUserGroupForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationSearchUserGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationSearchUserGroupTooManyRequests creates a ITAutomationSearchUserGroupTooManyRequests with default headers values
func NewITAutomationSearchUserGroupTooManyRequests() *ITAutomationSearchUserGroupTooManyRequests {
	return &ITAutomationSearchUserGroupTooManyRequests{}
}

/*
ITAutomationSearchUserGroupTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationSearchUserGroupTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation search user group too many requests response has a 2xx status code
func (o *ITAutomationSearchUserGroupTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation search user group too many requests response has a 3xx status code
func (o *ITAutomationSearchUserGroupTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search user group too many requests response has a 4xx status code
func (o *ITAutomationSearchUserGroupTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation search user group too many requests response has a 5xx status code
func (o *ITAutomationSearchUserGroupTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation search user group too many requests response a status code equal to that given
func (o *ITAutomationSearchUserGroupTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation search user group too many requests response
func (o *ITAutomationSearchUserGroupTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationSearchUserGroupTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/it-user-groups/v1][%d] iTAutomationSearchUserGroupTooManyRequests %s", 429, payload)
}

func (o *ITAutomationSearchUserGroupTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/it-user-groups/v1][%d] iTAutomationSearchUserGroupTooManyRequests %s", 429, payload)
}

func (o *ITAutomationSearchUserGroupTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationSearchUserGroupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationSearchUserGroupInternalServerError creates a ITAutomationSearchUserGroupInternalServerError with default headers values
func NewITAutomationSearchUserGroupInternalServerError() *ITAutomationSearchUserGroupInternalServerError {
	return &ITAutomationSearchUserGroupInternalServerError{}
}

/*
ITAutomationSearchUserGroupInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ITAutomationSearchUserGroupInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation search user group internal server error response has a 2xx status code
func (o *ITAutomationSearchUserGroupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation search user group internal server error response has a 3xx status code
func (o *ITAutomationSearchUserGroupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search user group internal server error response has a 4xx status code
func (o *ITAutomationSearchUserGroupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation search user group internal server error response has a 5xx status code
func (o *ITAutomationSearchUserGroupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation search user group internal server error response a status code equal to that given
func (o *ITAutomationSearchUserGroupInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation search user group internal server error response
func (o *ITAutomationSearchUserGroupInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationSearchUserGroupInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/it-user-groups/v1][%d] iTAutomationSearchUserGroupInternalServerError %s", 500, payload)
}

func (o *ITAutomationSearchUserGroupInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/it-user-groups/v1][%d] iTAutomationSearchUserGroupInternalServerError %s", 500, payload)
}

func (o *ITAutomationSearchUserGroupInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationSearchUserGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
