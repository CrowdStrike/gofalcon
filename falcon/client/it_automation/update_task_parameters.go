// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// NewUpdateTaskParams creates a new UpdateTaskParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateTaskParams() *UpdateTaskParams {
	return &UpdateTaskParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateTaskParamsWithTimeout creates a new UpdateTaskParams object
// with the ability to set a timeout on a request.
func NewUpdateTaskParamsWithTimeout(timeout time.Duration) *UpdateTaskParams {
	return &UpdateTaskParams{
		timeout: timeout,
	}
}

// NewUpdateTaskParamsWithContext creates a new UpdateTaskParams object
// with the ability to set a context for a request.
func NewUpdateTaskParamsWithContext(ctx context.Context) *UpdateTaskParams {
	return &UpdateTaskParams{
		Context: ctx,
	}
}

// NewUpdateTaskParamsWithHTTPClient creates a new UpdateTaskParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateTaskParamsWithHTTPClient(client *http.Client) *UpdateTaskParams {
	return &UpdateTaskParams{
		HTTPClient: client,
	}
}

/*
UpdateTaskParams contains all the parameters to send to the API endpoint

	for the update task operation.

	Typically these are written to a http.Request.
*/
type UpdateTaskParams struct {

	/* XCSCUSTID.

	   customer id
	*/
	XCSCUSTID string

	/* XCSUSERNAME.

	   user name
	*/
	XCSUSERNAME string

	/* XCSUSERUUID.

	   user uuid
	*/
	XCSUSERUUID string

	// Body.
	Body *models.TasksUpdateTaskRequest

	/* ID.

	   id of the task to update
	*/
	ID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update task params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateTaskParams) WithDefaults() *UpdateTaskParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update task params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateTaskParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update task params
func (o *UpdateTaskParams) WithTimeout(timeout time.Duration) *UpdateTaskParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update task params
func (o *UpdateTaskParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update task params
func (o *UpdateTaskParams) WithContext(ctx context.Context) *UpdateTaskParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update task params
func (o *UpdateTaskParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update task params
func (o *UpdateTaskParams) WithHTTPClient(client *http.Client) *UpdateTaskParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update task params
func (o *UpdateTaskParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXCSCUSTID adds the xCSCUSTID to the update task params
func (o *UpdateTaskParams) WithXCSCUSTID(xCSCUSTID string) *UpdateTaskParams {
	o.SetXCSCUSTID(xCSCUSTID)
	return o
}

// SetXCSCUSTID adds the xCSCUSTId to the update task params
func (o *UpdateTaskParams) SetXCSCUSTID(xCSCUSTID string) {
	o.XCSCUSTID = xCSCUSTID
}

// WithXCSUSERNAME adds the xCSUSERNAME to the update task params
func (o *UpdateTaskParams) WithXCSUSERNAME(xCSUSERNAME string) *UpdateTaskParams {
	o.SetXCSUSERNAME(xCSUSERNAME)
	return o
}

// SetXCSUSERNAME adds the xCSUSERNAME to the update task params
func (o *UpdateTaskParams) SetXCSUSERNAME(xCSUSERNAME string) {
	o.XCSUSERNAME = xCSUSERNAME
}

// WithXCSUSERUUID adds the xCSUSERUUID to the update task params
func (o *UpdateTaskParams) WithXCSUSERUUID(xCSUSERUUID string) *UpdateTaskParams {
	o.SetXCSUSERUUID(xCSUSERUUID)
	return o
}

// SetXCSUSERUUID adds the xCSUSERUuid to the update task params
func (o *UpdateTaskParams) SetXCSUSERUUID(xCSUSERUUID string) {
	o.XCSUSERUUID = xCSUSERUUID
}

// WithBody adds the body to the update task params
func (o *UpdateTaskParams) WithBody(body *models.TasksUpdateTaskRequest) *UpdateTaskParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update task params
func (o *UpdateTaskParams) SetBody(body *models.TasksUpdateTaskRequest) {
	o.Body = body
}

// WithID adds the id to the update task params
func (o *UpdateTaskParams) WithID(id string) *UpdateTaskParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the update task params
func (o *UpdateTaskParams) SetID(id string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateTaskParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-CS-CUSTID
	if err := r.SetHeaderParam("X-CS-CUSTID", o.XCSCUSTID); err != nil {
		return err
	}

	// header param X-CS-USERNAME
	if err := r.SetHeaderParam("X-CS-USERNAME", o.XCSUSERNAME); err != nil {
		return err
	}

	// header param X-CS-USERUUID
	if err := r.SetHeaderParam("X-CS-USERUUID", o.XCSUSERUUID); err != nil {
		return err
	}
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// query param id
	qrID := o.ID
	qID := qrID
	if qID != "" {

		if err := r.SetQueryParam("id", qID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
