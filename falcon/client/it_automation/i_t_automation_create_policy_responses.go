// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationCreatePolicyReader is a Reader for the ITAutomationCreatePolicy structure.
type ITAutomationCreatePolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationCreatePolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewITAutomationCreatePolicyCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationCreatePolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationCreatePolicyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationCreatePolicyTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationCreatePolicyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /it-automation/entities/policies/v1] ITAutomationCreatePolicy", response, response.Code())
	}
}

// NewITAutomationCreatePolicyCreated creates a ITAutomationCreatePolicyCreated with default headers values
func NewITAutomationCreatePolicyCreated() *ITAutomationCreatePolicyCreated {
	return &ITAutomationCreatePolicyCreated{}
}

/*
ITAutomationCreatePolicyCreated describes a response with status code 201, with default header values.

Created
*/
type ITAutomationCreatePolicyCreated struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationCreatePolicyResponse
}

// IsSuccess returns true when this i t automation create policy created response has a 2xx status code
func (o *ITAutomationCreatePolicyCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation create policy created response has a 3xx status code
func (o *ITAutomationCreatePolicyCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create policy created response has a 4xx status code
func (o *ITAutomationCreatePolicyCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation create policy created response has a 5xx status code
func (o *ITAutomationCreatePolicyCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation create policy created response a status code equal to that given
func (o *ITAutomationCreatePolicyCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the i t automation create policy created response
func (o *ITAutomationCreatePolicyCreated) Code() int {
	return 201
}

func (o *ITAutomationCreatePolicyCreated) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/policies/v1][%d] iTAutomationCreatePolicyCreated  %+v", 201, o.Payload)
}

func (o *ITAutomationCreatePolicyCreated) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/policies/v1][%d] iTAutomationCreatePolicyCreated  %+v", 201, o.Payload)
}

func (o *ITAutomationCreatePolicyCreated) GetPayload() *models.ItautomationCreatePolicyResponse {
	return o.Payload
}

func (o *ITAutomationCreatePolicyCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationCreatePolicyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationCreatePolicyBadRequest creates a ITAutomationCreatePolicyBadRequest with default headers values
func NewITAutomationCreatePolicyBadRequest() *ITAutomationCreatePolicyBadRequest {
	return &ITAutomationCreatePolicyBadRequest{}
}

/*
ITAutomationCreatePolicyBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationCreatePolicyBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation create policy bad request response has a 2xx status code
func (o *ITAutomationCreatePolicyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation create policy bad request response has a 3xx status code
func (o *ITAutomationCreatePolicyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create policy bad request response has a 4xx status code
func (o *ITAutomationCreatePolicyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation create policy bad request response has a 5xx status code
func (o *ITAutomationCreatePolicyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation create policy bad request response a status code equal to that given
func (o *ITAutomationCreatePolicyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation create policy bad request response
func (o *ITAutomationCreatePolicyBadRequest) Code() int {
	return 400
}

func (o *ITAutomationCreatePolicyBadRequest) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/policies/v1][%d] iTAutomationCreatePolicyBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationCreatePolicyBadRequest) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/policies/v1][%d] iTAutomationCreatePolicyBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationCreatePolicyBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationCreatePolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationCreatePolicyForbidden creates a ITAutomationCreatePolicyForbidden with default headers values
func NewITAutomationCreatePolicyForbidden() *ITAutomationCreatePolicyForbidden {
	return &ITAutomationCreatePolicyForbidden{}
}

/*
ITAutomationCreatePolicyForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationCreatePolicyForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation create policy forbidden response has a 2xx status code
func (o *ITAutomationCreatePolicyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation create policy forbidden response has a 3xx status code
func (o *ITAutomationCreatePolicyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create policy forbidden response has a 4xx status code
func (o *ITAutomationCreatePolicyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation create policy forbidden response has a 5xx status code
func (o *ITAutomationCreatePolicyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation create policy forbidden response a status code equal to that given
func (o *ITAutomationCreatePolicyForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation create policy forbidden response
func (o *ITAutomationCreatePolicyForbidden) Code() int {
	return 403
}

func (o *ITAutomationCreatePolicyForbidden) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/policies/v1][%d] iTAutomationCreatePolicyForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationCreatePolicyForbidden) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/policies/v1][%d] iTAutomationCreatePolicyForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationCreatePolicyForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationCreatePolicyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationCreatePolicyTooManyRequests creates a ITAutomationCreatePolicyTooManyRequests with default headers values
func NewITAutomationCreatePolicyTooManyRequests() *ITAutomationCreatePolicyTooManyRequests {
	return &ITAutomationCreatePolicyTooManyRequests{}
}

/*
ITAutomationCreatePolicyTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationCreatePolicyTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation create policy too many requests response has a 2xx status code
func (o *ITAutomationCreatePolicyTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation create policy too many requests response has a 3xx status code
func (o *ITAutomationCreatePolicyTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create policy too many requests response has a 4xx status code
func (o *ITAutomationCreatePolicyTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation create policy too many requests response has a 5xx status code
func (o *ITAutomationCreatePolicyTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation create policy too many requests response a status code equal to that given
func (o *ITAutomationCreatePolicyTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation create policy too many requests response
func (o *ITAutomationCreatePolicyTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationCreatePolicyTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/policies/v1][%d] iTAutomationCreatePolicyTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationCreatePolicyTooManyRequests) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/policies/v1][%d] iTAutomationCreatePolicyTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationCreatePolicyTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationCreatePolicyTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationCreatePolicyInternalServerError creates a ITAutomationCreatePolicyInternalServerError with default headers values
func NewITAutomationCreatePolicyInternalServerError() *ITAutomationCreatePolicyInternalServerError {
	return &ITAutomationCreatePolicyInternalServerError{}
}

/*
ITAutomationCreatePolicyInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ITAutomationCreatePolicyInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation create policy internal server error response has a 2xx status code
func (o *ITAutomationCreatePolicyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation create policy internal server error response has a 3xx status code
func (o *ITAutomationCreatePolicyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create policy internal server error response has a 4xx status code
func (o *ITAutomationCreatePolicyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation create policy internal server error response has a 5xx status code
func (o *ITAutomationCreatePolicyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation create policy internal server error response a status code equal to that given
func (o *ITAutomationCreatePolicyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation create policy internal server error response
func (o *ITAutomationCreatePolicyInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationCreatePolicyInternalServerError) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/policies/v1][%d] iTAutomationCreatePolicyInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationCreatePolicyInternalServerError) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/policies/v1][%d] iTAutomationCreatePolicyInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationCreatePolicyInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationCreatePolicyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
