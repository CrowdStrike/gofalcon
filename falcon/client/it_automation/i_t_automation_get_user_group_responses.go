// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationGetUserGroupReader is a Reader for the ITAutomationGetUserGroup structure.
type ITAutomationGetUserGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationGetUserGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewITAutomationGetUserGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationGetUserGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationGetUserGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationGetUserGroupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationGetUserGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /it-automation/entities/it-user-groups/v1] ITAutomationGetUserGroup", response, response.Code())
	}
}

// NewITAutomationGetUserGroupOK creates a ITAutomationGetUserGroupOK with default headers values
func NewITAutomationGetUserGroupOK() *ITAutomationGetUserGroupOK {
	return &ITAutomationGetUserGroupOK{}
}

/*
ITAutomationGetUserGroupOK describes a response with status code 200, with default header values.

OK
*/
type ITAutomationGetUserGroupOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationGetUserGroupsResponse
}

// IsSuccess returns true when this i t automation get user group o k response has a 2xx status code
func (o *ITAutomationGetUserGroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation get user group o k response has a 3xx status code
func (o *ITAutomationGetUserGroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get user group o k response has a 4xx status code
func (o *ITAutomationGetUserGroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation get user group o k response has a 5xx status code
func (o *ITAutomationGetUserGroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get user group o k response a status code equal to that given
func (o *ITAutomationGetUserGroupOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the i t automation get user group o k response
func (o *ITAutomationGetUserGroupOK) Code() int {
	return 200
}

func (o *ITAutomationGetUserGroupOK) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/it-user-groups/v1][%d] iTAutomationGetUserGroupOK  %+v", 200, o.Payload)
}

func (o *ITAutomationGetUserGroupOK) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/it-user-groups/v1][%d] iTAutomationGetUserGroupOK  %+v", 200, o.Payload)
}

func (o *ITAutomationGetUserGroupOK) GetPayload() *models.ItautomationGetUserGroupsResponse {
	return o.Payload
}

func (o *ITAutomationGetUserGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationGetUserGroupsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetUserGroupBadRequest creates a ITAutomationGetUserGroupBadRequest with default headers values
func NewITAutomationGetUserGroupBadRequest() *ITAutomationGetUserGroupBadRequest {
	return &ITAutomationGetUserGroupBadRequest{}
}

/*
ITAutomationGetUserGroupBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationGetUserGroupBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation get user group bad request response has a 2xx status code
func (o *ITAutomationGetUserGroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get user group bad request response has a 3xx status code
func (o *ITAutomationGetUserGroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get user group bad request response has a 4xx status code
func (o *ITAutomationGetUserGroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get user group bad request response has a 5xx status code
func (o *ITAutomationGetUserGroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get user group bad request response a status code equal to that given
func (o *ITAutomationGetUserGroupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation get user group bad request response
func (o *ITAutomationGetUserGroupBadRequest) Code() int {
	return 400
}

func (o *ITAutomationGetUserGroupBadRequest) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/it-user-groups/v1][%d] iTAutomationGetUserGroupBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationGetUserGroupBadRequest) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/it-user-groups/v1][%d] iTAutomationGetUserGroupBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationGetUserGroupBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationGetUserGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetUserGroupForbidden creates a ITAutomationGetUserGroupForbidden with default headers values
func NewITAutomationGetUserGroupForbidden() *ITAutomationGetUserGroupForbidden {
	return &ITAutomationGetUserGroupForbidden{}
}

/*
ITAutomationGetUserGroupForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationGetUserGroupForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation get user group forbidden response has a 2xx status code
func (o *ITAutomationGetUserGroupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get user group forbidden response has a 3xx status code
func (o *ITAutomationGetUserGroupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get user group forbidden response has a 4xx status code
func (o *ITAutomationGetUserGroupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get user group forbidden response has a 5xx status code
func (o *ITAutomationGetUserGroupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get user group forbidden response a status code equal to that given
func (o *ITAutomationGetUserGroupForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation get user group forbidden response
func (o *ITAutomationGetUserGroupForbidden) Code() int {
	return 403
}

func (o *ITAutomationGetUserGroupForbidden) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/it-user-groups/v1][%d] iTAutomationGetUserGroupForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationGetUserGroupForbidden) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/it-user-groups/v1][%d] iTAutomationGetUserGroupForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationGetUserGroupForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationGetUserGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetUserGroupTooManyRequests creates a ITAutomationGetUserGroupTooManyRequests with default headers values
func NewITAutomationGetUserGroupTooManyRequests() *ITAutomationGetUserGroupTooManyRequests {
	return &ITAutomationGetUserGroupTooManyRequests{}
}

/*
ITAutomationGetUserGroupTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationGetUserGroupTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation get user group too many requests response has a 2xx status code
func (o *ITAutomationGetUserGroupTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get user group too many requests response has a 3xx status code
func (o *ITAutomationGetUserGroupTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get user group too many requests response has a 4xx status code
func (o *ITAutomationGetUserGroupTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get user group too many requests response has a 5xx status code
func (o *ITAutomationGetUserGroupTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get user group too many requests response a status code equal to that given
func (o *ITAutomationGetUserGroupTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation get user group too many requests response
func (o *ITAutomationGetUserGroupTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationGetUserGroupTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/it-user-groups/v1][%d] iTAutomationGetUserGroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationGetUserGroupTooManyRequests) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/it-user-groups/v1][%d] iTAutomationGetUserGroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationGetUserGroupTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationGetUserGroupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetUserGroupInternalServerError creates a ITAutomationGetUserGroupInternalServerError with default headers values
func NewITAutomationGetUserGroupInternalServerError() *ITAutomationGetUserGroupInternalServerError {
	return &ITAutomationGetUserGroupInternalServerError{}
}

/*
ITAutomationGetUserGroupInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ITAutomationGetUserGroupInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation get user group internal server error response has a 2xx status code
func (o *ITAutomationGetUserGroupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get user group internal server error response has a 3xx status code
func (o *ITAutomationGetUserGroupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get user group internal server error response has a 4xx status code
func (o *ITAutomationGetUserGroupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation get user group internal server error response has a 5xx status code
func (o *ITAutomationGetUserGroupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation get user group internal server error response a status code equal to that given
func (o *ITAutomationGetUserGroupInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation get user group internal server error response
func (o *ITAutomationGetUserGroupInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationGetUserGroupInternalServerError) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/it-user-groups/v1][%d] iTAutomationGetUserGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationGetUserGroupInternalServerError) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/it-user-groups/v1][%d] iTAutomationGetUserGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationGetUserGroupInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationGetUserGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
