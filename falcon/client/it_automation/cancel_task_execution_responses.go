// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CancelTaskExecutionReader is a Reader for the CancelTaskExecution structure.
type CancelTaskExecutionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelTaskExecutionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCancelTaskExecutionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCancelTaskExecutionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCancelTaskExecutionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /it-automation/entities/task-execution-cancel/v1] CancelTaskExecution", response, response.Code())
	}
}

// NewCancelTaskExecutionOK creates a CancelTaskExecutionOK with default headers values
func NewCancelTaskExecutionOK() *CancelTaskExecutionOK {
	return &CancelTaskExecutionOK{}
}

/*
CancelTaskExecutionOK describes a response with status code 200, with default header values.

OK
*/
type CancelTaskExecutionOK struct {
	Payload *models.TaskexecutionsCancelTaskExecutionResponse
}

// IsSuccess returns true when this cancel task execution o k response has a 2xx status code
func (o *CancelTaskExecutionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cancel task execution o k response has a 3xx status code
func (o *CancelTaskExecutionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel task execution o k response has a 4xx status code
func (o *CancelTaskExecutionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel task execution o k response has a 5xx status code
func (o *CancelTaskExecutionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel task execution o k response a status code equal to that given
func (o *CancelTaskExecutionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the cancel task execution o k response
func (o *CancelTaskExecutionOK) Code() int {
	return 200
}

func (o *CancelTaskExecutionOK) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-cancel/v1][%d] cancelTaskExecutionOK  %+v", 200, o.Payload)
}

func (o *CancelTaskExecutionOK) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-cancel/v1][%d] cancelTaskExecutionOK  %+v", 200, o.Payload)
}

func (o *CancelTaskExecutionOK) GetPayload() *models.TaskexecutionsCancelTaskExecutionResponse {
	return o.Payload
}

func (o *CancelTaskExecutionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskexecutionsCancelTaskExecutionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelTaskExecutionBadRequest creates a CancelTaskExecutionBadRequest with default headers values
func NewCancelTaskExecutionBadRequest() *CancelTaskExecutionBadRequest {
	return &CancelTaskExecutionBadRequest{}
}

/*
CancelTaskExecutionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CancelTaskExecutionBadRequest struct {
	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this cancel task execution bad request response has a 2xx status code
func (o *CancelTaskExecutionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel task execution bad request response has a 3xx status code
func (o *CancelTaskExecutionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel task execution bad request response has a 4xx status code
func (o *CancelTaskExecutionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel task execution bad request response has a 5xx status code
func (o *CancelTaskExecutionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel task execution bad request response a status code equal to that given
func (o *CancelTaskExecutionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the cancel task execution bad request response
func (o *CancelTaskExecutionBadRequest) Code() int {
	return 400
}

func (o *CancelTaskExecutionBadRequest) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-cancel/v1][%d] cancelTaskExecutionBadRequest  %+v", 400, o.Payload)
}

func (o *CancelTaskExecutionBadRequest) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-cancel/v1][%d] cancelTaskExecutionBadRequest  %+v", 400, o.Payload)
}

func (o *CancelTaskExecutionBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CancelTaskExecutionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelTaskExecutionNotFound creates a CancelTaskExecutionNotFound with default headers values
func NewCancelTaskExecutionNotFound() *CancelTaskExecutionNotFound {
	return &CancelTaskExecutionNotFound{}
}

/*
CancelTaskExecutionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CancelTaskExecutionNotFound struct {
	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this cancel task execution not found response has a 2xx status code
func (o *CancelTaskExecutionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel task execution not found response has a 3xx status code
func (o *CancelTaskExecutionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel task execution not found response has a 4xx status code
func (o *CancelTaskExecutionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel task execution not found response has a 5xx status code
func (o *CancelTaskExecutionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel task execution not found response a status code equal to that given
func (o *CancelTaskExecutionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the cancel task execution not found response
func (o *CancelTaskExecutionNotFound) Code() int {
	return 404
}

func (o *CancelTaskExecutionNotFound) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-cancel/v1][%d] cancelTaskExecutionNotFound  %+v", 404, o.Payload)
}

func (o *CancelTaskExecutionNotFound) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-cancel/v1][%d] cancelTaskExecutionNotFound  %+v", 404, o.Payload)
}

func (o *CancelTaskExecutionNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *CancelTaskExecutionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
