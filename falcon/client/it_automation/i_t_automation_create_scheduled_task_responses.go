// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationCreateScheduledTaskReader is a Reader for the ITAutomationCreateScheduledTask structure.
type ITAutomationCreateScheduledTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationCreateScheduledTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 201:
		result := NewITAutomationCreateScheduledTaskCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationCreateScheduledTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationCreateScheduledTaskForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationCreateScheduledTaskTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationCreateScheduledTaskInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /it-automation/entities/scheduled-tasks/v1] ITAutomationCreateScheduledTask", response, response.Code())
	}
}

// NewITAutomationCreateScheduledTaskCreated creates a ITAutomationCreateScheduledTaskCreated with default headers values
func NewITAutomationCreateScheduledTaskCreated() *ITAutomationCreateScheduledTaskCreated {
	return &ITAutomationCreateScheduledTaskCreated{}
}

/*
ITAutomationCreateScheduledTaskCreated describes a response with status code 201, with default header values.

Created
*/
type ITAutomationCreateScheduledTaskCreated struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationCreateScheduledTaskResponse
}

// IsSuccess returns true when this i t automation create scheduled task created response has a 2xx status code
func (o *ITAutomationCreateScheduledTaskCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation create scheduled task created response has a 3xx status code
func (o *ITAutomationCreateScheduledTaskCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create scheduled task created response has a 4xx status code
func (o *ITAutomationCreateScheduledTaskCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation create scheduled task created response has a 5xx status code
func (o *ITAutomationCreateScheduledTaskCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation create scheduled task created response a status code equal to that given
func (o *ITAutomationCreateScheduledTaskCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the i t automation create scheduled task created response
func (o *ITAutomationCreateScheduledTaskCreated) Code() int {
	return 201
}

func (o *ITAutomationCreateScheduledTaskCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationCreateScheduledTaskCreated %s", 201, payload)
}

func (o *ITAutomationCreateScheduledTaskCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationCreateScheduledTaskCreated %s", 201, payload)
}

func (o *ITAutomationCreateScheduledTaskCreated) GetPayload() *models.ItautomationCreateScheduledTaskResponse {
	return o.Payload
}

func (o *ITAutomationCreateScheduledTaskCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationCreateScheduledTaskResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationCreateScheduledTaskBadRequest creates a ITAutomationCreateScheduledTaskBadRequest with default headers values
func NewITAutomationCreateScheduledTaskBadRequest() *ITAutomationCreateScheduledTaskBadRequest {
	return &ITAutomationCreateScheduledTaskBadRequest{}
}

/*
ITAutomationCreateScheduledTaskBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationCreateScheduledTaskBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation create scheduled task bad request response has a 2xx status code
func (o *ITAutomationCreateScheduledTaskBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation create scheduled task bad request response has a 3xx status code
func (o *ITAutomationCreateScheduledTaskBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create scheduled task bad request response has a 4xx status code
func (o *ITAutomationCreateScheduledTaskBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation create scheduled task bad request response has a 5xx status code
func (o *ITAutomationCreateScheduledTaskBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation create scheduled task bad request response a status code equal to that given
func (o *ITAutomationCreateScheduledTaskBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation create scheduled task bad request response
func (o *ITAutomationCreateScheduledTaskBadRequest) Code() int {
	return 400
}

func (o *ITAutomationCreateScheduledTaskBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationCreateScheduledTaskBadRequest %s", 400, payload)
}

func (o *ITAutomationCreateScheduledTaskBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationCreateScheduledTaskBadRequest %s", 400, payload)
}

func (o *ITAutomationCreateScheduledTaskBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationCreateScheduledTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationCreateScheduledTaskForbidden creates a ITAutomationCreateScheduledTaskForbidden with default headers values
func NewITAutomationCreateScheduledTaskForbidden() *ITAutomationCreateScheduledTaskForbidden {
	return &ITAutomationCreateScheduledTaskForbidden{}
}

/*
ITAutomationCreateScheduledTaskForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationCreateScheduledTaskForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation create scheduled task forbidden response has a 2xx status code
func (o *ITAutomationCreateScheduledTaskForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation create scheduled task forbidden response has a 3xx status code
func (o *ITAutomationCreateScheduledTaskForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create scheduled task forbidden response has a 4xx status code
func (o *ITAutomationCreateScheduledTaskForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation create scheduled task forbidden response has a 5xx status code
func (o *ITAutomationCreateScheduledTaskForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation create scheduled task forbidden response a status code equal to that given
func (o *ITAutomationCreateScheduledTaskForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation create scheduled task forbidden response
func (o *ITAutomationCreateScheduledTaskForbidden) Code() int {
	return 403
}

func (o *ITAutomationCreateScheduledTaskForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationCreateScheduledTaskForbidden %s", 403, payload)
}

func (o *ITAutomationCreateScheduledTaskForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationCreateScheduledTaskForbidden %s", 403, payload)
}

func (o *ITAutomationCreateScheduledTaskForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationCreateScheduledTaskForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationCreateScheduledTaskTooManyRequests creates a ITAutomationCreateScheduledTaskTooManyRequests with default headers values
func NewITAutomationCreateScheduledTaskTooManyRequests() *ITAutomationCreateScheduledTaskTooManyRequests {
	return &ITAutomationCreateScheduledTaskTooManyRequests{}
}

/*
ITAutomationCreateScheduledTaskTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationCreateScheduledTaskTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation create scheduled task too many requests response has a 2xx status code
func (o *ITAutomationCreateScheduledTaskTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation create scheduled task too many requests response has a 3xx status code
func (o *ITAutomationCreateScheduledTaskTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create scheduled task too many requests response has a 4xx status code
func (o *ITAutomationCreateScheduledTaskTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation create scheduled task too many requests response has a 5xx status code
func (o *ITAutomationCreateScheduledTaskTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation create scheduled task too many requests response a status code equal to that given
func (o *ITAutomationCreateScheduledTaskTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation create scheduled task too many requests response
func (o *ITAutomationCreateScheduledTaskTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationCreateScheduledTaskTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationCreateScheduledTaskTooManyRequests %s", 429, payload)
}

func (o *ITAutomationCreateScheduledTaskTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationCreateScheduledTaskTooManyRequests %s", 429, payload)
}

func (o *ITAutomationCreateScheduledTaskTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationCreateScheduledTaskTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationCreateScheduledTaskInternalServerError creates a ITAutomationCreateScheduledTaskInternalServerError with default headers values
func NewITAutomationCreateScheduledTaskInternalServerError() *ITAutomationCreateScheduledTaskInternalServerError {
	return &ITAutomationCreateScheduledTaskInternalServerError{}
}

/*
ITAutomationCreateScheduledTaskInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ITAutomationCreateScheduledTaskInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation create scheduled task internal server error response has a 2xx status code
func (o *ITAutomationCreateScheduledTaskInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation create scheduled task internal server error response has a 3xx status code
func (o *ITAutomationCreateScheduledTaskInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create scheduled task internal server error response has a 4xx status code
func (o *ITAutomationCreateScheduledTaskInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation create scheduled task internal server error response has a 5xx status code
func (o *ITAutomationCreateScheduledTaskInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation create scheduled task internal server error response a status code equal to that given
func (o *ITAutomationCreateScheduledTaskInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation create scheduled task internal server error response
func (o *ITAutomationCreateScheduledTaskInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationCreateScheduledTaskInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationCreateScheduledTaskInternalServerError %s", 500, payload)
}

func (o *ITAutomationCreateScheduledTaskInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationCreateScheduledTaskInternalServerError %s", 500, payload)
}

func (o *ITAutomationCreateScheduledTaskInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationCreateScheduledTaskInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
