// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationCreateTaskGroupReader is a Reader for the ITAutomationCreateTaskGroup structure.
type ITAutomationCreateTaskGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationCreateTaskGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewITAutomationCreateTaskGroupCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationCreateTaskGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationCreateTaskGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationCreateTaskGroupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationCreateTaskGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /it-automation/entities/task-groups/v1] ITAutomationCreateTaskGroup", response, response.Code())
	}
}

// NewITAutomationCreateTaskGroupCreated creates a ITAutomationCreateTaskGroupCreated with default headers values
func NewITAutomationCreateTaskGroupCreated() *ITAutomationCreateTaskGroupCreated {
	return &ITAutomationCreateTaskGroupCreated{}
}

/*
ITAutomationCreateTaskGroupCreated describes a response with status code 201, with default header values.

Created
*/
type ITAutomationCreateTaskGroupCreated struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationCreateTaskGroupResponse
}

// IsSuccess returns true when this i t automation create task group created response has a 2xx status code
func (o *ITAutomationCreateTaskGroupCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation create task group created response has a 3xx status code
func (o *ITAutomationCreateTaskGroupCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create task group created response has a 4xx status code
func (o *ITAutomationCreateTaskGroupCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation create task group created response has a 5xx status code
func (o *ITAutomationCreateTaskGroupCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation create task group created response a status code equal to that given
func (o *ITAutomationCreateTaskGroupCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the i t automation create task group created response
func (o *ITAutomationCreateTaskGroupCreated) Code() int {
	return 201
}

func (o *ITAutomationCreateTaskGroupCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/task-groups/v1][%d] iTAutomationCreateTaskGroupCreated %s", 201, payload)
}

func (o *ITAutomationCreateTaskGroupCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/task-groups/v1][%d] iTAutomationCreateTaskGroupCreated %s", 201, payload)
}

func (o *ITAutomationCreateTaskGroupCreated) GetPayload() *models.ItautomationCreateTaskGroupResponse {
	return o.Payload
}

func (o *ITAutomationCreateTaskGroupCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationCreateTaskGroupResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationCreateTaskGroupBadRequest creates a ITAutomationCreateTaskGroupBadRequest with default headers values
func NewITAutomationCreateTaskGroupBadRequest() *ITAutomationCreateTaskGroupBadRequest {
	return &ITAutomationCreateTaskGroupBadRequest{}
}

/*
ITAutomationCreateTaskGroupBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationCreateTaskGroupBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation create task group bad request response has a 2xx status code
func (o *ITAutomationCreateTaskGroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation create task group bad request response has a 3xx status code
func (o *ITAutomationCreateTaskGroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create task group bad request response has a 4xx status code
func (o *ITAutomationCreateTaskGroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation create task group bad request response has a 5xx status code
func (o *ITAutomationCreateTaskGroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation create task group bad request response a status code equal to that given
func (o *ITAutomationCreateTaskGroupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation create task group bad request response
func (o *ITAutomationCreateTaskGroupBadRequest) Code() int {
	return 400
}

func (o *ITAutomationCreateTaskGroupBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/task-groups/v1][%d] iTAutomationCreateTaskGroupBadRequest %s", 400, payload)
}

func (o *ITAutomationCreateTaskGroupBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/task-groups/v1][%d] iTAutomationCreateTaskGroupBadRequest %s", 400, payload)
}

func (o *ITAutomationCreateTaskGroupBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationCreateTaskGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationCreateTaskGroupForbidden creates a ITAutomationCreateTaskGroupForbidden with default headers values
func NewITAutomationCreateTaskGroupForbidden() *ITAutomationCreateTaskGroupForbidden {
	return &ITAutomationCreateTaskGroupForbidden{}
}

/*
ITAutomationCreateTaskGroupForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationCreateTaskGroupForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation create task group forbidden response has a 2xx status code
func (o *ITAutomationCreateTaskGroupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation create task group forbidden response has a 3xx status code
func (o *ITAutomationCreateTaskGroupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create task group forbidden response has a 4xx status code
func (o *ITAutomationCreateTaskGroupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation create task group forbidden response has a 5xx status code
func (o *ITAutomationCreateTaskGroupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation create task group forbidden response a status code equal to that given
func (o *ITAutomationCreateTaskGroupForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation create task group forbidden response
func (o *ITAutomationCreateTaskGroupForbidden) Code() int {
	return 403
}

func (o *ITAutomationCreateTaskGroupForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/task-groups/v1][%d] iTAutomationCreateTaskGroupForbidden %s", 403, payload)
}

func (o *ITAutomationCreateTaskGroupForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/task-groups/v1][%d] iTAutomationCreateTaskGroupForbidden %s", 403, payload)
}

func (o *ITAutomationCreateTaskGroupForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationCreateTaskGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationCreateTaskGroupTooManyRequests creates a ITAutomationCreateTaskGroupTooManyRequests with default headers values
func NewITAutomationCreateTaskGroupTooManyRequests() *ITAutomationCreateTaskGroupTooManyRequests {
	return &ITAutomationCreateTaskGroupTooManyRequests{}
}

/*
ITAutomationCreateTaskGroupTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationCreateTaskGroupTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation create task group too many requests response has a 2xx status code
func (o *ITAutomationCreateTaskGroupTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation create task group too many requests response has a 3xx status code
func (o *ITAutomationCreateTaskGroupTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create task group too many requests response has a 4xx status code
func (o *ITAutomationCreateTaskGroupTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation create task group too many requests response has a 5xx status code
func (o *ITAutomationCreateTaskGroupTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation create task group too many requests response a status code equal to that given
func (o *ITAutomationCreateTaskGroupTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation create task group too many requests response
func (o *ITAutomationCreateTaskGroupTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationCreateTaskGroupTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/task-groups/v1][%d] iTAutomationCreateTaskGroupTooManyRequests %s", 429, payload)
}

func (o *ITAutomationCreateTaskGroupTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/task-groups/v1][%d] iTAutomationCreateTaskGroupTooManyRequests %s", 429, payload)
}

func (o *ITAutomationCreateTaskGroupTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationCreateTaskGroupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationCreateTaskGroupInternalServerError creates a ITAutomationCreateTaskGroupInternalServerError with default headers values
func NewITAutomationCreateTaskGroupInternalServerError() *ITAutomationCreateTaskGroupInternalServerError {
	return &ITAutomationCreateTaskGroupInternalServerError{}
}

/*
ITAutomationCreateTaskGroupInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ITAutomationCreateTaskGroupInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation create task group internal server error response has a 2xx status code
func (o *ITAutomationCreateTaskGroupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation create task group internal server error response has a 3xx status code
func (o *ITAutomationCreateTaskGroupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create task group internal server error response has a 4xx status code
func (o *ITAutomationCreateTaskGroupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation create task group internal server error response has a 5xx status code
func (o *ITAutomationCreateTaskGroupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation create task group internal server error response a status code equal to that given
func (o *ITAutomationCreateTaskGroupInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation create task group internal server error response
func (o *ITAutomationCreateTaskGroupInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationCreateTaskGroupInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/task-groups/v1][%d] iTAutomationCreateTaskGroupInternalServerError %s", 500, payload)
}

func (o *ITAutomationCreateTaskGroupInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/task-groups/v1][%d] iTAutomationCreateTaskGroupInternalServerError %s", 500, payload)
}

func (o *ITAutomationCreateTaskGroupInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationCreateTaskGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
