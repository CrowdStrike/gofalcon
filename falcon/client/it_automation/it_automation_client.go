// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new it automation API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for it automation API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CancelTaskExecution(params *CancelTaskExecutionParams, opts ...ClientOption) (*CancelTaskExecutionOK, error)

	CreateTask(params *CreateTaskParams, opts ...ClientOption) (*CreateTaskCreated, error)

	DeleteTask(params *DeleteTaskParams, opts ...ClientOption) (*DeleteTaskOK, error)

	GetAssociatedTasks(params *GetAssociatedTasksParams, opts ...ClientOption) (*GetAssociatedTasksOK, error)

	GetExecutionResults(params *GetExecutionResultsParams, opts ...ClientOption) (*GetExecutionResultsOK, error)

	GetExecutionResultsSearchStatus(params *GetExecutionResultsSearchStatusParams, opts ...ClientOption) (*GetExecutionResultsSearchStatusOK, error)

	GetTaskExecution(params *GetTaskExecutionParams, opts ...ClientOption) (*GetTaskExecutionOK, error)

	GetTaskExecutionHostStatus(params *GetTaskExecutionHostStatusParams, opts ...ClientOption) (*GetTaskExecutionHostStatusOK, error)

	GetTaskExecutionsByQuery(params *GetTaskExecutionsByQueryParams, opts ...ClientOption) (*GetTaskExecutionsByQueryOK, error)

	GetTasks(params *GetTasksParams, opts ...ClientOption) (*GetTasksOK, error)

	GetTasksByQuery(params *GetTasksByQueryParams, opts ...ClientOption) (*GetTasksByQueryOK, error)

	RerunTaskExecution(params *RerunTaskExecutionParams, opts ...ClientOption) (*RerunTaskExecutionCreated, error)

	RunLiveQuery(params *RunLiveQueryParams, opts ...ClientOption) (*RunLiveQueryCreated, error)

	SearchTaskExecutions(params *SearchTaskExecutionsParams, opts ...ClientOption) (*SearchTaskExecutionsOK, error)

	SearchTasks(params *SearchTasksParams, opts ...ClientOption) (*SearchTasksOK, error)

	StartExecutionResultsSearch(params *StartExecutionResultsSearchParams, opts ...ClientOption) (*StartExecutionResultsSearchCreated, error)

	StartTaskExecution(params *StartTaskExecutionParams, opts ...ClientOption) (*StartTaskExecutionCreated, error)

	UpdateTask(params *UpdateTaskParams, opts ...ClientOption) (*UpdateTaskOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CancelTaskExecution cancels a task execution specified in the request
*/
func (a *Client) CancelTaskExecution(params *CancelTaskExecutionParams, opts ...ClientOption) (*CancelTaskExecutionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelTaskExecutionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CancelTaskExecution",
		Method:             "POST",
		PathPattern:        "/it-automation/entities/task-execution-cancel/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CancelTaskExecutionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelTaskExecutionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CancelTaskExecution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateTask creates a task with details from the given request
*/
func (a *Client) CreateTask(params *CreateTaskParams, opts ...ClientOption) (*CreateTaskCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateTask",
		Method:             "POST",
		PathPattern:        "/it-automation/entities/tasks/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTaskCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTask deletes tasks for each provided id
*/
func (a *Client) DeleteTask(params *DeleteTaskParams, opts ...ClientOption) (*DeleteTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTask",
		Method:             "DELETE",
		PathPattern:        "/it-automation/entities/tasks/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAssociatedTasks retrieves tasks associated with the provided file id
*/
func (a *Client) GetAssociatedTasks(params *GetAssociatedTasksParams, opts ...ClientOption) (*GetAssociatedTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssociatedTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAssociatedTasks",
		Method:             "GET",
		PathPattern:        "/it-automation/combined/associated-tasks/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAssociatedTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssociatedTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAssociatedTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExecutionResults gets the task execution results from an async search use start execution results search to begin the async search
*/
func (a *Client) GetExecutionResults(params *GetExecutionResultsParams, opts ...ClientOption) (*GetExecutionResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExecutionResultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetExecutionResults",
		Method:             "GET",
		PathPattern:        "/it-automation/entities/task-execution-results/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetExecutionResultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExecutionResultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetExecutionResults: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExecutionResultsSearchStatus gets the status of an async task execution results look for is pending false to know search is complete
*/
func (a *Client) GetExecutionResultsSearchStatus(params *GetExecutionResultsSearchStatusParams, opts ...ClientOption) (*GetExecutionResultsSearchStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExecutionResultsSearchStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetExecutionResultsSearchStatus",
		Method:             "GET",
		PathPattern:        "/it-automation/entities/task-execution-results-search/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetExecutionResultsSearchStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExecutionResultsSearchStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetExecutionResultsSearchStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTaskExecution gets the task execution for the provided task execution ids
*/
func (a *Client) GetTaskExecution(params *GetTaskExecutionParams, opts ...ClientOption) (*GetTaskExecutionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskExecutionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTaskExecution",
		Method:             "GET",
		PathPattern:        "/it-automation/entities/task-executions/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTaskExecutionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskExecutionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTaskExecution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTaskExecutionHostStatus gets the status of host executions by providing the execution ids
*/
func (a *Client) GetTaskExecutionHostStatus(params *GetTaskExecutionHostStatusParams, opts ...ClientOption) (*GetTaskExecutionHostStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskExecutionHostStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTaskExecutionHostStatus",
		Method:             "GET",
		PathPattern:        "/it-automation/entities/task-execution-host-status/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTaskExecutionHostStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskExecutionHostStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTaskExecutionHostStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTaskExecutionsByQuery returns the list of task executions and their details matching the filter query parameter this endpoint will return the same output as if you ran search task executions and get task execution
*/
func (a *Client) GetTaskExecutionsByQuery(params *GetTaskExecutionsByQueryParams, opts ...ClientOption) (*GetTaskExecutionsByQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskExecutionsByQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTaskExecutionsByQuery",
		Method:             "GET",
		PathPattern:        "/it-automation/combined/task-executions/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTaskExecutionsByQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskExecutionsByQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTaskExecutionsByQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTasks returns tasks for each provided ID
*/
func (a *Client) GetTasks(params *GetTasksParams, opts ...ClientOption) (*GetTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTasks",
		Method:             "GET",
		PathPattern:        "/it-automation/entities/tasks/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTasksByQuery returns full details of tasks matching the filter query parameter
*/
func (a *Client) GetTasksByQuery(params *GetTasksByQueryParams, opts ...ClientOption) (*GetTasksByQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasksByQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTasksByQuery",
		Method:             "GET",
		PathPattern:        "/it-automation/combined/tasks/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTasksByQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTasksByQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTasksByQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RerunTaskExecution reruns the task execution specified in the request
*/
func (a *Client) RerunTaskExecution(params *RerunTaskExecutionParams, opts ...ClientOption) (*RerunTaskExecutionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRerunTaskExecutionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RerunTaskExecution",
		Method:             "POST",
		PathPattern:        "/it-automation/entities/task-execution-rerun/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RerunTaskExecutionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RerunTaskExecutionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RerunTaskExecution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RunLiveQuery starts a new task execution from the provided query data in the request and returns the initiated task executions
*/
func (a *Client) RunLiveQuery(params *RunLiveQueryParams, opts ...ClientOption) (*RunLiveQueryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunLiveQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RunLiveQuery",
		Method:             "POST",
		PathPattern:        "/it-automation/entities/live-query-execution/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RunLiveQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RunLiveQueryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RunLiveQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchTaskExecutions returns the list of task execution ids matching the filter query parameter can be used together with the entities endpoint to retrieve full information on executions
*/
func (a *Client) SearchTaskExecutions(params *SearchTaskExecutionsParams, opts ...ClientOption) (*SearchTaskExecutionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchTaskExecutionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchTaskExecutions",
		Method:             "GET",
		PathPattern:        "/it-automation/queries/task-executions/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchTaskExecutionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchTaskExecutionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchTaskExecutions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchTasks returns the list of task ids matching the filter query parameter
*/
func (a *Client) SearchTasks(params *SearchTasksParams, opts ...ClientOption) (*SearchTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SearchTasks",
		Method:             "GET",
		PathPattern:        "/it-automation/queries/tasks/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SearchTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StartExecutionResultsSearch starts an async task execution results search poll get execution results search status to determine when the search is complete
*/
func (a *Client) StartExecutionResultsSearch(params *StartExecutionResultsSearchParams, opts ...ClientOption) (*StartExecutionResultsSearchCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartExecutionResultsSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StartExecutionResultsSearch",
		Method:             "POST",
		PathPattern:        "/it-automation/entities/task-execution-results-search/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartExecutionResultsSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartExecutionResultsSearchCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StartExecutionResultsSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StartTaskExecution starts a new task execution from an existing task provided in the request and returns the initiated task executions
*/
func (a *Client) StartTaskExecution(params *StartTaskExecutionParams, opts ...ClientOption) (*StartTaskExecutionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartTaskExecutionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StartTaskExecution",
		Method:             "POST",
		PathPattern:        "/it-automation/entities/task-executions/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartTaskExecutionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartTaskExecutionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StartTaskExecution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTask updates a task with details from the given request
*/
func (a *Client) UpdateTask(params *UpdateTaskParams, opts ...ClientOption) (*UpdateTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTask",
		Method:             "PATCH",
		PathPattern:        "/it-automation/entities/tasks/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
