// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationGetTaskGroupsReader is a Reader for the ITAutomationGetTaskGroups structure.
type ITAutomationGetTaskGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationGetTaskGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewITAutomationGetTaskGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 207:
		result := NewITAutomationGetTaskGroupsMultiStatus()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationGetTaskGroupsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationGetTaskGroupsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationGetTaskGroupsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationGetTaskGroupsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /it-automation/entities/task-groups/v1] ITAutomationGetTaskGroups", response, response.Code())
	}
}

// NewITAutomationGetTaskGroupsOK creates a ITAutomationGetTaskGroupsOK with default headers values
func NewITAutomationGetTaskGroupsOK() *ITAutomationGetTaskGroupsOK {
	return &ITAutomationGetTaskGroupsOK{}
}

/*
ITAutomationGetTaskGroupsOK describes a response with status code 200, with default header values.

OK
*/
type ITAutomationGetTaskGroupsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationGetTaskGroupsResponse
}

// IsSuccess returns true when this i t automation get task groups o k response has a 2xx status code
func (o *ITAutomationGetTaskGroupsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation get task groups o k response has a 3xx status code
func (o *ITAutomationGetTaskGroupsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get task groups o k response has a 4xx status code
func (o *ITAutomationGetTaskGroupsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation get task groups o k response has a 5xx status code
func (o *ITAutomationGetTaskGroupsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get task groups o k response a status code equal to that given
func (o *ITAutomationGetTaskGroupsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the i t automation get task groups o k response
func (o *ITAutomationGetTaskGroupsOK) Code() int {
	return 200
}

func (o *ITAutomationGetTaskGroupsOK) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-groups/v1][%d] iTAutomationGetTaskGroupsOK  %+v", 200, o.Payload)
}

func (o *ITAutomationGetTaskGroupsOK) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-groups/v1][%d] iTAutomationGetTaskGroupsOK  %+v", 200, o.Payload)
}

func (o *ITAutomationGetTaskGroupsOK) GetPayload() *models.ItautomationGetTaskGroupsResponse {
	return o.Payload
}

func (o *ITAutomationGetTaskGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationGetTaskGroupsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetTaskGroupsMultiStatus creates a ITAutomationGetTaskGroupsMultiStatus with default headers values
func NewITAutomationGetTaskGroupsMultiStatus() *ITAutomationGetTaskGroupsMultiStatus {
	return &ITAutomationGetTaskGroupsMultiStatus{}
}

/*
ITAutomationGetTaskGroupsMultiStatus describes a response with status code 207, with default header values.

Multi-Status
*/
type ITAutomationGetTaskGroupsMultiStatus struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationGetTaskGroupsResponse
}

// IsSuccess returns true when this i t automation get task groups multi status response has a 2xx status code
func (o *ITAutomationGetTaskGroupsMultiStatus) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation get task groups multi status response has a 3xx status code
func (o *ITAutomationGetTaskGroupsMultiStatus) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get task groups multi status response has a 4xx status code
func (o *ITAutomationGetTaskGroupsMultiStatus) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation get task groups multi status response has a 5xx status code
func (o *ITAutomationGetTaskGroupsMultiStatus) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get task groups multi status response a status code equal to that given
func (o *ITAutomationGetTaskGroupsMultiStatus) IsCode(code int) bool {
	return code == 207
}

// Code gets the status code for the i t automation get task groups multi status response
func (o *ITAutomationGetTaskGroupsMultiStatus) Code() int {
	return 207
}

func (o *ITAutomationGetTaskGroupsMultiStatus) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-groups/v1][%d] iTAutomationGetTaskGroupsMultiStatus  %+v", 207, o.Payload)
}

func (o *ITAutomationGetTaskGroupsMultiStatus) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-groups/v1][%d] iTAutomationGetTaskGroupsMultiStatus  %+v", 207, o.Payload)
}

func (o *ITAutomationGetTaskGroupsMultiStatus) GetPayload() *models.ItautomationGetTaskGroupsResponse {
	return o.Payload
}

func (o *ITAutomationGetTaskGroupsMultiStatus) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationGetTaskGroupsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetTaskGroupsBadRequest creates a ITAutomationGetTaskGroupsBadRequest with default headers values
func NewITAutomationGetTaskGroupsBadRequest() *ITAutomationGetTaskGroupsBadRequest {
	return &ITAutomationGetTaskGroupsBadRequest{}
}

/*
ITAutomationGetTaskGroupsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationGetTaskGroupsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation get task groups bad request response has a 2xx status code
func (o *ITAutomationGetTaskGroupsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get task groups bad request response has a 3xx status code
func (o *ITAutomationGetTaskGroupsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get task groups bad request response has a 4xx status code
func (o *ITAutomationGetTaskGroupsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get task groups bad request response has a 5xx status code
func (o *ITAutomationGetTaskGroupsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get task groups bad request response a status code equal to that given
func (o *ITAutomationGetTaskGroupsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation get task groups bad request response
func (o *ITAutomationGetTaskGroupsBadRequest) Code() int {
	return 400
}

func (o *ITAutomationGetTaskGroupsBadRequest) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-groups/v1][%d] iTAutomationGetTaskGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationGetTaskGroupsBadRequest) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-groups/v1][%d] iTAutomationGetTaskGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationGetTaskGroupsBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationGetTaskGroupsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetTaskGroupsForbidden creates a ITAutomationGetTaskGroupsForbidden with default headers values
func NewITAutomationGetTaskGroupsForbidden() *ITAutomationGetTaskGroupsForbidden {
	return &ITAutomationGetTaskGroupsForbidden{}
}

/*
ITAutomationGetTaskGroupsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationGetTaskGroupsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation get task groups forbidden response has a 2xx status code
func (o *ITAutomationGetTaskGroupsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get task groups forbidden response has a 3xx status code
func (o *ITAutomationGetTaskGroupsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get task groups forbidden response has a 4xx status code
func (o *ITAutomationGetTaskGroupsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get task groups forbidden response has a 5xx status code
func (o *ITAutomationGetTaskGroupsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get task groups forbidden response a status code equal to that given
func (o *ITAutomationGetTaskGroupsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation get task groups forbidden response
func (o *ITAutomationGetTaskGroupsForbidden) Code() int {
	return 403
}

func (o *ITAutomationGetTaskGroupsForbidden) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-groups/v1][%d] iTAutomationGetTaskGroupsForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationGetTaskGroupsForbidden) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-groups/v1][%d] iTAutomationGetTaskGroupsForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationGetTaskGroupsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationGetTaskGroupsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetTaskGroupsTooManyRequests creates a ITAutomationGetTaskGroupsTooManyRequests with default headers values
func NewITAutomationGetTaskGroupsTooManyRequests() *ITAutomationGetTaskGroupsTooManyRequests {
	return &ITAutomationGetTaskGroupsTooManyRequests{}
}

/*
ITAutomationGetTaskGroupsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationGetTaskGroupsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation get task groups too many requests response has a 2xx status code
func (o *ITAutomationGetTaskGroupsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get task groups too many requests response has a 3xx status code
func (o *ITAutomationGetTaskGroupsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get task groups too many requests response has a 4xx status code
func (o *ITAutomationGetTaskGroupsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get task groups too many requests response has a 5xx status code
func (o *ITAutomationGetTaskGroupsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get task groups too many requests response a status code equal to that given
func (o *ITAutomationGetTaskGroupsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation get task groups too many requests response
func (o *ITAutomationGetTaskGroupsTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationGetTaskGroupsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-groups/v1][%d] iTAutomationGetTaskGroupsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationGetTaskGroupsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-groups/v1][%d] iTAutomationGetTaskGroupsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationGetTaskGroupsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationGetTaskGroupsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetTaskGroupsInternalServerError creates a ITAutomationGetTaskGroupsInternalServerError with default headers values
func NewITAutomationGetTaskGroupsInternalServerError() *ITAutomationGetTaskGroupsInternalServerError {
	return &ITAutomationGetTaskGroupsInternalServerError{}
}

/*
ITAutomationGetTaskGroupsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ITAutomationGetTaskGroupsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation get task groups internal server error response has a 2xx status code
func (o *ITAutomationGetTaskGroupsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get task groups internal server error response has a 3xx status code
func (o *ITAutomationGetTaskGroupsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get task groups internal server error response has a 4xx status code
func (o *ITAutomationGetTaskGroupsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation get task groups internal server error response has a 5xx status code
func (o *ITAutomationGetTaskGroupsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation get task groups internal server error response a status code equal to that given
func (o *ITAutomationGetTaskGroupsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation get task groups internal server error response
func (o *ITAutomationGetTaskGroupsInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationGetTaskGroupsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-groups/v1][%d] iTAutomationGetTaskGroupsInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationGetTaskGroupsInternalServerError) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-groups/v1][%d] iTAutomationGetTaskGroupsInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationGetTaskGroupsInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationGetTaskGroupsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
