// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationDeleteTaskReader is a Reader for the ITAutomationDeleteTask structure.
type ITAutomationDeleteTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationDeleteTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewITAutomationDeleteTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationDeleteTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationDeleteTaskForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationDeleteTaskTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationDeleteTaskInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /it-automation/entities/tasks/v1] ITAutomationDeleteTask", response, response.Code())
	}
}

// NewITAutomationDeleteTaskOK creates a ITAutomationDeleteTaskOK with default headers values
func NewITAutomationDeleteTaskOK() *ITAutomationDeleteTaskOK {
	return &ITAutomationDeleteTaskOK{}
}

/*
ITAutomationDeleteTaskOK describes a response with status code 200, with default header values.

OK
*/
type ITAutomationDeleteTaskOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationDeleteTaskResponse
}

// IsSuccess returns true when this i t automation delete task o k response has a 2xx status code
func (o *ITAutomationDeleteTaskOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation delete task o k response has a 3xx status code
func (o *ITAutomationDeleteTaskOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation delete task o k response has a 4xx status code
func (o *ITAutomationDeleteTaskOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation delete task o k response has a 5xx status code
func (o *ITAutomationDeleteTaskOK) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation delete task o k response a status code equal to that given
func (o *ITAutomationDeleteTaskOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the i t automation delete task o k response
func (o *ITAutomationDeleteTaskOK) Code() int {
	return 200
}

func (o *ITAutomationDeleteTaskOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /it-automation/entities/tasks/v1][%d] iTAutomationDeleteTaskOK %s", 200, payload)
}

func (o *ITAutomationDeleteTaskOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /it-automation/entities/tasks/v1][%d] iTAutomationDeleteTaskOK %s", 200, payload)
}

func (o *ITAutomationDeleteTaskOK) GetPayload() *models.ItautomationDeleteTaskResponse {
	return o.Payload
}

func (o *ITAutomationDeleteTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationDeleteTaskResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationDeleteTaskBadRequest creates a ITAutomationDeleteTaskBadRequest with default headers values
func NewITAutomationDeleteTaskBadRequest() *ITAutomationDeleteTaskBadRequest {
	return &ITAutomationDeleteTaskBadRequest{}
}

/*
ITAutomationDeleteTaskBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationDeleteTaskBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation delete task bad request response has a 2xx status code
func (o *ITAutomationDeleteTaskBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation delete task bad request response has a 3xx status code
func (o *ITAutomationDeleteTaskBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation delete task bad request response has a 4xx status code
func (o *ITAutomationDeleteTaskBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation delete task bad request response has a 5xx status code
func (o *ITAutomationDeleteTaskBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation delete task bad request response a status code equal to that given
func (o *ITAutomationDeleteTaskBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation delete task bad request response
func (o *ITAutomationDeleteTaskBadRequest) Code() int {
	return 400
}

func (o *ITAutomationDeleteTaskBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /it-automation/entities/tasks/v1][%d] iTAutomationDeleteTaskBadRequest %s", 400, payload)
}

func (o *ITAutomationDeleteTaskBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /it-automation/entities/tasks/v1][%d] iTAutomationDeleteTaskBadRequest %s", 400, payload)
}

func (o *ITAutomationDeleteTaskBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationDeleteTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationDeleteTaskForbidden creates a ITAutomationDeleteTaskForbidden with default headers values
func NewITAutomationDeleteTaskForbidden() *ITAutomationDeleteTaskForbidden {
	return &ITAutomationDeleteTaskForbidden{}
}

/*
ITAutomationDeleteTaskForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationDeleteTaskForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation delete task forbidden response has a 2xx status code
func (o *ITAutomationDeleteTaskForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation delete task forbidden response has a 3xx status code
func (o *ITAutomationDeleteTaskForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation delete task forbidden response has a 4xx status code
func (o *ITAutomationDeleteTaskForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation delete task forbidden response has a 5xx status code
func (o *ITAutomationDeleteTaskForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation delete task forbidden response a status code equal to that given
func (o *ITAutomationDeleteTaskForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation delete task forbidden response
func (o *ITAutomationDeleteTaskForbidden) Code() int {
	return 403
}

func (o *ITAutomationDeleteTaskForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /it-automation/entities/tasks/v1][%d] iTAutomationDeleteTaskForbidden %s", 403, payload)
}

func (o *ITAutomationDeleteTaskForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /it-automation/entities/tasks/v1][%d] iTAutomationDeleteTaskForbidden %s", 403, payload)
}

func (o *ITAutomationDeleteTaskForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationDeleteTaskForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationDeleteTaskTooManyRequests creates a ITAutomationDeleteTaskTooManyRequests with default headers values
func NewITAutomationDeleteTaskTooManyRequests() *ITAutomationDeleteTaskTooManyRequests {
	return &ITAutomationDeleteTaskTooManyRequests{}
}

/*
ITAutomationDeleteTaskTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationDeleteTaskTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation delete task too many requests response has a 2xx status code
func (o *ITAutomationDeleteTaskTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation delete task too many requests response has a 3xx status code
func (o *ITAutomationDeleteTaskTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation delete task too many requests response has a 4xx status code
func (o *ITAutomationDeleteTaskTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation delete task too many requests response has a 5xx status code
func (o *ITAutomationDeleteTaskTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation delete task too many requests response a status code equal to that given
func (o *ITAutomationDeleteTaskTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation delete task too many requests response
func (o *ITAutomationDeleteTaskTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationDeleteTaskTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /it-automation/entities/tasks/v1][%d] iTAutomationDeleteTaskTooManyRequests %s", 429, payload)
}

func (o *ITAutomationDeleteTaskTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /it-automation/entities/tasks/v1][%d] iTAutomationDeleteTaskTooManyRequests %s", 429, payload)
}

func (o *ITAutomationDeleteTaskTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationDeleteTaskTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationDeleteTaskInternalServerError creates a ITAutomationDeleteTaskInternalServerError with default headers values
func NewITAutomationDeleteTaskInternalServerError() *ITAutomationDeleteTaskInternalServerError {
	return &ITAutomationDeleteTaskInternalServerError{}
}

/*
ITAutomationDeleteTaskInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ITAutomationDeleteTaskInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation delete task internal server error response has a 2xx status code
func (o *ITAutomationDeleteTaskInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation delete task internal server error response has a 3xx status code
func (o *ITAutomationDeleteTaskInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation delete task internal server error response has a 4xx status code
func (o *ITAutomationDeleteTaskInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation delete task internal server error response has a 5xx status code
func (o *ITAutomationDeleteTaskInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation delete task internal server error response a status code equal to that given
func (o *ITAutomationDeleteTaskInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation delete task internal server error response
func (o *ITAutomationDeleteTaskInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationDeleteTaskInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /it-automation/entities/tasks/v1][%d] iTAutomationDeleteTaskInternalServerError %s", 500, payload)
}

func (o *ITAutomationDeleteTaskInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /it-automation/entities/tasks/v1][%d] iTAutomationDeleteTaskInternalServerError %s", 500, payload)
}

func (o *ITAutomationDeleteTaskInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationDeleteTaskInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
