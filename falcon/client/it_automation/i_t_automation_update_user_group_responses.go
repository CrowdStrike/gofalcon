// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationUpdateUserGroupReader is a Reader for the ITAutomationUpdateUserGroup structure.
type ITAutomationUpdateUserGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationUpdateUserGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewITAutomationUpdateUserGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationUpdateUserGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationUpdateUserGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewITAutomationUpdateUserGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationUpdateUserGroupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationUpdateUserGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /it-automation/entities/it-user-groups/v1] ITAutomationUpdateUserGroup", response, response.Code())
	}
}

// NewITAutomationUpdateUserGroupOK creates a ITAutomationUpdateUserGroupOK with default headers values
func NewITAutomationUpdateUserGroupOK() *ITAutomationUpdateUserGroupOK {
	return &ITAutomationUpdateUserGroupOK{}
}

/*
ITAutomationUpdateUserGroupOK describes a response with status code 200, with default header values.

OK
*/
type ITAutomationUpdateUserGroupOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationUpdateUserGroupResponse
}

// IsSuccess returns true when this i t automation update user group o k response has a 2xx status code
func (o *ITAutomationUpdateUserGroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation update user group o k response has a 3xx status code
func (o *ITAutomationUpdateUserGroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation update user group o k response has a 4xx status code
func (o *ITAutomationUpdateUserGroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation update user group o k response has a 5xx status code
func (o *ITAutomationUpdateUserGroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation update user group o k response a status code equal to that given
func (o *ITAutomationUpdateUserGroupOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the i t automation update user group o k response
func (o *ITAutomationUpdateUserGroupOK) Code() int {
	return 200
}

func (o *ITAutomationUpdateUserGroupOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/it-user-groups/v1][%d] iTAutomationUpdateUserGroupOK %s", 200, payload)
}

func (o *ITAutomationUpdateUserGroupOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/it-user-groups/v1][%d] iTAutomationUpdateUserGroupOK %s", 200, payload)
}

func (o *ITAutomationUpdateUserGroupOK) GetPayload() *models.ItautomationUpdateUserGroupResponse {
	return o.Payload
}

func (o *ITAutomationUpdateUserGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationUpdateUserGroupResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationUpdateUserGroupBadRequest creates a ITAutomationUpdateUserGroupBadRequest with default headers values
func NewITAutomationUpdateUserGroupBadRequest() *ITAutomationUpdateUserGroupBadRequest {
	return &ITAutomationUpdateUserGroupBadRequest{}
}

/*
ITAutomationUpdateUserGroupBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationUpdateUserGroupBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation update user group bad request response has a 2xx status code
func (o *ITAutomationUpdateUserGroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation update user group bad request response has a 3xx status code
func (o *ITAutomationUpdateUserGroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation update user group bad request response has a 4xx status code
func (o *ITAutomationUpdateUserGroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation update user group bad request response has a 5xx status code
func (o *ITAutomationUpdateUserGroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation update user group bad request response a status code equal to that given
func (o *ITAutomationUpdateUserGroupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation update user group bad request response
func (o *ITAutomationUpdateUserGroupBadRequest) Code() int {
	return 400
}

func (o *ITAutomationUpdateUserGroupBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/it-user-groups/v1][%d] iTAutomationUpdateUserGroupBadRequest %s", 400, payload)
}

func (o *ITAutomationUpdateUserGroupBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/it-user-groups/v1][%d] iTAutomationUpdateUserGroupBadRequest %s", 400, payload)
}

func (o *ITAutomationUpdateUserGroupBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationUpdateUserGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationUpdateUserGroupForbidden creates a ITAutomationUpdateUserGroupForbidden with default headers values
func NewITAutomationUpdateUserGroupForbidden() *ITAutomationUpdateUserGroupForbidden {
	return &ITAutomationUpdateUserGroupForbidden{}
}

/*
ITAutomationUpdateUserGroupForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationUpdateUserGroupForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation update user group forbidden response has a 2xx status code
func (o *ITAutomationUpdateUserGroupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation update user group forbidden response has a 3xx status code
func (o *ITAutomationUpdateUserGroupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation update user group forbidden response has a 4xx status code
func (o *ITAutomationUpdateUserGroupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation update user group forbidden response has a 5xx status code
func (o *ITAutomationUpdateUserGroupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation update user group forbidden response a status code equal to that given
func (o *ITAutomationUpdateUserGroupForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation update user group forbidden response
func (o *ITAutomationUpdateUserGroupForbidden) Code() int {
	return 403
}

func (o *ITAutomationUpdateUserGroupForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/it-user-groups/v1][%d] iTAutomationUpdateUserGroupForbidden %s", 403, payload)
}

func (o *ITAutomationUpdateUserGroupForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/it-user-groups/v1][%d] iTAutomationUpdateUserGroupForbidden %s", 403, payload)
}

func (o *ITAutomationUpdateUserGroupForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationUpdateUserGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationUpdateUserGroupNotFound creates a ITAutomationUpdateUserGroupNotFound with default headers values
func NewITAutomationUpdateUserGroupNotFound() *ITAutomationUpdateUserGroupNotFound {
	return &ITAutomationUpdateUserGroupNotFound{}
}

/*
ITAutomationUpdateUserGroupNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ITAutomationUpdateUserGroupNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation update user group not found response has a 2xx status code
func (o *ITAutomationUpdateUserGroupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation update user group not found response has a 3xx status code
func (o *ITAutomationUpdateUserGroupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation update user group not found response has a 4xx status code
func (o *ITAutomationUpdateUserGroupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation update user group not found response has a 5xx status code
func (o *ITAutomationUpdateUserGroupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation update user group not found response a status code equal to that given
func (o *ITAutomationUpdateUserGroupNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the i t automation update user group not found response
func (o *ITAutomationUpdateUserGroupNotFound) Code() int {
	return 404
}

func (o *ITAutomationUpdateUserGroupNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/it-user-groups/v1][%d] iTAutomationUpdateUserGroupNotFound %s", 404, payload)
}

func (o *ITAutomationUpdateUserGroupNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/it-user-groups/v1][%d] iTAutomationUpdateUserGroupNotFound %s", 404, payload)
}

func (o *ITAutomationUpdateUserGroupNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationUpdateUserGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationUpdateUserGroupTooManyRequests creates a ITAutomationUpdateUserGroupTooManyRequests with default headers values
func NewITAutomationUpdateUserGroupTooManyRequests() *ITAutomationUpdateUserGroupTooManyRequests {
	return &ITAutomationUpdateUserGroupTooManyRequests{}
}

/*
ITAutomationUpdateUserGroupTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationUpdateUserGroupTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation update user group too many requests response has a 2xx status code
func (o *ITAutomationUpdateUserGroupTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation update user group too many requests response has a 3xx status code
func (o *ITAutomationUpdateUserGroupTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation update user group too many requests response has a 4xx status code
func (o *ITAutomationUpdateUserGroupTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation update user group too many requests response has a 5xx status code
func (o *ITAutomationUpdateUserGroupTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation update user group too many requests response a status code equal to that given
func (o *ITAutomationUpdateUserGroupTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation update user group too many requests response
func (o *ITAutomationUpdateUserGroupTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationUpdateUserGroupTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/it-user-groups/v1][%d] iTAutomationUpdateUserGroupTooManyRequests %s", 429, payload)
}

func (o *ITAutomationUpdateUserGroupTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/it-user-groups/v1][%d] iTAutomationUpdateUserGroupTooManyRequests %s", 429, payload)
}

func (o *ITAutomationUpdateUserGroupTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationUpdateUserGroupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationUpdateUserGroupInternalServerError creates a ITAutomationUpdateUserGroupInternalServerError with default headers values
func NewITAutomationUpdateUserGroupInternalServerError() *ITAutomationUpdateUserGroupInternalServerError {
	return &ITAutomationUpdateUserGroupInternalServerError{}
}

/*
ITAutomationUpdateUserGroupInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ITAutomationUpdateUserGroupInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation update user group internal server error response has a 2xx status code
func (o *ITAutomationUpdateUserGroupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation update user group internal server error response has a 3xx status code
func (o *ITAutomationUpdateUserGroupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation update user group internal server error response has a 4xx status code
func (o *ITAutomationUpdateUserGroupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation update user group internal server error response has a 5xx status code
func (o *ITAutomationUpdateUserGroupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation update user group internal server error response a status code equal to that given
func (o *ITAutomationUpdateUserGroupInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation update user group internal server error response
func (o *ITAutomationUpdateUserGroupInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationUpdateUserGroupInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/it-user-groups/v1][%d] iTAutomationUpdateUserGroupInternalServerError %s", 500, payload)
}

func (o *ITAutomationUpdateUserGroupInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/it-user-groups/v1][%d] iTAutomationUpdateUserGroupInternalServerError %s", 500, payload)
}

func (o *ITAutomationUpdateUserGroupInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationUpdateUserGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
