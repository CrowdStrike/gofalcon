// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationSearchTasksReader is a Reader for the ITAutomationSearchTasks structure.
type ITAutomationSearchTasksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationSearchTasksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewITAutomationSearchTasksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationSearchTasksBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationSearchTasksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationSearchTasksTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationSearchTasksInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /it-automation/queries/tasks/v1] ITAutomationSearchTasks", response, response.Code())
	}
}

// NewITAutomationSearchTasksOK creates a ITAutomationSearchTasksOK with default headers values
func NewITAutomationSearchTasksOK() *ITAutomationSearchTasksOK {
	return &ITAutomationSearchTasksOK{}
}

/*
ITAutomationSearchTasksOK describes a response with status code 200, with default header values.

OK
*/
type ITAutomationSearchTasksOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationSearchTaskResponse
}

// IsSuccess returns true when this i t automation search tasks o k response has a 2xx status code
func (o *ITAutomationSearchTasksOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation search tasks o k response has a 3xx status code
func (o *ITAutomationSearchTasksOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search tasks o k response has a 4xx status code
func (o *ITAutomationSearchTasksOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation search tasks o k response has a 5xx status code
func (o *ITAutomationSearchTasksOK) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation search tasks o k response a status code equal to that given
func (o *ITAutomationSearchTasksOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the i t automation search tasks o k response
func (o *ITAutomationSearchTasksOK) Code() int {
	return 200
}

func (o *ITAutomationSearchTasksOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/tasks/v1][%d] iTAutomationSearchTasksOK %s", 200, payload)
}

func (o *ITAutomationSearchTasksOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/tasks/v1][%d] iTAutomationSearchTasksOK %s", 200, payload)
}

func (o *ITAutomationSearchTasksOK) GetPayload() *models.ItautomationSearchTaskResponse {
	return o.Payload
}

func (o *ITAutomationSearchTasksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationSearchTaskResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationSearchTasksBadRequest creates a ITAutomationSearchTasksBadRequest with default headers values
func NewITAutomationSearchTasksBadRequest() *ITAutomationSearchTasksBadRequest {
	return &ITAutomationSearchTasksBadRequest{}
}

/*
ITAutomationSearchTasksBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationSearchTasksBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation search tasks bad request response has a 2xx status code
func (o *ITAutomationSearchTasksBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation search tasks bad request response has a 3xx status code
func (o *ITAutomationSearchTasksBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search tasks bad request response has a 4xx status code
func (o *ITAutomationSearchTasksBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation search tasks bad request response has a 5xx status code
func (o *ITAutomationSearchTasksBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation search tasks bad request response a status code equal to that given
func (o *ITAutomationSearchTasksBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation search tasks bad request response
func (o *ITAutomationSearchTasksBadRequest) Code() int {
	return 400
}

func (o *ITAutomationSearchTasksBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/tasks/v1][%d] iTAutomationSearchTasksBadRequest %s", 400, payload)
}

func (o *ITAutomationSearchTasksBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/tasks/v1][%d] iTAutomationSearchTasksBadRequest %s", 400, payload)
}

func (o *ITAutomationSearchTasksBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationSearchTasksBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationSearchTasksForbidden creates a ITAutomationSearchTasksForbidden with default headers values
func NewITAutomationSearchTasksForbidden() *ITAutomationSearchTasksForbidden {
	return &ITAutomationSearchTasksForbidden{}
}

/*
ITAutomationSearchTasksForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationSearchTasksForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation search tasks forbidden response has a 2xx status code
func (o *ITAutomationSearchTasksForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation search tasks forbidden response has a 3xx status code
func (o *ITAutomationSearchTasksForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search tasks forbidden response has a 4xx status code
func (o *ITAutomationSearchTasksForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation search tasks forbidden response has a 5xx status code
func (o *ITAutomationSearchTasksForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation search tasks forbidden response a status code equal to that given
func (o *ITAutomationSearchTasksForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation search tasks forbidden response
func (o *ITAutomationSearchTasksForbidden) Code() int {
	return 403
}

func (o *ITAutomationSearchTasksForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/tasks/v1][%d] iTAutomationSearchTasksForbidden %s", 403, payload)
}

func (o *ITAutomationSearchTasksForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/tasks/v1][%d] iTAutomationSearchTasksForbidden %s", 403, payload)
}

func (o *ITAutomationSearchTasksForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationSearchTasksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationSearchTasksTooManyRequests creates a ITAutomationSearchTasksTooManyRequests with default headers values
func NewITAutomationSearchTasksTooManyRequests() *ITAutomationSearchTasksTooManyRequests {
	return &ITAutomationSearchTasksTooManyRequests{}
}

/*
ITAutomationSearchTasksTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationSearchTasksTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation search tasks too many requests response has a 2xx status code
func (o *ITAutomationSearchTasksTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation search tasks too many requests response has a 3xx status code
func (o *ITAutomationSearchTasksTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search tasks too many requests response has a 4xx status code
func (o *ITAutomationSearchTasksTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation search tasks too many requests response has a 5xx status code
func (o *ITAutomationSearchTasksTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation search tasks too many requests response a status code equal to that given
func (o *ITAutomationSearchTasksTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation search tasks too many requests response
func (o *ITAutomationSearchTasksTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationSearchTasksTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/tasks/v1][%d] iTAutomationSearchTasksTooManyRequests %s", 429, payload)
}

func (o *ITAutomationSearchTasksTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/tasks/v1][%d] iTAutomationSearchTasksTooManyRequests %s", 429, payload)
}

func (o *ITAutomationSearchTasksTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationSearchTasksTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationSearchTasksInternalServerError creates a ITAutomationSearchTasksInternalServerError with default headers values
func NewITAutomationSearchTasksInternalServerError() *ITAutomationSearchTasksInternalServerError {
	return &ITAutomationSearchTasksInternalServerError{}
}

/*
ITAutomationSearchTasksInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ITAutomationSearchTasksInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation search tasks internal server error response has a 2xx status code
func (o *ITAutomationSearchTasksInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation search tasks internal server error response has a 3xx status code
func (o *ITAutomationSearchTasksInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search tasks internal server error response has a 4xx status code
func (o *ITAutomationSearchTasksInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation search tasks internal server error response has a 5xx status code
func (o *ITAutomationSearchTasksInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation search tasks internal server error response a status code equal to that given
func (o *ITAutomationSearchTasksInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation search tasks internal server error response
func (o *ITAutomationSearchTasksInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationSearchTasksInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/tasks/v1][%d] iTAutomationSearchTasksInternalServerError %s", 500, payload)
}

func (o *ITAutomationSearchTasksInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/tasks/v1][%d] iTAutomationSearchTasksInternalServerError %s", 500, payload)
}

func (o *ITAutomationSearchTasksInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationSearchTasksInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
