// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationDeleteUserGroupReader is a Reader for the ITAutomationDeleteUserGroup structure.
type ITAutomationDeleteUserGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationDeleteUserGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewITAutomationDeleteUserGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationDeleteUserGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationDeleteUserGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationDeleteUserGroupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationDeleteUserGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /it-automation/entities/it-user-groups/v1] ITAutomationDeleteUserGroup", response, response.Code())
	}
}

// NewITAutomationDeleteUserGroupOK creates a ITAutomationDeleteUserGroupOK with default headers values
func NewITAutomationDeleteUserGroupOK() *ITAutomationDeleteUserGroupOK {
	return &ITAutomationDeleteUserGroupOK{}
}

/*
ITAutomationDeleteUserGroupOK describes a response with status code 200, with default header values.

OK
*/
type ITAutomationDeleteUserGroupOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationDeleteUserGroupsResponse
}

// IsSuccess returns true when this i t automation delete user group o k response has a 2xx status code
func (o *ITAutomationDeleteUserGroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation delete user group o k response has a 3xx status code
func (o *ITAutomationDeleteUserGroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation delete user group o k response has a 4xx status code
func (o *ITAutomationDeleteUserGroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation delete user group o k response has a 5xx status code
func (o *ITAutomationDeleteUserGroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation delete user group o k response a status code equal to that given
func (o *ITAutomationDeleteUserGroupOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the i t automation delete user group o k response
func (o *ITAutomationDeleteUserGroupOK) Code() int {
	return 200
}

func (o *ITAutomationDeleteUserGroupOK) Error() string {
	return fmt.Sprintf("[DELETE /it-automation/entities/it-user-groups/v1][%d] iTAutomationDeleteUserGroupOK  %+v", 200, o.Payload)
}

func (o *ITAutomationDeleteUserGroupOK) String() string {
	return fmt.Sprintf("[DELETE /it-automation/entities/it-user-groups/v1][%d] iTAutomationDeleteUserGroupOK  %+v", 200, o.Payload)
}

func (o *ITAutomationDeleteUserGroupOK) GetPayload() *models.ItautomationDeleteUserGroupsResponse {
	return o.Payload
}

func (o *ITAutomationDeleteUserGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationDeleteUserGroupsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationDeleteUserGroupBadRequest creates a ITAutomationDeleteUserGroupBadRequest with default headers values
func NewITAutomationDeleteUserGroupBadRequest() *ITAutomationDeleteUserGroupBadRequest {
	return &ITAutomationDeleteUserGroupBadRequest{}
}

/*
ITAutomationDeleteUserGroupBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationDeleteUserGroupBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation delete user group bad request response has a 2xx status code
func (o *ITAutomationDeleteUserGroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation delete user group bad request response has a 3xx status code
func (o *ITAutomationDeleteUserGroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation delete user group bad request response has a 4xx status code
func (o *ITAutomationDeleteUserGroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation delete user group bad request response has a 5xx status code
func (o *ITAutomationDeleteUserGroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation delete user group bad request response a status code equal to that given
func (o *ITAutomationDeleteUserGroupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation delete user group bad request response
func (o *ITAutomationDeleteUserGroupBadRequest) Code() int {
	return 400
}

func (o *ITAutomationDeleteUserGroupBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /it-automation/entities/it-user-groups/v1][%d] iTAutomationDeleteUserGroupBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationDeleteUserGroupBadRequest) String() string {
	return fmt.Sprintf("[DELETE /it-automation/entities/it-user-groups/v1][%d] iTAutomationDeleteUserGroupBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationDeleteUserGroupBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationDeleteUserGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationDeleteUserGroupForbidden creates a ITAutomationDeleteUserGroupForbidden with default headers values
func NewITAutomationDeleteUserGroupForbidden() *ITAutomationDeleteUserGroupForbidden {
	return &ITAutomationDeleteUserGroupForbidden{}
}

/*
ITAutomationDeleteUserGroupForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationDeleteUserGroupForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation delete user group forbidden response has a 2xx status code
func (o *ITAutomationDeleteUserGroupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation delete user group forbidden response has a 3xx status code
func (o *ITAutomationDeleteUserGroupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation delete user group forbidden response has a 4xx status code
func (o *ITAutomationDeleteUserGroupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation delete user group forbidden response has a 5xx status code
func (o *ITAutomationDeleteUserGroupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation delete user group forbidden response a status code equal to that given
func (o *ITAutomationDeleteUserGroupForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation delete user group forbidden response
func (o *ITAutomationDeleteUserGroupForbidden) Code() int {
	return 403
}

func (o *ITAutomationDeleteUserGroupForbidden) Error() string {
	return fmt.Sprintf("[DELETE /it-automation/entities/it-user-groups/v1][%d] iTAutomationDeleteUserGroupForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationDeleteUserGroupForbidden) String() string {
	return fmt.Sprintf("[DELETE /it-automation/entities/it-user-groups/v1][%d] iTAutomationDeleteUserGroupForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationDeleteUserGroupForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationDeleteUserGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationDeleteUserGroupTooManyRequests creates a ITAutomationDeleteUserGroupTooManyRequests with default headers values
func NewITAutomationDeleteUserGroupTooManyRequests() *ITAutomationDeleteUserGroupTooManyRequests {
	return &ITAutomationDeleteUserGroupTooManyRequests{}
}

/*
ITAutomationDeleteUserGroupTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationDeleteUserGroupTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation delete user group too many requests response has a 2xx status code
func (o *ITAutomationDeleteUserGroupTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation delete user group too many requests response has a 3xx status code
func (o *ITAutomationDeleteUserGroupTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation delete user group too many requests response has a 4xx status code
func (o *ITAutomationDeleteUserGroupTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation delete user group too many requests response has a 5xx status code
func (o *ITAutomationDeleteUserGroupTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation delete user group too many requests response a status code equal to that given
func (o *ITAutomationDeleteUserGroupTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation delete user group too many requests response
func (o *ITAutomationDeleteUserGroupTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationDeleteUserGroupTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /it-automation/entities/it-user-groups/v1][%d] iTAutomationDeleteUserGroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationDeleteUserGroupTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /it-automation/entities/it-user-groups/v1][%d] iTAutomationDeleteUserGroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationDeleteUserGroupTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationDeleteUserGroupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationDeleteUserGroupInternalServerError creates a ITAutomationDeleteUserGroupInternalServerError with default headers values
func NewITAutomationDeleteUserGroupInternalServerError() *ITAutomationDeleteUserGroupInternalServerError {
	return &ITAutomationDeleteUserGroupInternalServerError{}
}

/*
ITAutomationDeleteUserGroupInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ITAutomationDeleteUserGroupInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation delete user group internal server error response has a 2xx status code
func (o *ITAutomationDeleteUserGroupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation delete user group internal server error response has a 3xx status code
func (o *ITAutomationDeleteUserGroupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation delete user group internal server error response has a 4xx status code
func (o *ITAutomationDeleteUserGroupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation delete user group internal server error response has a 5xx status code
func (o *ITAutomationDeleteUserGroupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation delete user group internal server error response a status code equal to that given
func (o *ITAutomationDeleteUserGroupInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation delete user group internal server error response
func (o *ITAutomationDeleteUserGroupInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationDeleteUserGroupInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /it-automation/entities/it-user-groups/v1][%d] iTAutomationDeleteUserGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationDeleteUserGroupInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /it-automation/entities/it-user-groups/v1][%d] iTAutomationDeleteUserGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationDeleteUserGroupInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationDeleteUserGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
