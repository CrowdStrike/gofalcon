// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// RerunTaskExecutionReader is a Reader for the RerunTaskExecution structure.
type RerunTaskExecutionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RerunTaskExecutionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewRerunTaskExecutionCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRerunTaskExecutionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRerunTaskExecutionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /it-automation/entities/task-execution-rerun/v1] RerunTaskExecution", response, response.Code())
	}
}

// NewRerunTaskExecutionCreated creates a RerunTaskExecutionCreated with default headers values
func NewRerunTaskExecutionCreated() *RerunTaskExecutionCreated {
	return &RerunTaskExecutionCreated{}
}

/*
RerunTaskExecutionCreated describes a response with status code 201, with default header values.

Created
*/
type RerunTaskExecutionCreated struct {
	Payload *models.TaskexecutionsRerunTaskExecutionResponse
}

// IsSuccess returns true when this rerun task execution created response has a 2xx status code
func (o *RerunTaskExecutionCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this rerun task execution created response has a 3xx status code
func (o *RerunTaskExecutionCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rerun task execution created response has a 4xx status code
func (o *RerunTaskExecutionCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this rerun task execution created response has a 5xx status code
func (o *RerunTaskExecutionCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this rerun task execution created response a status code equal to that given
func (o *RerunTaskExecutionCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the rerun task execution created response
func (o *RerunTaskExecutionCreated) Code() int {
	return 201
}

func (o *RerunTaskExecutionCreated) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-rerun/v1][%d] rerunTaskExecutionCreated  %+v", 201, o.Payload)
}

func (o *RerunTaskExecutionCreated) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-rerun/v1][%d] rerunTaskExecutionCreated  %+v", 201, o.Payload)
}

func (o *RerunTaskExecutionCreated) GetPayload() *models.TaskexecutionsRerunTaskExecutionResponse {
	return o.Payload
}

func (o *RerunTaskExecutionCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskexecutionsRerunTaskExecutionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRerunTaskExecutionBadRequest creates a RerunTaskExecutionBadRequest with default headers values
func NewRerunTaskExecutionBadRequest() *RerunTaskExecutionBadRequest {
	return &RerunTaskExecutionBadRequest{}
}

/*
RerunTaskExecutionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RerunTaskExecutionBadRequest struct {
	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this rerun task execution bad request response has a 2xx status code
func (o *RerunTaskExecutionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rerun task execution bad request response has a 3xx status code
func (o *RerunTaskExecutionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rerun task execution bad request response has a 4xx status code
func (o *RerunTaskExecutionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this rerun task execution bad request response has a 5xx status code
func (o *RerunTaskExecutionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this rerun task execution bad request response a status code equal to that given
func (o *RerunTaskExecutionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the rerun task execution bad request response
func (o *RerunTaskExecutionBadRequest) Code() int {
	return 400
}

func (o *RerunTaskExecutionBadRequest) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-rerun/v1][%d] rerunTaskExecutionBadRequest  %+v", 400, o.Payload)
}

func (o *RerunTaskExecutionBadRequest) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-rerun/v1][%d] rerunTaskExecutionBadRequest  %+v", 400, o.Payload)
}

func (o *RerunTaskExecutionBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *RerunTaskExecutionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRerunTaskExecutionNotFound creates a RerunTaskExecutionNotFound with default headers values
func NewRerunTaskExecutionNotFound() *RerunTaskExecutionNotFound {
	return &RerunTaskExecutionNotFound{}
}

/*
RerunTaskExecutionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RerunTaskExecutionNotFound struct {
	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this rerun task execution not found response has a 2xx status code
func (o *RerunTaskExecutionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rerun task execution not found response has a 3xx status code
func (o *RerunTaskExecutionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rerun task execution not found response has a 4xx status code
func (o *RerunTaskExecutionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this rerun task execution not found response has a 5xx status code
func (o *RerunTaskExecutionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this rerun task execution not found response a status code equal to that given
func (o *RerunTaskExecutionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the rerun task execution not found response
func (o *RerunTaskExecutionNotFound) Code() int {
	return 404
}

func (o *RerunTaskExecutionNotFound) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-rerun/v1][%d] rerunTaskExecutionNotFound  %+v", 404, o.Payload)
}

func (o *RerunTaskExecutionNotFound) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-rerun/v1][%d] rerunTaskExecutionNotFound  %+v", 404, o.Payload)
}

func (o *RerunTaskExecutionNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *RerunTaskExecutionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
