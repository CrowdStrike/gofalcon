// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationRerunTaskExecutionReader is a Reader for the ITAutomationRerunTaskExecution structure.
type ITAutomationRerunTaskExecutionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationRerunTaskExecutionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewITAutomationRerunTaskExecutionCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationRerunTaskExecutionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationRerunTaskExecutionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewITAutomationRerunTaskExecutionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationRerunTaskExecutionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationRerunTaskExecutionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /it-automation/entities/task-execution-rerun/v1] ITAutomationRerunTaskExecution", response, response.Code())
	}
}

// NewITAutomationRerunTaskExecutionCreated creates a ITAutomationRerunTaskExecutionCreated with default headers values
func NewITAutomationRerunTaskExecutionCreated() *ITAutomationRerunTaskExecutionCreated {
	return &ITAutomationRerunTaskExecutionCreated{}
}

/*
ITAutomationRerunTaskExecutionCreated describes a response with status code 201, with default header values.

Created
*/
type ITAutomationRerunTaskExecutionCreated struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationRerunTaskExecutionResponse
}

// IsSuccess returns true when this i t automation rerun task execution created response has a 2xx status code
func (o *ITAutomationRerunTaskExecutionCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation rerun task execution created response has a 3xx status code
func (o *ITAutomationRerunTaskExecutionCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation rerun task execution created response has a 4xx status code
func (o *ITAutomationRerunTaskExecutionCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation rerun task execution created response has a 5xx status code
func (o *ITAutomationRerunTaskExecutionCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation rerun task execution created response a status code equal to that given
func (o *ITAutomationRerunTaskExecutionCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the i t automation rerun task execution created response
func (o *ITAutomationRerunTaskExecutionCreated) Code() int {
	return 201
}

func (o *ITAutomationRerunTaskExecutionCreated) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-rerun/v1][%d] iTAutomationRerunTaskExecutionCreated  %+v", 201, o.Payload)
}

func (o *ITAutomationRerunTaskExecutionCreated) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-rerun/v1][%d] iTAutomationRerunTaskExecutionCreated  %+v", 201, o.Payload)
}

func (o *ITAutomationRerunTaskExecutionCreated) GetPayload() *models.ItautomationRerunTaskExecutionResponse {
	return o.Payload
}

func (o *ITAutomationRerunTaskExecutionCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationRerunTaskExecutionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationRerunTaskExecutionBadRequest creates a ITAutomationRerunTaskExecutionBadRequest with default headers values
func NewITAutomationRerunTaskExecutionBadRequest() *ITAutomationRerunTaskExecutionBadRequest {
	return &ITAutomationRerunTaskExecutionBadRequest{}
}

/*
ITAutomationRerunTaskExecutionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationRerunTaskExecutionBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation rerun task execution bad request response has a 2xx status code
func (o *ITAutomationRerunTaskExecutionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation rerun task execution bad request response has a 3xx status code
func (o *ITAutomationRerunTaskExecutionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation rerun task execution bad request response has a 4xx status code
func (o *ITAutomationRerunTaskExecutionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation rerun task execution bad request response has a 5xx status code
func (o *ITAutomationRerunTaskExecutionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation rerun task execution bad request response a status code equal to that given
func (o *ITAutomationRerunTaskExecutionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation rerun task execution bad request response
func (o *ITAutomationRerunTaskExecutionBadRequest) Code() int {
	return 400
}

func (o *ITAutomationRerunTaskExecutionBadRequest) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-rerun/v1][%d] iTAutomationRerunTaskExecutionBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationRerunTaskExecutionBadRequest) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-rerun/v1][%d] iTAutomationRerunTaskExecutionBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationRerunTaskExecutionBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationRerunTaskExecutionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationRerunTaskExecutionForbidden creates a ITAutomationRerunTaskExecutionForbidden with default headers values
func NewITAutomationRerunTaskExecutionForbidden() *ITAutomationRerunTaskExecutionForbidden {
	return &ITAutomationRerunTaskExecutionForbidden{}
}

/*
ITAutomationRerunTaskExecutionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationRerunTaskExecutionForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation rerun task execution forbidden response has a 2xx status code
func (o *ITAutomationRerunTaskExecutionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation rerun task execution forbidden response has a 3xx status code
func (o *ITAutomationRerunTaskExecutionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation rerun task execution forbidden response has a 4xx status code
func (o *ITAutomationRerunTaskExecutionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation rerun task execution forbidden response has a 5xx status code
func (o *ITAutomationRerunTaskExecutionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation rerun task execution forbidden response a status code equal to that given
func (o *ITAutomationRerunTaskExecutionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation rerun task execution forbidden response
func (o *ITAutomationRerunTaskExecutionForbidden) Code() int {
	return 403
}

func (o *ITAutomationRerunTaskExecutionForbidden) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-rerun/v1][%d] iTAutomationRerunTaskExecutionForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationRerunTaskExecutionForbidden) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-rerun/v1][%d] iTAutomationRerunTaskExecutionForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationRerunTaskExecutionForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationRerunTaskExecutionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationRerunTaskExecutionNotFound creates a ITAutomationRerunTaskExecutionNotFound with default headers values
func NewITAutomationRerunTaskExecutionNotFound() *ITAutomationRerunTaskExecutionNotFound {
	return &ITAutomationRerunTaskExecutionNotFound{}
}

/*
ITAutomationRerunTaskExecutionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ITAutomationRerunTaskExecutionNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation rerun task execution not found response has a 2xx status code
func (o *ITAutomationRerunTaskExecutionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation rerun task execution not found response has a 3xx status code
func (o *ITAutomationRerunTaskExecutionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation rerun task execution not found response has a 4xx status code
func (o *ITAutomationRerunTaskExecutionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation rerun task execution not found response has a 5xx status code
func (o *ITAutomationRerunTaskExecutionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation rerun task execution not found response a status code equal to that given
func (o *ITAutomationRerunTaskExecutionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the i t automation rerun task execution not found response
func (o *ITAutomationRerunTaskExecutionNotFound) Code() int {
	return 404
}

func (o *ITAutomationRerunTaskExecutionNotFound) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-rerun/v1][%d] iTAutomationRerunTaskExecutionNotFound  %+v", 404, o.Payload)
}

func (o *ITAutomationRerunTaskExecutionNotFound) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-rerun/v1][%d] iTAutomationRerunTaskExecutionNotFound  %+v", 404, o.Payload)
}

func (o *ITAutomationRerunTaskExecutionNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationRerunTaskExecutionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationRerunTaskExecutionTooManyRequests creates a ITAutomationRerunTaskExecutionTooManyRequests with default headers values
func NewITAutomationRerunTaskExecutionTooManyRequests() *ITAutomationRerunTaskExecutionTooManyRequests {
	return &ITAutomationRerunTaskExecutionTooManyRequests{}
}

/*
ITAutomationRerunTaskExecutionTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationRerunTaskExecutionTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation rerun task execution too many requests response has a 2xx status code
func (o *ITAutomationRerunTaskExecutionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation rerun task execution too many requests response has a 3xx status code
func (o *ITAutomationRerunTaskExecutionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation rerun task execution too many requests response has a 4xx status code
func (o *ITAutomationRerunTaskExecutionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation rerun task execution too many requests response has a 5xx status code
func (o *ITAutomationRerunTaskExecutionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation rerun task execution too many requests response a status code equal to that given
func (o *ITAutomationRerunTaskExecutionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation rerun task execution too many requests response
func (o *ITAutomationRerunTaskExecutionTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationRerunTaskExecutionTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-rerun/v1][%d] iTAutomationRerunTaskExecutionTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationRerunTaskExecutionTooManyRequests) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-rerun/v1][%d] iTAutomationRerunTaskExecutionTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationRerunTaskExecutionTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationRerunTaskExecutionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationRerunTaskExecutionInternalServerError creates a ITAutomationRerunTaskExecutionInternalServerError with default headers values
func NewITAutomationRerunTaskExecutionInternalServerError() *ITAutomationRerunTaskExecutionInternalServerError {
	return &ITAutomationRerunTaskExecutionInternalServerError{}
}

/*
ITAutomationRerunTaskExecutionInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ITAutomationRerunTaskExecutionInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation rerun task execution internal server error response has a 2xx status code
func (o *ITAutomationRerunTaskExecutionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation rerun task execution internal server error response has a 3xx status code
func (o *ITAutomationRerunTaskExecutionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation rerun task execution internal server error response has a 4xx status code
func (o *ITAutomationRerunTaskExecutionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation rerun task execution internal server error response has a 5xx status code
func (o *ITAutomationRerunTaskExecutionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation rerun task execution internal server error response a status code equal to that given
func (o *ITAutomationRerunTaskExecutionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation rerun task execution internal server error response
func (o *ITAutomationRerunTaskExecutionInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationRerunTaskExecutionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-rerun/v1][%d] iTAutomationRerunTaskExecutionInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationRerunTaskExecutionInternalServerError) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-rerun/v1][%d] iTAutomationRerunTaskExecutionInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationRerunTaskExecutionInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationRerunTaskExecutionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
