// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationCancelTaskExecutionReader is a Reader for the ITAutomationCancelTaskExecution structure.
type ITAutomationCancelTaskExecutionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationCancelTaskExecutionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewITAutomationCancelTaskExecutionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationCancelTaskExecutionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationCancelTaskExecutionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewITAutomationCancelTaskExecutionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationCancelTaskExecutionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationCancelTaskExecutionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /it-automation/entities/task-execution-cancel/v1] ITAutomationCancelTaskExecution", response, response.Code())
	}
}

// NewITAutomationCancelTaskExecutionOK creates a ITAutomationCancelTaskExecutionOK with default headers values
func NewITAutomationCancelTaskExecutionOK() *ITAutomationCancelTaskExecutionOK {
	return &ITAutomationCancelTaskExecutionOK{}
}

/*
ITAutomationCancelTaskExecutionOK describes a response with status code 200, with default header values.

OK
*/
type ITAutomationCancelTaskExecutionOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationCancelTaskExecutionResponse
}

// IsSuccess returns true when this i t automation cancel task execution o k response has a 2xx status code
func (o *ITAutomationCancelTaskExecutionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation cancel task execution o k response has a 3xx status code
func (o *ITAutomationCancelTaskExecutionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation cancel task execution o k response has a 4xx status code
func (o *ITAutomationCancelTaskExecutionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation cancel task execution o k response has a 5xx status code
func (o *ITAutomationCancelTaskExecutionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation cancel task execution o k response a status code equal to that given
func (o *ITAutomationCancelTaskExecutionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the i t automation cancel task execution o k response
func (o *ITAutomationCancelTaskExecutionOK) Code() int {
	return 200
}

func (o *ITAutomationCancelTaskExecutionOK) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-cancel/v1][%d] iTAutomationCancelTaskExecutionOK  %+v", 200, o.Payload)
}

func (o *ITAutomationCancelTaskExecutionOK) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-cancel/v1][%d] iTAutomationCancelTaskExecutionOK  %+v", 200, o.Payload)
}

func (o *ITAutomationCancelTaskExecutionOK) GetPayload() *models.ItautomationCancelTaskExecutionResponse {
	return o.Payload
}

func (o *ITAutomationCancelTaskExecutionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationCancelTaskExecutionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationCancelTaskExecutionBadRequest creates a ITAutomationCancelTaskExecutionBadRequest with default headers values
func NewITAutomationCancelTaskExecutionBadRequest() *ITAutomationCancelTaskExecutionBadRequest {
	return &ITAutomationCancelTaskExecutionBadRequest{}
}

/*
ITAutomationCancelTaskExecutionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationCancelTaskExecutionBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation cancel task execution bad request response has a 2xx status code
func (o *ITAutomationCancelTaskExecutionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation cancel task execution bad request response has a 3xx status code
func (o *ITAutomationCancelTaskExecutionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation cancel task execution bad request response has a 4xx status code
func (o *ITAutomationCancelTaskExecutionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation cancel task execution bad request response has a 5xx status code
func (o *ITAutomationCancelTaskExecutionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation cancel task execution bad request response a status code equal to that given
func (o *ITAutomationCancelTaskExecutionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation cancel task execution bad request response
func (o *ITAutomationCancelTaskExecutionBadRequest) Code() int {
	return 400
}

func (o *ITAutomationCancelTaskExecutionBadRequest) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-cancel/v1][%d] iTAutomationCancelTaskExecutionBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationCancelTaskExecutionBadRequest) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-cancel/v1][%d] iTAutomationCancelTaskExecutionBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationCancelTaskExecutionBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationCancelTaskExecutionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationCancelTaskExecutionForbidden creates a ITAutomationCancelTaskExecutionForbidden with default headers values
func NewITAutomationCancelTaskExecutionForbidden() *ITAutomationCancelTaskExecutionForbidden {
	return &ITAutomationCancelTaskExecutionForbidden{}
}

/*
ITAutomationCancelTaskExecutionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationCancelTaskExecutionForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation cancel task execution forbidden response has a 2xx status code
func (o *ITAutomationCancelTaskExecutionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation cancel task execution forbidden response has a 3xx status code
func (o *ITAutomationCancelTaskExecutionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation cancel task execution forbidden response has a 4xx status code
func (o *ITAutomationCancelTaskExecutionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation cancel task execution forbidden response has a 5xx status code
func (o *ITAutomationCancelTaskExecutionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation cancel task execution forbidden response a status code equal to that given
func (o *ITAutomationCancelTaskExecutionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation cancel task execution forbidden response
func (o *ITAutomationCancelTaskExecutionForbidden) Code() int {
	return 403
}

func (o *ITAutomationCancelTaskExecutionForbidden) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-cancel/v1][%d] iTAutomationCancelTaskExecutionForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationCancelTaskExecutionForbidden) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-cancel/v1][%d] iTAutomationCancelTaskExecutionForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationCancelTaskExecutionForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationCancelTaskExecutionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationCancelTaskExecutionNotFound creates a ITAutomationCancelTaskExecutionNotFound with default headers values
func NewITAutomationCancelTaskExecutionNotFound() *ITAutomationCancelTaskExecutionNotFound {
	return &ITAutomationCancelTaskExecutionNotFound{}
}

/*
ITAutomationCancelTaskExecutionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ITAutomationCancelTaskExecutionNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation cancel task execution not found response has a 2xx status code
func (o *ITAutomationCancelTaskExecutionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation cancel task execution not found response has a 3xx status code
func (o *ITAutomationCancelTaskExecutionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation cancel task execution not found response has a 4xx status code
func (o *ITAutomationCancelTaskExecutionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation cancel task execution not found response has a 5xx status code
func (o *ITAutomationCancelTaskExecutionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation cancel task execution not found response a status code equal to that given
func (o *ITAutomationCancelTaskExecutionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the i t automation cancel task execution not found response
func (o *ITAutomationCancelTaskExecutionNotFound) Code() int {
	return 404
}

func (o *ITAutomationCancelTaskExecutionNotFound) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-cancel/v1][%d] iTAutomationCancelTaskExecutionNotFound  %+v", 404, o.Payload)
}

func (o *ITAutomationCancelTaskExecutionNotFound) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-cancel/v1][%d] iTAutomationCancelTaskExecutionNotFound  %+v", 404, o.Payload)
}

func (o *ITAutomationCancelTaskExecutionNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationCancelTaskExecutionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationCancelTaskExecutionTooManyRequests creates a ITAutomationCancelTaskExecutionTooManyRequests with default headers values
func NewITAutomationCancelTaskExecutionTooManyRequests() *ITAutomationCancelTaskExecutionTooManyRequests {
	return &ITAutomationCancelTaskExecutionTooManyRequests{}
}

/*
ITAutomationCancelTaskExecutionTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationCancelTaskExecutionTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation cancel task execution too many requests response has a 2xx status code
func (o *ITAutomationCancelTaskExecutionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation cancel task execution too many requests response has a 3xx status code
func (o *ITAutomationCancelTaskExecutionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation cancel task execution too many requests response has a 4xx status code
func (o *ITAutomationCancelTaskExecutionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation cancel task execution too many requests response has a 5xx status code
func (o *ITAutomationCancelTaskExecutionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation cancel task execution too many requests response a status code equal to that given
func (o *ITAutomationCancelTaskExecutionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation cancel task execution too many requests response
func (o *ITAutomationCancelTaskExecutionTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationCancelTaskExecutionTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-cancel/v1][%d] iTAutomationCancelTaskExecutionTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationCancelTaskExecutionTooManyRequests) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-cancel/v1][%d] iTAutomationCancelTaskExecutionTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationCancelTaskExecutionTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationCancelTaskExecutionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationCancelTaskExecutionInternalServerError creates a ITAutomationCancelTaskExecutionInternalServerError with default headers values
func NewITAutomationCancelTaskExecutionInternalServerError() *ITAutomationCancelTaskExecutionInternalServerError {
	return &ITAutomationCancelTaskExecutionInternalServerError{}
}

/*
ITAutomationCancelTaskExecutionInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ITAutomationCancelTaskExecutionInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation cancel task execution internal server error response has a 2xx status code
func (o *ITAutomationCancelTaskExecutionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation cancel task execution internal server error response has a 3xx status code
func (o *ITAutomationCancelTaskExecutionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation cancel task execution internal server error response has a 4xx status code
func (o *ITAutomationCancelTaskExecutionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation cancel task execution internal server error response has a 5xx status code
func (o *ITAutomationCancelTaskExecutionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation cancel task execution internal server error response a status code equal to that given
func (o *ITAutomationCancelTaskExecutionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation cancel task execution internal server error response
func (o *ITAutomationCancelTaskExecutionInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationCancelTaskExecutionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-cancel/v1][%d] iTAutomationCancelTaskExecutionInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationCancelTaskExecutionInternalServerError) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/task-execution-cancel/v1][%d] iTAutomationCancelTaskExecutionInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationCancelTaskExecutionInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationCancelTaskExecutionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
