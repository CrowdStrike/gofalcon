// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationCreateTaskReader is a Reader for the ITAutomationCreateTask structure.
type ITAutomationCreateTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationCreateTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewITAutomationCreateTaskCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationCreateTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationCreateTaskForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationCreateTaskTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationCreateTaskInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /it-automation/entities/tasks/v1] ITAutomationCreateTask", response, response.Code())
	}
}

// NewITAutomationCreateTaskCreated creates a ITAutomationCreateTaskCreated with default headers values
func NewITAutomationCreateTaskCreated() *ITAutomationCreateTaskCreated {
	return &ITAutomationCreateTaskCreated{}
}

/*
ITAutomationCreateTaskCreated describes a response with status code 201, with default header values.

Created
*/
type ITAutomationCreateTaskCreated struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationCreateTaskResponse
}

// IsSuccess returns true when this i t automation create task created response has a 2xx status code
func (o *ITAutomationCreateTaskCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation create task created response has a 3xx status code
func (o *ITAutomationCreateTaskCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create task created response has a 4xx status code
func (o *ITAutomationCreateTaskCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation create task created response has a 5xx status code
func (o *ITAutomationCreateTaskCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation create task created response a status code equal to that given
func (o *ITAutomationCreateTaskCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the i t automation create task created response
func (o *ITAutomationCreateTaskCreated) Code() int {
	return 201
}

func (o *ITAutomationCreateTaskCreated) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/tasks/v1][%d] iTAutomationCreateTaskCreated  %+v", 201, o.Payload)
}

func (o *ITAutomationCreateTaskCreated) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/tasks/v1][%d] iTAutomationCreateTaskCreated  %+v", 201, o.Payload)
}

func (o *ITAutomationCreateTaskCreated) GetPayload() *models.ItautomationCreateTaskResponse {
	return o.Payload
}

func (o *ITAutomationCreateTaskCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationCreateTaskResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationCreateTaskBadRequest creates a ITAutomationCreateTaskBadRequest with default headers values
func NewITAutomationCreateTaskBadRequest() *ITAutomationCreateTaskBadRequest {
	return &ITAutomationCreateTaskBadRequest{}
}

/*
ITAutomationCreateTaskBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationCreateTaskBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation create task bad request response has a 2xx status code
func (o *ITAutomationCreateTaskBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation create task bad request response has a 3xx status code
func (o *ITAutomationCreateTaskBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create task bad request response has a 4xx status code
func (o *ITAutomationCreateTaskBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation create task bad request response has a 5xx status code
func (o *ITAutomationCreateTaskBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation create task bad request response a status code equal to that given
func (o *ITAutomationCreateTaskBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation create task bad request response
func (o *ITAutomationCreateTaskBadRequest) Code() int {
	return 400
}

func (o *ITAutomationCreateTaskBadRequest) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/tasks/v1][%d] iTAutomationCreateTaskBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationCreateTaskBadRequest) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/tasks/v1][%d] iTAutomationCreateTaskBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationCreateTaskBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationCreateTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationCreateTaskForbidden creates a ITAutomationCreateTaskForbidden with default headers values
func NewITAutomationCreateTaskForbidden() *ITAutomationCreateTaskForbidden {
	return &ITAutomationCreateTaskForbidden{}
}

/*
ITAutomationCreateTaskForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationCreateTaskForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation create task forbidden response has a 2xx status code
func (o *ITAutomationCreateTaskForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation create task forbidden response has a 3xx status code
func (o *ITAutomationCreateTaskForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create task forbidden response has a 4xx status code
func (o *ITAutomationCreateTaskForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation create task forbidden response has a 5xx status code
func (o *ITAutomationCreateTaskForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation create task forbidden response a status code equal to that given
func (o *ITAutomationCreateTaskForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation create task forbidden response
func (o *ITAutomationCreateTaskForbidden) Code() int {
	return 403
}

func (o *ITAutomationCreateTaskForbidden) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/tasks/v1][%d] iTAutomationCreateTaskForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationCreateTaskForbidden) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/tasks/v1][%d] iTAutomationCreateTaskForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationCreateTaskForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationCreateTaskForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationCreateTaskTooManyRequests creates a ITAutomationCreateTaskTooManyRequests with default headers values
func NewITAutomationCreateTaskTooManyRequests() *ITAutomationCreateTaskTooManyRequests {
	return &ITAutomationCreateTaskTooManyRequests{}
}

/*
ITAutomationCreateTaskTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationCreateTaskTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation create task too many requests response has a 2xx status code
func (o *ITAutomationCreateTaskTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation create task too many requests response has a 3xx status code
func (o *ITAutomationCreateTaskTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create task too many requests response has a 4xx status code
func (o *ITAutomationCreateTaskTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation create task too many requests response has a 5xx status code
func (o *ITAutomationCreateTaskTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation create task too many requests response a status code equal to that given
func (o *ITAutomationCreateTaskTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation create task too many requests response
func (o *ITAutomationCreateTaskTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationCreateTaskTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/tasks/v1][%d] iTAutomationCreateTaskTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationCreateTaskTooManyRequests) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/tasks/v1][%d] iTAutomationCreateTaskTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationCreateTaskTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationCreateTaskTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationCreateTaskInternalServerError creates a ITAutomationCreateTaskInternalServerError with default headers values
func NewITAutomationCreateTaskInternalServerError() *ITAutomationCreateTaskInternalServerError {
	return &ITAutomationCreateTaskInternalServerError{}
}

/*
ITAutomationCreateTaskInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ITAutomationCreateTaskInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation create task internal server error response has a 2xx status code
func (o *ITAutomationCreateTaskInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation create task internal server error response has a 3xx status code
func (o *ITAutomationCreateTaskInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create task internal server error response has a 4xx status code
func (o *ITAutomationCreateTaskInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation create task internal server error response has a 5xx status code
func (o *ITAutomationCreateTaskInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation create task internal server error response a status code equal to that given
func (o *ITAutomationCreateTaskInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation create task internal server error response
func (o *ITAutomationCreateTaskInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationCreateTaskInternalServerError) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/tasks/v1][%d] iTAutomationCreateTaskInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationCreateTaskInternalServerError) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/tasks/v1][%d] iTAutomationCreateTaskInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationCreateTaskInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationCreateTaskInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
