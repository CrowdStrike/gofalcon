// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationGetExecutionResultsSearchStatusReader is a Reader for the ITAutomationGetExecutionResultsSearchStatus structure.
type ITAutomationGetExecutionResultsSearchStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationGetExecutionResultsSearchStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewITAutomationGetExecutionResultsSearchStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationGetExecutionResultsSearchStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationGetExecutionResultsSearchStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationGetExecutionResultsSearchStatusTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationGetExecutionResultsSearchStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /it-automation/entities/task-execution-results-search/v1] ITAutomationGetExecutionResultsSearchStatus", response, response.Code())
	}
}

// NewITAutomationGetExecutionResultsSearchStatusOK creates a ITAutomationGetExecutionResultsSearchStatusOK with default headers values
func NewITAutomationGetExecutionResultsSearchStatusOK() *ITAutomationGetExecutionResultsSearchStatusOK {
	return &ITAutomationGetExecutionResultsSearchStatusOK{}
}

/*
ITAutomationGetExecutionResultsSearchStatusOK describes a response with status code 200, with default header values.

OK
*/
type ITAutomationGetExecutionResultsSearchStatusOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationSearchStatusResponse
}

// IsSuccess returns true when this i t automation get execution results search status o k response has a 2xx status code
func (o *ITAutomationGetExecutionResultsSearchStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation get execution results search status o k response has a 3xx status code
func (o *ITAutomationGetExecutionResultsSearchStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get execution results search status o k response has a 4xx status code
func (o *ITAutomationGetExecutionResultsSearchStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation get execution results search status o k response has a 5xx status code
func (o *ITAutomationGetExecutionResultsSearchStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get execution results search status o k response a status code equal to that given
func (o *ITAutomationGetExecutionResultsSearchStatusOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the i t automation get execution results search status o k response
func (o *ITAutomationGetExecutionResultsSearchStatusOK) Code() int {
	return 200
}

func (o *ITAutomationGetExecutionResultsSearchStatusOK) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-execution-results-search/v1][%d] iTAutomationGetExecutionResultsSearchStatusOK  %+v", 200, o.Payload)
}

func (o *ITAutomationGetExecutionResultsSearchStatusOK) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-execution-results-search/v1][%d] iTAutomationGetExecutionResultsSearchStatusOK  %+v", 200, o.Payload)
}

func (o *ITAutomationGetExecutionResultsSearchStatusOK) GetPayload() *models.ItautomationSearchStatusResponse {
	return o.Payload
}

func (o *ITAutomationGetExecutionResultsSearchStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationSearchStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetExecutionResultsSearchStatusBadRequest creates a ITAutomationGetExecutionResultsSearchStatusBadRequest with default headers values
func NewITAutomationGetExecutionResultsSearchStatusBadRequest() *ITAutomationGetExecutionResultsSearchStatusBadRequest {
	return &ITAutomationGetExecutionResultsSearchStatusBadRequest{}
}

/*
ITAutomationGetExecutionResultsSearchStatusBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationGetExecutionResultsSearchStatusBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation get execution results search status bad request response has a 2xx status code
func (o *ITAutomationGetExecutionResultsSearchStatusBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get execution results search status bad request response has a 3xx status code
func (o *ITAutomationGetExecutionResultsSearchStatusBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get execution results search status bad request response has a 4xx status code
func (o *ITAutomationGetExecutionResultsSearchStatusBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get execution results search status bad request response has a 5xx status code
func (o *ITAutomationGetExecutionResultsSearchStatusBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get execution results search status bad request response a status code equal to that given
func (o *ITAutomationGetExecutionResultsSearchStatusBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation get execution results search status bad request response
func (o *ITAutomationGetExecutionResultsSearchStatusBadRequest) Code() int {
	return 400
}

func (o *ITAutomationGetExecutionResultsSearchStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-execution-results-search/v1][%d] iTAutomationGetExecutionResultsSearchStatusBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationGetExecutionResultsSearchStatusBadRequest) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-execution-results-search/v1][%d] iTAutomationGetExecutionResultsSearchStatusBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationGetExecutionResultsSearchStatusBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationGetExecutionResultsSearchStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetExecutionResultsSearchStatusForbidden creates a ITAutomationGetExecutionResultsSearchStatusForbidden with default headers values
func NewITAutomationGetExecutionResultsSearchStatusForbidden() *ITAutomationGetExecutionResultsSearchStatusForbidden {
	return &ITAutomationGetExecutionResultsSearchStatusForbidden{}
}

/*
ITAutomationGetExecutionResultsSearchStatusForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationGetExecutionResultsSearchStatusForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation get execution results search status forbidden response has a 2xx status code
func (o *ITAutomationGetExecutionResultsSearchStatusForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get execution results search status forbidden response has a 3xx status code
func (o *ITAutomationGetExecutionResultsSearchStatusForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get execution results search status forbidden response has a 4xx status code
func (o *ITAutomationGetExecutionResultsSearchStatusForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get execution results search status forbidden response has a 5xx status code
func (o *ITAutomationGetExecutionResultsSearchStatusForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get execution results search status forbidden response a status code equal to that given
func (o *ITAutomationGetExecutionResultsSearchStatusForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation get execution results search status forbidden response
func (o *ITAutomationGetExecutionResultsSearchStatusForbidden) Code() int {
	return 403
}

func (o *ITAutomationGetExecutionResultsSearchStatusForbidden) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-execution-results-search/v1][%d] iTAutomationGetExecutionResultsSearchStatusForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationGetExecutionResultsSearchStatusForbidden) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-execution-results-search/v1][%d] iTAutomationGetExecutionResultsSearchStatusForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationGetExecutionResultsSearchStatusForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationGetExecutionResultsSearchStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetExecutionResultsSearchStatusTooManyRequests creates a ITAutomationGetExecutionResultsSearchStatusTooManyRequests with default headers values
func NewITAutomationGetExecutionResultsSearchStatusTooManyRequests() *ITAutomationGetExecutionResultsSearchStatusTooManyRequests {
	return &ITAutomationGetExecutionResultsSearchStatusTooManyRequests{}
}

/*
ITAutomationGetExecutionResultsSearchStatusTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationGetExecutionResultsSearchStatusTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation get execution results search status too many requests response has a 2xx status code
func (o *ITAutomationGetExecutionResultsSearchStatusTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get execution results search status too many requests response has a 3xx status code
func (o *ITAutomationGetExecutionResultsSearchStatusTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get execution results search status too many requests response has a 4xx status code
func (o *ITAutomationGetExecutionResultsSearchStatusTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get execution results search status too many requests response has a 5xx status code
func (o *ITAutomationGetExecutionResultsSearchStatusTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get execution results search status too many requests response a status code equal to that given
func (o *ITAutomationGetExecutionResultsSearchStatusTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation get execution results search status too many requests response
func (o *ITAutomationGetExecutionResultsSearchStatusTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationGetExecutionResultsSearchStatusTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-execution-results-search/v1][%d] iTAutomationGetExecutionResultsSearchStatusTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationGetExecutionResultsSearchStatusTooManyRequests) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-execution-results-search/v1][%d] iTAutomationGetExecutionResultsSearchStatusTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationGetExecutionResultsSearchStatusTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationGetExecutionResultsSearchStatusTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetExecutionResultsSearchStatusInternalServerError creates a ITAutomationGetExecutionResultsSearchStatusInternalServerError with default headers values
func NewITAutomationGetExecutionResultsSearchStatusInternalServerError() *ITAutomationGetExecutionResultsSearchStatusInternalServerError {
	return &ITAutomationGetExecutionResultsSearchStatusInternalServerError{}
}

/*
ITAutomationGetExecutionResultsSearchStatusInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ITAutomationGetExecutionResultsSearchStatusInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation get execution results search status internal server error response has a 2xx status code
func (o *ITAutomationGetExecutionResultsSearchStatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get execution results search status internal server error response has a 3xx status code
func (o *ITAutomationGetExecutionResultsSearchStatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get execution results search status internal server error response has a 4xx status code
func (o *ITAutomationGetExecutionResultsSearchStatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation get execution results search status internal server error response has a 5xx status code
func (o *ITAutomationGetExecutionResultsSearchStatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation get execution results search status internal server error response a status code equal to that given
func (o *ITAutomationGetExecutionResultsSearchStatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation get execution results search status internal server error response
func (o *ITAutomationGetExecutionResultsSearchStatusInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationGetExecutionResultsSearchStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-execution-results-search/v1][%d] iTAutomationGetExecutionResultsSearchStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationGetExecutionResultsSearchStatusInternalServerError) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-execution-results-search/v1][%d] iTAutomationGetExecutionResultsSearchStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationGetExecutionResultsSearchStatusInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationGetExecutionResultsSearchStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
