// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationGetTaskExecutionsByQueryReader is a Reader for the ITAutomationGetTaskExecutionsByQuery structure.
type ITAutomationGetTaskExecutionsByQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationGetTaskExecutionsByQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewITAutomationGetTaskExecutionsByQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationGetTaskExecutionsByQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationGetTaskExecutionsByQueryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationGetTaskExecutionsByQueryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationGetTaskExecutionsByQueryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /it-automation/combined/task-executions/v1] ITAutomationGetTaskExecutionsByQuery", response, response.Code())
	}
}

// NewITAutomationGetTaskExecutionsByQueryOK creates a ITAutomationGetTaskExecutionsByQueryOK with default headers values
func NewITAutomationGetTaskExecutionsByQueryOK() *ITAutomationGetTaskExecutionsByQueryOK {
	return &ITAutomationGetTaskExecutionsByQueryOK{}
}

/*
ITAutomationGetTaskExecutionsByQueryOK describes a response with status code 200, with default header values.

OK
*/
type ITAutomationGetTaskExecutionsByQueryOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationGetTaskExecutionResponse
}

// IsSuccess returns true when this i t automation get task executions by query o k response has a 2xx status code
func (o *ITAutomationGetTaskExecutionsByQueryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation get task executions by query o k response has a 3xx status code
func (o *ITAutomationGetTaskExecutionsByQueryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get task executions by query o k response has a 4xx status code
func (o *ITAutomationGetTaskExecutionsByQueryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation get task executions by query o k response has a 5xx status code
func (o *ITAutomationGetTaskExecutionsByQueryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get task executions by query o k response a status code equal to that given
func (o *ITAutomationGetTaskExecutionsByQueryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the i t automation get task executions by query o k response
func (o *ITAutomationGetTaskExecutionsByQueryOK) Code() int {
	return 200
}

func (o *ITAutomationGetTaskExecutionsByQueryOK) Error() string {
	return fmt.Sprintf("[GET /it-automation/combined/task-executions/v1][%d] iTAutomationGetTaskExecutionsByQueryOK  %+v", 200, o.Payload)
}

func (o *ITAutomationGetTaskExecutionsByQueryOK) String() string {
	return fmt.Sprintf("[GET /it-automation/combined/task-executions/v1][%d] iTAutomationGetTaskExecutionsByQueryOK  %+v", 200, o.Payload)
}

func (o *ITAutomationGetTaskExecutionsByQueryOK) GetPayload() *models.ItautomationGetTaskExecutionResponse {
	return o.Payload
}

func (o *ITAutomationGetTaskExecutionsByQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationGetTaskExecutionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetTaskExecutionsByQueryBadRequest creates a ITAutomationGetTaskExecutionsByQueryBadRequest with default headers values
func NewITAutomationGetTaskExecutionsByQueryBadRequest() *ITAutomationGetTaskExecutionsByQueryBadRequest {
	return &ITAutomationGetTaskExecutionsByQueryBadRequest{}
}

/*
ITAutomationGetTaskExecutionsByQueryBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationGetTaskExecutionsByQueryBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation get task executions by query bad request response has a 2xx status code
func (o *ITAutomationGetTaskExecutionsByQueryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get task executions by query bad request response has a 3xx status code
func (o *ITAutomationGetTaskExecutionsByQueryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get task executions by query bad request response has a 4xx status code
func (o *ITAutomationGetTaskExecutionsByQueryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get task executions by query bad request response has a 5xx status code
func (o *ITAutomationGetTaskExecutionsByQueryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get task executions by query bad request response a status code equal to that given
func (o *ITAutomationGetTaskExecutionsByQueryBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation get task executions by query bad request response
func (o *ITAutomationGetTaskExecutionsByQueryBadRequest) Code() int {
	return 400
}

func (o *ITAutomationGetTaskExecutionsByQueryBadRequest) Error() string {
	return fmt.Sprintf("[GET /it-automation/combined/task-executions/v1][%d] iTAutomationGetTaskExecutionsByQueryBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationGetTaskExecutionsByQueryBadRequest) String() string {
	return fmt.Sprintf("[GET /it-automation/combined/task-executions/v1][%d] iTAutomationGetTaskExecutionsByQueryBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationGetTaskExecutionsByQueryBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationGetTaskExecutionsByQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetTaskExecutionsByQueryForbidden creates a ITAutomationGetTaskExecutionsByQueryForbidden with default headers values
func NewITAutomationGetTaskExecutionsByQueryForbidden() *ITAutomationGetTaskExecutionsByQueryForbidden {
	return &ITAutomationGetTaskExecutionsByQueryForbidden{}
}

/*
ITAutomationGetTaskExecutionsByQueryForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationGetTaskExecutionsByQueryForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation get task executions by query forbidden response has a 2xx status code
func (o *ITAutomationGetTaskExecutionsByQueryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get task executions by query forbidden response has a 3xx status code
func (o *ITAutomationGetTaskExecutionsByQueryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get task executions by query forbidden response has a 4xx status code
func (o *ITAutomationGetTaskExecutionsByQueryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get task executions by query forbidden response has a 5xx status code
func (o *ITAutomationGetTaskExecutionsByQueryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get task executions by query forbidden response a status code equal to that given
func (o *ITAutomationGetTaskExecutionsByQueryForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation get task executions by query forbidden response
func (o *ITAutomationGetTaskExecutionsByQueryForbidden) Code() int {
	return 403
}

func (o *ITAutomationGetTaskExecutionsByQueryForbidden) Error() string {
	return fmt.Sprintf("[GET /it-automation/combined/task-executions/v1][%d] iTAutomationGetTaskExecutionsByQueryForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationGetTaskExecutionsByQueryForbidden) String() string {
	return fmt.Sprintf("[GET /it-automation/combined/task-executions/v1][%d] iTAutomationGetTaskExecutionsByQueryForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationGetTaskExecutionsByQueryForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationGetTaskExecutionsByQueryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetTaskExecutionsByQueryTooManyRequests creates a ITAutomationGetTaskExecutionsByQueryTooManyRequests with default headers values
func NewITAutomationGetTaskExecutionsByQueryTooManyRequests() *ITAutomationGetTaskExecutionsByQueryTooManyRequests {
	return &ITAutomationGetTaskExecutionsByQueryTooManyRequests{}
}

/*
ITAutomationGetTaskExecutionsByQueryTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationGetTaskExecutionsByQueryTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation get task executions by query too many requests response has a 2xx status code
func (o *ITAutomationGetTaskExecutionsByQueryTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get task executions by query too many requests response has a 3xx status code
func (o *ITAutomationGetTaskExecutionsByQueryTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get task executions by query too many requests response has a 4xx status code
func (o *ITAutomationGetTaskExecutionsByQueryTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get task executions by query too many requests response has a 5xx status code
func (o *ITAutomationGetTaskExecutionsByQueryTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get task executions by query too many requests response a status code equal to that given
func (o *ITAutomationGetTaskExecutionsByQueryTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation get task executions by query too many requests response
func (o *ITAutomationGetTaskExecutionsByQueryTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationGetTaskExecutionsByQueryTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /it-automation/combined/task-executions/v1][%d] iTAutomationGetTaskExecutionsByQueryTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationGetTaskExecutionsByQueryTooManyRequests) String() string {
	return fmt.Sprintf("[GET /it-automation/combined/task-executions/v1][%d] iTAutomationGetTaskExecutionsByQueryTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationGetTaskExecutionsByQueryTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationGetTaskExecutionsByQueryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetTaskExecutionsByQueryInternalServerError creates a ITAutomationGetTaskExecutionsByQueryInternalServerError with default headers values
func NewITAutomationGetTaskExecutionsByQueryInternalServerError() *ITAutomationGetTaskExecutionsByQueryInternalServerError {
	return &ITAutomationGetTaskExecutionsByQueryInternalServerError{}
}

/*
ITAutomationGetTaskExecutionsByQueryInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ITAutomationGetTaskExecutionsByQueryInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation get task executions by query internal server error response has a 2xx status code
func (o *ITAutomationGetTaskExecutionsByQueryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get task executions by query internal server error response has a 3xx status code
func (o *ITAutomationGetTaskExecutionsByQueryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get task executions by query internal server error response has a 4xx status code
func (o *ITAutomationGetTaskExecutionsByQueryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation get task executions by query internal server error response has a 5xx status code
func (o *ITAutomationGetTaskExecutionsByQueryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation get task executions by query internal server error response a status code equal to that given
func (o *ITAutomationGetTaskExecutionsByQueryInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation get task executions by query internal server error response
func (o *ITAutomationGetTaskExecutionsByQueryInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationGetTaskExecutionsByQueryInternalServerError) Error() string {
	return fmt.Sprintf("[GET /it-automation/combined/task-executions/v1][%d] iTAutomationGetTaskExecutionsByQueryInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationGetTaskExecutionsByQueryInternalServerError) String() string {
	return fmt.Sprintf("[GET /it-automation/combined/task-executions/v1][%d] iTAutomationGetTaskExecutionsByQueryInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationGetTaskExecutionsByQueryInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationGetTaskExecutionsByQueryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
