// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationSearchScheduledTasksReader is a Reader for the ITAutomationSearchScheduledTasks structure.
type ITAutomationSearchScheduledTasksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationSearchScheduledTasksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewITAutomationSearchScheduledTasksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationSearchScheduledTasksBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationSearchScheduledTasksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationSearchScheduledTasksTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationSearchScheduledTasksInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /it-automation/queries/scheduled-tasks/v1] ITAutomationSearchScheduledTasks", response, response.Code())
	}
}

// NewITAutomationSearchScheduledTasksOK creates a ITAutomationSearchScheduledTasksOK with default headers values
func NewITAutomationSearchScheduledTasksOK() *ITAutomationSearchScheduledTasksOK {
	return &ITAutomationSearchScheduledTasksOK{}
}

/*
ITAutomationSearchScheduledTasksOK describes a response with status code 200, with default header values.

OK
*/
type ITAutomationSearchScheduledTasksOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationSearchScheduledTaskResponse
}

// IsSuccess returns true when this i t automation search scheduled tasks o k response has a 2xx status code
func (o *ITAutomationSearchScheduledTasksOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation search scheduled tasks o k response has a 3xx status code
func (o *ITAutomationSearchScheduledTasksOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search scheduled tasks o k response has a 4xx status code
func (o *ITAutomationSearchScheduledTasksOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation search scheduled tasks o k response has a 5xx status code
func (o *ITAutomationSearchScheduledTasksOK) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation search scheduled tasks o k response a status code equal to that given
func (o *ITAutomationSearchScheduledTasksOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the i t automation search scheduled tasks o k response
func (o *ITAutomationSearchScheduledTasksOK) Code() int {
	return 200
}

func (o *ITAutomationSearchScheduledTasksOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/scheduled-tasks/v1][%d] iTAutomationSearchScheduledTasksOK %s", 200, payload)
}

func (o *ITAutomationSearchScheduledTasksOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/scheduled-tasks/v1][%d] iTAutomationSearchScheduledTasksOK %s", 200, payload)
}

func (o *ITAutomationSearchScheduledTasksOK) GetPayload() *models.ItautomationSearchScheduledTaskResponse {
	return o.Payload
}

func (o *ITAutomationSearchScheduledTasksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationSearchScheduledTaskResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationSearchScheduledTasksBadRequest creates a ITAutomationSearchScheduledTasksBadRequest with default headers values
func NewITAutomationSearchScheduledTasksBadRequest() *ITAutomationSearchScheduledTasksBadRequest {
	return &ITAutomationSearchScheduledTasksBadRequest{}
}

/*
ITAutomationSearchScheduledTasksBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationSearchScheduledTasksBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation search scheduled tasks bad request response has a 2xx status code
func (o *ITAutomationSearchScheduledTasksBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation search scheduled tasks bad request response has a 3xx status code
func (o *ITAutomationSearchScheduledTasksBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search scheduled tasks bad request response has a 4xx status code
func (o *ITAutomationSearchScheduledTasksBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation search scheduled tasks bad request response has a 5xx status code
func (o *ITAutomationSearchScheduledTasksBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation search scheduled tasks bad request response a status code equal to that given
func (o *ITAutomationSearchScheduledTasksBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation search scheduled tasks bad request response
func (o *ITAutomationSearchScheduledTasksBadRequest) Code() int {
	return 400
}

func (o *ITAutomationSearchScheduledTasksBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/scheduled-tasks/v1][%d] iTAutomationSearchScheduledTasksBadRequest %s", 400, payload)
}

func (o *ITAutomationSearchScheduledTasksBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/scheduled-tasks/v1][%d] iTAutomationSearchScheduledTasksBadRequest %s", 400, payload)
}

func (o *ITAutomationSearchScheduledTasksBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationSearchScheduledTasksBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationSearchScheduledTasksForbidden creates a ITAutomationSearchScheduledTasksForbidden with default headers values
func NewITAutomationSearchScheduledTasksForbidden() *ITAutomationSearchScheduledTasksForbidden {
	return &ITAutomationSearchScheduledTasksForbidden{}
}

/*
ITAutomationSearchScheduledTasksForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationSearchScheduledTasksForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation search scheduled tasks forbidden response has a 2xx status code
func (o *ITAutomationSearchScheduledTasksForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation search scheduled tasks forbidden response has a 3xx status code
func (o *ITAutomationSearchScheduledTasksForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search scheduled tasks forbidden response has a 4xx status code
func (o *ITAutomationSearchScheduledTasksForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation search scheduled tasks forbidden response has a 5xx status code
func (o *ITAutomationSearchScheduledTasksForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation search scheduled tasks forbidden response a status code equal to that given
func (o *ITAutomationSearchScheduledTasksForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation search scheduled tasks forbidden response
func (o *ITAutomationSearchScheduledTasksForbidden) Code() int {
	return 403
}

func (o *ITAutomationSearchScheduledTasksForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/scheduled-tasks/v1][%d] iTAutomationSearchScheduledTasksForbidden %s", 403, payload)
}

func (o *ITAutomationSearchScheduledTasksForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/scheduled-tasks/v1][%d] iTAutomationSearchScheduledTasksForbidden %s", 403, payload)
}

func (o *ITAutomationSearchScheduledTasksForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationSearchScheduledTasksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationSearchScheduledTasksTooManyRequests creates a ITAutomationSearchScheduledTasksTooManyRequests with default headers values
func NewITAutomationSearchScheduledTasksTooManyRequests() *ITAutomationSearchScheduledTasksTooManyRequests {
	return &ITAutomationSearchScheduledTasksTooManyRequests{}
}

/*
ITAutomationSearchScheduledTasksTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationSearchScheduledTasksTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation search scheduled tasks too many requests response has a 2xx status code
func (o *ITAutomationSearchScheduledTasksTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation search scheduled tasks too many requests response has a 3xx status code
func (o *ITAutomationSearchScheduledTasksTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search scheduled tasks too many requests response has a 4xx status code
func (o *ITAutomationSearchScheduledTasksTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation search scheduled tasks too many requests response has a 5xx status code
func (o *ITAutomationSearchScheduledTasksTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation search scheduled tasks too many requests response a status code equal to that given
func (o *ITAutomationSearchScheduledTasksTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation search scheduled tasks too many requests response
func (o *ITAutomationSearchScheduledTasksTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationSearchScheduledTasksTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/scheduled-tasks/v1][%d] iTAutomationSearchScheduledTasksTooManyRequests %s", 429, payload)
}

func (o *ITAutomationSearchScheduledTasksTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/scheduled-tasks/v1][%d] iTAutomationSearchScheduledTasksTooManyRequests %s", 429, payload)
}

func (o *ITAutomationSearchScheduledTasksTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationSearchScheduledTasksTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationSearchScheduledTasksInternalServerError creates a ITAutomationSearchScheduledTasksInternalServerError with default headers values
func NewITAutomationSearchScheduledTasksInternalServerError() *ITAutomationSearchScheduledTasksInternalServerError {
	return &ITAutomationSearchScheduledTasksInternalServerError{}
}

/*
ITAutomationSearchScheduledTasksInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ITAutomationSearchScheduledTasksInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation search scheduled tasks internal server error response has a 2xx status code
func (o *ITAutomationSearchScheduledTasksInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation search scheduled tasks internal server error response has a 3xx status code
func (o *ITAutomationSearchScheduledTasksInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search scheduled tasks internal server error response has a 4xx status code
func (o *ITAutomationSearchScheduledTasksInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation search scheduled tasks internal server error response has a 5xx status code
func (o *ITAutomationSearchScheduledTasksInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation search scheduled tasks internal server error response a status code equal to that given
func (o *ITAutomationSearchScheduledTasksInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation search scheduled tasks internal server error response
func (o *ITAutomationSearchScheduledTasksInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationSearchScheduledTasksInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/scheduled-tasks/v1][%d] iTAutomationSearchScheduledTasksInternalServerError %s", 500, payload)
}

func (o *ITAutomationSearchScheduledTasksInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/scheduled-tasks/v1][%d] iTAutomationSearchScheduledTasksInternalServerError %s", 500, payload)
}

func (o *ITAutomationSearchScheduledTasksInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationSearchScheduledTasksInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
