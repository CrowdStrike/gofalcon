// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationRunLiveQueryReader is a Reader for the ITAutomationRunLiveQuery structure.
type ITAutomationRunLiveQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationRunLiveQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewITAutomationRunLiveQueryCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationRunLiveQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationRunLiveQueryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationRunLiveQueryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationRunLiveQueryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /it-automation/entities/live-query-execution/v1] ITAutomationRunLiveQuery", response, response.Code())
	}
}

// NewITAutomationRunLiveQueryCreated creates a ITAutomationRunLiveQueryCreated with default headers values
func NewITAutomationRunLiveQueryCreated() *ITAutomationRunLiveQueryCreated {
	return &ITAutomationRunLiveQueryCreated{}
}

/*
ITAutomationRunLiveQueryCreated describes a response with status code 201, with default header values.

Created
*/
type ITAutomationRunLiveQueryCreated struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationStartTaskExecutionResponse
}

// IsSuccess returns true when this i t automation run live query created response has a 2xx status code
func (o *ITAutomationRunLiveQueryCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation run live query created response has a 3xx status code
func (o *ITAutomationRunLiveQueryCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation run live query created response has a 4xx status code
func (o *ITAutomationRunLiveQueryCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation run live query created response has a 5xx status code
func (o *ITAutomationRunLiveQueryCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation run live query created response a status code equal to that given
func (o *ITAutomationRunLiveQueryCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the i t automation run live query created response
func (o *ITAutomationRunLiveQueryCreated) Code() int {
	return 201
}

func (o *ITAutomationRunLiveQueryCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/live-query-execution/v1][%d] iTAutomationRunLiveQueryCreated %s", 201, payload)
}

func (o *ITAutomationRunLiveQueryCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/live-query-execution/v1][%d] iTAutomationRunLiveQueryCreated %s", 201, payload)
}

func (o *ITAutomationRunLiveQueryCreated) GetPayload() *models.ItautomationStartTaskExecutionResponse {
	return o.Payload
}

func (o *ITAutomationRunLiveQueryCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationStartTaskExecutionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationRunLiveQueryBadRequest creates a ITAutomationRunLiveQueryBadRequest with default headers values
func NewITAutomationRunLiveQueryBadRequest() *ITAutomationRunLiveQueryBadRequest {
	return &ITAutomationRunLiveQueryBadRequest{}
}

/*
ITAutomationRunLiveQueryBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationRunLiveQueryBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation run live query bad request response has a 2xx status code
func (o *ITAutomationRunLiveQueryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation run live query bad request response has a 3xx status code
func (o *ITAutomationRunLiveQueryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation run live query bad request response has a 4xx status code
func (o *ITAutomationRunLiveQueryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation run live query bad request response has a 5xx status code
func (o *ITAutomationRunLiveQueryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation run live query bad request response a status code equal to that given
func (o *ITAutomationRunLiveQueryBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation run live query bad request response
func (o *ITAutomationRunLiveQueryBadRequest) Code() int {
	return 400
}

func (o *ITAutomationRunLiveQueryBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/live-query-execution/v1][%d] iTAutomationRunLiveQueryBadRequest %s", 400, payload)
}

func (o *ITAutomationRunLiveQueryBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/live-query-execution/v1][%d] iTAutomationRunLiveQueryBadRequest %s", 400, payload)
}

func (o *ITAutomationRunLiveQueryBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationRunLiveQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationRunLiveQueryForbidden creates a ITAutomationRunLiveQueryForbidden with default headers values
func NewITAutomationRunLiveQueryForbidden() *ITAutomationRunLiveQueryForbidden {
	return &ITAutomationRunLiveQueryForbidden{}
}

/*
ITAutomationRunLiveQueryForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationRunLiveQueryForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation run live query forbidden response has a 2xx status code
func (o *ITAutomationRunLiveQueryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation run live query forbidden response has a 3xx status code
func (o *ITAutomationRunLiveQueryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation run live query forbidden response has a 4xx status code
func (o *ITAutomationRunLiveQueryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation run live query forbidden response has a 5xx status code
func (o *ITAutomationRunLiveQueryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation run live query forbidden response a status code equal to that given
func (o *ITAutomationRunLiveQueryForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation run live query forbidden response
func (o *ITAutomationRunLiveQueryForbidden) Code() int {
	return 403
}

func (o *ITAutomationRunLiveQueryForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/live-query-execution/v1][%d] iTAutomationRunLiveQueryForbidden %s", 403, payload)
}

func (o *ITAutomationRunLiveQueryForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/live-query-execution/v1][%d] iTAutomationRunLiveQueryForbidden %s", 403, payload)
}

func (o *ITAutomationRunLiveQueryForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationRunLiveQueryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationRunLiveQueryTooManyRequests creates a ITAutomationRunLiveQueryTooManyRequests with default headers values
func NewITAutomationRunLiveQueryTooManyRequests() *ITAutomationRunLiveQueryTooManyRequests {
	return &ITAutomationRunLiveQueryTooManyRequests{}
}

/*
ITAutomationRunLiveQueryTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationRunLiveQueryTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation run live query too many requests response has a 2xx status code
func (o *ITAutomationRunLiveQueryTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation run live query too many requests response has a 3xx status code
func (o *ITAutomationRunLiveQueryTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation run live query too many requests response has a 4xx status code
func (o *ITAutomationRunLiveQueryTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation run live query too many requests response has a 5xx status code
func (o *ITAutomationRunLiveQueryTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation run live query too many requests response a status code equal to that given
func (o *ITAutomationRunLiveQueryTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation run live query too many requests response
func (o *ITAutomationRunLiveQueryTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationRunLiveQueryTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/live-query-execution/v1][%d] iTAutomationRunLiveQueryTooManyRequests %s", 429, payload)
}

func (o *ITAutomationRunLiveQueryTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/live-query-execution/v1][%d] iTAutomationRunLiveQueryTooManyRequests %s", 429, payload)
}

func (o *ITAutomationRunLiveQueryTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationRunLiveQueryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationRunLiveQueryInternalServerError creates a ITAutomationRunLiveQueryInternalServerError with default headers values
func NewITAutomationRunLiveQueryInternalServerError() *ITAutomationRunLiveQueryInternalServerError {
	return &ITAutomationRunLiveQueryInternalServerError{}
}

/*
ITAutomationRunLiveQueryInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ITAutomationRunLiveQueryInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation run live query internal server error response has a 2xx status code
func (o *ITAutomationRunLiveQueryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation run live query internal server error response has a 3xx status code
func (o *ITAutomationRunLiveQueryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation run live query internal server error response has a 4xx status code
func (o *ITAutomationRunLiveQueryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation run live query internal server error response has a 5xx status code
func (o *ITAutomationRunLiveQueryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation run live query internal server error response a status code equal to that given
func (o *ITAutomationRunLiveQueryInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation run live query internal server error response
func (o *ITAutomationRunLiveQueryInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationRunLiveQueryInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/live-query-execution/v1][%d] iTAutomationRunLiveQueryInternalServerError %s", 500, payload)
}

func (o *ITAutomationRunLiveQueryInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/live-query-execution/v1][%d] iTAutomationRunLiveQueryInternalServerError %s", 500, payload)
}

func (o *ITAutomationRunLiveQueryInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationRunLiveQueryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
