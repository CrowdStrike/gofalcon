// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationGetAssociatedTasksReader is a Reader for the ITAutomationGetAssociatedTasks structure.
type ITAutomationGetAssociatedTasksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationGetAssociatedTasksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewITAutomationGetAssociatedTasksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationGetAssociatedTasksBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationGetAssociatedTasksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationGetAssociatedTasksTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationGetAssociatedTasksInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /it-automation/combined/associated-tasks/v1] ITAutomationGetAssociatedTasks", response, response.Code())
	}
}

// NewITAutomationGetAssociatedTasksOK creates a ITAutomationGetAssociatedTasksOK with default headers values
func NewITAutomationGetAssociatedTasksOK() *ITAutomationGetAssociatedTasksOK {
	return &ITAutomationGetAssociatedTasksOK{}
}

/*
ITAutomationGetAssociatedTasksOK describes a response with status code 200, with default header values.

OK
*/
type ITAutomationGetAssociatedTasksOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationFileTaskAssociationResponse
}

// IsSuccess returns true when this i t automation get associated tasks o k response has a 2xx status code
func (o *ITAutomationGetAssociatedTasksOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation get associated tasks o k response has a 3xx status code
func (o *ITAutomationGetAssociatedTasksOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get associated tasks o k response has a 4xx status code
func (o *ITAutomationGetAssociatedTasksOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation get associated tasks o k response has a 5xx status code
func (o *ITAutomationGetAssociatedTasksOK) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get associated tasks o k response a status code equal to that given
func (o *ITAutomationGetAssociatedTasksOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the i t automation get associated tasks o k response
func (o *ITAutomationGetAssociatedTasksOK) Code() int {
	return 200
}

func (o *ITAutomationGetAssociatedTasksOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/combined/associated-tasks/v1][%d] iTAutomationGetAssociatedTasksOK %s", 200, payload)
}

func (o *ITAutomationGetAssociatedTasksOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/combined/associated-tasks/v1][%d] iTAutomationGetAssociatedTasksOK %s", 200, payload)
}

func (o *ITAutomationGetAssociatedTasksOK) GetPayload() *models.ItautomationFileTaskAssociationResponse {
	return o.Payload
}

func (o *ITAutomationGetAssociatedTasksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationFileTaskAssociationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationGetAssociatedTasksBadRequest creates a ITAutomationGetAssociatedTasksBadRequest with default headers values
func NewITAutomationGetAssociatedTasksBadRequest() *ITAutomationGetAssociatedTasksBadRequest {
	return &ITAutomationGetAssociatedTasksBadRequest{}
}

/*
ITAutomationGetAssociatedTasksBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationGetAssociatedTasksBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation get associated tasks bad request response has a 2xx status code
func (o *ITAutomationGetAssociatedTasksBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get associated tasks bad request response has a 3xx status code
func (o *ITAutomationGetAssociatedTasksBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get associated tasks bad request response has a 4xx status code
func (o *ITAutomationGetAssociatedTasksBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get associated tasks bad request response has a 5xx status code
func (o *ITAutomationGetAssociatedTasksBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get associated tasks bad request response a status code equal to that given
func (o *ITAutomationGetAssociatedTasksBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation get associated tasks bad request response
func (o *ITAutomationGetAssociatedTasksBadRequest) Code() int {
	return 400
}

func (o *ITAutomationGetAssociatedTasksBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/combined/associated-tasks/v1][%d] iTAutomationGetAssociatedTasksBadRequest %s", 400, payload)
}

func (o *ITAutomationGetAssociatedTasksBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/combined/associated-tasks/v1][%d] iTAutomationGetAssociatedTasksBadRequest %s", 400, payload)
}

func (o *ITAutomationGetAssociatedTasksBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationGetAssociatedTasksBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationGetAssociatedTasksForbidden creates a ITAutomationGetAssociatedTasksForbidden with default headers values
func NewITAutomationGetAssociatedTasksForbidden() *ITAutomationGetAssociatedTasksForbidden {
	return &ITAutomationGetAssociatedTasksForbidden{}
}

/*
ITAutomationGetAssociatedTasksForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationGetAssociatedTasksForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation get associated tasks forbidden response has a 2xx status code
func (o *ITAutomationGetAssociatedTasksForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get associated tasks forbidden response has a 3xx status code
func (o *ITAutomationGetAssociatedTasksForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get associated tasks forbidden response has a 4xx status code
func (o *ITAutomationGetAssociatedTasksForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get associated tasks forbidden response has a 5xx status code
func (o *ITAutomationGetAssociatedTasksForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get associated tasks forbidden response a status code equal to that given
func (o *ITAutomationGetAssociatedTasksForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation get associated tasks forbidden response
func (o *ITAutomationGetAssociatedTasksForbidden) Code() int {
	return 403
}

func (o *ITAutomationGetAssociatedTasksForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/combined/associated-tasks/v1][%d] iTAutomationGetAssociatedTasksForbidden %s", 403, payload)
}

func (o *ITAutomationGetAssociatedTasksForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/combined/associated-tasks/v1][%d] iTAutomationGetAssociatedTasksForbidden %s", 403, payload)
}

func (o *ITAutomationGetAssociatedTasksForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationGetAssociatedTasksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationGetAssociatedTasksTooManyRequests creates a ITAutomationGetAssociatedTasksTooManyRequests with default headers values
func NewITAutomationGetAssociatedTasksTooManyRequests() *ITAutomationGetAssociatedTasksTooManyRequests {
	return &ITAutomationGetAssociatedTasksTooManyRequests{}
}

/*
ITAutomationGetAssociatedTasksTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationGetAssociatedTasksTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation get associated tasks too many requests response has a 2xx status code
func (o *ITAutomationGetAssociatedTasksTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get associated tasks too many requests response has a 3xx status code
func (o *ITAutomationGetAssociatedTasksTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get associated tasks too many requests response has a 4xx status code
func (o *ITAutomationGetAssociatedTasksTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get associated tasks too many requests response has a 5xx status code
func (o *ITAutomationGetAssociatedTasksTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get associated tasks too many requests response a status code equal to that given
func (o *ITAutomationGetAssociatedTasksTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation get associated tasks too many requests response
func (o *ITAutomationGetAssociatedTasksTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationGetAssociatedTasksTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/combined/associated-tasks/v1][%d] iTAutomationGetAssociatedTasksTooManyRequests %s", 429, payload)
}

func (o *ITAutomationGetAssociatedTasksTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/combined/associated-tasks/v1][%d] iTAutomationGetAssociatedTasksTooManyRequests %s", 429, payload)
}

func (o *ITAutomationGetAssociatedTasksTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationGetAssociatedTasksTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationGetAssociatedTasksInternalServerError creates a ITAutomationGetAssociatedTasksInternalServerError with default headers values
func NewITAutomationGetAssociatedTasksInternalServerError() *ITAutomationGetAssociatedTasksInternalServerError {
	return &ITAutomationGetAssociatedTasksInternalServerError{}
}

/*
ITAutomationGetAssociatedTasksInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ITAutomationGetAssociatedTasksInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation get associated tasks internal server error response has a 2xx status code
func (o *ITAutomationGetAssociatedTasksInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get associated tasks internal server error response has a 3xx status code
func (o *ITAutomationGetAssociatedTasksInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get associated tasks internal server error response has a 4xx status code
func (o *ITAutomationGetAssociatedTasksInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation get associated tasks internal server error response has a 5xx status code
func (o *ITAutomationGetAssociatedTasksInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation get associated tasks internal server error response a status code equal to that given
func (o *ITAutomationGetAssociatedTasksInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation get associated tasks internal server error response
func (o *ITAutomationGetAssociatedTasksInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationGetAssociatedTasksInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/combined/associated-tasks/v1][%d] iTAutomationGetAssociatedTasksInternalServerError %s", 500, payload)
}

func (o *ITAutomationGetAssociatedTasksInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/combined/associated-tasks/v1][%d] iTAutomationGetAssociatedTasksInternalServerError %s", 500, payload)
}

func (o *ITAutomationGetAssociatedTasksInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationGetAssociatedTasksInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
