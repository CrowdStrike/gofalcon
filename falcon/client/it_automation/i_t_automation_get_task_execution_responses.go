// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationGetTaskExecutionReader is a Reader for the ITAutomationGetTaskExecution structure.
type ITAutomationGetTaskExecutionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationGetTaskExecutionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewITAutomationGetTaskExecutionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationGetTaskExecutionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationGetTaskExecutionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationGetTaskExecutionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationGetTaskExecutionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /it-automation/entities/task-executions/v1] ITAutomationGetTaskExecution", response, response.Code())
	}
}

// NewITAutomationGetTaskExecutionOK creates a ITAutomationGetTaskExecutionOK with default headers values
func NewITAutomationGetTaskExecutionOK() *ITAutomationGetTaskExecutionOK {
	return &ITAutomationGetTaskExecutionOK{}
}

/*
ITAutomationGetTaskExecutionOK describes a response with status code 200, with default header values.

OK
*/
type ITAutomationGetTaskExecutionOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationGetTaskExecutionResponse
}

// IsSuccess returns true when this i t automation get task execution o k response has a 2xx status code
func (o *ITAutomationGetTaskExecutionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation get task execution o k response has a 3xx status code
func (o *ITAutomationGetTaskExecutionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get task execution o k response has a 4xx status code
func (o *ITAutomationGetTaskExecutionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation get task execution o k response has a 5xx status code
func (o *ITAutomationGetTaskExecutionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get task execution o k response a status code equal to that given
func (o *ITAutomationGetTaskExecutionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the i t automation get task execution o k response
func (o *ITAutomationGetTaskExecutionOK) Code() int {
	return 200
}

func (o *ITAutomationGetTaskExecutionOK) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-executions/v1][%d] iTAutomationGetTaskExecutionOK  %+v", 200, o.Payload)
}

func (o *ITAutomationGetTaskExecutionOK) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-executions/v1][%d] iTAutomationGetTaskExecutionOK  %+v", 200, o.Payload)
}

func (o *ITAutomationGetTaskExecutionOK) GetPayload() *models.ItautomationGetTaskExecutionResponse {
	return o.Payload
}

func (o *ITAutomationGetTaskExecutionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationGetTaskExecutionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetTaskExecutionBadRequest creates a ITAutomationGetTaskExecutionBadRequest with default headers values
func NewITAutomationGetTaskExecutionBadRequest() *ITAutomationGetTaskExecutionBadRequest {
	return &ITAutomationGetTaskExecutionBadRequest{}
}

/*
ITAutomationGetTaskExecutionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationGetTaskExecutionBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation get task execution bad request response has a 2xx status code
func (o *ITAutomationGetTaskExecutionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get task execution bad request response has a 3xx status code
func (o *ITAutomationGetTaskExecutionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get task execution bad request response has a 4xx status code
func (o *ITAutomationGetTaskExecutionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get task execution bad request response has a 5xx status code
func (o *ITAutomationGetTaskExecutionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get task execution bad request response a status code equal to that given
func (o *ITAutomationGetTaskExecutionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation get task execution bad request response
func (o *ITAutomationGetTaskExecutionBadRequest) Code() int {
	return 400
}

func (o *ITAutomationGetTaskExecutionBadRequest) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-executions/v1][%d] iTAutomationGetTaskExecutionBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationGetTaskExecutionBadRequest) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-executions/v1][%d] iTAutomationGetTaskExecutionBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationGetTaskExecutionBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationGetTaskExecutionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetTaskExecutionForbidden creates a ITAutomationGetTaskExecutionForbidden with default headers values
func NewITAutomationGetTaskExecutionForbidden() *ITAutomationGetTaskExecutionForbidden {
	return &ITAutomationGetTaskExecutionForbidden{}
}

/*
ITAutomationGetTaskExecutionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationGetTaskExecutionForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation get task execution forbidden response has a 2xx status code
func (o *ITAutomationGetTaskExecutionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get task execution forbidden response has a 3xx status code
func (o *ITAutomationGetTaskExecutionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get task execution forbidden response has a 4xx status code
func (o *ITAutomationGetTaskExecutionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get task execution forbidden response has a 5xx status code
func (o *ITAutomationGetTaskExecutionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get task execution forbidden response a status code equal to that given
func (o *ITAutomationGetTaskExecutionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation get task execution forbidden response
func (o *ITAutomationGetTaskExecutionForbidden) Code() int {
	return 403
}

func (o *ITAutomationGetTaskExecutionForbidden) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-executions/v1][%d] iTAutomationGetTaskExecutionForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationGetTaskExecutionForbidden) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-executions/v1][%d] iTAutomationGetTaskExecutionForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationGetTaskExecutionForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationGetTaskExecutionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetTaskExecutionTooManyRequests creates a ITAutomationGetTaskExecutionTooManyRequests with default headers values
func NewITAutomationGetTaskExecutionTooManyRequests() *ITAutomationGetTaskExecutionTooManyRequests {
	return &ITAutomationGetTaskExecutionTooManyRequests{}
}

/*
ITAutomationGetTaskExecutionTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationGetTaskExecutionTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation get task execution too many requests response has a 2xx status code
func (o *ITAutomationGetTaskExecutionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get task execution too many requests response has a 3xx status code
func (o *ITAutomationGetTaskExecutionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get task execution too many requests response has a 4xx status code
func (o *ITAutomationGetTaskExecutionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get task execution too many requests response has a 5xx status code
func (o *ITAutomationGetTaskExecutionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get task execution too many requests response a status code equal to that given
func (o *ITAutomationGetTaskExecutionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation get task execution too many requests response
func (o *ITAutomationGetTaskExecutionTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationGetTaskExecutionTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-executions/v1][%d] iTAutomationGetTaskExecutionTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationGetTaskExecutionTooManyRequests) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-executions/v1][%d] iTAutomationGetTaskExecutionTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationGetTaskExecutionTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationGetTaskExecutionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetTaskExecutionInternalServerError creates a ITAutomationGetTaskExecutionInternalServerError with default headers values
func NewITAutomationGetTaskExecutionInternalServerError() *ITAutomationGetTaskExecutionInternalServerError {
	return &ITAutomationGetTaskExecutionInternalServerError{}
}

/*
ITAutomationGetTaskExecutionInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ITAutomationGetTaskExecutionInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation get task execution internal server error response has a 2xx status code
func (o *ITAutomationGetTaskExecutionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get task execution internal server error response has a 3xx status code
func (o *ITAutomationGetTaskExecutionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get task execution internal server error response has a 4xx status code
func (o *ITAutomationGetTaskExecutionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation get task execution internal server error response has a 5xx status code
func (o *ITAutomationGetTaskExecutionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation get task execution internal server error response a status code equal to that given
func (o *ITAutomationGetTaskExecutionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation get task execution internal server error response
func (o *ITAutomationGetTaskExecutionInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationGetTaskExecutionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-executions/v1][%d] iTAutomationGetTaskExecutionInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationGetTaskExecutionInternalServerError) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/task-executions/v1][%d] iTAutomationGetTaskExecutionInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationGetTaskExecutionInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationGetTaskExecutionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
