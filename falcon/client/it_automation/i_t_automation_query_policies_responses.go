// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationQueryPoliciesReader is a Reader for the ITAutomationQueryPolicies structure.
type ITAutomationQueryPoliciesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationQueryPoliciesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewITAutomationQueryPoliciesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationQueryPoliciesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationQueryPoliciesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationQueryPoliciesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationQueryPoliciesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /it-automation/queries/policies/v1] ITAutomationQueryPolicies", response, response.Code())
	}
}

// NewITAutomationQueryPoliciesOK creates a ITAutomationQueryPoliciesOK with default headers values
func NewITAutomationQueryPoliciesOK() *ITAutomationQueryPoliciesOK {
	return &ITAutomationQueryPoliciesOK{}
}

/*
ITAutomationQueryPoliciesOK describes a response with status code 200, with default header values.

OK
*/
type ITAutomationQueryPoliciesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationQueryPolicyResponse
}

// IsSuccess returns true when this i t automation query policies o k response has a 2xx status code
func (o *ITAutomationQueryPoliciesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation query policies o k response has a 3xx status code
func (o *ITAutomationQueryPoliciesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation query policies o k response has a 4xx status code
func (o *ITAutomationQueryPoliciesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation query policies o k response has a 5xx status code
func (o *ITAutomationQueryPoliciesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation query policies o k response a status code equal to that given
func (o *ITAutomationQueryPoliciesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the i t automation query policies o k response
func (o *ITAutomationQueryPoliciesOK) Code() int {
	return 200
}

func (o *ITAutomationQueryPoliciesOK) Error() string {
	return fmt.Sprintf("[GET /it-automation/queries/policies/v1][%d] iTAutomationQueryPoliciesOK  %+v", 200, o.Payload)
}

func (o *ITAutomationQueryPoliciesOK) String() string {
	return fmt.Sprintf("[GET /it-automation/queries/policies/v1][%d] iTAutomationQueryPoliciesOK  %+v", 200, o.Payload)
}

func (o *ITAutomationQueryPoliciesOK) GetPayload() *models.ItautomationQueryPolicyResponse {
	return o.Payload
}

func (o *ITAutomationQueryPoliciesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationQueryPolicyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationQueryPoliciesBadRequest creates a ITAutomationQueryPoliciesBadRequest with default headers values
func NewITAutomationQueryPoliciesBadRequest() *ITAutomationQueryPoliciesBadRequest {
	return &ITAutomationQueryPoliciesBadRequest{}
}

/*
ITAutomationQueryPoliciesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationQueryPoliciesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation query policies bad request response has a 2xx status code
func (o *ITAutomationQueryPoliciesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation query policies bad request response has a 3xx status code
func (o *ITAutomationQueryPoliciesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation query policies bad request response has a 4xx status code
func (o *ITAutomationQueryPoliciesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation query policies bad request response has a 5xx status code
func (o *ITAutomationQueryPoliciesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation query policies bad request response a status code equal to that given
func (o *ITAutomationQueryPoliciesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation query policies bad request response
func (o *ITAutomationQueryPoliciesBadRequest) Code() int {
	return 400
}

func (o *ITAutomationQueryPoliciesBadRequest) Error() string {
	return fmt.Sprintf("[GET /it-automation/queries/policies/v1][%d] iTAutomationQueryPoliciesBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationQueryPoliciesBadRequest) String() string {
	return fmt.Sprintf("[GET /it-automation/queries/policies/v1][%d] iTAutomationQueryPoliciesBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationQueryPoliciesBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationQueryPoliciesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationQueryPoliciesForbidden creates a ITAutomationQueryPoliciesForbidden with default headers values
func NewITAutomationQueryPoliciesForbidden() *ITAutomationQueryPoliciesForbidden {
	return &ITAutomationQueryPoliciesForbidden{}
}

/*
ITAutomationQueryPoliciesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationQueryPoliciesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation query policies forbidden response has a 2xx status code
func (o *ITAutomationQueryPoliciesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation query policies forbidden response has a 3xx status code
func (o *ITAutomationQueryPoliciesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation query policies forbidden response has a 4xx status code
func (o *ITAutomationQueryPoliciesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation query policies forbidden response has a 5xx status code
func (o *ITAutomationQueryPoliciesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation query policies forbidden response a status code equal to that given
func (o *ITAutomationQueryPoliciesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation query policies forbidden response
func (o *ITAutomationQueryPoliciesForbidden) Code() int {
	return 403
}

func (o *ITAutomationQueryPoliciesForbidden) Error() string {
	return fmt.Sprintf("[GET /it-automation/queries/policies/v1][%d] iTAutomationQueryPoliciesForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationQueryPoliciesForbidden) String() string {
	return fmt.Sprintf("[GET /it-automation/queries/policies/v1][%d] iTAutomationQueryPoliciesForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationQueryPoliciesForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationQueryPoliciesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationQueryPoliciesTooManyRequests creates a ITAutomationQueryPoliciesTooManyRequests with default headers values
func NewITAutomationQueryPoliciesTooManyRequests() *ITAutomationQueryPoliciesTooManyRequests {
	return &ITAutomationQueryPoliciesTooManyRequests{}
}

/*
ITAutomationQueryPoliciesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationQueryPoliciesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation query policies too many requests response has a 2xx status code
func (o *ITAutomationQueryPoliciesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation query policies too many requests response has a 3xx status code
func (o *ITAutomationQueryPoliciesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation query policies too many requests response has a 4xx status code
func (o *ITAutomationQueryPoliciesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation query policies too many requests response has a 5xx status code
func (o *ITAutomationQueryPoliciesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation query policies too many requests response a status code equal to that given
func (o *ITAutomationQueryPoliciesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation query policies too many requests response
func (o *ITAutomationQueryPoliciesTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationQueryPoliciesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /it-automation/queries/policies/v1][%d] iTAutomationQueryPoliciesTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationQueryPoliciesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /it-automation/queries/policies/v1][%d] iTAutomationQueryPoliciesTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationQueryPoliciesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationQueryPoliciesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationQueryPoliciesInternalServerError creates a ITAutomationQueryPoliciesInternalServerError with default headers values
func NewITAutomationQueryPoliciesInternalServerError() *ITAutomationQueryPoliciesInternalServerError {
	return &ITAutomationQueryPoliciesInternalServerError{}
}

/*
ITAutomationQueryPoliciesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ITAutomationQueryPoliciesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation query policies internal server error response has a 2xx status code
func (o *ITAutomationQueryPoliciesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation query policies internal server error response has a 3xx status code
func (o *ITAutomationQueryPoliciesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation query policies internal server error response has a 4xx status code
func (o *ITAutomationQueryPoliciesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation query policies internal server error response has a 5xx status code
func (o *ITAutomationQueryPoliciesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation query policies internal server error response a status code equal to that given
func (o *ITAutomationQueryPoliciesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation query policies internal server error response
func (o *ITAutomationQueryPoliciesInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationQueryPoliciesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /it-automation/queries/policies/v1][%d] iTAutomationQueryPoliciesInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationQueryPoliciesInternalServerError) String() string {
	return fmt.Sprintf("[GET /it-automation/queries/policies/v1][%d] iTAutomationQueryPoliciesInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationQueryPoliciesInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationQueryPoliciesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
