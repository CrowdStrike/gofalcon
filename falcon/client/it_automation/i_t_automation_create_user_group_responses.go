// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationCreateUserGroupReader is a Reader for the ITAutomationCreateUserGroup structure.
type ITAutomationCreateUserGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationCreateUserGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewITAutomationCreateUserGroupCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationCreateUserGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationCreateUserGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationCreateUserGroupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationCreateUserGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /it-automation/entities/it-user-groups/v1] ITAutomationCreateUserGroup", response, response.Code())
	}
}

// NewITAutomationCreateUserGroupCreated creates a ITAutomationCreateUserGroupCreated with default headers values
func NewITAutomationCreateUserGroupCreated() *ITAutomationCreateUserGroupCreated {
	return &ITAutomationCreateUserGroupCreated{}
}

/*
ITAutomationCreateUserGroupCreated describes a response with status code 201, with default header values.

Created
*/
type ITAutomationCreateUserGroupCreated struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationCreateUserGroupResponse
}

// IsSuccess returns true when this i t automation create user group created response has a 2xx status code
func (o *ITAutomationCreateUserGroupCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation create user group created response has a 3xx status code
func (o *ITAutomationCreateUserGroupCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create user group created response has a 4xx status code
func (o *ITAutomationCreateUserGroupCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation create user group created response has a 5xx status code
func (o *ITAutomationCreateUserGroupCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation create user group created response a status code equal to that given
func (o *ITAutomationCreateUserGroupCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the i t automation create user group created response
func (o *ITAutomationCreateUserGroupCreated) Code() int {
	return 201
}

func (o *ITAutomationCreateUserGroupCreated) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/it-user-groups/v1][%d] iTAutomationCreateUserGroupCreated  %+v", 201, o.Payload)
}

func (o *ITAutomationCreateUserGroupCreated) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/it-user-groups/v1][%d] iTAutomationCreateUserGroupCreated  %+v", 201, o.Payload)
}

func (o *ITAutomationCreateUserGroupCreated) GetPayload() *models.ItautomationCreateUserGroupResponse {
	return o.Payload
}

func (o *ITAutomationCreateUserGroupCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationCreateUserGroupResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationCreateUserGroupBadRequest creates a ITAutomationCreateUserGroupBadRequest with default headers values
func NewITAutomationCreateUserGroupBadRequest() *ITAutomationCreateUserGroupBadRequest {
	return &ITAutomationCreateUserGroupBadRequest{}
}

/*
ITAutomationCreateUserGroupBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationCreateUserGroupBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation create user group bad request response has a 2xx status code
func (o *ITAutomationCreateUserGroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation create user group bad request response has a 3xx status code
func (o *ITAutomationCreateUserGroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create user group bad request response has a 4xx status code
func (o *ITAutomationCreateUserGroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation create user group bad request response has a 5xx status code
func (o *ITAutomationCreateUserGroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation create user group bad request response a status code equal to that given
func (o *ITAutomationCreateUserGroupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation create user group bad request response
func (o *ITAutomationCreateUserGroupBadRequest) Code() int {
	return 400
}

func (o *ITAutomationCreateUserGroupBadRequest) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/it-user-groups/v1][%d] iTAutomationCreateUserGroupBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationCreateUserGroupBadRequest) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/it-user-groups/v1][%d] iTAutomationCreateUserGroupBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationCreateUserGroupBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationCreateUserGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationCreateUserGroupForbidden creates a ITAutomationCreateUserGroupForbidden with default headers values
func NewITAutomationCreateUserGroupForbidden() *ITAutomationCreateUserGroupForbidden {
	return &ITAutomationCreateUserGroupForbidden{}
}

/*
ITAutomationCreateUserGroupForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationCreateUserGroupForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation create user group forbidden response has a 2xx status code
func (o *ITAutomationCreateUserGroupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation create user group forbidden response has a 3xx status code
func (o *ITAutomationCreateUserGroupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create user group forbidden response has a 4xx status code
func (o *ITAutomationCreateUserGroupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation create user group forbidden response has a 5xx status code
func (o *ITAutomationCreateUserGroupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation create user group forbidden response a status code equal to that given
func (o *ITAutomationCreateUserGroupForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation create user group forbidden response
func (o *ITAutomationCreateUserGroupForbidden) Code() int {
	return 403
}

func (o *ITAutomationCreateUserGroupForbidden) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/it-user-groups/v1][%d] iTAutomationCreateUserGroupForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationCreateUserGroupForbidden) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/it-user-groups/v1][%d] iTAutomationCreateUserGroupForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationCreateUserGroupForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationCreateUserGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationCreateUserGroupTooManyRequests creates a ITAutomationCreateUserGroupTooManyRequests with default headers values
func NewITAutomationCreateUserGroupTooManyRequests() *ITAutomationCreateUserGroupTooManyRequests {
	return &ITAutomationCreateUserGroupTooManyRequests{}
}

/*
ITAutomationCreateUserGroupTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationCreateUserGroupTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation create user group too many requests response has a 2xx status code
func (o *ITAutomationCreateUserGroupTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation create user group too many requests response has a 3xx status code
func (o *ITAutomationCreateUserGroupTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create user group too many requests response has a 4xx status code
func (o *ITAutomationCreateUserGroupTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation create user group too many requests response has a 5xx status code
func (o *ITAutomationCreateUserGroupTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation create user group too many requests response a status code equal to that given
func (o *ITAutomationCreateUserGroupTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation create user group too many requests response
func (o *ITAutomationCreateUserGroupTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationCreateUserGroupTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/it-user-groups/v1][%d] iTAutomationCreateUserGroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationCreateUserGroupTooManyRequests) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/it-user-groups/v1][%d] iTAutomationCreateUserGroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationCreateUserGroupTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationCreateUserGroupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationCreateUserGroupInternalServerError creates a ITAutomationCreateUserGroupInternalServerError with default headers values
func NewITAutomationCreateUserGroupInternalServerError() *ITAutomationCreateUserGroupInternalServerError {
	return &ITAutomationCreateUserGroupInternalServerError{}
}

/*
ITAutomationCreateUserGroupInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ITAutomationCreateUserGroupInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation create user group internal server error response has a 2xx status code
func (o *ITAutomationCreateUserGroupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation create user group internal server error response has a 3xx status code
func (o *ITAutomationCreateUserGroupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation create user group internal server error response has a 4xx status code
func (o *ITAutomationCreateUserGroupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation create user group internal server error response has a 5xx status code
func (o *ITAutomationCreateUserGroupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation create user group internal server error response a status code equal to that given
func (o *ITAutomationCreateUserGroupInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation create user group internal server error response
func (o *ITAutomationCreateUserGroupInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationCreateUserGroupInternalServerError) Error() string {
	return fmt.Sprintf("[POST /it-automation/entities/it-user-groups/v1][%d] iTAutomationCreateUserGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationCreateUserGroupInternalServerError) String() string {
	return fmt.Sprintf("[POST /it-automation/entities/it-user-groups/v1][%d] iTAutomationCreateUserGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationCreateUserGroupInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationCreateUserGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
