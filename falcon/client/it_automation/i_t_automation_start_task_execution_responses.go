// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationStartTaskExecutionReader is a Reader for the ITAutomationStartTaskExecution structure.
type ITAutomationStartTaskExecutionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationStartTaskExecutionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 201:
		result := NewITAutomationStartTaskExecutionCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationStartTaskExecutionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationStartTaskExecutionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationStartTaskExecutionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationStartTaskExecutionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /it-automation/entities/task-executions/v1] ITAutomationStartTaskExecution", response, response.Code())
	}
}

// NewITAutomationStartTaskExecutionCreated creates a ITAutomationStartTaskExecutionCreated with default headers values
func NewITAutomationStartTaskExecutionCreated() *ITAutomationStartTaskExecutionCreated {
	return &ITAutomationStartTaskExecutionCreated{}
}

/*
ITAutomationStartTaskExecutionCreated describes a response with status code 201, with default header values.

Created
*/
type ITAutomationStartTaskExecutionCreated struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationStartTaskExecutionResponse
}

// IsSuccess returns true when this i t automation start task execution created response has a 2xx status code
func (o *ITAutomationStartTaskExecutionCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation start task execution created response has a 3xx status code
func (o *ITAutomationStartTaskExecutionCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation start task execution created response has a 4xx status code
func (o *ITAutomationStartTaskExecutionCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation start task execution created response has a 5xx status code
func (o *ITAutomationStartTaskExecutionCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation start task execution created response a status code equal to that given
func (o *ITAutomationStartTaskExecutionCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the i t automation start task execution created response
func (o *ITAutomationStartTaskExecutionCreated) Code() int {
	return 201
}

func (o *ITAutomationStartTaskExecutionCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/task-executions/v1][%d] iTAutomationStartTaskExecutionCreated %s", 201, payload)
}

func (o *ITAutomationStartTaskExecutionCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/task-executions/v1][%d] iTAutomationStartTaskExecutionCreated %s", 201, payload)
}

func (o *ITAutomationStartTaskExecutionCreated) GetPayload() *models.ItautomationStartTaskExecutionResponse {
	return o.Payload
}

func (o *ITAutomationStartTaskExecutionCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationStartTaskExecutionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationStartTaskExecutionBadRequest creates a ITAutomationStartTaskExecutionBadRequest with default headers values
func NewITAutomationStartTaskExecutionBadRequest() *ITAutomationStartTaskExecutionBadRequest {
	return &ITAutomationStartTaskExecutionBadRequest{}
}

/*
ITAutomationStartTaskExecutionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationStartTaskExecutionBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation start task execution bad request response has a 2xx status code
func (o *ITAutomationStartTaskExecutionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation start task execution bad request response has a 3xx status code
func (o *ITAutomationStartTaskExecutionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation start task execution bad request response has a 4xx status code
func (o *ITAutomationStartTaskExecutionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation start task execution bad request response has a 5xx status code
func (o *ITAutomationStartTaskExecutionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation start task execution bad request response a status code equal to that given
func (o *ITAutomationStartTaskExecutionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation start task execution bad request response
func (o *ITAutomationStartTaskExecutionBadRequest) Code() int {
	return 400
}

func (o *ITAutomationStartTaskExecutionBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/task-executions/v1][%d] iTAutomationStartTaskExecutionBadRequest %s", 400, payload)
}

func (o *ITAutomationStartTaskExecutionBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/task-executions/v1][%d] iTAutomationStartTaskExecutionBadRequest %s", 400, payload)
}

func (o *ITAutomationStartTaskExecutionBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationStartTaskExecutionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationStartTaskExecutionForbidden creates a ITAutomationStartTaskExecutionForbidden with default headers values
func NewITAutomationStartTaskExecutionForbidden() *ITAutomationStartTaskExecutionForbidden {
	return &ITAutomationStartTaskExecutionForbidden{}
}

/*
ITAutomationStartTaskExecutionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationStartTaskExecutionForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation start task execution forbidden response has a 2xx status code
func (o *ITAutomationStartTaskExecutionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation start task execution forbidden response has a 3xx status code
func (o *ITAutomationStartTaskExecutionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation start task execution forbidden response has a 4xx status code
func (o *ITAutomationStartTaskExecutionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation start task execution forbidden response has a 5xx status code
func (o *ITAutomationStartTaskExecutionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation start task execution forbidden response a status code equal to that given
func (o *ITAutomationStartTaskExecutionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation start task execution forbidden response
func (o *ITAutomationStartTaskExecutionForbidden) Code() int {
	return 403
}

func (o *ITAutomationStartTaskExecutionForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/task-executions/v1][%d] iTAutomationStartTaskExecutionForbidden %s", 403, payload)
}

func (o *ITAutomationStartTaskExecutionForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/task-executions/v1][%d] iTAutomationStartTaskExecutionForbidden %s", 403, payload)
}

func (o *ITAutomationStartTaskExecutionForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationStartTaskExecutionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationStartTaskExecutionTooManyRequests creates a ITAutomationStartTaskExecutionTooManyRequests with default headers values
func NewITAutomationStartTaskExecutionTooManyRequests() *ITAutomationStartTaskExecutionTooManyRequests {
	return &ITAutomationStartTaskExecutionTooManyRequests{}
}

/*
ITAutomationStartTaskExecutionTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationStartTaskExecutionTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation start task execution too many requests response has a 2xx status code
func (o *ITAutomationStartTaskExecutionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation start task execution too many requests response has a 3xx status code
func (o *ITAutomationStartTaskExecutionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation start task execution too many requests response has a 4xx status code
func (o *ITAutomationStartTaskExecutionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation start task execution too many requests response has a 5xx status code
func (o *ITAutomationStartTaskExecutionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation start task execution too many requests response a status code equal to that given
func (o *ITAutomationStartTaskExecutionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation start task execution too many requests response
func (o *ITAutomationStartTaskExecutionTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationStartTaskExecutionTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/task-executions/v1][%d] iTAutomationStartTaskExecutionTooManyRequests %s", 429, payload)
}

func (o *ITAutomationStartTaskExecutionTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/task-executions/v1][%d] iTAutomationStartTaskExecutionTooManyRequests %s", 429, payload)
}

func (o *ITAutomationStartTaskExecutionTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationStartTaskExecutionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationStartTaskExecutionInternalServerError creates a ITAutomationStartTaskExecutionInternalServerError with default headers values
func NewITAutomationStartTaskExecutionInternalServerError() *ITAutomationStartTaskExecutionInternalServerError {
	return &ITAutomationStartTaskExecutionInternalServerError{}
}

/*
ITAutomationStartTaskExecutionInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ITAutomationStartTaskExecutionInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation start task execution internal server error response has a 2xx status code
func (o *ITAutomationStartTaskExecutionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation start task execution internal server error response has a 3xx status code
func (o *ITAutomationStartTaskExecutionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation start task execution internal server error response has a 4xx status code
func (o *ITAutomationStartTaskExecutionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation start task execution internal server error response has a 5xx status code
func (o *ITAutomationStartTaskExecutionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation start task execution internal server error response a status code equal to that given
func (o *ITAutomationStartTaskExecutionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation start task execution internal server error response
func (o *ITAutomationStartTaskExecutionInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationStartTaskExecutionInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/task-executions/v1][%d] iTAutomationStartTaskExecutionInternalServerError %s", 500, payload)
}

func (o *ITAutomationStartTaskExecutionInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /it-automation/entities/task-executions/v1][%d] iTAutomationStartTaskExecutionInternalServerError %s", 500, payload)
}

func (o *ITAutomationStartTaskExecutionInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationStartTaskExecutionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
