// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// NewITAutomationUpdatePoliciesParams creates a new ITAutomationUpdatePoliciesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewITAutomationUpdatePoliciesParams() *ITAutomationUpdatePoliciesParams {
	return &ITAutomationUpdatePoliciesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewITAutomationUpdatePoliciesParamsWithTimeout creates a new ITAutomationUpdatePoliciesParams object
// with the ability to set a timeout on a request.
func NewITAutomationUpdatePoliciesParamsWithTimeout(timeout time.Duration) *ITAutomationUpdatePoliciesParams {
	return &ITAutomationUpdatePoliciesParams{
		timeout: timeout,
	}
}

// NewITAutomationUpdatePoliciesParamsWithContext creates a new ITAutomationUpdatePoliciesParams object
// with the ability to set a context for a request.
func NewITAutomationUpdatePoliciesParamsWithContext(ctx context.Context) *ITAutomationUpdatePoliciesParams {
	return &ITAutomationUpdatePoliciesParams{
		Context: ctx,
	}
}

// NewITAutomationUpdatePoliciesParamsWithHTTPClient creates a new ITAutomationUpdatePoliciesParams object
// with the ability to set a custom HTTPClient for a request.
func NewITAutomationUpdatePoliciesParamsWithHTTPClient(client *http.Client) *ITAutomationUpdatePoliciesParams {
	return &ITAutomationUpdatePoliciesParams{
		HTTPClient: client,
	}
}

/*
ITAutomationUpdatePoliciesParams contains all the parameters to send to the API endpoint

	for the i t automation update policies operation.

	Typically these are written to a http.Request.
*/
type ITAutomationUpdatePoliciesParams struct {

	/* Body.

	    Update an existing policy.

	* `id` is required and must be a valid policy ID representing the policy to be updated.

	* `name` must be between 1 and 100 characters.

	* `description` can be between 0 and 500 characters.

	* `is_enabled` controls whether the policy is active.

	* `config.execution.enable_script_execution` enables or disables script execution.

	* `config.execution.enable_python_execution` enables or disables Python execution.

	* `config.execution.enable_os_query` enables or disables OS Query.

	* `config.execution.execution_timeout` specifies the timeout value for executions.

	* `config.execution.execution_timeout_unit` must be one of `Hours` or `Minutes`.

	* `config.resources.cpu_throttle` specifies the CPU throttle value.

	* `config.resources.cpu_scheduling` sets priority to determine the order in which a query process will run on a host's CPU.

	* `config.resources.memory_pressure_level` sets memory pressure level to control system resource allocation during task execution.

	* `config.resources.memory_allocation` specifies the memory allocation value.

	* `config.resources.memory_allocation_unit` must be one of `MB` or `GB`.

	* `config.concurrency.concurrent_host_limit` specifies the maximum number of concurrent hosts.

	* `config.concurrency.concurrent_task_limit` specifies the maximum number of concurrent tasks.

	* `config.concurrency.concurrent_host_file_transfer_limit` specifies the maximum number of concurrent file transfers.
	*/
	Body *models.ItautomationUpdatePolicyRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the i t automation update policies params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ITAutomationUpdatePoliciesParams) WithDefaults() *ITAutomationUpdatePoliciesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the i t automation update policies params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ITAutomationUpdatePoliciesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the i t automation update policies params
func (o *ITAutomationUpdatePoliciesParams) WithTimeout(timeout time.Duration) *ITAutomationUpdatePoliciesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the i t automation update policies params
func (o *ITAutomationUpdatePoliciesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the i t automation update policies params
func (o *ITAutomationUpdatePoliciesParams) WithContext(ctx context.Context) *ITAutomationUpdatePoliciesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the i t automation update policies params
func (o *ITAutomationUpdatePoliciesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the i t automation update policies params
func (o *ITAutomationUpdatePoliciesParams) WithHTTPClient(client *http.Client) *ITAutomationUpdatePoliciesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the i t automation update policies params
func (o *ITAutomationUpdatePoliciesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the i t automation update policies params
func (o *ITAutomationUpdatePoliciesParams) WithBody(body *models.ItautomationUpdatePolicyRequest) *ITAutomationUpdatePoliciesParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the i t automation update policies params
func (o *ITAutomationUpdatePoliciesParams) SetBody(body *models.ItautomationUpdatePolicyRequest) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *ITAutomationUpdatePoliciesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
