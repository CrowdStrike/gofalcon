// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationGetScheduledTasksReader is a Reader for the ITAutomationGetScheduledTasks structure.
type ITAutomationGetScheduledTasksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationGetScheduledTasksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewITAutomationGetScheduledTasksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationGetScheduledTasksBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationGetScheduledTasksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationGetScheduledTasksTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationGetScheduledTasksInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /it-automation/entities/scheduled-tasks/v1] ITAutomationGetScheduledTasks", response, response.Code())
	}
}

// NewITAutomationGetScheduledTasksOK creates a ITAutomationGetScheduledTasksOK with default headers values
func NewITAutomationGetScheduledTasksOK() *ITAutomationGetScheduledTasksOK {
	return &ITAutomationGetScheduledTasksOK{}
}

/*
ITAutomationGetScheduledTasksOK describes a response with status code 200, with default header values.

OK
*/
type ITAutomationGetScheduledTasksOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationGetScheduledTaskResponse
}

// IsSuccess returns true when this i t automation get scheduled tasks o k response has a 2xx status code
func (o *ITAutomationGetScheduledTasksOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation get scheduled tasks o k response has a 3xx status code
func (o *ITAutomationGetScheduledTasksOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get scheduled tasks o k response has a 4xx status code
func (o *ITAutomationGetScheduledTasksOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation get scheduled tasks o k response has a 5xx status code
func (o *ITAutomationGetScheduledTasksOK) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get scheduled tasks o k response a status code equal to that given
func (o *ITAutomationGetScheduledTasksOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the i t automation get scheduled tasks o k response
func (o *ITAutomationGetScheduledTasksOK) Code() int {
	return 200
}

func (o *ITAutomationGetScheduledTasksOK) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationGetScheduledTasksOK  %+v", 200, o.Payload)
}

func (o *ITAutomationGetScheduledTasksOK) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationGetScheduledTasksOK  %+v", 200, o.Payload)
}

func (o *ITAutomationGetScheduledTasksOK) GetPayload() *models.ItautomationGetScheduledTaskResponse {
	return o.Payload
}

func (o *ITAutomationGetScheduledTasksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationGetScheduledTaskResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetScheduledTasksBadRequest creates a ITAutomationGetScheduledTasksBadRequest with default headers values
func NewITAutomationGetScheduledTasksBadRequest() *ITAutomationGetScheduledTasksBadRequest {
	return &ITAutomationGetScheduledTasksBadRequest{}
}

/*
ITAutomationGetScheduledTasksBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationGetScheduledTasksBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation get scheduled tasks bad request response has a 2xx status code
func (o *ITAutomationGetScheduledTasksBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get scheduled tasks bad request response has a 3xx status code
func (o *ITAutomationGetScheduledTasksBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get scheduled tasks bad request response has a 4xx status code
func (o *ITAutomationGetScheduledTasksBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get scheduled tasks bad request response has a 5xx status code
func (o *ITAutomationGetScheduledTasksBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get scheduled tasks bad request response a status code equal to that given
func (o *ITAutomationGetScheduledTasksBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation get scheduled tasks bad request response
func (o *ITAutomationGetScheduledTasksBadRequest) Code() int {
	return 400
}

func (o *ITAutomationGetScheduledTasksBadRequest) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationGetScheduledTasksBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationGetScheduledTasksBadRequest) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationGetScheduledTasksBadRequest  %+v", 400, o.Payload)
}

func (o *ITAutomationGetScheduledTasksBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationGetScheduledTasksBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetScheduledTasksForbidden creates a ITAutomationGetScheduledTasksForbidden with default headers values
func NewITAutomationGetScheduledTasksForbidden() *ITAutomationGetScheduledTasksForbidden {
	return &ITAutomationGetScheduledTasksForbidden{}
}

/*
ITAutomationGetScheduledTasksForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationGetScheduledTasksForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation get scheduled tasks forbidden response has a 2xx status code
func (o *ITAutomationGetScheduledTasksForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get scheduled tasks forbidden response has a 3xx status code
func (o *ITAutomationGetScheduledTasksForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get scheduled tasks forbidden response has a 4xx status code
func (o *ITAutomationGetScheduledTasksForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get scheduled tasks forbidden response has a 5xx status code
func (o *ITAutomationGetScheduledTasksForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get scheduled tasks forbidden response a status code equal to that given
func (o *ITAutomationGetScheduledTasksForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation get scheduled tasks forbidden response
func (o *ITAutomationGetScheduledTasksForbidden) Code() int {
	return 403
}

func (o *ITAutomationGetScheduledTasksForbidden) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationGetScheduledTasksForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationGetScheduledTasksForbidden) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationGetScheduledTasksForbidden  %+v", 403, o.Payload)
}

func (o *ITAutomationGetScheduledTasksForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationGetScheduledTasksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetScheduledTasksTooManyRequests creates a ITAutomationGetScheduledTasksTooManyRequests with default headers values
func NewITAutomationGetScheduledTasksTooManyRequests() *ITAutomationGetScheduledTasksTooManyRequests {
	return &ITAutomationGetScheduledTasksTooManyRequests{}
}

/*
ITAutomationGetScheduledTasksTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationGetScheduledTasksTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation get scheduled tasks too many requests response has a 2xx status code
func (o *ITAutomationGetScheduledTasksTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get scheduled tasks too many requests response has a 3xx status code
func (o *ITAutomationGetScheduledTasksTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get scheduled tasks too many requests response has a 4xx status code
func (o *ITAutomationGetScheduledTasksTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get scheduled tasks too many requests response has a 5xx status code
func (o *ITAutomationGetScheduledTasksTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get scheduled tasks too many requests response a status code equal to that given
func (o *ITAutomationGetScheduledTasksTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation get scheduled tasks too many requests response
func (o *ITAutomationGetScheduledTasksTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationGetScheduledTasksTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationGetScheduledTasksTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationGetScheduledTasksTooManyRequests) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationGetScheduledTasksTooManyRequests  %+v", 429, o.Payload)
}

func (o *ITAutomationGetScheduledTasksTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationGetScheduledTasksTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetScheduledTasksInternalServerError creates a ITAutomationGetScheduledTasksInternalServerError with default headers values
func NewITAutomationGetScheduledTasksInternalServerError() *ITAutomationGetScheduledTasksInternalServerError {
	return &ITAutomationGetScheduledTasksInternalServerError{}
}

/*
ITAutomationGetScheduledTasksInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ITAutomationGetScheduledTasksInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation get scheduled tasks internal server error response has a 2xx status code
func (o *ITAutomationGetScheduledTasksInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get scheduled tasks internal server error response has a 3xx status code
func (o *ITAutomationGetScheduledTasksInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get scheduled tasks internal server error response has a 4xx status code
func (o *ITAutomationGetScheduledTasksInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation get scheduled tasks internal server error response has a 5xx status code
func (o *ITAutomationGetScheduledTasksInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation get scheduled tasks internal server error response a status code equal to that given
func (o *ITAutomationGetScheduledTasksInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation get scheduled tasks internal server error response
func (o *ITAutomationGetScheduledTasksInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationGetScheduledTasksInternalServerError) Error() string {
	return fmt.Sprintf("[GET /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationGetScheduledTasksInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationGetScheduledTasksInternalServerError) String() string {
	return fmt.Sprintf("[GET /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationGetScheduledTasksInternalServerError  %+v", 500, o.Payload)
}

func (o *ITAutomationGetScheduledTasksInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationGetScheduledTasksInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
