// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationGetTasksReader is a Reader for the ITAutomationGetTasks structure.
type ITAutomationGetTasksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationGetTasksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewITAutomationGetTasksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationGetTasksBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationGetTasksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewITAutomationGetTasksNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationGetTasksTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationGetTasksInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /it-automation/entities/tasks/v1] ITAutomationGetTasks", response, response.Code())
	}
}

// NewITAutomationGetTasksOK creates a ITAutomationGetTasksOK with default headers values
func NewITAutomationGetTasksOK() *ITAutomationGetTasksOK {
	return &ITAutomationGetTasksOK{}
}

/*
ITAutomationGetTasksOK describes a response with status code 200, with default header values.

OK
*/
type ITAutomationGetTasksOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationGetTaskResponse
}

// IsSuccess returns true when this i t automation get tasks o k response has a 2xx status code
func (o *ITAutomationGetTasksOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation get tasks o k response has a 3xx status code
func (o *ITAutomationGetTasksOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get tasks o k response has a 4xx status code
func (o *ITAutomationGetTasksOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation get tasks o k response has a 5xx status code
func (o *ITAutomationGetTasksOK) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get tasks o k response a status code equal to that given
func (o *ITAutomationGetTasksOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the i t automation get tasks o k response
func (o *ITAutomationGetTasksOK) Code() int {
	return 200
}

func (o *ITAutomationGetTasksOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/entities/tasks/v1][%d] iTAutomationGetTasksOK %s", 200, payload)
}

func (o *ITAutomationGetTasksOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/entities/tasks/v1][%d] iTAutomationGetTasksOK %s", 200, payload)
}

func (o *ITAutomationGetTasksOK) GetPayload() *models.ItautomationGetTaskResponse {
	return o.Payload
}

func (o *ITAutomationGetTasksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationGetTaskResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetTasksBadRequest creates a ITAutomationGetTasksBadRequest with default headers values
func NewITAutomationGetTasksBadRequest() *ITAutomationGetTasksBadRequest {
	return &ITAutomationGetTasksBadRequest{}
}

/*
ITAutomationGetTasksBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationGetTasksBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation get tasks bad request response has a 2xx status code
func (o *ITAutomationGetTasksBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get tasks bad request response has a 3xx status code
func (o *ITAutomationGetTasksBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get tasks bad request response has a 4xx status code
func (o *ITAutomationGetTasksBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get tasks bad request response has a 5xx status code
func (o *ITAutomationGetTasksBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get tasks bad request response a status code equal to that given
func (o *ITAutomationGetTasksBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation get tasks bad request response
func (o *ITAutomationGetTasksBadRequest) Code() int {
	return 400
}

func (o *ITAutomationGetTasksBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/entities/tasks/v1][%d] iTAutomationGetTasksBadRequest %s", 400, payload)
}

func (o *ITAutomationGetTasksBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/entities/tasks/v1][%d] iTAutomationGetTasksBadRequest %s", 400, payload)
}

func (o *ITAutomationGetTasksBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationGetTasksBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetTasksForbidden creates a ITAutomationGetTasksForbidden with default headers values
func NewITAutomationGetTasksForbidden() *ITAutomationGetTasksForbidden {
	return &ITAutomationGetTasksForbidden{}
}

/*
ITAutomationGetTasksForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationGetTasksForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation get tasks forbidden response has a 2xx status code
func (o *ITAutomationGetTasksForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get tasks forbidden response has a 3xx status code
func (o *ITAutomationGetTasksForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get tasks forbidden response has a 4xx status code
func (o *ITAutomationGetTasksForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get tasks forbidden response has a 5xx status code
func (o *ITAutomationGetTasksForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get tasks forbidden response a status code equal to that given
func (o *ITAutomationGetTasksForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation get tasks forbidden response
func (o *ITAutomationGetTasksForbidden) Code() int {
	return 403
}

func (o *ITAutomationGetTasksForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/entities/tasks/v1][%d] iTAutomationGetTasksForbidden %s", 403, payload)
}

func (o *ITAutomationGetTasksForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/entities/tasks/v1][%d] iTAutomationGetTasksForbidden %s", 403, payload)
}

func (o *ITAutomationGetTasksForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationGetTasksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetTasksNotFound creates a ITAutomationGetTasksNotFound with default headers values
func NewITAutomationGetTasksNotFound() *ITAutomationGetTasksNotFound {
	return &ITAutomationGetTasksNotFound{}
}

/*
ITAutomationGetTasksNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ITAutomationGetTasksNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation get tasks not found response has a 2xx status code
func (o *ITAutomationGetTasksNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get tasks not found response has a 3xx status code
func (o *ITAutomationGetTasksNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get tasks not found response has a 4xx status code
func (o *ITAutomationGetTasksNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get tasks not found response has a 5xx status code
func (o *ITAutomationGetTasksNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get tasks not found response a status code equal to that given
func (o *ITAutomationGetTasksNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the i t automation get tasks not found response
func (o *ITAutomationGetTasksNotFound) Code() int {
	return 404
}

func (o *ITAutomationGetTasksNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/entities/tasks/v1][%d] iTAutomationGetTasksNotFound %s", 404, payload)
}

func (o *ITAutomationGetTasksNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/entities/tasks/v1][%d] iTAutomationGetTasksNotFound %s", 404, payload)
}

func (o *ITAutomationGetTasksNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationGetTasksNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetTasksTooManyRequests creates a ITAutomationGetTasksTooManyRequests with default headers values
func NewITAutomationGetTasksTooManyRequests() *ITAutomationGetTasksTooManyRequests {
	return &ITAutomationGetTasksTooManyRequests{}
}

/*
ITAutomationGetTasksTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationGetTasksTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation get tasks too many requests response has a 2xx status code
func (o *ITAutomationGetTasksTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get tasks too many requests response has a 3xx status code
func (o *ITAutomationGetTasksTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get tasks too many requests response has a 4xx status code
func (o *ITAutomationGetTasksTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get tasks too many requests response has a 5xx status code
func (o *ITAutomationGetTasksTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get tasks too many requests response a status code equal to that given
func (o *ITAutomationGetTasksTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation get tasks too many requests response
func (o *ITAutomationGetTasksTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationGetTasksTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/entities/tasks/v1][%d] iTAutomationGetTasksTooManyRequests %s", 429, payload)
}

func (o *ITAutomationGetTasksTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/entities/tasks/v1][%d] iTAutomationGetTasksTooManyRequests %s", 429, payload)
}

func (o *ITAutomationGetTasksTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationGetTasksTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationGetTasksInternalServerError creates a ITAutomationGetTasksInternalServerError with default headers values
func NewITAutomationGetTasksInternalServerError() *ITAutomationGetTasksInternalServerError {
	return &ITAutomationGetTasksInternalServerError{}
}

/*
ITAutomationGetTasksInternalServerError describes a response with status code 500, with default header values.

Unexpected Error
*/
type ITAutomationGetTasksInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation get tasks internal server error response has a 2xx status code
func (o *ITAutomationGetTasksInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get tasks internal server error response has a 3xx status code
func (o *ITAutomationGetTasksInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get tasks internal server error response has a 4xx status code
func (o *ITAutomationGetTasksInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation get tasks internal server error response has a 5xx status code
func (o *ITAutomationGetTasksInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation get tasks internal server error response a status code equal to that given
func (o *ITAutomationGetTasksInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation get tasks internal server error response
func (o *ITAutomationGetTasksInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationGetTasksInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/entities/tasks/v1][%d] iTAutomationGetTasksInternalServerError %s", 500, payload)
}

func (o *ITAutomationGetTasksInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/entities/tasks/v1][%d] iTAutomationGetTasksInternalServerError %s", 500, payload)
}

func (o *ITAutomationGetTasksInternalServerError) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationGetTasksInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
