// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationSearchTaskGroupsReader is a Reader for the ITAutomationSearchTaskGroups structure.
type ITAutomationSearchTaskGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationSearchTaskGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewITAutomationSearchTaskGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationSearchTaskGroupsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationSearchTaskGroupsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationSearchTaskGroupsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationSearchTaskGroupsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /it-automation/queries/task-groups/v1] ITAutomationSearchTaskGroups", response, response.Code())
	}
}

// NewITAutomationSearchTaskGroupsOK creates a ITAutomationSearchTaskGroupsOK with default headers values
func NewITAutomationSearchTaskGroupsOK() *ITAutomationSearchTaskGroupsOK {
	return &ITAutomationSearchTaskGroupsOK{}
}

/*
ITAutomationSearchTaskGroupsOK describes a response with status code 200, with default header values.

OK
*/
type ITAutomationSearchTaskGroupsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationSearchTaskGroupsResponse
}

// IsSuccess returns true when this i t automation search task groups o k response has a 2xx status code
func (o *ITAutomationSearchTaskGroupsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation search task groups o k response has a 3xx status code
func (o *ITAutomationSearchTaskGroupsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search task groups o k response has a 4xx status code
func (o *ITAutomationSearchTaskGroupsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation search task groups o k response has a 5xx status code
func (o *ITAutomationSearchTaskGroupsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation search task groups o k response a status code equal to that given
func (o *ITAutomationSearchTaskGroupsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the i t automation search task groups o k response
func (o *ITAutomationSearchTaskGroupsOK) Code() int {
	return 200
}

func (o *ITAutomationSearchTaskGroupsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/task-groups/v1][%d] iTAutomationSearchTaskGroupsOK %s", 200, payload)
}

func (o *ITAutomationSearchTaskGroupsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/task-groups/v1][%d] iTAutomationSearchTaskGroupsOK %s", 200, payload)
}

func (o *ITAutomationSearchTaskGroupsOK) GetPayload() *models.ItautomationSearchTaskGroupsResponse {
	return o.Payload
}

func (o *ITAutomationSearchTaskGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationSearchTaskGroupsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationSearchTaskGroupsBadRequest creates a ITAutomationSearchTaskGroupsBadRequest with default headers values
func NewITAutomationSearchTaskGroupsBadRequest() *ITAutomationSearchTaskGroupsBadRequest {
	return &ITAutomationSearchTaskGroupsBadRequest{}
}

/*
ITAutomationSearchTaskGroupsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationSearchTaskGroupsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation search task groups bad request response has a 2xx status code
func (o *ITAutomationSearchTaskGroupsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation search task groups bad request response has a 3xx status code
func (o *ITAutomationSearchTaskGroupsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search task groups bad request response has a 4xx status code
func (o *ITAutomationSearchTaskGroupsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation search task groups bad request response has a 5xx status code
func (o *ITAutomationSearchTaskGroupsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation search task groups bad request response a status code equal to that given
func (o *ITAutomationSearchTaskGroupsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation search task groups bad request response
func (o *ITAutomationSearchTaskGroupsBadRequest) Code() int {
	return 400
}

func (o *ITAutomationSearchTaskGroupsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/task-groups/v1][%d] iTAutomationSearchTaskGroupsBadRequest %s", 400, payload)
}

func (o *ITAutomationSearchTaskGroupsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/task-groups/v1][%d] iTAutomationSearchTaskGroupsBadRequest %s", 400, payload)
}

func (o *ITAutomationSearchTaskGroupsBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationSearchTaskGroupsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationSearchTaskGroupsForbidden creates a ITAutomationSearchTaskGroupsForbidden with default headers values
func NewITAutomationSearchTaskGroupsForbidden() *ITAutomationSearchTaskGroupsForbidden {
	return &ITAutomationSearchTaskGroupsForbidden{}
}

/*
ITAutomationSearchTaskGroupsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationSearchTaskGroupsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation search task groups forbidden response has a 2xx status code
func (o *ITAutomationSearchTaskGroupsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation search task groups forbidden response has a 3xx status code
func (o *ITAutomationSearchTaskGroupsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search task groups forbidden response has a 4xx status code
func (o *ITAutomationSearchTaskGroupsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation search task groups forbidden response has a 5xx status code
func (o *ITAutomationSearchTaskGroupsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation search task groups forbidden response a status code equal to that given
func (o *ITAutomationSearchTaskGroupsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation search task groups forbidden response
func (o *ITAutomationSearchTaskGroupsForbidden) Code() int {
	return 403
}

func (o *ITAutomationSearchTaskGroupsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/task-groups/v1][%d] iTAutomationSearchTaskGroupsForbidden %s", 403, payload)
}

func (o *ITAutomationSearchTaskGroupsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/task-groups/v1][%d] iTAutomationSearchTaskGroupsForbidden %s", 403, payload)
}

func (o *ITAutomationSearchTaskGroupsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationSearchTaskGroupsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationSearchTaskGroupsTooManyRequests creates a ITAutomationSearchTaskGroupsTooManyRequests with default headers values
func NewITAutomationSearchTaskGroupsTooManyRequests() *ITAutomationSearchTaskGroupsTooManyRequests {
	return &ITAutomationSearchTaskGroupsTooManyRequests{}
}

/*
ITAutomationSearchTaskGroupsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationSearchTaskGroupsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation search task groups too many requests response has a 2xx status code
func (o *ITAutomationSearchTaskGroupsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation search task groups too many requests response has a 3xx status code
func (o *ITAutomationSearchTaskGroupsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search task groups too many requests response has a 4xx status code
func (o *ITAutomationSearchTaskGroupsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation search task groups too many requests response has a 5xx status code
func (o *ITAutomationSearchTaskGroupsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation search task groups too many requests response a status code equal to that given
func (o *ITAutomationSearchTaskGroupsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation search task groups too many requests response
func (o *ITAutomationSearchTaskGroupsTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationSearchTaskGroupsTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/task-groups/v1][%d] iTAutomationSearchTaskGroupsTooManyRequests %s", 429, payload)
}

func (o *ITAutomationSearchTaskGroupsTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/task-groups/v1][%d] iTAutomationSearchTaskGroupsTooManyRequests %s", 429, payload)
}

func (o *ITAutomationSearchTaskGroupsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationSearchTaskGroupsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationSearchTaskGroupsInternalServerError creates a ITAutomationSearchTaskGroupsInternalServerError with default headers values
func NewITAutomationSearchTaskGroupsInternalServerError() *ITAutomationSearchTaskGroupsInternalServerError {
	return &ITAutomationSearchTaskGroupsInternalServerError{}
}

/*
ITAutomationSearchTaskGroupsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ITAutomationSearchTaskGroupsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation search task groups internal server error response has a 2xx status code
func (o *ITAutomationSearchTaskGroupsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation search task groups internal server error response has a 3xx status code
func (o *ITAutomationSearchTaskGroupsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation search task groups internal server error response has a 4xx status code
func (o *ITAutomationSearchTaskGroupsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation search task groups internal server error response has a 5xx status code
func (o *ITAutomationSearchTaskGroupsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation search task groups internal server error response a status code equal to that given
func (o *ITAutomationSearchTaskGroupsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation search task groups internal server error response
func (o *ITAutomationSearchTaskGroupsInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationSearchTaskGroupsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/task-groups/v1][%d] iTAutomationSearchTaskGroupsInternalServerError %s", 500, payload)
}

func (o *ITAutomationSearchTaskGroupsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/queries/task-groups/v1][%d] iTAutomationSearchTaskGroupsInternalServerError %s", 500, payload)
}

func (o *ITAutomationSearchTaskGroupsInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationSearchTaskGroupsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
