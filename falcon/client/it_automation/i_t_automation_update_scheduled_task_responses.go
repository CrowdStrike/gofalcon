// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationUpdateScheduledTaskReader is a Reader for the ITAutomationUpdateScheduledTask structure.
type ITAutomationUpdateScheduledTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationUpdateScheduledTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewITAutomationUpdateScheduledTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationUpdateScheduledTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationUpdateScheduledTaskForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewITAutomationUpdateScheduledTaskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationUpdateScheduledTaskTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationUpdateScheduledTaskInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /it-automation/entities/scheduled-tasks/v1] ITAutomationUpdateScheduledTask", response, response.Code())
	}
}

// NewITAutomationUpdateScheduledTaskOK creates a ITAutomationUpdateScheduledTaskOK with default headers values
func NewITAutomationUpdateScheduledTaskOK() *ITAutomationUpdateScheduledTaskOK {
	return &ITAutomationUpdateScheduledTaskOK{}
}

/*
ITAutomationUpdateScheduledTaskOK describes a response with status code 200, with default header values.

OK
*/
type ITAutomationUpdateScheduledTaskOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationUpdateScheduledTasksResponse
}

// IsSuccess returns true when this i t automation update scheduled task o k response has a 2xx status code
func (o *ITAutomationUpdateScheduledTaskOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation update scheduled task o k response has a 3xx status code
func (o *ITAutomationUpdateScheduledTaskOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation update scheduled task o k response has a 4xx status code
func (o *ITAutomationUpdateScheduledTaskOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation update scheduled task o k response has a 5xx status code
func (o *ITAutomationUpdateScheduledTaskOK) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation update scheduled task o k response a status code equal to that given
func (o *ITAutomationUpdateScheduledTaskOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the i t automation update scheduled task o k response
func (o *ITAutomationUpdateScheduledTaskOK) Code() int {
	return 200
}

func (o *ITAutomationUpdateScheduledTaskOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationUpdateScheduledTaskOK %s", 200, payload)
}

func (o *ITAutomationUpdateScheduledTaskOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationUpdateScheduledTaskOK %s", 200, payload)
}

func (o *ITAutomationUpdateScheduledTaskOK) GetPayload() *models.ItautomationUpdateScheduledTasksResponse {
	return o.Payload
}

func (o *ITAutomationUpdateScheduledTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationUpdateScheduledTasksResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationUpdateScheduledTaskBadRequest creates a ITAutomationUpdateScheduledTaskBadRequest with default headers values
func NewITAutomationUpdateScheduledTaskBadRequest() *ITAutomationUpdateScheduledTaskBadRequest {
	return &ITAutomationUpdateScheduledTaskBadRequest{}
}

/*
ITAutomationUpdateScheduledTaskBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationUpdateScheduledTaskBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation update scheduled task bad request response has a 2xx status code
func (o *ITAutomationUpdateScheduledTaskBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation update scheduled task bad request response has a 3xx status code
func (o *ITAutomationUpdateScheduledTaskBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation update scheduled task bad request response has a 4xx status code
func (o *ITAutomationUpdateScheduledTaskBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation update scheduled task bad request response has a 5xx status code
func (o *ITAutomationUpdateScheduledTaskBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation update scheduled task bad request response a status code equal to that given
func (o *ITAutomationUpdateScheduledTaskBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation update scheduled task bad request response
func (o *ITAutomationUpdateScheduledTaskBadRequest) Code() int {
	return 400
}

func (o *ITAutomationUpdateScheduledTaskBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationUpdateScheduledTaskBadRequest %s", 400, payload)
}

func (o *ITAutomationUpdateScheduledTaskBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationUpdateScheduledTaskBadRequest %s", 400, payload)
}

func (o *ITAutomationUpdateScheduledTaskBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationUpdateScheduledTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationUpdateScheduledTaskForbidden creates a ITAutomationUpdateScheduledTaskForbidden with default headers values
func NewITAutomationUpdateScheduledTaskForbidden() *ITAutomationUpdateScheduledTaskForbidden {
	return &ITAutomationUpdateScheduledTaskForbidden{}
}

/*
ITAutomationUpdateScheduledTaskForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationUpdateScheduledTaskForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation update scheduled task forbidden response has a 2xx status code
func (o *ITAutomationUpdateScheduledTaskForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation update scheduled task forbidden response has a 3xx status code
func (o *ITAutomationUpdateScheduledTaskForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation update scheduled task forbidden response has a 4xx status code
func (o *ITAutomationUpdateScheduledTaskForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation update scheduled task forbidden response has a 5xx status code
func (o *ITAutomationUpdateScheduledTaskForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation update scheduled task forbidden response a status code equal to that given
func (o *ITAutomationUpdateScheduledTaskForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation update scheduled task forbidden response
func (o *ITAutomationUpdateScheduledTaskForbidden) Code() int {
	return 403
}

func (o *ITAutomationUpdateScheduledTaskForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationUpdateScheduledTaskForbidden %s", 403, payload)
}

func (o *ITAutomationUpdateScheduledTaskForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationUpdateScheduledTaskForbidden %s", 403, payload)
}

func (o *ITAutomationUpdateScheduledTaskForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationUpdateScheduledTaskForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationUpdateScheduledTaskNotFound creates a ITAutomationUpdateScheduledTaskNotFound with default headers values
func NewITAutomationUpdateScheduledTaskNotFound() *ITAutomationUpdateScheduledTaskNotFound {
	return &ITAutomationUpdateScheduledTaskNotFound{}
}

/*
ITAutomationUpdateScheduledTaskNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ITAutomationUpdateScheduledTaskNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation update scheduled task not found response has a 2xx status code
func (o *ITAutomationUpdateScheduledTaskNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation update scheduled task not found response has a 3xx status code
func (o *ITAutomationUpdateScheduledTaskNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation update scheduled task not found response has a 4xx status code
func (o *ITAutomationUpdateScheduledTaskNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation update scheduled task not found response has a 5xx status code
func (o *ITAutomationUpdateScheduledTaskNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation update scheduled task not found response a status code equal to that given
func (o *ITAutomationUpdateScheduledTaskNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the i t automation update scheduled task not found response
func (o *ITAutomationUpdateScheduledTaskNotFound) Code() int {
	return 404
}

func (o *ITAutomationUpdateScheduledTaskNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationUpdateScheduledTaskNotFound %s", 404, payload)
}

func (o *ITAutomationUpdateScheduledTaskNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationUpdateScheduledTaskNotFound %s", 404, payload)
}

func (o *ITAutomationUpdateScheduledTaskNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationUpdateScheduledTaskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationUpdateScheduledTaskTooManyRequests creates a ITAutomationUpdateScheduledTaskTooManyRequests with default headers values
func NewITAutomationUpdateScheduledTaskTooManyRequests() *ITAutomationUpdateScheduledTaskTooManyRequests {
	return &ITAutomationUpdateScheduledTaskTooManyRequests{}
}

/*
ITAutomationUpdateScheduledTaskTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationUpdateScheduledTaskTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation update scheduled task too many requests response has a 2xx status code
func (o *ITAutomationUpdateScheduledTaskTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation update scheduled task too many requests response has a 3xx status code
func (o *ITAutomationUpdateScheduledTaskTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation update scheduled task too many requests response has a 4xx status code
func (o *ITAutomationUpdateScheduledTaskTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation update scheduled task too many requests response has a 5xx status code
func (o *ITAutomationUpdateScheduledTaskTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation update scheduled task too many requests response a status code equal to that given
func (o *ITAutomationUpdateScheduledTaskTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation update scheduled task too many requests response
func (o *ITAutomationUpdateScheduledTaskTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationUpdateScheduledTaskTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationUpdateScheduledTaskTooManyRequests %s", 429, payload)
}

func (o *ITAutomationUpdateScheduledTaskTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationUpdateScheduledTaskTooManyRequests %s", 429, payload)
}

func (o *ITAutomationUpdateScheduledTaskTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationUpdateScheduledTaskTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewITAutomationUpdateScheduledTaskInternalServerError creates a ITAutomationUpdateScheduledTaskInternalServerError with default headers values
func NewITAutomationUpdateScheduledTaskInternalServerError() *ITAutomationUpdateScheduledTaskInternalServerError {
	return &ITAutomationUpdateScheduledTaskInternalServerError{}
}

/*
ITAutomationUpdateScheduledTaskInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ITAutomationUpdateScheduledTaskInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation update scheduled task internal server error response has a 2xx status code
func (o *ITAutomationUpdateScheduledTaskInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation update scheduled task internal server error response has a 3xx status code
func (o *ITAutomationUpdateScheduledTaskInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation update scheduled task internal server error response has a 4xx status code
func (o *ITAutomationUpdateScheduledTaskInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation update scheduled task internal server error response has a 5xx status code
func (o *ITAutomationUpdateScheduledTaskInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation update scheduled task internal server error response a status code equal to that given
func (o *ITAutomationUpdateScheduledTaskInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation update scheduled task internal server error response
func (o *ITAutomationUpdateScheduledTaskInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationUpdateScheduledTaskInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationUpdateScheduledTaskInternalServerError %s", 500, payload)
}

func (o *ITAutomationUpdateScheduledTaskInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /it-automation/entities/scheduled-tasks/v1][%d] iTAutomationUpdateScheduledTaskInternalServerError %s", 500, payload)
}

func (o *ITAutomationUpdateScheduledTaskInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationUpdateScheduledTaskInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
