// Code generated by go-swagger; DO NOT EDIT.

package it_automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ITAutomationGetPoliciesReader is a Reader for the ITAutomationGetPolicies structure.
type ITAutomationGetPoliciesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ITAutomationGetPoliciesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewITAutomationGetPoliciesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewITAutomationGetPoliciesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewITAutomationGetPoliciesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewITAutomationGetPoliciesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewITAutomationGetPoliciesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /it-automation/entities/policies/v1] ITAutomationGetPolicies", response, response.Code())
	}
}

// NewITAutomationGetPoliciesOK creates a ITAutomationGetPoliciesOK with default headers values
func NewITAutomationGetPoliciesOK() *ITAutomationGetPoliciesOK {
	return &ITAutomationGetPoliciesOK{}
}

/*
ITAutomationGetPoliciesOK describes a response with status code 200, with default header values.

OK
*/
type ITAutomationGetPoliciesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ItautomationPoliciesAPIResponse
}

// IsSuccess returns true when this i t automation get policies o k response has a 2xx status code
func (o *ITAutomationGetPoliciesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this i t automation get policies o k response has a 3xx status code
func (o *ITAutomationGetPoliciesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get policies o k response has a 4xx status code
func (o *ITAutomationGetPoliciesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation get policies o k response has a 5xx status code
func (o *ITAutomationGetPoliciesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get policies o k response a status code equal to that given
func (o *ITAutomationGetPoliciesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the i t automation get policies o k response
func (o *ITAutomationGetPoliciesOK) Code() int {
	return 200
}

func (o *ITAutomationGetPoliciesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/entities/policies/v1][%d] iTAutomationGetPoliciesOK %s", 200, payload)
}

func (o *ITAutomationGetPoliciesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/entities/policies/v1][%d] iTAutomationGetPoliciesOK %s", 200, payload)
}

func (o *ITAutomationGetPoliciesOK) GetPayload() *models.ItautomationPoliciesAPIResponse {
	return o.Payload
}

func (o *ITAutomationGetPoliciesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ItautomationPoliciesAPIResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationGetPoliciesBadRequest creates a ITAutomationGetPoliciesBadRequest with default headers values
func NewITAutomationGetPoliciesBadRequest() *ITAutomationGetPoliciesBadRequest {
	return &ITAutomationGetPoliciesBadRequest{}
}

/*
ITAutomationGetPoliciesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ITAutomationGetPoliciesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation get policies bad request response has a 2xx status code
func (o *ITAutomationGetPoliciesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get policies bad request response has a 3xx status code
func (o *ITAutomationGetPoliciesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get policies bad request response has a 4xx status code
func (o *ITAutomationGetPoliciesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get policies bad request response has a 5xx status code
func (o *ITAutomationGetPoliciesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get policies bad request response a status code equal to that given
func (o *ITAutomationGetPoliciesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the i t automation get policies bad request response
func (o *ITAutomationGetPoliciesBadRequest) Code() int {
	return 400
}

func (o *ITAutomationGetPoliciesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/entities/policies/v1][%d] iTAutomationGetPoliciesBadRequest %s", 400, payload)
}

func (o *ITAutomationGetPoliciesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/entities/policies/v1][%d] iTAutomationGetPoliciesBadRequest %s", 400, payload)
}

func (o *ITAutomationGetPoliciesBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationGetPoliciesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationGetPoliciesForbidden creates a ITAutomationGetPoliciesForbidden with default headers values
func NewITAutomationGetPoliciesForbidden() *ITAutomationGetPoliciesForbidden {
	return &ITAutomationGetPoliciesForbidden{}
}

/*
ITAutomationGetPoliciesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ITAutomationGetPoliciesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation get policies forbidden response has a 2xx status code
func (o *ITAutomationGetPoliciesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get policies forbidden response has a 3xx status code
func (o *ITAutomationGetPoliciesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get policies forbidden response has a 4xx status code
func (o *ITAutomationGetPoliciesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get policies forbidden response has a 5xx status code
func (o *ITAutomationGetPoliciesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get policies forbidden response a status code equal to that given
func (o *ITAutomationGetPoliciesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the i t automation get policies forbidden response
func (o *ITAutomationGetPoliciesForbidden) Code() int {
	return 403
}

func (o *ITAutomationGetPoliciesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/entities/policies/v1][%d] iTAutomationGetPoliciesForbidden %s", 403, payload)
}

func (o *ITAutomationGetPoliciesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/entities/policies/v1][%d] iTAutomationGetPoliciesForbidden %s", 403, payload)
}

func (o *ITAutomationGetPoliciesForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationGetPoliciesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationGetPoliciesTooManyRequests creates a ITAutomationGetPoliciesTooManyRequests with default headers values
func NewITAutomationGetPoliciesTooManyRequests() *ITAutomationGetPoliciesTooManyRequests {
	return &ITAutomationGetPoliciesTooManyRequests{}
}

/*
ITAutomationGetPoliciesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ITAutomationGetPoliciesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this i t automation get policies too many requests response has a 2xx status code
func (o *ITAutomationGetPoliciesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get policies too many requests response has a 3xx status code
func (o *ITAutomationGetPoliciesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get policies too many requests response has a 4xx status code
func (o *ITAutomationGetPoliciesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this i t automation get policies too many requests response has a 5xx status code
func (o *ITAutomationGetPoliciesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this i t automation get policies too many requests response a status code equal to that given
func (o *ITAutomationGetPoliciesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the i t automation get policies too many requests response
func (o *ITAutomationGetPoliciesTooManyRequests) Code() int {
	return 429
}

func (o *ITAutomationGetPoliciesTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/entities/policies/v1][%d] iTAutomationGetPoliciesTooManyRequests %s", 429, payload)
}

func (o *ITAutomationGetPoliciesTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/entities/policies/v1][%d] iTAutomationGetPoliciesTooManyRequests %s", 429, payload)
}

func (o *ITAutomationGetPoliciesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ITAutomationGetPoliciesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewITAutomationGetPoliciesInternalServerError creates a ITAutomationGetPoliciesInternalServerError with default headers values
func NewITAutomationGetPoliciesInternalServerError() *ITAutomationGetPoliciesInternalServerError {
	return &ITAutomationGetPoliciesInternalServerError{}
}

/*
ITAutomationGetPoliciesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ITAutomationGetPoliciesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this i t automation get policies internal server error response has a 2xx status code
func (o *ITAutomationGetPoliciesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this i t automation get policies internal server error response has a 3xx status code
func (o *ITAutomationGetPoliciesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this i t automation get policies internal server error response has a 4xx status code
func (o *ITAutomationGetPoliciesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this i t automation get policies internal server error response has a 5xx status code
func (o *ITAutomationGetPoliciesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this i t automation get policies internal server error response a status code equal to that given
func (o *ITAutomationGetPoliciesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the i t automation get policies internal server error response
func (o *ITAutomationGetPoliciesInternalServerError) Code() int {
	return 500
}

func (o *ITAutomationGetPoliciesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/entities/policies/v1][%d] iTAutomationGetPoliciesInternalServerError %s", 500, payload)
}

func (o *ITAutomationGetPoliciesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /it-automation/entities/policies/v1][%d] iTAutomationGetPoliciesInternalServerError %s", 500, payload)
}

func (o *ITAutomationGetPoliciesInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ITAutomationGetPoliciesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
