// Code generated by go-swagger; DO NOT EDIT.

package api_integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExecuteCommandReader is a Reader for the ExecuteCommand structure.
type ExecuteCommandReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecuteCommandReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecuteCommandOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExecuteCommandBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExecuteCommandForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExecuteCommandNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExecuteCommandTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExecuteCommandInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /plugins/entities/execute/v1] ExecuteCommand", response, response.Code())
	}
}

// NewExecuteCommandOK creates a ExecuteCommandOK with default headers values
func NewExecuteCommandOK() *ExecuteCommandOK {
	return &ExecuteCommandOK{}
}

/*
ExecuteCommandOK describes a response with status code 200, with default header values.

OK
*/
type ExecuteCommandOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainExecuteCommandResultsV1
}

// IsSuccess returns true when this execute command o k response has a 2xx status code
func (o *ExecuteCommandOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this execute command o k response has a 3xx status code
func (o *ExecuteCommandOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute command o k response has a 4xx status code
func (o *ExecuteCommandOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute command o k response has a 5xx status code
func (o *ExecuteCommandOK) IsServerError() bool {
	return false
}

// IsCode returns true when this execute command o k response a status code equal to that given
func (o *ExecuteCommandOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the execute command o k response
func (o *ExecuteCommandOK) Code() int {
	return 200
}

func (o *ExecuteCommandOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute/v1][%d] executeCommandOK %s", 200, payload)
}

func (o *ExecuteCommandOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute/v1][%d] executeCommandOK %s", 200, payload)
}

func (o *ExecuteCommandOK) GetPayload() *models.DomainExecuteCommandResultsV1 {
	return o.Payload
}

func (o *ExecuteCommandOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainExecuteCommandResultsV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteCommandBadRequest creates a ExecuteCommandBadRequest with default headers values
func NewExecuteCommandBadRequest() *ExecuteCommandBadRequest {
	return &ExecuteCommandBadRequest{}
}

/*
ExecuteCommandBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExecuteCommandBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainExecuteCommandResultsV1
}

// IsSuccess returns true when this execute command bad request response has a 2xx status code
func (o *ExecuteCommandBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute command bad request response has a 3xx status code
func (o *ExecuteCommandBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute command bad request response has a 4xx status code
func (o *ExecuteCommandBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute command bad request response has a 5xx status code
func (o *ExecuteCommandBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this execute command bad request response a status code equal to that given
func (o *ExecuteCommandBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the execute command bad request response
func (o *ExecuteCommandBadRequest) Code() int {
	return 400
}

func (o *ExecuteCommandBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute/v1][%d] executeCommandBadRequest %s", 400, payload)
}

func (o *ExecuteCommandBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute/v1][%d] executeCommandBadRequest %s", 400, payload)
}

func (o *ExecuteCommandBadRequest) GetPayload() *models.DomainExecuteCommandResultsV1 {
	return o.Payload
}

func (o *ExecuteCommandBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainExecuteCommandResultsV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteCommandForbidden creates a ExecuteCommandForbidden with default headers values
func NewExecuteCommandForbidden() *ExecuteCommandForbidden {
	return &ExecuteCommandForbidden{}
}

/*
ExecuteCommandForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExecuteCommandForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this execute command forbidden response has a 2xx status code
func (o *ExecuteCommandForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute command forbidden response has a 3xx status code
func (o *ExecuteCommandForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute command forbidden response has a 4xx status code
func (o *ExecuteCommandForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute command forbidden response has a 5xx status code
func (o *ExecuteCommandForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this execute command forbidden response a status code equal to that given
func (o *ExecuteCommandForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the execute command forbidden response
func (o *ExecuteCommandForbidden) Code() int {
	return 403
}

func (o *ExecuteCommandForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute/v1][%d] executeCommandForbidden %s", 403, payload)
}

func (o *ExecuteCommandForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute/v1][%d] executeCommandForbidden %s", 403, payload)
}

func (o *ExecuteCommandForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ExecuteCommandForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteCommandNotFound creates a ExecuteCommandNotFound with default headers values
func NewExecuteCommandNotFound() *ExecuteCommandNotFound {
	return &ExecuteCommandNotFound{}
}

/*
ExecuteCommandNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ExecuteCommandNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainExecuteCommandResultsV1
}

// IsSuccess returns true when this execute command not found response has a 2xx status code
func (o *ExecuteCommandNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute command not found response has a 3xx status code
func (o *ExecuteCommandNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute command not found response has a 4xx status code
func (o *ExecuteCommandNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute command not found response has a 5xx status code
func (o *ExecuteCommandNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this execute command not found response a status code equal to that given
func (o *ExecuteCommandNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the execute command not found response
func (o *ExecuteCommandNotFound) Code() int {
	return 404
}

func (o *ExecuteCommandNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute/v1][%d] executeCommandNotFound %s", 404, payload)
}

func (o *ExecuteCommandNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute/v1][%d] executeCommandNotFound %s", 404, payload)
}

func (o *ExecuteCommandNotFound) GetPayload() *models.DomainExecuteCommandResultsV1 {
	return o.Payload
}

func (o *ExecuteCommandNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainExecuteCommandResultsV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteCommandTooManyRequests creates a ExecuteCommandTooManyRequests with default headers values
func NewExecuteCommandTooManyRequests() *ExecuteCommandTooManyRequests {
	return &ExecuteCommandTooManyRequests{}
}

/*
ExecuteCommandTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExecuteCommandTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute command too many requests response has a 2xx status code
func (o *ExecuteCommandTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute command too many requests response has a 3xx status code
func (o *ExecuteCommandTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute command too many requests response has a 4xx status code
func (o *ExecuteCommandTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute command too many requests response has a 5xx status code
func (o *ExecuteCommandTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this execute command too many requests response a status code equal to that given
func (o *ExecuteCommandTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the execute command too many requests response
func (o *ExecuteCommandTooManyRequests) Code() int {
	return 429
}

func (o *ExecuteCommandTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute/v1][%d] executeCommandTooManyRequests %s", 429, payload)
}

func (o *ExecuteCommandTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute/v1][%d] executeCommandTooManyRequests %s", 429, payload)
}

func (o *ExecuteCommandTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteCommandTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteCommandInternalServerError creates a ExecuteCommandInternalServerError with default headers values
func NewExecuteCommandInternalServerError() *ExecuteCommandInternalServerError {
	return &ExecuteCommandInternalServerError{}
}

/*
ExecuteCommandInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ExecuteCommandInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainExecuteCommandResultsV1
}

// IsSuccess returns true when this execute command internal server error response has a 2xx status code
func (o *ExecuteCommandInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute command internal server error response has a 3xx status code
func (o *ExecuteCommandInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute command internal server error response has a 4xx status code
func (o *ExecuteCommandInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute command internal server error response has a 5xx status code
func (o *ExecuteCommandInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this execute command internal server error response a status code equal to that given
func (o *ExecuteCommandInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the execute command internal server error response
func (o *ExecuteCommandInternalServerError) Code() int {
	return 500
}

func (o *ExecuteCommandInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute/v1][%d] executeCommandInternalServerError %s", 500, payload)
}

func (o *ExecuteCommandInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute/v1][%d] executeCommandInternalServerError %s", 500, payload)
}

func (o *ExecuteCommandInternalServerError) GetPayload() *models.DomainExecuteCommandResultsV1 {
	return o.Payload
}

func (o *ExecuteCommandInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainExecuteCommandResultsV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
