// Code generated by go-swagger; DO NOT EDIT.

package api_integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ExecuteCommandProxyReader is a Reader for the ExecuteCommandProxy structure.
type ExecuteCommandProxyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecuteCommandProxyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecuteCommandProxyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExecuteCommandProxyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExecuteCommandProxyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExecuteCommandProxyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExecuteCommandProxyTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExecuteCommandProxyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /plugins/entities/execute-proxy/v1] ExecuteCommandProxy", response, response.Code())
	}
}

// NewExecuteCommandProxyOK creates a ExecuteCommandProxyOK with default headers values
func NewExecuteCommandProxyOK() *ExecuteCommandProxyOK {
	return &ExecuteCommandProxyOK{}
}

/*
ExecuteCommandProxyOK describes a response with status code 200, with default header values.

OK
*/
type ExecuteCommandProxyOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload models.CustomType3352885422
}

// IsSuccess returns true when this execute command proxy o k response has a 2xx status code
func (o *ExecuteCommandProxyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this execute command proxy o k response has a 3xx status code
func (o *ExecuteCommandProxyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute command proxy o k response has a 4xx status code
func (o *ExecuteCommandProxyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute command proxy o k response has a 5xx status code
func (o *ExecuteCommandProxyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this execute command proxy o k response a status code equal to that given
func (o *ExecuteCommandProxyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the execute command proxy o k response
func (o *ExecuteCommandProxyOK) Code() int {
	return 200
}

func (o *ExecuteCommandProxyOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute-proxy/v1][%d] executeCommandProxyOK %s", 200, payload)
}

func (o *ExecuteCommandProxyOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute-proxy/v1][%d] executeCommandProxyOK %s", 200, payload)
}

func (o *ExecuteCommandProxyOK) GetPayload() models.CustomType3352885422 {
	return o.Payload
}

func (o *ExecuteCommandProxyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteCommandProxyBadRequest creates a ExecuteCommandProxyBadRequest with default headers values
func NewExecuteCommandProxyBadRequest() *ExecuteCommandProxyBadRequest {
	return &ExecuteCommandProxyBadRequest{}
}

/*
ExecuteCommandProxyBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExecuteCommandProxyBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainExecuteCommandResultsV1
}

// IsSuccess returns true when this execute command proxy bad request response has a 2xx status code
func (o *ExecuteCommandProxyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute command proxy bad request response has a 3xx status code
func (o *ExecuteCommandProxyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute command proxy bad request response has a 4xx status code
func (o *ExecuteCommandProxyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute command proxy bad request response has a 5xx status code
func (o *ExecuteCommandProxyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this execute command proxy bad request response a status code equal to that given
func (o *ExecuteCommandProxyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the execute command proxy bad request response
func (o *ExecuteCommandProxyBadRequest) Code() int {
	return 400
}

func (o *ExecuteCommandProxyBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute-proxy/v1][%d] executeCommandProxyBadRequest %s", 400, payload)
}

func (o *ExecuteCommandProxyBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute-proxy/v1][%d] executeCommandProxyBadRequest %s", 400, payload)
}

func (o *ExecuteCommandProxyBadRequest) GetPayload() *models.DomainExecuteCommandResultsV1 {
	return o.Payload
}

func (o *ExecuteCommandProxyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainExecuteCommandResultsV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteCommandProxyForbidden creates a ExecuteCommandProxyForbidden with default headers values
func NewExecuteCommandProxyForbidden() *ExecuteCommandProxyForbidden {
	return &ExecuteCommandProxyForbidden{}
}

/*
ExecuteCommandProxyForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExecuteCommandProxyForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this execute command proxy forbidden response has a 2xx status code
func (o *ExecuteCommandProxyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute command proxy forbidden response has a 3xx status code
func (o *ExecuteCommandProxyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute command proxy forbidden response has a 4xx status code
func (o *ExecuteCommandProxyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute command proxy forbidden response has a 5xx status code
func (o *ExecuteCommandProxyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this execute command proxy forbidden response a status code equal to that given
func (o *ExecuteCommandProxyForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the execute command proxy forbidden response
func (o *ExecuteCommandProxyForbidden) Code() int {
	return 403
}

func (o *ExecuteCommandProxyForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute-proxy/v1][%d] executeCommandProxyForbidden %s", 403, payload)
}

func (o *ExecuteCommandProxyForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute-proxy/v1][%d] executeCommandProxyForbidden %s", 403, payload)
}

func (o *ExecuteCommandProxyForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *ExecuteCommandProxyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteCommandProxyNotFound creates a ExecuteCommandProxyNotFound with default headers values
func NewExecuteCommandProxyNotFound() *ExecuteCommandProxyNotFound {
	return &ExecuteCommandProxyNotFound{}
}

/*
ExecuteCommandProxyNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ExecuteCommandProxyNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainExecuteCommandResultsV1
}

// IsSuccess returns true when this execute command proxy not found response has a 2xx status code
func (o *ExecuteCommandProxyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute command proxy not found response has a 3xx status code
func (o *ExecuteCommandProxyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute command proxy not found response has a 4xx status code
func (o *ExecuteCommandProxyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute command proxy not found response has a 5xx status code
func (o *ExecuteCommandProxyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this execute command proxy not found response a status code equal to that given
func (o *ExecuteCommandProxyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the execute command proxy not found response
func (o *ExecuteCommandProxyNotFound) Code() int {
	return 404
}

func (o *ExecuteCommandProxyNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute-proxy/v1][%d] executeCommandProxyNotFound %s", 404, payload)
}

func (o *ExecuteCommandProxyNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute-proxy/v1][%d] executeCommandProxyNotFound %s", 404, payload)
}

func (o *ExecuteCommandProxyNotFound) GetPayload() *models.DomainExecuteCommandResultsV1 {
	return o.Payload
}

func (o *ExecuteCommandProxyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainExecuteCommandResultsV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteCommandProxyTooManyRequests creates a ExecuteCommandProxyTooManyRequests with default headers values
func NewExecuteCommandProxyTooManyRequests() *ExecuteCommandProxyTooManyRequests {
	return &ExecuteCommandProxyTooManyRequests{}
}

/*
ExecuteCommandProxyTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ExecuteCommandProxyTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this execute command proxy too many requests response has a 2xx status code
func (o *ExecuteCommandProxyTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute command proxy too many requests response has a 3xx status code
func (o *ExecuteCommandProxyTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute command proxy too many requests response has a 4xx status code
func (o *ExecuteCommandProxyTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute command proxy too many requests response has a 5xx status code
func (o *ExecuteCommandProxyTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this execute command proxy too many requests response a status code equal to that given
func (o *ExecuteCommandProxyTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the execute command proxy too many requests response
func (o *ExecuteCommandProxyTooManyRequests) Code() int {
	return 429
}

func (o *ExecuteCommandProxyTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute-proxy/v1][%d] executeCommandProxyTooManyRequests %s", 429, payload)
}

func (o *ExecuteCommandProxyTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute-proxy/v1][%d] executeCommandProxyTooManyRequests %s", 429, payload)
}

func (o *ExecuteCommandProxyTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ExecuteCommandProxyTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteCommandProxyInternalServerError creates a ExecuteCommandProxyInternalServerError with default headers values
func NewExecuteCommandProxyInternalServerError() *ExecuteCommandProxyInternalServerError {
	return &ExecuteCommandProxyInternalServerError{}
}

/*
ExecuteCommandProxyInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ExecuteCommandProxyInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainExecuteCommandResultsV1
}

// IsSuccess returns true when this execute command proxy internal server error response has a 2xx status code
func (o *ExecuteCommandProxyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute command proxy internal server error response has a 3xx status code
func (o *ExecuteCommandProxyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute command proxy internal server error response has a 4xx status code
func (o *ExecuteCommandProxyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute command proxy internal server error response has a 5xx status code
func (o *ExecuteCommandProxyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this execute command proxy internal server error response a status code equal to that given
func (o *ExecuteCommandProxyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the execute command proxy internal server error response
func (o *ExecuteCommandProxyInternalServerError) Code() int {
	return 500
}

func (o *ExecuteCommandProxyInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute-proxy/v1][%d] executeCommandProxyInternalServerError %s", 500, payload)
}

func (o *ExecuteCommandProxyInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/entities/execute-proxy/v1][%d] executeCommandProxyInternalServerError %s", 500, payload)
}

func (o *ExecuteCommandProxyInternalServerError) GetPayload() *models.DomainExecuteCommandResultsV1 {
	return o.Payload
}

func (o *ExecuteCommandProxyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainExecuteCommandResultsV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
