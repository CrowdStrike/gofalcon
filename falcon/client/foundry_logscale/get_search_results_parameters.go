// Code generated by go-swagger; DO NOT EDIT.

package foundry_logscale

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSearchResultsParams creates a new GetSearchResultsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSearchResultsParams() *GetSearchResultsParams {
	return &GetSearchResultsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSearchResultsParamsWithTimeout creates a new GetSearchResultsParams object
// with the ability to set a timeout on a request.
func NewGetSearchResultsParamsWithTimeout(timeout time.Duration) *GetSearchResultsParams {
	return &GetSearchResultsParams{
		timeout: timeout,
	}
}

// NewGetSearchResultsParamsWithContext creates a new GetSearchResultsParams object
// with the ability to set a context for a request.
func NewGetSearchResultsParamsWithContext(ctx context.Context) *GetSearchResultsParams {
	return &GetSearchResultsParams{
		Context: ctx,
	}
}

// NewGetSearchResultsParamsWithHTTPClient creates a new GetSearchResultsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSearchResultsParamsWithHTTPClient(client *http.Client) *GetSearchResultsParams {
	return &GetSearchResultsParams{
		HTTPClient: client,
	}
}

/*
GetSearchResultsParams contains all the parameters to send to the API endpoint

	for the get search results operation.

	Typically these are written to a http.Request.
*/
type GetSearchResultsParams struct {

	/* AppID.

	   Application ID.
	*/
	AppID *string

	/* JobID.

	   Job ID for a previously executed async query
	*/
	JobID string

	/* Limit.

	   Maximum number of records to return.
	*/
	Limit *string

	/* Metadata.

	   Whether to include metadata in the response
	*/
	Metadata *bool

	/* Offset.

	   Starting pagination offset of records to return.
	*/
	Offset *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get search results params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSearchResultsParams) WithDefaults() *GetSearchResultsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get search results params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSearchResultsParams) SetDefaults() {
	var (
		metadataDefault = bool(false)
	)

	val := GetSearchResultsParams{
		Metadata: &metadataDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get search results params
func (o *GetSearchResultsParams) WithTimeout(timeout time.Duration) *GetSearchResultsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get search results params
func (o *GetSearchResultsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get search results params
func (o *GetSearchResultsParams) WithContext(ctx context.Context) *GetSearchResultsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get search results params
func (o *GetSearchResultsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get search results params
func (o *GetSearchResultsParams) WithHTTPClient(client *http.Client) *GetSearchResultsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get search results params
func (o *GetSearchResultsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppID adds the appID to the get search results params
func (o *GetSearchResultsParams) WithAppID(appID *string) *GetSearchResultsParams {
	o.SetAppID(appID)
	return o
}

// SetAppID adds the appId to the get search results params
func (o *GetSearchResultsParams) SetAppID(appID *string) {
	o.AppID = appID
}

// WithJobID adds the jobID to the get search results params
func (o *GetSearchResultsParams) WithJobID(jobID string) *GetSearchResultsParams {
	o.SetJobID(jobID)
	return o
}

// SetJobID adds the jobId to the get search results params
func (o *GetSearchResultsParams) SetJobID(jobID string) {
	o.JobID = jobID
}

// WithLimit adds the limit to the get search results params
func (o *GetSearchResultsParams) WithLimit(limit *string) *GetSearchResultsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get search results params
func (o *GetSearchResultsParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithMetadata adds the metadata to the get search results params
func (o *GetSearchResultsParams) WithMetadata(metadata *bool) *GetSearchResultsParams {
	o.SetMetadata(metadata)
	return o
}

// SetMetadata adds the metadata to the get search results params
func (o *GetSearchResultsParams) SetMetadata(metadata *bool) {
	o.Metadata = metadata
}

// WithOffset adds the offset to the get search results params
func (o *GetSearchResultsParams) WithOffset(offset *string) *GetSearchResultsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get search results params
func (o *GetSearchResultsParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WriteToRequest writes these params to a swagger request
func (o *GetSearchResultsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AppID != nil {

		// query param app_id
		var qrAppID string

		if o.AppID != nil {
			qrAppID = *o.AppID
		}
		qAppID := qrAppID
		if qAppID != "" {

			if err := r.SetQueryParam("app_id", qAppID); err != nil {
				return err
			}
		}
	}

	// query param job_id
	qrJobID := o.JobID
	qJobID := qrJobID
	if qJobID != "" {

		if err := r.SetQueryParam("job_id", qJobID); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Metadata != nil {

		// query param metadata
		var qrMetadata bool

		if o.Metadata != nil {
			qrMetadata = *o.Metadata
		}
		qMetadata := swag.FormatBool(qrMetadata)
		if qMetadata != "" {

			if err := r.SetQueryParam("metadata", qMetadata); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
