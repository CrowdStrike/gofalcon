// Code generated by go-swagger; DO NOT EDIT.

package foundry_logscale

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// PopulateReader is a Reader for the Populate structure.
type PopulateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PopulateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPopulateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPopulateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPopulateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPopulateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPopulateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPopulateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /loggingapi/entities/saved-searches/ingest/v1] Populate", response, response.Code())
	}
}

// NewPopulateOK creates a PopulateOK with default headers values
func NewPopulateOK() *PopulateOK {
	return &PopulateOK{}
}

/*
PopulateOK describes a response with status code 200, with default header values.

OK
*/
type PopulateOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ClientDataIngestResponseWrapperV1
}

// IsSuccess returns true when this populate o k response has a 2xx status code
func (o *PopulateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this populate o k response has a 3xx status code
func (o *PopulateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this populate o k response has a 4xx status code
func (o *PopulateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this populate o k response has a 5xx status code
func (o *PopulateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this populate o k response a status code equal to that given
func (o *PopulateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the populate o k response
func (o *PopulateOK) Code() int {
	return 200
}

func (o *PopulateOK) Error() string {
	return fmt.Sprintf("[POST /loggingapi/entities/saved-searches/ingest/v1][%d] populateOK  %+v", 200, o.Payload)
}

func (o *PopulateOK) String() string {
	return fmt.Sprintf("[POST /loggingapi/entities/saved-searches/ingest/v1][%d] populateOK  %+v", 200, o.Payload)
}

func (o *PopulateOK) GetPayload() *models.ClientDataIngestResponseWrapperV1 {
	return o.Payload
}

func (o *PopulateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ClientDataIngestResponseWrapperV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPopulateBadRequest creates a PopulateBadRequest with default headers values
func NewPopulateBadRequest() *PopulateBadRequest {
	return &PopulateBadRequest{}
}

/*
PopulateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PopulateBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this populate bad request response has a 2xx status code
func (o *PopulateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this populate bad request response has a 3xx status code
func (o *PopulateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this populate bad request response has a 4xx status code
func (o *PopulateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this populate bad request response has a 5xx status code
func (o *PopulateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this populate bad request response a status code equal to that given
func (o *PopulateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the populate bad request response
func (o *PopulateBadRequest) Code() int {
	return 400
}

func (o *PopulateBadRequest) Error() string {
	return fmt.Sprintf("[POST /loggingapi/entities/saved-searches/ingest/v1][%d] populateBadRequest  %+v", 400, o.Payload)
}

func (o *PopulateBadRequest) String() string {
	return fmt.Sprintf("[POST /loggingapi/entities/saved-searches/ingest/v1][%d] populateBadRequest  %+v", 400, o.Payload)
}

func (o *PopulateBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *PopulateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPopulateForbidden creates a PopulateForbidden with default headers values
func NewPopulateForbidden() *PopulateForbidden {
	return &PopulateForbidden{}
}

/*
PopulateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PopulateForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this populate forbidden response has a 2xx status code
func (o *PopulateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this populate forbidden response has a 3xx status code
func (o *PopulateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this populate forbidden response has a 4xx status code
func (o *PopulateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this populate forbidden response has a 5xx status code
func (o *PopulateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this populate forbidden response a status code equal to that given
func (o *PopulateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the populate forbidden response
func (o *PopulateForbidden) Code() int {
	return 403
}

func (o *PopulateForbidden) Error() string {
	return fmt.Sprintf("[POST /loggingapi/entities/saved-searches/ingest/v1][%d] populateForbidden  %+v", 403, o.Payload)
}

func (o *PopulateForbidden) String() string {
	return fmt.Sprintf("[POST /loggingapi/entities/saved-searches/ingest/v1][%d] populateForbidden  %+v", 403, o.Payload)
}

func (o *PopulateForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *PopulateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPopulateNotFound creates a PopulateNotFound with default headers values
func NewPopulateNotFound() *PopulateNotFound {
	return &PopulateNotFound{}
}

/*
PopulateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PopulateNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this populate not found response has a 2xx status code
func (o *PopulateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this populate not found response has a 3xx status code
func (o *PopulateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this populate not found response has a 4xx status code
func (o *PopulateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this populate not found response has a 5xx status code
func (o *PopulateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this populate not found response a status code equal to that given
func (o *PopulateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the populate not found response
func (o *PopulateNotFound) Code() int {
	return 404
}

func (o *PopulateNotFound) Error() string {
	return fmt.Sprintf("[POST /loggingapi/entities/saved-searches/ingest/v1][%d] populateNotFound  %+v", 404, o.Payload)
}

func (o *PopulateNotFound) String() string {
	return fmt.Sprintf("[POST /loggingapi/entities/saved-searches/ingest/v1][%d] populateNotFound  %+v", 404, o.Payload)
}

func (o *PopulateNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *PopulateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPopulateTooManyRequests creates a PopulateTooManyRequests with default headers values
func NewPopulateTooManyRequests() *PopulateTooManyRequests {
	return &PopulateTooManyRequests{}
}

/*
PopulateTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type PopulateTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this populate too many requests response has a 2xx status code
func (o *PopulateTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this populate too many requests response has a 3xx status code
func (o *PopulateTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this populate too many requests response has a 4xx status code
func (o *PopulateTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this populate too many requests response has a 5xx status code
func (o *PopulateTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this populate too many requests response a status code equal to that given
func (o *PopulateTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the populate too many requests response
func (o *PopulateTooManyRequests) Code() int {
	return 429
}

func (o *PopulateTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /loggingapi/entities/saved-searches/ingest/v1][%d] populateTooManyRequests  %+v", 429, o.Payload)
}

func (o *PopulateTooManyRequests) String() string {
	return fmt.Sprintf("[POST /loggingapi/entities/saved-searches/ingest/v1][%d] populateTooManyRequests  %+v", 429, o.Payload)
}

func (o *PopulateTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *PopulateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPopulateInternalServerError creates a PopulateInternalServerError with default headers values
func NewPopulateInternalServerError() *PopulateInternalServerError {
	return &PopulateInternalServerError{}
}

/*
PopulateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PopulateInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this populate internal server error response has a 2xx status code
func (o *PopulateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this populate internal server error response has a 3xx status code
func (o *PopulateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this populate internal server error response has a 4xx status code
func (o *PopulateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this populate internal server error response has a 5xx status code
func (o *PopulateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this populate internal server error response a status code equal to that given
func (o *PopulateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the populate internal server error response
func (o *PopulateInternalServerError) Code() int {
	return 500
}

func (o *PopulateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /loggingapi/entities/saved-searches/ingest/v1][%d] populateInternalServerError  %+v", 500, o.Payload)
}

func (o *PopulateInternalServerError) String() string {
	return fmt.Sprintf("[POST /loggingapi/entities/saved-searches/ingest/v1][%d] populateInternalServerError  %+v", 500, o.Payload)
}

func (o *PopulateInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *PopulateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
