// Code generated by go-swagger; DO NOT EDIT.

package foundry_logscale

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetSearchResultsReader is a Reader for the GetSearchResults structure.
type GetSearchResultsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSearchResultsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSearchResultsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetSearchResultsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSearchResultsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /loggingapi/entities/saved-searches/execute/v1] GetSearchResults", response, response.Code())
	}
}

// NewGetSearchResultsOK creates a GetSearchResultsOK with default headers values
func NewGetSearchResultsOK() *GetSearchResultsOK {
	return &GetSearchResultsOK{}
}

/*
GetSearchResultsOK describes a response with status code 200, with default header values.

OK
*/
type GetSearchResultsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ApidomainQueryResponseWrapperV1
}

// IsSuccess returns true when this get search results o k response has a 2xx status code
func (o *GetSearchResultsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get search results o k response has a 3xx status code
func (o *GetSearchResultsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get search results o k response has a 4xx status code
func (o *GetSearchResultsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get search results o k response has a 5xx status code
func (o *GetSearchResultsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get search results o k response a status code equal to that given
func (o *GetSearchResultsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get search results o k response
func (o *GetSearchResultsOK) Code() int {
	return 200
}

func (o *GetSearchResultsOK) Error() string {
	return fmt.Sprintf("[GET /loggingapi/entities/saved-searches/execute/v1][%d] getSearchResultsOK  %+v", 200, o.Payload)
}

func (o *GetSearchResultsOK) String() string {
	return fmt.Sprintf("[GET /loggingapi/entities/saved-searches/execute/v1][%d] getSearchResultsOK  %+v", 200, o.Payload)
}

func (o *GetSearchResultsOK) GetPayload() *models.ApidomainQueryResponseWrapperV1 {
	return o.Payload
}

func (o *GetSearchResultsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ApidomainQueryResponseWrapperV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchResultsForbidden creates a GetSearchResultsForbidden with default headers values
func NewGetSearchResultsForbidden() *GetSearchResultsForbidden {
	return &GetSearchResultsForbidden{}
}

/*
GetSearchResultsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetSearchResultsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get search results forbidden response has a 2xx status code
func (o *GetSearchResultsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get search results forbidden response has a 3xx status code
func (o *GetSearchResultsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get search results forbidden response has a 4xx status code
func (o *GetSearchResultsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get search results forbidden response has a 5xx status code
func (o *GetSearchResultsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get search results forbidden response a status code equal to that given
func (o *GetSearchResultsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get search results forbidden response
func (o *GetSearchResultsForbidden) Code() int {
	return 403
}

func (o *GetSearchResultsForbidden) Error() string {
	return fmt.Sprintf("[GET /loggingapi/entities/saved-searches/execute/v1][%d] getSearchResultsForbidden  %+v", 403, o.Payload)
}

func (o *GetSearchResultsForbidden) String() string {
	return fmt.Sprintf("[GET /loggingapi/entities/saved-searches/execute/v1][%d] getSearchResultsForbidden  %+v", 403, o.Payload)
}

func (o *GetSearchResultsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetSearchResultsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchResultsTooManyRequests creates a GetSearchResultsTooManyRequests with default headers values
func NewGetSearchResultsTooManyRequests() *GetSearchResultsTooManyRequests {
	return &GetSearchResultsTooManyRequests{}
}

/*
GetSearchResultsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetSearchResultsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get search results too many requests response has a 2xx status code
func (o *GetSearchResultsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get search results too many requests response has a 3xx status code
func (o *GetSearchResultsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get search results too many requests response has a 4xx status code
func (o *GetSearchResultsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get search results too many requests response has a 5xx status code
func (o *GetSearchResultsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get search results too many requests response a status code equal to that given
func (o *GetSearchResultsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get search results too many requests response
func (o *GetSearchResultsTooManyRequests) Code() int {
	return 429
}

func (o *GetSearchResultsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /loggingapi/entities/saved-searches/execute/v1][%d] getSearchResultsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSearchResultsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /loggingapi/entities/saved-searches/execute/v1][%d] getSearchResultsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSearchResultsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetSearchResultsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
