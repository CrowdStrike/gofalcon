// Code generated by go-swagger; DO NOT EDIT.

package foundry_logscale

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new foundry logscale API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for foundry logscale API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DownloadResults(params *DownloadResultsParams, writer io.Writer, opts ...ClientOption) (*DownloadResultsOK, error)

	Execute(params *ExecuteParams, opts ...ClientOption) (*ExecuteOK, error)

	ExecuteDynamic(params *ExecuteDynamicParams, opts ...ClientOption) (*ExecuteDynamicOK, error)

	GetSearchResults(params *GetSearchResultsParams, opts ...ClientOption) (*GetSearchResultsOK, error)

	IngestData(params *IngestDataParams, opts ...ClientOption) (*IngestDataOK, error)

	ListRepos(params *ListReposParams, opts ...ClientOption) (*ListReposOK, error)

	ListViews(params *ListViewsParams, opts ...ClientOption) (*ListViewsOK, error)

	Populate(params *PopulateParams, opts ...ClientOption) (*PopulateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DownloadResults gets the results of a saved search as a file
*/
func (a *Client) DownloadResults(params *DownloadResultsParams, writer io.Writer, opts ...ClientOption) (*DownloadResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadResultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DownloadResults",
		Method:             "GET",
		PathPattern:        "/loggingapi/entities/saved-searches/job-results-download/v1",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DownloadResultsReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownloadResultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DownloadResults: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Execute executes a saved search
*/
func (a *Client) Execute(params *ExecuteParams, opts ...ClientOption) (*ExecuteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Execute",
		Method:             "POST",
		PathPattern:        "/loggingapi/entities/saved-searches/execute/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Execute: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecuteDynamic executes a dynamic saved search
*/
func (a *Client) ExecuteDynamic(params *ExecuteDynamicParams, opts ...ClientOption) (*ExecuteDynamicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteDynamicParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecuteDynamic",
		Method:             "POST",
		PathPattern:        "/loggingapi/entities/saved-searches/execute-dynamic/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteDynamicReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteDynamicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecuteDynamic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSearchResults gets the results of a saved search
*/
func (a *Client) GetSearchResults(params *GetSearchResultsParams, opts ...ClientOption) (*GetSearchResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSearchResultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSearchResults",
		Method:             "GET",
		PathPattern:        "/loggingapi/entities/saved-searches/execute/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSearchResultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSearchResultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSearchResults: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IngestData ingests data into the application repository
*/
func (a *Client) IngestData(params *IngestDataParams, opts ...ClientOption) (*IngestDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIngestDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IngestData",
		Method:             "POST",
		PathPattern:        "/loggingapi/entities/data-ingestion/ingest/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IngestDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IngestDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for IngestData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListRepos lists available repositories and views
*/
func (a *Client) ListRepos(params *ListReposParams, opts ...ClientOption) (*ListReposOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListReposParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListRepos",
		Method:             "GET",
		PathPattern:        "/loggingapi/combined/repos/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListReposReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListReposOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListRepos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListViews lists views
*/
func (a *Client) ListViews(params *ListViewsParams, opts ...ClientOption) (*ListViewsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListViewsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListViews",
		Method:             "GET",
		PathPattern:        "/loggingapi/entities/views/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListViewsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListViewsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListViews: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Populate populates a saved search
*/
func (a *Client) Populate(params *PopulateParams, opts ...ClientOption) (*PopulateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPopulateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Populate",
		Method:             "POST",
		PathPattern:        "/loggingapi/entities/saved-searches/ingest/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PopulateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PopulateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Populate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
