// Code generated by go-swagger; DO NOT EDIT.

package foundry_logscale

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewIngestDataAsyncV1Params creates a new IngestDataAsyncV1Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewIngestDataAsyncV1Params() *IngestDataAsyncV1Params {
	return &IngestDataAsyncV1Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewIngestDataAsyncV1ParamsWithTimeout creates a new IngestDataAsyncV1Params object
// with the ability to set a timeout on a request.
func NewIngestDataAsyncV1ParamsWithTimeout(timeout time.Duration) *IngestDataAsyncV1Params {
	return &IngestDataAsyncV1Params{
		timeout: timeout,
	}
}

// NewIngestDataAsyncV1ParamsWithContext creates a new IngestDataAsyncV1Params object
// with the ability to set a context for a request.
func NewIngestDataAsyncV1ParamsWithContext(ctx context.Context) *IngestDataAsyncV1Params {
	return &IngestDataAsyncV1Params{
		Context: ctx,
	}
}

// NewIngestDataAsyncV1ParamsWithHTTPClient creates a new IngestDataAsyncV1Params object
// with the ability to set a custom HTTPClient for a request.
func NewIngestDataAsyncV1ParamsWithHTTPClient(client *http.Client) *IngestDataAsyncV1Params {
	return &IngestDataAsyncV1Params{
		HTTPClient: client,
	}
}

/*
IngestDataAsyncV1Params contains all the parameters to send to the API endpoint

	for the ingest data async v1 operation.

	Typically these are written to a http.Request.
*/
type IngestDataAsyncV1Params struct {

	/* DataFile.

	   Data file to ingest
	*/
	DataFile runtime.NamedReadCloser

	/* Repo.

	   Repository name if not part of a foundry app
	*/
	Repo *string

	/* Tag.

	   Custom tag for ingested data in the form tag:value
	*/
	Tag []string

	/* TagSource.

	   Tag the data with the specified source
	*/
	TagSource *string

	/* TestData.

	   Tag the data with test-ingest
	*/
	TestData *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the ingest data async v1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IngestDataAsyncV1Params) WithDefaults() *IngestDataAsyncV1Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the ingest data async v1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IngestDataAsyncV1Params) SetDefaults() {
	var (
		testDataDefault = bool(false)
	)

	val := IngestDataAsyncV1Params{
		TestData: &testDataDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the ingest data async v1 params
func (o *IngestDataAsyncV1Params) WithTimeout(timeout time.Duration) *IngestDataAsyncV1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the ingest data async v1 params
func (o *IngestDataAsyncV1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the ingest data async v1 params
func (o *IngestDataAsyncV1Params) WithContext(ctx context.Context) *IngestDataAsyncV1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the ingest data async v1 params
func (o *IngestDataAsyncV1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the ingest data async v1 params
func (o *IngestDataAsyncV1Params) WithHTTPClient(client *http.Client) *IngestDataAsyncV1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the ingest data async v1 params
func (o *IngestDataAsyncV1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDataFile adds the dataFile to the ingest data async v1 params
func (o *IngestDataAsyncV1Params) WithDataFile(dataFile runtime.NamedReadCloser) *IngestDataAsyncV1Params {
	o.SetDataFile(dataFile)
	return o
}

// SetDataFile adds the dataFile to the ingest data async v1 params
func (o *IngestDataAsyncV1Params) SetDataFile(dataFile runtime.NamedReadCloser) {
	o.DataFile = dataFile
}

// WithRepo adds the repo to the ingest data async v1 params
func (o *IngestDataAsyncV1Params) WithRepo(repo *string) *IngestDataAsyncV1Params {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the ingest data async v1 params
func (o *IngestDataAsyncV1Params) SetRepo(repo *string) {
	o.Repo = repo
}

// WithTag adds the tag to the ingest data async v1 params
func (o *IngestDataAsyncV1Params) WithTag(tag []string) *IngestDataAsyncV1Params {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the ingest data async v1 params
func (o *IngestDataAsyncV1Params) SetTag(tag []string) {
	o.Tag = tag
}

// WithTagSource adds the tagSource to the ingest data async v1 params
func (o *IngestDataAsyncV1Params) WithTagSource(tagSource *string) *IngestDataAsyncV1Params {
	o.SetTagSource(tagSource)
	return o
}

// SetTagSource adds the tagSource to the ingest data async v1 params
func (o *IngestDataAsyncV1Params) SetTagSource(tagSource *string) {
	o.TagSource = tagSource
}

// WithTestData adds the testData to the ingest data async v1 params
func (o *IngestDataAsyncV1Params) WithTestData(testData *bool) *IngestDataAsyncV1Params {
	o.SetTestData(testData)
	return o
}

// SetTestData adds the testData to the ingest data async v1 params
func (o *IngestDataAsyncV1Params) SetTestData(testData *bool) {
	o.TestData = testData
}

// WriteToRequest writes these params to a swagger request
func (o *IngestDataAsyncV1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	// form file param data_file
	if err := r.SetFileParam("data_file", o.DataFile); err != nil {
		return err
	}

	if o.Repo != nil {

		// form param repo
		var frRepo string
		if o.Repo != nil {
			frRepo = *o.Repo
		}
		fRepo := frRepo
		if fRepo != "" {
			if err := r.SetFormParam("repo", fRepo); err != nil {
				return err
			}
		}
	}

	if o.Tag != nil {

		// binding items for tag
		joinedTag := o.bindParamTag(reg)

		// form array param tag
		if err := r.SetFormParam("tag", joinedTag...); err != nil {
			return err
		}
	}

	if o.TagSource != nil {

		// form param tag_source
		var frTagSource string
		if o.TagSource != nil {
			frTagSource = *o.TagSource
		}
		fTagSource := frTagSource
		if fTagSource != "" {
			if err := r.SetFormParam("tag_source", fTagSource); err != nil {
				return err
			}
		}
	}

	if o.TestData != nil {

		// form param test_data
		var frTestData bool
		if o.TestData != nil {
			frTestData = *o.TestData
		}
		fTestData := swag.FormatBool(frTestData)
		if fTestData != "" {
			if err := r.SetFormParam("test_data", fTestData); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamIngestDataAsyncV1 binds the parameter tag
func (o *IngestDataAsyncV1Params) bindParamTag(formats strfmt.Registry) []string {
	tagIR := o.Tag

	var tagIC []string
	for _, tagIIR := range tagIR { // explode []string

		tagIIV := tagIIR // string as string
		tagIC = append(tagIC, tagIIV)
	}

	// items.CollectionFormat: ""
	tagIS := swag.JoinByFormat(tagIC, "")

	return tagIS
}
