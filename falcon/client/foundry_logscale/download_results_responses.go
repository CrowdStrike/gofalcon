// Code generated by go-swagger; DO NOT EDIT.

package foundry_logscale

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// DownloadResultsReader is a Reader for the DownloadResults structure.
type DownloadResultsReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *DownloadResultsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDownloadResultsOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDownloadResultsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDownloadResultsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDownloadResultsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDownloadResultsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDownloadResultsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDownloadResultsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /loggingapi/entities/saved-searches/job-results-download/v1] DownloadResults", response, response.Code())
	}
}

// NewDownloadResultsOK creates a DownloadResultsOK with default headers values
func NewDownloadResultsOK(writer io.Writer) *DownloadResultsOK {
	return &DownloadResultsOK{

		Payload: writer,
	}
}

/*
DownloadResultsOK describes a response with status code 200, with default header values.

OK
*/
type DownloadResultsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload io.Writer
}

// IsSuccess returns true when this download results o k response has a 2xx status code
func (o *DownloadResultsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this download results o k response has a 3xx status code
func (o *DownloadResultsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download results o k response has a 4xx status code
func (o *DownloadResultsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this download results o k response has a 5xx status code
func (o *DownloadResultsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this download results o k response a status code equal to that given
func (o *DownloadResultsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the download results o k response
func (o *DownloadResultsOK) Code() int {
	return 200
}

func (o *DownloadResultsOK) Error() string {
	return fmt.Sprintf("[GET /loggingapi/entities/saved-searches/job-results-download/v1][%d] downloadResultsOK  %+v", 200, o.Payload)
}

func (o *DownloadResultsOK) String() string {
	return fmt.Sprintf("[GET /loggingapi/entities/saved-searches/job-results-download/v1][%d] downloadResultsOK  %+v", 200, o.Payload)
}

func (o *DownloadResultsOK) GetPayload() io.Writer {
	return o.Payload
}

func (o *DownloadResultsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadResultsBadRequest creates a DownloadResultsBadRequest with default headers values
func NewDownloadResultsBadRequest() *DownloadResultsBadRequest {
	return &DownloadResultsBadRequest{}
}

/*
DownloadResultsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DownloadResultsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIEntitiesResponse
}

// IsSuccess returns true when this download results bad request response has a 2xx status code
func (o *DownloadResultsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download results bad request response has a 3xx status code
func (o *DownloadResultsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download results bad request response has a 4xx status code
func (o *DownloadResultsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this download results bad request response has a 5xx status code
func (o *DownloadResultsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this download results bad request response a status code equal to that given
func (o *DownloadResultsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the download results bad request response
func (o *DownloadResultsBadRequest) Code() int {
	return 400
}

func (o *DownloadResultsBadRequest) Error() string {
	return fmt.Sprintf("[GET /loggingapi/entities/saved-searches/job-results-download/v1][%d] downloadResultsBadRequest  %+v", 400, o.Payload)
}

func (o *DownloadResultsBadRequest) String() string {
	return fmt.Sprintf("[GET /loggingapi/entities/saved-searches/job-results-download/v1][%d] downloadResultsBadRequest  %+v", 400, o.Payload)
}

func (o *DownloadResultsBadRequest) GetPayload() *models.APIEntitiesResponse {
	return o.Payload
}

func (o *DownloadResultsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadResultsUnauthorized creates a DownloadResultsUnauthorized with default headers values
func NewDownloadResultsUnauthorized() *DownloadResultsUnauthorized {
	return &DownloadResultsUnauthorized{}
}

/*
DownloadResultsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DownloadResultsUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIEntitiesResponse
}

// IsSuccess returns true when this download results unauthorized response has a 2xx status code
func (o *DownloadResultsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download results unauthorized response has a 3xx status code
func (o *DownloadResultsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download results unauthorized response has a 4xx status code
func (o *DownloadResultsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this download results unauthorized response has a 5xx status code
func (o *DownloadResultsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this download results unauthorized response a status code equal to that given
func (o *DownloadResultsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the download results unauthorized response
func (o *DownloadResultsUnauthorized) Code() int {
	return 401
}

func (o *DownloadResultsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /loggingapi/entities/saved-searches/job-results-download/v1][%d] downloadResultsUnauthorized  %+v", 401, o.Payload)
}

func (o *DownloadResultsUnauthorized) String() string {
	return fmt.Sprintf("[GET /loggingapi/entities/saved-searches/job-results-download/v1][%d] downloadResultsUnauthorized  %+v", 401, o.Payload)
}

func (o *DownloadResultsUnauthorized) GetPayload() *models.APIEntitiesResponse {
	return o.Payload
}

func (o *DownloadResultsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadResultsForbidden creates a DownloadResultsForbidden with default headers values
func NewDownloadResultsForbidden() *DownloadResultsForbidden {
	return &DownloadResultsForbidden{}
}

/*
DownloadResultsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DownloadResultsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this download results forbidden response has a 2xx status code
func (o *DownloadResultsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download results forbidden response has a 3xx status code
func (o *DownloadResultsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download results forbidden response has a 4xx status code
func (o *DownloadResultsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this download results forbidden response has a 5xx status code
func (o *DownloadResultsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this download results forbidden response a status code equal to that given
func (o *DownloadResultsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the download results forbidden response
func (o *DownloadResultsForbidden) Code() int {
	return 403
}

func (o *DownloadResultsForbidden) Error() string {
	return fmt.Sprintf("[GET /loggingapi/entities/saved-searches/job-results-download/v1][%d] downloadResultsForbidden  %+v", 403, o.Payload)
}

func (o *DownloadResultsForbidden) String() string {
	return fmt.Sprintf("[GET /loggingapi/entities/saved-searches/job-results-download/v1][%d] downloadResultsForbidden  %+v", 403, o.Payload)
}

func (o *DownloadResultsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DownloadResultsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadResultsNotFound creates a DownloadResultsNotFound with default headers values
func NewDownloadResultsNotFound() *DownloadResultsNotFound {
	return &DownloadResultsNotFound{}
}

/*
DownloadResultsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DownloadResultsNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIEntitiesResponse
}

// IsSuccess returns true when this download results not found response has a 2xx status code
func (o *DownloadResultsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download results not found response has a 3xx status code
func (o *DownloadResultsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download results not found response has a 4xx status code
func (o *DownloadResultsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this download results not found response has a 5xx status code
func (o *DownloadResultsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this download results not found response a status code equal to that given
func (o *DownloadResultsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the download results not found response
func (o *DownloadResultsNotFound) Code() int {
	return 404
}

func (o *DownloadResultsNotFound) Error() string {
	return fmt.Sprintf("[GET /loggingapi/entities/saved-searches/job-results-download/v1][%d] downloadResultsNotFound  %+v", 404, o.Payload)
}

func (o *DownloadResultsNotFound) String() string {
	return fmt.Sprintf("[GET /loggingapi/entities/saved-searches/job-results-download/v1][%d] downloadResultsNotFound  %+v", 404, o.Payload)
}

func (o *DownloadResultsNotFound) GetPayload() *models.APIEntitiesResponse {
	return o.Payload
}

func (o *DownloadResultsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadResultsTooManyRequests creates a DownloadResultsTooManyRequests with default headers values
func NewDownloadResultsTooManyRequests() *DownloadResultsTooManyRequests {
	return &DownloadResultsTooManyRequests{}
}

/*
DownloadResultsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type DownloadResultsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this download results too many requests response has a 2xx status code
func (o *DownloadResultsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download results too many requests response has a 3xx status code
func (o *DownloadResultsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download results too many requests response has a 4xx status code
func (o *DownloadResultsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this download results too many requests response has a 5xx status code
func (o *DownloadResultsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this download results too many requests response a status code equal to that given
func (o *DownloadResultsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the download results too many requests response
func (o *DownloadResultsTooManyRequests) Code() int {
	return 429
}

func (o *DownloadResultsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /loggingapi/entities/saved-searches/job-results-download/v1][%d] downloadResultsTooManyRequests  %+v", 429, o.Payload)
}

func (o *DownloadResultsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /loggingapi/entities/saved-searches/job-results-download/v1][%d] downloadResultsTooManyRequests  %+v", 429, o.Payload)
}

func (o *DownloadResultsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DownloadResultsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadResultsInternalServerError creates a DownloadResultsInternalServerError with default headers values
func NewDownloadResultsInternalServerError() *DownloadResultsInternalServerError {
	return &DownloadResultsInternalServerError{}
}

/*
DownloadResultsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DownloadResultsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIEntitiesResponse
}

// IsSuccess returns true when this download results internal server error response has a 2xx status code
func (o *DownloadResultsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download results internal server error response has a 3xx status code
func (o *DownloadResultsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download results internal server error response has a 4xx status code
func (o *DownloadResultsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this download results internal server error response has a 5xx status code
func (o *DownloadResultsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this download results internal server error response a status code equal to that given
func (o *DownloadResultsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the download results internal server error response
func (o *DownloadResultsInternalServerError) Code() int {
	return 500
}

func (o *DownloadResultsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /loggingapi/entities/saved-searches/job-results-download/v1][%d] downloadResultsInternalServerError  %+v", 500, o.Payload)
}

func (o *DownloadResultsInternalServerError) String() string {
	return fmt.Sprintf("[GET /loggingapi/entities/saved-searches/job-results-download/v1][%d] downloadResultsInternalServerError  %+v", 500, o.Payload)
}

func (o *DownloadResultsInternalServerError) GetPayload() *models.APIEntitiesResponse {
	return o.Payload
}

func (o *DownloadResultsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
