// Code generated by go-swagger; DO NOT EDIT.

package foundry_logscale

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// NewCreateSavedSearchesExecuteAltV1Params creates a new CreateSavedSearchesExecuteAltV1Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateSavedSearchesExecuteAltV1Params() *CreateSavedSearchesExecuteAltV1Params {
	return &CreateSavedSearchesExecuteAltV1Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateSavedSearchesExecuteAltV1ParamsWithTimeout creates a new CreateSavedSearchesExecuteAltV1Params object
// with the ability to set a timeout on a request.
func NewCreateSavedSearchesExecuteAltV1ParamsWithTimeout(timeout time.Duration) *CreateSavedSearchesExecuteAltV1Params {
	return &CreateSavedSearchesExecuteAltV1Params{
		timeout: timeout,
	}
}

// NewCreateSavedSearchesExecuteAltV1ParamsWithContext creates a new CreateSavedSearchesExecuteAltV1Params object
// with the ability to set a context for a request.
func NewCreateSavedSearchesExecuteAltV1ParamsWithContext(ctx context.Context) *CreateSavedSearchesExecuteAltV1Params {
	return &CreateSavedSearchesExecuteAltV1Params{
		Context: ctx,
	}
}

// NewCreateSavedSearchesExecuteAltV1ParamsWithHTTPClient creates a new CreateSavedSearchesExecuteAltV1Params object
// with the ability to set a custom HTTPClient for a request.
func NewCreateSavedSearchesExecuteAltV1ParamsWithHTTPClient(client *http.Client) *CreateSavedSearchesExecuteAltV1Params {
	return &CreateSavedSearchesExecuteAltV1Params{
		HTTPClient: client,
	}
}

/*
CreateSavedSearchesExecuteAltV1Params contains all the parameters to send to the API endpoint

	for the create saved searches execute alt v1 operation.

	Typically these are written to a http.Request.
*/
type CreateSavedSearchesExecuteAltV1Params struct {

	/* AppID.

	   Application ID.
	*/
	AppID *string

	// Body.
	Body *models.ApidomainSavedSearchExecuteRequestV1

	/* Detailed.

	   Whether to include search field details
	*/
	Detailed *bool

	/* IncludeTestData.

	   Include test data when executing searches
	*/
	IncludeTestData *bool

	/* InferJSONTypes.

	   Whether to try to infer data types in json event response instead of returning map[string]string
	*/
	InferJSONTypes *bool

	/* MatchResponseSchema.

	   Whether to validate search results against their schema
	*/
	MatchResponseSchema *bool

	/* Metadata.

	   Whether to include metadata in the response
	*/
	Metadata *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create saved searches execute alt v1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateSavedSearchesExecuteAltV1Params) WithDefaults() *CreateSavedSearchesExecuteAltV1Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create saved searches execute alt v1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateSavedSearchesExecuteAltV1Params) SetDefaults() {
	var (
		detailedDefault = bool(false)

		includeTestDataDefault = bool(false)

		inferJSONTypesDefault = bool(false)

		matchResponseSchemaDefault = bool(false)

		metadataDefault = bool(false)
	)

	val := CreateSavedSearchesExecuteAltV1Params{
		Detailed:            &detailedDefault,
		IncludeTestData:     &includeTestDataDefault,
		InferJSONTypes:      &inferJSONTypesDefault,
		MatchResponseSchema: &matchResponseSchemaDefault,
		Metadata:            &metadataDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the create saved searches execute alt v1 params
func (o *CreateSavedSearchesExecuteAltV1Params) WithTimeout(timeout time.Duration) *CreateSavedSearchesExecuteAltV1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create saved searches execute alt v1 params
func (o *CreateSavedSearchesExecuteAltV1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create saved searches execute alt v1 params
func (o *CreateSavedSearchesExecuteAltV1Params) WithContext(ctx context.Context) *CreateSavedSearchesExecuteAltV1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create saved searches execute alt v1 params
func (o *CreateSavedSearchesExecuteAltV1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create saved searches execute alt v1 params
func (o *CreateSavedSearchesExecuteAltV1Params) WithHTTPClient(client *http.Client) *CreateSavedSearchesExecuteAltV1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create saved searches execute alt v1 params
func (o *CreateSavedSearchesExecuteAltV1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppID adds the appID to the create saved searches execute alt v1 params
func (o *CreateSavedSearchesExecuteAltV1Params) WithAppID(appID *string) *CreateSavedSearchesExecuteAltV1Params {
	o.SetAppID(appID)
	return o
}

// SetAppID adds the appId to the create saved searches execute alt v1 params
func (o *CreateSavedSearchesExecuteAltV1Params) SetAppID(appID *string) {
	o.AppID = appID
}

// WithBody adds the body to the create saved searches execute alt v1 params
func (o *CreateSavedSearchesExecuteAltV1Params) WithBody(body *models.ApidomainSavedSearchExecuteRequestV1) *CreateSavedSearchesExecuteAltV1Params {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the create saved searches execute alt v1 params
func (o *CreateSavedSearchesExecuteAltV1Params) SetBody(body *models.ApidomainSavedSearchExecuteRequestV1) {
	o.Body = body
}

// WithDetailed adds the detailed to the create saved searches execute alt v1 params
func (o *CreateSavedSearchesExecuteAltV1Params) WithDetailed(detailed *bool) *CreateSavedSearchesExecuteAltV1Params {
	o.SetDetailed(detailed)
	return o
}

// SetDetailed adds the detailed to the create saved searches execute alt v1 params
func (o *CreateSavedSearchesExecuteAltV1Params) SetDetailed(detailed *bool) {
	o.Detailed = detailed
}

// WithIncludeTestData adds the includeTestData to the create saved searches execute alt v1 params
func (o *CreateSavedSearchesExecuteAltV1Params) WithIncludeTestData(includeTestData *bool) *CreateSavedSearchesExecuteAltV1Params {
	o.SetIncludeTestData(includeTestData)
	return o
}

// SetIncludeTestData adds the includeTestData to the create saved searches execute alt v1 params
func (o *CreateSavedSearchesExecuteAltV1Params) SetIncludeTestData(includeTestData *bool) {
	o.IncludeTestData = includeTestData
}

// WithInferJSONTypes adds the inferJSONTypes to the create saved searches execute alt v1 params
func (o *CreateSavedSearchesExecuteAltV1Params) WithInferJSONTypes(inferJSONTypes *bool) *CreateSavedSearchesExecuteAltV1Params {
	o.SetInferJSONTypes(inferJSONTypes)
	return o
}

// SetInferJSONTypes adds the inferJsonTypes to the create saved searches execute alt v1 params
func (o *CreateSavedSearchesExecuteAltV1Params) SetInferJSONTypes(inferJSONTypes *bool) {
	o.InferJSONTypes = inferJSONTypes
}

// WithMatchResponseSchema adds the matchResponseSchema to the create saved searches execute alt v1 params
func (o *CreateSavedSearchesExecuteAltV1Params) WithMatchResponseSchema(matchResponseSchema *bool) *CreateSavedSearchesExecuteAltV1Params {
	o.SetMatchResponseSchema(matchResponseSchema)
	return o
}

// SetMatchResponseSchema adds the matchResponseSchema to the create saved searches execute alt v1 params
func (o *CreateSavedSearchesExecuteAltV1Params) SetMatchResponseSchema(matchResponseSchema *bool) {
	o.MatchResponseSchema = matchResponseSchema
}

// WithMetadata adds the metadata to the create saved searches execute alt v1 params
func (o *CreateSavedSearchesExecuteAltV1Params) WithMetadata(metadata *bool) *CreateSavedSearchesExecuteAltV1Params {
	o.SetMetadata(metadata)
	return o
}

// SetMetadata adds the metadata to the create saved searches execute alt v1 params
func (o *CreateSavedSearchesExecuteAltV1Params) SetMetadata(metadata *bool) {
	o.Metadata = metadata
}

// WriteToRequest writes these params to a swagger request
func (o *CreateSavedSearchesExecuteAltV1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AppID != nil {

		// query param app_id
		var qrAppID string

		if o.AppID != nil {
			qrAppID = *o.AppID
		}
		qAppID := qrAppID
		if qAppID != "" {

			if err := r.SetQueryParam("app_id", qAppID); err != nil {
				return err
			}
		}
	}
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.Detailed != nil {

		// query param detailed
		var qrDetailed bool

		if o.Detailed != nil {
			qrDetailed = *o.Detailed
		}
		qDetailed := swag.FormatBool(qrDetailed)
		if qDetailed != "" {

			if err := r.SetQueryParam("detailed", qDetailed); err != nil {
				return err
			}
		}
	}

	if o.IncludeTestData != nil {

		// query param include_test_data
		var qrIncludeTestData bool

		if o.IncludeTestData != nil {
			qrIncludeTestData = *o.IncludeTestData
		}
		qIncludeTestData := swag.FormatBool(qrIncludeTestData)
		if qIncludeTestData != "" {

			if err := r.SetQueryParam("include_test_data", qIncludeTestData); err != nil {
				return err
			}
		}
	}

	if o.InferJSONTypes != nil {

		// query param infer_json_types
		var qrInferJSONTypes bool

		if o.InferJSONTypes != nil {
			qrInferJSONTypes = *o.InferJSONTypes
		}
		qInferJSONTypes := swag.FormatBool(qrInferJSONTypes)
		if qInferJSONTypes != "" {

			if err := r.SetQueryParam("infer_json_types", qInferJSONTypes); err != nil {
				return err
			}
		}
	}

	if o.MatchResponseSchema != nil {

		// query param match_response_schema
		var qrMatchResponseSchema bool

		if o.MatchResponseSchema != nil {
			qrMatchResponseSchema = *o.MatchResponseSchema
		}
		qMatchResponseSchema := swag.FormatBool(qrMatchResponseSchema)
		if qMatchResponseSchema != "" {

			if err := r.SetQueryParam("match_response_schema", qMatchResponseSchema); err != nil {
				return err
			}
		}
	}

	if o.Metadata != nil {

		// query param metadata
		var qrMetadata bool

		if o.Metadata != nil {
			qrMetadata = *o.Metadata
		}
		qMetadata := swag.FormatBool(qrMetadata)
		if qMetadata != "" {

			if err := r.SetQueryParam("metadata", qMetadata); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
