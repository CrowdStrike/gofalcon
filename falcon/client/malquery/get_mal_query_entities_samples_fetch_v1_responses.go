// Code generated by go-swagger; DO NOT EDIT.

package malquery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetMalQueryEntitiesSamplesFetchV1Reader is a Reader for the GetMalQueryEntitiesSamplesFetchV1 structure.
type GetMalQueryEntitiesSamplesFetchV1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMalQueryEntitiesSamplesFetchV1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMalQueryEntitiesSamplesFetchV1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetMalQueryEntitiesSamplesFetchV1Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetMalQueryEntitiesSamplesFetchV1Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetMalQueryEntitiesSamplesFetchV1TooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetMalQueryEntitiesSamplesFetchV1InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetMalQueryEntitiesSamplesFetchV1Default(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetMalQueryEntitiesSamplesFetchV1OK creates a GetMalQueryEntitiesSamplesFetchV1OK with default headers values
func NewGetMalQueryEntitiesSamplesFetchV1OK() *GetMalQueryEntitiesSamplesFetchV1OK {
	return &GetMalQueryEntitiesSamplesFetchV1OK{}
}

/*GetMalQueryEntitiesSamplesFetchV1OK handles this case with default header values.

The zip archive if it's ready for download
*/
type GetMalQueryEntitiesSamplesFetchV1OK struct {
	/*Request limit per minute.
	 */
	XRateLimitLimit int64
	/*The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

func (o *GetMalQueryEntitiesSamplesFetchV1OK) Error() string {
	return fmt.Sprintf("[GET /malquery/entities/samples-fetch/v1][%d] getMalQueryEntitiesSamplesFetchV1OK ", 200)
}

func (o *GetMalQueryEntitiesSamplesFetchV1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-RateLimit-Limit
	xRateLimitLimit, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Limit"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Limit", "header", "int64", response.GetHeader("X-RateLimit-Limit"))
	}
	o.XRateLimitLimit = xRateLimitLimit

	// response header X-RateLimit-Remaining
	xRateLimitRemaining, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Remaining"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", response.GetHeader("X-RateLimit-Remaining"))
	}
	o.XRateLimitRemaining = xRateLimitRemaining

	return nil
}

// NewGetMalQueryEntitiesSamplesFetchV1Unauthorized creates a GetMalQueryEntitiesSamplesFetchV1Unauthorized with default headers values
func NewGetMalQueryEntitiesSamplesFetchV1Unauthorized() *GetMalQueryEntitiesSamplesFetchV1Unauthorized {
	return &GetMalQueryEntitiesSamplesFetchV1Unauthorized{}
}

/*GetMalQueryEntitiesSamplesFetchV1Unauthorized handles this case with default header values.

Unauthorized
*/
type GetMalQueryEntitiesSamplesFetchV1Unauthorized struct {
	/*Request limit per minute.
	 */
	XRateLimitLimit int64
	/*The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaErrorsOnly
}

func (o *GetMalQueryEntitiesSamplesFetchV1Unauthorized) Error() string {
	return fmt.Sprintf("[GET /malquery/entities/samples-fetch/v1][%d] getMalQueryEntitiesSamplesFetchV1Unauthorized  %+v", 401, o.Payload)
}

func (o *GetMalQueryEntitiesSamplesFetchV1Unauthorized) GetPayload() *models.MsaErrorsOnly {
	return o.Payload
}

func (o *GetMalQueryEntitiesSamplesFetchV1Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-RateLimit-Limit
	xRateLimitLimit, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Limit"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Limit", "header", "int64", response.GetHeader("X-RateLimit-Limit"))
	}
	o.XRateLimitLimit = xRateLimitLimit

	// response header X-RateLimit-Remaining
	xRateLimitRemaining, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Remaining"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", response.GetHeader("X-RateLimit-Remaining"))
	}
	o.XRateLimitRemaining = xRateLimitRemaining

	o.Payload = new(models.MsaErrorsOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMalQueryEntitiesSamplesFetchV1Forbidden creates a GetMalQueryEntitiesSamplesFetchV1Forbidden with default headers values
func NewGetMalQueryEntitiesSamplesFetchV1Forbidden() *GetMalQueryEntitiesSamplesFetchV1Forbidden {
	return &GetMalQueryEntitiesSamplesFetchV1Forbidden{}
}

/*GetMalQueryEntitiesSamplesFetchV1Forbidden handles this case with default header values.

Forbidden
*/
type GetMalQueryEntitiesSamplesFetchV1Forbidden struct {
	/*Request limit per minute.
	 */
	XRateLimitLimit int64
	/*The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaErrorsOnly
}

func (o *GetMalQueryEntitiesSamplesFetchV1Forbidden) Error() string {
	return fmt.Sprintf("[GET /malquery/entities/samples-fetch/v1][%d] getMalQueryEntitiesSamplesFetchV1Forbidden  %+v", 403, o.Payload)
}

func (o *GetMalQueryEntitiesSamplesFetchV1Forbidden) GetPayload() *models.MsaErrorsOnly {
	return o.Payload
}

func (o *GetMalQueryEntitiesSamplesFetchV1Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-RateLimit-Limit
	xRateLimitLimit, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Limit"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Limit", "header", "int64", response.GetHeader("X-RateLimit-Limit"))
	}
	o.XRateLimitLimit = xRateLimitLimit

	// response header X-RateLimit-Remaining
	xRateLimitRemaining, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Remaining"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", response.GetHeader("X-RateLimit-Remaining"))
	}
	o.XRateLimitRemaining = xRateLimitRemaining

	o.Payload = new(models.MsaErrorsOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMalQueryEntitiesSamplesFetchV1TooManyRequests creates a GetMalQueryEntitiesSamplesFetchV1TooManyRequests with default headers values
func NewGetMalQueryEntitiesSamplesFetchV1TooManyRequests() *GetMalQueryEntitiesSamplesFetchV1TooManyRequests {
	return &GetMalQueryEntitiesSamplesFetchV1TooManyRequests{}
}

/*GetMalQueryEntitiesSamplesFetchV1TooManyRequests handles this case with default header values.

Too Many Requests
*/
type GetMalQueryEntitiesSamplesFetchV1TooManyRequests struct {
	/*Request limit per minute.
	 */
	XRateLimitLimit int64
	/*The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
	/*Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

func (o *GetMalQueryEntitiesSamplesFetchV1TooManyRequests) Error() string {
	return fmt.Sprintf("[GET /malquery/entities/samples-fetch/v1][%d] getMalQueryEntitiesSamplesFetchV1TooManyRequests  %+v", 429, o.Payload)
}

func (o *GetMalQueryEntitiesSamplesFetchV1TooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetMalQueryEntitiesSamplesFetchV1TooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-RateLimit-Limit
	xRateLimitLimit, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Limit"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Limit", "header", "int64", response.GetHeader("X-RateLimit-Limit"))
	}
	o.XRateLimitLimit = xRateLimitLimit

	// response header X-RateLimit-Remaining
	xRateLimitRemaining, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Remaining"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", response.GetHeader("X-RateLimit-Remaining"))
	}
	o.XRateLimitRemaining = xRateLimitRemaining

	// response header X-RateLimit-RetryAfter
	xRateLimitRetryAfter, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-RetryAfter"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", response.GetHeader("X-RateLimit-RetryAfter"))
	}
	o.XRateLimitRetryAfter = xRateLimitRetryAfter

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMalQueryEntitiesSamplesFetchV1InternalServerError creates a GetMalQueryEntitiesSamplesFetchV1InternalServerError with default headers values
func NewGetMalQueryEntitiesSamplesFetchV1InternalServerError() *GetMalQueryEntitiesSamplesFetchV1InternalServerError {
	return &GetMalQueryEntitiesSamplesFetchV1InternalServerError{}
}

/*GetMalQueryEntitiesSamplesFetchV1InternalServerError handles this case with default header values.

Internal Server Error
*/
type GetMalQueryEntitiesSamplesFetchV1InternalServerError struct {
	/*Request limit per minute.
	 */
	XRateLimitLimit int64
	/*The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MalqueryExternalQueryResponse
}

func (o *GetMalQueryEntitiesSamplesFetchV1InternalServerError) Error() string {
	return fmt.Sprintf("[GET /malquery/entities/samples-fetch/v1][%d] getMalQueryEntitiesSamplesFetchV1InternalServerError  %+v", 500, o.Payload)
}

func (o *GetMalQueryEntitiesSamplesFetchV1InternalServerError) GetPayload() *models.MalqueryExternalQueryResponse {
	return o.Payload
}

func (o *GetMalQueryEntitiesSamplesFetchV1InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-RateLimit-Limit
	xRateLimitLimit, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Limit"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Limit", "header", "int64", response.GetHeader("X-RateLimit-Limit"))
	}
	o.XRateLimitLimit = xRateLimitLimit

	// response header X-RateLimit-Remaining
	xRateLimitRemaining, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Remaining"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", response.GetHeader("X-RateLimit-Remaining"))
	}
	o.XRateLimitRemaining = xRateLimitRemaining

	o.Payload = new(models.MalqueryExternalQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMalQueryEntitiesSamplesFetchV1Default creates a GetMalQueryEntitiesSamplesFetchV1Default with default headers values
func NewGetMalQueryEntitiesSamplesFetchV1Default(code int) *GetMalQueryEntitiesSamplesFetchV1Default {
	return &GetMalQueryEntitiesSamplesFetchV1Default{
		_statusCode: code,
	}
}

/*GetMalQueryEntitiesSamplesFetchV1Default handles this case with default header values.

The zip archive if it's ready for download
*/
type GetMalQueryEntitiesSamplesFetchV1Default struct {
	_statusCode int
}

// Code gets the status code for the get mal query entities samples fetch v1 default response
func (o *GetMalQueryEntitiesSamplesFetchV1Default) Code() int {
	return o._statusCode
}

func (o *GetMalQueryEntitiesSamplesFetchV1Default) Error() string {
	return fmt.Sprintf("[GET /malquery/entities/samples-fetch/v1][%d] GetMalQueryEntitiesSamplesFetchV1 default ", o._statusCode)
}

func (o *GetMalQueryEntitiesSamplesFetchV1Default) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
