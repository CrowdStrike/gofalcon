// Code generated by go-swagger; DO NOT EDIT.

package cloud_security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CreateCloudGroupExternalReader is a Reader for the CreateCloudGroupExternal structure.
type CreateCloudGroupExternalReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateCloudGroupExternalReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateCloudGroupExternalOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateCloudGroupExternalBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateCloudGroupExternalUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateCloudGroupExternalForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateCloudGroupExternalNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewCreateCloudGroupExternalPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateCloudGroupExternalTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateCloudGroupExternalInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cloud-security/entities/cloud-groups/v1] CreateCloudGroupExternal", response, response.Code())
	}
}

// NewCreateCloudGroupExternalOK creates a CreateCloudGroupExternalOK with default headers values
func NewCreateCloudGroupExternalOK() *CreateCloudGroupExternalOK {
	return &CreateCloudGroupExternalOK{}
}

/*
CreateCloudGroupExternalOK describes a response with status code 200, with default header values.

A successful response.
*/
type CreateCloudGroupExternalOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1CreateCloudGroupResponse
}

// IsSuccess returns true when this create cloud group external o k response has a 2xx status code
func (o *CreateCloudGroupExternalOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create cloud group external o k response has a 3xx status code
func (o *CreateCloudGroupExternalOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create cloud group external o k response has a 4xx status code
func (o *CreateCloudGroupExternalOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create cloud group external o k response has a 5xx status code
func (o *CreateCloudGroupExternalOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create cloud group external o k response a status code equal to that given
func (o *CreateCloudGroupExternalOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create cloud group external o k response
func (o *CreateCloudGroupExternalOK) Code() int {
	return 200
}

func (o *CreateCloudGroupExternalOK) Error() string {
	return fmt.Sprintf("[POST /cloud-security/entities/cloud-groups/v1][%d] createCloudGroupExternalOK  %+v", 200, o.Payload)
}

func (o *CreateCloudGroupExternalOK) String() string {
	return fmt.Sprintf("[POST /cloud-security/entities/cloud-groups/v1][%d] createCloudGroupExternalOK  %+v", 200, o.Payload)
}

func (o *CreateCloudGroupExternalOK) GetPayload() *models.AssetgroupmanagerV1CreateCloudGroupResponse {
	return o.Payload
}

func (o *CreateCloudGroupExternalOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1CreateCloudGroupResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateCloudGroupExternalBadRequest creates a CreateCloudGroupExternalBadRequest with default headers values
func NewCreateCloudGroupExternalBadRequest() *CreateCloudGroupExternalBadRequest {
	return &CreateCloudGroupExternalBadRequest{}
}

/*
CreateCloudGroupExternalBadRequest describes a response with status code 400, with default header values.

Returned when the request is malformed.
*/
type CreateCloudGroupExternalBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1MSAResponse
}

// IsSuccess returns true when this create cloud group external bad request response has a 2xx status code
func (o *CreateCloudGroupExternalBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create cloud group external bad request response has a 3xx status code
func (o *CreateCloudGroupExternalBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create cloud group external bad request response has a 4xx status code
func (o *CreateCloudGroupExternalBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create cloud group external bad request response has a 5xx status code
func (o *CreateCloudGroupExternalBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create cloud group external bad request response a status code equal to that given
func (o *CreateCloudGroupExternalBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create cloud group external bad request response
func (o *CreateCloudGroupExternalBadRequest) Code() int {
	return 400
}

func (o *CreateCloudGroupExternalBadRequest) Error() string {
	return fmt.Sprintf("[POST /cloud-security/entities/cloud-groups/v1][%d] createCloudGroupExternalBadRequest  %+v", 400, o.Payload)
}

func (o *CreateCloudGroupExternalBadRequest) String() string {
	return fmt.Sprintf("[POST /cloud-security/entities/cloud-groups/v1][%d] createCloudGroupExternalBadRequest  %+v", 400, o.Payload)
}

func (o *CreateCloudGroupExternalBadRequest) GetPayload() *models.AssetgroupmanagerV1MSAResponse {
	return o.Payload
}

func (o *CreateCloudGroupExternalBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1MSAResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateCloudGroupExternalUnauthorized creates a CreateCloudGroupExternalUnauthorized with default headers values
func NewCreateCloudGroupExternalUnauthorized() *CreateCloudGroupExternalUnauthorized {
	return &CreateCloudGroupExternalUnauthorized{}
}

/*
CreateCloudGroupExternalUnauthorized describes a response with status code 401, with default header values.

Returned when the request is unauthorized.
*/
type CreateCloudGroupExternalUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1MSAResponse
}

// IsSuccess returns true when this create cloud group external unauthorized response has a 2xx status code
func (o *CreateCloudGroupExternalUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create cloud group external unauthorized response has a 3xx status code
func (o *CreateCloudGroupExternalUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create cloud group external unauthorized response has a 4xx status code
func (o *CreateCloudGroupExternalUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create cloud group external unauthorized response has a 5xx status code
func (o *CreateCloudGroupExternalUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create cloud group external unauthorized response a status code equal to that given
func (o *CreateCloudGroupExternalUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create cloud group external unauthorized response
func (o *CreateCloudGroupExternalUnauthorized) Code() int {
	return 401
}

func (o *CreateCloudGroupExternalUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cloud-security/entities/cloud-groups/v1][%d] createCloudGroupExternalUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateCloudGroupExternalUnauthorized) String() string {
	return fmt.Sprintf("[POST /cloud-security/entities/cloud-groups/v1][%d] createCloudGroupExternalUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateCloudGroupExternalUnauthorized) GetPayload() *models.AssetgroupmanagerV1MSAResponse {
	return o.Payload
}

func (o *CreateCloudGroupExternalUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1MSAResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateCloudGroupExternalForbidden creates a CreateCloudGroupExternalForbidden with default headers values
func NewCreateCloudGroupExternalForbidden() *CreateCloudGroupExternalForbidden {
	return &CreateCloudGroupExternalForbidden{}
}

/*
CreateCloudGroupExternalForbidden describes a response with status code 403, with default header values.

Returned when the subject does not have permission to access the resource.
*/
type CreateCloudGroupExternalForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1MSAResponse
}

// IsSuccess returns true when this create cloud group external forbidden response has a 2xx status code
func (o *CreateCloudGroupExternalForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create cloud group external forbidden response has a 3xx status code
func (o *CreateCloudGroupExternalForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create cloud group external forbidden response has a 4xx status code
func (o *CreateCloudGroupExternalForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create cloud group external forbidden response has a 5xx status code
func (o *CreateCloudGroupExternalForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create cloud group external forbidden response a status code equal to that given
func (o *CreateCloudGroupExternalForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create cloud group external forbidden response
func (o *CreateCloudGroupExternalForbidden) Code() int {
	return 403
}

func (o *CreateCloudGroupExternalForbidden) Error() string {
	return fmt.Sprintf("[POST /cloud-security/entities/cloud-groups/v1][%d] createCloudGroupExternalForbidden  %+v", 403, o.Payload)
}

func (o *CreateCloudGroupExternalForbidden) String() string {
	return fmt.Sprintf("[POST /cloud-security/entities/cloud-groups/v1][%d] createCloudGroupExternalForbidden  %+v", 403, o.Payload)
}

func (o *CreateCloudGroupExternalForbidden) GetPayload() *models.AssetgroupmanagerV1MSAResponse {
	return o.Payload
}

func (o *CreateCloudGroupExternalForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1MSAResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateCloudGroupExternalNotFound creates a CreateCloudGroupExternalNotFound with default headers values
func NewCreateCloudGroupExternalNotFound() *CreateCloudGroupExternalNotFound {
	return &CreateCloudGroupExternalNotFound{}
}

/*
CreateCloudGroupExternalNotFound describes a response with status code 404, with default header values.

Returned when the resource does not exist.
*/
type CreateCloudGroupExternalNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1MSAResponse
}

// IsSuccess returns true when this create cloud group external not found response has a 2xx status code
func (o *CreateCloudGroupExternalNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create cloud group external not found response has a 3xx status code
func (o *CreateCloudGroupExternalNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create cloud group external not found response has a 4xx status code
func (o *CreateCloudGroupExternalNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create cloud group external not found response has a 5xx status code
func (o *CreateCloudGroupExternalNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create cloud group external not found response a status code equal to that given
func (o *CreateCloudGroupExternalNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create cloud group external not found response
func (o *CreateCloudGroupExternalNotFound) Code() int {
	return 404
}

func (o *CreateCloudGroupExternalNotFound) Error() string {
	return fmt.Sprintf("[POST /cloud-security/entities/cloud-groups/v1][%d] createCloudGroupExternalNotFound  %+v", 404, o.Payload)
}

func (o *CreateCloudGroupExternalNotFound) String() string {
	return fmt.Sprintf("[POST /cloud-security/entities/cloud-groups/v1][%d] createCloudGroupExternalNotFound  %+v", 404, o.Payload)
}

func (o *CreateCloudGroupExternalNotFound) GetPayload() *models.AssetgroupmanagerV1MSAResponse {
	return o.Payload
}

func (o *CreateCloudGroupExternalNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1MSAResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateCloudGroupExternalPreconditionFailed creates a CreateCloudGroupExternalPreconditionFailed with default headers values
func NewCreateCloudGroupExternalPreconditionFailed() *CreateCloudGroupExternalPreconditionFailed {
	return &CreateCloudGroupExternalPreconditionFailed{}
}

/*
CreateCloudGroupExternalPreconditionFailed describes a response with status code 412, with default header values.

Returned when a precondition fails e.g if after this call the CID will have more groups than the max allowed
*/
type CreateCloudGroupExternalPreconditionFailed struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1MSAResponse
}

// IsSuccess returns true when this create cloud group external precondition failed response has a 2xx status code
func (o *CreateCloudGroupExternalPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create cloud group external precondition failed response has a 3xx status code
func (o *CreateCloudGroupExternalPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create cloud group external precondition failed response has a 4xx status code
func (o *CreateCloudGroupExternalPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this create cloud group external precondition failed response has a 5xx status code
func (o *CreateCloudGroupExternalPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this create cloud group external precondition failed response a status code equal to that given
func (o *CreateCloudGroupExternalPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the create cloud group external precondition failed response
func (o *CreateCloudGroupExternalPreconditionFailed) Code() int {
	return 412
}

func (o *CreateCloudGroupExternalPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /cloud-security/entities/cloud-groups/v1][%d] createCloudGroupExternalPreconditionFailed  %+v", 412, o.Payload)
}

func (o *CreateCloudGroupExternalPreconditionFailed) String() string {
	return fmt.Sprintf("[POST /cloud-security/entities/cloud-groups/v1][%d] createCloudGroupExternalPreconditionFailed  %+v", 412, o.Payload)
}

func (o *CreateCloudGroupExternalPreconditionFailed) GetPayload() *models.AssetgroupmanagerV1MSAResponse {
	return o.Payload
}

func (o *CreateCloudGroupExternalPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1MSAResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateCloudGroupExternalTooManyRequests creates a CreateCloudGroupExternalTooManyRequests with default headers values
func NewCreateCloudGroupExternalTooManyRequests() *CreateCloudGroupExternalTooManyRequests {
	return &CreateCloudGroupExternalTooManyRequests{}
}

/*
CreateCloudGroupExternalTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CreateCloudGroupExternalTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this create cloud group external too many requests response has a 2xx status code
func (o *CreateCloudGroupExternalTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create cloud group external too many requests response has a 3xx status code
func (o *CreateCloudGroupExternalTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create cloud group external too many requests response has a 4xx status code
func (o *CreateCloudGroupExternalTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create cloud group external too many requests response has a 5xx status code
func (o *CreateCloudGroupExternalTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create cloud group external too many requests response a status code equal to that given
func (o *CreateCloudGroupExternalTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create cloud group external too many requests response
func (o *CreateCloudGroupExternalTooManyRequests) Code() int {
	return 429
}

func (o *CreateCloudGroupExternalTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /cloud-security/entities/cloud-groups/v1][%d] createCloudGroupExternalTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateCloudGroupExternalTooManyRequests) String() string {
	return fmt.Sprintf("[POST /cloud-security/entities/cloud-groups/v1][%d] createCloudGroupExternalTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateCloudGroupExternalTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateCloudGroupExternalTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateCloudGroupExternalInternalServerError creates a CreateCloudGroupExternalInternalServerError with default headers values
func NewCreateCloudGroupExternalInternalServerError() *CreateCloudGroupExternalInternalServerError {
	return &CreateCloudGroupExternalInternalServerError{}
}

/*
CreateCloudGroupExternalInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type CreateCloudGroupExternalInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1MSAResponse
}

// IsSuccess returns true when this create cloud group external internal server error response has a 2xx status code
func (o *CreateCloudGroupExternalInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create cloud group external internal server error response has a 3xx status code
func (o *CreateCloudGroupExternalInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create cloud group external internal server error response has a 4xx status code
func (o *CreateCloudGroupExternalInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create cloud group external internal server error response has a 5xx status code
func (o *CreateCloudGroupExternalInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create cloud group external internal server error response a status code equal to that given
func (o *CreateCloudGroupExternalInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create cloud group external internal server error response
func (o *CreateCloudGroupExternalInternalServerError) Code() int {
	return 500
}

func (o *CreateCloudGroupExternalInternalServerError) Error() string {
	return fmt.Sprintf("[POST /cloud-security/entities/cloud-groups/v1][%d] createCloudGroupExternalInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateCloudGroupExternalInternalServerError) String() string {
	return fmt.Sprintf("[POST /cloud-security/entities/cloud-groups/v1][%d] createCloudGroupExternalInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateCloudGroupExternalInternalServerError) GetPayload() *models.AssetgroupmanagerV1MSAResponse {
	return o.Payload
}

func (o *CreateCloudGroupExternalInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1MSAResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
