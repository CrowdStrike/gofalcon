// Code generated by go-swagger; DO NOT EDIT.

package cloud_security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ListCloudGroupsByIDExternalReader is a Reader for the ListCloudGroupsByIDExternal structure.
type ListCloudGroupsByIDExternalReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListCloudGroupsByIDExternalReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListCloudGroupsByIDExternalOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListCloudGroupsByIDExternalBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListCloudGroupsByIDExternalUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListCloudGroupsByIDExternalForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListCloudGroupsByIDExternalNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListCloudGroupsByIDExternalTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListCloudGroupsByIDExternalInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cloud-security/entities/cloud-groups/v1] ListCloudGroupsByIDExternal", response, response.Code())
	}
}

// NewListCloudGroupsByIDExternalOK creates a ListCloudGroupsByIDExternalOK with default headers values
func NewListCloudGroupsByIDExternalOK() *ListCloudGroupsByIDExternalOK {
	return &ListCloudGroupsByIDExternalOK{}
}

/*
ListCloudGroupsByIDExternalOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListCloudGroupsByIDExternalOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1ListCloudGroupsResponse
}

// IsSuccess returns true when this list cloud groups by Id external o k response has a 2xx status code
func (o *ListCloudGroupsByIDExternalOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list cloud groups by Id external o k response has a 3xx status code
func (o *ListCloudGroupsByIDExternalOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list cloud groups by Id external o k response has a 4xx status code
func (o *ListCloudGroupsByIDExternalOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list cloud groups by Id external o k response has a 5xx status code
func (o *ListCloudGroupsByIDExternalOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list cloud groups by Id external o k response a status code equal to that given
func (o *ListCloudGroupsByIDExternalOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list cloud groups by Id external o k response
func (o *ListCloudGroupsByIDExternalOK) Code() int {
	return 200
}

func (o *ListCloudGroupsByIDExternalOK) Error() string {
	return fmt.Sprintf("[GET /cloud-security/entities/cloud-groups/v1][%d] listCloudGroupsByIdExternalOK  %+v", 200, o.Payload)
}

func (o *ListCloudGroupsByIDExternalOK) String() string {
	return fmt.Sprintf("[GET /cloud-security/entities/cloud-groups/v1][%d] listCloudGroupsByIdExternalOK  %+v", 200, o.Payload)
}

func (o *ListCloudGroupsByIDExternalOK) GetPayload() *models.AssetgroupmanagerV1ListCloudGroupsResponse {
	return o.Payload
}

func (o *ListCloudGroupsByIDExternalOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1ListCloudGroupsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCloudGroupsByIDExternalBadRequest creates a ListCloudGroupsByIDExternalBadRequest with default headers values
func NewListCloudGroupsByIDExternalBadRequest() *ListCloudGroupsByIDExternalBadRequest {
	return &ListCloudGroupsByIDExternalBadRequest{}
}

/*
ListCloudGroupsByIDExternalBadRequest describes a response with status code 400, with default header values.

Returned when the request is malformed.
*/
type ListCloudGroupsByIDExternalBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1MSAResponse
}

// IsSuccess returns true when this list cloud groups by Id external bad request response has a 2xx status code
func (o *ListCloudGroupsByIDExternalBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list cloud groups by Id external bad request response has a 3xx status code
func (o *ListCloudGroupsByIDExternalBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list cloud groups by Id external bad request response has a 4xx status code
func (o *ListCloudGroupsByIDExternalBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list cloud groups by Id external bad request response has a 5xx status code
func (o *ListCloudGroupsByIDExternalBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list cloud groups by Id external bad request response a status code equal to that given
func (o *ListCloudGroupsByIDExternalBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list cloud groups by Id external bad request response
func (o *ListCloudGroupsByIDExternalBadRequest) Code() int {
	return 400
}

func (o *ListCloudGroupsByIDExternalBadRequest) Error() string {
	return fmt.Sprintf("[GET /cloud-security/entities/cloud-groups/v1][%d] listCloudGroupsByIdExternalBadRequest  %+v", 400, o.Payload)
}

func (o *ListCloudGroupsByIDExternalBadRequest) String() string {
	return fmt.Sprintf("[GET /cloud-security/entities/cloud-groups/v1][%d] listCloudGroupsByIdExternalBadRequest  %+v", 400, o.Payload)
}

func (o *ListCloudGroupsByIDExternalBadRequest) GetPayload() *models.AssetgroupmanagerV1MSAResponse {
	return o.Payload
}

func (o *ListCloudGroupsByIDExternalBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1MSAResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCloudGroupsByIDExternalUnauthorized creates a ListCloudGroupsByIDExternalUnauthorized with default headers values
func NewListCloudGroupsByIDExternalUnauthorized() *ListCloudGroupsByIDExternalUnauthorized {
	return &ListCloudGroupsByIDExternalUnauthorized{}
}

/*
ListCloudGroupsByIDExternalUnauthorized describes a response with status code 401, with default header values.

Returned when the request is unauthorized.
*/
type ListCloudGroupsByIDExternalUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1MSAResponse
}

// IsSuccess returns true when this list cloud groups by Id external unauthorized response has a 2xx status code
func (o *ListCloudGroupsByIDExternalUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list cloud groups by Id external unauthorized response has a 3xx status code
func (o *ListCloudGroupsByIDExternalUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list cloud groups by Id external unauthorized response has a 4xx status code
func (o *ListCloudGroupsByIDExternalUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list cloud groups by Id external unauthorized response has a 5xx status code
func (o *ListCloudGroupsByIDExternalUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list cloud groups by Id external unauthorized response a status code equal to that given
func (o *ListCloudGroupsByIDExternalUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list cloud groups by Id external unauthorized response
func (o *ListCloudGroupsByIDExternalUnauthorized) Code() int {
	return 401
}

func (o *ListCloudGroupsByIDExternalUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cloud-security/entities/cloud-groups/v1][%d] listCloudGroupsByIdExternalUnauthorized  %+v", 401, o.Payload)
}

func (o *ListCloudGroupsByIDExternalUnauthorized) String() string {
	return fmt.Sprintf("[GET /cloud-security/entities/cloud-groups/v1][%d] listCloudGroupsByIdExternalUnauthorized  %+v", 401, o.Payload)
}

func (o *ListCloudGroupsByIDExternalUnauthorized) GetPayload() *models.AssetgroupmanagerV1MSAResponse {
	return o.Payload
}

func (o *ListCloudGroupsByIDExternalUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1MSAResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCloudGroupsByIDExternalForbidden creates a ListCloudGroupsByIDExternalForbidden with default headers values
func NewListCloudGroupsByIDExternalForbidden() *ListCloudGroupsByIDExternalForbidden {
	return &ListCloudGroupsByIDExternalForbidden{}
}

/*
ListCloudGroupsByIDExternalForbidden describes a response with status code 403, with default header values.

Returned when the subject does not have permission to access the resource.
*/
type ListCloudGroupsByIDExternalForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1MSAResponse
}

// IsSuccess returns true when this list cloud groups by Id external forbidden response has a 2xx status code
func (o *ListCloudGroupsByIDExternalForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list cloud groups by Id external forbidden response has a 3xx status code
func (o *ListCloudGroupsByIDExternalForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list cloud groups by Id external forbidden response has a 4xx status code
func (o *ListCloudGroupsByIDExternalForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list cloud groups by Id external forbidden response has a 5xx status code
func (o *ListCloudGroupsByIDExternalForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list cloud groups by Id external forbidden response a status code equal to that given
func (o *ListCloudGroupsByIDExternalForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list cloud groups by Id external forbidden response
func (o *ListCloudGroupsByIDExternalForbidden) Code() int {
	return 403
}

func (o *ListCloudGroupsByIDExternalForbidden) Error() string {
	return fmt.Sprintf("[GET /cloud-security/entities/cloud-groups/v1][%d] listCloudGroupsByIdExternalForbidden  %+v", 403, o.Payload)
}

func (o *ListCloudGroupsByIDExternalForbidden) String() string {
	return fmt.Sprintf("[GET /cloud-security/entities/cloud-groups/v1][%d] listCloudGroupsByIdExternalForbidden  %+v", 403, o.Payload)
}

func (o *ListCloudGroupsByIDExternalForbidden) GetPayload() *models.AssetgroupmanagerV1MSAResponse {
	return o.Payload
}

func (o *ListCloudGroupsByIDExternalForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1MSAResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCloudGroupsByIDExternalNotFound creates a ListCloudGroupsByIDExternalNotFound with default headers values
func NewListCloudGroupsByIDExternalNotFound() *ListCloudGroupsByIDExternalNotFound {
	return &ListCloudGroupsByIDExternalNotFound{}
}

/*
ListCloudGroupsByIDExternalNotFound describes a response with status code 404, with default header values.

Returned when the resource does not exist.
*/
type ListCloudGroupsByIDExternalNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1MSAResponse
}

// IsSuccess returns true when this list cloud groups by Id external not found response has a 2xx status code
func (o *ListCloudGroupsByIDExternalNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list cloud groups by Id external not found response has a 3xx status code
func (o *ListCloudGroupsByIDExternalNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list cloud groups by Id external not found response has a 4xx status code
func (o *ListCloudGroupsByIDExternalNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list cloud groups by Id external not found response has a 5xx status code
func (o *ListCloudGroupsByIDExternalNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list cloud groups by Id external not found response a status code equal to that given
func (o *ListCloudGroupsByIDExternalNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list cloud groups by Id external not found response
func (o *ListCloudGroupsByIDExternalNotFound) Code() int {
	return 404
}

func (o *ListCloudGroupsByIDExternalNotFound) Error() string {
	return fmt.Sprintf("[GET /cloud-security/entities/cloud-groups/v1][%d] listCloudGroupsByIdExternalNotFound  %+v", 404, o.Payload)
}

func (o *ListCloudGroupsByIDExternalNotFound) String() string {
	return fmt.Sprintf("[GET /cloud-security/entities/cloud-groups/v1][%d] listCloudGroupsByIdExternalNotFound  %+v", 404, o.Payload)
}

func (o *ListCloudGroupsByIDExternalNotFound) GetPayload() *models.AssetgroupmanagerV1MSAResponse {
	return o.Payload
}

func (o *ListCloudGroupsByIDExternalNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1MSAResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCloudGroupsByIDExternalTooManyRequests creates a ListCloudGroupsByIDExternalTooManyRequests with default headers values
func NewListCloudGroupsByIDExternalTooManyRequests() *ListCloudGroupsByIDExternalTooManyRequests {
	return &ListCloudGroupsByIDExternalTooManyRequests{}
}

/*
ListCloudGroupsByIDExternalTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ListCloudGroupsByIDExternalTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this list cloud groups by Id external too many requests response has a 2xx status code
func (o *ListCloudGroupsByIDExternalTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list cloud groups by Id external too many requests response has a 3xx status code
func (o *ListCloudGroupsByIDExternalTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list cloud groups by Id external too many requests response has a 4xx status code
func (o *ListCloudGroupsByIDExternalTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list cloud groups by Id external too many requests response has a 5xx status code
func (o *ListCloudGroupsByIDExternalTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list cloud groups by Id external too many requests response a status code equal to that given
func (o *ListCloudGroupsByIDExternalTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list cloud groups by Id external too many requests response
func (o *ListCloudGroupsByIDExternalTooManyRequests) Code() int {
	return 429
}

func (o *ListCloudGroupsByIDExternalTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /cloud-security/entities/cloud-groups/v1][%d] listCloudGroupsByIdExternalTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListCloudGroupsByIDExternalTooManyRequests) String() string {
	return fmt.Sprintf("[GET /cloud-security/entities/cloud-groups/v1][%d] listCloudGroupsByIdExternalTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListCloudGroupsByIDExternalTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ListCloudGroupsByIDExternalTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCloudGroupsByIDExternalInternalServerError creates a ListCloudGroupsByIDExternalInternalServerError with default headers values
func NewListCloudGroupsByIDExternalInternalServerError() *ListCloudGroupsByIDExternalInternalServerError {
	return &ListCloudGroupsByIDExternalInternalServerError{}
}

/*
ListCloudGroupsByIDExternalInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type ListCloudGroupsByIDExternalInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1MSAResponse
}

// IsSuccess returns true when this list cloud groups by Id external internal server error response has a 2xx status code
func (o *ListCloudGroupsByIDExternalInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list cloud groups by Id external internal server error response has a 3xx status code
func (o *ListCloudGroupsByIDExternalInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list cloud groups by Id external internal server error response has a 4xx status code
func (o *ListCloudGroupsByIDExternalInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list cloud groups by Id external internal server error response has a 5xx status code
func (o *ListCloudGroupsByIDExternalInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list cloud groups by Id external internal server error response a status code equal to that given
func (o *ListCloudGroupsByIDExternalInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list cloud groups by Id external internal server error response
func (o *ListCloudGroupsByIDExternalInternalServerError) Code() int {
	return 500
}

func (o *ListCloudGroupsByIDExternalInternalServerError) Error() string {
	return fmt.Sprintf("[GET /cloud-security/entities/cloud-groups/v1][%d] listCloudGroupsByIdExternalInternalServerError  %+v", 500, o.Payload)
}

func (o *ListCloudGroupsByIDExternalInternalServerError) String() string {
	return fmt.Sprintf("[GET /cloud-security/entities/cloud-groups/v1][%d] listCloudGroupsByIdExternalInternalServerError  %+v", 500, o.Payload)
}

func (o *ListCloudGroupsByIDExternalInternalServerError) GetPayload() *models.AssetgroupmanagerV1MSAResponse {
	return o.Payload
}

func (o *ListCloudGroupsByIDExternalInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1MSAResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
