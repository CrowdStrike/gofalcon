// Code generated by go-swagger; DO NOT EDIT.

package cloud_security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// DeleteCloudGroupsExternalReader is a Reader for the DeleteCloudGroupsExternal structure.
type DeleteCloudGroupsExternalReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteCloudGroupsExternalReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteCloudGroupsExternalOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteCloudGroupsExternalBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteCloudGroupsExternalUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteCloudGroupsExternalForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteCloudGroupsExternalNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteCloudGroupsExternalTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteCloudGroupsExternalInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /cloud-security/entities/cloud-groups/v1] DeleteCloudGroupsExternal", response, response.Code())
	}
}

// NewDeleteCloudGroupsExternalOK creates a DeleteCloudGroupsExternalOK with default headers values
func NewDeleteCloudGroupsExternalOK() *DeleteCloudGroupsExternalOK {
	return &DeleteCloudGroupsExternalOK{}
}

/*
DeleteCloudGroupsExternalOK describes a response with status code 200, with default header values.

A successful response.
*/
type DeleteCloudGroupsExternalOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload interface{}
}

// IsSuccess returns true when this delete cloud groups external o k response has a 2xx status code
func (o *DeleteCloudGroupsExternalOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete cloud groups external o k response has a 3xx status code
func (o *DeleteCloudGroupsExternalOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete cloud groups external o k response has a 4xx status code
func (o *DeleteCloudGroupsExternalOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete cloud groups external o k response has a 5xx status code
func (o *DeleteCloudGroupsExternalOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete cloud groups external o k response a status code equal to that given
func (o *DeleteCloudGroupsExternalOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete cloud groups external o k response
func (o *DeleteCloudGroupsExternalOK) Code() int {
	return 200
}

func (o *DeleteCloudGroupsExternalOK) Error() string {
	return fmt.Sprintf("[DELETE /cloud-security/entities/cloud-groups/v1][%d] deleteCloudGroupsExternalOK  %+v", 200, o.Payload)
}

func (o *DeleteCloudGroupsExternalOK) String() string {
	return fmt.Sprintf("[DELETE /cloud-security/entities/cloud-groups/v1][%d] deleteCloudGroupsExternalOK  %+v", 200, o.Payload)
}

func (o *DeleteCloudGroupsExternalOK) GetPayload() interface{} {
	return o.Payload
}

func (o *DeleteCloudGroupsExternalOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCloudGroupsExternalBadRequest creates a DeleteCloudGroupsExternalBadRequest with default headers values
func NewDeleteCloudGroupsExternalBadRequest() *DeleteCloudGroupsExternalBadRequest {
	return &DeleteCloudGroupsExternalBadRequest{}
}

/*
DeleteCloudGroupsExternalBadRequest describes a response with status code 400, with default header values.

Returned when the request is malformed.
*/
type DeleteCloudGroupsExternalBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1MSAResponse
}

// IsSuccess returns true when this delete cloud groups external bad request response has a 2xx status code
func (o *DeleteCloudGroupsExternalBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete cloud groups external bad request response has a 3xx status code
func (o *DeleteCloudGroupsExternalBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete cloud groups external bad request response has a 4xx status code
func (o *DeleteCloudGroupsExternalBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete cloud groups external bad request response has a 5xx status code
func (o *DeleteCloudGroupsExternalBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete cloud groups external bad request response a status code equal to that given
func (o *DeleteCloudGroupsExternalBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete cloud groups external bad request response
func (o *DeleteCloudGroupsExternalBadRequest) Code() int {
	return 400
}

func (o *DeleteCloudGroupsExternalBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /cloud-security/entities/cloud-groups/v1][%d] deleteCloudGroupsExternalBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteCloudGroupsExternalBadRequest) String() string {
	return fmt.Sprintf("[DELETE /cloud-security/entities/cloud-groups/v1][%d] deleteCloudGroupsExternalBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteCloudGroupsExternalBadRequest) GetPayload() *models.AssetgroupmanagerV1MSAResponse {
	return o.Payload
}

func (o *DeleteCloudGroupsExternalBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1MSAResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCloudGroupsExternalUnauthorized creates a DeleteCloudGroupsExternalUnauthorized with default headers values
func NewDeleteCloudGroupsExternalUnauthorized() *DeleteCloudGroupsExternalUnauthorized {
	return &DeleteCloudGroupsExternalUnauthorized{}
}

/*
DeleteCloudGroupsExternalUnauthorized describes a response with status code 401, with default header values.

Returned when the request is unauthorized.
*/
type DeleteCloudGroupsExternalUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1MSAResponse
}

// IsSuccess returns true when this delete cloud groups external unauthorized response has a 2xx status code
func (o *DeleteCloudGroupsExternalUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete cloud groups external unauthorized response has a 3xx status code
func (o *DeleteCloudGroupsExternalUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete cloud groups external unauthorized response has a 4xx status code
func (o *DeleteCloudGroupsExternalUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete cloud groups external unauthorized response has a 5xx status code
func (o *DeleteCloudGroupsExternalUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete cloud groups external unauthorized response a status code equal to that given
func (o *DeleteCloudGroupsExternalUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete cloud groups external unauthorized response
func (o *DeleteCloudGroupsExternalUnauthorized) Code() int {
	return 401
}

func (o *DeleteCloudGroupsExternalUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /cloud-security/entities/cloud-groups/v1][%d] deleteCloudGroupsExternalUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteCloudGroupsExternalUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /cloud-security/entities/cloud-groups/v1][%d] deleteCloudGroupsExternalUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteCloudGroupsExternalUnauthorized) GetPayload() *models.AssetgroupmanagerV1MSAResponse {
	return o.Payload
}

func (o *DeleteCloudGroupsExternalUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1MSAResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCloudGroupsExternalForbidden creates a DeleteCloudGroupsExternalForbidden with default headers values
func NewDeleteCloudGroupsExternalForbidden() *DeleteCloudGroupsExternalForbidden {
	return &DeleteCloudGroupsExternalForbidden{}
}

/*
DeleteCloudGroupsExternalForbidden describes a response with status code 403, with default header values.

Returned when the subject does not have permission to access the resource.
*/
type DeleteCloudGroupsExternalForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1MSAResponse
}

// IsSuccess returns true when this delete cloud groups external forbidden response has a 2xx status code
func (o *DeleteCloudGroupsExternalForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete cloud groups external forbidden response has a 3xx status code
func (o *DeleteCloudGroupsExternalForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete cloud groups external forbidden response has a 4xx status code
func (o *DeleteCloudGroupsExternalForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete cloud groups external forbidden response has a 5xx status code
func (o *DeleteCloudGroupsExternalForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete cloud groups external forbidden response a status code equal to that given
func (o *DeleteCloudGroupsExternalForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete cloud groups external forbidden response
func (o *DeleteCloudGroupsExternalForbidden) Code() int {
	return 403
}

func (o *DeleteCloudGroupsExternalForbidden) Error() string {
	return fmt.Sprintf("[DELETE /cloud-security/entities/cloud-groups/v1][%d] deleteCloudGroupsExternalForbidden  %+v", 403, o.Payload)
}

func (o *DeleteCloudGroupsExternalForbidden) String() string {
	return fmt.Sprintf("[DELETE /cloud-security/entities/cloud-groups/v1][%d] deleteCloudGroupsExternalForbidden  %+v", 403, o.Payload)
}

func (o *DeleteCloudGroupsExternalForbidden) GetPayload() *models.AssetgroupmanagerV1MSAResponse {
	return o.Payload
}

func (o *DeleteCloudGroupsExternalForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1MSAResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCloudGroupsExternalNotFound creates a DeleteCloudGroupsExternalNotFound with default headers values
func NewDeleteCloudGroupsExternalNotFound() *DeleteCloudGroupsExternalNotFound {
	return &DeleteCloudGroupsExternalNotFound{}
}

/*
DeleteCloudGroupsExternalNotFound describes a response with status code 404, with default header values.

Returned when the resource does not exist.
*/
type DeleteCloudGroupsExternalNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1MSAResponse
}

// IsSuccess returns true when this delete cloud groups external not found response has a 2xx status code
func (o *DeleteCloudGroupsExternalNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete cloud groups external not found response has a 3xx status code
func (o *DeleteCloudGroupsExternalNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete cloud groups external not found response has a 4xx status code
func (o *DeleteCloudGroupsExternalNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete cloud groups external not found response has a 5xx status code
func (o *DeleteCloudGroupsExternalNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete cloud groups external not found response a status code equal to that given
func (o *DeleteCloudGroupsExternalNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete cloud groups external not found response
func (o *DeleteCloudGroupsExternalNotFound) Code() int {
	return 404
}

func (o *DeleteCloudGroupsExternalNotFound) Error() string {
	return fmt.Sprintf("[DELETE /cloud-security/entities/cloud-groups/v1][%d] deleteCloudGroupsExternalNotFound  %+v", 404, o.Payload)
}

func (o *DeleteCloudGroupsExternalNotFound) String() string {
	return fmt.Sprintf("[DELETE /cloud-security/entities/cloud-groups/v1][%d] deleteCloudGroupsExternalNotFound  %+v", 404, o.Payload)
}

func (o *DeleteCloudGroupsExternalNotFound) GetPayload() *models.AssetgroupmanagerV1MSAResponse {
	return o.Payload
}

func (o *DeleteCloudGroupsExternalNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1MSAResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCloudGroupsExternalTooManyRequests creates a DeleteCloudGroupsExternalTooManyRequests with default headers values
func NewDeleteCloudGroupsExternalTooManyRequests() *DeleteCloudGroupsExternalTooManyRequests {
	return &DeleteCloudGroupsExternalTooManyRequests{}
}

/*
DeleteCloudGroupsExternalTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type DeleteCloudGroupsExternalTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this delete cloud groups external too many requests response has a 2xx status code
func (o *DeleteCloudGroupsExternalTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete cloud groups external too many requests response has a 3xx status code
func (o *DeleteCloudGroupsExternalTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete cloud groups external too many requests response has a 4xx status code
func (o *DeleteCloudGroupsExternalTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete cloud groups external too many requests response has a 5xx status code
func (o *DeleteCloudGroupsExternalTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete cloud groups external too many requests response a status code equal to that given
func (o *DeleteCloudGroupsExternalTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete cloud groups external too many requests response
func (o *DeleteCloudGroupsExternalTooManyRequests) Code() int {
	return 429
}

func (o *DeleteCloudGroupsExternalTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /cloud-security/entities/cloud-groups/v1][%d] deleteCloudGroupsExternalTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteCloudGroupsExternalTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /cloud-security/entities/cloud-groups/v1][%d] deleteCloudGroupsExternalTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteCloudGroupsExternalTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DeleteCloudGroupsExternalTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCloudGroupsExternalInternalServerError creates a DeleteCloudGroupsExternalInternalServerError with default headers values
func NewDeleteCloudGroupsExternalInternalServerError() *DeleteCloudGroupsExternalInternalServerError {
	return &DeleteCloudGroupsExternalInternalServerError{}
}

/*
DeleteCloudGroupsExternalInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type DeleteCloudGroupsExternalInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1MSAResponse
}

// IsSuccess returns true when this delete cloud groups external internal server error response has a 2xx status code
func (o *DeleteCloudGroupsExternalInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete cloud groups external internal server error response has a 3xx status code
func (o *DeleteCloudGroupsExternalInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete cloud groups external internal server error response has a 4xx status code
func (o *DeleteCloudGroupsExternalInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete cloud groups external internal server error response has a 5xx status code
func (o *DeleteCloudGroupsExternalInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete cloud groups external internal server error response a status code equal to that given
func (o *DeleteCloudGroupsExternalInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete cloud groups external internal server error response
func (o *DeleteCloudGroupsExternalInternalServerError) Code() int {
	return 500
}

func (o *DeleteCloudGroupsExternalInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /cloud-security/entities/cloud-groups/v1][%d] deleteCloudGroupsExternalInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteCloudGroupsExternalInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /cloud-security/entities/cloud-groups/v1][%d] deleteCloudGroupsExternalInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteCloudGroupsExternalInternalServerError) GetPayload() *models.AssetgroupmanagerV1MSAResponse {
	return o.Payload
}

func (o *DeleteCloudGroupsExternalInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1MSAResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
