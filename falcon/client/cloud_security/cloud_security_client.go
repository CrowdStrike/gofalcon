// Code generated by go-swagger; DO NOT EDIT.

package cloud_security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cloud security API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cloud security API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCloudGroupExternal(params *CreateCloudGroupExternalParams, opts ...ClientOption) (*CreateCloudGroupExternalOK, error)

	DeleteCloudGroupsExternal(params *DeleteCloudGroupsExternalParams, opts ...ClientOption) (*DeleteCloudGroupsExternalOK, error)

	ListCloudGroupIDsExternal(params *ListCloudGroupIDsExternalParams, opts ...ClientOption) (*ListCloudGroupIDsExternalOK, error)

	ListCloudGroupsByIDExternal(params *ListCloudGroupsByIDExternalParams, opts ...ClientOption) (*ListCloudGroupsByIDExternalOK, error)

	ListCloudGroupsExternal(params *ListCloudGroupsExternalParams, opts ...ClientOption) (*ListCloudGroupsExternalOK, error)

	UpdateCloudGroupExternal(params *UpdateCloudGroupExternalParams, opts ...ClientOption) (*UpdateCloudGroupExternalOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateCloudGroupExternal creates a cloud group the created by field will be set to the API client ID
*/
func (a *Client) CreateCloudGroupExternal(params *CreateCloudGroupExternalParams, opts ...ClientOption) (*CreateCloudGroupExternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCloudGroupExternalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateCloudGroupExternal",
		Method:             "POST",
		PathPattern:        "/cloud-security/entities/cloud-groups/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateCloudGroupExternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCloudGroupExternalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateCloudGroupExternal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCloudGroupsExternal deletes cloud groups in batch
*/
func (a *Client) DeleteCloudGroupsExternal(params *DeleteCloudGroupsExternalParams, opts ...ClientOption) (*DeleteCloudGroupsExternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudGroupsExternalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCloudGroupsExternal",
		Method:             "DELETE",
		PathPattern:        "/cloud-security/entities/cloud-groups/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteCloudGroupsExternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCloudGroupsExternalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteCloudGroupsExternal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListCloudGroupIDsExternal queries cloud groups and returns i ds
*/
func (a *Client) ListCloudGroupIDsExternal(params *ListCloudGroupIDsExternalParams, opts ...ClientOption) (*ListCloudGroupIDsExternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCloudGroupIDsExternalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListCloudGroupIDsExternal",
		Method:             "GET",
		PathPattern:        "/cloud-security/queries/cloud-groups/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListCloudGroupIDsExternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCloudGroupIDsExternalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListCloudGroupIDsExternal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListCloudGroupsByIDExternal lists cloud groups by ID
*/
func (a *Client) ListCloudGroupsByIDExternal(params *ListCloudGroupsByIDExternalParams, opts ...ClientOption) (*ListCloudGroupsByIDExternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCloudGroupsByIDExternalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListCloudGroupsByIDExternal",
		Method:             "GET",
		PathPattern:        "/cloud-security/entities/cloud-groups/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListCloudGroupsByIDExternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCloudGroupsByIDExternalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListCloudGroupsByIDExternal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListCloudGroupsExternal queries cloud groups and returns entities
*/
func (a *Client) ListCloudGroupsExternal(params *ListCloudGroupsExternalParams, opts ...ClientOption) (*ListCloudGroupsExternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCloudGroupsExternalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListCloudGroupsExternal",
		Method:             "GET",
		PathPattern:        "/cloud-security/combined/cloud-groups/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListCloudGroupsExternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCloudGroupsExternalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListCloudGroupsExternal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCloudGroupExternal updates cloud group
*/
func (a *Client) UpdateCloudGroupExternal(params *UpdateCloudGroupExternalParams, opts ...ClientOption) (*UpdateCloudGroupExternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCloudGroupExternalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateCloudGroupExternal",
		Method:             "PATCH",
		PathPattern:        "/cloud-security/entities/cloud-groups/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateCloudGroupExternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCloudGroupExternalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateCloudGroupExternal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
