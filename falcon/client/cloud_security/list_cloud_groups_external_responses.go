// Code generated by go-swagger; DO NOT EDIT.

package cloud_security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// ListCloudGroupsExternalReader is a Reader for the ListCloudGroupsExternal structure.
type ListCloudGroupsExternalReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListCloudGroupsExternalReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListCloudGroupsExternalOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListCloudGroupsExternalBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListCloudGroupsExternalUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListCloudGroupsExternalForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListCloudGroupsExternalNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListCloudGroupsExternalTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListCloudGroupsExternalInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cloud-security/combined/cloud-groups/v1] ListCloudGroupsExternal", response, response.Code())
	}
}

// NewListCloudGroupsExternalOK creates a ListCloudGroupsExternalOK with default headers values
func NewListCloudGroupsExternalOK() *ListCloudGroupsExternalOK {
	return &ListCloudGroupsExternalOK{}
}

/*
ListCloudGroupsExternalOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListCloudGroupsExternalOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1ListCloudGroupsResponse
}

// IsSuccess returns true when this list cloud groups external o k response has a 2xx status code
func (o *ListCloudGroupsExternalOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list cloud groups external o k response has a 3xx status code
func (o *ListCloudGroupsExternalOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list cloud groups external o k response has a 4xx status code
func (o *ListCloudGroupsExternalOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list cloud groups external o k response has a 5xx status code
func (o *ListCloudGroupsExternalOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list cloud groups external o k response a status code equal to that given
func (o *ListCloudGroupsExternalOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list cloud groups external o k response
func (o *ListCloudGroupsExternalOK) Code() int {
	return 200
}

func (o *ListCloudGroupsExternalOK) Error() string {
	return fmt.Sprintf("[GET /cloud-security/combined/cloud-groups/v1][%d] listCloudGroupsExternalOK  %+v", 200, o.Payload)
}

func (o *ListCloudGroupsExternalOK) String() string {
	return fmt.Sprintf("[GET /cloud-security/combined/cloud-groups/v1][%d] listCloudGroupsExternalOK  %+v", 200, o.Payload)
}

func (o *ListCloudGroupsExternalOK) GetPayload() *models.AssetgroupmanagerV1ListCloudGroupsResponse {
	return o.Payload
}

func (o *ListCloudGroupsExternalOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1ListCloudGroupsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCloudGroupsExternalBadRequest creates a ListCloudGroupsExternalBadRequest with default headers values
func NewListCloudGroupsExternalBadRequest() *ListCloudGroupsExternalBadRequest {
	return &ListCloudGroupsExternalBadRequest{}
}

/*
ListCloudGroupsExternalBadRequest describes a response with status code 400, with default header values.

Returned when the request is malformed.
*/
type ListCloudGroupsExternalBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1MSAResponse
}

// IsSuccess returns true when this list cloud groups external bad request response has a 2xx status code
func (o *ListCloudGroupsExternalBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list cloud groups external bad request response has a 3xx status code
func (o *ListCloudGroupsExternalBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list cloud groups external bad request response has a 4xx status code
func (o *ListCloudGroupsExternalBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list cloud groups external bad request response has a 5xx status code
func (o *ListCloudGroupsExternalBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list cloud groups external bad request response a status code equal to that given
func (o *ListCloudGroupsExternalBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list cloud groups external bad request response
func (o *ListCloudGroupsExternalBadRequest) Code() int {
	return 400
}

func (o *ListCloudGroupsExternalBadRequest) Error() string {
	return fmt.Sprintf("[GET /cloud-security/combined/cloud-groups/v1][%d] listCloudGroupsExternalBadRequest  %+v", 400, o.Payload)
}

func (o *ListCloudGroupsExternalBadRequest) String() string {
	return fmt.Sprintf("[GET /cloud-security/combined/cloud-groups/v1][%d] listCloudGroupsExternalBadRequest  %+v", 400, o.Payload)
}

func (o *ListCloudGroupsExternalBadRequest) GetPayload() *models.AssetgroupmanagerV1MSAResponse {
	return o.Payload
}

func (o *ListCloudGroupsExternalBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1MSAResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCloudGroupsExternalUnauthorized creates a ListCloudGroupsExternalUnauthorized with default headers values
func NewListCloudGroupsExternalUnauthorized() *ListCloudGroupsExternalUnauthorized {
	return &ListCloudGroupsExternalUnauthorized{}
}

/*
ListCloudGroupsExternalUnauthorized describes a response with status code 401, with default header values.

Returned when the request is unauthorized.
*/
type ListCloudGroupsExternalUnauthorized struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1MSAResponse
}

// IsSuccess returns true when this list cloud groups external unauthorized response has a 2xx status code
func (o *ListCloudGroupsExternalUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list cloud groups external unauthorized response has a 3xx status code
func (o *ListCloudGroupsExternalUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list cloud groups external unauthorized response has a 4xx status code
func (o *ListCloudGroupsExternalUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list cloud groups external unauthorized response has a 5xx status code
func (o *ListCloudGroupsExternalUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list cloud groups external unauthorized response a status code equal to that given
func (o *ListCloudGroupsExternalUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list cloud groups external unauthorized response
func (o *ListCloudGroupsExternalUnauthorized) Code() int {
	return 401
}

func (o *ListCloudGroupsExternalUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cloud-security/combined/cloud-groups/v1][%d] listCloudGroupsExternalUnauthorized  %+v", 401, o.Payload)
}

func (o *ListCloudGroupsExternalUnauthorized) String() string {
	return fmt.Sprintf("[GET /cloud-security/combined/cloud-groups/v1][%d] listCloudGroupsExternalUnauthorized  %+v", 401, o.Payload)
}

func (o *ListCloudGroupsExternalUnauthorized) GetPayload() *models.AssetgroupmanagerV1MSAResponse {
	return o.Payload
}

func (o *ListCloudGroupsExternalUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1MSAResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCloudGroupsExternalForbidden creates a ListCloudGroupsExternalForbidden with default headers values
func NewListCloudGroupsExternalForbidden() *ListCloudGroupsExternalForbidden {
	return &ListCloudGroupsExternalForbidden{}
}

/*
ListCloudGroupsExternalForbidden describes a response with status code 403, with default header values.

Returned when the subject does not have permission to access the resource.
*/
type ListCloudGroupsExternalForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1MSAResponse
}

// IsSuccess returns true when this list cloud groups external forbidden response has a 2xx status code
func (o *ListCloudGroupsExternalForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list cloud groups external forbidden response has a 3xx status code
func (o *ListCloudGroupsExternalForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list cloud groups external forbidden response has a 4xx status code
func (o *ListCloudGroupsExternalForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list cloud groups external forbidden response has a 5xx status code
func (o *ListCloudGroupsExternalForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list cloud groups external forbidden response a status code equal to that given
func (o *ListCloudGroupsExternalForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list cloud groups external forbidden response
func (o *ListCloudGroupsExternalForbidden) Code() int {
	return 403
}

func (o *ListCloudGroupsExternalForbidden) Error() string {
	return fmt.Sprintf("[GET /cloud-security/combined/cloud-groups/v1][%d] listCloudGroupsExternalForbidden  %+v", 403, o.Payload)
}

func (o *ListCloudGroupsExternalForbidden) String() string {
	return fmt.Sprintf("[GET /cloud-security/combined/cloud-groups/v1][%d] listCloudGroupsExternalForbidden  %+v", 403, o.Payload)
}

func (o *ListCloudGroupsExternalForbidden) GetPayload() *models.AssetgroupmanagerV1MSAResponse {
	return o.Payload
}

func (o *ListCloudGroupsExternalForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1MSAResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCloudGroupsExternalNotFound creates a ListCloudGroupsExternalNotFound with default headers values
func NewListCloudGroupsExternalNotFound() *ListCloudGroupsExternalNotFound {
	return &ListCloudGroupsExternalNotFound{}
}

/*
ListCloudGroupsExternalNotFound describes a response with status code 404, with default header values.

Returned when the resource does not exist.
*/
type ListCloudGroupsExternalNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1MSAResponse
}

// IsSuccess returns true when this list cloud groups external not found response has a 2xx status code
func (o *ListCloudGroupsExternalNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list cloud groups external not found response has a 3xx status code
func (o *ListCloudGroupsExternalNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list cloud groups external not found response has a 4xx status code
func (o *ListCloudGroupsExternalNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list cloud groups external not found response has a 5xx status code
func (o *ListCloudGroupsExternalNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list cloud groups external not found response a status code equal to that given
func (o *ListCloudGroupsExternalNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list cloud groups external not found response
func (o *ListCloudGroupsExternalNotFound) Code() int {
	return 404
}

func (o *ListCloudGroupsExternalNotFound) Error() string {
	return fmt.Sprintf("[GET /cloud-security/combined/cloud-groups/v1][%d] listCloudGroupsExternalNotFound  %+v", 404, o.Payload)
}

func (o *ListCloudGroupsExternalNotFound) String() string {
	return fmt.Sprintf("[GET /cloud-security/combined/cloud-groups/v1][%d] listCloudGroupsExternalNotFound  %+v", 404, o.Payload)
}

func (o *ListCloudGroupsExternalNotFound) GetPayload() *models.AssetgroupmanagerV1MSAResponse {
	return o.Payload
}

func (o *ListCloudGroupsExternalNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1MSAResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCloudGroupsExternalTooManyRequests creates a ListCloudGroupsExternalTooManyRequests with default headers values
func NewListCloudGroupsExternalTooManyRequests() *ListCloudGroupsExternalTooManyRequests {
	return &ListCloudGroupsExternalTooManyRequests{}
}

/*
ListCloudGroupsExternalTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type ListCloudGroupsExternalTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this list cloud groups external too many requests response has a 2xx status code
func (o *ListCloudGroupsExternalTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list cloud groups external too many requests response has a 3xx status code
func (o *ListCloudGroupsExternalTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list cloud groups external too many requests response has a 4xx status code
func (o *ListCloudGroupsExternalTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list cloud groups external too many requests response has a 5xx status code
func (o *ListCloudGroupsExternalTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list cloud groups external too many requests response a status code equal to that given
func (o *ListCloudGroupsExternalTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list cloud groups external too many requests response
func (o *ListCloudGroupsExternalTooManyRequests) Code() int {
	return 429
}

func (o *ListCloudGroupsExternalTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /cloud-security/combined/cloud-groups/v1][%d] listCloudGroupsExternalTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListCloudGroupsExternalTooManyRequests) String() string {
	return fmt.Sprintf("[GET /cloud-security/combined/cloud-groups/v1][%d] listCloudGroupsExternalTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListCloudGroupsExternalTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *ListCloudGroupsExternalTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCloudGroupsExternalInternalServerError creates a ListCloudGroupsExternalInternalServerError with default headers values
func NewListCloudGroupsExternalInternalServerError() *ListCloudGroupsExternalInternalServerError {
	return &ListCloudGroupsExternalInternalServerError{}
}

/*
ListCloudGroupsExternalInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type ListCloudGroupsExternalInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.AssetgroupmanagerV1MSAResponse
}

// IsSuccess returns true when this list cloud groups external internal server error response has a 2xx status code
func (o *ListCloudGroupsExternalInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list cloud groups external internal server error response has a 3xx status code
func (o *ListCloudGroupsExternalInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list cloud groups external internal server error response has a 4xx status code
func (o *ListCloudGroupsExternalInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list cloud groups external internal server error response has a 5xx status code
func (o *ListCloudGroupsExternalInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list cloud groups external internal server error response a status code equal to that given
func (o *ListCloudGroupsExternalInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list cloud groups external internal server error response
func (o *ListCloudGroupsExternalInternalServerError) Code() int {
	return 500
}

func (o *ListCloudGroupsExternalInternalServerError) Error() string {
	return fmt.Sprintf("[GET /cloud-security/combined/cloud-groups/v1][%d] listCloudGroupsExternalInternalServerError  %+v", 500, o.Payload)
}

func (o *ListCloudGroupsExternalInternalServerError) String() string {
	return fmt.Sprintf("[GET /cloud-security/combined/cloud-groups/v1][%d] listCloudGroupsExternalInternalServerError  %+v", 500, o.Payload)
}

func (o *ListCloudGroupsExternalInternalServerError) GetPayload() *models.AssetgroupmanagerV1MSAResponse {
	return o.Payload
}

func (o *ListCloudGroupsExternalInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.AssetgroupmanagerV1MSAResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
