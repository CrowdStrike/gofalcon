// Code generated by go-swagger; DO NOT EDIT.

package falconx_sandbox

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetSampleV2Params creates a new GetSampleV2Params object
// with the default values initialized.
func NewGetSampleV2Params() *GetSampleV2Params {
	var (
		passwordProtectedDefault = string("false")
	)
	return &GetSampleV2Params{
		PasswordProtected: &passwordProtectedDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSampleV2ParamsWithTimeout creates a new GetSampleV2Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSampleV2ParamsWithTimeout(timeout time.Duration) *GetSampleV2Params {
	var (
		passwordProtectedDefault = string("false")
	)
	return &GetSampleV2Params{
		PasswordProtected: &passwordProtectedDefault,

		timeout: timeout,
	}
}

// NewGetSampleV2ParamsWithContext creates a new GetSampleV2Params object
// with the default values initialized, and the ability to set a context for a request
func NewGetSampleV2ParamsWithContext(ctx context.Context) *GetSampleV2Params {
	var (
		passwordProtectedDefault = string("false")
	)
	return &GetSampleV2Params{
		PasswordProtected: &passwordProtectedDefault,

		Context: ctx,
	}
}

// NewGetSampleV2ParamsWithHTTPClient creates a new GetSampleV2Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSampleV2ParamsWithHTTPClient(client *http.Client) *GetSampleV2Params {
	var (
		passwordProtectedDefault = string("false")
	)
	return &GetSampleV2Params{
		PasswordProtected: &passwordProtectedDefault,
		HTTPClient:        client,
	}
}

/*GetSampleV2Params contains all the parameters to send to the API endpoint
for the get sample v2 operation typically these are written to a http.Request
*/
type GetSampleV2Params struct {

	/*XCSUSERUUID
	  User UUID

	*/
	XCSUSERUUID *string
	/*Ids
	  The file SHA256.

	*/
	Ids string
	/*PasswordProtected
	  Flag whether the sample should be zipped and password protected with pass='infected'

	*/
	PasswordProtected *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get sample v2 params
func (o *GetSampleV2Params) WithTimeout(timeout time.Duration) *GetSampleV2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get sample v2 params
func (o *GetSampleV2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get sample v2 params
func (o *GetSampleV2Params) WithContext(ctx context.Context) *GetSampleV2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get sample v2 params
func (o *GetSampleV2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get sample v2 params
func (o *GetSampleV2Params) WithHTTPClient(client *http.Client) *GetSampleV2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get sample v2 params
func (o *GetSampleV2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXCSUSERUUID adds the xCSUSERUUID to the get sample v2 params
func (o *GetSampleV2Params) WithXCSUSERUUID(xCSUSERUUID *string) *GetSampleV2Params {
	o.SetXCSUSERUUID(xCSUSERUUID)
	return o
}

// SetXCSUSERUUID adds the xCSUSERUuid to the get sample v2 params
func (o *GetSampleV2Params) SetXCSUSERUUID(xCSUSERUUID *string) {
	o.XCSUSERUUID = xCSUSERUUID
}

// WithIds adds the ids to the get sample v2 params
func (o *GetSampleV2Params) WithIds(ids string) *GetSampleV2Params {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get sample v2 params
func (o *GetSampleV2Params) SetIds(ids string) {
	o.Ids = ids
}

// WithPasswordProtected adds the passwordProtected to the get sample v2 params
func (o *GetSampleV2Params) WithPasswordProtected(passwordProtected *string) *GetSampleV2Params {
	o.SetPasswordProtected(passwordProtected)
	return o
}

// SetPasswordProtected adds the passwordProtected to the get sample v2 params
func (o *GetSampleV2Params) SetPasswordProtected(passwordProtected *string) {
	o.PasswordProtected = passwordProtected
}

// WriteToRequest writes these params to a swagger request
func (o *GetSampleV2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XCSUSERUUID != nil {

		// header param X-CS-USERUUID
		if err := r.SetHeaderParam("X-CS-USERUUID", *o.XCSUSERUUID); err != nil {
			return err
		}

	}

	// query param ids
	qrIds := o.Ids
	qIds := qrIds
	if qIds != "" {
		if err := r.SetQueryParam("ids", qIds); err != nil {
			return err
		}
	}

	if o.PasswordProtected != nil {

		// query param password_protected
		var qrPasswordProtected string
		if o.PasswordProtected != nil {
			qrPasswordProtected = *o.PasswordProtected
		}
		qPasswordProtected := qrPasswordProtected
		if qPasswordProtected != "" {
			if err := r.SetQueryParam("password_protected", qPasswordProtected); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
