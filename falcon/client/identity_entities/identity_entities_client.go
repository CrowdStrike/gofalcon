// Code generated by go-swagger; DO NOT EDIT.

package identity_entities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new identity entities API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for identity entities API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetSensorAggregates(params *GetSensorAggregatesParams, opts ...ClientOption) (*GetSensorAggregatesOK, error)

	GetSensorDetails(params *GetSensorDetailsParams, opts ...ClientOption) (*GetSensorDetailsOK, error)

	QuerySensorsByFilter(params *QuerySensorsByFilterParams, opts ...ClientOption) (*QuerySensorsByFilterOK, error)

	APIIdpEntitiesExplorerAPIAggregateEntities(params *APIIdpEntitiesExplorerAPIAggregateEntitiesParams, opts ...ClientOption) (*APIIdpEntitiesExplorerAPIAggregateEntitiesOK, error)

	APIIdpEntitiesExplorerAPIEntitiesReport(params *APIIdpEntitiesExplorerAPIEntitiesReportParams, opts ...ClientOption) (*APIIdpEntitiesExplorerAPIEntitiesReportOK, error)

	APIIdpEntitiesExplorerAPIFetchEntities(params *APIIdpEntitiesExplorerAPIFetchEntitiesParams, opts ...ClientOption) (*APIIdpEntitiesExplorerAPIFetchEntitiesOK, error)

	APIIdpEntitiesExplorerAPIQueryEntities(params *APIIdpEntitiesExplorerAPIQueryEntitiesParams, opts ...ClientOption) (*APIIdpEntitiesExplorerAPIQueryEntitiesOK, error)

	APIIdpEntitiesExplorerAPIUpdateEntities(params *APIIdpEntitiesExplorerAPIUpdateEntitiesParams, opts ...ClientOption) (*APIIdpEntitiesExplorerAPIUpdateEntitiesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetSensorAggregates gets sensor aggregates as specified via json in request body
*/
func (a *Client) GetSensorAggregates(params *GetSensorAggregatesParams, opts ...ClientOption) (*GetSensorAggregatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSensorAggregatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSensorAggregates",
		Method:             "POST",
		PathPattern:        "/identity-protection/aggregates/devices/GET/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSensorAggregatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSensorAggregatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSensorAggregates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSensorDetails gets details on one or more sensors by providing device i ds in a p o s t body supports up to a maximum of 5000 i ds
*/
func (a *Client) GetSensorDetails(params *GetSensorDetailsParams, opts ...ClientOption) (*GetSensorDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSensorDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSensorDetails",
		Method:             "POST",
		PathPattern:        "/identity-protection/entities/devices/GET/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSensorDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSensorDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSensorDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QuerySensorsByFilter searches for sensors in your environment by hostname IP and other criteria
*/
func (a *Client) QuerySensorsByFilter(params *QuerySensorsByFilterParams, opts ...ClientOption) (*QuerySensorsByFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuerySensorsByFilterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QuerySensorsByFilter",
		Method:             "GET",
		PathPattern:        "/identity-protection/queries/devices/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QuerySensorsByFilterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QuerySensorsByFilterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QuerySensorsByFilter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
APIIdpEntitiesExplorerAPIAggregateEntities gets entities aggregates as specified via json in request body
*/
func (a *Client) APIIdpEntitiesExplorerAPIAggregateEntities(params *APIIdpEntitiesExplorerAPIAggregateEntitiesParams, opts ...ClientOption) (*APIIdpEntitiesExplorerAPIAggregateEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIdpEntitiesExplorerAPIAggregateEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api.idp-entities-explorer.api.aggregate-entities",
		Method:             "POST",
		PathPattern:        "/idp-entities-explorer/aggregates/entities/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APIIdpEntitiesExplorerAPIAggregateEntitiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIIdpEntitiesExplorerAPIAggregateEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api.idp-entities-explorer.api.aggregate-entities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
APIIdpEntitiesExplorerAPIEntitiesReport launches entities report job
*/
func (a *Client) APIIdpEntitiesExplorerAPIEntitiesReport(params *APIIdpEntitiesExplorerAPIEntitiesReportParams, opts ...ClientOption) (*APIIdpEntitiesExplorerAPIEntitiesReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIdpEntitiesExplorerAPIEntitiesReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api.idp-entities-explorer.api.entities-report",
		Method:             "POST",
		PathPattern:        "/idp-entities-explorer/entities/entities-report/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APIIdpEntitiesExplorerAPIEntitiesReportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIIdpEntitiesExplorerAPIEntitiesReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api.idp-entities-explorer.api.entities-report: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
APIIdpEntitiesExplorerAPIFetchEntities gets entities data by providing entity i ds in a p o s t body supports up to a maximum of 200 i ds
*/
func (a *Client) APIIdpEntitiesExplorerAPIFetchEntities(params *APIIdpEntitiesExplorerAPIFetchEntitiesParams, opts ...ClientOption) (*APIIdpEntitiesExplorerAPIFetchEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIdpEntitiesExplorerAPIFetchEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api.idp-entities-explorer.api.fetch-entities",
		Method:             "POST",
		PathPattern:        "/idp-entities-explorer/entities/entities/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APIIdpEntitiesExplorerAPIFetchEntitiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIIdpEntitiesExplorerAPIFetchEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api.idp-entities-explorer.api.fetch-entities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
APIIdpEntitiesExplorerAPIQueryEntities searches for entities
*/
func (a *Client) APIIdpEntitiesExplorerAPIQueryEntities(params *APIIdpEntitiesExplorerAPIQueryEntitiesParams, opts ...ClientOption) (*APIIdpEntitiesExplorerAPIQueryEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIdpEntitiesExplorerAPIQueryEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api.idp-entities-explorer.api.query-entities",
		Method:             "GET",
		PathPattern:        "/idp-entities-explorer/queries/entities/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APIIdpEntitiesExplorerAPIQueryEntitiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIIdpEntitiesExplorerAPIQueryEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api.idp-entities-explorer.api.query-entities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
APIIdpEntitiesExplorerAPIUpdateEntities modifies entities by providing entity i ds and operation details in a p a t c h body supports up to a maximum of 200 i ds
*/
func (a *Client) APIIdpEntitiesExplorerAPIUpdateEntities(params *APIIdpEntitiesExplorerAPIUpdateEntitiesParams, opts ...ClientOption) (*APIIdpEntitiesExplorerAPIUpdateEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIdpEntitiesExplorerAPIUpdateEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api.idp-entities-explorer.api.update-entities",
		Method:             "PATCH",
		PathPattern:        "/idp-entities-explorer/entities/entities/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APIIdpEntitiesExplorerAPIUpdateEntitiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIIdpEntitiesExplorerAPIUpdateEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api.idp-entities-explorer.api.update-entities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
