// Code generated by go-swagger; DO NOT EDIT.

package real_time_response_admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRTRCreatePutFilesParams creates a new RTRCreatePutFilesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRTRCreatePutFilesParams() *RTRCreatePutFilesParams {
	return &RTRCreatePutFilesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRTRCreatePutFilesParamsWithTimeout creates a new RTRCreatePutFilesParams object
// with the ability to set a timeout on a request.
func NewRTRCreatePutFilesParamsWithTimeout(timeout time.Duration) *RTRCreatePutFilesParams {
	return &RTRCreatePutFilesParams{
		timeout: timeout,
	}
}

// NewRTRCreatePutFilesParamsWithContext creates a new RTRCreatePutFilesParams object
// with the ability to set a context for a request.
func NewRTRCreatePutFilesParamsWithContext(ctx context.Context) *RTRCreatePutFilesParams {
	return &RTRCreatePutFilesParams{
		Context: ctx,
	}
}

// NewRTRCreatePutFilesParamsWithHTTPClient creates a new RTRCreatePutFilesParams object
// with the ability to set a custom HTTPClient for a request.
func NewRTRCreatePutFilesParamsWithHTTPClient(client *http.Client) *RTRCreatePutFilesParams {
	return &RTRCreatePutFilesParams{
		HTTPClient: client,
	}
}

/*
RTRCreatePutFilesParams contains all the parameters to send to the API endpoint

	for the r t r create put files operation.

	Typically these are written to a http.Request.
*/
type RTRCreatePutFilesParams struct {

	/* CommentsForAuditLog.

	   The audit log comment
	*/
	CommentsForAuditLog *string

	/* Description.

	   File description
	*/
	Description string

	/* File.

	   put-file to upload
	*/
	File runtime.NamedReadCloser

	/* Name.

	   File name (if different than actual file name)
	*/
	Name *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the r t r create put files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RTRCreatePutFilesParams) WithDefaults() *RTRCreatePutFilesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the r t r create put files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RTRCreatePutFilesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the r t r create put files params
func (o *RTRCreatePutFilesParams) WithTimeout(timeout time.Duration) *RTRCreatePutFilesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the r t r create put files params
func (o *RTRCreatePutFilesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the r t r create put files params
func (o *RTRCreatePutFilesParams) WithContext(ctx context.Context) *RTRCreatePutFilesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the r t r create put files params
func (o *RTRCreatePutFilesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the r t r create put files params
func (o *RTRCreatePutFilesParams) WithHTTPClient(client *http.Client) *RTRCreatePutFilesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the r t r create put files params
func (o *RTRCreatePutFilesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCommentsForAuditLog adds the commentsForAuditLog to the r t r create put files params
func (o *RTRCreatePutFilesParams) WithCommentsForAuditLog(commentsForAuditLog *string) *RTRCreatePutFilesParams {
	o.SetCommentsForAuditLog(commentsForAuditLog)
	return o
}

// SetCommentsForAuditLog adds the commentsForAuditLog to the r t r create put files params
func (o *RTRCreatePutFilesParams) SetCommentsForAuditLog(commentsForAuditLog *string) {
	o.CommentsForAuditLog = commentsForAuditLog
}

// WithDescription adds the description to the r t r create put files params
func (o *RTRCreatePutFilesParams) WithDescription(description string) *RTRCreatePutFilesParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the r t r create put files params
func (o *RTRCreatePutFilesParams) SetDescription(description string) {
	o.Description = description
}

// WithFile adds the file to the r t r create put files params
func (o *RTRCreatePutFilesParams) WithFile(file runtime.NamedReadCloser) *RTRCreatePutFilesParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the r t r create put files params
func (o *RTRCreatePutFilesParams) SetFile(file runtime.NamedReadCloser) {
	o.File = file
}

// WithName adds the name to the r t r create put files params
func (o *RTRCreatePutFilesParams) WithName(name *string) *RTRCreatePutFilesParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the r t r create put files params
func (o *RTRCreatePutFilesParams) SetName(name *string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *RTRCreatePutFilesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CommentsForAuditLog != nil {

		// form param comments_for_audit_log
		var frCommentsForAuditLog string
		if o.CommentsForAuditLog != nil {
			frCommentsForAuditLog = *o.CommentsForAuditLog
		}
		fCommentsForAuditLog := frCommentsForAuditLog
		if fCommentsForAuditLog != "" {
			if err := r.SetFormParam("comments_for_audit_log", fCommentsForAuditLog); err != nil {
				return err
			}
		}
	}

	// form param description
	frDescription := o.Description
	fDescription := frDescription
	if fDescription != "" {
		if err := r.SetFormParam("description", fDescription); err != nil {
			return err
		}
	}
	// form file param file
	if err := r.SetFileParam("file", o.File); err != nil {
		return err
	}

	if o.Name != nil {

		// form param name
		var frName string
		if o.Name != nil {
			frName = *o.Name
		}
		fName := frName
		if fName != "" {
			if err := r.SetFormParam("name", fName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
