// Code generated by go-swagger; DO NOT EDIT.

package real_time_response_admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// RTRGetPutFileContentsReader is a Reader for the RTRGetPutFileContents structure.
type RTRGetPutFileContentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RTRGetPutFileContentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRTRGetPutFileContentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRTRGetPutFileContentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRTRGetPutFileContentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRTRGetPutFileContentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewRTRGetPutFileContentsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRTRGetPutFileContentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /real-time-response/entities/put-file-contents/v1] RTR-GetPutFileContents", response, response.Code())
	}
}

// NewRTRGetPutFileContentsOK creates a RTRGetPutFileContentsOK with default headers values
func NewRTRGetPutFileContentsOK() *RTRGetPutFileContentsOK {
	return &RTRGetPutFileContentsOK{}
}

/*
RTRGetPutFileContentsOK describes a response with status code 200, with default header values.

OK
*/
type RTRGetPutFileContentsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload []int64
}

// IsSuccess returns true when this r t r get put file contents o k response has a 2xx status code
func (o *RTRGetPutFileContentsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this r t r get put file contents o k response has a 3xx status code
func (o *RTRGetPutFileContentsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this r t r get put file contents o k response has a 4xx status code
func (o *RTRGetPutFileContentsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this r t r get put file contents o k response has a 5xx status code
func (o *RTRGetPutFileContentsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this r t r get put file contents o k response a status code equal to that given
func (o *RTRGetPutFileContentsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the r t r get put file contents o k response
func (o *RTRGetPutFileContentsOK) Code() int {
	return 200
}

func (o *RTRGetPutFileContentsOK) Error() string {
	return fmt.Sprintf("[GET /real-time-response/entities/put-file-contents/v1][%d] rTRGetPutFileContentsOK  %+v", 200, o.Payload)
}

func (o *RTRGetPutFileContentsOK) String() string {
	return fmt.Sprintf("[GET /real-time-response/entities/put-file-contents/v1][%d] rTRGetPutFileContentsOK  %+v", 200, o.Payload)
}

func (o *RTRGetPutFileContentsOK) GetPayload() []int64 {
	return o.Payload
}

func (o *RTRGetPutFileContentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRTRGetPutFileContentsBadRequest creates a RTRGetPutFileContentsBadRequest with default headers values
func NewRTRGetPutFileContentsBadRequest() *RTRGetPutFileContentsBadRequest {
	return &RTRGetPutFileContentsBadRequest{}
}

/*
RTRGetPutFileContentsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RTRGetPutFileContentsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAPIError
}

// IsSuccess returns true when this r t r get put file contents bad request response has a 2xx status code
func (o *RTRGetPutFileContentsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this r t r get put file contents bad request response has a 3xx status code
func (o *RTRGetPutFileContentsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this r t r get put file contents bad request response has a 4xx status code
func (o *RTRGetPutFileContentsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this r t r get put file contents bad request response has a 5xx status code
func (o *RTRGetPutFileContentsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this r t r get put file contents bad request response a status code equal to that given
func (o *RTRGetPutFileContentsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the r t r get put file contents bad request response
func (o *RTRGetPutFileContentsBadRequest) Code() int {
	return 400
}

func (o *RTRGetPutFileContentsBadRequest) Error() string {
	return fmt.Sprintf("[GET /real-time-response/entities/put-file-contents/v1][%d] rTRGetPutFileContentsBadRequest  %+v", 400, o.Payload)
}

func (o *RTRGetPutFileContentsBadRequest) String() string {
	return fmt.Sprintf("[GET /real-time-response/entities/put-file-contents/v1][%d] rTRGetPutFileContentsBadRequest  %+v", 400, o.Payload)
}

func (o *RTRGetPutFileContentsBadRequest) GetPayload() *models.DomainAPIError {
	return o.Payload
}

func (o *RTRGetPutFileContentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRTRGetPutFileContentsForbidden creates a RTRGetPutFileContentsForbidden with default headers values
func NewRTRGetPutFileContentsForbidden() *RTRGetPutFileContentsForbidden {
	return &RTRGetPutFileContentsForbidden{}
}

/*
RTRGetPutFileContentsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RTRGetPutFileContentsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this r t r get put file contents forbidden response has a 2xx status code
func (o *RTRGetPutFileContentsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this r t r get put file contents forbidden response has a 3xx status code
func (o *RTRGetPutFileContentsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this r t r get put file contents forbidden response has a 4xx status code
func (o *RTRGetPutFileContentsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this r t r get put file contents forbidden response has a 5xx status code
func (o *RTRGetPutFileContentsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this r t r get put file contents forbidden response a status code equal to that given
func (o *RTRGetPutFileContentsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the r t r get put file contents forbidden response
func (o *RTRGetPutFileContentsForbidden) Code() int {
	return 403
}

func (o *RTRGetPutFileContentsForbidden) Error() string {
	return fmt.Sprintf("[GET /real-time-response/entities/put-file-contents/v1][%d] rTRGetPutFileContentsForbidden  %+v", 403, o.Payload)
}

func (o *RTRGetPutFileContentsForbidden) String() string {
	return fmt.Sprintf("[GET /real-time-response/entities/put-file-contents/v1][%d] rTRGetPutFileContentsForbidden  %+v", 403, o.Payload)
}

func (o *RTRGetPutFileContentsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *RTRGetPutFileContentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRTRGetPutFileContentsNotFound creates a RTRGetPutFileContentsNotFound with default headers values
func NewRTRGetPutFileContentsNotFound() *RTRGetPutFileContentsNotFound {
	return &RTRGetPutFileContentsNotFound{}
}

/*
RTRGetPutFileContentsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RTRGetPutFileContentsNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAPIError
}

// IsSuccess returns true when this r t r get put file contents not found response has a 2xx status code
func (o *RTRGetPutFileContentsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this r t r get put file contents not found response has a 3xx status code
func (o *RTRGetPutFileContentsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this r t r get put file contents not found response has a 4xx status code
func (o *RTRGetPutFileContentsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this r t r get put file contents not found response has a 5xx status code
func (o *RTRGetPutFileContentsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this r t r get put file contents not found response a status code equal to that given
func (o *RTRGetPutFileContentsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the r t r get put file contents not found response
func (o *RTRGetPutFileContentsNotFound) Code() int {
	return 404
}

func (o *RTRGetPutFileContentsNotFound) Error() string {
	return fmt.Sprintf("[GET /real-time-response/entities/put-file-contents/v1][%d] rTRGetPutFileContentsNotFound  %+v", 404, o.Payload)
}

func (o *RTRGetPutFileContentsNotFound) String() string {
	return fmt.Sprintf("[GET /real-time-response/entities/put-file-contents/v1][%d] rTRGetPutFileContentsNotFound  %+v", 404, o.Payload)
}

func (o *RTRGetPutFileContentsNotFound) GetPayload() *models.DomainAPIError {
	return o.Payload
}

func (o *RTRGetPutFileContentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRTRGetPutFileContentsTooManyRequests creates a RTRGetPutFileContentsTooManyRequests with default headers values
func NewRTRGetPutFileContentsTooManyRequests() *RTRGetPutFileContentsTooManyRequests {
	return &RTRGetPutFileContentsTooManyRequests{}
}

/*
RTRGetPutFileContentsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type RTRGetPutFileContentsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this r t r get put file contents too many requests response has a 2xx status code
func (o *RTRGetPutFileContentsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this r t r get put file contents too many requests response has a 3xx status code
func (o *RTRGetPutFileContentsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this r t r get put file contents too many requests response has a 4xx status code
func (o *RTRGetPutFileContentsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this r t r get put file contents too many requests response has a 5xx status code
func (o *RTRGetPutFileContentsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this r t r get put file contents too many requests response a status code equal to that given
func (o *RTRGetPutFileContentsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the r t r get put file contents too many requests response
func (o *RTRGetPutFileContentsTooManyRequests) Code() int {
	return 429
}

func (o *RTRGetPutFileContentsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /real-time-response/entities/put-file-contents/v1][%d] rTRGetPutFileContentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *RTRGetPutFileContentsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /real-time-response/entities/put-file-contents/v1][%d] rTRGetPutFileContentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *RTRGetPutFileContentsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *RTRGetPutFileContentsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRTRGetPutFileContentsInternalServerError creates a RTRGetPutFileContentsInternalServerError with default headers values
func NewRTRGetPutFileContentsInternalServerError() *RTRGetPutFileContentsInternalServerError {
	return &RTRGetPutFileContentsInternalServerError{}
}

/*
RTRGetPutFileContentsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RTRGetPutFileContentsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.DomainAPIError
}

// IsSuccess returns true when this r t r get put file contents internal server error response has a 2xx status code
func (o *RTRGetPutFileContentsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this r t r get put file contents internal server error response has a 3xx status code
func (o *RTRGetPutFileContentsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this r t r get put file contents internal server error response has a 4xx status code
func (o *RTRGetPutFileContentsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this r t r get put file contents internal server error response has a 5xx status code
func (o *RTRGetPutFileContentsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this r t r get put file contents internal server error response a status code equal to that given
func (o *RTRGetPutFileContentsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the r t r get put file contents internal server error response
func (o *RTRGetPutFileContentsInternalServerError) Code() int {
	return 500
}

func (o *RTRGetPutFileContentsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /real-time-response/entities/put-file-contents/v1][%d] rTRGetPutFileContentsInternalServerError  %+v", 500, o.Payload)
}

func (o *RTRGetPutFileContentsInternalServerError) String() string {
	return fmt.Sprintf("[GET /real-time-response/entities/put-file-contents/v1][%d] rTRGetPutFileContentsInternalServerError  %+v", 500, o.Payload)
}

func (o *RTRGetPutFileContentsInternalServerError) GetPayload() *models.DomainAPIError {
	return o.Payload
}

func (o *RTRGetPutFileContentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.DomainAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
