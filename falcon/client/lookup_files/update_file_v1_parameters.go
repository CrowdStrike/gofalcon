// Code generated by go-swagger; DO NOT EDIT.

package lookup_files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUpdateFileV1Params creates a new UpdateFileV1Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateFileV1Params() *UpdateFileV1Params {
	return &UpdateFileV1Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateFileV1ParamsWithTimeout creates a new UpdateFileV1Params object
// with the ability to set a timeout on a request.
func NewUpdateFileV1ParamsWithTimeout(timeout time.Duration) *UpdateFileV1Params {
	return &UpdateFileV1Params{
		timeout: timeout,
	}
}

// NewUpdateFileV1ParamsWithContext creates a new UpdateFileV1Params object
// with the ability to set a context for a request.
func NewUpdateFileV1ParamsWithContext(ctx context.Context) *UpdateFileV1Params {
	return &UpdateFileV1Params{
		Context: ctx,
	}
}

// NewUpdateFileV1ParamsWithHTTPClient creates a new UpdateFileV1Params object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateFileV1ParamsWithHTTPClient(client *http.Client) *UpdateFileV1Params {
	return &UpdateFileV1Params{
		HTTPClient: client,
	}
}

/*
UpdateFileV1Params contains all the parameters to send to the API endpoint

	for the update file v1 operation.

	Typically these are written to a http.Request.
*/
type UpdateFileV1Params struct {

	/* XCSUSERNAME.

	   Requester Username.
	*/
	XCSUSERNAME *string

	/* XCSUSERUUID.

	   Requester UUID.
	*/
	XCSUSERUUID *string

	/* Description.

	   File description
	*/
	Description *string

	/* File.

	   File to be uploaded
	*/
	File runtime.NamedReadCloser

	/* ID.

	   Unique identifier of the file being updated.
	*/
	ID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update file v1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateFileV1Params) WithDefaults() *UpdateFileV1Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update file v1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateFileV1Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update file v1 params
func (o *UpdateFileV1Params) WithTimeout(timeout time.Duration) *UpdateFileV1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update file v1 params
func (o *UpdateFileV1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update file v1 params
func (o *UpdateFileV1Params) WithContext(ctx context.Context) *UpdateFileV1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update file v1 params
func (o *UpdateFileV1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update file v1 params
func (o *UpdateFileV1Params) WithHTTPClient(client *http.Client) *UpdateFileV1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update file v1 params
func (o *UpdateFileV1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXCSUSERNAME adds the xCSUSERNAME to the update file v1 params
func (o *UpdateFileV1Params) WithXCSUSERNAME(xCSUSERNAME *string) *UpdateFileV1Params {
	o.SetXCSUSERNAME(xCSUSERNAME)
	return o
}

// SetXCSUSERNAME adds the xCSUSERNAME to the update file v1 params
func (o *UpdateFileV1Params) SetXCSUSERNAME(xCSUSERNAME *string) {
	o.XCSUSERNAME = xCSUSERNAME
}

// WithXCSUSERUUID adds the xCSUSERUUID to the update file v1 params
func (o *UpdateFileV1Params) WithXCSUSERUUID(xCSUSERUUID *string) *UpdateFileV1Params {
	o.SetXCSUSERUUID(xCSUSERUUID)
	return o
}

// SetXCSUSERUUID adds the xCSUSERUuid to the update file v1 params
func (o *UpdateFileV1Params) SetXCSUSERUUID(xCSUSERUUID *string) {
	o.XCSUSERUUID = xCSUSERUUID
}

// WithDescription adds the description to the update file v1 params
func (o *UpdateFileV1Params) WithDescription(description *string) *UpdateFileV1Params {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the update file v1 params
func (o *UpdateFileV1Params) SetDescription(description *string) {
	o.Description = description
}

// WithFile adds the file to the update file v1 params
func (o *UpdateFileV1Params) WithFile(file runtime.NamedReadCloser) *UpdateFileV1Params {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the update file v1 params
func (o *UpdateFileV1Params) SetFile(file runtime.NamedReadCloser) {
	o.File = file
}

// WithID adds the id to the update file v1 params
func (o *UpdateFileV1Params) WithID(id string) *UpdateFileV1Params {
	o.SetID(id)
	return o
}

// SetID adds the id to the update file v1 params
func (o *UpdateFileV1Params) SetID(id string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateFileV1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XCSUSERNAME != nil {

		// header param X-CS-USERNAME
		if err := r.SetHeaderParam("X-CS-USERNAME", *o.XCSUSERNAME); err != nil {
			return err
		}
	}

	if o.XCSUSERUUID != nil {

		// header param X-CS-USERUUID
		if err := r.SetHeaderParam("X-CS-USERUUID", *o.XCSUSERUUID); err != nil {
			return err
		}
	}

	if o.Description != nil {

		// form param description
		var frDescription string
		if o.Description != nil {
			frDescription = *o.Description
		}
		fDescription := frDescription
		if fDescription != "" {
			if err := r.SetFormParam("description", fDescription); err != nil {
				return err
			}
		}
	}

	if o.File != nil {

		if o.File != nil {
			// form file param file
			if err := r.SetFileParam("file", o.File); err != nil {
				return err
			}
		}
	}

	// form param id
	frID := o.ID
	fID := frID
	if fID != "" {
		if err := r.SetFormParam("id", fID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
