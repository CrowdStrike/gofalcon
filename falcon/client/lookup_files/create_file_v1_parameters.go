// Code generated by go-swagger; DO NOT EDIT.

package lookup_files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCreateFileV1Params creates a new CreateFileV1Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateFileV1Params() *CreateFileV1Params {
	return &CreateFileV1Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateFileV1ParamsWithTimeout creates a new CreateFileV1Params object
// with the ability to set a timeout on a request.
func NewCreateFileV1ParamsWithTimeout(timeout time.Duration) *CreateFileV1Params {
	return &CreateFileV1Params{
		timeout: timeout,
	}
}

// NewCreateFileV1ParamsWithContext creates a new CreateFileV1Params object
// with the ability to set a context for a request.
func NewCreateFileV1ParamsWithContext(ctx context.Context) *CreateFileV1Params {
	return &CreateFileV1Params{
		Context: ctx,
	}
}

// NewCreateFileV1ParamsWithHTTPClient creates a new CreateFileV1Params object
// with the ability to set a custom HTTPClient for a request.
func NewCreateFileV1ParamsWithHTTPClient(client *http.Client) *CreateFileV1Params {
	return &CreateFileV1Params{
		HTTPClient: client,
	}
}

/*
CreateFileV1Params contains all the parameters to send to the API endpoint

	for the create file v1 operation.

	Typically these are written to a http.Request.
*/
type CreateFileV1Params struct {

	/* Description.

	   File description
	*/
	Description *string

	/* File.

	   File to be uploaded
	*/
	File runtime.NamedReadCloser

	/* ID.

	   Unique identifier of the file being updated.
	*/
	ID *string

	/* Name.

	   Name used to identify the file
	*/
	Name string

	/* Repo.

	   Name of repository or view to save the file
	*/
	Repo *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create file v1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateFileV1Params) WithDefaults() *CreateFileV1Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create file v1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateFileV1Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create file v1 params
func (o *CreateFileV1Params) WithTimeout(timeout time.Duration) *CreateFileV1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create file v1 params
func (o *CreateFileV1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create file v1 params
func (o *CreateFileV1Params) WithContext(ctx context.Context) *CreateFileV1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create file v1 params
func (o *CreateFileV1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create file v1 params
func (o *CreateFileV1Params) WithHTTPClient(client *http.Client) *CreateFileV1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create file v1 params
func (o *CreateFileV1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDescription adds the description to the create file v1 params
func (o *CreateFileV1Params) WithDescription(description *string) *CreateFileV1Params {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the create file v1 params
func (o *CreateFileV1Params) SetDescription(description *string) {
	o.Description = description
}

// WithFile adds the file to the create file v1 params
func (o *CreateFileV1Params) WithFile(file runtime.NamedReadCloser) *CreateFileV1Params {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the create file v1 params
func (o *CreateFileV1Params) SetFile(file runtime.NamedReadCloser) {
	o.File = file
}

// WithID adds the id to the create file v1 params
func (o *CreateFileV1Params) WithID(id *string) *CreateFileV1Params {
	o.SetID(id)
	return o
}

// SetID adds the id to the create file v1 params
func (o *CreateFileV1Params) SetID(id *string) {
	o.ID = id
}

// WithName adds the name to the create file v1 params
func (o *CreateFileV1Params) WithName(name string) *CreateFileV1Params {
	o.SetName(name)
	return o
}

// SetName adds the name to the create file v1 params
func (o *CreateFileV1Params) SetName(name string) {
	o.Name = name
}

// WithRepo adds the repo to the create file v1 params
func (o *CreateFileV1Params) WithRepo(repo *string) *CreateFileV1Params {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the create file v1 params
func (o *CreateFileV1Params) SetRepo(repo *string) {
	o.Repo = repo
}

// WriteToRequest writes these params to a swagger request
func (o *CreateFileV1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Description != nil {

		// form param description
		var frDescription string
		if o.Description != nil {
			frDescription = *o.Description
		}
		fDescription := frDescription
		if fDescription != "" {
			if err := r.SetFormParam("description", fDescription); err != nil {
				return err
			}
		}
	}
	// form file param file
	if err := r.SetFileParam("file", o.File); err != nil {
		return err
	}

	if o.ID != nil {

		// form param id
		var frID string
		if o.ID != nil {
			frID = *o.ID
		}
		fID := frID
		if fID != "" {
			if err := r.SetFormParam("id", fID); err != nil {
				return err
			}
		}
	}

	// form param name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("name", fName); err != nil {
			return err
		}
	}

	if o.Repo != nil {

		// form param repo
		var frRepo string
		if o.Repo != nil {
			frRepo = *o.Repo
		}
		fRepo := frRepo
		if fRepo != "" {
			if err := r.SetFormParam("repo", fRepo); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
