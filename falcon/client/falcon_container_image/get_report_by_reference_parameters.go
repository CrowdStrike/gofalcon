// Code generated by go-swagger; DO NOT EDIT.

package falcon_container_image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetReportByReferenceParams creates a new GetReportByReferenceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetReportByReferenceParams() *GetReportByReferenceParams {
	return &GetReportByReferenceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetReportByReferenceParamsWithTimeout creates a new GetReportByReferenceParams object
// with the ability to set a timeout on a request.
func NewGetReportByReferenceParamsWithTimeout(timeout time.Duration) *GetReportByReferenceParams {
	return &GetReportByReferenceParams{
		timeout: timeout,
	}
}

// NewGetReportByReferenceParamsWithContext creates a new GetReportByReferenceParams object
// with the ability to set a context for a request.
func NewGetReportByReferenceParamsWithContext(ctx context.Context) *GetReportByReferenceParams {
	return &GetReportByReferenceParams{
		Context: ctx,
	}
}

// NewGetReportByReferenceParamsWithHTTPClient creates a new GetReportByReferenceParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetReportByReferenceParamsWithHTTPClient(client *http.Client) *GetReportByReferenceParams {
	return &GetReportByReferenceParams{
		HTTPClient: client,
	}
}

/*
GetReportByReferenceParams contains all the parameters to send to the API endpoint

	for the get report by reference operation.

	Typically these are written to a http.Request.
*/
type GetReportByReferenceParams struct {

	/* Digest.

	   Digest
	*/
	Digest *string

	/* ImageID.

	   Image ID
	*/
	ImageID *string

	/* Registry.

	   Registry
	*/
	Registry *string

	/* ReportFormat.

	     Specify image-assessment scan report format. Supported formats:
	- `cyclonedx-json`
	- `json`
	- `sarif`

	     Default: "json"
	*/
	ReportFormat *string

	/* Repository.

	   Repository
	*/
	Repository *string

	/* Tag.

	   Tag
	*/
	Tag *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get report by reference params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetReportByReferenceParams) WithDefaults() *GetReportByReferenceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get report by reference params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetReportByReferenceParams) SetDefaults() {
	var (
		reportFormatDefault = string("json")
	)

	val := GetReportByReferenceParams{
		ReportFormat: &reportFormatDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get report by reference params
func (o *GetReportByReferenceParams) WithTimeout(timeout time.Duration) *GetReportByReferenceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get report by reference params
func (o *GetReportByReferenceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get report by reference params
func (o *GetReportByReferenceParams) WithContext(ctx context.Context) *GetReportByReferenceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get report by reference params
func (o *GetReportByReferenceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get report by reference params
func (o *GetReportByReferenceParams) WithHTTPClient(client *http.Client) *GetReportByReferenceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get report by reference params
func (o *GetReportByReferenceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDigest adds the digest to the get report by reference params
func (o *GetReportByReferenceParams) WithDigest(digest *string) *GetReportByReferenceParams {
	o.SetDigest(digest)
	return o
}

// SetDigest adds the digest to the get report by reference params
func (o *GetReportByReferenceParams) SetDigest(digest *string) {
	o.Digest = digest
}

// WithImageID adds the imageID to the get report by reference params
func (o *GetReportByReferenceParams) WithImageID(imageID *string) *GetReportByReferenceParams {
	o.SetImageID(imageID)
	return o
}

// SetImageID adds the imageId to the get report by reference params
func (o *GetReportByReferenceParams) SetImageID(imageID *string) {
	o.ImageID = imageID
}

// WithRegistry adds the registry to the get report by reference params
func (o *GetReportByReferenceParams) WithRegistry(registry *string) *GetReportByReferenceParams {
	o.SetRegistry(registry)
	return o
}

// SetRegistry adds the registry to the get report by reference params
func (o *GetReportByReferenceParams) SetRegistry(registry *string) {
	o.Registry = registry
}

// WithReportFormat adds the reportFormat to the get report by reference params
func (o *GetReportByReferenceParams) WithReportFormat(reportFormat *string) *GetReportByReferenceParams {
	o.SetReportFormat(reportFormat)
	return o
}

// SetReportFormat adds the reportFormat to the get report by reference params
func (o *GetReportByReferenceParams) SetReportFormat(reportFormat *string) {
	o.ReportFormat = reportFormat
}

// WithRepository adds the repository to the get report by reference params
func (o *GetReportByReferenceParams) WithRepository(repository *string) *GetReportByReferenceParams {
	o.SetRepository(repository)
	return o
}

// SetRepository adds the repository to the get report by reference params
func (o *GetReportByReferenceParams) SetRepository(repository *string) {
	o.Repository = repository
}

// WithTag adds the tag to the get report by reference params
func (o *GetReportByReferenceParams) WithTag(tag *string) *GetReportByReferenceParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the get report by reference params
func (o *GetReportByReferenceParams) SetTag(tag *string) {
	o.Tag = tag
}

// WriteToRequest writes these params to a swagger request
func (o *GetReportByReferenceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Digest != nil {

		// query param digest
		var qrDigest string

		if o.Digest != nil {
			qrDigest = *o.Digest
		}
		qDigest := qrDigest
		if qDigest != "" {

			if err := r.SetQueryParam("digest", qDigest); err != nil {
				return err
			}
		}
	}

	if o.ImageID != nil {

		// query param image_id
		var qrImageID string

		if o.ImageID != nil {
			qrImageID = *o.ImageID
		}
		qImageID := qrImageID
		if qImageID != "" {

			if err := r.SetQueryParam("image_id", qImageID); err != nil {
				return err
			}
		}
	}

	if o.Registry != nil {

		// query param registry
		var qrRegistry string

		if o.Registry != nil {
			qrRegistry = *o.Registry
		}
		qRegistry := qrRegistry
		if qRegistry != "" {

			if err := r.SetQueryParam("registry", qRegistry); err != nil {
				return err
			}
		}
	}

	if o.ReportFormat != nil {

		// query param report_format
		var qrReportFormat string

		if o.ReportFormat != nil {
			qrReportFormat = *o.ReportFormat
		}
		qReportFormat := qrReportFormat
		if qReportFormat != "" {

			if err := r.SetQueryParam("report_format", qReportFormat); err != nil {
				return err
			}
		}
	}

	if o.Repository != nil {

		// query param repository
		var qrRepository string

		if o.Repository != nil {
			qrRepository = *o.Repository
		}
		qRepository := qrRepository
		if qRepository != "" {

			if err := r.SetQueryParam("repository", qRepository); err != nil {
				return err
			}
		}
	}

	if o.Tag != nil {

		// query param tag
		var qrTag string

		if o.Tag != nil {
			qrTag = *o.Tag
		}
		qTag := qrTag
		if qTag != "" {

			if err := r.SetQueryParam("tag", qTag); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
