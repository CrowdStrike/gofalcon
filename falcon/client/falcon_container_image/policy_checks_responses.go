// Code generated by go-swagger; DO NOT EDIT.

package falcon_container_image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// PolicyChecksReader is a Reader for the PolicyChecks structure.
type PolicyChecksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PolicyChecksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPolicyChecksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPolicyChecksBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPolicyChecksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPolicyChecksNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPolicyChecksTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPolicyChecksInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /image-assessment/entities/policy-checks/v2] PolicyChecks", response, response.Code())
	}
}

// NewPolicyChecksOK creates a PolicyChecksOK with default headers values
func NewPolicyChecksOK() *PolicyChecksOK {
	return &PolicyChecksOK{}
}

/*
PolicyChecksOK describes a response with status code 200, with default header values.

OK
*/
type PolicyChecksOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIPolicyEntitiesResponse
}

// IsSuccess returns true when this policy checks o k response has a 2xx status code
func (o *PolicyChecksOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this policy checks o k response has a 3xx status code
func (o *PolicyChecksOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this policy checks o k response has a 4xx status code
func (o *PolicyChecksOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this policy checks o k response has a 5xx status code
func (o *PolicyChecksOK) IsServerError() bool {
	return false
}

// IsCode returns true when this policy checks o k response a status code equal to that given
func (o *PolicyChecksOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the policy checks o k response
func (o *PolicyChecksOK) Code() int {
	return 200
}

func (o *PolicyChecksOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/policy-checks/v2][%d] policyChecksOK %s", 200, payload)
}

func (o *PolicyChecksOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/policy-checks/v2][%d] policyChecksOK %s", 200, payload)
}

func (o *PolicyChecksOK) GetPayload() *models.APIPolicyEntitiesResponse {
	return o.Payload
}

func (o *PolicyChecksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIPolicyEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPolicyChecksBadRequest creates a PolicyChecksBadRequest with default headers values
func NewPolicyChecksBadRequest() *PolicyChecksBadRequest {
	return &PolicyChecksBadRequest{}
}

/*
PolicyChecksBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PolicyChecksBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIPolicyEntitiesResponse
}

// IsSuccess returns true when this policy checks bad request response has a 2xx status code
func (o *PolicyChecksBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this policy checks bad request response has a 3xx status code
func (o *PolicyChecksBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this policy checks bad request response has a 4xx status code
func (o *PolicyChecksBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this policy checks bad request response has a 5xx status code
func (o *PolicyChecksBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this policy checks bad request response a status code equal to that given
func (o *PolicyChecksBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the policy checks bad request response
func (o *PolicyChecksBadRequest) Code() int {
	return 400
}

func (o *PolicyChecksBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/policy-checks/v2][%d] policyChecksBadRequest %s", 400, payload)
}

func (o *PolicyChecksBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/policy-checks/v2][%d] policyChecksBadRequest %s", 400, payload)
}

func (o *PolicyChecksBadRequest) GetPayload() *models.APIPolicyEntitiesResponse {
	return o.Payload
}

func (o *PolicyChecksBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIPolicyEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPolicyChecksForbidden creates a PolicyChecksForbidden with default headers values
func NewPolicyChecksForbidden() *PolicyChecksForbidden {
	return &PolicyChecksForbidden{}
}

/*
PolicyChecksForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PolicyChecksForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this policy checks forbidden response has a 2xx status code
func (o *PolicyChecksForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this policy checks forbidden response has a 3xx status code
func (o *PolicyChecksForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this policy checks forbidden response has a 4xx status code
func (o *PolicyChecksForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this policy checks forbidden response has a 5xx status code
func (o *PolicyChecksForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this policy checks forbidden response a status code equal to that given
func (o *PolicyChecksForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the policy checks forbidden response
func (o *PolicyChecksForbidden) Code() int {
	return 403
}

func (o *PolicyChecksForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/policy-checks/v2][%d] policyChecksForbidden %s", 403, payload)
}

func (o *PolicyChecksForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/policy-checks/v2][%d] policyChecksForbidden %s", 403, payload)
}

func (o *PolicyChecksForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *PolicyChecksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPolicyChecksNotFound creates a PolicyChecksNotFound with default headers values
func NewPolicyChecksNotFound() *PolicyChecksNotFound {
	return &PolicyChecksNotFound{}
}

/*
PolicyChecksNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PolicyChecksNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIPolicyEntitiesResponse
}

// IsSuccess returns true when this policy checks not found response has a 2xx status code
func (o *PolicyChecksNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this policy checks not found response has a 3xx status code
func (o *PolicyChecksNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this policy checks not found response has a 4xx status code
func (o *PolicyChecksNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this policy checks not found response has a 5xx status code
func (o *PolicyChecksNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this policy checks not found response a status code equal to that given
func (o *PolicyChecksNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the policy checks not found response
func (o *PolicyChecksNotFound) Code() int {
	return 404
}

func (o *PolicyChecksNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/policy-checks/v2][%d] policyChecksNotFound %s", 404, payload)
}

func (o *PolicyChecksNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/policy-checks/v2][%d] policyChecksNotFound %s", 404, payload)
}

func (o *PolicyChecksNotFound) GetPayload() *models.APIPolicyEntitiesResponse {
	return o.Payload
}

func (o *PolicyChecksNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIPolicyEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPolicyChecksTooManyRequests creates a PolicyChecksTooManyRequests with default headers values
func NewPolicyChecksTooManyRequests() *PolicyChecksTooManyRequests {
	return &PolicyChecksTooManyRequests{}
}

/*
PolicyChecksTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type PolicyChecksTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this policy checks too many requests response has a 2xx status code
func (o *PolicyChecksTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this policy checks too many requests response has a 3xx status code
func (o *PolicyChecksTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this policy checks too many requests response has a 4xx status code
func (o *PolicyChecksTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this policy checks too many requests response has a 5xx status code
func (o *PolicyChecksTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this policy checks too many requests response a status code equal to that given
func (o *PolicyChecksTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the policy checks too many requests response
func (o *PolicyChecksTooManyRequests) Code() int {
	return 429
}

func (o *PolicyChecksTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/policy-checks/v2][%d] policyChecksTooManyRequests %s", 429, payload)
}

func (o *PolicyChecksTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/policy-checks/v2][%d] policyChecksTooManyRequests %s", 429, payload)
}

func (o *PolicyChecksTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *PolicyChecksTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPolicyChecksInternalServerError creates a PolicyChecksInternalServerError with default headers values
func NewPolicyChecksInternalServerError() *PolicyChecksInternalServerError {
	return &PolicyChecksInternalServerError{}
}

/*
PolicyChecksInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PolicyChecksInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.APIPolicyEntitiesResponse
}

// IsSuccess returns true when this policy checks internal server error response has a 2xx status code
func (o *PolicyChecksInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this policy checks internal server error response has a 3xx status code
func (o *PolicyChecksInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this policy checks internal server error response has a 4xx status code
func (o *PolicyChecksInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this policy checks internal server error response has a 5xx status code
func (o *PolicyChecksInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this policy checks internal server error response a status code equal to that given
func (o *PolicyChecksInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the policy checks internal server error response
func (o *PolicyChecksInternalServerError) Code() int {
	return 500
}

func (o *PolicyChecksInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/policy-checks/v2][%d] policyChecksInternalServerError %s", 500, payload)
}

func (o *PolicyChecksInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/policy-checks/v2][%d] policyChecksInternalServerError %s", 500, payload)
}

func (o *PolicyChecksInternalServerError) GetPayload() *models.APIPolicyEntitiesResponse {
	return o.Payload
}

func (o *PolicyChecksInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.APIPolicyEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
