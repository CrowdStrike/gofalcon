// Code generated by go-swagger; DO NOT EDIT.

package falcon_container_image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// LaunchExportJobReader is a Reader for the LaunchExportJob structure.
type LaunchExportJobReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LaunchExportJobReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLaunchExportJobOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLaunchExportJobBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewLaunchExportJobForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewLaunchExportJobTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLaunchExportJobInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /container-security/entities/exports/v1] LaunchExportJob", response, response.Code())
	}
}

// NewLaunchExportJobOK creates a LaunchExportJobOK with default headers values
func NewLaunchExportJobOK() *LaunchExportJobOK {
	return &LaunchExportJobOK{}
}

/*
LaunchExportJobOK describes a response with status code 200, with default header values.

OK
*/
type LaunchExportJobOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ExportsLaunchExportResponse
}

// IsSuccess returns true when this launch export job o k response has a 2xx status code
func (o *LaunchExportJobOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this launch export job o k response has a 3xx status code
func (o *LaunchExportJobOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this launch export job o k response has a 4xx status code
func (o *LaunchExportJobOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this launch export job o k response has a 5xx status code
func (o *LaunchExportJobOK) IsServerError() bool {
	return false
}

// IsCode returns true when this launch export job o k response a status code equal to that given
func (o *LaunchExportJobOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the launch export job o k response
func (o *LaunchExportJobOK) Code() int {
	return 200
}

func (o *LaunchExportJobOK) Error() string {
	return fmt.Sprintf("[POST /container-security/entities/exports/v1][%d] launchExportJobOK  %+v", 200, o.Payload)
}

func (o *LaunchExportJobOK) String() string {
	return fmt.Sprintf("[POST /container-security/entities/exports/v1][%d] launchExportJobOK  %+v", 200, o.Payload)
}

func (o *LaunchExportJobOK) GetPayload() *models.ExportsLaunchExportResponse {
	return o.Payload
}

func (o *LaunchExportJobOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.ExportsLaunchExportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLaunchExportJobBadRequest creates a LaunchExportJobBadRequest with default headers values
func NewLaunchExportJobBadRequest() *LaunchExportJobBadRequest {
	return &LaunchExportJobBadRequest{}
}

/*
LaunchExportJobBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type LaunchExportJobBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this launch export job bad request response has a 2xx status code
func (o *LaunchExportJobBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this launch export job bad request response has a 3xx status code
func (o *LaunchExportJobBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this launch export job bad request response has a 4xx status code
func (o *LaunchExportJobBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this launch export job bad request response has a 5xx status code
func (o *LaunchExportJobBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this launch export job bad request response a status code equal to that given
func (o *LaunchExportJobBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the launch export job bad request response
func (o *LaunchExportJobBadRequest) Code() int {
	return 400
}

func (o *LaunchExportJobBadRequest) Error() string {
	return fmt.Sprintf("[POST /container-security/entities/exports/v1][%d] launchExportJobBadRequest  %+v", 400, o.Payload)
}

func (o *LaunchExportJobBadRequest) String() string {
	return fmt.Sprintf("[POST /container-security/entities/exports/v1][%d] launchExportJobBadRequest  %+v", 400, o.Payload)
}

func (o *LaunchExportJobBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *LaunchExportJobBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLaunchExportJobForbidden creates a LaunchExportJobForbidden with default headers values
func NewLaunchExportJobForbidden() *LaunchExportJobForbidden {
	return &LaunchExportJobForbidden{}
}

/*
LaunchExportJobForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type LaunchExportJobForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this launch export job forbidden response has a 2xx status code
func (o *LaunchExportJobForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this launch export job forbidden response has a 3xx status code
func (o *LaunchExportJobForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this launch export job forbidden response has a 4xx status code
func (o *LaunchExportJobForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this launch export job forbidden response has a 5xx status code
func (o *LaunchExportJobForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this launch export job forbidden response a status code equal to that given
func (o *LaunchExportJobForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the launch export job forbidden response
func (o *LaunchExportJobForbidden) Code() int {
	return 403
}

func (o *LaunchExportJobForbidden) Error() string {
	return fmt.Sprintf("[POST /container-security/entities/exports/v1][%d] launchExportJobForbidden  %+v", 403, o.Payload)
}

func (o *LaunchExportJobForbidden) String() string {
	return fmt.Sprintf("[POST /container-security/entities/exports/v1][%d] launchExportJobForbidden  %+v", 403, o.Payload)
}

func (o *LaunchExportJobForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *LaunchExportJobForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLaunchExportJobTooManyRequests creates a LaunchExportJobTooManyRequests with default headers values
func NewLaunchExportJobTooManyRequests() *LaunchExportJobTooManyRequests {
	return &LaunchExportJobTooManyRequests{}
}

/*
LaunchExportJobTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type LaunchExportJobTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this launch export job too many requests response has a 2xx status code
func (o *LaunchExportJobTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this launch export job too many requests response has a 3xx status code
func (o *LaunchExportJobTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this launch export job too many requests response has a 4xx status code
func (o *LaunchExportJobTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this launch export job too many requests response has a 5xx status code
func (o *LaunchExportJobTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this launch export job too many requests response a status code equal to that given
func (o *LaunchExportJobTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the launch export job too many requests response
func (o *LaunchExportJobTooManyRequests) Code() int {
	return 429
}

func (o *LaunchExportJobTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /container-security/entities/exports/v1][%d] launchExportJobTooManyRequests  %+v", 429, o.Payload)
}

func (o *LaunchExportJobTooManyRequests) String() string {
	return fmt.Sprintf("[POST /container-security/entities/exports/v1][%d] launchExportJobTooManyRequests  %+v", 429, o.Payload)
}

func (o *LaunchExportJobTooManyRequests) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *LaunchExportJobTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLaunchExportJobInternalServerError creates a LaunchExportJobInternalServerError with default headers values
func NewLaunchExportJobInternalServerError() *LaunchExportJobInternalServerError {
	return &LaunchExportJobInternalServerError{}
}

/*
LaunchExportJobInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type LaunchExportJobInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this launch export job internal server error response has a 2xx status code
func (o *LaunchExportJobInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this launch export job internal server error response has a 3xx status code
func (o *LaunchExportJobInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this launch export job internal server error response has a 4xx status code
func (o *LaunchExportJobInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this launch export job internal server error response has a 5xx status code
func (o *LaunchExportJobInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this launch export job internal server error response a status code equal to that given
func (o *LaunchExportJobInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the launch export job internal server error response
func (o *LaunchExportJobInternalServerError) Code() int {
	return 500
}

func (o *LaunchExportJobInternalServerError) Error() string {
	return fmt.Sprintf("[POST /container-security/entities/exports/v1][%d] launchExportJobInternalServerError  %+v", 500, o.Payload)
}

func (o *LaunchExportJobInternalServerError) String() string {
	return fmt.Sprintf("[POST /container-security/entities/exports/v1][%d] launchExportJobInternalServerError  %+v", 500, o.Payload)
}

func (o *LaunchExportJobInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *LaunchExportJobInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
