// Code generated by go-swagger; DO NOT EDIT.

package falcon_container_image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// HeadImageScanInventoryReader is a Reader for the HeadImageScanInventory structure.
type HeadImageScanInventoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HeadImageScanInventoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewHeadImageScanInventoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewHeadImageScanInventoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewHeadImageScanInventoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewHeadImageScanInventoryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewHeadImageScanInventoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[HEAD /image-assessment/entities/image-inventory/v1] HeadImageScanInventory", response, response.Code())
	}
}

// NewHeadImageScanInventoryOK creates a HeadImageScanInventoryOK with default headers values
func NewHeadImageScanInventoryOK() *HeadImageScanInventoryOK {
	return &HeadImageScanInventoryOK{}
}

/*
HeadImageScanInventoryOK describes a response with status code 200, with default header values.

OK
*/
type HeadImageScanInventoryOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this head image scan inventory o k response has a 2xx status code
func (o *HeadImageScanInventoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this head image scan inventory o k response has a 3xx status code
func (o *HeadImageScanInventoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this head image scan inventory o k response has a 4xx status code
func (o *HeadImageScanInventoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this head image scan inventory o k response has a 5xx status code
func (o *HeadImageScanInventoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this head image scan inventory o k response a status code equal to that given
func (o *HeadImageScanInventoryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the head image scan inventory o k response
func (o *HeadImageScanInventoryOK) Code() int {
	return 200
}

func (o *HeadImageScanInventoryOK) Error() string {
	return fmt.Sprintf("[HEAD /image-assessment/entities/image-inventory/v1][%d] headImageScanInventoryOK", 200)
}

func (o *HeadImageScanInventoryOK) String() string {
	return fmt.Sprintf("[HEAD /image-assessment/entities/image-inventory/v1][%d] headImageScanInventoryOK", 200)
}

func (o *HeadImageScanInventoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewHeadImageScanInventoryBadRequest creates a HeadImageScanInventoryBadRequest with default headers values
func NewHeadImageScanInventoryBadRequest() *HeadImageScanInventoryBadRequest {
	return &HeadImageScanInventoryBadRequest{}
}

/*
HeadImageScanInventoryBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type HeadImageScanInventoryBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this head image scan inventory bad request response has a 2xx status code
func (o *HeadImageScanInventoryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this head image scan inventory bad request response has a 3xx status code
func (o *HeadImageScanInventoryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this head image scan inventory bad request response has a 4xx status code
func (o *HeadImageScanInventoryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this head image scan inventory bad request response has a 5xx status code
func (o *HeadImageScanInventoryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this head image scan inventory bad request response a status code equal to that given
func (o *HeadImageScanInventoryBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the head image scan inventory bad request response
func (o *HeadImageScanInventoryBadRequest) Code() int {
	return 400
}

func (o *HeadImageScanInventoryBadRequest) Error() string {
	return fmt.Sprintf("[HEAD /image-assessment/entities/image-inventory/v1][%d] headImageScanInventoryBadRequest", 400)
}

func (o *HeadImageScanInventoryBadRequest) String() string {
	return fmt.Sprintf("[HEAD /image-assessment/entities/image-inventory/v1][%d] headImageScanInventoryBadRequest", 400)
}

func (o *HeadImageScanInventoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewHeadImageScanInventoryForbidden creates a HeadImageScanInventoryForbidden with default headers values
func NewHeadImageScanInventoryForbidden() *HeadImageScanInventoryForbidden {
	return &HeadImageScanInventoryForbidden{}
}

/*
HeadImageScanInventoryForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type HeadImageScanInventoryForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CoreEntitiesResponse
}

// IsSuccess returns true when this head image scan inventory forbidden response has a 2xx status code
func (o *HeadImageScanInventoryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this head image scan inventory forbidden response has a 3xx status code
func (o *HeadImageScanInventoryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this head image scan inventory forbidden response has a 4xx status code
func (o *HeadImageScanInventoryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this head image scan inventory forbidden response has a 5xx status code
func (o *HeadImageScanInventoryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this head image scan inventory forbidden response a status code equal to that given
func (o *HeadImageScanInventoryForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the head image scan inventory forbidden response
func (o *HeadImageScanInventoryForbidden) Code() int {
	return 403
}

func (o *HeadImageScanInventoryForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[HEAD /image-assessment/entities/image-inventory/v1][%d] headImageScanInventoryForbidden %s", 403, payload)
}

func (o *HeadImageScanInventoryForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[HEAD /image-assessment/entities/image-inventory/v1][%d] headImageScanInventoryForbidden %s", 403, payload)
}

func (o *HeadImageScanInventoryForbidden) GetPayload() *models.CoreEntitiesResponse {
	return o.Payload
}

func (o *HeadImageScanInventoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CoreEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadImageScanInventoryTooManyRequests creates a HeadImageScanInventoryTooManyRequests with default headers values
func NewHeadImageScanInventoryTooManyRequests() *HeadImageScanInventoryTooManyRequests {
	return &HeadImageScanInventoryTooManyRequests{}
}

/*
HeadImageScanInventoryTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type HeadImageScanInventoryTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this head image scan inventory too many requests response has a 2xx status code
func (o *HeadImageScanInventoryTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this head image scan inventory too many requests response has a 3xx status code
func (o *HeadImageScanInventoryTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this head image scan inventory too many requests response has a 4xx status code
func (o *HeadImageScanInventoryTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this head image scan inventory too many requests response has a 5xx status code
func (o *HeadImageScanInventoryTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this head image scan inventory too many requests response a status code equal to that given
func (o *HeadImageScanInventoryTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the head image scan inventory too many requests response
func (o *HeadImageScanInventoryTooManyRequests) Code() int {
	return 429
}

func (o *HeadImageScanInventoryTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[HEAD /image-assessment/entities/image-inventory/v1][%d] headImageScanInventoryTooManyRequests %s", 429, payload)
}

func (o *HeadImageScanInventoryTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[HEAD /image-assessment/entities/image-inventory/v1][%d] headImageScanInventoryTooManyRequests %s", 429, payload)
}

func (o *HeadImageScanInventoryTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *HeadImageScanInventoryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHeadImageScanInventoryInternalServerError creates a HeadImageScanInventoryInternalServerError with default headers values
func NewHeadImageScanInventoryInternalServerError() *HeadImageScanInventoryInternalServerError {
	return &HeadImageScanInventoryInternalServerError{}
}

/*
HeadImageScanInventoryInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type HeadImageScanInventoryInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this head image scan inventory internal server error response has a 2xx status code
func (o *HeadImageScanInventoryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this head image scan inventory internal server error response has a 3xx status code
func (o *HeadImageScanInventoryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this head image scan inventory internal server error response has a 4xx status code
func (o *HeadImageScanInventoryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this head image scan inventory internal server error response has a 5xx status code
func (o *HeadImageScanInventoryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this head image scan inventory internal server error response a status code equal to that given
func (o *HeadImageScanInventoryInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the head image scan inventory internal server error response
func (o *HeadImageScanInventoryInternalServerError) Code() int {
	return 500
}

func (o *HeadImageScanInventoryInternalServerError) Error() string {
	return fmt.Sprintf("[HEAD /image-assessment/entities/image-inventory/v1][%d] headImageScanInventoryInternalServerError", 500)
}

func (o *HeadImageScanInventoryInternalServerError) String() string {
	return fmt.Sprintf("[HEAD /image-assessment/entities/image-inventory/v1][%d] headImageScanInventoryInternalServerError", 500)
}

func (o *HeadImageScanInventoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}
