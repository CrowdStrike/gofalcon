// Code generated by go-swagger; DO NOT EDIT.

package falcon_container_image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetReportByScanIDParams creates a new GetReportByScanIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetReportByScanIDParams() *GetReportByScanIDParams {
	return &GetReportByScanIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetReportByScanIDParamsWithTimeout creates a new GetReportByScanIDParams object
// with the ability to set a timeout on a request.
func NewGetReportByScanIDParamsWithTimeout(timeout time.Duration) *GetReportByScanIDParams {
	return &GetReportByScanIDParams{
		timeout: timeout,
	}
}

// NewGetReportByScanIDParamsWithContext creates a new GetReportByScanIDParams object
// with the ability to set a context for a request.
func NewGetReportByScanIDParamsWithContext(ctx context.Context) *GetReportByScanIDParams {
	return &GetReportByScanIDParams{
		Context: ctx,
	}
}

// NewGetReportByScanIDParamsWithHTTPClient creates a new GetReportByScanIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetReportByScanIDParamsWithHTTPClient(client *http.Client) *GetReportByScanIDParams {
	return &GetReportByScanIDParams{
		HTTPClient: client,
	}
}

/*
GetReportByScanIDParams contains all the parameters to send to the API endpoint

	for the get report by scan ID operation.

	Typically these are written to a http.Request.
*/
type GetReportByScanIDParams struct {

	/* ReportFormat.

	     Specify image-assessment scan report format. Supported formats:
	- `cyclonedx-json`
	- `json`
	- `sarif`

	     Default: "json"
	*/
	ReportFormat *string

	/* UUID.

	   Scan UUID
	*/
	UUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get report by scan ID params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetReportByScanIDParams) WithDefaults() *GetReportByScanIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get report by scan ID params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetReportByScanIDParams) SetDefaults() {
	var (
		reportFormatDefault = string("json")
	)

	val := GetReportByScanIDParams{
		ReportFormat: &reportFormatDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get report by scan ID params
func (o *GetReportByScanIDParams) WithTimeout(timeout time.Duration) *GetReportByScanIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get report by scan ID params
func (o *GetReportByScanIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get report by scan ID params
func (o *GetReportByScanIDParams) WithContext(ctx context.Context) *GetReportByScanIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get report by scan ID params
func (o *GetReportByScanIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get report by scan ID params
func (o *GetReportByScanIDParams) WithHTTPClient(client *http.Client) *GetReportByScanIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get report by scan ID params
func (o *GetReportByScanIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithReportFormat adds the reportFormat to the get report by scan ID params
func (o *GetReportByScanIDParams) WithReportFormat(reportFormat *string) *GetReportByScanIDParams {
	o.SetReportFormat(reportFormat)
	return o
}

// SetReportFormat adds the reportFormat to the get report by scan ID params
func (o *GetReportByScanIDParams) SetReportFormat(reportFormat *string) {
	o.ReportFormat = reportFormat
}

// WithUUID adds the uuid to the get report by scan ID params
func (o *GetReportByScanIDParams) WithUUID(uuid string) *GetReportByScanIDParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the get report by scan ID params
func (o *GetReportByScanIDParams) SetUUID(uuid string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *GetReportByScanIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ReportFormat != nil {

		// query param report_format
		var qrReportFormat string

		if o.ReportFormat != nil {
			qrReportFormat = *o.ReportFormat
		}
		qReportFormat := qrReportFormat
		if qReportFormat != "" {

			if err := r.SetQueryParam("report_format", qReportFormat); err != nil {
				return err
			}
		}
	}

	// path param uuid
	if err := r.SetPathParam("uuid", o.UUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
