// Code generated by go-swagger; DO NOT EDIT.

package falcon_container_image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// DownloadExportFileReader is a Reader for the DownloadExportFile structure.
type DownloadExportFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DownloadExportFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDownloadExportFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDownloadExportFileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDownloadExportFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDownloadExportFileTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDownloadExportFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /container-security/entities/exports/files/v1] DownloadExportFile", response, response.Code())
	}
}

// NewDownloadExportFileOK creates a DownloadExportFileOK with default headers values
func NewDownloadExportFileOK() *DownloadExportFileOK {
	return &DownloadExportFileOK{}
}

/*
DownloadExportFileOK describes a response with status code 200, with default header values.

OK
*/
type DownloadExportFileOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload []int64
}

// IsSuccess returns true when this download export file o k response has a 2xx status code
func (o *DownloadExportFileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this download export file o k response has a 3xx status code
func (o *DownloadExportFileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download export file o k response has a 4xx status code
func (o *DownloadExportFileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this download export file o k response has a 5xx status code
func (o *DownloadExportFileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this download export file o k response a status code equal to that given
func (o *DownloadExportFileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the download export file o k response
func (o *DownloadExportFileOK) Code() int {
	return 200
}

func (o *DownloadExportFileOK) Error() string {
	return fmt.Sprintf("[GET /container-security/entities/exports/files/v1][%d] downloadExportFileOK  %+v", 200, o.Payload)
}

func (o *DownloadExportFileOK) String() string {
	return fmt.Sprintf("[GET /container-security/entities/exports/files/v1][%d] downloadExportFileOK  %+v", 200, o.Payload)
}

func (o *DownloadExportFileOK) GetPayload() []int64 {
	return o.Payload
}

func (o *DownloadExportFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadExportFileForbidden creates a DownloadExportFileForbidden with default headers values
func NewDownloadExportFileForbidden() *DownloadExportFileForbidden {
	return &DownloadExportFileForbidden{}
}

/*
DownloadExportFileForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DownloadExportFileForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this download export file forbidden response has a 2xx status code
func (o *DownloadExportFileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download export file forbidden response has a 3xx status code
func (o *DownloadExportFileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download export file forbidden response has a 4xx status code
func (o *DownloadExportFileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this download export file forbidden response has a 5xx status code
func (o *DownloadExportFileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this download export file forbidden response a status code equal to that given
func (o *DownloadExportFileForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the download export file forbidden response
func (o *DownloadExportFileForbidden) Code() int {
	return 403
}

func (o *DownloadExportFileForbidden) Error() string {
	return fmt.Sprintf("[GET /container-security/entities/exports/files/v1][%d] downloadExportFileForbidden  %+v", 403, o.Payload)
}

func (o *DownloadExportFileForbidden) String() string {
	return fmt.Sprintf("[GET /container-security/entities/exports/files/v1][%d] downloadExportFileForbidden  %+v", 403, o.Payload)
}

func (o *DownloadExportFileForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DownloadExportFileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadExportFileNotFound creates a DownloadExportFileNotFound with default headers values
func NewDownloadExportFileNotFound() *DownloadExportFileNotFound {
	return &DownloadExportFileNotFound{}
}

/*
DownloadExportFileNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DownloadExportFileNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this download export file not found response has a 2xx status code
func (o *DownloadExportFileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download export file not found response has a 3xx status code
func (o *DownloadExportFileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download export file not found response has a 4xx status code
func (o *DownloadExportFileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this download export file not found response has a 5xx status code
func (o *DownloadExportFileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this download export file not found response a status code equal to that given
func (o *DownloadExportFileNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the download export file not found response
func (o *DownloadExportFileNotFound) Code() int {
	return 404
}

func (o *DownloadExportFileNotFound) Error() string {
	return fmt.Sprintf("[GET /container-security/entities/exports/files/v1][%d] downloadExportFileNotFound  %+v", 404, o.Payload)
}

func (o *DownloadExportFileNotFound) String() string {
	return fmt.Sprintf("[GET /container-security/entities/exports/files/v1][%d] downloadExportFileNotFound  %+v", 404, o.Payload)
}

func (o *DownloadExportFileNotFound) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DownloadExportFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadExportFileTooManyRequests creates a DownloadExportFileTooManyRequests with default headers values
func NewDownloadExportFileTooManyRequests() *DownloadExportFileTooManyRequests {
	return &DownloadExportFileTooManyRequests{}
}

/*
DownloadExportFileTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type DownloadExportFileTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this download export file too many requests response has a 2xx status code
func (o *DownloadExportFileTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download export file too many requests response has a 3xx status code
func (o *DownloadExportFileTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download export file too many requests response has a 4xx status code
func (o *DownloadExportFileTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this download export file too many requests response has a 5xx status code
func (o *DownloadExportFileTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this download export file too many requests response a status code equal to that given
func (o *DownloadExportFileTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the download export file too many requests response
func (o *DownloadExportFileTooManyRequests) Code() int {
	return 429
}

func (o *DownloadExportFileTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /container-security/entities/exports/files/v1][%d] downloadExportFileTooManyRequests  %+v", 429, o.Payload)
}

func (o *DownloadExportFileTooManyRequests) String() string {
	return fmt.Sprintf("[GET /container-security/entities/exports/files/v1][%d] downloadExportFileTooManyRequests  %+v", 429, o.Payload)
}

func (o *DownloadExportFileTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *DownloadExportFileTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadExportFileInternalServerError creates a DownloadExportFileInternalServerError with default headers values
func NewDownloadExportFileInternalServerError() *DownloadExportFileInternalServerError {
	return &DownloadExportFileInternalServerError{}
}

/*
DownloadExportFileInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DownloadExportFileInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this download export file internal server error response has a 2xx status code
func (o *DownloadExportFileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download export file internal server error response has a 3xx status code
func (o *DownloadExportFileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download export file internal server error response has a 4xx status code
func (o *DownloadExportFileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this download export file internal server error response has a 5xx status code
func (o *DownloadExportFileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this download export file internal server error response a status code equal to that given
func (o *DownloadExportFileInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the download export file internal server error response
func (o *DownloadExportFileInternalServerError) Code() int {
	return 500
}

func (o *DownloadExportFileInternalServerError) Error() string {
	return fmt.Sprintf("[GET /container-security/entities/exports/files/v1][%d] downloadExportFileInternalServerError  %+v", 500, o.Payload)
}

func (o *DownloadExportFileInternalServerError) String() string {
	return fmt.Sprintf("[GET /container-security/entities/exports/files/v1][%d] downloadExportFileInternalServerError  %+v", 500, o.Payload)
}

func (o *DownloadExportFileInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *DownloadExportFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
