// Code generated by go-swagger; DO NOT EDIT.

package falcon_container_image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetReportByScanIDReader is a Reader for the GetReportByScanID structure.
type GetReportByScanIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReportByScanIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReportByScanIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetReportByScanIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetReportByScanIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetReportByScanIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetReportByScanIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetReportByScanIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /image-assessment/entities/reports/v2/{uuid}] GetReportByScanID", response, response.Code())
	}
}

// NewGetReportByScanIDOK creates a GetReportByScanIDOK with default headers values
func NewGetReportByScanIDOK() *GetReportByScanIDOK {
	return &GetReportByScanIDOK{}
}

/*
GetReportByScanIDOK describes a response with status code 200, with default header values.

OK
*/
type GetReportByScanIDOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CoreEntitiesResponse
}

// IsSuccess returns true when this get report by scan Id o k response has a 2xx status code
func (o *GetReportByScanIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get report by scan Id o k response has a 3xx status code
func (o *GetReportByScanIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report by scan Id o k response has a 4xx status code
func (o *GetReportByScanIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get report by scan Id o k response has a 5xx status code
func (o *GetReportByScanIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get report by scan Id o k response a status code equal to that given
func (o *GetReportByScanIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get report by scan Id o k response
func (o *GetReportByScanIDOK) Code() int {
	return 200
}

func (o *GetReportByScanIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2/{uuid}][%d] getReportByScanIdOK %s", 200, payload)
}

func (o *GetReportByScanIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2/{uuid}][%d] getReportByScanIdOK %s", 200, payload)
}

func (o *GetReportByScanIDOK) GetPayload() *models.CoreEntitiesResponse {
	return o.Payload
}

func (o *GetReportByScanIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CoreEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportByScanIDBadRequest creates a GetReportByScanIDBadRequest with default headers values
func NewGetReportByScanIDBadRequest() *GetReportByScanIDBadRequest {
	return &GetReportByScanIDBadRequest{}
}

/*
GetReportByScanIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetReportByScanIDBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CoreEntitiesResponse
}

// IsSuccess returns true when this get report by scan Id bad request response has a 2xx status code
func (o *GetReportByScanIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report by scan Id bad request response has a 3xx status code
func (o *GetReportByScanIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report by scan Id bad request response has a 4xx status code
func (o *GetReportByScanIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report by scan Id bad request response has a 5xx status code
func (o *GetReportByScanIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get report by scan Id bad request response a status code equal to that given
func (o *GetReportByScanIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get report by scan Id bad request response
func (o *GetReportByScanIDBadRequest) Code() int {
	return 400
}

func (o *GetReportByScanIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2/{uuid}][%d] getReportByScanIdBadRequest %s", 400, payload)
}

func (o *GetReportByScanIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2/{uuid}][%d] getReportByScanIdBadRequest %s", 400, payload)
}

func (o *GetReportByScanIDBadRequest) GetPayload() *models.CoreEntitiesResponse {
	return o.Payload
}

func (o *GetReportByScanIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CoreEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportByScanIDForbidden creates a GetReportByScanIDForbidden with default headers values
func NewGetReportByScanIDForbidden() *GetReportByScanIDForbidden {
	return &GetReportByScanIDForbidden{}
}

/*
GetReportByScanIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetReportByScanIDForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get report by scan Id forbidden response has a 2xx status code
func (o *GetReportByScanIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report by scan Id forbidden response has a 3xx status code
func (o *GetReportByScanIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report by scan Id forbidden response has a 4xx status code
func (o *GetReportByScanIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report by scan Id forbidden response has a 5xx status code
func (o *GetReportByScanIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get report by scan Id forbidden response a status code equal to that given
func (o *GetReportByScanIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get report by scan Id forbidden response
func (o *GetReportByScanIDForbidden) Code() int {
	return 403
}

func (o *GetReportByScanIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2/{uuid}][%d] getReportByScanIdForbidden %s", 403, payload)
}

func (o *GetReportByScanIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2/{uuid}][%d] getReportByScanIdForbidden %s", 403, payload)
}

func (o *GetReportByScanIDForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetReportByScanIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportByScanIDNotFound creates a GetReportByScanIDNotFound with default headers values
func NewGetReportByScanIDNotFound() *GetReportByScanIDNotFound {
	return &GetReportByScanIDNotFound{}
}

/*
GetReportByScanIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetReportByScanIDNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CoreEntitiesResponse
}

// IsSuccess returns true when this get report by scan Id not found response has a 2xx status code
func (o *GetReportByScanIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report by scan Id not found response has a 3xx status code
func (o *GetReportByScanIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report by scan Id not found response has a 4xx status code
func (o *GetReportByScanIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report by scan Id not found response has a 5xx status code
func (o *GetReportByScanIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get report by scan Id not found response a status code equal to that given
func (o *GetReportByScanIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get report by scan Id not found response
func (o *GetReportByScanIDNotFound) Code() int {
	return 404
}

func (o *GetReportByScanIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2/{uuid}][%d] getReportByScanIdNotFound %s", 404, payload)
}

func (o *GetReportByScanIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2/{uuid}][%d] getReportByScanIdNotFound %s", 404, payload)
}

func (o *GetReportByScanIDNotFound) GetPayload() *models.CoreEntitiesResponse {
	return o.Payload
}

func (o *GetReportByScanIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CoreEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportByScanIDTooManyRequests creates a GetReportByScanIDTooManyRequests with default headers values
func NewGetReportByScanIDTooManyRequests() *GetReportByScanIDTooManyRequests {
	return &GetReportByScanIDTooManyRequests{}
}

/*
GetReportByScanIDTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetReportByScanIDTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get report by scan Id too many requests response has a 2xx status code
func (o *GetReportByScanIDTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report by scan Id too many requests response has a 3xx status code
func (o *GetReportByScanIDTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report by scan Id too many requests response has a 4xx status code
func (o *GetReportByScanIDTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report by scan Id too many requests response has a 5xx status code
func (o *GetReportByScanIDTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get report by scan Id too many requests response a status code equal to that given
func (o *GetReportByScanIDTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get report by scan Id too many requests response
func (o *GetReportByScanIDTooManyRequests) Code() int {
	return 429
}

func (o *GetReportByScanIDTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2/{uuid}][%d] getReportByScanIdTooManyRequests %s", 429, payload)
}

func (o *GetReportByScanIDTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2/{uuid}][%d] getReportByScanIdTooManyRequests %s", 429, payload)
}

func (o *GetReportByScanIDTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetReportByScanIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportByScanIDInternalServerError creates a GetReportByScanIDInternalServerError with default headers values
func NewGetReportByScanIDInternalServerError() *GetReportByScanIDInternalServerError {
	return &GetReportByScanIDInternalServerError{}
}

/*
GetReportByScanIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetReportByScanIDInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CoreEntitiesResponse
}

// IsSuccess returns true when this get report by scan Id internal server error response has a 2xx status code
func (o *GetReportByScanIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report by scan Id internal server error response has a 3xx status code
func (o *GetReportByScanIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report by scan Id internal server error response has a 4xx status code
func (o *GetReportByScanIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get report by scan Id internal server error response has a 5xx status code
func (o *GetReportByScanIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get report by scan Id internal server error response a status code equal to that given
func (o *GetReportByScanIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get report by scan Id internal server error response
func (o *GetReportByScanIDInternalServerError) Code() int {
	return 500
}

func (o *GetReportByScanIDInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2/{uuid}][%d] getReportByScanIdInternalServerError %s", 500, payload)
}

func (o *GetReportByScanIDInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2/{uuid}][%d] getReportByScanIdInternalServerError %s", 500, payload)
}

func (o *GetReportByScanIDInternalServerError) GetPayload() *models.CoreEntitiesResponse {
	return o.Payload
}

func (o *GetReportByScanIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CoreEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
