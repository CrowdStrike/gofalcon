// Code generated by go-swagger; DO NOT EDIT.

package falcon_container_image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetReportByReferenceReader is a Reader for the GetReportByReference structure.
type GetReportByReferenceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReportByReferenceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReportByReferenceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetReportByReferenceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetReportByReferenceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetReportByReferenceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetReportByReferenceTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetReportByReferenceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /image-assessment/entities/reports/v2] GetReportByReference", response, response.Code())
	}
}

// NewGetReportByReferenceOK creates a GetReportByReferenceOK with default headers values
func NewGetReportByReferenceOK() *GetReportByReferenceOK {
	return &GetReportByReferenceOK{}
}

/*
GetReportByReferenceOK describes a response with status code 200, with default header values.

OK
*/
type GetReportByReferenceOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CoreEntitiesResponse
}

// IsSuccess returns true when this get report by reference o k response has a 2xx status code
func (o *GetReportByReferenceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get report by reference o k response has a 3xx status code
func (o *GetReportByReferenceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report by reference o k response has a 4xx status code
func (o *GetReportByReferenceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get report by reference o k response has a 5xx status code
func (o *GetReportByReferenceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get report by reference o k response a status code equal to that given
func (o *GetReportByReferenceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get report by reference o k response
func (o *GetReportByReferenceOK) Code() int {
	return 200
}

func (o *GetReportByReferenceOK) Error() string {
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2][%d] getReportByReferenceOK  %+v", 200, o.Payload)
}

func (o *GetReportByReferenceOK) String() string {
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2][%d] getReportByReferenceOK  %+v", 200, o.Payload)
}

func (o *GetReportByReferenceOK) GetPayload() *models.CoreEntitiesResponse {
	return o.Payload
}

func (o *GetReportByReferenceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CoreEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportByReferenceBadRequest creates a GetReportByReferenceBadRequest with default headers values
func NewGetReportByReferenceBadRequest() *GetReportByReferenceBadRequest {
	return &GetReportByReferenceBadRequest{}
}

/*
GetReportByReferenceBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetReportByReferenceBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CoreEntitiesResponse
}

// IsSuccess returns true when this get report by reference bad request response has a 2xx status code
func (o *GetReportByReferenceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report by reference bad request response has a 3xx status code
func (o *GetReportByReferenceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report by reference bad request response has a 4xx status code
func (o *GetReportByReferenceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report by reference bad request response has a 5xx status code
func (o *GetReportByReferenceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get report by reference bad request response a status code equal to that given
func (o *GetReportByReferenceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get report by reference bad request response
func (o *GetReportByReferenceBadRequest) Code() int {
	return 400
}

func (o *GetReportByReferenceBadRequest) Error() string {
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2][%d] getReportByReferenceBadRequest  %+v", 400, o.Payload)
}

func (o *GetReportByReferenceBadRequest) String() string {
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2][%d] getReportByReferenceBadRequest  %+v", 400, o.Payload)
}

func (o *GetReportByReferenceBadRequest) GetPayload() *models.CoreEntitiesResponse {
	return o.Payload
}

func (o *GetReportByReferenceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CoreEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportByReferenceForbidden creates a GetReportByReferenceForbidden with default headers values
func NewGetReportByReferenceForbidden() *GetReportByReferenceForbidden {
	return &GetReportByReferenceForbidden{}
}

/*
GetReportByReferenceForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetReportByReferenceForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get report by reference forbidden response has a 2xx status code
func (o *GetReportByReferenceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report by reference forbidden response has a 3xx status code
func (o *GetReportByReferenceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report by reference forbidden response has a 4xx status code
func (o *GetReportByReferenceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report by reference forbidden response has a 5xx status code
func (o *GetReportByReferenceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get report by reference forbidden response a status code equal to that given
func (o *GetReportByReferenceForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get report by reference forbidden response
func (o *GetReportByReferenceForbidden) Code() int {
	return 403
}

func (o *GetReportByReferenceForbidden) Error() string {
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2][%d] getReportByReferenceForbidden  %+v", 403, o.Payload)
}

func (o *GetReportByReferenceForbidden) String() string {
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2][%d] getReportByReferenceForbidden  %+v", 403, o.Payload)
}

func (o *GetReportByReferenceForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetReportByReferenceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportByReferenceNotFound creates a GetReportByReferenceNotFound with default headers values
func NewGetReportByReferenceNotFound() *GetReportByReferenceNotFound {
	return &GetReportByReferenceNotFound{}
}

/*
GetReportByReferenceNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetReportByReferenceNotFound struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CoreEntitiesResponse
}

// IsSuccess returns true when this get report by reference not found response has a 2xx status code
func (o *GetReportByReferenceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report by reference not found response has a 3xx status code
func (o *GetReportByReferenceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report by reference not found response has a 4xx status code
func (o *GetReportByReferenceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report by reference not found response has a 5xx status code
func (o *GetReportByReferenceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get report by reference not found response a status code equal to that given
func (o *GetReportByReferenceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get report by reference not found response
func (o *GetReportByReferenceNotFound) Code() int {
	return 404
}

func (o *GetReportByReferenceNotFound) Error() string {
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2][%d] getReportByReferenceNotFound  %+v", 404, o.Payload)
}

func (o *GetReportByReferenceNotFound) String() string {
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2][%d] getReportByReferenceNotFound  %+v", 404, o.Payload)
}

func (o *GetReportByReferenceNotFound) GetPayload() *models.CoreEntitiesResponse {
	return o.Payload
}

func (o *GetReportByReferenceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CoreEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportByReferenceTooManyRequests creates a GetReportByReferenceTooManyRequests with default headers values
func NewGetReportByReferenceTooManyRequests() *GetReportByReferenceTooManyRequests {
	return &GetReportByReferenceTooManyRequests{}
}

/*
GetReportByReferenceTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetReportByReferenceTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get report by reference too many requests response has a 2xx status code
func (o *GetReportByReferenceTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report by reference too many requests response has a 3xx status code
func (o *GetReportByReferenceTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report by reference too many requests response has a 4xx status code
func (o *GetReportByReferenceTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report by reference too many requests response has a 5xx status code
func (o *GetReportByReferenceTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get report by reference too many requests response a status code equal to that given
func (o *GetReportByReferenceTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get report by reference too many requests response
func (o *GetReportByReferenceTooManyRequests) Code() int {
	return 429
}

func (o *GetReportByReferenceTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2][%d] getReportByReferenceTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetReportByReferenceTooManyRequests) String() string {
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2][%d] getReportByReferenceTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetReportByReferenceTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetReportByReferenceTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportByReferenceInternalServerError creates a GetReportByReferenceInternalServerError with default headers values
func NewGetReportByReferenceInternalServerError() *GetReportByReferenceInternalServerError {
	return &GetReportByReferenceInternalServerError{}
}

/*
GetReportByReferenceInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetReportByReferenceInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.CoreEntitiesResponse
}

// IsSuccess returns true when this get report by reference internal server error response has a 2xx status code
func (o *GetReportByReferenceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report by reference internal server error response has a 3xx status code
func (o *GetReportByReferenceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report by reference internal server error response has a 4xx status code
func (o *GetReportByReferenceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get report by reference internal server error response has a 5xx status code
func (o *GetReportByReferenceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get report by reference internal server error response a status code equal to that given
func (o *GetReportByReferenceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get report by reference internal server error response
func (o *GetReportByReferenceInternalServerError) Code() int {
	return 500
}

func (o *GetReportByReferenceInternalServerError) Error() string {
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2][%d] getReportByReferenceInternalServerError  %+v", 500, o.Payload)
}

func (o *GetReportByReferenceInternalServerError) String() string {
	return fmt.Sprintf("[GET /image-assessment/entities/reports/v2][%d] getReportByReferenceInternalServerError  %+v", 500, o.Payload)
}

func (o *GetReportByReferenceInternalServerError) GetPayload() *models.CoreEntitiesResponse {
	return o.Payload
}

func (o *GetReportByReferenceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.CoreEntitiesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
