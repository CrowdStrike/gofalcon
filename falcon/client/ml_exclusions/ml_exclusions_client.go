// Code generated by go-swagger; DO NOT EDIT.

package ml_exclusions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ml exclusions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ml exclusions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMLExclusionsV1(params *CreateMLExclusionsV1Params, opts ...ClientOption) (*CreateMLExclusionsV1OK, error)

	DeleteMLExclusionsV1(params *DeleteMLExclusionsV1Params, opts ...ClientOption) (*DeleteMLExclusionsV1OK, error)

	GetMLExclusionsV1(params *GetMLExclusionsV1Params, opts ...ClientOption) (*GetMLExclusionsV1OK, error)

	QueryMLExclusionsV1(params *QueryMLExclusionsV1Params, opts ...ClientOption) (*QueryMLExclusionsV1OK, error)

	UpdateMLExclusionsV1(params *UpdateMLExclusionsV1Params, opts ...ClientOption) (*UpdateMLExclusionsV1OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateMLExclusionsV1 creates the m l exclusions
*/
func (a *Client) CreateMLExclusionsV1(params *CreateMLExclusionsV1Params, opts ...ClientOption) (*CreateMLExclusionsV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMLExclusionsV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMLExclusionsV1",
		Method:             "POST",
		PathPattern:        "/policy/entities/ml-exclusions/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMLExclusionsV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMLExclusionsV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateMLExclusionsV1Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteMLExclusionsV1 deletes the m l exclusions by id
*/
func (a *Client) DeleteMLExclusionsV1(params *DeleteMLExclusionsV1Params, opts ...ClientOption) (*DeleteMLExclusionsV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMLExclusionsV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMLExclusionsV1",
		Method:             "DELETE",
		PathPattern:        "/policy/entities/ml-exclusions/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMLExclusionsV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMLExclusionsV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteMLExclusionsV1Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetMLExclusionsV1 gets a set of m l exclusions by specifying their i ds
*/
func (a *Client) GetMLExclusionsV1(params *GetMLExclusionsV1Params, opts ...ClientOption) (*GetMLExclusionsV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMLExclusionsV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMLExclusionsV1",
		Method:             "GET",
		PathPattern:        "/policy/entities/ml-exclusions/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMLExclusionsV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMLExclusionsV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMLExclusionsV1Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  QueryMLExclusionsV1 searches for m l exclusions
*/
func (a *Client) QueryMLExclusionsV1(params *QueryMLExclusionsV1Params, opts ...ClientOption) (*QueryMLExclusionsV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryMLExclusionsV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "queryMLExclusionsV1",
		Method:             "GET",
		PathPattern:        "/policy/queries/ml-exclusions/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryMLExclusionsV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryMLExclusionsV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueryMLExclusionsV1Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateMLExclusionsV1 updates the m l exclusions
*/
func (a *Client) UpdateMLExclusionsV1(params *UpdateMLExclusionsV1Params, opts ...ClientOption) (*UpdateMLExclusionsV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMLExclusionsV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMLExclusionsV1",
		Method:             "PATCH",
		PathPattern:        "/policy/entities/ml-exclusions/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMLExclusionsV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMLExclusionsV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateMLExclusionsV1Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
