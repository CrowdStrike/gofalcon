// Code generated by go-swagger; DO NOT EDIT.

package ml_exclusions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// CreateMLExclusionsV1Reader is a Reader for the CreateMLExclusionsV1 structure.
type CreateMLExclusionsV1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateMLExclusionsV1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateMLExclusionsV1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateMLExclusionsV1BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateMLExclusionsV1Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateMLExclusionsV1TooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateMLExclusionsV1InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateMLExclusionsV1Default(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateMLExclusionsV1OK creates a CreateMLExclusionsV1OK with default headers values
func NewCreateMLExclusionsV1OK() *CreateMLExclusionsV1OK {
	return &CreateMLExclusionsV1OK{}
}

/*CreateMLExclusionsV1OK handles this case with default header values.

OK
*/
type CreateMLExclusionsV1OK struct {
	/*Request limit per minute.
	 */
	XRateLimitLimit int64
	/*The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ResponsesMlExclusionRespV1
}

func (o *CreateMLExclusionsV1OK) Error() string {
	return fmt.Sprintf("[POST /policy/entities/ml-exclusions/v1][%d] createMLExclusionsV1OK  %+v", 200, o.Payload)
}

func (o *CreateMLExclusionsV1OK) GetPayload() *models.ResponsesMlExclusionRespV1 {
	return o.Payload
}

func (o *CreateMLExclusionsV1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-RateLimit-Limit
	xRateLimitLimit, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Limit"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Limit", "header", "int64", response.GetHeader("X-RateLimit-Limit"))
	}
	o.XRateLimitLimit = xRateLimitLimit

	// response header X-RateLimit-Remaining
	xRateLimitRemaining, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Remaining"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", response.GetHeader("X-RateLimit-Remaining"))
	}
	o.XRateLimitRemaining = xRateLimitRemaining

	o.Payload = new(models.ResponsesMlExclusionRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMLExclusionsV1BadRequest creates a CreateMLExclusionsV1BadRequest with default headers values
func NewCreateMLExclusionsV1BadRequest() *CreateMLExclusionsV1BadRequest {
	return &CreateMLExclusionsV1BadRequest{}
}

/*CreateMLExclusionsV1BadRequest handles this case with default header values.

Bad Request
*/
type CreateMLExclusionsV1BadRequest struct {
	/*Request limit per minute.
	 */
	XRateLimitLimit int64
	/*The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ResponsesMlExclusionRespV1
}

func (o *CreateMLExclusionsV1BadRequest) Error() string {
	return fmt.Sprintf("[POST /policy/entities/ml-exclusions/v1][%d] createMLExclusionsV1BadRequest  %+v", 400, o.Payload)
}

func (o *CreateMLExclusionsV1BadRequest) GetPayload() *models.ResponsesMlExclusionRespV1 {
	return o.Payload
}

func (o *CreateMLExclusionsV1BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-RateLimit-Limit
	xRateLimitLimit, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Limit"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Limit", "header", "int64", response.GetHeader("X-RateLimit-Limit"))
	}
	o.XRateLimitLimit = xRateLimitLimit

	// response header X-RateLimit-Remaining
	xRateLimitRemaining, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Remaining"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", response.GetHeader("X-RateLimit-Remaining"))
	}
	o.XRateLimitRemaining = xRateLimitRemaining

	o.Payload = new(models.ResponsesMlExclusionRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMLExclusionsV1Forbidden creates a CreateMLExclusionsV1Forbidden with default headers values
func NewCreateMLExclusionsV1Forbidden() *CreateMLExclusionsV1Forbidden {
	return &CreateMLExclusionsV1Forbidden{}
}

/*CreateMLExclusionsV1Forbidden handles this case with default header values.

Forbidden
*/
type CreateMLExclusionsV1Forbidden struct {
	/*Request limit per minute.
	 */
	XRateLimitLimit int64
	/*The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaErrorsOnly
}

func (o *CreateMLExclusionsV1Forbidden) Error() string {
	return fmt.Sprintf("[POST /policy/entities/ml-exclusions/v1][%d] createMLExclusionsV1Forbidden  %+v", 403, o.Payload)
}

func (o *CreateMLExclusionsV1Forbidden) GetPayload() *models.MsaErrorsOnly {
	return o.Payload
}

func (o *CreateMLExclusionsV1Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-RateLimit-Limit
	xRateLimitLimit, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Limit"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Limit", "header", "int64", response.GetHeader("X-RateLimit-Limit"))
	}
	o.XRateLimitLimit = xRateLimitLimit

	// response header X-RateLimit-Remaining
	xRateLimitRemaining, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Remaining"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", response.GetHeader("X-RateLimit-Remaining"))
	}
	o.XRateLimitRemaining = xRateLimitRemaining

	o.Payload = new(models.MsaErrorsOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMLExclusionsV1TooManyRequests creates a CreateMLExclusionsV1TooManyRequests with default headers values
func NewCreateMLExclusionsV1TooManyRequests() *CreateMLExclusionsV1TooManyRequests {
	return &CreateMLExclusionsV1TooManyRequests{}
}

/*CreateMLExclusionsV1TooManyRequests handles this case with default header values.

Too Many Requests
*/
type CreateMLExclusionsV1TooManyRequests struct {
	/*Request limit per minute.
	 */
	XRateLimitLimit int64
	/*The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
	/*Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

func (o *CreateMLExclusionsV1TooManyRequests) Error() string {
	return fmt.Sprintf("[POST /policy/entities/ml-exclusions/v1][%d] createMLExclusionsV1TooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateMLExclusionsV1TooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *CreateMLExclusionsV1TooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-RateLimit-Limit
	xRateLimitLimit, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Limit"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Limit", "header", "int64", response.GetHeader("X-RateLimit-Limit"))
	}
	o.XRateLimitLimit = xRateLimitLimit

	// response header X-RateLimit-Remaining
	xRateLimitRemaining, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Remaining"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", response.GetHeader("X-RateLimit-Remaining"))
	}
	o.XRateLimitRemaining = xRateLimitRemaining

	// response header X-RateLimit-RetryAfter
	xRateLimitRetryAfter, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-RetryAfter"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", response.GetHeader("X-RateLimit-RetryAfter"))
	}
	o.XRateLimitRetryAfter = xRateLimitRetryAfter

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMLExclusionsV1InternalServerError creates a CreateMLExclusionsV1InternalServerError with default headers values
func NewCreateMLExclusionsV1InternalServerError() *CreateMLExclusionsV1InternalServerError {
	return &CreateMLExclusionsV1InternalServerError{}
}

/*CreateMLExclusionsV1InternalServerError handles this case with default header values.

Internal Server Error
*/
type CreateMLExclusionsV1InternalServerError struct {
	/*Request limit per minute.
	 */
	XRateLimitLimit int64
	/*The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.ResponsesMlExclusionRespV1
}

func (o *CreateMLExclusionsV1InternalServerError) Error() string {
	return fmt.Sprintf("[POST /policy/entities/ml-exclusions/v1][%d] createMLExclusionsV1InternalServerError  %+v", 500, o.Payload)
}

func (o *CreateMLExclusionsV1InternalServerError) GetPayload() *models.ResponsesMlExclusionRespV1 {
	return o.Payload
}

func (o *CreateMLExclusionsV1InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-RateLimit-Limit
	xRateLimitLimit, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Limit"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Limit", "header", "int64", response.GetHeader("X-RateLimit-Limit"))
	}
	o.XRateLimitLimit = xRateLimitLimit

	// response header X-RateLimit-Remaining
	xRateLimitRemaining, err := swag.ConvertInt64(response.GetHeader("X-RateLimit-Remaining"))
	if err != nil {
		return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", response.GetHeader("X-RateLimit-Remaining"))
	}
	o.XRateLimitRemaining = xRateLimitRemaining

	o.Payload = new(models.ResponsesMlExclusionRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateMLExclusionsV1Default creates a CreateMLExclusionsV1Default with default headers values
func NewCreateMLExclusionsV1Default(code int) *CreateMLExclusionsV1Default {
	return &CreateMLExclusionsV1Default{
		_statusCode: code,
	}
}

/*CreateMLExclusionsV1Default handles this case with default header values.

OK
*/
type CreateMLExclusionsV1Default struct {
	_statusCode int

	Payload *models.ResponsesMlExclusionRespV1
}

// Code gets the status code for the create m l exclusions v1 default response
func (o *CreateMLExclusionsV1Default) Code() int {
	return o._statusCode
}

func (o *CreateMLExclusionsV1Default) Error() string {
	return fmt.Sprintf("[POST /policy/entities/ml-exclusions/v1][%d] createMLExclusionsV1 default  %+v", o._statusCode, o.Payload)
}

func (o *CreateMLExclusionsV1Default) GetPayload() *models.ResponsesMlExclusionRespV1 {
	return o.Payload
}

func (o *CreateMLExclusionsV1Default) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponsesMlExclusionRespV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
