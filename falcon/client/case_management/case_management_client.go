// Code generated by go-swagger; DO NOT EDIT.

package case_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new case management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new case management API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new case management API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for case management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AggregatesNotificationGroupsPostV1(params *AggregatesNotificationGroupsPostV1Params, opts ...ClientOption) (*AggregatesNotificationGroupsPostV1OK, error)

	AggregatesSlasPostV1(params *AggregatesSlasPostV1Params, opts ...ClientOption) (*AggregatesSlasPostV1OK, error)

	AggregatesTemplatesPostV1(params *AggregatesTemplatesPostV1Params, opts ...ClientOption) (*AggregatesTemplatesPostV1OK, error)

	EntitiesFieldsGetV1(params *EntitiesFieldsGetV1Params, opts ...ClientOption) (*EntitiesFieldsGetV1OK, error)

	EntitiesNotificationGroupsDeleteV1(params *EntitiesNotificationGroupsDeleteV1Params, opts ...ClientOption) (*EntitiesNotificationGroupsDeleteV1OK, error)

	EntitiesNotificationGroupsGetV1(params *EntitiesNotificationGroupsGetV1Params, opts ...ClientOption) (*EntitiesNotificationGroupsGetV1OK, error)

	EntitiesNotificationGroupsPatchV1(params *EntitiesNotificationGroupsPatchV1Params, opts ...ClientOption) (*EntitiesNotificationGroupsPatchV1OK, error)

	EntitiesNotificationGroupsPostV1(params *EntitiesNotificationGroupsPostV1Params, opts ...ClientOption) (*EntitiesNotificationGroupsPostV1OK, error)

	EntitiesSlasDeleteV1(params *EntitiesSlasDeleteV1Params, opts ...ClientOption) (*EntitiesSlasDeleteV1OK, error)

	EntitiesSlasGetV1(params *EntitiesSlasGetV1Params, opts ...ClientOption) (*EntitiesSlasGetV1OK, error)

	EntitiesSlasPatchV1(params *EntitiesSlasPatchV1Params, opts ...ClientOption) (*EntitiesSlasPatchV1OK, error)

	EntitiesSlasPostV1(params *EntitiesSlasPostV1Params, opts ...ClientOption) (*EntitiesSlasPostV1OK, error)

	EntitiesTemplateSnapshotsGetV1(params *EntitiesTemplateSnapshotsGetV1Params, opts ...ClientOption) (*EntitiesTemplateSnapshotsGetV1OK, error)

	EntitiesTemplatesDeleteV1(params *EntitiesTemplatesDeleteV1Params, opts ...ClientOption) (*EntitiesTemplatesDeleteV1OK, error)

	EntitiesTemplatesGetV1(params *EntitiesTemplatesGetV1Params, opts ...ClientOption) (*EntitiesTemplatesGetV1OK, error)

	EntitiesTemplatesPatchV1(params *EntitiesTemplatesPatchV1Params, opts ...ClientOption) (*EntitiesTemplatesPatchV1OK, error)

	EntitiesTemplatesPostV1(params *EntitiesTemplatesPostV1Params, opts ...ClientOption) (*EntitiesTemplatesPostV1OK, error)

	QueriesFieldsGetV1(params *QueriesFieldsGetV1Params, opts ...ClientOption) (*QueriesFieldsGetV1OK, error)

	QueriesNotificationGroupsGetV1(params *QueriesNotificationGroupsGetV1Params, opts ...ClientOption) (*QueriesNotificationGroupsGetV1OK, error)

	QueriesSlasGetV1(params *QueriesSlasGetV1Params, opts ...ClientOption) (*QueriesSlasGetV1OK, error)

	QueriesTemplateSnapshotsGetV1(params *QueriesTemplateSnapshotsGetV1Params, opts ...ClientOption) (*QueriesTemplateSnapshotsGetV1OK, error)

	QueriesTemplatesGetV1(params *QueriesTemplatesGetV1Params, opts ...ClientOption) (*QueriesTemplatesGetV1OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AggregatesNotificationGroupsPostV1 gets notification groups aggregations
*/
func (a *Client) AggregatesNotificationGroupsPostV1(params *AggregatesNotificationGroupsPostV1Params, opts ...ClientOption) (*AggregatesNotificationGroupsPostV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAggregatesNotificationGroupsPostV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "aggregates.notification-groups.post.v1",
		Method:             "POST",
		PathPattern:        "/casemgmt/aggregates/notification-groups/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AggregatesNotificationGroupsPostV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AggregatesNotificationGroupsPostV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for aggregates.notification-groups.post.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AggregatesSlasPostV1 gets SLA aggregations
*/
func (a *Client) AggregatesSlasPostV1(params *AggregatesSlasPostV1Params, opts ...ClientOption) (*AggregatesSlasPostV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAggregatesSlasPostV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "aggregates.slas.post.v1",
		Method:             "POST",
		PathPattern:        "/casemgmt/aggregates/slas/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AggregatesSlasPostV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AggregatesSlasPostV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for aggregates.slas.post.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AggregatesTemplatesPostV1 gets templates aggregations
*/
func (a *Client) AggregatesTemplatesPostV1(params *AggregatesTemplatesPostV1Params, opts ...ClientOption) (*AggregatesTemplatesPostV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAggregatesTemplatesPostV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "aggregates.templates.post.v1",
		Method:             "POST",
		PathPattern:        "/casemgmt/aggregates/templates/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AggregatesTemplatesPostV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AggregatesTemplatesPostV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for aggregates.templates.post.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesFieldsGetV1 gets fields by ID
*/
func (a *Client) EntitiesFieldsGetV1(params *EntitiesFieldsGetV1Params, opts ...ClientOption) (*EntitiesFieldsGetV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesFieldsGetV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.fields.get.v1",
		Method:             "GET",
		PathPattern:        "/casemgmt/entities/fields/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesFieldsGetV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesFieldsGetV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.fields.get.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesNotificationGroupsDeleteV1 deletes notification groups by ID
*/
func (a *Client) EntitiesNotificationGroupsDeleteV1(params *EntitiesNotificationGroupsDeleteV1Params, opts ...ClientOption) (*EntitiesNotificationGroupsDeleteV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesNotificationGroupsDeleteV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.notification-groups.delete.v1",
		Method:             "DELETE",
		PathPattern:        "/casemgmt/entities/notification-groups/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesNotificationGroupsDeleteV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesNotificationGroupsDeleteV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.notification-groups.delete.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesNotificationGroupsGetV1 gets notification groups by ID
*/
func (a *Client) EntitiesNotificationGroupsGetV1(params *EntitiesNotificationGroupsGetV1Params, opts ...ClientOption) (*EntitiesNotificationGroupsGetV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesNotificationGroupsGetV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.notification-groups.get.v1",
		Method:             "GET",
		PathPattern:        "/casemgmt/entities/notification-groups/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesNotificationGroupsGetV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesNotificationGroupsGetV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.notification-groups.get.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesNotificationGroupsPatchV1 updates notification group
*/
func (a *Client) EntitiesNotificationGroupsPatchV1(params *EntitiesNotificationGroupsPatchV1Params, opts ...ClientOption) (*EntitiesNotificationGroupsPatchV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesNotificationGroupsPatchV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.notification-groups.patch.v1",
		Method:             "PATCH",
		PathPattern:        "/casemgmt/entities/notification-groups/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesNotificationGroupsPatchV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesNotificationGroupsPatchV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.notification-groups.patch.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesNotificationGroupsPostV1 creates notification group
*/
func (a *Client) EntitiesNotificationGroupsPostV1(params *EntitiesNotificationGroupsPostV1Params, opts ...ClientOption) (*EntitiesNotificationGroupsPostV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesNotificationGroupsPostV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.notification-groups.post.v1",
		Method:             "POST",
		PathPattern:        "/casemgmt/entities/notification-groups/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesNotificationGroupsPostV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesNotificationGroupsPostV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.notification-groups.post.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesSlasDeleteV1 deletes s l as
*/
func (a *Client) EntitiesSlasDeleteV1(params *EntitiesSlasDeleteV1Params, opts ...ClientOption) (*EntitiesSlasDeleteV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesSlasDeleteV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.slas.delete.v1",
		Method:             "DELETE",
		PathPattern:        "/casemgmt/entities/slas/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesSlasDeleteV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesSlasDeleteV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.slas.delete.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesSlasGetV1 gets s l as by ID
*/
func (a *Client) EntitiesSlasGetV1(params *EntitiesSlasGetV1Params, opts ...ClientOption) (*EntitiesSlasGetV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesSlasGetV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.slas.get.v1",
		Method:             "GET",
		PathPattern:        "/casemgmt/entities/slas/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesSlasGetV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesSlasGetV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.slas.get.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesSlasPatchV1 updates SLA
*/
func (a *Client) EntitiesSlasPatchV1(params *EntitiesSlasPatchV1Params, opts ...ClientOption) (*EntitiesSlasPatchV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesSlasPatchV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.slas.patch.v1",
		Method:             "PATCH",
		PathPattern:        "/casemgmt/entities/slas/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesSlasPatchV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesSlasPatchV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.slas.patch.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesSlasPostV1 creates SLA
*/
func (a *Client) EntitiesSlasPostV1(params *EntitiesSlasPostV1Params, opts ...ClientOption) (*EntitiesSlasPostV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesSlasPostV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.slas.post.v1",
		Method:             "POST",
		PathPattern:        "/casemgmt/entities/slas/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesSlasPostV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesSlasPostV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.slas.post.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesTemplateSnapshotsGetV1 gets template snapshots
*/
func (a *Client) EntitiesTemplateSnapshotsGetV1(params *EntitiesTemplateSnapshotsGetV1Params, opts ...ClientOption) (*EntitiesTemplateSnapshotsGetV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesTemplateSnapshotsGetV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.template-snapshots.get.v1",
		Method:             "GET",
		PathPattern:        "/casemgmt/entities/template-snapshots/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesTemplateSnapshotsGetV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesTemplateSnapshotsGetV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.template-snapshots.get.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesTemplatesDeleteV1 deletes templates
*/
func (a *Client) EntitiesTemplatesDeleteV1(params *EntitiesTemplatesDeleteV1Params, opts ...ClientOption) (*EntitiesTemplatesDeleteV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesTemplatesDeleteV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.templates.delete.v1",
		Method:             "DELETE",
		PathPattern:        "/casemgmt/entities/templates/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesTemplatesDeleteV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesTemplatesDeleteV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.templates.delete.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesTemplatesGetV1 gets templates by ID
*/
func (a *Client) EntitiesTemplatesGetV1(params *EntitiesTemplatesGetV1Params, opts ...ClientOption) (*EntitiesTemplatesGetV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesTemplatesGetV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.templates.get.v1",
		Method:             "GET",
		PathPattern:        "/casemgmt/entities/templates/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesTemplatesGetV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesTemplatesGetV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.templates.get.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesTemplatesPatchV1 updates template
*/
func (a *Client) EntitiesTemplatesPatchV1(params *EntitiesTemplatesPatchV1Params, opts ...ClientOption) (*EntitiesTemplatesPatchV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesTemplatesPatchV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.templates.patch.v1",
		Method:             "PATCH",
		PathPattern:        "/casemgmt/entities/templates/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesTemplatesPatchV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesTemplatesPatchV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.templates.patch.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesTemplatesPostV1 creates template
*/
func (a *Client) EntitiesTemplatesPostV1(params *EntitiesTemplatesPostV1Params, opts ...ClientOption) (*EntitiesTemplatesPostV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesTemplatesPostV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities.templates.post.v1",
		Method:             "POST",
		PathPattern:        "/casemgmt/entities/templates/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesTemplatesPostV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesTemplatesPostV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities.templates.post.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueriesFieldsGetV1 queries fields
*/
func (a *Client) QueriesFieldsGetV1(params *QueriesFieldsGetV1Params, opts ...ClientOption) (*QueriesFieldsGetV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueriesFieldsGetV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "queries.fields.get.v1",
		Method:             "GET",
		PathPattern:        "/casemgmt/queries/fields/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueriesFieldsGetV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueriesFieldsGetV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queries.fields.get.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueriesNotificationGroupsGetV1 queries notification groups
*/
func (a *Client) QueriesNotificationGroupsGetV1(params *QueriesNotificationGroupsGetV1Params, opts ...ClientOption) (*QueriesNotificationGroupsGetV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueriesNotificationGroupsGetV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "queries.notification-groups.get.v1",
		Method:             "GET",
		PathPattern:        "/casemgmt/queries/notification-groups/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueriesNotificationGroupsGetV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueriesNotificationGroupsGetV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queries.notification-groups.get.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueriesSlasGetV1 queries s l as
*/
func (a *Client) QueriesSlasGetV1(params *QueriesSlasGetV1Params, opts ...ClientOption) (*QueriesSlasGetV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueriesSlasGetV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "queries.slas.get.v1",
		Method:             "GET",
		PathPattern:        "/casemgmt/queries/slas/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueriesSlasGetV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueriesSlasGetV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queries.slas.get.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueriesTemplateSnapshotsGetV1 queries template snapshots
*/
func (a *Client) QueriesTemplateSnapshotsGetV1(params *QueriesTemplateSnapshotsGetV1Params, opts ...ClientOption) (*QueriesTemplateSnapshotsGetV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueriesTemplateSnapshotsGetV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "queries.template-snapshots.get.v1",
		Method:             "GET",
		PathPattern:        "/casemgmt/queries/template-snapshots/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueriesTemplateSnapshotsGetV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueriesTemplateSnapshotsGetV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queries.template-snapshots.get.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueriesTemplatesGetV1 queries templates
*/
func (a *Client) QueriesTemplatesGetV1(params *QueriesTemplatesGetV1Params, opts ...ClientOption) (*QueriesTemplatesGetV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueriesTemplatesGetV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "queries.templates.get.v1",
		Method:             "GET",
		PathPattern:        "/casemgmt/queries/templates/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueriesTemplatesGetV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueriesTemplatesGetV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queries.templates.get.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
