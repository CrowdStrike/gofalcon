// Code generated by go-swagger; DO NOT EDIT.

package case_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewEntitiesTemplateSnapshotsGetV1Params creates a new EntitiesTemplateSnapshotsGetV1Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewEntitiesTemplateSnapshotsGetV1Params() *EntitiesTemplateSnapshotsGetV1Params {
	return &EntitiesTemplateSnapshotsGetV1Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewEntitiesTemplateSnapshotsGetV1ParamsWithTimeout creates a new EntitiesTemplateSnapshotsGetV1Params object
// with the ability to set a timeout on a request.
func NewEntitiesTemplateSnapshotsGetV1ParamsWithTimeout(timeout time.Duration) *EntitiesTemplateSnapshotsGetV1Params {
	return &EntitiesTemplateSnapshotsGetV1Params{
		timeout: timeout,
	}
}

// NewEntitiesTemplateSnapshotsGetV1ParamsWithContext creates a new EntitiesTemplateSnapshotsGetV1Params object
// with the ability to set a context for a request.
func NewEntitiesTemplateSnapshotsGetV1ParamsWithContext(ctx context.Context) *EntitiesTemplateSnapshotsGetV1Params {
	return &EntitiesTemplateSnapshotsGetV1Params{
		Context: ctx,
	}
}

// NewEntitiesTemplateSnapshotsGetV1ParamsWithHTTPClient creates a new EntitiesTemplateSnapshotsGetV1Params object
// with the ability to set a custom HTTPClient for a request.
func NewEntitiesTemplateSnapshotsGetV1ParamsWithHTTPClient(client *http.Client) *EntitiesTemplateSnapshotsGetV1Params {
	return &EntitiesTemplateSnapshotsGetV1Params{
		HTTPClient: client,
	}
}

/*
EntitiesTemplateSnapshotsGetV1Params contains all the parameters to send to the API endpoint

	for the entities template snapshots get v1 operation.

	Typically these are written to a http.Request.
*/
type EntitiesTemplateSnapshotsGetV1Params struct {

	/* Ids.

	   Snapshot IDs
	*/
	Ids []string

	/* TemplateIds.

	   Retrieves the latest snapshot for all Template IDs
	*/
	TemplateIds []string

	/* Versions.

	   Retrieve a specific version of the template from the parallel array `template_ids`. A value of zero will return the latest snapshot.
	*/
	Versions []int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the entities template snapshots get v1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EntitiesTemplateSnapshotsGetV1Params) WithDefaults() *EntitiesTemplateSnapshotsGetV1Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the entities template snapshots get v1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EntitiesTemplateSnapshotsGetV1Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the entities template snapshots get v1 params
func (o *EntitiesTemplateSnapshotsGetV1Params) WithTimeout(timeout time.Duration) *EntitiesTemplateSnapshotsGetV1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the entities template snapshots get v1 params
func (o *EntitiesTemplateSnapshotsGetV1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the entities template snapshots get v1 params
func (o *EntitiesTemplateSnapshotsGetV1Params) WithContext(ctx context.Context) *EntitiesTemplateSnapshotsGetV1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the entities template snapshots get v1 params
func (o *EntitiesTemplateSnapshotsGetV1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the entities template snapshots get v1 params
func (o *EntitiesTemplateSnapshotsGetV1Params) WithHTTPClient(client *http.Client) *EntitiesTemplateSnapshotsGetV1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the entities template snapshots get v1 params
func (o *EntitiesTemplateSnapshotsGetV1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIds adds the ids to the entities template snapshots get v1 params
func (o *EntitiesTemplateSnapshotsGetV1Params) WithIds(ids []string) *EntitiesTemplateSnapshotsGetV1Params {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the entities template snapshots get v1 params
func (o *EntitiesTemplateSnapshotsGetV1Params) SetIds(ids []string) {
	o.Ids = ids
}

// WithTemplateIds adds the templateIds to the entities template snapshots get v1 params
func (o *EntitiesTemplateSnapshotsGetV1Params) WithTemplateIds(templateIds []string) *EntitiesTemplateSnapshotsGetV1Params {
	o.SetTemplateIds(templateIds)
	return o
}

// SetTemplateIds adds the templateIds to the entities template snapshots get v1 params
func (o *EntitiesTemplateSnapshotsGetV1Params) SetTemplateIds(templateIds []string) {
	o.TemplateIds = templateIds
}

// WithVersions adds the versions to the entities template snapshots get v1 params
func (o *EntitiesTemplateSnapshotsGetV1Params) WithVersions(versions []int64) *EntitiesTemplateSnapshotsGetV1Params {
	o.SetVersions(versions)
	return o
}

// SetVersions adds the versions to the entities template snapshots get v1 params
func (o *EntitiesTemplateSnapshotsGetV1Params) SetVersions(versions []int64) {
	o.Versions = versions
}

// WriteToRequest writes these params to a swagger request
func (o *EntitiesTemplateSnapshotsGetV1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.TemplateIds != nil {

		// binding items for template_ids
		joinedTemplateIds := o.bindParamTemplateIds(reg)

		// query array param template_ids
		if err := r.SetQueryParam("template_ids", joinedTemplateIds...); err != nil {
			return err
		}
	}

	if o.Versions != nil {

		// binding items for versions
		joinedVersions := o.bindParamVersions(reg)

		// query array param versions
		if err := r.SetQueryParam("versions", joinedVersions...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamEntitiesTemplateSnapshotsGetV1 binds the parameter ids
func (o *EntitiesTemplateSnapshotsGetV1Params) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []string

		idsIIV := idsIIR // string as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: "multi"
	idsIS := swag.JoinByFormat(idsIC, "multi")

	return idsIS
}

// bindParamEntitiesTemplateSnapshotsGetV1 binds the parameter template_ids
func (o *EntitiesTemplateSnapshotsGetV1Params) bindParamTemplateIds(formats strfmt.Registry) []string {
	templateIdsIR := o.TemplateIds

	var templateIdsIC []string
	for _, templateIdsIIR := range templateIdsIR { // explode []string

		templateIdsIIV := templateIdsIIR // string as string
		templateIdsIC = append(templateIdsIC, templateIdsIIV)
	}

	// items.CollectionFormat: "multi"
	templateIdsIS := swag.JoinByFormat(templateIdsIC, "multi")

	return templateIdsIS
}

// bindParamEntitiesTemplateSnapshotsGetV1 binds the parameter versions
func (o *EntitiesTemplateSnapshotsGetV1Params) bindParamVersions(formats strfmt.Registry) []string {
	versionsIR := o.Versions

	var versionsIC []string
	for _, versionsIIR := range versionsIR { // explode []int64

		versionsIIV := swag.FormatInt64(versionsIIR) // int64 as string
		versionsIC = append(versionsIC, versionsIIV)
	}

	// items.CollectionFormat: "multi"
	versionsIS := swag.JoinByFormat(versionsIC, "multi")

	return versionsIS
}
