// Code generated by go-swagger; DO NOT EDIT.

package correlation_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new correlation rules API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for correlation rules API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CombinedRulesGetV1(params *CombinedRulesGetV1Params, opts ...ClientOption) (*CombinedRulesGetV1OK, error)

	EntitiesRulesDeleteV1(params *EntitiesRulesDeleteV1Params, opts ...ClientOption) (*EntitiesRulesDeleteV1OK, error)

	EntitiesRulesGetV1(params *EntitiesRulesGetV1Params, opts ...ClientOption) (*EntitiesRulesGetV1OK, error)

	EntitiesRulesPostV1(params *EntitiesRulesPostV1Params, opts ...ClientOption) (*EntitiesRulesPostV1OK, error)

	QueriesRulesGetV1(params *QueriesRulesGetV1Params, opts ...ClientOption) (*QueriesRulesGetV1OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CombinedRulesGetV1 finds all rules matching the query and filter supported filters customer id user id user uuid status name created on last updated on supported range filters created on last updated on
*/
func (a *Client) CombinedRulesGetV1(params *CombinedRulesGetV1Params, opts ...ClientOption) (*CombinedRulesGetV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCombinedRulesGetV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "combined_rules.get.v1",
		Method:             "GET",
		PathPattern:        "/correlation-rules/combined/rules/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CombinedRulesGetV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CombinedRulesGetV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for combined_rules.get.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesRulesDeleteV1 deletes rules by i ds
*/
func (a *Client) EntitiesRulesDeleteV1(params *EntitiesRulesDeleteV1Params, opts ...ClientOption) (*EntitiesRulesDeleteV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesRulesDeleteV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities_rules.delete.v1",
		Method:             "DELETE",
		PathPattern:        "/correlation-rules/entities/rules/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesRulesDeleteV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesRulesDeleteV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities_rules.delete.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesRulesGetV1 retrieves rules by i ds
*/
func (a *Client) EntitiesRulesGetV1(params *EntitiesRulesGetV1Params, opts ...ClientOption) (*EntitiesRulesGetV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesRulesGetV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities_rules.get.v1",
		Method:             "GET",
		PathPattern:        "/correlation-rules/entities/rules/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesRulesGetV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesRulesGetV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities_rules.get.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EntitiesRulesPostV1 creates rule
*/
func (a *Client) EntitiesRulesPostV1(params *EntitiesRulesPostV1Params, opts ...ClientOption) (*EntitiesRulesPostV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEntitiesRulesPostV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "entities_rules.post.v1",
		Method:             "POST",
		PathPattern:        "/correlation-rules/entities/rules/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EntitiesRulesPostV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EntitiesRulesPostV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for entities_rules.post.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueriesRulesGetV1 finds all rule i ds matching the query and filter supported filters customer id user id user uuid status name created on last updated on supported range filters created on last updated on
*/
func (a *Client) QueriesRulesGetV1(params *QueriesRulesGetV1Params, opts ...ClientOption) (*QueriesRulesGetV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueriesRulesGetV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "queries_rules.get.v1",
		Method:             "GET",
		PathPattern:        "/correlation-rules/queries/rules/v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueriesRulesGetV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueriesRulesGetV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queries_rules.get.v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
